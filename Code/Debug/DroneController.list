
DroneController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011440  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a10  080115e0  080115e0  000125e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011ff0  08011ff0  000132c4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011ff0  08011ff0  00012ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011ff8  08011ff8  000132c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011ff8  08011ff8  00012ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011ffc  08011ffc  00012ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002c4  20000000  08012000  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000023f8  200002c8  080122c4  000132c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200026c0  080122c4  000136c0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018637  00000000  00000000  000132f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000425b  00000000  00000000  0002b92b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0002fb88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ea9  00000000  00000000  00030ed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001aae5  00000000  00000000  00031d79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019a4c  00000000  00000000  0004c85e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f3a8  00000000  00000000  000662aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f5652  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000065a4  00000000  00000000  000f5698  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000fbc3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002c8 	.word	0x200002c8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080115c8 	.word	0x080115c8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002cc 	.word	0x200002cc
 80001dc:	080115c8 	.word	0x080115c8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_ldivmod>:
 8000c98:	b97b      	cbnz	r3, 8000cba <__aeabi_ldivmod+0x22>
 8000c9a:	b972      	cbnz	r2, 8000cba <__aeabi_ldivmod+0x22>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bfbe      	ittt	lt
 8000ca0:	2000      	movlt	r0, #0
 8000ca2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000ca6:	e006      	blt.n	8000cb6 <__aeabi_ldivmod+0x1e>
 8000ca8:	bf08      	it	eq
 8000caa:	2800      	cmpeq	r0, #0
 8000cac:	bf1c      	itt	ne
 8000cae:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000cb2:	f04f 30ff 	movne.w	r0, #4294967295
 8000cb6:	f000 ba09 	b.w	80010cc <__aeabi_idiv0>
 8000cba:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cbe:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	db09      	blt.n	8000cda <__aeabi_ldivmod+0x42>
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	db1a      	blt.n	8000d00 <__aeabi_ldivmod+0x68>
 8000cca:	f000 f883 	bl	8000dd4 <__udivmoddi4>
 8000cce:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cd2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cd6:	b004      	add	sp, #16
 8000cd8:	4770      	bx	lr
 8000cda:	4240      	negs	r0, r0
 8000cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	db1b      	blt.n	8000d1c <__aeabi_ldivmod+0x84>
 8000ce4:	f000 f876 	bl	8000dd4 <__udivmoddi4>
 8000ce8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cec:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf0:	b004      	add	sp, #16
 8000cf2:	4240      	negs	r0, r0
 8000cf4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf8:	4252      	negs	r2, r2
 8000cfa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cfe:	4770      	bx	lr
 8000d00:	4252      	negs	r2, r2
 8000d02:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d06:	f000 f865 	bl	8000dd4 <__udivmoddi4>
 8000d0a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d0e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d12:	b004      	add	sp, #16
 8000d14:	4240      	negs	r0, r0
 8000d16:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1a:	4770      	bx	lr
 8000d1c:	4252      	negs	r2, r2
 8000d1e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d22:	f000 f857 	bl	8000dd4 <__udivmoddi4>
 8000d26:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d2a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d2e:	b004      	add	sp, #16
 8000d30:	4252      	negs	r2, r2
 8000d32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000d36:	4770      	bx	lr

08000d38 <__aeabi_uldivmod>:
 8000d38:	b953      	cbnz	r3, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3a:	b94a      	cbnz	r2, 8000d50 <__aeabi_uldivmod+0x18>
 8000d3c:	2900      	cmp	r1, #0
 8000d3e:	bf08      	it	eq
 8000d40:	2800      	cmpeq	r0, #0
 8000d42:	bf1c      	itt	ne
 8000d44:	f04f 31ff 	movne.w	r1, #4294967295
 8000d48:	f04f 30ff 	movne.w	r0, #4294967295
 8000d4c:	f000 b9be 	b.w	80010cc <__aeabi_idiv0>
 8000d50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d58:	f000 f83c 	bl	8000dd4 <__udivmoddi4>
 8000d5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d64:	b004      	add	sp, #16
 8000d66:	4770      	bx	lr

08000d68 <__aeabi_d2lz>:
 8000d68:	b538      	push	{r3, r4, r5, lr}
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	4604      	mov	r4, r0
 8000d70:	460d      	mov	r5, r1
 8000d72:	f7ff febb 	bl	8000aec <__aeabi_dcmplt>
 8000d76:	b928      	cbnz	r0, 8000d84 <__aeabi_d2lz+0x1c>
 8000d78:	4620      	mov	r0, r4
 8000d7a:	4629      	mov	r1, r5
 8000d7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d80:	f000 b80a 	b.w	8000d98 <__aeabi_d2ulz>
 8000d84:	4620      	mov	r0, r4
 8000d86:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000d8a:	f000 f805 	bl	8000d98 <__aeabi_d2ulz>
 8000d8e:	4240      	negs	r0, r0
 8000d90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d94:	bd38      	pop	{r3, r4, r5, pc}
 8000d96:	bf00      	nop

08000d98 <__aeabi_d2ulz>:
 8000d98:	b5d0      	push	{r4, r6, r7, lr}
 8000d9a:	4b0c      	ldr	r3, [pc, #48]	@ (8000dcc <__aeabi_d2ulz+0x34>)
 8000d9c:	2200      	movs	r2, #0
 8000d9e:	4606      	mov	r6, r0
 8000da0:	460f      	mov	r7, r1
 8000da2:	f7ff fc31 	bl	8000608 <__aeabi_dmul>
 8000da6:	f7ff ff07 	bl	8000bb8 <__aeabi_d2uiz>
 8000daa:	4604      	mov	r4, r0
 8000dac:	f7ff fbb2 	bl	8000514 <__aeabi_ui2d>
 8000db0:	4b07      	ldr	r3, [pc, #28]	@ (8000dd0 <__aeabi_d2ulz+0x38>)
 8000db2:	2200      	movs	r2, #0
 8000db4:	f7ff fc28 	bl	8000608 <__aeabi_dmul>
 8000db8:	4602      	mov	r2, r0
 8000dba:	460b      	mov	r3, r1
 8000dbc:	4630      	mov	r0, r6
 8000dbe:	4639      	mov	r1, r7
 8000dc0:	f7ff fa6a 	bl	8000298 <__aeabi_dsub>
 8000dc4:	f7ff fef8 	bl	8000bb8 <__aeabi_d2uiz>
 8000dc8:	4621      	mov	r1, r4
 8000dca:	bdd0      	pop	{r4, r6, r7, pc}
 8000dcc:	3df00000 	.word	0x3df00000
 8000dd0:	41f00000 	.word	0x41f00000

08000dd4 <__udivmoddi4>:
 8000dd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000dd8:	9d08      	ldr	r5, [sp, #32]
 8000dda:	468e      	mov	lr, r1
 8000ddc:	4604      	mov	r4, r0
 8000dde:	4688      	mov	r8, r1
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	d14a      	bne.n	8000e7a <__udivmoddi4+0xa6>
 8000de4:	428a      	cmp	r2, r1
 8000de6:	4617      	mov	r7, r2
 8000de8:	d962      	bls.n	8000eb0 <__udivmoddi4+0xdc>
 8000dea:	fab2 f682 	clz	r6, r2
 8000dee:	b14e      	cbz	r6, 8000e04 <__udivmoddi4+0x30>
 8000df0:	f1c6 0320 	rsb	r3, r6, #32
 8000df4:	fa01 f806 	lsl.w	r8, r1, r6
 8000df8:	fa20 f303 	lsr.w	r3, r0, r3
 8000dfc:	40b7      	lsls	r7, r6
 8000dfe:	ea43 0808 	orr.w	r8, r3, r8
 8000e02:	40b4      	lsls	r4, r6
 8000e04:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e08:	fa1f fc87 	uxth.w	ip, r7
 8000e0c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000e10:	0c23      	lsrs	r3, r4, #16
 8000e12:	fb0e 8811 	mls	r8, lr, r1, r8
 8000e16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e1a:	fb01 f20c 	mul.w	r2, r1, ip
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d909      	bls.n	8000e36 <__udivmoddi4+0x62>
 8000e22:	18fb      	adds	r3, r7, r3
 8000e24:	f101 30ff 	add.w	r0, r1, #4294967295
 8000e28:	f080 80ea 	bcs.w	8001000 <__udivmoddi4+0x22c>
 8000e2c:	429a      	cmp	r2, r3
 8000e2e:	f240 80e7 	bls.w	8001000 <__udivmoddi4+0x22c>
 8000e32:	3902      	subs	r1, #2
 8000e34:	443b      	add	r3, r7
 8000e36:	1a9a      	subs	r2, r3, r2
 8000e38:	b2a3      	uxth	r3, r4
 8000e3a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000e3e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000e42:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e46:	fb00 fc0c 	mul.w	ip, r0, ip
 8000e4a:	459c      	cmp	ip, r3
 8000e4c:	d909      	bls.n	8000e62 <__udivmoddi4+0x8e>
 8000e4e:	18fb      	adds	r3, r7, r3
 8000e50:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e54:	f080 80d6 	bcs.w	8001004 <__udivmoddi4+0x230>
 8000e58:	459c      	cmp	ip, r3
 8000e5a:	f240 80d3 	bls.w	8001004 <__udivmoddi4+0x230>
 8000e5e:	443b      	add	r3, r7
 8000e60:	3802      	subs	r0, #2
 8000e62:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e66:	eba3 030c 	sub.w	r3, r3, ip
 8000e6a:	2100      	movs	r1, #0
 8000e6c:	b11d      	cbz	r5, 8000e76 <__udivmoddi4+0xa2>
 8000e6e:	40f3      	lsrs	r3, r6
 8000e70:	2200      	movs	r2, #0
 8000e72:	e9c5 3200 	strd	r3, r2, [r5]
 8000e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d905      	bls.n	8000e8a <__udivmoddi4+0xb6>
 8000e7e:	b10d      	cbz	r5, 8000e84 <__udivmoddi4+0xb0>
 8000e80:	e9c5 0100 	strd	r0, r1, [r5]
 8000e84:	2100      	movs	r1, #0
 8000e86:	4608      	mov	r0, r1
 8000e88:	e7f5      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000e8a:	fab3 f183 	clz	r1, r3
 8000e8e:	2900      	cmp	r1, #0
 8000e90:	d146      	bne.n	8000f20 <__udivmoddi4+0x14c>
 8000e92:	4573      	cmp	r3, lr
 8000e94:	d302      	bcc.n	8000e9c <__udivmoddi4+0xc8>
 8000e96:	4282      	cmp	r2, r0
 8000e98:	f200 8105 	bhi.w	80010a6 <__udivmoddi4+0x2d2>
 8000e9c:	1a84      	subs	r4, r0, r2
 8000e9e:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ea2:	2001      	movs	r0, #1
 8000ea4:	4690      	mov	r8, r2
 8000ea6:	2d00      	cmp	r5, #0
 8000ea8:	d0e5      	beq.n	8000e76 <__udivmoddi4+0xa2>
 8000eaa:	e9c5 4800 	strd	r4, r8, [r5]
 8000eae:	e7e2      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000eb0:	2a00      	cmp	r2, #0
 8000eb2:	f000 8090 	beq.w	8000fd6 <__udivmoddi4+0x202>
 8000eb6:	fab2 f682 	clz	r6, r2
 8000eba:	2e00      	cmp	r6, #0
 8000ebc:	f040 80a4 	bne.w	8001008 <__udivmoddi4+0x234>
 8000ec0:	1a8a      	subs	r2, r1, r2
 8000ec2:	0c03      	lsrs	r3, r0, #16
 8000ec4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ec8:	b280      	uxth	r0, r0
 8000eca:	b2bc      	uxth	r4, r7
 8000ecc:	2101      	movs	r1, #1
 8000ece:	fbb2 fcfe 	udiv	ip, r2, lr
 8000ed2:	fb0e 221c 	mls	r2, lr, ip, r2
 8000ed6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000eda:	fb04 f20c 	mul.w	r2, r4, ip
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	d907      	bls.n	8000ef2 <__udivmoddi4+0x11e>
 8000ee2:	18fb      	adds	r3, r7, r3
 8000ee4:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000ee8:	d202      	bcs.n	8000ef0 <__udivmoddi4+0x11c>
 8000eea:	429a      	cmp	r2, r3
 8000eec:	f200 80e0 	bhi.w	80010b0 <__udivmoddi4+0x2dc>
 8000ef0:	46c4      	mov	ip, r8
 8000ef2:	1a9b      	subs	r3, r3, r2
 8000ef4:	fbb3 f2fe 	udiv	r2, r3, lr
 8000ef8:	fb0e 3312 	mls	r3, lr, r2, r3
 8000efc:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000f00:	fb02 f404 	mul.w	r4, r2, r4
 8000f04:	429c      	cmp	r4, r3
 8000f06:	d907      	bls.n	8000f18 <__udivmoddi4+0x144>
 8000f08:	18fb      	adds	r3, r7, r3
 8000f0a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000f0e:	d202      	bcs.n	8000f16 <__udivmoddi4+0x142>
 8000f10:	429c      	cmp	r4, r3
 8000f12:	f200 80ca 	bhi.w	80010aa <__udivmoddi4+0x2d6>
 8000f16:	4602      	mov	r2, r0
 8000f18:	1b1b      	subs	r3, r3, r4
 8000f1a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000f1e:	e7a5      	b.n	8000e6c <__udivmoddi4+0x98>
 8000f20:	f1c1 0620 	rsb	r6, r1, #32
 8000f24:	408b      	lsls	r3, r1
 8000f26:	fa22 f706 	lsr.w	r7, r2, r6
 8000f2a:	431f      	orrs	r7, r3
 8000f2c:	fa0e f401 	lsl.w	r4, lr, r1
 8000f30:	fa20 f306 	lsr.w	r3, r0, r6
 8000f34:	fa2e fe06 	lsr.w	lr, lr, r6
 8000f38:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000f3c:	4323      	orrs	r3, r4
 8000f3e:	fa00 f801 	lsl.w	r8, r0, r1
 8000f42:	fa1f fc87 	uxth.w	ip, r7
 8000f46:	fbbe f0f9 	udiv	r0, lr, r9
 8000f4a:	0c1c      	lsrs	r4, r3, #16
 8000f4c:	fb09 ee10 	mls	lr, r9, r0, lr
 8000f50:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000f54:	fb00 fe0c 	mul.w	lr, r0, ip
 8000f58:	45a6      	cmp	lr, r4
 8000f5a:	fa02 f201 	lsl.w	r2, r2, r1
 8000f5e:	d909      	bls.n	8000f74 <__udivmoddi4+0x1a0>
 8000f60:	193c      	adds	r4, r7, r4
 8000f62:	f100 3aff 	add.w	sl, r0, #4294967295
 8000f66:	f080 809c 	bcs.w	80010a2 <__udivmoddi4+0x2ce>
 8000f6a:	45a6      	cmp	lr, r4
 8000f6c:	f240 8099 	bls.w	80010a2 <__udivmoddi4+0x2ce>
 8000f70:	3802      	subs	r0, #2
 8000f72:	443c      	add	r4, r7
 8000f74:	eba4 040e 	sub.w	r4, r4, lr
 8000f78:	fa1f fe83 	uxth.w	lr, r3
 8000f7c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f80:	fb09 4413 	mls	r4, r9, r3, r4
 8000f84:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000f88:	fb03 fc0c 	mul.w	ip, r3, ip
 8000f8c:	45a4      	cmp	ip, r4
 8000f8e:	d908      	bls.n	8000fa2 <__udivmoddi4+0x1ce>
 8000f90:	193c      	adds	r4, r7, r4
 8000f92:	f103 3eff 	add.w	lr, r3, #4294967295
 8000f96:	f080 8082 	bcs.w	800109e <__udivmoddi4+0x2ca>
 8000f9a:	45a4      	cmp	ip, r4
 8000f9c:	d97f      	bls.n	800109e <__udivmoddi4+0x2ca>
 8000f9e:	3b02      	subs	r3, #2
 8000fa0:	443c      	add	r4, r7
 8000fa2:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000fa6:	eba4 040c 	sub.w	r4, r4, ip
 8000faa:	fba0 ec02 	umull	lr, ip, r0, r2
 8000fae:	4564      	cmp	r4, ip
 8000fb0:	4673      	mov	r3, lr
 8000fb2:	46e1      	mov	r9, ip
 8000fb4:	d362      	bcc.n	800107c <__udivmoddi4+0x2a8>
 8000fb6:	d05f      	beq.n	8001078 <__udivmoddi4+0x2a4>
 8000fb8:	b15d      	cbz	r5, 8000fd2 <__udivmoddi4+0x1fe>
 8000fba:	ebb8 0203 	subs.w	r2, r8, r3
 8000fbe:	eb64 0409 	sbc.w	r4, r4, r9
 8000fc2:	fa04 f606 	lsl.w	r6, r4, r6
 8000fc6:	fa22 f301 	lsr.w	r3, r2, r1
 8000fca:	431e      	orrs	r6, r3
 8000fcc:	40cc      	lsrs	r4, r1
 8000fce:	e9c5 6400 	strd	r6, r4, [r5]
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	e74f      	b.n	8000e76 <__udivmoddi4+0xa2>
 8000fd6:	fbb1 fcf2 	udiv	ip, r1, r2
 8000fda:	0c01      	lsrs	r1, r0, #16
 8000fdc:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000fe0:	b280      	uxth	r0, r0
 8000fe2:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4638      	mov	r0, r7
 8000fea:	463c      	mov	r4, r7
 8000fec:	46b8      	mov	r8, r7
 8000fee:	46be      	mov	lr, r7
 8000ff0:	2620      	movs	r6, #32
 8000ff2:	fbb1 f1f7 	udiv	r1, r1, r7
 8000ff6:	eba2 0208 	sub.w	r2, r2, r8
 8000ffa:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000ffe:	e766      	b.n	8000ece <__udivmoddi4+0xfa>
 8001000:	4601      	mov	r1, r0
 8001002:	e718      	b.n	8000e36 <__udivmoddi4+0x62>
 8001004:	4610      	mov	r0, r2
 8001006:	e72c      	b.n	8000e62 <__udivmoddi4+0x8e>
 8001008:	f1c6 0220 	rsb	r2, r6, #32
 800100c:	fa2e f302 	lsr.w	r3, lr, r2
 8001010:	40b7      	lsls	r7, r6
 8001012:	40b1      	lsls	r1, r6
 8001014:	fa20 f202 	lsr.w	r2, r0, r2
 8001018:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800101c:	430a      	orrs	r2, r1
 800101e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001022:	b2bc      	uxth	r4, r7
 8001024:	fb0e 3318 	mls	r3, lr, r8, r3
 8001028:	0c11      	lsrs	r1, r2, #16
 800102a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800102e:	fb08 f904 	mul.w	r9, r8, r4
 8001032:	40b0      	lsls	r0, r6
 8001034:	4589      	cmp	r9, r1
 8001036:	ea4f 4310 	mov.w	r3, r0, lsr #16
 800103a:	b280      	uxth	r0, r0
 800103c:	d93e      	bls.n	80010bc <__udivmoddi4+0x2e8>
 800103e:	1879      	adds	r1, r7, r1
 8001040:	f108 3cff 	add.w	ip, r8, #4294967295
 8001044:	d201      	bcs.n	800104a <__udivmoddi4+0x276>
 8001046:	4589      	cmp	r9, r1
 8001048:	d81f      	bhi.n	800108a <__udivmoddi4+0x2b6>
 800104a:	eba1 0109 	sub.w	r1, r1, r9
 800104e:	fbb1 f9fe 	udiv	r9, r1, lr
 8001052:	fb09 f804 	mul.w	r8, r9, r4
 8001056:	fb0e 1119 	mls	r1, lr, r9, r1
 800105a:	b292      	uxth	r2, r2
 800105c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001060:	4542      	cmp	r2, r8
 8001062:	d229      	bcs.n	80010b8 <__udivmoddi4+0x2e4>
 8001064:	18ba      	adds	r2, r7, r2
 8001066:	f109 31ff 	add.w	r1, r9, #4294967295
 800106a:	d2c4      	bcs.n	8000ff6 <__udivmoddi4+0x222>
 800106c:	4542      	cmp	r2, r8
 800106e:	d2c2      	bcs.n	8000ff6 <__udivmoddi4+0x222>
 8001070:	f1a9 0102 	sub.w	r1, r9, #2
 8001074:	443a      	add	r2, r7
 8001076:	e7be      	b.n	8000ff6 <__udivmoddi4+0x222>
 8001078:	45f0      	cmp	r8, lr
 800107a:	d29d      	bcs.n	8000fb8 <__udivmoddi4+0x1e4>
 800107c:	ebbe 0302 	subs.w	r3, lr, r2
 8001080:	eb6c 0c07 	sbc.w	ip, ip, r7
 8001084:	3801      	subs	r0, #1
 8001086:	46e1      	mov	r9, ip
 8001088:	e796      	b.n	8000fb8 <__udivmoddi4+0x1e4>
 800108a:	eba7 0909 	sub.w	r9, r7, r9
 800108e:	4449      	add	r1, r9
 8001090:	f1a8 0c02 	sub.w	ip, r8, #2
 8001094:	fbb1 f9fe 	udiv	r9, r1, lr
 8001098:	fb09 f804 	mul.w	r8, r9, r4
 800109c:	e7db      	b.n	8001056 <__udivmoddi4+0x282>
 800109e:	4673      	mov	r3, lr
 80010a0:	e77f      	b.n	8000fa2 <__udivmoddi4+0x1ce>
 80010a2:	4650      	mov	r0, sl
 80010a4:	e766      	b.n	8000f74 <__udivmoddi4+0x1a0>
 80010a6:	4608      	mov	r0, r1
 80010a8:	e6fd      	b.n	8000ea6 <__udivmoddi4+0xd2>
 80010aa:	443b      	add	r3, r7
 80010ac:	3a02      	subs	r2, #2
 80010ae:	e733      	b.n	8000f18 <__udivmoddi4+0x144>
 80010b0:	f1ac 0c02 	sub.w	ip, ip, #2
 80010b4:	443b      	add	r3, r7
 80010b6:	e71c      	b.n	8000ef2 <__udivmoddi4+0x11e>
 80010b8:	4649      	mov	r1, r9
 80010ba:	e79c      	b.n	8000ff6 <__udivmoddi4+0x222>
 80010bc:	eba1 0109 	sub.w	r1, r1, r9
 80010c0:	46c4      	mov	ip, r8
 80010c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80010c6:	fb09 f804 	mul.w	r8, r9, r4
 80010ca:	e7c4      	b.n	8001056 <__udivmoddi4+0x282>

080010cc <__aeabi_idiv0>:
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop

080010d0 <CS_L>:
#include "bmp280.h"
#include <string.h>
#include <math.h>

/* ---- local helpers ---- */
static inline void CS_L(BMP280_HandleTypeDef *dev) { HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET); }
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6858      	ldr	r0, [r3, #4]
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	891b      	ldrh	r3, [r3, #8]
 80010e0:	2200      	movs	r2, #0
 80010e2:	4619      	mov	r1, r3
 80010e4:	f003 fe7a 	bl	8004ddc <HAL_GPIO_WritePin>
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <CS_H>:
static inline void CS_H(BMP280_HandleTypeDef *dev) { HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET); }
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6858      	ldr	r0, [r3, #4]
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	891b      	ldrh	r3, [r3, #8]
 8001100:	2201      	movs	r2, #1
 8001102:	4619      	mov	r1, r3
 8001104:	f003 fe6a 	bl	8004ddc <HAL_GPIO_WritePin>
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <bmp280_write_reg>:

/* SPI: in BMP280, MSB of address is replaced by R/W bit: 1=read, 0=write */
static HAL_StatusTypeDef bmp280_write_reg(BMP280_HandleTypeDef *dev, uint8_t reg, uint8_t val) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	460b      	mov	r3, r1
 800111a:	70fb      	strb	r3, [r7, #3]
 800111c:	4613      	mov	r3, r2
 800111e:	70bb      	strb	r3, [r7, #2]
  uint8_t tx[2];
  tx[0] = (reg & 0x7F); // RW=0
 8001120:	78fb      	ldrb	r3, [r7, #3]
 8001122:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001126:	b2db      	uxtb	r3, r3
 8001128:	733b      	strb	r3, [r7, #12]
  tx[1] = val;
 800112a:	78bb      	ldrb	r3, [r7, #2]
 800112c:	737b      	strb	r3, [r7, #13]
  CS_L(dev);
 800112e:	6878      	ldr	r0, [r7, #4]
 8001130:	f7ff ffce 	bl	80010d0 <CS_L>
  HAL_StatusTypeDef st = HAL_SPI_Transmit(dev->hspi, tx, sizeof(tx), HAL_MAX_DELAY);
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6818      	ldr	r0, [r3, #0]
 8001138:	f107 010c 	add.w	r1, r7, #12
 800113c:	f04f 33ff 	mov.w	r3, #4294967295
 8001140:	2202      	movs	r2, #2
 8001142:	f005 fdb2 	bl	8006caa <HAL_SPI_Transmit>
 8001146:	4603      	mov	r3, r0
 8001148:	73fb      	strb	r3, [r7, #15]
  CS_H(dev);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffd0 	bl	80010f0 <CS_H>
  return st;
 8001150:	7bfb      	ldrb	r3, [r7, #15]
}
 8001152:	4618      	mov	r0, r3
 8001154:	3710      	adds	r7, #16
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}

0800115a <bmp280_read_regs>:

static HAL_StatusTypeDef bmp280_read_regs(BMP280_HandleTypeDef *dev, uint8_t start_reg, uint8_t *dst, uint16_t len) {
 800115a:	b580      	push	{r7, lr}
 800115c:	b086      	sub	sp, #24
 800115e:	af00      	add	r7, sp, #0
 8001160:	60f8      	str	r0, [r7, #12]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	461a      	mov	r2, r3
 8001166:	460b      	mov	r3, r1
 8001168:	72fb      	strb	r3, [r7, #11]
 800116a:	4613      	mov	r3, r2
 800116c:	813b      	strh	r3, [r7, #8]
  uint8_t cmd = (start_reg | 0x80); // RW=1
 800116e:	7afb      	ldrb	r3, [r7, #11]
 8001170:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001174:	b2db      	uxtb	r3, r3
 8001176:	75bb      	strb	r3, [r7, #22]
  CS_L(dev);
 8001178:	68f8      	ldr	r0, [r7, #12]
 800117a:	f7ff ffa9 	bl	80010d0 <CS_L>
  HAL_StatusTypeDef st = HAL_SPI_Transmit(dev->hspi, &cmd, 1, HAL_MAX_DELAY);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6818      	ldr	r0, [r3, #0]
 8001182:	f107 0116 	add.w	r1, r7, #22
 8001186:	f04f 33ff 	mov.w	r3, #4294967295
 800118a:	2201      	movs	r2, #1
 800118c:	f005 fd8d 	bl	8006caa <HAL_SPI_Transmit>
 8001190:	4603      	mov	r3, r0
 8001192:	75fb      	strb	r3, [r7, #23]
  if (st == HAL_OK) {
 8001194:	7dfb      	ldrb	r3, [r7, #23]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d109      	bne.n	80011ae <bmp280_read_regs+0x54>
    st = HAL_SPI_Receive(dev->hspi, dst, len, HAL_MAX_DELAY); // auto-increments
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	6818      	ldr	r0, [r3, #0]
 800119e:	893a      	ldrh	r2, [r7, #8]
 80011a0:	f04f 33ff 	mov.w	r3, #4294967295
 80011a4:	6879      	ldr	r1, [r7, #4]
 80011a6:	f005 fec4 	bl	8006f32 <HAL_SPI_Receive>
 80011aa:	4603      	mov	r3, r0
 80011ac:	75fb      	strb	r3, [r7, #23]
  }
  CS_H(dev);
 80011ae:	68f8      	ldr	r0, [r7, #12]
 80011b0:	f7ff ff9e 	bl	80010f0 <CS_H>
  return st;
 80011b4:	7dfb      	ldrb	r3, [r7, #23]
}
 80011b6:	4618      	mov	r0, r3
 80011b8:	3718      	adds	r7, #24
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bd80      	pop	{r7, pc}

080011be <bmp280_init_spi>:

/* ---- public API ---- */
HAL_StatusTypeDef bmp280_init_spi(BMP280_HandleTypeDef *dev,
                                  SPI_HandleTypeDef *hspi,
                                  GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 80011be:	b580      	push	{r7, lr}
 80011c0:	b086      	sub	sp, #24
 80011c2:	af00      	add	r7, sp, #0
 80011c4:	60f8      	str	r0, [r7, #12]
 80011c6:	60b9      	str	r1, [r7, #8]
 80011c8:	607a      	str	r2, [r7, #4]
 80011ca:	807b      	strh	r3, [r7, #2]
  memset(dev, 0, sizeof(*dev));
 80011cc:	2228      	movs	r2, #40	@ 0x28
 80011ce:	2100      	movs	r1, #0
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f00d f965 	bl	800e4a0 <memset>
  dev->hspi = hspi;
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	68ba      	ldr	r2, [r7, #8]
 80011da:	601a      	str	r2, [r3, #0]
  dev->cs_port = cs_port;
 80011dc:	68fb      	ldr	r3, [r7, #12]
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	605a      	str	r2, [r3, #4]
  dev->cs_pin = cs_pin;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	887a      	ldrh	r2, [r7, #2]
 80011e6:	811a      	strh	r2, [r3, #8]

  /* optional: pull CS high */
  HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 80011e8:	887b      	ldrh	r3, [r7, #2]
 80011ea:	2201      	movs	r2, #1
 80011ec:	4619      	mov	r1, r3
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f003 fdf4 	bl	8004ddc <HAL_GPIO_WritePin>

  uint8_t id = 0;
 80011f4:	2300      	movs	r3, #0
 80011f6:	75bb      	strb	r3, [r7, #22]
  HAL_StatusTypeDef st = bmp280_read_id(dev, &id);
 80011f8:	f107 0316 	add.w	r3, r7, #22
 80011fc:	4619      	mov	r1, r3
 80011fe:	68f8      	ldr	r0, [r7, #12]
 8001200:	f000 f857 	bl	80012b2 <bmp280_read_id>
 8001204:	4603      	mov	r3, r0
 8001206:	75fb      	strb	r3, [r7, #23]
  if (st != HAL_OK) return st;
 8001208:	7dfb      	ldrb	r3, [r7, #23]
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <bmp280_init_spi+0x54>
 800120e:	7dfb      	ldrb	r3, [r7, #23]
 8001210:	e012      	b.n	8001238 <bmp280_init_spi+0x7a>
  if (id != BMP280_CHIP_ID) return HAL_ERROR;
 8001212:	7dbb      	ldrb	r3, [r7, #22]
 8001214:	2b58      	cmp	r3, #88	@ 0x58
 8001216:	d001      	beq.n	800121c <bmp280_init_spi+0x5e>
 8001218:	2301      	movs	r3, #1
 800121a:	e00d      	b.n	8001238 <bmp280_init_spi+0x7a>

  /* soft reset and wait for NVM copy to finish */
  st = bmp280_soft_reset(dev);
 800121c:	68f8      	ldr	r0, [r7, #12]
 800121e:	f000 f80f 	bl	8001240 <bmp280_soft_reset>
 8001222:	4603      	mov	r3, r0
 8001224:	75fb      	strb	r3, [r7, #23]
  if (st != HAL_OK) return st;
 8001226:	7dfb      	ldrb	r3, [r7, #23]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <bmp280_init_spi+0x72>
 800122c:	7dfb      	ldrb	r3, [r7, #23]
 800122e:	e003      	b.n	8001238 <bmp280_init_spi+0x7a>

  /* read factory calibration */
  return bmp280_read_calibration(dev);
 8001230:	68f8      	ldr	r0, [r7, #12]
 8001232:	f000 f84e 	bl	80012d2 <bmp280_read_calibration>
 8001236:	4603      	mov	r3, r0
}
 8001238:	4618      	mov	r0, r3
 800123a:	3718      	adds	r7, #24
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}

08001240 <bmp280_soft_reset>:

HAL_StatusTypeDef bmp280_soft_reset(BMP280_HandleTypeDef *dev) {
 8001240:	b580      	push	{r7, lr}
 8001242:	b086      	sub	sp, #24
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef st = bmp280_write_reg(dev, BMP280_REG_RESET, BMP280_RESET_VALUE);
 8001248:	22b6      	movs	r2, #182	@ 0xb6
 800124a:	21e0      	movs	r1, #224	@ 0xe0
 800124c:	6878      	ldr	r0, [r7, #4]
 800124e:	f7ff ff5f 	bl	8001110 <bmp280_write_reg>
 8001252:	4603      	mov	r3, r0
 8001254:	75fb      	strb	r3, [r7, #23]
  if (st != HAL_OK) return st;
 8001256:	7dfb      	ldrb	r3, [r7, #23]
 8001258:	2b00      	cmp	r3, #0
 800125a:	d001      	beq.n	8001260 <bmp280_soft_reset+0x20>
 800125c:	7dfb      	ldrb	r3, [r7, #23]
 800125e:	e024      	b.n	80012aa <bmp280_soft_reset+0x6a>
  HAL_Delay(4); // t_startup is small, but give a few ms
 8001260:	2004      	movs	r0, #4
 8001262:	f002 feff 	bl	8004064 <HAL_Delay>
  /* wait for NVM copy (im_update=1 -> 0) */
  uint32_t t0 = HAL_GetTick();
 8001266:	f002 fef1 	bl	800404c <HAL_GetTick>
 800126a:	6138      	str	r0, [r7, #16]
  for (;;) {
    uint8_t status = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	73fb      	strb	r3, [r7, #15]
    if (bmp280_read_regs(dev, BMP280_REG_STATUS, &status, 1) != HAL_OK) return HAL_ERROR;
 8001270:	f107 020f 	add.w	r2, r7, #15
 8001274:	2301      	movs	r3, #1
 8001276:	21f3      	movs	r1, #243	@ 0xf3
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ff6e 	bl	800115a <bmp280_read_regs>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <bmp280_soft_reset+0x48>
 8001284:	2301      	movs	r3, #1
 8001286:	e010      	b.n	80012aa <bmp280_soft_reset+0x6a>
    if ((status & BMP280_STATUS_IM_UPDATE_Msk) == 0) break;
 8001288:	7bfb      	ldrb	r3, [r7, #15]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	d007      	beq.n	80012a2 <bmp280_soft_reset+0x62>
    if ((HAL_GetTick() - t0) > 20) break; // small guard timeout
 8001292:	f002 fedb 	bl	800404c <HAL_GetTick>
 8001296:	4602      	mov	r2, r0
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	2b14      	cmp	r3, #20
 800129e:	d802      	bhi.n	80012a6 <bmp280_soft_reset+0x66>
  for (;;) {
 80012a0:	e7e4      	b.n	800126c <bmp280_soft_reset+0x2c>
    if ((status & BMP280_STATUS_IM_UPDATE_Msk) == 0) break;
 80012a2:	bf00      	nop
 80012a4:	e000      	b.n	80012a8 <bmp280_soft_reset+0x68>
    if ((HAL_GetTick() - t0) > 20) break; // small guard timeout
 80012a6:	bf00      	nop
  }
  return HAL_OK;
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3718      	adds	r7, #24
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <bmp280_read_id>:

HAL_StatusTypeDef bmp280_read_id(BMP280_HandleTypeDef *dev, uint8_t *id_out) {
 80012b2:	b580      	push	{r7, lr}
 80012b4:	b082      	sub	sp, #8
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	6039      	str	r1, [r7, #0]
  return bmp280_read_regs(dev, BMP280_REG_ID, id_out, 1);
 80012bc:	2301      	movs	r3, #1
 80012be:	683a      	ldr	r2, [r7, #0]
 80012c0:	21d0      	movs	r1, #208	@ 0xd0
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f7ff ff49 	bl	800115a <bmp280_read_regs>
 80012c8:	4603      	mov	r3, r0
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3708      	adds	r7, #8
 80012ce:	46bd      	mov	sp, r7
 80012d0:	bd80      	pop	{r7, pc}

080012d2 <bmp280_read_calibration>:

HAL_StatusTypeDef bmp280_read_calibration(BMP280_HandleTypeDef *dev) {
 80012d2:	b580      	push	{r7, lr}
 80012d4:	b08a      	sub	sp, #40	@ 0x28
 80012d6:	af00      	add	r7, sp, #0
 80012d8:	6078      	str	r0, [r7, #4]
  /* dig_T1..dig_P9 occupy 0x88..0x9F (24 bytes) */
  uint8_t buf[24];
  HAL_StatusTypeDef st = bmp280_read_regs(dev, 0x88, buf, sizeof(buf));
 80012da:	f107 020c 	add.w	r2, r7, #12
 80012de:	2318      	movs	r3, #24
 80012e0:	2188      	movs	r1, #136	@ 0x88
 80012e2:	6878      	ldr	r0, [r7, #4]
 80012e4:	f7ff ff39 	bl	800115a <bmp280_read_regs>
 80012e8:	4603      	mov	r3, r0
 80012ea:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (st != HAL_OK) return st;
 80012ee:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d002      	beq.n	80012fc <bmp280_read_calibration+0x2a>
 80012f6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80012fa:	e07e      	b.n	80013fa <bmp280_read_calibration+0x128>

  dev->dig_T1 = (uint16_t)(buf[1] << 8 | buf[0]);
 80012fc:	7b7b      	ldrb	r3, [r7, #13]
 80012fe:	b21b      	sxth	r3, r3
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	b21a      	sxth	r2, r3
 8001304:	7b3b      	ldrb	r3, [r7, #12]
 8001306:	b21b      	sxth	r3, r3
 8001308:	4313      	orrs	r3, r2
 800130a:	b21b      	sxth	r3, r3
 800130c:	b29a      	uxth	r2, r3
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	815a      	strh	r2, [r3, #10]
  dev->dig_T2 = (int16_t) (buf[3] << 8 | buf[2]);
 8001312:	7bfb      	ldrb	r3, [r7, #15]
 8001314:	b21b      	sxth	r3, r3
 8001316:	021b      	lsls	r3, r3, #8
 8001318:	b21a      	sxth	r2, r3
 800131a:	7bbb      	ldrb	r3, [r7, #14]
 800131c:	b21b      	sxth	r3, r3
 800131e:	4313      	orrs	r3, r2
 8001320:	b21a      	sxth	r2, r3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	819a      	strh	r2, [r3, #12]
  dev->dig_T3 = (int16_t) (buf[5] << 8 | buf[4]);
 8001326:	7c7b      	ldrb	r3, [r7, #17]
 8001328:	b21b      	sxth	r3, r3
 800132a:	021b      	lsls	r3, r3, #8
 800132c:	b21a      	sxth	r2, r3
 800132e:	7c3b      	ldrb	r3, [r7, #16]
 8001330:	b21b      	sxth	r3, r3
 8001332:	4313      	orrs	r3, r2
 8001334:	b21a      	sxth	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	81da      	strh	r2, [r3, #14]

  dev->dig_P1 = (uint16_t)(buf[7] << 8 | buf[6]);
 800133a:	7cfb      	ldrb	r3, [r7, #19]
 800133c:	b21b      	sxth	r3, r3
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	b21a      	sxth	r2, r3
 8001342:	7cbb      	ldrb	r3, [r7, #18]
 8001344:	b21b      	sxth	r3, r3
 8001346:	4313      	orrs	r3, r2
 8001348:	b21b      	sxth	r3, r3
 800134a:	b29a      	uxth	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	821a      	strh	r2, [r3, #16]
  dev->dig_P2 = (int16_t) (buf[9] << 8 | buf[8]);
 8001350:	7d7b      	ldrb	r3, [r7, #21]
 8001352:	b21b      	sxth	r3, r3
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	b21a      	sxth	r2, r3
 8001358:	7d3b      	ldrb	r3, [r7, #20]
 800135a:	b21b      	sxth	r3, r3
 800135c:	4313      	orrs	r3, r2
 800135e:	b21a      	sxth	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	825a      	strh	r2, [r3, #18]
  dev->dig_P3 = (int16_t) (buf[11] << 8 | buf[10]);
 8001364:	7dfb      	ldrb	r3, [r7, #23]
 8001366:	b21b      	sxth	r3, r3
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	7dbb      	ldrb	r3, [r7, #22]
 800136e:	b21b      	sxth	r3, r3
 8001370:	4313      	orrs	r3, r2
 8001372:	b21a      	sxth	r2, r3
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	829a      	strh	r2, [r3, #20]
  dev->dig_P4 = (int16_t) (buf[13] << 8 | buf[12]);
 8001378:	7e7b      	ldrb	r3, [r7, #25]
 800137a:	b21b      	sxth	r3, r3
 800137c:	021b      	lsls	r3, r3, #8
 800137e:	b21a      	sxth	r2, r3
 8001380:	7e3b      	ldrb	r3, [r7, #24]
 8001382:	b21b      	sxth	r3, r3
 8001384:	4313      	orrs	r3, r2
 8001386:	b21a      	sxth	r2, r3
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	82da      	strh	r2, [r3, #22]
  dev->dig_P5 = (int16_t) (buf[15] << 8 | buf[14]);
 800138c:	7efb      	ldrb	r3, [r7, #27]
 800138e:	b21b      	sxth	r3, r3
 8001390:	021b      	lsls	r3, r3, #8
 8001392:	b21a      	sxth	r2, r3
 8001394:	7ebb      	ldrb	r3, [r7, #26]
 8001396:	b21b      	sxth	r3, r3
 8001398:	4313      	orrs	r3, r2
 800139a:	b21a      	sxth	r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	831a      	strh	r2, [r3, #24]
  dev->dig_P6 = (int16_t) (buf[17] << 8 | buf[16]);
 80013a0:	7f7b      	ldrb	r3, [r7, #29]
 80013a2:	b21b      	sxth	r3, r3
 80013a4:	021b      	lsls	r3, r3, #8
 80013a6:	b21a      	sxth	r2, r3
 80013a8:	7f3b      	ldrb	r3, [r7, #28]
 80013aa:	b21b      	sxth	r3, r3
 80013ac:	4313      	orrs	r3, r2
 80013ae:	b21a      	sxth	r2, r3
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	835a      	strh	r2, [r3, #26]
  dev->dig_P7 = (int16_t) (buf[19] << 8 | buf[18]);
 80013b4:	7ffb      	ldrb	r3, [r7, #31]
 80013b6:	b21b      	sxth	r3, r3
 80013b8:	021b      	lsls	r3, r3, #8
 80013ba:	b21a      	sxth	r2, r3
 80013bc:	7fbb      	ldrb	r3, [r7, #30]
 80013be:	b21b      	sxth	r3, r3
 80013c0:	4313      	orrs	r3, r2
 80013c2:	b21a      	sxth	r2, r3
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	839a      	strh	r2, [r3, #28]
  dev->dig_P8 = (int16_t) (buf[21] << 8 | buf[20]);
 80013c8:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	021b      	lsls	r3, r3, #8
 80013d0:	b21a      	sxth	r2, r3
 80013d2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80013d6:	b21b      	sxth	r3, r3
 80013d8:	4313      	orrs	r3, r2
 80013da:	b21a      	sxth	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	83da      	strh	r2, [r3, #30]
  dev->dig_P9 = (int16_t) (buf[23] << 8 | buf[22]);
 80013e0:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80013e4:	b21b      	sxth	r3, r3
 80013e6:	021b      	lsls	r3, r3, #8
 80013e8:	b21a      	sxth	r2, r3
 80013ea:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80013ee:	b21b      	sxth	r3, r3
 80013f0:	4313      	orrs	r3, r2
 80013f2:	b21a      	sxth	r2, r3
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	841a      	strh	r2, [r3, #32]

  return HAL_OK;
 80013f8:	2300      	movs	r3, #0
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3728      	adds	r7, #40	@ 0x28
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <bmp280_set_config>:

HAL_StatusTypeDef bmp280_set_config(BMP280_HandleTypeDef *dev,
                                    bmp280_tstandby_t t_sb,
                                    bmp280_filter_t filter,
                                    bool spi3w_enable)
{
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	4608      	mov	r0, r1
 800140c:	4611      	mov	r1, r2
 800140e:	461a      	mov	r2, r3
 8001410:	4603      	mov	r3, r0
 8001412:	70fb      	strb	r3, [r7, #3]
 8001414:	460b      	mov	r3, r1
 8001416:	70bb      	strb	r3, [r7, #2]
 8001418:	4613      	mov	r3, r2
 800141a:	707b      	strb	r3, [r7, #1]
  uint8_t cfg = ((uint8_t)t_sb & 0x7) << 5
              | ((uint8_t)filter & 0x7) << 2
 800141c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001420:	015b      	lsls	r3, r3, #5
 8001422:	b25a      	sxtb	r2, r3
 8001424:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001428:	009b      	lsls	r3, r3, #2
 800142a:	b25b      	sxtb	r3, r3
 800142c:	f003 031c 	and.w	r3, r3, #28
 8001430:	b25b      	sxtb	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b25b      	sxtb	r3, r3
 8001436:	b2db      	uxtb	r3, r3
              | (spi3w_enable ? 1U : 0U);
 8001438:	787a      	ldrb	r2, [r7, #1]
 800143a:	2a00      	cmp	r2, #0
 800143c:	d001      	beq.n	8001442 <bmp280_set_config+0x40>
 800143e:	2201      	movs	r2, #1
 8001440:	e000      	b.n	8001444 <bmp280_set_config+0x42>
 8001442:	2200      	movs	r2, #0
  uint8_t cfg = ((uint8_t)t_sb & 0x7) << 5
 8001444:	4313      	orrs	r3, r2
 8001446:	73fb      	strb	r3, [r7, #15]
  return bmp280_write_reg(dev, BMP280_REG_CONFIG, cfg);
 8001448:	7bfb      	ldrb	r3, [r7, #15]
 800144a:	461a      	mov	r2, r3
 800144c:	21f5      	movs	r1, #245	@ 0xf5
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fe5e 	bl	8001110 <bmp280_write_reg>
 8001454:	4603      	mov	r3, r0
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}

0800145e <bmp280_set_ctrl_meas>:

HAL_StatusTypeDef bmp280_set_ctrl_meas(BMP280_HandleTypeDef *dev,
                                       bmp280_osrs_t osrs_t,
                                       bmp280_osrs_t osrs_p,
                                       bmp280_mode_t mode)
{
 800145e:	b580      	push	{r7, lr}
 8001460:	b084      	sub	sp, #16
 8001462:	af00      	add	r7, sp, #0
 8001464:	6078      	str	r0, [r7, #4]
 8001466:	4608      	mov	r0, r1
 8001468:	4611      	mov	r1, r2
 800146a:	461a      	mov	r2, r3
 800146c:	4603      	mov	r3, r0
 800146e:	70fb      	strb	r3, [r7, #3]
 8001470:	460b      	mov	r3, r1
 8001472:	70bb      	strb	r3, [r7, #2]
 8001474:	4613      	mov	r3, r2
 8001476:	707b      	strb	r3, [r7, #1]
  uint8_t v = ((uint8_t)osrs_t & 0x7) << 5
            | ((uint8_t)osrs_p & 0x7) << 2
 8001478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800147c:	015b      	lsls	r3, r3, #5
 800147e:	b25a      	sxtb	r2, r3
 8001480:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	b25b      	sxtb	r3, r3
 8001488:	f003 031c 	and.w	r3, r3, #28
 800148c:	b25b      	sxtb	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	b25a      	sxtb	r2, r3
            | ((uint8_t)mode    & 0x3);
 8001492:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001496:	f003 0303 	and.w	r3, r3, #3
 800149a:	b25b      	sxtb	r3, r3
 800149c:	4313      	orrs	r3, r2
 800149e:	b25b      	sxtb	r3, r3
  uint8_t v = ((uint8_t)osrs_t & 0x7) << 5
 80014a0:	73fb      	strb	r3, [r7, #15]
  return bmp280_write_reg(dev, BMP280_REG_CTRL_MEAS, v);
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	461a      	mov	r2, r3
 80014a6:	21f4      	movs	r1, #244	@ 0xf4
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fe31 	bl	8001110 <bmp280_write_reg>
 80014ae:	4603      	mov	r3, r0
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3710      	adds	r7, #16
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <bmp280_read_raw>:
    if ((HAL_GetTick() - t0) > timeout_ms) return HAL_TIMEOUT;
  }
  return HAL_OK;
}

HAL_StatusTypeDef bmp280_read_raw(BMP280_HandleTypeDef *dev, int32_t *adc_T, int32_t *adc_P) {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b08a      	sub	sp, #40	@ 0x28
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  uint8_t buf[6];
  HAL_StatusTypeDef st = bmp280_read_regs(dev, BMP280_REG_PRESS_MSB, buf, sizeof(buf));
 80014c4:	f107 0214 	add.w	r2, r7, #20
 80014c8:	2306      	movs	r3, #6
 80014ca:	21f7      	movs	r1, #247	@ 0xf7
 80014cc:	68f8      	ldr	r0, [r7, #12]
 80014ce:	f7ff fe44 	bl	800115a <bmp280_read_regs>
 80014d2:	4603      	mov	r3, r0
 80014d4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (st != HAL_OK) return st;
 80014d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d002      	beq.n	80014e6 <bmp280_read_raw+0x2e>
 80014e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80014e4:	e024      	b.n	8001530 <bmp280_read_raw+0x78>

  int32_t up = ((int32_t)buf[0] << 12) | ((int32_t)buf[1] << 4) | ((buf[2] >> 4) & 0x0F);
 80014e6:	7d3b      	ldrb	r3, [r7, #20]
 80014e8:	031a      	lsls	r2, r3, #12
 80014ea:	7d7b      	ldrb	r3, [r7, #21]
 80014ec:	011b      	lsls	r3, r3, #4
 80014ee:	431a      	orrs	r2, r3
 80014f0:	7dbb      	ldrb	r3, [r7, #22]
 80014f2:	091b      	lsrs	r3, r3, #4
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	f003 030f 	and.w	r3, r3, #15
 80014fa:	4313      	orrs	r3, r2
 80014fc:	623b      	str	r3, [r7, #32]
  int32_t ut = ((int32_t)buf[3] << 12) | ((int32_t)buf[4] << 4) | ((buf[5] >> 4) & 0x0F);
 80014fe:	7dfb      	ldrb	r3, [r7, #23]
 8001500:	031a      	lsls	r2, r3, #12
 8001502:	7e3b      	ldrb	r3, [r7, #24]
 8001504:	011b      	lsls	r3, r3, #4
 8001506:	431a      	orrs	r2, r3
 8001508:	7e7b      	ldrb	r3, [r7, #25]
 800150a:	091b      	lsrs	r3, r3, #4
 800150c:	b2db      	uxtb	r3, r3
 800150e:	f003 030f 	and.w	r3, r3, #15
 8001512:	4313      	orrs	r3, r2
 8001514:	61fb      	str	r3, [r7, #28]

  if (adc_P) *adc_P = up;
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	2b00      	cmp	r3, #0
 800151a:	d002      	beq.n	8001522 <bmp280_read_raw+0x6a>
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6a3a      	ldr	r2, [r7, #32]
 8001520:	601a      	str	r2, [r3, #0]
  if (adc_T) *adc_T = ut;
 8001522:	68bb      	ldr	r3, [r7, #8]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d002      	beq.n	800152e <bmp280_read_raw+0x76>
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	69fa      	ldr	r2, [r7, #28]
 800152c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800152e:	2300      	movs	r3, #0
}
 8001530:	4618      	mov	r0, r3
 8001532:	3728      	adds	r7, #40	@ 0x28
 8001534:	46bd      	mov	sp, r7
 8001536:	bd80      	pop	{r7, pc}

08001538 <bmp280_compensate_T_int32>:

/* ---- Bosch fixed-point compensation (exactly as in datasheet) ---- */

int32_t bmp280_compensate_T_int32(BMP280_HandleTypeDef *dev, int32_t adc_T) {
 8001538:	b480      	push	{r7}
 800153a:	b087      	sub	sp, #28
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
 8001540:	6039      	str	r1, [r7, #0]
  int32_t var1, var2, T;
  var1 = ((((adc_T >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	10da      	asrs	r2, r3, #3
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	895b      	ldrh	r3, [r3, #10]
 800154a:	005b      	lsls	r3, r3, #1
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 8001554:	fb02 f303 	mul.w	r3, r2, r3
 8001558:	12db      	asrs	r3, r3, #11
 800155a:	617b      	str	r3, [r7, #20]
  var2 = (((((adc_T >> 4) - ((int32_t)dev->dig_T1)) *
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	111b      	asrs	r3, r3, #4
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	8952      	ldrh	r2, [r2, #10]
 8001564:	1a9b      	subs	r3, r3, r2
            ((adc_T >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 8001566:	683a      	ldr	r2, [r7, #0]
 8001568:	1112      	asrs	r2, r2, #4
 800156a:	6879      	ldr	r1, [r7, #4]
 800156c:	8949      	ldrh	r1, [r1, #10]
 800156e:	1a52      	subs	r2, r2, r1
  var2 = (((((adc_T >> 4) - ((int32_t)dev->dig_T1)) *
 8001570:	fb02 f303 	mul.w	r3, r2, r3
            ((adc_T >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 8001574:	131b      	asrs	r3, r3, #12
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 800157c:	fb02 f303 	mul.w	r3, r2, r3
  var2 = (((((adc_T >> 4) - ((int32_t)dev->dig_T1)) *
 8001580:	139b      	asrs	r3, r3, #14
 8001582:	613b      	str	r3, [r7, #16]
  dev->t_fine = var1 + var2;
 8001584:	697a      	ldr	r2, [r7, #20]
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	441a      	add	r2, r3
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	625a      	str	r2, [r3, #36]	@ 0x24
  T = (dev->t_fine * 5 + 128) >> 8;  // 0.01 °C
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	3380      	adds	r3, #128	@ 0x80
 800159a:	121b      	asrs	r3, r3, #8
 800159c:	60fb      	str	r3, [r7, #12]
  return T;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	371c      	adds	r7, #28
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr

080015ac <bmp280_compensate_P_int64>:

uint32_t bmp280_compensate_P_int64(BMP280_HandleTypeDef *dev, int32_t adc_P) {
 80015ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80015b0:	b0ca      	sub	sp, #296	@ 0x128
 80015b2:	af00      	add	r7, sp, #0
 80015b4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 80015b8:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
  int64_t var1, var2, p;
  var1 = ((int64_t)dev->t_fine) - 128000;
 80015bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80015c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80015c2:	17da      	asrs	r2, r3, #31
 80015c4:	461c      	mov	r4, r3
 80015c6:	4615      	mov	r5, r2
 80015c8:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80015cc:	f145 3bff 	adc.w	fp, r5, #4294967295
 80015d0:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
  var2 = var1 * var1 * (int64_t)dev->dig_P6;
 80015d4:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015d8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015dc:	fb03 f102 	mul.w	r1, r3, r2
 80015e0:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80015e4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015e8:	fb02 f303 	mul.w	r3, r2, r3
 80015ec:	18ca      	adds	r2, r1, r3
 80015ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80015f2:	fba3 8903 	umull	r8, r9, r3, r3
 80015f6:	eb02 0309 	add.w	r3, r2, r9
 80015fa:	4699      	mov	r9, r3
 80015fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001600:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001604:	b21b      	sxth	r3, r3
 8001606:	17da      	asrs	r2, r3, #31
 8001608:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800160c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001610:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001614:	4603      	mov	r3, r0
 8001616:	fb03 f209 	mul.w	r2, r3, r9
 800161a:	460b      	mov	r3, r1
 800161c:	fb08 f303 	mul.w	r3, r8, r3
 8001620:	4413      	add	r3, r2
 8001622:	4602      	mov	r2, r0
 8001624:	fba8 1202 	umull	r1, r2, r8, r2
 8001628:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800162c:	460a      	mov	r2, r1
 800162e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001632:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001636:	4413      	add	r3, r2
 8001638:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800163c:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001640:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001644:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
  var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 8001648:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800164c:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 8001650:	b21b      	sxth	r3, r3
 8001652:	17da      	asrs	r2, r3, #31
 8001654:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8001658:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800165c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001660:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001664:	462a      	mov	r2, r5
 8001666:	fb02 f203 	mul.w	r2, r2, r3
 800166a:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800166e:	4621      	mov	r1, r4
 8001670:	fb01 f303 	mul.w	r3, r1, r3
 8001674:	441a      	add	r2, r3
 8001676:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800167a:	4621      	mov	r1, r4
 800167c:	fba3 1301 	umull	r1, r3, r3, r1
 8001680:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001684:	460b      	mov	r3, r1
 8001686:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800168a:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 800168e:	18d3      	adds	r3, r2, r3
 8001690:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001694:	f04f 0000 	mov.w	r0, #0
 8001698:	f04f 0100 	mov.w	r1, #0
 800169c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80016a0:	462b      	mov	r3, r5
 80016a2:	0459      	lsls	r1, r3, #17
 80016a4:	4623      	mov	r3, r4
 80016a6:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 80016aa:	4623      	mov	r3, r4
 80016ac:	0458      	lsls	r0, r3, #17
 80016ae:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80016b2:	1814      	adds	r4, r2, r0
 80016b4:	643c      	str	r4, [r7, #64]	@ 0x40
 80016b6:	414b      	adcs	r3, r1
 80016b8:	647b      	str	r3, [r7, #68]	@ 0x44
 80016ba:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80016be:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
  var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 80016c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80016c6:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 80016ca:	b21b      	sxth	r3, r3
 80016cc:	17da      	asrs	r2, r3, #31
 80016ce:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80016d2:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80016d6:	f04f 0000 	mov.w	r0, #0
 80016da:	f04f 0100 	mov.w	r1, #0
 80016de:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80016e2:	00d9      	lsls	r1, r3, #3
 80016e4:	2000      	movs	r0, #0
 80016e6:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80016ea:	1814      	adds	r4, r2, r0
 80016ec:	63bc      	str	r4, [r7, #56]	@ 0x38
 80016ee:	414b      	adcs	r3, r1
 80016f0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80016f2:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80016f6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
  var1 = (((var1 * var1 * (int64_t)dev->dig_P3) >> 8) + ((var1 * (int64_t)dev->dig_P2) << 12));
 80016fa:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80016fe:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001702:	fb03 f102 	mul.w	r1, r3, r2
 8001706:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800170a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800170e:	fb02 f303 	mul.w	r3, r2, r3
 8001712:	18ca      	adds	r2, r1, r3
 8001714:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001718:	fba3 1303 	umull	r1, r3, r3, r3
 800171c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001720:	460b      	mov	r3, r1
 8001722:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001726:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800172a:	18d3      	adds	r3, r2, r3
 800172c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001730:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001734:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001738:	b21b      	sxth	r3, r3
 800173a:	17da      	asrs	r2, r3, #31
 800173c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001740:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001744:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 8001748:	462b      	mov	r3, r5
 800174a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800174e:	4642      	mov	r2, r8
 8001750:	fb02 f203 	mul.w	r2, r2, r3
 8001754:	464b      	mov	r3, r9
 8001756:	4621      	mov	r1, r4
 8001758:	fb01 f303 	mul.w	r3, r1, r3
 800175c:	4413      	add	r3, r2
 800175e:	4622      	mov	r2, r4
 8001760:	4641      	mov	r1, r8
 8001762:	fba2 1201 	umull	r1, r2, r2, r1
 8001766:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800176a:	460a      	mov	r2, r1
 800176c:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001770:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001774:	4413      	add	r3, r2
 8001776:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800177a:	f04f 0000 	mov.w	r0, #0
 800177e:	f04f 0100 	mov.w	r1, #0
 8001782:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001786:	4623      	mov	r3, r4
 8001788:	0a18      	lsrs	r0, r3, #8
 800178a:	462b      	mov	r3, r5
 800178c:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001790:	462b      	mov	r3, r5
 8001792:	1219      	asrs	r1, r3, #8
 8001794:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001798:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800179c:	b21b      	sxth	r3, r3
 800179e:	17da      	asrs	r2, r3, #31
 80017a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80017a4:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80017a8:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017ac:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80017b0:	464a      	mov	r2, r9
 80017b2:	fb02 f203 	mul.w	r2, r2, r3
 80017b6:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017ba:	4644      	mov	r4, r8
 80017bc:	fb04 f303 	mul.w	r3, r4, r3
 80017c0:	441a      	add	r2, r3
 80017c2:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017c6:	4644      	mov	r4, r8
 80017c8:	fba3 4304 	umull	r4, r3, r3, r4
 80017cc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80017d0:	4623      	mov	r3, r4
 80017d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80017d6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80017da:	18d3      	adds	r3, r2, r3
 80017dc:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80017e0:	f04f 0200 	mov.w	r2, #0
 80017e4:	f04f 0300 	mov.w	r3, #0
 80017e8:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80017ec:	464c      	mov	r4, r9
 80017ee:	0323      	lsls	r3, r4, #12
 80017f0:	4644      	mov	r4, r8
 80017f2:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80017f6:	4644      	mov	r4, r8
 80017f8:	0322      	lsls	r2, r4, #12
 80017fa:	1884      	adds	r4, r0, r2
 80017fc:	633c      	str	r4, [r7, #48]	@ 0x30
 80017fe:	eb41 0303 	adc.w	r3, r1, r3
 8001802:	637b      	str	r3, [r7, #52]	@ 0x34
 8001804:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001808:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
  var1 = (((((int64_t)1) << 47) + var1) * (int64_t)dev->dig_P1) >> 33;
 800180c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001810:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001814:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001818:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800181c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001820:	8a1b      	ldrh	r3, [r3, #16]
 8001822:	b29b      	uxth	r3, r3
 8001824:	2200      	movs	r2, #0
 8001826:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800182a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800182e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001832:	462b      	mov	r3, r5
 8001834:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8001838:	4642      	mov	r2, r8
 800183a:	fb02 f203 	mul.w	r2, r2, r3
 800183e:	464b      	mov	r3, r9
 8001840:	4621      	mov	r1, r4
 8001842:	fb01 f303 	mul.w	r3, r1, r3
 8001846:	4413      	add	r3, r2
 8001848:	4622      	mov	r2, r4
 800184a:	4641      	mov	r1, r8
 800184c:	fba2 1201 	umull	r1, r2, r2, r1
 8001850:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001854:	460a      	mov	r2, r1
 8001856:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800185a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 800185e:	4413      	add	r3, r2
 8001860:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001864:	f04f 0200 	mov.w	r2, #0
 8001868:	f04f 0300 	mov.w	r3, #0
 800186c:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001870:	4629      	mov	r1, r5
 8001872:	104a      	asrs	r2, r1, #1
 8001874:	4629      	mov	r1, r5
 8001876:	17cb      	asrs	r3, r1, #31
 8001878:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  if (var1 == 0) return 0;  // avoid div by zero
 800187c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001880:	4313      	orrs	r3, r2
 8001882:	d101      	bne.n	8001888 <bmp280_compensate_P_int64+0x2dc>
 8001884:	2300      	movs	r3, #0
 8001886:	e148      	b.n	8001b1a <bmp280_compensate_P_int64+0x56e>
  p = 1048576 - adc_P;
 8001888:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800188c:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001890:	17da      	asrs	r2, r3, #31
 8001892:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001894:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001896:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800189a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
  p = (((p << 31) - var2) * 3125) / var1;
 800189e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018a2:	105b      	asrs	r3, r3, #1
 80018a4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80018a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80018ac:	07db      	lsls	r3, r3, #31
 80018ae:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80018b2:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80018b6:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80018ba:	4621      	mov	r1, r4
 80018bc:	1a89      	subs	r1, r1, r2
 80018be:	67b9      	str	r1, [r7, #120]	@ 0x78
 80018c0:	4629      	mov	r1, r5
 80018c2:	eb61 0303 	sbc.w	r3, r1, r3
 80018c6:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80018c8:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80018cc:	4622      	mov	r2, r4
 80018ce:	462b      	mov	r3, r5
 80018d0:	1891      	adds	r1, r2, r2
 80018d2:	6239      	str	r1, [r7, #32]
 80018d4:	415b      	adcs	r3, r3
 80018d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80018d8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80018dc:	4621      	mov	r1, r4
 80018de:	1851      	adds	r1, r2, r1
 80018e0:	61b9      	str	r1, [r7, #24]
 80018e2:	4629      	mov	r1, r5
 80018e4:	414b      	adcs	r3, r1
 80018e6:	61fb      	str	r3, [r7, #28]
 80018e8:	f04f 0200 	mov.w	r2, #0
 80018ec:	f04f 0300 	mov.w	r3, #0
 80018f0:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80018f4:	4649      	mov	r1, r9
 80018f6:	018b      	lsls	r3, r1, #6
 80018f8:	4641      	mov	r1, r8
 80018fa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80018fe:	4641      	mov	r1, r8
 8001900:	018a      	lsls	r2, r1, #6
 8001902:	4641      	mov	r1, r8
 8001904:	1889      	adds	r1, r1, r2
 8001906:	6139      	str	r1, [r7, #16]
 8001908:	4649      	mov	r1, r9
 800190a:	eb43 0101 	adc.w	r1, r3, r1
 800190e:	6179      	str	r1, [r7, #20]
 8001910:	f04f 0200 	mov.w	r2, #0
 8001914:	f04f 0300 	mov.w	r3, #0
 8001918:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800191c:	4649      	mov	r1, r9
 800191e:	008b      	lsls	r3, r1, #2
 8001920:	4641      	mov	r1, r8
 8001922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001926:	4641      	mov	r1, r8
 8001928:	008a      	lsls	r2, r1, #2
 800192a:	4610      	mov	r0, r2
 800192c:	4619      	mov	r1, r3
 800192e:	4603      	mov	r3, r0
 8001930:	4622      	mov	r2, r4
 8001932:	189b      	adds	r3, r3, r2
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	460b      	mov	r3, r1
 8001938:	462a      	mov	r2, r5
 800193a:	eb42 0303 	adc.w	r3, r2, r3
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	f04f 0200 	mov.w	r2, #0
 8001944:	f04f 0300 	mov.w	r3, #0
 8001948:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800194c:	4649      	mov	r1, r9
 800194e:	008b      	lsls	r3, r1, #2
 8001950:	4641      	mov	r1, r8
 8001952:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001956:	4641      	mov	r1, r8
 8001958:	008a      	lsls	r2, r1, #2
 800195a:	4610      	mov	r0, r2
 800195c:	4619      	mov	r1, r3
 800195e:	4603      	mov	r3, r0
 8001960:	4622      	mov	r2, r4
 8001962:	189b      	adds	r3, r3, r2
 8001964:	673b      	str	r3, [r7, #112]	@ 0x70
 8001966:	462b      	mov	r3, r5
 8001968:	460a      	mov	r2, r1
 800196a:	eb42 0303 	adc.w	r3, r2, r3
 800196e:	677b      	str	r3, [r7, #116]	@ 0x74
 8001970:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001974:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001978:	f7ff f98e 	bl	8000c98 <__aeabi_ldivmod>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
  var1 = ((int64_t)dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001984:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001988:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 800198c:	b21b      	sxth	r3, r3
 800198e:	17da      	asrs	r2, r3, #31
 8001990:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001992:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001994:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001998:	f04f 0000 	mov.w	r0, #0
 800199c:	f04f 0100 	mov.w	r1, #0
 80019a0:	0b50      	lsrs	r0, r2, #13
 80019a2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019a6:	1359      	asrs	r1, r3, #13
 80019a8:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 80019ac:	462b      	mov	r3, r5
 80019ae:	fb00 f203 	mul.w	r2, r0, r3
 80019b2:	4623      	mov	r3, r4
 80019b4:	fb03 f301 	mul.w	r3, r3, r1
 80019b8:	4413      	add	r3, r2
 80019ba:	4622      	mov	r2, r4
 80019bc:	fba2 1200 	umull	r1, r2, r2, r0
 80019c0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80019c4:	460a      	mov	r2, r1
 80019c6:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80019ca:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80019ce:	4413      	add	r3, r2
 80019d0:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80019d4:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80019d8:	f04f 0000 	mov.w	r0, #0
 80019dc:	f04f 0100 	mov.w	r1, #0
 80019e0:	0b50      	lsrs	r0, r2, #13
 80019e2:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80019e6:	1359      	asrs	r1, r3, #13
 80019e8:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80019ec:	462b      	mov	r3, r5
 80019ee:	fb00 f203 	mul.w	r2, r0, r3
 80019f2:	4623      	mov	r3, r4
 80019f4:	fb03 f301 	mul.w	r3, r3, r1
 80019f8:	4413      	add	r3, r2
 80019fa:	4622      	mov	r2, r4
 80019fc:	fba2 1200 	umull	r1, r2, r2, r0
 8001a00:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001a04:	460a      	mov	r2, r1
 8001a06:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001a0a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001a0e:	4413      	add	r3, r2
 8001a10:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001a14:	f04f 0200 	mov.w	r2, #0
 8001a18:	f04f 0300 	mov.w	r3, #0
 8001a1c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001a20:	4621      	mov	r1, r4
 8001a22:	0e4a      	lsrs	r2, r1, #25
 8001a24:	4629      	mov	r1, r5
 8001a26:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001a2a:	4629      	mov	r1, r5
 8001a2c:	164b      	asrs	r3, r1, #25
 8001a2e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  var2 = ((int64_t)dev->dig_P8 * p) >> 19;
 8001a32:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001a36:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001a3a:	b21b      	sxth	r3, r3
 8001a3c:	17da      	asrs	r2, r3, #31
 8001a3e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001a40:	667a      	str	r2, [r7, #100]	@ 0x64
 8001a42:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a46:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001a4a:	462a      	mov	r2, r5
 8001a4c:	fb02 f203 	mul.w	r2, r2, r3
 8001a50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001a54:	4621      	mov	r1, r4
 8001a56:	fb01 f303 	mul.w	r3, r1, r3
 8001a5a:	4413      	add	r3, r2
 8001a5c:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001a60:	4621      	mov	r1, r4
 8001a62:	fba2 1201 	umull	r1, r2, r2, r1
 8001a66:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001a6a:	460a      	mov	r2, r1
 8001a6c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001a70:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001a74:	4413      	add	r3, r2
 8001a76:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001a7a:	f04f 0200 	mov.w	r2, #0
 8001a7e:	f04f 0300 	mov.w	r3, #0
 8001a82:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001a86:	4621      	mov	r1, r4
 8001a88:	0cca      	lsrs	r2, r1, #19
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001a90:	4629      	mov	r1, r5
 8001a92:	14cb      	asrs	r3, r1, #19
 8001a94:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
  p = ((p + var1 + var2) >> 8) + (((int64_t)dev->dig_P7) << 4);
 8001a98:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001a9c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001aa0:	1884      	adds	r4, r0, r2
 8001aa2:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001aa4:	eb41 0303 	adc.w	r3, r1, r3
 8001aa8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001aaa:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001aae:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001ab2:	4621      	mov	r1, r4
 8001ab4:	1889      	adds	r1, r1, r2
 8001ab6:	6539      	str	r1, [r7, #80]	@ 0x50
 8001ab8:	4629      	mov	r1, r5
 8001aba:	eb43 0101 	adc.w	r1, r3, r1
 8001abe:	6579      	str	r1, [r7, #84]	@ 0x54
 8001ac0:	f04f 0000 	mov.w	r0, #0
 8001ac4:	f04f 0100 	mov.w	r1, #0
 8001ac8:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001acc:	4623      	mov	r3, r4
 8001ace:	0a18      	lsrs	r0, r3, #8
 8001ad0:	462b      	mov	r3, r5
 8001ad2:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	1219      	asrs	r1, r3, #8
 8001ada:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ade:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001ae2:	b21b      	sxth	r3, r3
 8001ae4:	17da      	asrs	r2, r3, #31
 8001ae6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001ae8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001aea:	f04f 0200 	mov.w	r2, #0
 8001aee:	f04f 0300 	mov.w	r3, #0
 8001af2:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001af6:	464c      	mov	r4, r9
 8001af8:	0123      	lsls	r3, r4, #4
 8001afa:	4644      	mov	r4, r8
 8001afc:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001b00:	4644      	mov	r4, r8
 8001b02:	0122      	lsls	r2, r4, #4
 8001b04:	1884      	adds	r4, r0, r2
 8001b06:	603c      	str	r4, [r7, #0]
 8001b08:	eb41 0303 	adc.w	r3, r1, r3
 8001b0c:	607b      	str	r3, [r7, #4]
 8001b0e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001b12:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
  return (uint32_t)p; // Q24.8 (Pa)
 8001b16:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001b20:	46bd      	mov	sp, r7
 8001b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001b28 <bmp280_read_temp_press>:
  uint32_t p_q24_8 = bmp280_compensate_P_int64(dev, adc_P);
  if (press_pa) *press_pa = ((float)p_q24_8) / 256.0f;
  return HAL_OK;
}

HAL_StatusTypeDef bmp280_read_temp_press(BMP280_HandleTypeDef *dev, float *temp_c, float *press_pa) {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b088      	sub	sp, #32
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	607a      	str	r2, [r7, #4]
  int32_t adc_T, adc_P;
  if (bmp280_read_raw(dev, &adc_T, &adc_P) != HAL_OK) return HAL_ERROR;
 8001b34:	f107 0210 	add.w	r2, r7, #16
 8001b38:	f107 0314 	add.w	r3, r7, #20
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f7ff fcba 	bl	80014b8 <bmp280_read_raw>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <bmp280_read_temp_press+0x26>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e02a      	b.n	8001ba4 <bmp280_read_temp_press+0x7c>
  int32_t T_01deg = bmp280_compensate_T_int32(dev, adc_T);
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	4619      	mov	r1, r3
 8001b52:	68f8      	ldr	r0, [r7, #12]
 8001b54:	f7ff fcf0 	bl	8001538 <bmp280_compensate_T_int32>
 8001b58:	61f8      	str	r0, [r7, #28]
  uint32_t p_q24_8 = bmp280_compensate_P_int64(dev, adc_P);
 8001b5a:	693b      	ldr	r3, [r7, #16]
 8001b5c:	4619      	mov	r1, r3
 8001b5e:	68f8      	ldr	r0, [r7, #12]
 8001b60:	f7ff fd24 	bl	80015ac <bmp280_compensate_P_int64>
 8001b64:	61b8      	str	r0, [r7, #24]
  if (temp_c)  *temp_c  = (float)T_01deg / 100.0f;
 8001b66:	68bb      	ldr	r3, [r7, #8]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00b      	beq.n	8001b84 <bmp280_read_temp_press+0x5c>
 8001b6c:	69fb      	ldr	r3, [r7, #28]
 8001b6e:	ee07 3a90 	vmov	s15, r3
 8001b72:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001b76:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001bac <bmp280_read_temp_press+0x84>
 8001b7a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b7e:	68bb      	ldr	r3, [r7, #8]
 8001b80:	edc3 7a00 	vstr	s15, [r3]
  if (press_pa) *press_pa = (float)p_q24_8 / 256.0f;
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <bmp280_read_temp_press+0x7a>
 8001b8a:	69bb      	ldr	r3, [r7, #24]
 8001b8c:	ee07 3a90 	vmov	s15, r3
 8001b90:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001b94:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001bb0 <bmp280_read_temp_press+0x88>
 8001b98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	edc3 7a00 	vstr	s15, [r3]
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3720      	adds	r7, #32
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	42c80000 	.word	0x42c80000
 8001bb0:	43800000 	.word	0x43800000

08001bb4 <rb_next>:
// Single instance pointer for ISR callbacks
static GPS_Handle_t *s_gps = NULL;

// ===== Private Helper Functions =====

static inline uint16_t rb_next(uint16_t i) {
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	80fb      	strh	r3, [r7, #6]
    return (uint16_t)((i + 1u) % GPS_RX_BUFFER_SIZE);
 8001bbe:	88fb      	ldrh	r3, [r7, #6]
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001bc8:	b29b      	uxth	r3, r3
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	370c      	adds	r7, #12
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr

08001bd6 <rb_put>:

static void rb_put(GPS_Handle_t *g, uint8_t b) {
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b084      	sub	sp, #16
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	6078      	str	r0, [r7, #4]
 8001bde:	460b      	mov	r3, r1
 8001be0:	70fb      	strb	r3, [r7, #3]
    uint16_t n = rb_next(g->rb_head);
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8001be8:	b29b      	uxth	r3, r3
 8001bea:	4618      	mov	r0, r3
 8001bec:	f7ff ffe2 	bl	8001bb4 <rb_next>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	81fb      	strh	r3, [r7, #14]
    if (n != g->rb_tail) {
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001bfa:	b29b      	uxth	r3, r3
 8001bfc:	89fa      	ldrh	r2, [r7, #14]
 8001bfe:	429a      	cmp	r2, r3
 8001c00:	d00d      	beq.n	8001c1e <rb_put+0x48>
        g->rb[g->rb_head] = b;
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8001c08:	b29b      	uxth	r3, r3
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	4413      	add	r3, r2
 8001c10:	78fa      	ldrb	r2, [r7, #3]
 8001c12:	f883 210a 	strb.w	r2, [r3, #266]	@ 0x10a
        g->rb_head = n;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	89fa      	ldrh	r2, [r7, #14]
 8001c1a:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
    }
    // Note: Silently drops on overflow
}
 8001c1e:	bf00      	nop
 8001c20:	3710      	adds	r7, #16
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bd80      	pop	{r7, pc}

08001c26 <rb_get>:

static bool rb_get(GPS_Handle_t *g, uint8_t *b) {
 8001c26:	b580      	push	{r7, lr}
 8001c28:	b082      	sub	sp, #8
 8001c2a:	af00      	add	r7, sp, #0
 8001c2c:	6078      	str	r0, [r7, #4]
 8001c2e:	6039      	str	r1, [r7, #0]
    if (g->rb_tail == g->rb_head) return false;  // empty
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8b3 3106 	ldrh.w	r3, [r3, #262]	@ 0x106
 8001c3e:	b29b      	uxth	r3, r3
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d101      	bne.n	8001c48 <rb_get+0x22>
 8001c44:	2300      	movs	r3, #0
 8001c46:	e017      	b.n	8001c78 <rb_get+0x52>
    *b = g->rb[g->rb_tail];
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001c4e:	b29b      	uxth	r3, r3
 8001c50:	461a      	mov	r2, r3
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4413      	add	r3, r2
 8001c56:	f893 210a 	ldrb.w	r2, [r3, #266]	@ 0x10a
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	701a      	strb	r2, [r3, #0]
    g->rb_tail = rb_next(g->rb_tail);
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	f8b3 3108 	ldrh.w	r3, [r3, #264]	@ 0x108
 8001c64:	b29b      	uxth	r3, r3
 8001c66:	4618      	mov	r0, r3
 8001c68:	f7ff ffa4 	bl	8001bb4 <rb_next>
 8001c6c:	4603      	mov	r3, r0
 8001c6e:	461a      	mov	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    return true;
 8001c76:	2301      	movs	r3, #1
}
 8001c78:	4618      	mov	r0, r3
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <hex_nib>:

static int hex_nib(char c) {
 8001c80:	b480      	push	{r7}
 8001c82:	b083      	sub	sp, #12
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	4603      	mov	r3, r0
 8001c88:	71fb      	strb	r3, [r7, #7]
    if (c >= '0' && c <= '9') return c - '0';
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b2f      	cmp	r3, #47	@ 0x2f
 8001c8e:	d905      	bls.n	8001c9c <hex_nib+0x1c>
 8001c90:	79fb      	ldrb	r3, [r7, #7]
 8001c92:	2b39      	cmp	r3, #57	@ 0x39
 8001c94:	d802      	bhi.n	8001c9c <hex_nib+0x1c>
 8001c96:	79fb      	ldrb	r3, [r7, #7]
 8001c98:	3b30      	subs	r3, #48	@ 0x30
 8001c9a:	e013      	b.n	8001cc4 <hex_nib+0x44>
    if (c >= 'A' && c <= 'F') return 10 + (c - 'A');
 8001c9c:	79fb      	ldrb	r3, [r7, #7]
 8001c9e:	2b40      	cmp	r3, #64	@ 0x40
 8001ca0:	d905      	bls.n	8001cae <hex_nib+0x2e>
 8001ca2:	79fb      	ldrb	r3, [r7, #7]
 8001ca4:	2b46      	cmp	r3, #70	@ 0x46
 8001ca6:	d802      	bhi.n	8001cae <hex_nib+0x2e>
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	3b37      	subs	r3, #55	@ 0x37
 8001cac:	e00a      	b.n	8001cc4 <hex_nib+0x44>
    if (c >= 'a' && c <= 'f') return 10 + (c - 'a');
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	2b60      	cmp	r3, #96	@ 0x60
 8001cb2:	d905      	bls.n	8001cc0 <hex_nib+0x40>
 8001cb4:	79fb      	ldrb	r3, [r7, #7]
 8001cb6:	2b66      	cmp	r3, #102	@ 0x66
 8001cb8:	d802      	bhi.n	8001cc0 <hex_nib+0x40>
 8001cba:	79fb      	ldrb	r3, [r7, #7]
 8001cbc:	3b57      	subs	r3, #87	@ 0x57
 8001cbe:	e001      	b.n	8001cc4 <hex_nib+0x44>
    return -1;
 8001cc0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	370c      	adds	r7, #12
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr

08001cd0 <nmea_checksum>:

// Calculate NMEA checksum (XOR between '$' and '*')
static uint8_t nmea_checksum(const char *sentence) {
 8001cd0:	b480      	push	{r7}
 8001cd2:	b085      	sub	sp, #20
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
    uint8_t checksum = 0;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	73fb      	strb	r3, [r7, #15]
    // Start after '$', stop at '*' or end
    for (const char *p = sentence + 1; *p && *p != '*'; ++p) {
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	3301      	adds	r3, #1
 8001ce0:	60bb      	str	r3, [r7, #8]
 8001ce2:	e007      	b.n	8001cf4 <nmea_checksum+0x24>
        checksum ^= *p;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	781a      	ldrb	r2, [r3, #0]
 8001ce8:	7bfb      	ldrb	r3, [r7, #15]
 8001cea:	4053      	eors	r3, r2
 8001cec:	73fb      	strb	r3, [r7, #15]
    for (const char *p = sentence + 1; *p && *p != '*'; ++p) {
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	60bb      	str	r3, [r7, #8]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	781b      	ldrb	r3, [r3, #0]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <nmea_checksum+0x34>
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	2b2a      	cmp	r3, #42	@ 0x2a
 8001d02:	d1ef      	bne.n	8001ce4 <nmea_checksum+0x14>
    }
    return checksum;
 8001d04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d06:	4618      	mov	r0, r3
 8001d08:	3714      	adds	r7, #20
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <parse_nmea_field>:

// Parse common NMEA fields
static bool parse_nmea_field(const char **ptr, char *buffer, size_t buf_size) {
 8001d12:	b580      	push	{r7, lr}
 8001d14:	b088      	sub	sp, #32
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	60f8      	str	r0, [r7, #12]
 8001d1a:	60b9      	str	r1, [r7, #8]
 8001d1c:	607a      	str	r2, [r7, #4]
    if (!ptr || !*ptr || !buffer) return false;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d006      	beq.n	8001d32 <parse_nmea_field+0x20>
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d002      	beq.n	8001d32 <parse_nmea_field+0x20>
 8001d2c:	68bb      	ldr	r3, [r7, #8]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d101      	bne.n	8001d36 <parse_nmea_field+0x24>
 8001d32:	2300      	movs	r3, #0
 8001d34:	e03e      	b.n	8001db4 <parse_nmea_field+0xa2>

    const char *start = *ptr;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	617b      	str	r3, [r7, #20]
    const char *end = strchr(start, ',');
 8001d3c:	212c      	movs	r1, #44	@ 0x2c
 8001d3e:	6978      	ldr	r0, [r7, #20]
 8001d40:	f00c fbb6 	bl	800e4b0 <strchr>
 8001d44:	61f8      	str	r0, [r7, #28]
    if (!end) end = strchr(start, '*');  // Last field before checksum
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d104      	bne.n	8001d56 <parse_nmea_field+0x44>
 8001d4c:	212a      	movs	r1, #42	@ 0x2a
 8001d4e:	6978      	ldr	r0, [r7, #20]
 8001d50:	f00c fbae 	bl	800e4b0 <strchr>
 8001d54:	61f8      	str	r0, [r7, #28]
    if (!end) end = start + strlen(start);  // End of string
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d106      	bne.n	8001d6a <parse_nmea_field+0x58>
 8001d5c:	6978      	ldr	r0, [r7, #20]
 8001d5e:	f7fe fa8f 	bl	8000280 <strlen>
 8001d62:	4602      	mov	r2, r0
 8001d64:	697b      	ldr	r3, [r7, #20]
 8001d66:	4413      	add	r3, r2
 8001d68:	61fb      	str	r3, [r7, #28]

    size_t len = (size_t)(end - start);
 8001d6a:	69fa      	ldr	r2, [r7, #28]
 8001d6c:	697b      	ldr	r3, [r7, #20]
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	61bb      	str	r3, [r7, #24]
    if (len >= buf_size) len = buf_size - 1;
 8001d72:	69ba      	ldr	r2, [r7, #24]
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d302      	bcc.n	8001d80 <parse_nmea_field+0x6e>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	3b01      	subs	r3, #1
 8001d7e:	61bb      	str	r3, [r7, #24]

    memcpy(buffer, start, len);
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	6979      	ldr	r1, [r7, #20]
 8001d84:	68b8      	ldr	r0, [r7, #8]
 8001d86:	f00c fc40 	bl	800e60a <memcpy>
    buffer[len] = '\0';
 8001d8a:	68ba      	ldr	r2, [r7, #8]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	4413      	add	r3, r2
 8001d90:	2200      	movs	r2, #0
 8001d92:	701a      	strb	r2, [r3, #0]

    *ptr = (*end == ',') ? end + 1 : end;
 8001d94:	69fb      	ldr	r3, [r7, #28]
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	2b2c      	cmp	r3, #44	@ 0x2c
 8001d9a:	d102      	bne.n	8001da2 <parse_nmea_field+0x90>
 8001d9c:	69fb      	ldr	r3, [r7, #28]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	e000      	b.n	8001da4 <parse_nmea_field+0x92>
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	68fa      	ldr	r2, [r7, #12]
 8001da6:	6013      	str	r3, [r2, #0]
    return len > 0;
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	bf14      	ite	ne
 8001dae:	2301      	movne	r3, #1
 8001db0:	2300      	moveq	r3, #0
 8001db2:	b2db      	uxtb	r3, r3
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3720      	adds	r7, #32
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <parse_coord>:

static double parse_coord(const char *coord_str, const char *dir_str) {
 8001dbc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001dc0:	b08a      	sub	sp, #40	@ 0x28
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
    if (!coord_str || !dir_str || strlen(coord_str) < 4) return 0.0;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d008      	beq.n	8001de0 <parse_coord+0x24>
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d005      	beq.n	8001de0 <parse_coord+0x24>
 8001dd4:	6878      	ldr	r0, [r7, #4]
 8001dd6:	f7fe fa53 	bl	8000280 <strlen>
 8001dda:	4603      	mov	r3, r0
 8001ddc:	2b03      	cmp	r3, #3
 8001dde:	d804      	bhi.n	8001dea <parse_coord+0x2e>
 8001de0:	f04f 0200 	mov.w	r2, #0
 8001de4:	f04f 0300 	mov.w	r3, #0
 8001de8:	e05a      	b.n	8001ea0 <parse_coord+0xe4>

    double coord = atof(coord_str);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f00a fe5e 	bl	800caac <atof>
 8001df0:	ed87 0b06 	vstr	d0, [r7, #24]
    if (coord == 0.0) return 0.0;
 8001df4:	f04f 0200 	mov.w	r2, #0
 8001df8:	f04f 0300 	mov.w	r3, #0
 8001dfc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e00:	f7fe fe6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d004      	beq.n	8001e14 <parse_coord+0x58>
 8001e0a:	f04f 0200 	mov.w	r2, #0
 8001e0e:	f04f 0300 	mov.w	r3, #0
 8001e12:	e045      	b.n	8001ea0 <parse_coord+0xe4>

    // Convert DDMM.MMMM to decimal degrees
    int degrees = (int)(coord / 100);
 8001e14:	f04f 0200 	mov.w	r2, #0
 8001e18:	4b26      	ldr	r3, [pc, #152]	@ (8001eb4 <parse_coord+0xf8>)
 8001e1a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e1e:	f7fe fd1d 	bl	800085c <__aeabi_ddiv>
 8001e22:	4602      	mov	r2, r0
 8001e24:	460b      	mov	r3, r1
 8001e26:	4610      	mov	r0, r2
 8001e28:	4619      	mov	r1, r3
 8001e2a:	f7fe fe9d 	bl	8000b68 <__aeabi_d2iz>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	617b      	str	r3, [r7, #20]
    double minutes = coord - (degrees * 100);
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2264      	movs	r2, #100	@ 0x64
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	f7fe fb7a 	bl	8000534 <__aeabi_i2d>
 8001e40:	4602      	mov	r2, r0
 8001e42:	460b      	mov	r3, r1
 8001e44:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001e48:	f7fe fa26 	bl	8000298 <__aeabi_dsub>
 8001e4c:	4602      	mov	r2, r0
 8001e4e:	460b      	mov	r3, r1
 8001e50:	e9c7 2302 	strd	r2, r3, [r7, #8]
    double result = degrees + (minutes / 60.0);
 8001e54:	6978      	ldr	r0, [r7, #20]
 8001e56:	f7fe fb6d 	bl	8000534 <__aeabi_i2d>
 8001e5a:	4680      	mov	r8, r0
 8001e5c:	4689      	mov	r9, r1
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	4b15      	ldr	r3, [pc, #84]	@ (8001eb8 <parse_coord+0xfc>)
 8001e64:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001e68:	f7fe fcf8 	bl	800085c <__aeabi_ddiv>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	460b      	mov	r3, r1
 8001e70:	4640      	mov	r0, r8
 8001e72:	4649      	mov	r1, r9
 8001e74:	f7fe fa12 	bl	800029c <__adddf3>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	460b      	mov	r3, r1
 8001e7c:	e9c7 2308 	strd	r2, r3, [r7, #32]

    // Apply direction
    if (dir_str[0] == 'S' || dir_str[0] == 'W') result = -result;
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	781b      	ldrb	r3, [r3, #0]
 8001e84:	2b53      	cmp	r3, #83	@ 0x53
 8001e86:	d003      	beq.n	8001e90 <parse_coord+0xd4>
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	2b57      	cmp	r3, #87	@ 0x57
 8001e8e:	d105      	bne.n	8001e9c <parse_coord+0xe0>
 8001e90:	6a3c      	ldr	r4, [r7, #32]
 8001e92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e94:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 8001e98:	e9c7 4508 	strd	r4, r5, [r7, #32]

    return result;
 8001e9c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
}
 8001ea0:	ec43 2b17 	vmov	d7, r2, r3
 8001ea4:	eeb0 0a47 	vmov.f32	s0, s14
 8001ea8:	eef0 0a67 	vmov.f32	s1, s15
 8001eac:	3728      	adds	r7, #40	@ 0x28
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001eb4:	40590000 	.word	0x40590000
 8001eb8:	404e0000 	.word	0x404e0000

08001ebc <parse_gprmc>:

// Parse GPRMC sentence: $GPRMC,time,status,lat,latdir,lon,londir,speed,course,date,magvar,magvardir*checksum
static bool parse_gprmc(GPS_Handle_t *gps, const char *sentence) {
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b098      	sub	sp, #96	@ 0x60
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
    const char *ptr = strchr(sentence, ',');
 8001ec6:	212c      	movs	r1, #44	@ 0x2c
 8001ec8:	6838      	ldr	r0, [r7, #0]
 8001eca:	f00c faf1 	bl	800e4b0 <strchr>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	657b      	str	r3, [r7, #84]	@ 0x54
    if (!ptr) return false;
 8001ed2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d101      	bne.n	8001edc <parse_gprmc+0x20>
 8001ed8:	2300      	movs	r3, #0
 8001eda:	e134      	b.n	8002146 <parse_gprmc+0x28a>
    ptr++; // Skip past first comma after "GPRMC"
 8001edc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001ede:	3301      	adds	r3, #1
 8001ee0:	657b      	str	r3, [r7, #84]	@ 0x54

    char field[32];
    GPS_Fix_t *fix = &gps->fix;
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f503 7364 	add.w	r3, r3, #912	@ 0x390
 8001ee8:	65fb      	str	r3, [r7, #92]	@ 0x5c

    // Time (HHMMSS.sss)
    if (parse_nmea_field(&ptr, field, sizeof(field)) && strlen(field) >= 6) {
 8001eea:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001eee:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ef2:	2220      	movs	r2, #32
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff ff0c 	bl	8001d12 <parse_nmea_field>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d03d      	beq.n	8001f7c <parse_gprmc+0xc0>
 8001f00:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7fe f9bb 	bl	8000280 <strlen>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d935      	bls.n	8001f7c <parse_gprmc+0xc0>
        fix->hour = (field[0] - '0') * 10 + (field[1] - '0');
 8001f10:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f14:	3b30      	subs	r3, #48	@ 0x30
 8001f16:	b2db      	uxtb	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	0092      	lsls	r2, r2, #2
 8001f1c:	4413      	add	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 8001f26:	4413      	add	r3, r2
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	3b30      	subs	r3, #48	@ 0x30
 8001f2c:	b2da      	uxtb	r2, r3
 8001f2e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f30:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        fix->minute = (field[2] - '0') * 10 + (field[3] - '0');
 8001f34:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 8001f38:	3b30      	subs	r3, #48	@ 0x30
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	0092      	lsls	r2, r2, #2
 8001f40:	4413      	add	r3, r2
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8001f4a:	4413      	add	r3, r2
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	3b30      	subs	r3, #48	@ 0x30
 8001f50:	b2da      	uxtb	r2, r3
 8001f52:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f54:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
        fix->second = (field[4] - '0') * 10 + (field[5] - '0');
 8001f58:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8001f5c:	3b30      	subs	r3, #48	@ 0x30
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	461a      	mov	r2, r3
 8001f62:	0092      	lsls	r2, r2, #2
 8001f64:	4413      	add	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8001f6e:	4413      	add	r3, r2
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	3b30      	subs	r3, #48	@ 0x30
 8001f74:	b2da      	uxtb	r2, r3
 8001f76:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001f78:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26
    }

    // Status (A=valid, V=invalid)
    parse_nmea_field(&ptr, field, sizeof(field));
 8001f7c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8001f80:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001f84:	2220      	movs	r2, #32
 8001f86:	4618      	mov	r0, r3
 8001f88:	f7ff fec3 	bl	8001d12 <parse_nmea_field>
    bool valid = (field[0] == 'A');
 8001f8c:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 8001f90:	2b41      	cmp	r3, #65	@ 0x41
 8001f92:	bf0c      	ite	eq
 8001f94:	2301      	moveq	r3, #1
 8001f96:	2300      	movne	r3, #0
 8001f98:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b

    // Latitude
    char lat_str[16], lat_dir[4];
    parse_nmea_field(&ptr, lat_str, sizeof(lat_str));
 8001f9c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8001fa0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fa4:	2210      	movs	r2, #16
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f7ff feb3 	bl	8001d12 <parse_nmea_field>
    parse_nmea_field(&ptr, lat_dir, sizeof(lat_dir));
 8001fac:	f107 0120 	add.w	r1, r7, #32
 8001fb0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fb4:	2204      	movs	r2, #4
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff feab 	bl	8001d12 <parse_nmea_field>
    if (valid) fix->latitude_deg = parse_coord(lat_str, lat_dir);
 8001fbc:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00e      	beq.n	8001fe2 <parse_gprmc+0x126>
 8001fc4:	f107 0220 	add.w	r2, r7, #32
 8001fc8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff fef4 	bl	8001dbc <parse_coord>
 8001fd4:	eeb0 7a40 	vmov.f32	s14, s0
 8001fd8:	eef0 7a60 	vmov.f32	s15, s1
 8001fdc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001fde:	ed83 7b02 	vstr	d7, [r3, #8]

    // Longitude
    char lon_str[16], lon_dir[4];
    parse_nmea_field(&ptr, lon_str, sizeof(lon_str));
 8001fe2:	f107 0110 	add.w	r1, r7, #16
 8001fe6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001fea:	2210      	movs	r2, #16
 8001fec:	4618      	mov	r0, r3
 8001fee:	f7ff fe90 	bl	8001d12 <parse_nmea_field>
    parse_nmea_field(&ptr, lon_dir, sizeof(lon_dir));
 8001ff2:	f107 010c 	add.w	r1, r7, #12
 8001ff6:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001ffa:	2204      	movs	r2, #4
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff fe88 	bl	8001d12 <parse_nmea_field>
    if (valid) fix->longitude_deg = parse_coord(lon_str, lon_dir);
 8002002:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002006:	2b00      	cmp	r3, #0
 8002008:	d00e      	beq.n	8002028 <parse_gprmc+0x16c>
 800200a:	f107 020c 	add.w	r2, r7, #12
 800200e:	f107 0310 	add.w	r3, r7, #16
 8002012:	4611      	mov	r1, r2
 8002014:	4618      	mov	r0, r3
 8002016:	f7ff fed1 	bl	8001dbc <parse_coord>
 800201a:	eeb0 7a40 	vmov.f32	s14, s0
 800201e:	eef0 7a60 	vmov.f32	s15, s1
 8002022:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002024:	ed83 7b04 	vstr	d7, [r3, #16]

    // Speed (knots)
    parse_nmea_field(&ptr, field, sizeof(field));
 8002028:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800202c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002030:	2220      	movs	r2, #32
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff fe6d 	bl	8001d12 <parse_nmea_field>
    if (valid) fix->speed_knots = (float)atof(field);
 8002038:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 800203c:	2b00      	cmp	r3, #0
 800203e:	d00d      	beq.n	800205c <parse_gprmc+0x1a0>
 8002040:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002044:	4618      	mov	r0, r3
 8002046:	f00a fd31 	bl	800caac <atof>
 800204a:	ec53 2b10 	vmov	r2, r3, d0
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fdd1 	bl	8000bf8 <__aeabi_d2f>
 8002056:	4602      	mov	r2, r0
 8002058:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800205a:	61da      	str	r2, [r3, #28]

    // Course (degrees)
    parse_nmea_field(&ptr, field, sizeof(field));
 800205c:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002060:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002064:	2220      	movs	r2, #32
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fe53 	bl	8001d12 <parse_nmea_field>
    if (valid) fix->course_deg = (float)atof(field);
 800206c:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8002070:	2b00      	cmp	r3, #0
 8002072:	d00d      	beq.n	8002090 <parse_gprmc+0x1d4>
 8002074:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002078:	4618      	mov	r0, r3
 800207a:	f00a fd17 	bl	800caac <atof>
 800207e:	ec53 2b10 	vmov	r2, r3, d0
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fdb7 	bl	8000bf8 <__aeabi_d2f>
 800208a:	4602      	mov	r2, r0
 800208c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800208e:	621a      	str	r2, [r3, #32]

    // Date (DDMMYY)
    if (parse_nmea_field(&ptr, field, sizeof(field)) && strlen(field) >= 6) {
 8002090:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8002094:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002098:	2220      	movs	r2, #32
 800209a:	4618      	mov	r0, r3
 800209c:	f7ff fe39 	bl	8001d12 <parse_nmea_field>
 80020a0:	4603      	mov	r3, r0
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d04a      	beq.n	800213c <parse_gprmc+0x280>
 80020a6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80020aa:	4618      	mov	r0, r3
 80020ac:	f7fe f8e8 	bl	8000280 <strlen>
 80020b0:	4603      	mov	r3, r0
 80020b2:	2b05      	cmp	r3, #5
 80020b4:	d942      	bls.n	800213c <parse_gprmc+0x280>
        fix->day = (field[0] - '0') * 10 + (field[1] - '0');
 80020b6:	f897 3034 	ldrb.w	r3, [r7, #52]	@ 0x34
 80020ba:	3b30      	subs	r3, #48	@ 0x30
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	461a      	mov	r2, r3
 80020c0:	0092      	lsls	r2, r2, #2
 80020c2:	4413      	add	r3, r2
 80020c4:	005b      	lsls	r3, r3, #1
 80020c6:	b2da      	uxtb	r2, r3
 80020c8:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
 80020cc:	4413      	add	r3, r2
 80020ce:	b2db      	uxtb	r3, r3
 80020d0:	3b30      	subs	r3, #48	@ 0x30
 80020d2:	b2da      	uxtb	r2, r3
 80020d4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020d6:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27
        fix->month = (field[2] - '0') * 10 + (field[3] - '0');
 80020da:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
 80020de:	3b30      	subs	r3, #48	@ 0x30
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	461a      	mov	r2, r3
 80020e4:	0092      	lsls	r2, r2, #2
 80020e6:	4413      	add	r3, r2
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	b2da      	uxtb	r2, r3
 80020ec:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80020f0:	4413      	add	r3, r2
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	3b30      	subs	r3, #48	@ 0x30
 80020f6:	b2da      	uxtb	r2, r3
 80020f8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80020fa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
        fix->year = (field[4] - '0') * 10 + (field[5] - '0');
 80020fe:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002102:	3b30      	subs	r3, #48	@ 0x30
 8002104:	b2db      	uxtb	r3, r3
 8002106:	461a      	mov	r2, r3
 8002108:	0092      	lsls	r2, r2, #2
 800210a:	4413      	add	r3, r2
 800210c:	005b      	lsls	r3, r3, #1
 800210e:	b2da      	uxtb	r2, r3
 8002110:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002114:	4413      	add	r3, r2
 8002116:	b2db      	uxtb	r3, r3
 8002118:	3b30      	subs	r3, #48	@ 0x30
 800211a:	b2da      	uxtb	r2, r3
 800211c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800211e:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
        if (fix->year < 80) fix->year += 100; // Y2K handling: 00-79 -> 2000-2079
 8002122:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002124:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002128:	2b4f      	cmp	r3, #79	@ 0x4f
 800212a:	d807      	bhi.n	800213c <parse_gprmc+0x280>
 800212c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800212e:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 8002132:	3364      	adds	r3, #100	@ 0x64
 8002134:	b2da      	uxtb	r2, r3
 8002136:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002138:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29
    }

    fix->valid = valid;
 800213c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800213e:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8002142:	701a      	strb	r2, [r3, #0]
    return true;
 8002144:	2301      	movs	r3, #1
}
 8002146:	4618      	mov	r0, r3
 8002148:	3760      	adds	r7, #96	@ 0x60
 800214a:	46bd      	mov	sp, r7
 800214c:	bd80      	pop	{r7, pc}

0800214e <parse_gpgga>:

// Parse GPGGA sentence for additional fix info
static bool parse_gpgga(GPS_Handle_t *gps, const char *sentence) {
 800214e:	b580      	push	{r7, lr}
 8002150:	b08c      	sub	sp, #48	@ 0x30
 8002152:	af00      	add	r7, sp, #0
 8002154:	6078      	str	r0, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
    const char *ptr = strchr(sentence, ',');
 8002158:	212c      	movs	r1, #44	@ 0x2c
 800215a:	6838      	ldr	r0, [r7, #0]
 800215c:	f00c f9a8 	bl	800e4b0 <strchr>
 8002160:	4603      	mov	r3, r0
 8002162:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (!ptr) return false;
 8002164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002166:	2b00      	cmp	r3, #0
 8002168:	d101      	bne.n	800216e <parse_gpgga+0x20>
 800216a:	2300      	movs	r3, #0
 800216c:	e07d      	b.n	800226a <parse_gpgga+0x11c>
    ptr++; // Skip past first comma
 800216e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002170:	3301      	adds	r3, #1
 8002172:	62bb      	str	r3, [r7, #40]	@ 0x28

    char field[32];
    GPS_Fix_t *fix = &gps->fix;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f503 7364 	add.w	r3, r3, #912	@ 0x390
 800217a:	62fb      	str	r3, [r7, #44]	@ 0x2c

    // Skip time field (already parsed from RMC)
    parse_nmea_field(&ptr, field, sizeof(field));
 800217c:	f107 0108 	add.w	r1, r7, #8
 8002180:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002184:	2220      	movs	r2, #32
 8002186:	4618      	mov	r0, r3
 8002188:	f7ff fdc3 	bl	8001d12 <parse_nmea_field>

    // Skip lat/lon (already from RMC)
    parse_nmea_field(&ptr, field, sizeof(field)); // lat
 800218c:	f107 0108 	add.w	r1, r7, #8
 8002190:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002194:	2220      	movs	r2, #32
 8002196:	4618      	mov	r0, r3
 8002198:	f7ff fdbb 	bl	8001d12 <parse_nmea_field>
    parse_nmea_field(&ptr, field, sizeof(field)); // lat dir
 800219c:	f107 0108 	add.w	r1, r7, #8
 80021a0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021a4:	2220      	movs	r2, #32
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fdb3 	bl	8001d12 <parse_nmea_field>
    parse_nmea_field(&ptr, field, sizeof(field)); // lon
 80021ac:	f107 0108 	add.w	r1, r7, #8
 80021b0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021b4:	2220      	movs	r2, #32
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fdab 	bl	8001d12 <parse_nmea_field>
    parse_nmea_field(&ptr, field, sizeof(field)); // lon dir
 80021bc:	f107 0108 	add.w	r1, r7, #8
 80021c0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021c4:	2220      	movs	r2, #32
 80021c6:	4618      	mov	r0, r3
 80021c8:	f7ff fda3 	bl	8001d12 <parse_nmea_field>

    // Fix quality (0=invalid, 1=GPS, 2=DGPS)
    parse_nmea_field(&ptr, field, sizeof(field));
 80021cc:	f107 0108 	add.w	r1, r7, #8
 80021d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021d4:	2220      	movs	r2, #32
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fd9b 	bl	8001d12 <parse_nmea_field>
    fix->fix_quality = (uint8_t)atoi(field);
 80021dc:	f107 0308 	add.w	r3, r7, #8
 80021e0:	4618      	mov	r0, r3
 80021e2:	f00a fc66 	bl	800cab2 <atoi>
 80021e6:	4603      	mov	r3, r0
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80021ec:	705a      	strb	r2, [r3, #1]

    // Number of satellites
    parse_nmea_field(&ptr, field, sizeof(field));
 80021ee:	f107 0108 	add.w	r1, r7, #8
 80021f2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80021f6:	2220      	movs	r2, #32
 80021f8:	4618      	mov	r0, r3
 80021fa:	f7ff fd8a 	bl	8001d12 <parse_nmea_field>
    fix->sats_in_use = (uint8_t)atoi(field);
 80021fe:	f107 0308 	add.w	r3, r7, #8
 8002202:	4618      	mov	r0, r3
 8002204:	f00a fc55 	bl	800cab2 <atoi>
 8002208:	4603      	mov	r3, r0
 800220a:	b2da      	uxtb	r2, r3
 800220c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800220e:	709a      	strb	r2, [r3, #2]

    // HDOP
    parse_nmea_field(&ptr, field, sizeof(field));
 8002210:	f107 0108 	add.w	r1, r7, #8
 8002214:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002218:	2220      	movs	r2, #32
 800221a:	4618      	mov	r0, r3
 800221c:	f7ff fd79 	bl	8001d12 <parse_nmea_field>
    fix->hdop = (float)atof(field);
 8002220:	f107 0308 	add.w	r3, r7, #8
 8002224:	4618      	mov	r0, r3
 8002226:	f00a fc41 	bl	800caac <atof>
 800222a:	ec53 2b10 	vmov	r2, r3, d0
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fce1 	bl	8000bf8 <__aeabi_d2f>
 8002236:	4602      	mov	r2, r0
 8002238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800223a:	605a      	str	r2, [r3, #4]

    // Altitude
    parse_nmea_field(&ptr, field, sizeof(field));
 800223c:	f107 0108 	add.w	r1, r7, #8
 8002240:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002244:	2220      	movs	r2, #32
 8002246:	4618      	mov	r0, r3
 8002248:	f7ff fd63 	bl	8001d12 <parse_nmea_field>
    fix->altitude_m = (float)atof(field);
 800224c:	f107 0308 	add.w	r3, r7, #8
 8002250:	4618      	mov	r0, r3
 8002252:	f00a fc2b 	bl	800caac <atof>
 8002256:	ec53 2b10 	vmov	r2, r3, d0
 800225a:	4610      	mov	r0, r2
 800225c:	4619      	mov	r1, r3
 800225e:	f7fe fccb 	bl	8000bf8 <__aeabi_d2f>
 8002262:	4602      	mov	r2, r0
 8002264:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002266:	619a      	str	r2, [r3, #24]

    return true;
 8002268:	2301      	movs	r3, #1
}
 800226a:	4618      	mov	r0, r3
 800226c:	3730      	adds	r7, #48	@ 0x30
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}
	...

08002274 <HAL_UARTEx_RxEventCallback>:

// ===== HAL Callbacks =====

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
    if (!s_gps || huart != s_gps->huart || !s_gps->started || Size == 0) return;
 8002280:	4b24      	ldr	r3, [pc, #144]	@ (8002314 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d040      	beq.n	800230a <HAL_UARTEx_RxEventCallback+0x96>
 8002288:	4b22      	ldr	r3, [pc, #136]	@ (8002314 <HAL_UARTEx_RxEventCallback+0xa0>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	687a      	ldr	r2, [r7, #4]
 8002290:	429a      	cmp	r2, r3
 8002292:	d13a      	bne.n	800230a <HAL_UARTEx_RxEventCallback+0x96>
 8002294:	4b1f      	ldr	r3, [pc, #124]	@ (8002314 <HAL_UARTEx_RxEventCallback+0xa0>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f893 33e8 	ldrb.w	r3, [r3, #1000]	@ 0x3e8
 800229c:	f083 0301 	eor.w	r3, r3, #1
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d131      	bne.n	800230a <HAL_UARTEx_RxEventCallback+0x96>
 80022a6:	887b      	ldrh	r3, [r7, #2]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d02e      	beq.n	800230a <HAL_UARTEx_RxEventCallback+0x96>

    gps_irq_events++;
 80022ac:	4b1a      	ldr	r3, [pc, #104]	@ (8002318 <HAL_UARTEx_RxEventCallback+0xa4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	3301      	adds	r3, #1
 80022b2:	4a19      	ldr	r2, [pc, #100]	@ (8002318 <HAL_UARTEx_RxEventCallback+0xa4>)
 80022b4:	6013      	str	r3, [r2, #0]
    GPS_OnRxChunk(s_gps, s_gps->dma_buf, Size);
 80022b6:	4b17      	ldr	r3, [pc, #92]	@ (8002314 <HAL_UARTEx_RxEventCallback+0xa0>)
 80022b8:	6818      	ldr	r0, [r3, #0]
 80022ba:	4b16      	ldr	r3, [pc, #88]	@ (8002314 <HAL_UARTEx_RxEventCallback+0xa0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	3305      	adds	r3, #5
 80022c0:	887a      	ldrh	r2, [r7, #2]
 80022c2:	4619      	mov	r1, r3
 80022c4:	f000 f96e 	bl	80025a4 <GPS_OnRxChunk>

    // Re-arm DMA reception
    HAL_StatusTypeDef st = HAL_UARTEx_ReceiveToIdle_DMA(huart, s_gps->dma_buf, GPS_DMA_BUFFER_SIZE);
 80022c8:	4b12      	ldr	r3, [pc, #72]	@ (8002314 <HAL_UARTEx_RxEventCallback+0xa0>)
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	3305      	adds	r3, #5
 80022ce:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80022d2:	4619      	mov	r1, r3
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f005 fa81 	bl	80077dc <HAL_UARTEx_ReceiveToIdle_DMA>
 80022da:	4603      	mov	r3, r0
 80022dc:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 80022de:	7bfb      	ldrb	r3, [r7, #15]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d007      	beq.n	80022f4 <HAL_UARTEx_RxEventCallback+0x80>
        GPS_DEBUG("RxEvent: re-arm failed st=%d err=0x%08lx\r\n", st, huart->ErrorCode);
 80022e4:	7bf9      	ldrb	r1, [r7, #15]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022ea:	461a      	mov	r2, r3
 80022ec:	480b      	ldr	r0, [pc, #44]	@ (800231c <HAL_UARTEx_RxEventCallback+0xa8>)
 80022ee:	f00b ff8f 	bl	800e210 <iprintf>
 80022f2:	e00b      	b.n	800230c <HAL_UARTEx_RxEventCallback+0x98>
    } else {
        __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT); // Disable half-transfer interrupt
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f022 0208 	bic.w	r2, r2, #8
 8002306:	601a      	str	r2, [r3, #0]
 8002308:	e000      	b.n	800230c <HAL_UARTEx_RxEventCallback+0x98>
    if (!s_gps || huart != s_gps->huart || !s_gps->started || Size == 0) return;
 800230a:	bf00      	nop
    }
}
 800230c:	3710      	adds	r7, #16
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	200002ec 	.word	0x200002ec
 8002318:	200002e4 	.word	0x200002e4
 800231c:	080115e0 	.word	0x080115e0

08002320 <HAL_UART_ErrorCallback>:

void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
    if (!s_gps || huart != s_gps->huart) return;
 8002328:	4b16      	ldr	r3, [pc, #88]	@ (8002384 <HAL_UART_ErrorCallback+0x64>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d024      	beq.n	800237a <HAL_UART_ErrorCallback+0x5a>
 8002330:	4b14      	ldr	r3, [pc, #80]	@ (8002384 <HAL_UART_ErrorCallback+0x64>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	687a      	ldr	r2, [r7, #4]
 8002338:	429a      	cmp	r2, r3
 800233a:	d11e      	bne.n	800237a <HAL_UART_ErrorCallback+0x5a>

    GPS_DEBUG("UART error: 0x%08lx (state=%lu)\r\n",
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c5c      	ldr	r4, [r3, #68]	@ 0x44
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f005 fd6d 	bl	8007e20 <HAL_UART_GetState>
 8002346:	4603      	mov	r3, r0
 8002348:	461a      	mov	r2, r3
 800234a:	4621      	mov	r1, r4
 800234c:	480e      	ldr	r0, [pc, #56]	@ (8002388 <HAL_UART_ErrorCallback+0x68>)
 800234e:	f00b ff5f 	bl	800e210 <iprintf>
              huart->ErrorCode, (unsigned long)HAL_UART_GetState(huart));

    // Try to recover by re-arming DMA
    HAL_UARTEx_ReceiveToIdle_DMA(huart, s_gps->dma_buf, GPS_DMA_BUFFER_SIZE);
 8002352:	4b0c      	ldr	r3, [pc, #48]	@ (8002384 <HAL_UART_ErrorCallback+0x64>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3305      	adds	r3, #5
 8002358:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f005 fa3c 	bl	80077dc <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(huart->hdmarx, DMA_IT_HT);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f022 0208 	bic.w	r2, r2, #8
 8002376:	601a      	str	r2, [r3, #0]
 8002378:	e000      	b.n	800237c <HAL_UART_ErrorCallback+0x5c>
    if (!s_gps || huart != s_gps->huart) return;
 800237a:	bf00      	nop
}
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	bd90      	pop	{r4, r7, pc}
 8002382:	bf00      	nop
 8002384:	200002ec 	.word	0x200002ec
 8002388:	08011614 	.word	0x08011614

0800238c <GPS_Init>:

// ===== Public API Implementation =====

void GPS_Init(GPS_Handle_t *gps, UART_HandleTypeDef *huart, GPS_RxMode_t mode, const GPS_OptionalPins_t *pins) {
 800238c:	b5b0      	push	{r4, r5, r7, lr}
 800238e:	b084      	sub	sp, #16
 8002390:	af00      	add	r7, sp, #0
 8002392:	60f8      	str	r0, [r7, #12]
 8002394:	60b9      	str	r1, [r7, #8]
 8002396:	603b      	str	r3, [r7, #0]
 8002398:	4613      	mov	r3, r2
 800239a:	71fb      	strb	r3, [r7, #7]
    if (!gps) return;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d076      	beq.n	8002490 <GPS_Init+0x104>

    // Clear entire structure
    memset(gps, 0, sizeof(*gps));
 80023a2:	f44f 727c 	mov.w	r2, #1008	@ 0x3f0
 80023a6:	2100      	movs	r1, #0
 80023a8:	68f8      	ldr	r0, [r7, #12]
 80023aa:	f00c f879 	bl	800e4a0 <memset>

    // Set hardware handles
    gps->huart = huart;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	68ba      	ldr	r2, [r7, #8]
 80023b2:	601a      	str	r2, [r3, #0]
    gps->rx_mode = mode;
 80023b4:	68fb      	ldr	r3, [r7, #12]
 80023b6:	79fa      	ldrb	r2, [r7, #7]
 80023b8:	711a      	strb	r2, [r3, #4]

    // Copy optional pins if provided
    if (pins) {
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d028      	beq.n	8002412 <GPS_Init+0x86>
        gps->pins = *pins;
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	f503 7472 	add.w	r4, r3, #968	@ 0x3c8
 80023c8:	4615      	mov	r5, r2
 80023ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80023cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80023ce:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80023d2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

        // Initialize optional pins to safe states
        if (gps->pins.RESET_Port) {
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <GPS_Init+0x68>
            HAL_GPIO_WritePin(gps->pins.RESET_Port, gps->pins.RESET_Pin, GPIO_PIN_SET); // Not reset
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f8d3 03c8 	ldr.w	r0, [r3, #968]	@ 0x3c8
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f8b3 33cc 	ldrh.w	r3, [r3, #972]	@ 0x3cc
 80023ec:	2201      	movs	r2, #1
 80023ee:	4619      	mov	r1, r3
 80023f0:	f002 fcf4 	bl	8004ddc <HAL_GPIO_WritePin>
        }
        if (gps->pins.FORCE_Port) {
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d009      	beq.n	8002412 <GPS_Init+0x86>
            HAL_GPIO_WritePin(gps->pins.FORCE_Port, gps->pins.FORCE_Pin, GPIO_PIN_RESET); // Not forced
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f8b3 33d4 	ldrh.w	r3, [r3, #980]	@ 0x3d4
 800240a:	2200      	movs	r2, #0
 800240c:	4619      	mov	r1, r3
 800240e:	f002 fce5 	bl	8004ddc <HAL_GPIO_WritePin>
        }
    }

    // Initialize buffers
    gps->rb_head = 0;
 8002412:	68fb      	ldr	r3, [r7, #12]
 8002414:	2200      	movs	r2, #0
 8002416:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
    gps->rb_tail = 0;
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    gps->line_len = 0;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	2200      	movs	r2, #0
 8002426:	f8a3 238a 	strh.w	r2, [r3, #906]	@ 0x38a

    // Initialize fix data
    gps->fix.valid = false;
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	2200      	movs	r2, #0
 800242e:	f883 2390 	strb.w	r2, [r3, #912]	@ 0x390
    gps->fix.fix_quality = 0;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 2391 	strb.w	r2, [r3, #913]	@ 0x391
    gps->fix.sats_in_use = 0;
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	2200      	movs	r2, #0
 800243e:	f883 2392 	strb.w	r2, [r3, #914]	@ 0x392
    gps->fix.hdop = 0.0f;
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	f04f 0200 	mov.w	r2, #0
 8002448:	f8c3 2394 	str.w	r2, [r3, #916]	@ 0x394
    gps->fix.latitude_deg = 0.0;
 800244c:	68f9      	ldr	r1, [r7, #12]
 800244e:	f04f 0200 	mov.w	r2, #0
 8002452:	f04f 0300 	mov.w	r3, #0
 8002456:	e9c1 23e6 	strd	r2, r3, [r1, #920]	@ 0x398
    gps->fix.longitude_deg = 0.0;
 800245a:	68f9      	ldr	r1, [r7, #12]
 800245c:	f04f 0200 	mov.w	r2, #0
 8002460:	f04f 0300 	mov.w	r3, #0
 8002464:	e9c1 23e8 	strd	r2, r3, [r1, #928]	@ 0x3a0
    gps->fix.altitude_m = 0.0f;
 8002468:	68fb      	ldr	r3, [r7, #12]
 800246a:	f04f 0200 	mov.w	r2, #0
 800246e:	f8c3 23a8 	str.w	r2, [r3, #936]	@ 0x3a8
    gps->fix.speed_knots = 0.0f;
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f04f 0200 	mov.w	r2, #0
 8002478:	f8c3 23ac 	str.w	r2, [r3, #940]	@ 0x3ac
    gps->fix.course_deg = 0.0f;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	f04f 0200 	mov.w	r2, #0
 8002482:	f8c3 23b0 	str.w	r2, [r3, #944]	@ 0x3b0

    gps->started = false;
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	2200      	movs	r2, #0
 800248a:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
 800248e:	e000      	b.n	8002492 <GPS_Init+0x106>
    if (!gps) return;
 8002490:	bf00      	nop
}
 8002492:	3710      	adds	r7, #16
 8002494:	46bd      	mov	sp, r7
 8002496:	bdb0      	pop	{r4, r5, r7, pc}

08002498 <GPS_Start>:

HAL_StatusTypeDef GPS_Start(GPS_Handle_t *gps) {
 8002498:	b580      	push	{r7, lr}
 800249a:	b084      	sub	sp, #16
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    if (!gps || !gps->huart) {
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d003      	beq.n	80024ae <GPS_Start+0x16>
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d104      	bne.n	80024b8 <GPS_Start+0x20>
        GPS_DEBUG("Start: Invalid GPS handle or UART\r\n");
 80024ae:	4837      	ldr	r0, [pc, #220]	@ (800258c <GPS_Start+0xf4>)
 80024b0:	f00b ff16 	bl	800e2e0 <puts>
        return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e064      	b.n	8002582 <GPS_Start+0xea>
    }

    if (!gps->huart->hdmarx) {
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d104      	bne.n	80024cc <GPS_Start+0x34>
        GPS_DEBUG("Start: No DMA configured - Check CubeMX USART1 RX DMA setup\r\n");
 80024c2:	4833      	ldr	r0, [pc, #204]	@ (8002590 <GPS_Start+0xf8>)
 80024c4:	f00b ff0c 	bl	800e2e0 <puts>
        return HAL_ERROR;
 80024c8:	2301      	movs	r3, #1
 80024ca:	e05a      	b.n	8002582 <GPS_Start+0xea>
    }

    GPS_DEBUG("Start: UART=%p, DMA=%p\r\n", (void*)gps->huart, (void*)gps->huart->hdmarx);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6819      	ldr	r1, [r3, #0]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024d6:	461a      	mov	r2, r3
 80024d8:	482e      	ldr	r0, [pc, #184]	@ (8002594 <GPS_Start+0xfc>)
 80024da:	f00b fe99 	bl	800e210 <iprintf>

    // Reset buffers
    gps->rb_head = 0;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2200      	movs	r2, #0
 80024e2:	f8a3 2106 	strh.w	r2, [r3, #262]	@ 0x106
    gps->rb_tail = 0;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	2200      	movs	r2, #0
 80024ea:	f8a3 2108 	strh.w	r2, [r3, #264]	@ 0x108
    gps->line_len = 0;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f8a3 238a 	strh.w	r2, [r3, #906]	@ 0x38a
    gps->started = true;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2201      	movs	r2, #1
 80024fa:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8

    // Set global pointer for callbacks
    s_gps = gps;
 80024fe:	4a26      	ldr	r2, [pc, #152]	@ (8002598 <GPS_Start+0x100>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6013      	str	r3, [r2, #0]

    // Clear any pending UART flags
    __HAL_UART_CLEAR_IDLEFLAG(gps->huart);
 8002504:	2300      	movs	r3, #0
 8002506:	60bb      	str	r3, [r7, #8]
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	60bb      	str	r3, [r7, #8]
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	685b      	ldr	r3, [r3, #4]
 800251a:	60bb      	str	r3, [r7, #8]
 800251c:	68bb      	ldr	r3, [r7, #8]
    gps->huart->ErrorCode = HAL_UART_ERROR_NONE;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	2200      	movs	r2, #0
 8002524:	645a      	str	r2, [r3, #68]	@ 0x44

    // Start DMA reception
    HAL_StatusTypeDef st = HAL_UARTEx_ReceiveToIdle_DMA(gps->huart, gps->dma_buf, GPS_DMA_BUFFER_SIZE);
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6818      	ldr	r0, [r3, #0]
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	3305      	adds	r3, #5
 800252e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002532:	4619      	mov	r1, r3
 8002534:	f005 f952 	bl	80077dc <HAL_UARTEx_ReceiveToIdle_DMA>
 8002538:	4603      	mov	r3, r0
 800253a:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) {
 800253c:	7bfb      	ldrb	r3, [r7, #15]
 800253e:	2b00      	cmp	r3, #0
 8002540:	d00d      	beq.n	800255e <GPS_Start+0xc6>
        GPS_DEBUG("Start: DMA start failed: %d, err=0x%08lx\r\n", st, gps->huart->ErrorCode);
 8002542:	7bf9      	ldrb	r1, [r7, #15]
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800254a:	461a      	mov	r2, r3
 800254c:	4813      	ldr	r0, [pc, #76]	@ (800259c <GPS_Start+0x104>)
 800254e:	f00b fe5f 	bl	800e210 <iprintf>
        gps->started = false;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2200      	movs	r2, #0
 8002556:	f883 23e8 	strb.w	r2, [r3, #1000]	@ 0x3e8
        return st;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	e011      	b.n	8002582 <GPS_Start+0xea>
    }

    // Disable half-transfer interrupt (we only need complete/idle)
    __HAL_DMA_DISABLE_IT(gps->huart->hdmarx, DMA_IT_HT);
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	681a      	ldr	r2, [r3, #0]
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f022 0208 	bic.w	r2, r2, #8
 8002574:	601a      	str	r2, [r3, #0]

    GPS_DEBUG("Start: OK - DMA armed for %d bytes\r\n", GPS_DMA_BUFFER_SIZE);
 8002576:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800257a:	4809      	ldr	r0, [pc, #36]	@ (80025a0 <GPS_Start+0x108>)
 800257c:	f00b fe48 	bl	800e210 <iprintf>
    return HAL_OK;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	3710      	adds	r7, #16
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	0801163c 	.word	0x0801163c
 8002590:	08011668 	.word	0x08011668
 8002594:	080116ac 	.word	0x080116ac
 8002598:	200002ec 	.word	0x200002ec
 800259c:	080116cc 	.word	0x080116cc
 80025a0:	08011700 	.word	0x08011700

080025a4 <GPS_OnRxChunk>:

void GPS_OnRxChunk(GPS_Handle_t *gps, const uint8_t *data, uint16_t len) {
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	4613      	mov	r3, r2
 80025b0:	80fb      	strh	r3, [r7, #6]
    if (!gps || !data) return;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d01b      	beq.n	80025f0 <GPS_OnRxChunk+0x4c>
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d018      	beq.n	80025f0 <GPS_OnRxChunk+0x4c>

    gps_rx_total += len;
 80025be:	88fa      	ldrh	r2, [r7, #6]
 80025c0:	4b0d      	ldr	r3, [pc, #52]	@ (80025f8 <GPS_OnRxChunk+0x54>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4413      	add	r3, r2
 80025c6:	4a0c      	ldr	r2, [pc, #48]	@ (80025f8 <GPS_OnRxChunk+0x54>)
 80025c8:	6013      	str	r3, [r2, #0]
    for (uint16_t i = 0; i < len; i++) {
 80025ca:	2300      	movs	r3, #0
 80025cc:	82fb      	strh	r3, [r7, #22]
 80025ce:	e00a      	b.n	80025e6 <GPS_OnRxChunk+0x42>
        rb_put(gps, data[i]);
 80025d0:	8afb      	ldrh	r3, [r7, #22]
 80025d2:	68ba      	ldr	r2, [r7, #8]
 80025d4:	4413      	add	r3, r2
 80025d6:	781b      	ldrb	r3, [r3, #0]
 80025d8:	4619      	mov	r1, r3
 80025da:	68f8      	ldr	r0, [r7, #12]
 80025dc:	f7ff fafb 	bl	8001bd6 <rb_put>
    for (uint16_t i = 0; i < len; i++) {
 80025e0:	8afb      	ldrh	r3, [r7, #22]
 80025e2:	3301      	adds	r3, #1
 80025e4:	82fb      	strh	r3, [r7, #22]
 80025e6:	8afa      	ldrh	r2, [r7, #22]
 80025e8:	88fb      	ldrh	r3, [r7, #6]
 80025ea:	429a      	cmp	r2, r3
 80025ec:	d3f0      	bcc.n	80025d0 <GPS_OnRxChunk+0x2c>
 80025ee:	e000      	b.n	80025f2 <GPS_OnRxChunk+0x4e>
    if (!gps || !data) return;
 80025f0:	bf00      	nop
    }
}
 80025f2:	3718      	adds	r7, #24
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	200002e8 	.word	0x200002e8

080025fc <GPS_Process>:

void GPS_Process(GPS_Handle_t *gps) {
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b088      	sub	sp, #32
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
    if (!gps) return;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2b00      	cmp	r3, #0
 8002608:	f000 80cf 	beq.w	80027aa <GPS_Process+0x1ae>

    uint8_t byte;

    // Process all available bytes
    while (rb_get(gps, &byte)) {
 800260c:	e0c2      	b.n	8002794 <GPS_Process+0x198>
        // Skip carriage returns, use only line feeds
        if (byte == '\r') continue;
 800260e:	7b7b      	ldrb	r3, [r7, #13]
 8002610:	2b0d      	cmp	r3, #13
 8002612:	f000 80bc 	beq.w	800278e <GPS_Process+0x192>

        // Guard against buffer overflow
        if (gps->line_len >= (GPS_LINE_BUFFER_SIZE - 1)) {
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8b3 338a 	ldrh.w	r3, [r3, #906]	@ 0x38a
 800261c:	2b7e      	cmp	r3, #126	@ 0x7e
 800261e:	d903      	bls.n	8002628 <GPS_Process+0x2c>
            gps->line_len = 0; // Reset on overflow
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	f8a3 238a 	strh.w	r2, [r3, #906]	@ 0x38a
        }

        if (byte != '\n') {
 8002628:	7b7b      	ldrb	r3, [r7, #13]
 800262a:	2b0a      	cmp	r3, #10
 800262c:	d00e      	beq.n	800264c <GPS_Process+0x50>
            // Accumulate line
            gps->line[gps->line_len++] = byte;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	f8b3 338a 	ldrh.w	r3, [r3, #906]	@ 0x38a
 8002634:	1c5a      	adds	r2, r3, #1
 8002636:	b291      	uxth	r1, r2
 8002638:	687a      	ldr	r2, [r7, #4]
 800263a:	f8a2 138a 	strh.w	r1, [r2, #906]	@ 0x38a
 800263e:	4619      	mov	r1, r3
 8002640:	7b7a      	ldrb	r2, [r7, #13]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	440b      	add	r3, r1
 8002646:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a
            continue;
 800264a:	e0a3      	b.n	8002794 <GPS_Process+0x198>
        }

        // End of line - process sentence
        if (gps->line_len == 0) continue; // Skip empty lines
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	f8b3 338a 	ldrh.w	r3, [r3, #906]	@ 0x38a
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 809d 	beq.w	8002792 <GPS_Process+0x196>

        gps->line[gps->line_len] = '\0'; // Null terminate
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8b3 338a 	ldrh.w	r3, [r3, #906]	@ 0x38a
 800265e:	461a      	mov	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	4413      	add	r3, r2
 8002664:	2200      	movs	r2, #0
 8002666:	f883 230a 	strb.w	r2, [r3, #778]	@ 0x30a
        char *sentence = (char*)gps->line;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f203 330a 	addw	r3, r3, #778	@ 0x30a
 8002670:	61fb      	str	r3, [r7, #28]

        // Validate sentence format
        if (sentence[0] != '$') {
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	781b      	ldrb	r3, [r3, #0]
 8002676:	2b24      	cmp	r3, #36	@ 0x24
 8002678:	d004      	beq.n	8002684 <GPS_Process+0x88>
            gps->line_len = 0;
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2200      	movs	r2, #0
 800267e:	f8a3 238a 	strh.w	r2, [r3, #906]	@ 0x38a
            continue; // Not an NMEA sentence
 8002682:	e087      	b.n	8002794 <GPS_Process+0x198>
        }

        // Find checksum
        char *asterisk = strrchr(sentence, '*');
 8002684:	212a      	movs	r1, #42	@ 0x2a
 8002686:	69f8      	ldr	r0, [r7, #28]
 8002688:	f00b ff31 	bl	800e4ee <strrchr>
 800268c:	61b8      	str	r0, [r7, #24]
        if (!asterisk || strlen(asterisk) < 3) {
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	2b00      	cmp	r3, #0
 8002692:	d005      	beq.n	80026a0 <GPS_Process+0xa4>
 8002694:	69b8      	ldr	r0, [r7, #24]
 8002696:	f7fd fdf3 	bl	8000280 <strlen>
 800269a:	4603      	mov	r3, r0
 800269c:	2b02      	cmp	r3, #2
 800269e:	d804      	bhi.n	80026aa <GPS_Process+0xae>
            gps->line_len = 0;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2200      	movs	r2, #0
 80026a4:	f8a3 238a 	strh.w	r2, [r3, #906]	@ 0x38a
            continue; // No valid checksum
 80026a8:	e074      	b.n	8002794 <GPS_Process+0x198>
        }

        // Parse checksum
        int h1 = hex_nib(asterisk[1]);
 80026aa:	69bb      	ldr	r3, [r7, #24]
 80026ac:	3301      	adds	r3, #1
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fae5 	bl	8001c80 <hex_nib>
 80026b6:	6178      	str	r0, [r7, #20]
        int h2 = hex_nib(asterisk[2]);
 80026b8:	69bb      	ldr	r3, [r7, #24]
 80026ba:	3302      	adds	r3, #2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	4618      	mov	r0, r3
 80026c0:	f7ff fade 	bl	8001c80 <hex_nib>
 80026c4:	6138      	str	r0, [r7, #16]
        if (h1 < 0 || h2 < 0) {
 80026c6:	697b      	ldr	r3, [r7, #20]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	db02      	blt.n	80026d2 <GPS_Process+0xd6>
 80026cc:	693b      	ldr	r3, [r7, #16]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	da04      	bge.n	80026dc <GPS_Process+0xe0>
            gps->line_len = 0;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f8a3 238a 	strh.w	r2, [r3, #906]	@ 0x38a
            continue; // Invalid hex digits
 80026da:	e05b      	b.n	8002794 <GPS_Process+0x198>
        }

        uint8_t expected_checksum = (uint8_t)((h1 << 4) | h2);
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	b25b      	sxtb	r3, r3
 80026e0:	011b      	lsls	r3, r3, #4
 80026e2:	b25a      	sxtb	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	b25b      	sxtb	r3, r3
 80026e8:	4313      	orrs	r3, r2
 80026ea:	b25b      	sxtb	r3, r3
 80026ec:	73fb      	strb	r3, [r7, #15]
        uint8_t actual_checksum = nmea_checksum(sentence);
 80026ee:	69f8      	ldr	r0, [r7, #28]
 80026f0:	f7ff faee 	bl	8001cd0 <nmea_checksum>
 80026f4:	4603      	mov	r3, r0
 80026f6:	73bb      	strb	r3, [r7, #14]

        if (expected_checksum != actual_checksum) {
 80026f8:	7bfa      	ldrb	r2, [r7, #15]
 80026fa:	7bbb      	ldrb	r3, [r7, #14]
 80026fc:	429a      	cmp	r2, r3
 80026fe:	d00a      	beq.n	8002716 <GPS_Process+0x11a>
            GPS_DEBUG("Checksum error: exp=0x%02X, got=0x%02X\r\n", expected_checksum, actual_checksum);
 8002700:	7bfb      	ldrb	r3, [r7, #15]
 8002702:	7bba      	ldrb	r2, [r7, #14]
 8002704:	4619      	mov	r1, r3
 8002706:	482b      	ldr	r0, [pc, #172]	@ (80027b4 <GPS_Process+0x1b8>)
 8002708:	f00b fd82 	bl	800e210 <iprintf>
            gps->line_len = 0;
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	2200      	movs	r2, #0
 8002710:	f8a3 238a 	strh.w	r2, [r3, #906]	@ 0x38a
            continue;
 8002714:	e03e      	b.n	8002794 <GPS_Process+0x198>
        }

        // Valid NMEA sentence - notify callback
        if (gps->on_sentence) {
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8d3 33c0 	ldr.w	r3, [r3, #960]	@ 0x3c0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d004      	beq.n	800272a <GPS_Process+0x12e>
            gps->on_sentence(sentence);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	f8d3 33c0 	ldr.w	r3, [r3, #960]	@ 0x3c0
 8002726:	69f8      	ldr	r0, [r7, #28]
 8002728:	4798      	blx	r3
        }

        // Parse specific sentence types
        if (strncmp(sentence + 3, "RMC", 3) == 0) { // $GPRMC or $GNRMC
 800272a:	69fb      	ldr	r3, [r7, #28]
 800272c:	3303      	adds	r3, #3
 800272e:	2203      	movs	r2, #3
 8002730:	4921      	ldr	r1, [pc, #132]	@ (80027b8 <GPS_Process+0x1bc>)
 8002732:	4618      	mov	r0, r3
 8002734:	f00b fec9 	bl	800e4ca <strncmp>
 8002738:	4603      	mov	r3, r0
 800273a:	2b00      	cmp	r3, #0
 800273c:	d114      	bne.n	8002768 <GPS_Process+0x16c>
            if (parse_gprmc(gps, sentence) && gps->on_fix) {
 800273e:	69f9      	ldr	r1, [r7, #28]
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f7ff fbbb 	bl	8001ebc <parse_gprmc>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01b      	beq.n	8002784 <GPS_Process+0x188>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8002752:	2b00      	cmp	r3, #0
 8002754:	d016      	beq.n	8002784 <GPS_Process+0x188>
                gps->on_fix(&gps->fix);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	f502 7264 	add.w	r2, r2, #912	@ 0x390
 8002762:	4610      	mov	r0, r2
 8002764:	4798      	blx	r3
 8002766:	e00d      	b.n	8002784 <GPS_Process+0x188>
            }
        } else if (strncmp(sentence + 3, "GGA", 3) == 0) { // $GPGGA or $GNGGA
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	3303      	adds	r3, #3
 800276c:	2203      	movs	r2, #3
 800276e:	4913      	ldr	r1, [pc, #76]	@ (80027bc <GPS_Process+0x1c0>)
 8002770:	4618      	mov	r0, r3
 8002772:	f00b feaa 	bl	800e4ca <strncmp>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d103      	bne.n	8002784 <GPS_Process+0x188>
            parse_gpgga(gps, sentence);
 800277c:	69f9      	ldr	r1, [r7, #28]
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f7ff fce5 	bl	800214e <parse_gpgga>
        }

        // Ready for next sentence
        gps->line_len = 0;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	f8a3 238a 	strh.w	r2, [r3, #906]	@ 0x38a
 800278c:	e002      	b.n	8002794 <GPS_Process+0x198>
        if (byte == '\r') continue;
 800278e:	bf00      	nop
 8002790:	e000      	b.n	8002794 <GPS_Process+0x198>
        if (gps->line_len == 0) continue; // Skip empty lines
 8002792:	bf00      	nop
    while (rb_get(gps, &byte)) {
 8002794:	f107 030d 	add.w	r3, r7, #13
 8002798:	4619      	mov	r1, r3
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7ff fa43 	bl	8001c26 <rb_get>
 80027a0:	4603      	mov	r3, r0
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f47f af33 	bne.w	800260e <GPS_Process+0x12>
 80027a8:	e000      	b.n	80027ac <GPS_Process+0x1b0>
    if (!gps) return;
 80027aa:	bf00      	nop
    }
}
 80027ac:	3720      	adds	r7, #32
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	0801172c 	.word	0x0801172c
 80027b8:	0801175c 	.word	0x0801175c
 80027bc:	08011760 	.word	0x08011760

080027c0 <CS_L>:
#include "ICM-42605.h"

static inline void CS_L(void){ HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); }
 80027c0:	b580      	push	{r7, lr}
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	2200      	movs	r2, #0
 80027c6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027ca:	4802      	ldr	r0, [pc, #8]	@ (80027d4 <CS_L+0x14>)
 80027cc:	f002 fb06 	bl	8004ddc <HAL_GPIO_WritePin>
 80027d0:	bf00      	nop
 80027d2:	bd80      	pop	{r7, pc}
 80027d4:	40020400 	.word	0x40020400

080027d8 <CS_H>:
static inline void CS_H(void){ HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); }
 80027d8:	b580      	push	{r7, lr}
 80027da:	af00      	add	r7, sp, #0
 80027dc:	2201      	movs	r2, #1
 80027de:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80027e2:	4802      	ldr	r0, [pc, #8]	@ (80027ec <CS_H+0x14>)
 80027e4:	f002 fafa 	bl	8004ddc <HAL_GPIO_WritePin>
 80027e8:	bf00      	nop
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40020400 	.word	0x40020400

080027f0 <be16>:
// Combines two bytes into a signed values
static inline int16_t be16(const uint8_t *p) { return (int16_t)((p[0] << 8) | p[1]); }
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	b21b      	sxth	r3, r3
 80027fe:	021b      	lsls	r3, r3, #8
 8002800:	b21a      	sxth	r2, r3
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	3301      	adds	r3, #1
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	b21b      	sxth	r3, r3
 800280a:	4313      	orrs	r3, r2
 800280c:	b21b      	sxth	r3, r3
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr
	...

0800281c <icm42605_bank_select>:

//send address first, then change value
// 1) SPI primitives
HAL_StatusTypeDef icm42605_bank_select(uint8_t bankval)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b084      	sub	sp, #16
 8002820:	af00      	add	r7, sp, #0
 8002822:	4603      	mov	r3, r0
 8002824:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef st;
	 uint8_t bank_code;
	switch (bankval) {
 8002826:	79fb      	ldrb	r3, [r7, #7]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d819      	bhi.n	8002860 <icm42605_bank_select+0x44>
 800282c:	a201      	add	r2, pc, #4	@ (adr r2, 8002834 <icm42605_bank_select+0x18>)
 800282e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002832:	bf00      	nop
 8002834:	08002849 	.word	0x08002849
 8002838:	0800284f 	.word	0x0800284f
 800283c:	08002855 	.word	0x08002855
 8002840:	08002861 	.word	0x08002861
 8002844:	0800285b 	.word	0x0800285b
	        case 0:
	            bank_code = BANK0;
 8002848:	2300      	movs	r3, #0
 800284a:	73bb      	strb	r3, [r7, #14]
	            break;
 800284c:	e00a      	b.n	8002864 <icm42605_bank_select+0x48>
	        case 1:
	            bank_code = BANK1;
 800284e:	2310      	movs	r3, #16
 8002850:	73bb      	strb	r3, [r7, #14]
	            break;
 8002852:	e007      	b.n	8002864 <icm42605_bank_select+0x48>
	        case 2:
	            bank_code = BANK2;
 8002854:	2320      	movs	r3, #32
 8002856:	73bb      	strb	r3, [r7, #14]
	            break;
 8002858:	e004      	b.n	8002864 <icm42605_bank_select+0x48>
	        case 4:
	            bank_code = BANK4;
 800285a:	2340      	movs	r3, #64	@ 0x40
 800285c:	73bb      	strb	r3, [r7, #14]
	            break;
 800285e:	e001      	b.n	8002864 <icm42605_bank_select+0x48>
	        default:
	            return HAL_ERROR; // invalid bank number
 8002860:	2301      	movs	r3, #1
 8002862:	e01b      	b.n	800289c <icm42605_bank_select+0x80>
	    }

	uint8_t addr= 0x76 & 0x7F;
 8002864:	2376      	movs	r3, #118	@ 0x76
 8002866:	737b      	strb	r3, [r7, #13]
	CS_L();
 8002868:	f7ff ffaa 	bl	80027c0 <CS_L>
	st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &addr, 1, 50);
 800286c:	f107 010d 	add.w	r1, r7, #13
 8002870:	2332      	movs	r3, #50	@ 0x32
 8002872:	2201      	movs	r2, #1
 8002874:	480b      	ldr	r0, [pc, #44]	@ (80028a4 <icm42605_bank_select+0x88>)
 8002876:	f004 fa18 	bl	8006caa <HAL_SPI_Transmit>
 800287a:	4603      	mov	r3, r0
 800287c:	73fb      	strb	r3, [r7, #15]
	if (st == HAL_OK) {
 800287e:	7bfb      	ldrb	r3, [r7, #15]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d108      	bne.n	8002896 <icm42605_bank_select+0x7a>
	st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &bank_code, 1, 50);
 8002884:	f107 010e 	add.w	r1, r7, #14
 8002888:	2332      	movs	r3, #50	@ 0x32
 800288a:	2201      	movs	r2, #1
 800288c:	4805      	ldr	r0, [pc, #20]	@ (80028a4 <icm42605_bank_select+0x88>)
 800288e:	f004 fa0c 	bl	8006caa <HAL_SPI_Transmit>
 8002892:	4603      	mov	r3, r0
 8002894:	73fb      	strb	r3, [r7, #15]
		}
	CS_H();
 8002896:	f7ff ff9f 	bl	80027d8 <CS_H>
	return st;
 800289a:	7bfb      	ldrb	r3, [r7, #15]
}
 800289c:	4618      	mov	r0, r3
 800289e:	3710      	adds	r7, #16
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	20000348 	.word	0x20000348

080028a8 <icm42605_write_reg>:

HAL_StatusTypeDef icm42605_write_reg(uint8_t bank, uint8_t reg, uint8_t val)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b084      	sub	sp, #16
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	4603      	mov	r3, r0
 80028b0:	71fb      	strb	r3, [r7, #7]
 80028b2:	460b      	mov	r3, r1
 80028b4:	71bb      	strb	r3, [r7, #6]
 80028b6:	4613      	mov	r3, r2
 80028b8:	717b      	strb	r3, [r7, #5]
	// select bank
		HAL_StatusTypeDef st;
		    // 1) select bank
		    st = icm42605_bank_select(bank);
 80028ba:	79fb      	ldrb	r3, [r7, #7]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff ffad 	bl	800281c <icm42605_bank_select>
 80028c2:	4603      	mov	r3, r0
 80028c4:	73fb      	strb	r3, [r7, #15]
		    if (st != HAL_OK) return st;
 80028c6:	7bfb      	ldrb	r3, [r7, #15]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <icm42605_write_reg+0x28>
 80028cc:	7bfb      	ldrb	r3, [r7, #15]
 80028ce:	e01d      	b.n	800290c <icm42605_write_reg+0x64>
	// selects 7 bit address from register

	uint8_t addr = reg & 0x7F; // MSB = 0 so write
 80028d0:	79bb      	ldrb	r3, [r7, #6]
 80028d2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80028d6:	b2db      	uxtb	r3, r3
 80028d8:	73bb      	strb	r3, [r7, #14]
	CS_L();
 80028da:	f7ff ff71 	bl	80027c0 <CS_L>
	// send address
	st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &addr, 1, 50);
 80028de:	f107 010e 	add.w	r1, r7, #14
 80028e2:	2332      	movs	r3, #50	@ 0x32
 80028e4:	2201      	movs	r2, #1
 80028e6:	480b      	ldr	r0, [pc, #44]	@ (8002914 <icm42605_write_reg+0x6c>)
 80028e8:	f004 f9df 	bl	8006caa <HAL_SPI_Transmit>
 80028ec:	4603      	mov	r3, r0
 80028ee:	73fb      	strb	r3, [r7, #15]
	// write new value
	if (st == HAL_OK) {
 80028f0:	7bfb      	ldrb	r3, [r7, #15]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d107      	bne.n	8002906 <icm42605_write_reg+0x5e>
		st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &val, 1, 50);
 80028f6:	1d79      	adds	r1, r7, #5
 80028f8:	2332      	movs	r3, #50	@ 0x32
 80028fa:	2201      	movs	r2, #1
 80028fc:	4805      	ldr	r0, [pc, #20]	@ (8002914 <icm42605_write_reg+0x6c>)
 80028fe:	f004 f9d4 	bl	8006caa <HAL_SPI_Transmit>
 8002902:	4603      	mov	r3, r0
 8002904:	73fb      	strb	r3, [r7, #15]
	}
	CS_H();
 8002906:	f7ff ff67 	bl	80027d8 <CS_H>
	return st;
 800290a:	7bfb      	ldrb	r3, [r7, #15]
}
 800290c:	4618      	mov	r0, r3
 800290e:	3710      	adds	r7, #16
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	20000348 	.word	0x20000348

08002918 <icm42605_read_reg>:
HAL_StatusTypeDef icm42605_read_reg (uint8_t bank, uint8_t reg, uint8_t *val)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	4603      	mov	r3, r0
 8002920:	603a      	str	r2, [r7, #0]
 8002922:	71fb      	strb	r3, [r7, #7]
 8002924:	460b      	mov	r3, r1
 8002926:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef st;
	    // 1) select bank
	    st = icm42605_bank_select(bank);
 8002928:	79fb      	ldrb	r3, [r7, #7]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff ff76 	bl	800281c <icm42605_bank_select>
 8002930:	4603      	mov	r3, r0
 8002932:	73fb      	strb	r3, [r7, #15]
	    if (st != HAL_OK) return st;
 8002934:	7bfb      	ldrb	r3, [r7, #15]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d001      	beq.n	800293e <icm42605_read_reg+0x26>
 800293a:	7bfb      	ldrb	r3, [r7, #15]
 800293c:	e01d      	b.n	800297a <icm42605_read_reg+0x62>
	uint8_t addr = reg | 0x80;
 800293e:	79bb      	ldrb	r3, [r7, #6]
 8002940:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002944:	b2db      	uxtb	r3, r3
 8002946:	73bb      	strb	r3, [r7, #14]
	CS_L();
 8002948:	f7ff ff3a 	bl	80027c0 <CS_L>
		// send address
		st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &addr, 1, 50);
 800294c:	f107 010e 	add.w	r1, r7, #14
 8002950:	2332      	movs	r3, #50	@ 0x32
 8002952:	2201      	movs	r2, #1
 8002954:	480b      	ldr	r0, [pc, #44]	@ (8002984 <icm42605_read_reg+0x6c>)
 8002956:	f004 f9a8 	bl	8006caa <HAL_SPI_Transmit>
 800295a:	4603      	mov	r3, r0
 800295c:	73fb      	strb	r3, [r7, #15]
		// read/reassign value
		if (st == (HAL_OK)) {
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b00      	cmp	r3, #0
 8002962:	d107      	bne.n	8002974 <icm42605_read_reg+0x5c>
			st = HAL_SPI_Receive(&ICM_SPI_HANDLE, val, 1, 50);
 8002964:	2332      	movs	r3, #50	@ 0x32
 8002966:	2201      	movs	r2, #1
 8002968:	6839      	ldr	r1, [r7, #0]
 800296a:	4806      	ldr	r0, [pc, #24]	@ (8002984 <icm42605_read_reg+0x6c>)
 800296c:	f004 fae1 	bl	8006f32 <HAL_SPI_Receive>
 8002970:	4603      	mov	r3, r0
 8002972:	73fb      	strb	r3, [r7, #15]
		}
	CS_H();
 8002974:	f7ff ff30 	bl	80027d8 <CS_H>
	return st;
 8002978:	7bfb      	ldrb	r3, [r7, #15]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3710      	adds	r7, #16
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000348 	.word	0x20000348

08002988 <icm42605_read_multi>:


HAL_StatusTypeDef icm42605_read_multi(uint8_t bank, uint8_t start_reg, uint8_t *buf, size_t n)
{
 8002988:	b580      	push	{r7, lr}
 800298a:	b086      	sub	sp, #24
 800298c:	af00      	add	r7, sp, #0
 800298e:	60ba      	str	r2, [r7, #8]
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	4603      	mov	r3, r0
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	460b      	mov	r3, r1
 8002998:	73bb      	strb	r3, [r7, #14]
    if (n == 0 || buf == NULL) return HAL_OK;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d002      	beq.n	80029a6 <icm42605_read_multi+0x1e>
 80029a0:	68bb      	ldr	r3, [r7, #8]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d101      	bne.n	80029aa <icm42605_read_multi+0x22>
 80029a6:	2300      	movs	r3, #0
 80029a8:	e029      	b.n	80029fe <icm42605_read_multi+0x76>

    HAL_StatusTypeDef st = icm42605_bank_select(bank);
 80029aa:	7bfb      	ldrb	r3, [r7, #15]
 80029ac:	4618      	mov	r0, r3
 80029ae:	f7ff ff35 	bl	800281c <icm42605_bank_select>
 80029b2:	4603      	mov	r3, r0
 80029b4:	75fb      	strb	r3, [r7, #23]
    if (st != HAL_OK) return st;
 80029b6:	7dfb      	ldrb	r3, [r7, #23]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d001      	beq.n	80029c0 <icm42605_read_multi+0x38>
 80029bc:	7dfb      	ldrb	r3, [r7, #23]
 80029be:	e01e      	b.n	80029fe <icm42605_read_multi+0x76>

    uint8_t cmd = (uint8_t)(start_reg | 0x80); // MSB=1 → read
 80029c0:	7bbb      	ldrb	r3, [r7, #14]
 80029c2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	75bb      	strb	r3, [r7, #22]
    CS_L();
 80029ca:	f7ff fef9 	bl	80027c0 <CS_L>
    st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &cmd, 1, 50);
 80029ce:	f107 0116 	add.w	r1, r7, #22
 80029d2:	2332      	movs	r3, #50	@ 0x32
 80029d4:	2201      	movs	r2, #1
 80029d6:	480c      	ldr	r0, [pc, #48]	@ (8002a08 <icm42605_read_multi+0x80>)
 80029d8:	f004 f967 	bl	8006caa <HAL_SPI_Transmit>
 80029dc:	4603      	mov	r3, r0
 80029de:	75fb      	strb	r3, [r7, #23]
    if (st == HAL_OK) {
 80029e0:	7dfb      	ldrb	r3, [r7, #23]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d108      	bne.n	80029f8 <icm42605_read_multi+0x70>
        st = HAL_SPI_Receive(&ICM_SPI_HANDLE, buf, (uint16_t)n, 50);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	b29a      	uxth	r2, r3
 80029ea:	2332      	movs	r3, #50	@ 0x32
 80029ec:	68b9      	ldr	r1, [r7, #8]
 80029ee:	4806      	ldr	r0, [pc, #24]	@ (8002a08 <icm42605_read_multi+0x80>)
 80029f0:	f004 fa9f 	bl	8006f32 <HAL_SPI_Receive>
 80029f4:	4603      	mov	r3, r0
 80029f6:	75fb      	strb	r3, [r7, #23]
    }
    CS_H();
 80029f8:	f7ff feee 	bl	80027d8 <CS_H>
    return st;
 80029fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	20000348 	.word	0x20000348

08002a0c <icm42605_reset>:


// 2. Core Functions
HAL_StatusTypeDef icm42605_reset(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	b082      	sub	sp, #8
 8002a10:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef st;

    // Write reset command
    CS_L();
 8002a12:	f7ff fed5 	bl	80027c0 <CS_L>
    st = icm42605_write_reg(0, REG_DEVICE_CONFIG, DEVICE_CONFIG_RESET);
 8002a16:	2201      	movs	r2, #1
 8002a18:	2111      	movs	r1, #17
 8002a1a:	2000      	movs	r0, #0
 8002a1c:	f7ff ff44 	bl	80028a8 <icm42605_write_reg>
 8002a20:	4603      	mov	r3, r0
 8002a22:	71fb      	strb	r3, [r7, #7]
    if (st != HAL_OK) return st;
 8002a24:	79fb      	ldrb	r3, [r7, #7]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d001      	beq.n	8002a2e <icm42605_reset+0x22>
 8002a2a:	79fb      	ldrb	r3, [r7, #7]
 8002a2c:	e005      	b.n	8002a3a <icm42605_reset+0x2e>

    // Wait for reset to complete (datasheet recommends ~10ms)
    HAL_Delay(10);
 8002a2e:	200a      	movs	r0, #10
 8002a30:	f001 fb18 	bl	8004064 <HAL_Delay>
    CS_H();
 8002a34:	f7ff fed0 	bl	80027d8 <CS_H>
    return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3708      	adds	r7, #8
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}

08002a42 <icm42605_config_accel>:

// 3. Sensor Config/setup
HAL_StatusTypeDef icm42605_config_accel(uint8_t fs_sel, uint8_t odr_sel)
{
 8002a42:	b580      	push	{r7, lr}
 8002a44:	b084      	sub	sp, #16
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	4603      	mov	r3, r0
 8002a4a:	460a      	mov	r2, r1
 8002a4c:	71fb      	strb	r3, [r7, #7]
 8002a4e:	4613      	mov	r3, r2
 8002a50:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef st;
    uint8_t v;

    // 1) Set FS + ODR (ACCEL_CONFIG0: FS [7:5], ODR [3:0])
    v = (uint8_t)((fs_sel << ACCEL_FS_SHIFT) | (odr_sel & ACCEL_ODR_MASK));
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	015b      	lsls	r3, r3, #5
 8002a58:	b25a      	sxtb	r2, r3
 8002a5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a5e:	f003 030f 	and.w	r3, r3, #15
 8002a62:	b25b      	sxtb	r3, r3
 8002a64:	4313      	orrs	r3, r2
 8002a66:	b25b      	sxtb	r3, r3
 8002a68:	b2db      	uxtb	r3, r3
 8002a6a:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_ACCEL_CONFIG0, v);
 8002a6c:	7bbb      	ldrb	r3, [r7, #14]
 8002a6e:	461a      	mov	r2, r3
 8002a70:	2150      	movs	r1, #80	@ 0x50
 8002a72:	2000      	movs	r0, #0
 8002a74:	f7ff ff18 	bl	80028a8 <icm42605_write_reg>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;   // ACCEL_CONFIG0 @ 0x50. :contentReference[oaicite:3]{index=3}
 8002a7c:	7bfb      	ldrb	r3, [r7, #15]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d001      	beq.n	8002a86 <icm42605_config_accel+0x44>
 8002a82:	7bfb      	ldrb	r3, [r7, #15]
 8002a84:	e070      	b.n	8002b68 <icm42605_config_accel+0x126>

    // 2) Power accel ON in PWR_MGMT0 → Low-Noise (LN)
    st = icm42605_read_reg(0, REG_PWR_MGMT0, &v); if (st != HAL_OK) return st;
 8002a86:	f107 030e 	add.w	r3, r7, #14
 8002a8a:	461a      	mov	r2, r3
 8002a8c:	214e      	movs	r1, #78	@ 0x4e
 8002a8e:	2000      	movs	r0, #0
 8002a90:	f7ff ff42 	bl	8002918 <icm42605_read_reg>
 8002a94:	4603      	mov	r3, r0
 8002a96:	73fb      	strb	r3, [r7, #15]
 8002a98:	7bfb      	ldrb	r3, [r7, #15]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d001      	beq.n	8002aa2 <icm42605_config_accel+0x60>
 8002a9e:	7bfb      	ldrb	r3, [r7, #15]
 8002aa0:	e062      	b.n	8002b68 <icm42605_config_accel+0x126>
    v = (uint8_t)((v & ~PWRM_ACCEL_MODE_MASK) | PWRM_ACCEL_MODE_LN);
 8002aa2:	7bbb      	ldrb	r3, [r7, #14]
 8002aa4:	b25b      	sxtb	r3, r3
 8002aa6:	f043 0303 	orr.w	r3, r3, #3
 8002aaa:	b25b      	sxtb	r3, r3
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_PWR_MGMT0, v); if (st != HAL_OK) return st;
 8002ab0:	7bbb      	ldrb	r3, [r7, #14]
 8002ab2:	461a      	mov	r2, r3
 8002ab4:	214e      	movs	r1, #78	@ 0x4e
 8002ab6:	2000      	movs	r0, #0
 8002ab8:	f7ff fef6 	bl	80028a8 <icm42605_write_reg>
 8002abc:	4603      	mov	r3, r0
 8002abe:	73fb      	strb	r3, [r7, #15]
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d001      	beq.n	8002aca <icm42605_config_accel+0x88>
 8002ac6:	7bfb      	ldrb	r3, [r7, #15]
 8002ac8:	e04e      	b.n	8002b68 <icm42605_config_accel+0x126>

    // Datasheet: after OFF→other modes, avoid register writes for ~200 µs.
    HAL_Delay(1);  // 1 ms > 200 µs, safe. :contentReference[oaicite:4]{index=4}
 8002aca:	2001      	movs	r0, #1
 8002acc:	f001 faca 	bl	8004064 <HAL_Delay>

    // 3) Set ACCEL UI filter ORDER = 2nd (ACCEL_CONFIG1, bits [4:3] = 01)
    st = icm42605_read_reg(0, REG_ACCEL_CONFIG1, &v); if (st != HAL_OK) return st;
 8002ad0:	f107 030e 	add.w	r3, r7, #14
 8002ad4:	461a      	mov	r2, r3
 8002ad6:	2153      	movs	r1, #83	@ 0x53
 8002ad8:	2000      	movs	r0, #0
 8002ada:	f7ff ff1d 	bl	8002918 <icm42605_read_reg>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	73fb      	strb	r3, [r7, #15]
 8002ae2:	7bfb      	ldrb	r3, [r7, #15]
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d001      	beq.n	8002aec <icm42605_config_accel+0xaa>
 8002ae8:	7bfb      	ldrb	r3, [r7, #15]
 8002aea:	e03d      	b.n	8002b68 <icm42605_config_accel+0x126>
    v = (uint8_t)((v & ~(0b11 << 3)) | (1u << 3));  // 01 = 2nd order
 8002aec:	7bbb      	ldrb	r3, [r7, #14]
 8002aee:	f023 0318 	bic.w	r3, r3, #24
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	f043 0308 	orr.w	r3, r3, #8
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_ACCEL_CONFIG1, v); if (st != HAL_OK) return st;
 8002afc:	7bbb      	ldrb	r3, [r7, #14]
 8002afe:	461a      	mov	r2, r3
 8002b00:	2153      	movs	r1, #83	@ 0x53
 8002b02:	2000      	movs	r0, #0
 8002b04:	f7ff fed0 	bl	80028a8 <icm42605_write_reg>
 8002b08:	4603      	mov	r3, r0
 8002b0a:	73fb      	strb	r3, [r7, #15]
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <icm42605_config_accel+0xd4>
 8002b12:	7bfb      	ldrb	r3, [r7, #15]
 8002b14:	e028      	b.n	8002b68 <icm42605_config_accel+0x126>
    // (ACCEL_CONFIG1 @ 0x53; “00=1st, 01=2nd, 10=3rd”). :contentReference[oaicite:5]{index=5}

    // 4) Set LPF bandwidths (GYRO_ACCEL_CONFIG0 @ 0x52)
    //    Put accel BW code in [7:4] and (optionally) leave gyro BW as-is.
    st = icm42605_read_reg(0, REG_GYRO_ACCEL_CONFIG0, &v); if (st != HAL_OK) return st;
 8002b16:	f107 030e 	add.w	r3, r7, #14
 8002b1a:	461a      	mov	r2, r3
 8002b1c:	2152      	movs	r1, #82	@ 0x52
 8002b1e:	2000      	movs	r0, #0
 8002b20:	f7ff fefa 	bl	8002918 <icm42605_read_reg>
 8002b24:	4603      	mov	r3, r0
 8002b26:	73fb      	strb	r3, [r7, #15]
 8002b28:	7bfb      	ldrb	r3, [r7, #15]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d001      	beq.n	8002b32 <icm42605_config_accel+0xf0>
 8002b2e:	7bfb      	ldrb	r3, [r7, #15]
 8002b30:	e01a      	b.n	8002b68 <icm42605_config_accel+0x126>
    v = (uint8_t)((v & 0x0F) | (uint8_t)(6u << 4));    // accel BW code = 6 → ODR/20
 8002b32:	7bbb      	ldrb	r3, [r7, #14]
 8002b34:	b25b      	sxtb	r3, r3
 8002b36:	f003 030f 	and.w	r3, r3, #15
 8002b3a:	b25b      	sxtb	r3, r3
 8002b3c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002b40:	b25b      	sxtb	r3, r3
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_GYRO_ACCEL_CONFIG0, v); if (st != HAL_OK) return st;
 8002b46:	7bbb      	ldrb	r3, [r7, #14]
 8002b48:	461a      	mov	r2, r3
 8002b4a:	2152      	movs	r1, #82	@ 0x52
 8002b4c:	2000      	movs	r0, #0
 8002b4e:	f7ff feab 	bl	80028a8 <icm42605_write_reg>
 8002b52:	4603      	mov	r3, r0
 8002b54:	73fb      	strb	r3, [r7, #15]
 8002b56:	7bfb      	ldrb	r3, [r7, #15]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d001      	beq.n	8002b60 <icm42605_config_accel+0x11e>
 8002b5c:	7bfb      	ldrb	r3, [r7, #15]
 8002b5e:	e003      	b.n	8002b68 <icm42605_config_accel+0x126>
    // (BW code 6 gives ≈ ODR/20 in LN mode; at 1 kHz → ~50 Hz cutoff). :contentReference[oaicite:6]{index=6}

    // small settle (optional)
    HAL_Delay(5);
 8002b60:	2005      	movs	r0, #5
 8002b62:	f001 fa7f 	bl	8004064 <HAL_Delay>

    return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3710      	adds	r7, #16
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bd80      	pop	{r7, pc}

08002b70 <icm42605_config_gyro>:

HAL_StatusTypeDef icm42605_config_gyro(uint8_t fs_sel, uint8_t odr_sel)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	4603      	mov	r3, r0
 8002b78:	460a      	mov	r2, r1
 8002b7a:	71fb      	strb	r3, [r7, #7]
 8002b7c:	4613      	mov	r3, r2
 8002b7e:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef st;
    uint8_t v;

    // 1) Set FS + ODR (GYRO_CONFIG0: FS[7:5], ODR[3:0])
    v = (uint8_t)((fs_sel << GYRO_FS_SHIFT) | (odr_sel & GYRO_ODR_MASK));
 8002b80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b84:	015b      	lsls	r3, r3, #5
 8002b86:	b25a      	sxtb	r2, r3
 8002b88:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	b25b      	sxtb	r3, r3
 8002b92:	4313      	orrs	r3, r2
 8002b94:	b25b      	sxtb	r3, r3
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_GYRO_CONFIG0, v);
 8002b9a:	7bbb      	ldrb	r3, [r7, #14]
 8002b9c:	461a      	mov	r2, r3
 8002b9e:	214f      	movs	r1, #79	@ 0x4f
 8002ba0:	2000      	movs	r0, #0
 8002ba2:	f7ff fe81 	bl	80028a8 <icm42605_write_reg>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002baa:	7bfb      	ldrb	r3, [r7, #15]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d001      	beq.n	8002bb4 <icm42605_config_gyro+0x44>
 8002bb0:	7bfb      	ldrb	r3, [r7, #15]
 8002bb2:	e06e      	b.n	8002c92 <icm42605_config_gyro+0x122>

    // 2) Power gyro ON in PWR_MGMT0 → Low-Noise (LN)
    st = icm42605_read_reg(0, REG_PWR_MGMT0, &v);
 8002bb4:	f107 030e 	add.w	r3, r7, #14
 8002bb8:	461a      	mov	r2, r3
 8002bba:	214e      	movs	r1, #78	@ 0x4e
 8002bbc:	2000      	movs	r0, #0
 8002bbe:	f7ff feab 	bl	8002918 <icm42605_read_reg>
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002bc6:	7bfb      	ldrb	r3, [r7, #15]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d001      	beq.n	8002bd0 <icm42605_config_gyro+0x60>
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	e060      	b.n	8002c92 <icm42605_config_gyro+0x122>
    v = (uint8_t)((v & ~PWRM_GYRO_MODE_MASK) | PWRM_GYRO_MODE_LN);
 8002bd0:	7bbb      	ldrb	r3, [r7, #14]
 8002bd2:	b25b      	sxtb	r3, r3
 8002bd4:	f043 030c 	orr.w	r3, r3, #12
 8002bd8:	b25b      	sxtb	r3, r3
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_PWR_MGMT0, v);
 8002bde:	7bbb      	ldrb	r3, [r7, #14]
 8002be0:	461a      	mov	r2, r3
 8002be2:	214e      	movs	r1, #78	@ 0x4e
 8002be4:	2000      	movs	r0, #0
 8002be6:	f7ff fe5f 	bl	80028a8 <icm42605_write_reg>
 8002bea:	4603      	mov	r3, r0
 8002bec:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002bee:	7bfb      	ldrb	r3, [r7, #15]
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d001      	beq.n	8002bf8 <icm42605_config_gyro+0x88>
 8002bf4:	7bfb      	ldrb	r3, [r7, #15]
 8002bf6:	e04c      	b.n	8002c92 <icm42605_config_gyro+0x122>

    // datasheet: wait at least 200 µs after mode change before writes
    HAL_Delay(1);
 8002bf8:	2001      	movs	r0, #1
 8002bfa:	f001 fa33 	bl	8004064 <HAL_Delay>

    // 3) Set GYRO filter order = 2nd (GYRO_CONFIG1, bits [3:2] = 01)
    st = icm42605_read_reg(0, REG_GYRO_CONFIG1, &v);
 8002bfe:	f107 030e 	add.w	r3, r7, #14
 8002c02:	461a      	mov	r2, r3
 8002c04:	2151      	movs	r1, #81	@ 0x51
 8002c06:	2000      	movs	r0, #0
 8002c08:	f7ff fe86 	bl	8002918 <icm42605_read_reg>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002c10:	7bfb      	ldrb	r3, [r7, #15]
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d001      	beq.n	8002c1a <icm42605_config_gyro+0xaa>
 8002c16:	7bfb      	ldrb	r3, [r7, #15]
 8002c18:	e03b      	b.n	8002c92 <icm42605_config_gyro+0x122>
    v = (uint8_t)((v & ~(0b11 << 2)) | (1u << 2));
 8002c1a:	7bbb      	ldrb	r3, [r7, #14]
 8002c1c:	f023 030c 	bic.w	r3, r3, #12
 8002c20:	b2db      	uxtb	r3, r3
 8002c22:	f043 0304 	orr.w	r3, r3, #4
 8002c26:	b2db      	uxtb	r3, r3
 8002c28:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_GYRO_CONFIG1, v);
 8002c2a:	7bbb      	ldrb	r3, [r7, #14]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	2151      	movs	r1, #81	@ 0x51
 8002c30:	2000      	movs	r0, #0
 8002c32:	f7ff fe39 	bl	80028a8 <icm42605_write_reg>
 8002c36:	4603      	mov	r3, r0
 8002c38:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002c3a:	7bfb      	ldrb	r3, [r7, #15]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d001      	beq.n	8002c44 <icm42605_config_gyro+0xd4>
 8002c40:	7bfb      	ldrb	r3, [r7, #15]
 8002c42:	e026      	b.n	8002c92 <icm42605_config_gyro+0x122>

    // 4) Set GYRO LPF bandwidth = BW code 6 (~ODR/20)
    st = icm42605_read_reg(0, REG_GYRO_ACCEL_CONFIG0, &v);
 8002c44:	f107 030e 	add.w	r3, r7, #14
 8002c48:	461a      	mov	r2, r3
 8002c4a:	2152      	movs	r1, #82	@ 0x52
 8002c4c:	2000      	movs	r0, #0
 8002c4e:	f7ff fe63 	bl	8002918 <icm42605_read_reg>
 8002c52:	4603      	mov	r3, r0
 8002c54:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002c56:	7bfb      	ldrb	r3, [r7, #15]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d001      	beq.n	8002c60 <icm42605_config_gyro+0xf0>
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
 8002c5e:	e018      	b.n	8002c92 <icm42605_config_gyro+0x122>
    v = (uint8_t)((v & 0xF0) | (6u & 0x0F));   // lower nibble = gyro BW
 8002c60:	7bbb      	ldrb	r3, [r7, #14]
 8002c62:	f023 030f 	bic.w	r3, r3, #15
 8002c66:	b2db      	uxtb	r3, r3
 8002c68:	f043 0306 	orr.w	r3, r3, #6
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_GYRO_ACCEL_CONFIG0, v);
 8002c70:	7bbb      	ldrb	r3, [r7, #14]
 8002c72:	461a      	mov	r2, r3
 8002c74:	2152      	movs	r1, #82	@ 0x52
 8002c76:	2000      	movs	r0, #0
 8002c78:	f7ff fe16 	bl	80028a8 <icm42605_write_reg>
 8002c7c:	4603      	mov	r3, r0
 8002c7e:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002c80:	7bfb      	ldrb	r3, [r7, #15]
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <icm42605_config_gyro+0x11a>
 8002c86:	7bfb      	ldrb	r3, [r7, #15]
 8002c88:	e003      	b.n	8002c92 <icm42605_config_gyro+0x122>

    HAL_Delay(5);
 8002c8a:	2005      	movs	r0, #5
 8002c8c:	f001 f9ea 	bl	8004064 <HAL_Delay>

    return HAL_OK;
 8002c90:	2300      	movs	r3, #0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3710      	adds	r7, #16
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <icm42605_read_accel>:

// 3) Data

HAL_StatusTypeDef icm42605_read_accel(int16_t xyz[3])
{
 8002c9a:	b590      	push	{r4, r7, lr}
 8002c9c:	b085      	sub	sp, #20
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	6078      	str	r0, [r7, #4]

    uint8_t raw[6];
    HAL_StatusTypeDef st = icm42605_read_multi(0, REG_ACCEL_DATA_X_H, raw, 6);
 8002ca2:	f107 0208 	add.w	r2, r7, #8
 8002ca6:	2306      	movs	r3, #6
 8002ca8:	211f      	movs	r1, #31
 8002caa:	2000      	movs	r0, #0
 8002cac:	f7ff fe6c 	bl	8002988 <icm42605_read_multi>
 8002cb0:	4603      	mov	r3, r0
 8002cb2:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002cb4:	7bfb      	ldrb	r3, [r7, #15]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d001      	beq.n	8002cbe <icm42605_read_accel+0x24>
 8002cba:	7bfb      	ldrb	r3, [r7, #15]
 8002cbc:	e01d      	b.n	8002cfa <icm42605_read_accel+0x60>
    // casts two bytes into one
    xyz[0] = be16(&raw[0]);
 8002cbe:	f107 0308 	add.w	r3, r7, #8
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7ff fd94 	bl	80027f0 <be16>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	461a      	mov	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	801a      	strh	r2, [r3, #0]
    xyz[1] = be16(&raw[2]);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	1c9c      	adds	r4, r3, #2
 8002cd4:	f107 0308 	add.w	r3, r7, #8
 8002cd8:	3302      	adds	r3, #2
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7ff fd88 	bl	80027f0 <be16>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	8023      	strh	r3, [r4, #0]
    xyz[2] = be16(&raw[4]);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	1d1c      	adds	r4, r3, #4
 8002ce8:	f107 0308 	add.w	r3, r7, #8
 8002cec:	3304      	adds	r3, #4
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fd7e 	bl	80027f0 <be16>
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	8023      	strh	r3, [r4, #0]
    return HAL_OK;
 8002cf8:	2300      	movs	r3, #0

}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3714      	adds	r7, #20
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd90      	pop	{r4, r7, pc}

08002d02 <icm42605_read_gyro>:

HAL_StatusTypeDef icm42605_read_gyro (int16_t xyz[3])
{
 8002d02:	b590      	push	{r4, r7, lr}
 8002d04:	b085      	sub	sp, #20
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]

uint8_t raw[6];
    HAL_StatusTypeDef st = icm42605_read_multi(0, REG_GYRO_DATA_X_H, raw, 6);
 8002d0a:	f107 0208 	add.w	r2, r7, #8
 8002d0e:	2306      	movs	r3, #6
 8002d10:	2125      	movs	r1, #37	@ 0x25
 8002d12:	2000      	movs	r0, #0
 8002d14:	f7ff fe38 	bl	8002988 <icm42605_read_multi>
 8002d18:	4603      	mov	r3, r0
 8002d1a:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002d1c:	7bfb      	ldrb	r3, [r7, #15]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d001      	beq.n	8002d26 <icm42605_read_gyro+0x24>
 8002d22:	7bfb      	ldrb	r3, [r7, #15]
 8002d24:	e01d      	b.n	8002d62 <icm42605_read_gyro+0x60>
    xyz[0] = be16(&raw[0]);
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff fd60 	bl	80027f0 <be16>
 8002d30:	4603      	mov	r3, r0
 8002d32:	461a      	mov	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	801a      	strh	r2, [r3, #0]
    xyz[1] = be16(&raw[2]);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	1c9c      	adds	r4, r3, #2
 8002d3c:	f107 0308 	add.w	r3, r7, #8
 8002d40:	3302      	adds	r3, #2
 8002d42:	4618      	mov	r0, r3
 8002d44:	f7ff fd54 	bl	80027f0 <be16>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	8023      	strh	r3, [r4, #0]
    xyz[2] = be16(&raw[4]);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	1d1c      	adds	r4, r3, #4
 8002d50:	f107 0308 	add.w	r3, r7, #8
 8002d54:	3304      	adds	r3, #4
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff fd4a 	bl	80027f0 <be16>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	8023      	strh	r3, [r4, #0]
    return HAL_OK;
 8002d60:	2300      	movs	r3, #0

}
 8002d62:	4618      	mov	r0, r3
 8002d64:	3714      	adds	r7, #20
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd90      	pop	{r4, r7, pc}
	...

08002d6c <CS_L>:
#include "w25q16v.h"

static inline void CS_L(void){ HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); }
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	2200      	movs	r2, #0
 8002d72:	2110      	movs	r1, #16
 8002d74:	4802      	ldr	r0, [pc, #8]	@ (8002d80 <CS_L+0x14>)
 8002d76:	f002 f831 	bl	8004ddc <HAL_GPIO_WritePin>
 8002d7a:	bf00      	nop
 8002d7c:	bd80      	pop	{r7, pc}
 8002d7e:	bf00      	nop
 8002d80:	40020000 	.word	0x40020000

08002d84 <CS_H>:
static inline void CS_H(void){ HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); }
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
 8002d88:	2201      	movs	r2, #1
 8002d8a:	2110      	movs	r1, #16
 8002d8c:	4802      	ldr	r0, [pc, #8]	@ (8002d98 <CS_H+0x14>)
 8002d8e:	f002 f825 	bl	8004ddc <HAL_GPIO_WritePin>
 8002d92:	bf00      	nop
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40020000 	.word	0x40020000

08002d9c <W25_ReadJEDEC>:

HAL_StatusTypeDef W25_ReadJEDEC(uint8_t id[3]){
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b088      	sub	sp, #32
 8002da0:	af02      	add	r7, sp, #8
 8002da2:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = { 0x9F, 0,0,0 };  // 0x9F = JEDEC ID
 8002da4:	239f      	movs	r3, #159	@ 0x9f
 8002da6:	613b      	str	r3, [r7, #16]
  uint8_t rx[4] = { 0 };
 8002da8:	2300      	movs	r3, #0
 8002daa:	60fb      	str	r3, [r7, #12]

  CS_L();
 8002dac:	f7ff ffde 	bl	8002d6c <CS_L>
  HAL_StatusTypeDef s = HAL_SPI_TransmitReceive(&W25_SPI_HANDLE, tx, rx, sizeof tx, 100);
 8002db0:	f107 020c 	add.w	r2, r7, #12
 8002db4:	f107 0110 	add.w	r1, r7, #16
 8002db8:	2364      	movs	r3, #100	@ 0x64
 8002dba:	9300      	str	r3, [sp, #0]
 8002dbc:	2304      	movs	r3, #4
 8002dbe:	480e      	ldr	r0, [pc, #56]	@ (8002df8 <W25_ReadJEDEC+0x5c>)
 8002dc0:	f004 f9d0 	bl	8007164 <HAL_SPI_TransmitReceive>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	75fb      	strb	r3, [r7, #23]
  CS_H();
 8002dc8:	f7ff ffdc 	bl	8002d84 <CS_H>

  if (s != HAL_OK) return s;
 8002dcc:	7dfb      	ldrb	r3, [r7, #23]
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d001      	beq.n	8002dd6 <W25_ReadJEDEC+0x3a>
 8002dd2:	7dfb      	ldrb	r3, [r7, #23]
 8002dd4:	e00b      	b.n	8002dee <W25_ReadJEDEC+0x52>
  id[0] = rx[1];   // manufacturer (Winbond = 0xEF)
 8002dd6:	7b7a      	ldrb	r2, [r7, #13]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	701a      	strb	r2, [r3, #0]
  id[1] = rx[2];   // memory type
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	3301      	adds	r3, #1
 8002de0:	7bba      	ldrb	r2, [r7, #14]
 8002de2:	701a      	strb	r2, [r3, #0]
  id[2] = rx[3];   // capacity code (e.g., 0x15 for 16 Mbit)
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	3302      	adds	r3, #2
 8002de8:	7bfa      	ldrb	r2, [r7, #15]
 8002dea:	701a      	strb	r2, [r3, #0]
  return HAL_OK;
 8002dec:	2300      	movs	r3, #0
}
 8002dee:	4618      	mov	r0, r3
 8002df0:	3718      	adds	r7, #24
 8002df2:	46bd      	mov	sp, r7
 8002df4:	bd80      	pop	{r7, pc}
 8002df6:	bf00      	nop
 8002df8:	200002f0 	.word	0x200002f0

08002dfc <bmp280_altitude_m_from_pa>:
HAL_StatusTypeDef bmp280_read_temperature_c(BMP280_HandleTypeDef *dev, float *temp_c);
HAL_StatusTypeDef bmp280_read_pressure_pa(BMP280_HandleTypeDef *dev, float *press_pa);
HAL_StatusTypeDef bmp280_read_temp_press(BMP280_HandleTypeDef *dev, float *temp_c, float *press_pa);

/* Altitude helper (simple barometric formula) */
static inline float bmp280_altitude_m_from_pa(float pressure_pa, float sea_level_pa) {
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b084      	sub	sp, #16
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	ed87 0a01 	vstr	s0, [r7, #4]
 8002e06:	edc7 0a00 	vstr	s1, [r7]
  /*  standard atmosphere: h = 44330*(1 - (P/P0)^(1/5.255))  */
  float ratio = pressure_pa / sea_level_pa;
 8002e0a:	edd7 6a01 	vldr	s13, [r7, #4]
 8002e0e:	ed97 7a00 	vldr	s14, [r7]
 8002e12:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002e16:	edc7 7a03 	vstr	s15, [r7, #12]
  /* powf needs <math.h> in your C file */
  extern float powf(float, float);
  return 44330.0f * (1.0f - powf(ratio, 0.1903f));
 8002e1a:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 8002e44 <bmp280_altitude_m_from_pa+0x48>
 8002e1e:	ed97 0a03 	vldr	s0, [r7, #12]
 8002e22:	f00d fe77 	bl	8010b14 <powf>
 8002e26:	eef0 7a40 	vmov.f32	s15, s0
 8002e2a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e32:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002e48 <bmp280_altitude_m_from_pa+0x4c>
 8002e36:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8002e3a:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3e:	3710      	adds	r7, #16
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	3e42de01 	.word	0x3e42de01
 8002e48:	472d2a00 	.word	0x472d2a00

08002e4c <gps_print_sentence>:
#define SEA_LEVEL_PA     101325.0f

extern volatile uint32_t gps_irq_events;
extern volatile uint32_t gps_rx_total;

static void gps_print_sentence(const char *nmea) {
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
    printf("%s\r\n", nmea);   // prints full, checksum-valid NMEA lines
 8002e54:	6879      	ldr	r1, [r7, #4]
 8002e56:	4803      	ldr	r0, [pc, #12]	@ (8002e64 <gps_print_sentence+0x18>)
 8002e58:	f00b f9da 	bl	800e210 <iprintf>
}
 8002e5c:	bf00      	nop
 8002e5e:	3708      	adds	r7, #8
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bd80      	pop	{r7, pc}
 8002e64:	08011770 	.word	0x08011770

08002e68 <gps_print_fix>:

static void gps_print_fix(const GPS_Fix_t *fix) {
 8002e68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e6c:	b088      	sub	sp, #32
 8002e6e:	af06      	add	r7, sp, #24
 8002e70:	6078      	str	r0, [r7, #4]
    if (fix->valid) {
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	781b      	ldrb	r3, [r3, #0]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d057      	beq.n	8002f2a <gps_print_fix+0xc2>
        printf("[GPS FIX] %02d:%02d:%02d %02d/%02d/%02d\r\n",
               fix->hour, fix->minute, fix->second,
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
        printf("[GPS FIX] %02d:%02d:%02d %02d/%02d/%02d\r\n",
 8002e80:	4618      	mov	r0, r3
               fix->hour, fix->minute, fix->second,
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
        printf("[GPS FIX] %02d:%02d:%02d %02d/%02d/%02d\r\n",
 8002e88:	461c      	mov	r4, r3
               fix->hour, fix->minute, fix->second,
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	f893 3026 	ldrb.w	r3, [r3, #38]	@ 0x26
        printf("[GPS FIX] %02d:%02d:%02d %02d/%02d/%02d\r\n",
 8002e90:	461d      	mov	r5, r3
               fix->day, fix->month, fix->year);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
        printf("[GPS FIX] %02d:%02d:%02d %02d/%02d/%02d\r\n",
 8002e98:	461a      	mov	r2, r3
               fix->day, fix->month, fix->year);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
        printf("[GPS FIX] %02d:%02d:%02d %02d/%02d/%02d\r\n",
 8002ea0:	4619      	mov	r1, r3
               fix->day, fix->month, fix->year);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
        printf("[GPS FIX] %02d:%02d:%02d %02d/%02d/%02d\r\n",
 8002ea8:	9302      	str	r3, [sp, #8]
 8002eaa:	9101      	str	r1, [sp, #4]
 8002eac:	9200      	str	r2, [sp, #0]
 8002eae:	462b      	mov	r3, r5
 8002eb0:	4622      	mov	r2, r4
 8002eb2:	4601      	mov	r1, r0
 8002eb4:	4821      	ldr	r0, [pc, #132]	@ (8002f3c <gps_print_fix+0xd4>)
 8002eb6:	f00b f9ab 	bl	800e210 <iprintf>
        printf("          Lat=%.6f Lon=%.6f Alt=%.1fm\r\n",
               fix->latitude_deg, fix->longitude_deg, fix->altitude_m);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	e9d3 8902 	ldrd	r8, r9, [r3, #8]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	e9d3 4504 	ldrd	r4, r5, [r3, #16]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	699b      	ldr	r3, [r3, #24]
        printf("          Lat=%.6f Lon=%.6f Alt=%.1fm\r\n",
 8002eca:	4618      	mov	r0, r3
 8002ecc:	f7fd fb44 	bl	8000558 <__aeabi_f2d>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002ed8:	e9cd 4500 	strd	r4, r5, [sp]
 8002edc:	4642      	mov	r2, r8
 8002ede:	464b      	mov	r3, r9
 8002ee0:	4817      	ldr	r0, [pc, #92]	@ (8002f40 <gps_print_fix+0xd8>)
 8002ee2:	f00b f995 	bl	800e210 <iprintf>
        printf("          Speed=%.1fkn Course=%.1f° HDOP=%.1f Sats=%d\r\n",
               fix->speed_knots, fix->course_deg, fix->hdop, fix->sats_in_use);
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	69db      	ldr	r3, [r3, #28]
        printf("          Speed=%.1fkn Course=%.1f° HDOP=%.1f Sats=%d\r\n",
 8002eea:	4618      	mov	r0, r3
 8002eec:	f7fd fb34 	bl	8000558 <__aeabi_f2d>
 8002ef0:	4680      	mov	r8, r0
 8002ef2:	4689      	mov	r9, r1
               fix->speed_knots, fix->course_deg, fix->hdop, fix->sats_in_use);
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6a1b      	ldr	r3, [r3, #32]
        printf("          Speed=%.1fkn Course=%.1f° HDOP=%.1f Sats=%d\r\n",
 8002ef8:	4618      	mov	r0, r3
 8002efa:	f7fd fb2d 	bl	8000558 <__aeabi_f2d>
 8002efe:	4604      	mov	r4, r0
 8002f00:	460d      	mov	r5, r1
               fix->speed_knots, fix->course_deg, fix->hdop, fix->sats_in_use);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
        printf("          Speed=%.1fkn Course=%.1f° HDOP=%.1f Sats=%d\r\n",
 8002f06:	4618      	mov	r0, r3
 8002f08:	f7fd fb26 	bl	8000558 <__aeabi_f2d>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	460b      	mov	r3, r1
               fix->speed_knots, fix->course_deg, fix->hdop, fix->sats_in_use);
 8002f10:	6879      	ldr	r1, [r7, #4]
 8002f12:	7889      	ldrb	r1, [r1, #2]
        printf("          Speed=%.1fkn Course=%.1f° HDOP=%.1f Sats=%d\r\n",
 8002f14:	9104      	str	r1, [sp, #16]
 8002f16:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002f1a:	e9cd 4500 	strd	r4, r5, [sp]
 8002f1e:	4642      	mov	r2, r8
 8002f20:	464b      	mov	r3, r9
 8002f22:	4808      	ldr	r0, [pc, #32]	@ (8002f44 <gps_print_fix+0xdc>)
 8002f24:	f00b f974 	bl	800e210 <iprintf>
    } else {
        printf("[GPS] No valid fix\r\n");
    }
}
 8002f28:	e002      	b.n	8002f30 <gps_print_fix+0xc8>
        printf("[GPS] No valid fix\r\n");
 8002f2a:	4807      	ldr	r0, [pc, #28]	@ (8002f48 <gps_print_fix+0xe0>)
 8002f2c:	f00b f9d8 	bl	800e2e0 <puts>
}
 8002f30:	bf00      	nop
 8002f32:	3708      	adds	r7, #8
 8002f34:	46bd      	mov	sp, r7
 8002f36:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002f3a:	bf00      	nop
 8002f3c:	08011778 	.word	0x08011778
 8002f40:	080117a4 	.word	0x080117a4
 8002f44:	080117cc 	.word	0x080117cc
 8002f48:	08011808 	.word	0x08011808
 8002f4c:	00000000 	.word	0x00000000

08002f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f50:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002f54:	ed2d 8b02 	vpush	{d8}
 8002f58:	b0a0      	sub	sp, #128	@ 0x80
 8002f5a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f5c:	f001 f810 	bl	8003f80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f60:	f000 fa9e 	bl	80034a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f64:	f000 fc1a 	bl	800379c <MX_GPIO_Init>
  MX_DMA_Init();
 8002f68:	f000 fbf8 	bl	800375c <MX_DMA_Init>
  MX_SPI1_Init();
 8002f6c:	f000 fb00 	bl	8003570 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002f70:	f000 fb34 	bl	80035dc <MX_SPI2_Init>
  MX_SPI3_Init();
 8002f74:	f000 fb68 	bl	8003648 <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8002f78:	f000 fbc6 	bl	8003708 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8002f7c:	f009 f886 	bl	800c08c <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8002f80:	f000 fb98 	bl	80036b4 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  // Make sure BMP280 CS idles HIGH before first SPI transaction
  HAL_GPIO_WritePin(BMP280_CS_GPIO, BMP280_CS_PIN, GPIO_PIN_SET);
 8002f84:	2201      	movs	r2, #1
 8002f86:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002f8a:	4878      	ldr	r0, [pc, #480]	@ (800316c <main+0x21c>)
 8002f8c:	f001 ff26 	bl	8004ddc <HAL_GPIO_WritePin>

  // Initialize/configure BMP280
  BMP280_AppInit();
 8002f90:	f000 fc7a 	bl	8003888 <BMP280_AppInit>

#define BMP280_CS_GPIO   GPIOA      // I’m assuming your BMP280 CS is on GPIOA
#define BMP280_CS_PIN    NSS3_Pin   // and uses your NSS3 pin
  __HAL_LINKDMA(&huart1, hdmarx, hdma_usart1_rx);  // <-- MUST exist
 8002f94:	4b76      	ldr	r3, [pc, #472]	@ (8003170 <main+0x220>)
 8002f96:	4a77      	ldr	r2, [pc, #476]	@ (8003174 <main+0x224>)
 8002f98:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002f9a:	4b76      	ldr	r3, [pc, #472]	@ (8003174 <main+0x224>)
 8002f9c:	4a74      	ldr	r2, [pc, #464]	@ (8003170 <main+0x220>)
 8002f9e:	639a      	str	r2, [r3, #56]	@ 0x38
  // after MX_DMA_Init() and MX_USART1_UART_Init()
  HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	2105      	movs	r1, #5
 8002fa4:	2025      	movs	r0, #37	@ 0x25
 8002fa6:	f001 f95c 	bl	8004262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002faa:	2025      	movs	r0, #37	@ 0x25
 8002fac:	f001 f975 	bl	800429a <HAL_NVIC_EnableIRQ>

  printf("USB CDC up!\n");
 8002fb0:	4871      	ldr	r0, [pc, #452]	@ (8003178 <main+0x228>)
 8002fb2:	f00b f995 	bl	800e2e0 <puts>

  uint8_t id[3];
 	  if (W25_ReadJEDEC(id) == HAL_OK){
 8002fb6:	f107 031c 	add.w	r3, r7, #28
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff feee 	bl	8002d9c <W25_ReadJEDEC>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d114      	bne.n	8002ff0 <main+0xa0>
 	     printf("JEDEC: %02X %02X %02X\r\n", id[0], id[1], id[2]);
 8002fc6:	7f3b      	ldrb	r3, [r7, #28]
 8002fc8:	4619      	mov	r1, r3
 8002fca:	7f7b      	ldrb	r3, [r7, #29]
 8002fcc:	461a      	mov	r2, r3
 8002fce:	7fbb      	ldrb	r3, [r7, #30]
 8002fd0:	486a      	ldr	r0, [pc, #424]	@ (800317c <main+0x22c>)
 8002fd2:	f00b f91d 	bl	800e210 <iprintf>
 	     HAL_GPIO_TogglePin (GPIOA, LED_Pin);
 8002fd6:	2102      	movs	r1, #2
 8002fd8:	4864      	ldr	r0, [pc, #400]	@ (800316c <main+0x21c>)
 8002fda:	f001 ff18 	bl	8004e0e <HAL_GPIO_TogglePin>
 	     HAL_Delay(1000);
 8002fde:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002fe2:	f001 f83f 	bl	8004064 <HAL_Delay>
 	     HAL_GPIO_TogglePin (GPIOA, LED_Pin);
 8002fe6:	2102      	movs	r1, #2
 8002fe8:	4860      	ldr	r0, [pc, #384]	@ (800316c <main+0x21c>)
 8002fea:	f001 ff10 	bl	8004e0e <HAL_GPIO_TogglePin>
 8002fee:	e002      	b.n	8002ff6 <main+0xa6>
 	    } else {
 	     printf("JEDEC read failed\r\n");
 8002ff0:	4863      	ldr	r0, [pc, #396]	@ (8003180 <main+0x230>)
 8002ff2:	f00b f975 	bl	800e2e0 <puts>


 	uint8_t whoami;
 	HAL_StatusTypeDef whoami_test;

 	whoami_test = icm42605_read_reg(0,0x75, &whoami);
 8002ff6:	f107 031b 	add.w	r3, r7, #27
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	2175      	movs	r1, #117	@ 0x75
 8002ffe:	2000      	movs	r0, #0
 8003000:	f7ff fc8a 	bl	8002918 <icm42605_read_reg>
 8003004:	4603      	mov	r3, r0
 8003006:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 	if (whoami_test == HAL_OK) {
 800300a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800300e:	2b00      	cmp	r3, #0
 8003010:	d11a      	bne.n	8003048 <main+0xf8>
 	    if (whoami == 0x42) {
 8003012:	7efb      	ldrb	r3, [r7, #27]
 8003014:	2b42      	cmp	r3, #66	@ 0x42
 8003016:	d111      	bne.n	800303c <main+0xec>
 	        printf("Confirmed ICM WHOAMI: 0x%02X\r\n", whoami);
 8003018:	7efb      	ldrb	r3, [r7, #27]
 800301a:	4619      	mov	r1, r3
 800301c:	4859      	ldr	r0, [pc, #356]	@ (8003184 <main+0x234>)
 800301e:	f00b f8f7 	bl	800e210 <iprintf>
 	        HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 8003022:	2102      	movs	r1, #2
 8003024:	4851      	ldr	r0, [pc, #324]	@ (800316c <main+0x21c>)
 8003026:	f001 fef2 	bl	8004e0e <HAL_GPIO_TogglePin>
 	        HAL_Delay(500);
 800302a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800302e:	f001 f819 	bl	8004064 <HAL_Delay>
 	        HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 8003032:	2102      	movs	r1, #2
 8003034:	484d      	ldr	r0, [pc, #308]	@ (800316c <main+0x21c>)
 8003036:	f001 feea 	bl	8004e0e <HAL_GPIO_TogglePin>
 800303a:	e00b      	b.n	8003054 <main+0x104>
 	    } else {
 	        printf("ICM WHOAMI mismatch: got 0x%02X (expected 0x42)\r\n", whoami);
 800303c:	7efb      	ldrb	r3, [r7, #27]
 800303e:	4619      	mov	r1, r3
 8003040:	4851      	ldr	r0, [pc, #324]	@ (8003188 <main+0x238>)
 8003042:	f00b f8e5 	bl	800e210 <iprintf>
 8003046:	e005      	b.n	8003054 <main+0x104>
 	    }
 	} else {
 	    printf("Failed to read WHOAMI register (status: %d)\r\n", whoami_test);
 8003048:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800304c:	4619      	mov	r1, r3
 800304e:	484f      	ldr	r0, [pc, #316]	@ (800318c <main+0x23c>)
 8003050:	f00b f8de 	bl	800e210 <iprintf>
 	}
 	// Reset chip
 	icm42605_reset();
 8003054:	f7ff fcda 	bl	8002a0c <icm42605_reset>

 	// Configure accelerometer and gyro
 	icm42605_config_accel(ACCEL_FS_2G, ACCEL_ODR_1KHZ);
 8003058:	2106      	movs	r1, #6
 800305a:	2003      	movs	r0, #3
 800305c:	f7ff fcf1 	bl	8002a42 <icm42605_config_accel>
 	icm42605_config_gyro(GYRO_FS_2000DPS, GYRO_ODR_1KHZ);
 8003060:	2106      	movs	r1, #6
 8003062:	2000      	movs	r0, #0
 8003064:	f7ff fd84 	bl	8002b70 <icm42605_config_gyro>


 	//gps init
 	static GPS_Handle_t gps;
 	  GPS_Init(&gps, &huart1, GPS_RXMODE_DMA, NULL);
 8003068:	2300      	movs	r3, #0
 800306a:	2201      	movs	r2, #1
 800306c:	4940      	ldr	r1, [pc, #256]	@ (8003170 <main+0x220>)
 800306e:	4848      	ldr	r0, [pc, #288]	@ (8003190 <main+0x240>)
 8003070:	f7ff f98c 	bl	800238c <GPS_Init>

 	  // Set GPS callbacks
 	  gps.on_sentence = gps_print_sentence;
 8003074:	4b46      	ldr	r3, [pc, #280]	@ (8003190 <main+0x240>)
 8003076:	4a47      	ldr	r2, [pc, #284]	@ (8003194 <main+0x244>)
 8003078:	f8c3 23c0 	str.w	r2, [r3, #960]	@ 0x3c0
 	  gps.on_fix = gps_print_fix;
 800307c:	4b44      	ldr	r3, [pc, #272]	@ (8003190 <main+0x240>)
 800307e:	4a46      	ldr	r2, [pc, #280]	@ (8003198 <main+0x248>)
 8003080:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

 	  // Start GPS
 	  HAL_StatusTypeDef st = GPS_Start(&gps);
 8003084:	4842      	ldr	r0, [pc, #264]	@ (8003190 <main+0x240>)
 8003086:	f7ff fa07 	bl	8002498 <GPS_Start>
 800308a:	4603      	mov	r3, r0
 800308c:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
 	  printf("GPS Start: status=%d, huart1.hdmarx=%p, err=0x%08lx\r\n",
 8003090:	f897 104e 	ldrb.w	r1, [r7, #78]	@ 0x4e
 	         st, (void*)huart1.hdmarx, huart1.ErrorCode);
 8003094:	4b36      	ldr	r3, [pc, #216]	@ (8003170 <main+0x220>)
 8003096:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003098:	4b35      	ldr	r3, [pc, #212]	@ (8003170 <main+0x220>)
 800309a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 	  printf("GPS Start: status=%d, huart1.hdmarx=%p, err=0x%08lx\r\n",
 800309c:	483f      	ldr	r0, [pc, #252]	@ (800319c <main+0x24c>)
 800309e:	f00b f8b7 	bl	800e210 <iprintf>

 	  if (st != HAL_OK) {
 80030a2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d00f      	beq.n	80030ca <main+0x17a>
 	      printf("GPS_Start failed: %d\r\n", st);
 80030aa:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80030ae:	4619      	mov	r1, r3
 80030b0:	483b      	ldr	r0, [pc, #236]	@ (80031a0 <main+0x250>)
 80030b2:	f00b f8ad 	bl	800e210 <iprintf>
 	      printf("Check: 1) USART1 RX DMA enabled in CubeMX\r\n");
 80030b6:	483b      	ldr	r0, [pc, #236]	@ (80031a4 <main+0x254>)
 80030b8:	f00b f912 	bl	800e2e0 <puts>
 	      printf("       2) DMA2_Stream2 IRQ enabled\r\n");
 80030bc:	483a      	ldr	r0, [pc, #232]	@ (80031a8 <main+0x258>)
 80030be:	f00b f90f 	bl	800e2e0 <puts>
 	      printf("       3) Correct GPIO pins assigned\r\n");
 80030c2:	483a      	ldr	r0, [pc, #232]	@ (80031ac <main+0x25c>)
 80030c4:	f00b f90c 	bl	800e2e0 <puts>
 80030c8:	e002      	b.n	80030d0 <main+0x180>
 	  } else {
 	      printf("GPS started successfully - waiting for data...\r\n");
 80030ca:	4839      	ldr	r0, [pc, #228]	@ (80031b0 <main+0x260>)
 80030cc:	f00b f908 	bl	800e2e0 <puts>

 	float ax_ms2, ay_ms2, az_ms2;
 	float gx_dps, gy_dps, gz_dps;
 	float pitch_deg, roll_deg;

 	uint32_t last_gps_debug = 0;
 80030d0:	2300      	movs	r3, #0
 80030d2:	657b      	str	r3, [r7, #84]	@ 0x54
 	uint32_t last_imu_print = 0;
 80030d4:	2300      	movs	r3, #0
 80030d6:	64bb      	str	r3, [r7, #72]	@ 0x48
 	uint32_t last_irq = 0, last_bytes = 0;
 80030d8:	2300      	movs	r3, #0
 80030da:	647b      	str	r3, [r7, #68]	@ 0x44
 80030dc:	2300      	movs	r3, #0
 80030de:	643b      	str	r3, [r7, #64]	@ 0x40

 	uint32_t next_bmp      = HAL_GetTick();   // 5 Hz BMP280
 80030e0:	f000 ffb4 	bl	800404c <HAL_GetTick>
 80030e4:	6538      	str	r0, [r7, #80]	@ 0x50
 	uint32_t next_imu_print= HAL_GetTick();   // 1 Hz IMU
 80030e6:	f000 ffb1 	bl	800404c <HAL_GetTick>
 80030ea:	63f8      	str	r0, [r7, #60]	@ 0x3c
 	uint32_t next_gps_dbg  = HAL_GetTick();   // 1 Hz GPS debug
 80030ec:	f000 ffae 	bl	800404c <HAL_GetTick>
 80030f0:	63b8      	str	r0, [r7, #56]	@ 0x38

 	printf("Enter while(1)\r\n");
 80030f2:	4830      	ldr	r0, [pc, #192]	@ (80031b4 <main+0x264>)
 80030f4:	f00b f8f4 	bl	800e2e0 <puts>
 	BMP280_AppInit();
 80030f8:	f000 fbc6 	bl	8003888 <BMP280_AppInit>
 	while (1)
 	{

 		GPS_Process(&gps);
 80030fc:	4824      	ldr	r0, [pc, #144]	@ (8003190 <main+0x240>)
 80030fe:	f7ff fa7d 	bl	80025fc <GPS_Process>
 		static uint32_t last_irq=0, last_bytes=0;
 		if (HAL_GetTick() - last_gps_debug > 1000) {
 8003102:	f000 ffa3 	bl	800404c <HAL_GetTick>
 8003106:	4602      	mov	r2, r0
 8003108:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003110:	d961      	bls.n	80031d6 <main+0x286>
 		      last_gps_debug = HAL_GetTick();
 8003112:	f000 ff9b 	bl	800404c <HAL_GetTick>
 8003116:	6578      	str	r0, [r7, #84]	@ 0x54
 		      printf("[GPS Debug] IRQ events=%lu(+%lu) RX bytes=%lu(+%lu)\r\n",
 8003118:	4b27      	ldr	r3, [pc, #156]	@ (80031b8 <main+0x268>)
 800311a:	6819      	ldr	r1, [r3, #0]
 800311c:	4b26      	ldr	r3, [pc, #152]	@ (80031b8 <main+0x268>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	4b26      	ldr	r3, [pc, #152]	@ (80031bc <main+0x26c>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	1ad0      	subs	r0, r2, r3
 8003126:	4b26      	ldr	r3, [pc, #152]	@ (80031c0 <main+0x270>)
 8003128:	681c      	ldr	r4, [r3, #0]
 800312a:	4b25      	ldr	r3, [pc, #148]	@ (80031c0 <main+0x270>)
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	4b25      	ldr	r3, [pc, #148]	@ (80031c4 <main+0x274>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	1ad3      	subs	r3, r2, r3
 8003134:	9300      	str	r3, [sp, #0]
 8003136:	4623      	mov	r3, r4
 8003138:	4602      	mov	r2, r0
 800313a:	4823      	ldr	r0, [pc, #140]	@ (80031c8 <main+0x278>)
 800313c:	f00b f868 	bl	800e210 <iprintf>
 		             gps_irq_events, gps_irq_events - last_irq,
 		             gps_rx_total, gps_rx_total - last_bytes);
 		      last_irq = gps_irq_events;
 8003140:	4b1d      	ldr	r3, [pc, #116]	@ (80031b8 <main+0x268>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a1d      	ldr	r2, [pc, #116]	@ (80031bc <main+0x26c>)
 8003146:	6013      	str	r3, [r2, #0]
 		      last_bytes = gps_rx_total;
 8003148:	4b1d      	ldr	r3, [pc, #116]	@ (80031c0 <main+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1d      	ldr	r2, [pc, #116]	@ (80031c4 <main+0x274>)
 800314e:	6013      	str	r3, [r2, #0]

 		      // Show current fix status
 		      if (gps.fix.valid) {
 8003150:	4b0f      	ldr	r3, [pc, #60]	@ (8003190 <main+0x240>)
 8003152:	f893 3390 	ldrb.w	r3, [r3, #912]	@ 0x390
 8003156:	2b00      	cmp	r3, #0
 8003158:	d03a      	beq.n	80031d0 <main+0x280>
 		          printf("[GPS Status] Valid fix with %d satellites\r\n", gps.fix.sats_in_use);
 800315a:	4b0d      	ldr	r3, [pc, #52]	@ (8003190 <main+0x240>)
 800315c:	f893 3392 	ldrb.w	r3, [r3, #914]	@ 0x392
 8003160:	4619      	mov	r1, r3
 8003162:	481a      	ldr	r0, [pc, #104]	@ (80031cc <main+0x27c>)
 8003164:	f00b f854 	bl	800e210 <iprintf>
 8003168:	e035      	b.n	80031d6 <main+0x286>
 800316a:	bf00      	nop
 800316c:	40020000 	.word	0x40020000
 8003170:	200003f8 	.word	0x200003f8
 8003174:	20000488 	.word	0x20000488
 8003178:	0801181c 	.word	0x0801181c
 800317c:	08011828 	.word	0x08011828
 8003180:	08011840 	.word	0x08011840
 8003184:	08011854 	.word	0x08011854
 8003188:	08011874 	.word	0x08011874
 800318c:	080118a8 	.word	0x080118a8
 8003190:	20000510 	.word	0x20000510
 8003194:	08002e4d 	.word	0x08002e4d
 8003198:	08002e69 	.word	0x08002e69
 800319c:	080118d8 	.word	0x080118d8
 80031a0:	08011910 	.word	0x08011910
 80031a4:	08011928 	.word	0x08011928
 80031a8:	08011954 	.word	0x08011954
 80031ac:	08011978 	.word	0x08011978
 80031b0:	080119a0 	.word	0x080119a0
 80031b4:	080119d0 	.word	0x080119d0
 80031b8:	200002e4 	.word	0x200002e4
 80031bc:	20000900 	.word	0x20000900
 80031c0:	200002e8 	.word	0x200002e8
 80031c4:	20000904 	.word	0x20000904
 80031c8:	080119e0 	.word	0x080119e0
 80031cc:	08011a18 	.word	0x08011a18
 		      } else {
 		          printf("[GPS Status] Searching for satellites...\r\n");
 80031d0:	48a9      	ldr	r0, [pc, #676]	@ (8003478 <main+0x528>)
 80031d2:	f00b f885 	bl	800e2e0 <puts>
 		      }
 		    }
 	    // --- Read and convert accelerometer ---
 	    if (icm42605_read_accel(accel) == HAL_OK)
 80031d6:	f107 0314 	add.w	r3, r7, #20
 80031da:	4618      	mov	r0, r3
 80031dc:	f7ff fd5d 	bl	8002c9a <icm42605_read_accel>
 80031e0:	4603      	mov	r3, r0
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d12f      	bne.n	8003246 <main+0x2f6>
 	    {
 	        // Convert to m/s²
 	        ax_ms2 = (accel[0] / ACCEL_LSB_PER_G) * G_IN_MS2;
 80031e6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80031ea:	ee07 3a90 	vmov	s15, r3
 80031ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80031f2:	eddf 6aa2 	vldr	s13, [pc, #648]	@ 800347c <main+0x52c>
 80031f6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80031fa:	ed9f 7aa1 	vldr	s14, [pc, #644]	@ 8003480 <main+0x530>
 80031fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003202:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
 	        ay_ms2 = (accel[1] / ACCEL_LSB_PER_G) * G_IN_MS2;
 8003206:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800320a:	ee07 3a90 	vmov	s15, r3
 800320e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003212:	eddf 6a9a 	vldr	s13, [pc, #616]	@ 800347c <main+0x52c>
 8003216:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800321a:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8003480 <main+0x530>
 800321e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003222:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
 	        az_ms2 = (accel[2] / ACCEL_LSB_PER_G) * G_IN_MS2;
 8003226:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800322a:	ee07 3a90 	vmov	s15, r3
 800322e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003232:	eddf 6a92 	vldr	s13, [pc, #584]	@ 800347c <main+0x52c>
 8003236:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800323a:	ed9f 7a91 	vldr	s14, [pc, #580]	@ 8003480 <main+0x530>
 800323e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003242:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
 	    }

 	    // --- Read and convert gyroscope ---
 	    if (icm42605_read_gyro(gyro) == HAL_OK)
 8003246:	f107 030c 	add.w	r3, r7, #12
 800324a:	4618      	mov	r0, r3
 800324c:	f7ff fd59 	bl	8002d02 <icm42605_read_gyro>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	d123      	bne.n	800329e <main+0x34e>
 	    {
 	        // Convert to °/s
 	        gx_dps = gyro[0] / GYRO_LSB_PER_DPS;
 8003256:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800325a:	ee07 3a90 	vmov	s15, r3
 800325e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003262:	eddf 6a88 	vldr	s13, [pc, #544]	@ 8003484 <main+0x534>
 8003266:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800326a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
 	        gy_dps = gyro[1] / GYRO_LSB_PER_DPS;
 800326e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8003272:	ee07 3a90 	vmov	s15, r3
 8003276:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800327a:	eddf 6a82 	vldr	s13, [pc, #520]	@ 8003484 <main+0x534>
 800327e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003282:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
 	        gz_dps = gyro[2] / GYRO_LSB_PER_DPS;
 8003286:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800328a:	ee07 3a90 	vmov	s15, r3
 800328e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003292:	eddf 6a7c 	vldr	s13, [pc, #496]	@ 8003484 <main+0x534>
 8003296:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800329a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
 	    }

 	    // --- Calculate pitch and roll angles ---
 	    float ax_g = accel[0] / ACCEL_LSB_PER_G;
 800329e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80032a2:	ee07 3a90 	vmov	s15, r3
 80032a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032aa:	eddf 6a74 	vldr	s13, [pc, #464]	@ 800347c <main+0x52c>
 80032ae:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032b2:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
 	    float ay_g = accel[1] / ACCEL_LSB_PER_G;
 80032b6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80032ba:	ee07 3a90 	vmov	s15, r3
 80032be:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c2:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800347c <main+0x52c>
 80032c6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032ca:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
 	    float az_g = accel[2] / ACCEL_LSB_PER_G;
 80032ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80032d2:	ee07 3a90 	vmov	s15, r3
 80032d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032da:	eddf 6a68 	vldr	s13, [pc, #416]	@ 800347c <main+0x52c>
 80032de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032e2:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

 	    pitch_deg = atan2f(-ax_g, sqrtf(ay_g * ay_g + az_g * az_g)) * (180.0f / M_PI);
 80032e6:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80032ea:	eeb1 8a67 	vneg.f32	s16, s15
 80032ee:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80032f2:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80032f6:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80032fa:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80032fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003302:	eeb0 0a67 	vmov.f32	s0, s15
 8003306:	f00d fc5d 	bl	8010bc4 <sqrtf>
 800330a:	eef0 7a40 	vmov.f32	s15, s0
 800330e:	eef0 0a67 	vmov.f32	s1, s15
 8003312:	eeb0 0a48 	vmov.f32	s0, s16
 8003316:	f00d fbfb 	bl	8010b10 <atan2f>
 800331a:	ee10 3a10 	vmov	r3, s0
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd f91a 	bl	8000558 <__aeabi_f2d>
 8003324:	a352      	add	r3, pc, #328	@ (adr r3, 8003470 <main+0x520>)
 8003326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800332a:	f7fd f96d 	bl	8000608 <__aeabi_dmul>
 800332e:	4602      	mov	r2, r0
 8003330:	460b      	mov	r3, r1
 8003332:	4610      	mov	r0, r2
 8003334:	4619      	mov	r1, r3
 8003336:	f7fd fc5f 	bl	8000bf8 <__aeabi_d2f>
 800333a:	4603      	mov	r3, r0
 800333c:	62bb      	str	r3, [r7, #40]	@ 0x28
 	    roll_deg  = atan2f( ay_g, az_g ) * (180.0f / M_PI);
 800333e:	edd7 0a0b 	vldr	s1, [r7, #44]	@ 0x2c
 8003342:	ed97 0a0c 	vldr	s0, [r7, #48]	@ 0x30
 8003346:	f00d fbe3 	bl	8010b10 <atan2f>
 800334a:	ee10 3a10 	vmov	r3, s0
 800334e:	4618      	mov	r0, r3
 8003350:	f7fd f902 	bl	8000558 <__aeabi_f2d>
 8003354:	a346      	add	r3, pc, #280	@ (adr r3, 8003470 <main+0x520>)
 8003356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800335a:	f7fd f955 	bl	8000608 <__aeabi_dmul>
 800335e:	4602      	mov	r2, r0
 8003360:	460b      	mov	r3, r1
 8003362:	4610      	mov	r0, r2
 8003364:	4619      	mov	r1, r3
 8003366:	f7fd fc47 	bl	8000bf8 <__aeabi_d2f>
 800336a:	4603      	mov	r3, r0
 800336c:	627b      	str	r3, [r7, #36]	@ 0x24

 	    // --- Print formatted, readable values ---
 	    printf("Accel (m/s²): X=%.2f Y=%.2f Z=%.2f\r\n", ax_ms2, ay_ms2, az_ms2);
 800336e:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003370:	f7fd f8f2 	bl	8000558 <__aeabi_f2d>
 8003374:	4680      	mov	r8, r0
 8003376:	4689      	mov	r9, r1
 8003378:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 800337a:	f7fd f8ed 	bl	8000558 <__aeabi_f2d>
 800337e:	4604      	mov	r4, r0
 8003380:	460d      	mov	r5, r1
 8003382:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 8003384:	f7fd f8e8 	bl	8000558 <__aeabi_f2d>
 8003388:	4602      	mov	r2, r0
 800338a:	460b      	mov	r3, r1
 800338c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003390:	e9cd 4500 	strd	r4, r5, [sp]
 8003394:	4642      	mov	r2, r8
 8003396:	464b      	mov	r3, r9
 8003398:	483b      	ldr	r0, [pc, #236]	@ (8003488 <main+0x538>)
 800339a:	f00a ff39 	bl	800e210 <iprintf>
 	    printf("Gyro  (°/s): X=%.2f Y=%.2f Z=%.2f\r\n", gx_dps, gy_dps, gz_dps);
 800339e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 80033a0:	f7fd f8da 	bl	8000558 <__aeabi_f2d>
 80033a4:	4680      	mov	r8, r0
 80033a6:	4689      	mov	r9, r1
 80033a8:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 80033aa:	f7fd f8d5 	bl	8000558 <__aeabi_f2d>
 80033ae:	4604      	mov	r4, r0
 80033b0:	460d      	mov	r5, r1
 80033b2:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 80033b4:	f7fd f8d0 	bl	8000558 <__aeabi_f2d>
 80033b8:	4602      	mov	r2, r0
 80033ba:	460b      	mov	r3, r1
 80033bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033c0:	e9cd 4500 	strd	r4, r5, [sp]
 80033c4:	4642      	mov	r2, r8
 80033c6:	464b      	mov	r3, r9
 80033c8:	4830      	ldr	r0, [pc, #192]	@ (800348c <main+0x53c>)
 80033ca:	f00a ff21 	bl	800e210 <iprintf>
 	    printf("Angles (deg): Pitch=%.2f Roll=%.2f\r\n", pitch_deg, roll_deg);
 80033ce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80033d0:	f7fd f8c2 	bl	8000558 <__aeabi_f2d>
 80033d4:	4604      	mov	r4, r0
 80033d6:	460d      	mov	r5, r1
 80033d8:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80033da:	f7fd f8bd 	bl	8000558 <__aeabi_f2d>
 80033de:	4602      	mov	r2, r0
 80033e0:	460b      	mov	r3, r1
 80033e2:	e9cd 2300 	strd	r2, r3, [sp]
 80033e6:	4622      	mov	r2, r4
 80033e8:	462b      	mov	r3, r5
 80033ea:	4829      	ldr	r0, [pc, #164]	@ (8003490 <main+0x540>)
 80033ec:	f00a ff10 	bl	800e210 <iprintf>

 	    HAL_Delay(1000); // ~20 Hz refresh for readability
 80033f0:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80033f4:	f000 fe36 	bl	8004064 <HAL_Delay>

 	    // --- BMP280 read (5 Hz) ---
 	      if ((int32_t)(HAL_GetTick() - next_bmp) >= 0) {
 80033f8:	f000 fe28 	bl	800404c <HAL_GetTick>
 80033fc:	4602      	mov	r2, r0
 80033fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003400:	1ad3      	subs	r3, r2, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	f6ff ae7a 	blt.w	80030fc <main+0x1ac>
 	          next_bmp += 200;
 8003408:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800340a:	33c8      	adds	r3, #200	@ 0xc8
 800340c:	653b      	str	r3, [r7, #80]	@ 0x50

 	          float t_c, p_pa;
 	          if (bmp280_read_temp_press(&bmp, &t_c, &p_pa) == HAL_OK) {
 800340e:	1d3a      	adds	r2, r7, #4
 8003410:	f107 0308 	add.w	r3, r7, #8
 8003414:	4619      	mov	r1, r3
 8003416:	481f      	ldr	r0, [pc, #124]	@ (8003494 <main+0x544>)
 8003418:	f7fe fb86 	bl	8001b28 <bmp280_read_temp_press>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	f47f ae6c 	bne.w	80030fc <main+0x1ac>
 	              float alt_m = bmp280_altitude_m_from_pa(p_pa, SEA_LEVEL_PA);
 8003424:	edd7 7a01 	vldr	s15, [r7, #4]
 8003428:	eddf 0a1b 	vldr	s1, [pc, #108]	@ 8003498 <main+0x548>
 800342c:	eeb0 0a67 	vmov.f32	s0, s15
 8003430:	f7ff fce4 	bl	8002dfc <bmp280_altitude_m_from_pa>
 8003434:	ed87 0a08 	vstr	s0, [r7, #32]
 	              printf("BMP280: T=%.2f C  P=%.1f Pa  Alt=%.1f m\r\n", t_c, p_pa, alt_m);
 8003438:	68bb      	ldr	r3, [r7, #8]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd f88c 	bl	8000558 <__aeabi_f2d>
 8003440:	4680      	mov	r8, r0
 8003442:	4689      	mov	r9, r1
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4618      	mov	r0, r3
 8003448:	f7fd f886 	bl	8000558 <__aeabi_f2d>
 800344c:	4604      	mov	r4, r0
 800344e:	460d      	mov	r5, r1
 8003450:	6a38      	ldr	r0, [r7, #32]
 8003452:	f7fd f881 	bl	8000558 <__aeabi_f2d>
 8003456:	4602      	mov	r2, r0
 8003458:	460b      	mov	r3, r1
 800345a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800345e:	e9cd 4500 	strd	r4, r5, [sp]
 8003462:	4642      	mov	r2, r8
 8003464:	464b      	mov	r3, r9
 8003466:	480d      	ldr	r0, [pc, #52]	@ (800349c <main+0x54c>)
 8003468:	f00a fed2 	bl	800e210 <iprintf>
 	{
 800346c:	e646      	b.n	80030fc <main+0x1ac>
 800346e:	bf00      	nop
 8003470:	1a63c1f8 	.word	0x1a63c1f8
 8003474:	404ca5dc 	.word	0x404ca5dc
 8003478:	08011a44 	.word	0x08011a44
 800347c:	46800000 	.word	0x46800000
 8003480:	411ce80a 	.word	0x411ce80a
 8003484:	41833333 	.word	0x41833333
 8003488:	08011a70 	.word	0x08011a70
 800348c:	08011a98 	.word	0x08011a98
 8003490:	08011ac0 	.word	0x08011ac0
 8003494:	200004e8 	.word	0x200004e8
 8003498:	47c5e680 	.word	0x47c5e680
 800349c:	08011ae8 	.word	0x08011ae8

080034a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b094      	sub	sp, #80	@ 0x50
 80034a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034a6:	f107 0320 	add.w	r3, r7, #32
 80034aa:	2230      	movs	r2, #48	@ 0x30
 80034ac:	2100      	movs	r1, #0
 80034ae:	4618      	mov	r0, r3
 80034b0:	f00a fff6 	bl	800e4a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034b4:	f107 030c 	add.w	r3, r7, #12
 80034b8:	2200      	movs	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
 80034bc:	605a      	str	r2, [r3, #4]
 80034be:	609a      	str	r2, [r3, #8]
 80034c0:	60da      	str	r2, [r3, #12]
 80034c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80034c4:	2300      	movs	r3, #0
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	4b27      	ldr	r3, [pc, #156]	@ (8003568 <SystemClock_Config+0xc8>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034cc:	4a26      	ldr	r2, [pc, #152]	@ (8003568 <SystemClock_Config+0xc8>)
 80034ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80034d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80034d4:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <SystemClock_Config+0xc8>)
 80034d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80034d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80034dc:	60bb      	str	r3, [r7, #8]
 80034de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80034e0:	2300      	movs	r3, #0
 80034e2:	607b      	str	r3, [r7, #4]
 80034e4:	4b21      	ldr	r3, [pc, #132]	@ (800356c <SystemClock_Config+0xcc>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a20      	ldr	r2, [pc, #128]	@ (800356c <SystemClock_Config+0xcc>)
 80034ea:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80034ee:	6013      	str	r3, [r2, #0]
 80034f0:	4b1e      	ldr	r3, [pc, #120]	@ (800356c <SystemClock_Config+0xcc>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80034f8:	607b      	str	r3, [r7, #4]
 80034fa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80034fc:	2301      	movs	r3, #1
 80034fe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003500:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003504:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003506:	2302      	movs	r3, #2
 8003508:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800350a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800350e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8003510:	2306      	movs	r3, #6
 8003512:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8003514:	2348      	movs	r3, #72	@ 0x48
 8003516:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003518:	2302      	movs	r3, #2
 800351a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 800351c:	2303      	movs	r3, #3
 800351e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003520:	f107 0320 	add.w	r3, r7, #32
 8003524:	4618      	mov	r0, r3
 8003526:	f002 fedf 	bl	80062e8 <HAL_RCC_OscConfig>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8003530:	f000 f9e6 	bl	8003900 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003534:	230f      	movs	r3, #15
 8003536:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003538:	2302      	movs	r3, #2
 800353a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800353c:	2300      	movs	r3, #0
 800353e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8003540:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003544:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003546:	2300      	movs	r3, #0
 8003548:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800354a:	f107 030c 	add.w	r3, r7, #12
 800354e:	2102      	movs	r1, #2
 8003550:	4618      	mov	r0, r3
 8003552:	f003 f941 	bl	80067d8 <HAL_RCC_ClockConfig>
 8003556:	4603      	mov	r3, r0
 8003558:	2b00      	cmp	r3, #0
 800355a:	d001      	beq.n	8003560 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 800355c:	f000 f9d0 	bl	8003900 <Error_Handler>
  }
}
 8003560:	bf00      	nop
 8003562:	3750      	adds	r7, #80	@ 0x50
 8003564:	46bd      	mov	sp, r7
 8003566:	bd80      	pop	{r7, pc}
 8003568:	40023800 	.word	0x40023800
 800356c:	40007000 	.word	0x40007000

08003570 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003574:	4b17      	ldr	r3, [pc, #92]	@ (80035d4 <MX_SPI1_Init+0x64>)
 8003576:	4a18      	ldr	r2, [pc, #96]	@ (80035d8 <MX_SPI1_Init+0x68>)
 8003578:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800357a:	4b16      	ldr	r3, [pc, #88]	@ (80035d4 <MX_SPI1_Init+0x64>)
 800357c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003580:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003582:	4b14      	ldr	r3, [pc, #80]	@ (80035d4 <MX_SPI1_Init+0x64>)
 8003584:	2200      	movs	r2, #0
 8003586:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8003588:	4b12      	ldr	r3, [pc, #72]	@ (80035d4 <MX_SPI1_Init+0x64>)
 800358a:	2200      	movs	r2, #0
 800358c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800358e:	4b11      	ldr	r3, [pc, #68]	@ (80035d4 <MX_SPI1_Init+0x64>)
 8003590:	2200      	movs	r2, #0
 8003592:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003594:	4b0f      	ldr	r3, [pc, #60]	@ (80035d4 <MX_SPI1_Init+0x64>)
 8003596:	2200      	movs	r2, #0
 8003598:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800359a:	4b0e      	ldr	r3, [pc, #56]	@ (80035d4 <MX_SPI1_Init+0x64>)
 800359c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035a0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80035a2:	4b0c      	ldr	r3, [pc, #48]	@ (80035d4 <MX_SPI1_Init+0x64>)
 80035a4:	2220      	movs	r2, #32
 80035a6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035a8:	4b0a      	ldr	r3, [pc, #40]	@ (80035d4 <MX_SPI1_Init+0x64>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80035ae:	4b09      	ldr	r3, [pc, #36]	@ (80035d4 <MX_SPI1_Init+0x64>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035b4:	4b07      	ldr	r3, [pc, #28]	@ (80035d4 <MX_SPI1_Init+0x64>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80035ba:	4b06      	ldr	r3, [pc, #24]	@ (80035d4 <MX_SPI1_Init+0x64>)
 80035bc:	220a      	movs	r2, #10
 80035be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80035c0:	4804      	ldr	r0, [pc, #16]	@ (80035d4 <MX_SPI1_Init+0x64>)
 80035c2:	f003 fae9 	bl	8006b98 <HAL_SPI_Init>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d001      	beq.n	80035d0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80035cc:	f000 f998 	bl	8003900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80035d0:	bf00      	nop
 80035d2:	bd80      	pop	{r7, pc}
 80035d4:	200002f0 	.word	0x200002f0
 80035d8:	40013000 	.word	0x40013000

080035dc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80035e0:	4b17      	ldr	r3, [pc, #92]	@ (8003640 <MX_SPI2_Init+0x64>)
 80035e2:	4a18      	ldr	r2, [pc, #96]	@ (8003644 <MX_SPI2_Init+0x68>)
 80035e4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80035e6:	4b16      	ldr	r3, [pc, #88]	@ (8003640 <MX_SPI2_Init+0x64>)
 80035e8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035ec:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035ee:	4b14      	ldr	r3, [pc, #80]	@ (8003640 <MX_SPI2_Init+0x64>)
 80035f0:	2200      	movs	r2, #0
 80035f2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035f4:	4b12      	ldr	r3, [pc, #72]	@ (8003640 <MX_SPI2_Init+0x64>)
 80035f6:	2200      	movs	r2, #0
 80035f8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035fa:	4b11      	ldr	r3, [pc, #68]	@ (8003640 <MX_SPI2_Init+0x64>)
 80035fc:	2200      	movs	r2, #0
 80035fe:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003600:	4b0f      	ldr	r3, [pc, #60]	@ (8003640 <MX_SPI2_Init+0x64>)
 8003602:	2200      	movs	r2, #0
 8003604:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8003606:	4b0e      	ldr	r3, [pc, #56]	@ (8003640 <MX_SPI2_Init+0x64>)
 8003608:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800360c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800360e:	4b0c      	ldr	r3, [pc, #48]	@ (8003640 <MX_SPI2_Init+0x64>)
 8003610:	2200      	movs	r2, #0
 8003612:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003614:	4b0a      	ldr	r3, [pc, #40]	@ (8003640 <MX_SPI2_Init+0x64>)
 8003616:	2200      	movs	r2, #0
 8003618:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800361a:	4b09      	ldr	r3, [pc, #36]	@ (8003640 <MX_SPI2_Init+0x64>)
 800361c:	2200      	movs	r2, #0
 800361e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003620:	4b07      	ldr	r3, [pc, #28]	@ (8003640 <MX_SPI2_Init+0x64>)
 8003622:	2200      	movs	r2, #0
 8003624:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8003626:	4b06      	ldr	r3, [pc, #24]	@ (8003640 <MX_SPI2_Init+0x64>)
 8003628:	220a      	movs	r2, #10
 800362a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800362c:	4804      	ldr	r0, [pc, #16]	@ (8003640 <MX_SPI2_Init+0x64>)
 800362e:	f003 fab3 	bl	8006b98 <HAL_SPI_Init>
 8003632:	4603      	mov	r3, r0
 8003634:	2b00      	cmp	r3, #0
 8003636:	d001      	beq.n	800363c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8003638:	f000 f962 	bl	8003900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800363c:	bf00      	nop
 800363e:	bd80      	pop	{r7, pc}
 8003640:	20000348 	.word	0x20000348
 8003644:	40003800 	.word	0x40003800

08003648 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 800364c:	4b17      	ldr	r3, [pc, #92]	@ (80036ac <MX_SPI3_Init+0x64>)
 800364e:	4a18      	ldr	r2, [pc, #96]	@ (80036b0 <MX_SPI3_Init+0x68>)
 8003650:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8003652:	4b16      	ldr	r3, [pc, #88]	@ (80036ac <MX_SPI3_Init+0x64>)
 8003654:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003658:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800365a:	4b14      	ldr	r3, [pc, #80]	@ (80036ac <MX_SPI3_Init+0x64>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003660:	4b12      	ldr	r3, [pc, #72]	@ (80036ac <MX_SPI3_Init+0x64>)
 8003662:	2200      	movs	r2, #0
 8003664:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003666:	4b11      	ldr	r3, [pc, #68]	@ (80036ac <MX_SPI3_Init+0x64>)
 8003668:	2200      	movs	r2, #0
 800366a:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 800366c:	4b0f      	ldr	r3, [pc, #60]	@ (80036ac <MX_SPI3_Init+0x64>)
 800366e:	2200      	movs	r2, #0
 8003670:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003672:	4b0e      	ldr	r3, [pc, #56]	@ (80036ac <MX_SPI3_Init+0x64>)
 8003674:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003678:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800367a:	4b0c      	ldr	r3, [pc, #48]	@ (80036ac <MX_SPI3_Init+0x64>)
 800367c:	2200      	movs	r2, #0
 800367e:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003680:	4b0a      	ldr	r3, [pc, #40]	@ (80036ac <MX_SPI3_Init+0x64>)
 8003682:	2200      	movs	r2, #0
 8003684:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8003686:	4b09      	ldr	r3, [pc, #36]	@ (80036ac <MX_SPI3_Init+0x64>)
 8003688:	2200      	movs	r2, #0
 800368a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800368c:	4b07      	ldr	r3, [pc, #28]	@ (80036ac <MX_SPI3_Init+0x64>)
 800368e:	2200      	movs	r2, #0
 8003690:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003692:	4b06      	ldr	r3, [pc, #24]	@ (80036ac <MX_SPI3_Init+0x64>)
 8003694:	220a      	movs	r2, #10
 8003696:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8003698:	4804      	ldr	r0, [pc, #16]	@ (80036ac <MX_SPI3_Init+0x64>)
 800369a:	f003 fa7d 	bl	8006b98 <HAL_SPI_Init>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b00      	cmp	r3, #0
 80036a2:	d001      	beq.n	80036a8 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80036a4:	f000 f92c 	bl	8003900 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80036a8:	bf00      	nop
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	200003a0 	.word	0x200003a0
 80036b0:	40003c00 	.word	0x40003c00

080036b4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80036b8:	4b11      	ldr	r3, [pc, #68]	@ (8003700 <MX_USART1_UART_Init+0x4c>)
 80036ba:	4a12      	ldr	r2, [pc, #72]	@ (8003704 <MX_USART1_UART_Init+0x50>)
 80036bc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80036be:	4b10      	ldr	r3, [pc, #64]	@ (8003700 <MX_USART1_UART_Init+0x4c>)
 80036c0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80036c4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80036c6:	4b0e      	ldr	r3, [pc, #56]	@ (8003700 <MX_USART1_UART_Init+0x4c>)
 80036c8:	2200      	movs	r2, #0
 80036ca:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80036cc:	4b0c      	ldr	r3, [pc, #48]	@ (8003700 <MX_USART1_UART_Init+0x4c>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80036d2:	4b0b      	ldr	r3, [pc, #44]	@ (8003700 <MX_USART1_UART_Init+0x4c>)
 80036d4:	2200      	movs	r2, #0
 80036d6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80036d8:	4b09      	ldr	r3, [pc, #36]	@ (8003700 <MX_USART1_UART_Init+0x4c>)
 80036da:	220c      	movs	r2, #12
 80036dc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80036de:	4b08      	ldr	r3, [pc, #32]	@ (8003700 <MX_USART1_UART_Init+0x4c>)
 80036e0:	2200      	movs	r2, #0
 80036e2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80036e4:	4b06      	ldr	r3, [pc, #24]	@ (8003700 <MX_USART1_UART_Init+0x4c>)
 80036e6:	2200      	movs	r2, #0
 80036e8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80036ea:	4805      	ldr	r0, [pc, #20]	@ (8003700 <MX_USART1_UART_Init+0x4c>)
 80036ec:	f004 f826 	bl	800773c <HAL_UART_Init>
 80036f0:	4603      	mov	r3, r0
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d001      	beq.n	80036fa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80036f6:	f000 f903 	bl	8003900 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80036fa:	bf00      	nop
 80036fc:	bd80      	pop	{r7, pc}
 80036fe:	bf00      	nop
 8003700:	200003f8 	.word	0x200003f8
 8003704:	40011000 	.word	0x40011000

08003708 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003708:	b580      	push	{r7, lr}
 800370a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800370c:	4b11      	ldr	r3, [pc, #68]	@ (8003754 <MX_USART2_UART_Init+0x4c>)
 800370e:	4a12      	ldr	r2, [pc, #72]	@ (8003758 <MX_USART2_UART_Init+0x50>)
 8003710:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003712:	4b10      	ldr	r3, [pc, #64]	@ (8003754 <MX_USART2_UART_Init+0x4c>)
 8003714:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003718:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800371a:	4b0e      	ldr	r3, [pc, #56]	@ (8003754 <MX_USART2_UART_Init+0x4c>)
 800371c:	2200      	movs	r2, #0
 800371e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003720:	4b0c      	ldr	r3, [pc, #48]	@ (8003754 <MX_USART2_UART_Init+0x4c>)
 8003722:	2200      	movs	r2, #0
 8003724:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003726:	4b0b      	ldr	r3, [pc, #44]	@ (8003754 <MX_USART2_UART_Init+0x4c>)
 8003728:	2200      	movs	r2, #0
 800372a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800372c:	4b09      	ldr	r3, [pc, #36]	@ (8003754 <MX_USART2_UART_Init+0x4c>)
 800372e:	220c      	movs	r2, #12
 8003730:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003732:	4b08      	ldr	r3, [pc, #32]	@ (8003754 <MX_USART2_UART_Init+0x4c>)
 8003734:	2200      	movs	r2, #0
 8003736:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003738:	4b06      	ldr	r3, [pc, #24]	@ (8003754 <MX_USART2_UART_Init+0x4c>)
 800373a:	2200      	movs	r2, #0
 800373c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800373e:	4805      	ldr	r0, [pc, #20]	@ (8003754 <MX_USART2_UART_Init+0x4c>)
 8003740:	f003 fffc 	bl	800773c <HAL_UART_Init>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800374a:	f000 f8d9 	bl	8003900 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	20000440 	.word	0x20000440
 8003758:	40004400 	.word	0x40004400

0800375c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	607b      	str	r3, [r7, #4]
 8003766:	4b0c      	ldr	r3, [pc, #48]	@ (8003798 <MX_DMA_Init+0x3c>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800376a:	4a0b      	ldr	r2, [pc, #44]	@ (8003798 <MX_DMA_Init+0x3c>)
 800376c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003770:	6313      	str	r3, [r2, #48]	@ 0x30
 8003772:	4b09      	ldr	r3, [pc, #36]	@ (8003798 <MX_DMA_Init+0x3c>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003776:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800377a:	607b      	str	r3, [r7, #4]
 800377c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800377e:	2200      	movs	r2, #0
 8003780:	2100      	movs	r1, #0
 8003782:	203a      	movs	r0, #58	@ 0x3a
 8003784:	f000 fd6d 	bl	8004262 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8003788:	203a      	movs	r0, #58	@ 0x3a
 800378a:	f000 fd86 	bl	800429a <HAL_NVIC_EnableIRQ>

}
 800378e:	bf00      	nop
 8003790:	3708      	adds	r7, #8
 8003792:	46bd      	mov	sp, r7
 8003794:	bd80      	pop	{r7, pc}
 8003796:	bf00      	nop
 8003798:	40023800 	.word	0x40023800

0800379c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b088      	sub	sp, #32
 80037a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037a2:	f107 030c 	add.w	r3, r7, #12
 80037a6:	2200      	movs	r2, #0
 80037a8:	601a      	str	r2, [r3, #0]
 80037aa:	605a      	str	r2, [r3, #4]
 80037ac:	609a      	str	r2, [r3, #8]
 80037ae:	60da      	str	r2, [r3, #12]
 80037b0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  	HAL_GPIO_WritePin(GPIOA, NSS1_Pin|NSS3_Pin, GPIO_PIN_SET);
 80037b2:	2201      	movs	r2, #1
 80037b4:	f248 0110 	movw	r1, #32784	@ 0x8010
 80037b8:	4830      	ldr	r0, [pc, #192]	@ (800387c <MX_GPIO_Init+0xe0>)
 80037ba:	f001 fb0f 	bl	8004ddc <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_SET);
 80037be:	2201      	movs	r2, #1
 80037c0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80037c4:	482e      	ldr	r0, [pc, #184]	@ (8003880 <MX_GPIO_Init+0xe4>)
 80037c6:	f001 fb09 	bl	8004ddc <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
 80037ce:	4b2d      	ldr	r3, [pc, #180]	@ (8003884 <MX_GPIO_Init+0xe8>)
 80037d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037d2:	4a2c      	ldr	r2, [pc, #176]	@ (8003884 <MX_GPIO_Init+0xe8>)
 80037d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80037d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80037da:	4b2a      	ldr	r3, [pc, #168]	@ (8003884 <MX_GPIO_Init+0xe8>)
 80037dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e2:	60bb      	str	r3, [r7, #8]
 80037e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80037e6:	2300      	movs	r3, #0
 80037e8:	607b      	str	r3, [r7, #4]
 80037ea:	4b26      	ldr	r3, [pc, #152]	@ (8003884 <MX_GPIO_Init+0xe8>)
 80037ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037ee:	4a25      	ldr	r2, [pc, #148]	@ (8003884 <MX_GPIO_Init+0xe8>)
 80037f0:	f043 0301 	orr.w	r3, r3, #1
 80037f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80037f6:	4b23      	ldr	r3, [pc, #140]	@ (8003884 <MX_GPIO_Init+0xe8>)
 80037f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037fa:	f003 0301 	and.w	r3, r3, #1
 80037fe:	607b      	str	r3, [r7, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003802:	2300      	movs	r3, #0
 8003804:	603b      	str	r3, [r7, #0]
 8003806:	4b1f      	ldr	r3, [pc, #124]	@ (8003884 <MX_GPIO_Init+0xe8>)
 8003808:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380a:	4a1e      	ldr	r2, [pc, #120]	@ (8003884 <MX_GPIO_Init+0xe8>)
 800380c:	f043 0302 	orr.w	r3, r3, #2
 8003810:	6313      	str	r3, [r2, #48]	@ 0x30
 8003812:	4b1c      	ldr	r3, [pc, #112]	@ (8003884 <MX_GPIO_Init+0xe8>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003816:	f003 0302 	and.w	r3, r3, #2
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|NSS1_Pin|NSS3_Pin, GPIO_PIN_RESET);
 800381e:	2200      	movs	r2, #0
 8003820:	f248 0112 	movw	r1, #32786	@ 0x8012
 8003824:	4815      	ldr	r0, [pc, #84]	@ (800387c <MX_GPIO_Init+0xe0>)
 8003826:	f001 fad9 	bl	8004ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS2_GPIO_Port, NSS2_Pin, GPIO_PIN_RESET);
 800382a:	2200      	movs	r2, #0
 800382c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8003830:	4813      	ldr	r0, [pc, #76]	@ (8003880 <MX_GPIO_Init+0xe4>)
 8003832:	f001 fad3 	bl	8004ddc <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin NSS1_Pin NSS3_Pin */
  GPIO_InitStruct.Pin = LED_Pin|NSS1_Pin|NSS3_Pin;
 8003836:	f248 0312 	movw	r3, #32786	@ 0x8012
 800383a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800383c:	2301      	movs	r3, #1
 800383e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003840:	2300      	movs	r3, #0
 8003842:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003844:	2300      	movs	r3, #0
 8003846:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003848:	f107 030c 	add.w	r3, r7, #12
 800384c:	4619      	mov	r1, r3
 800384e:	480b      	ldr	r0, [pc, #44]	@ (800387c <MX_GPIO_Init+0xe0>)
 8003850:	f001 f940 	bl	8004ad4 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS2_Pin */
  GPIO_InitStruct.Pin = NSS2_Pin;
 8003854:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003858:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800385a:	2301      	movs	r3, #1
 800385c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003862:	2300      	movs	r3, #0
 8003864:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(NSS2_GPIO_Port, &GPIO_InitStruct);
 8003866:	f107 030c 	add.w	r3, r7, #12
 800386a:	4619      	mov	r1, r3
 800386c:	4804      	ldr	r0, [pc, #16]	@ (8003880 <MX_GPIO_Init+0xe4>)
 800386e:	f001 f931 	bl	8004ad4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8003872:	bf00      	nop
 8003874:	3720      	adds	r7, #32
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40020000 	.word	0x40020000
 8003880:	40020400 	.word	0x40020400
 8003884:	40023800 	.word	0x40023800

08003888 <BMP280_AppInit>:

/* USER CODE BEGIN 4 */

static void BMP280_AppInit(void)
{
 8003888:	b580      	push	{r7, lr}
 800388a:	b084      	sub	sp, #16
 800388c:	af00      	add	r7, sp, #0
    if (bmp280_init_spi(&bmp, &hspi3, BMP280_CS_GPIO, BMP280_CS_PIN) != HAL_OK) {
 800388e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003892:	4a17      	ldr	r2, [pc, #92]	@ (80038f0 <BMP280_AppInit+0x68>)
 8003894:	4917      	ldr	r1, [pc, #92]	@ (80038f4 <BMP280_AppInit+0x6c>)
 8003896:	4818      	ldr	r0, [pc, #96]	@ (80038f8 <BMP280_AppInit+0x70>)
 8003898:	f7fd fc91 	bl	80011be <bmp280_init_spi>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <BMP280_AppInit+0x1e>
        Error_Handler();
 80038a2:	f000 f82d 	bl	8003900 <Error_Handler>
    }
    // Write CONFIG while device is in sleep (after reset)
    bmp280_set_config(&bmp, BMP280_TSB_125_MS, BMP280_FILTER_4, false);
 80038a6:	2300      	movs	r3, #0
 80038a8:	2202      	movs	r2, #2
 80038aa:	2102      	movs	r1, #2
 80038ac:	4812      	ldr	r0, [pc, #72]	@ (80038f8 <BMP280_AppInit+0x70>)
 80038ae:	f7fd fda8 	bl	8001402 <bmp280_set_config>
    // Start continuous conversions
    bmp280_set_ctrl_meas(&bmp, BMP280_OSRS_X1, BMP280_OSRS_X4, BMP280_MODE_NORMAL);
 80038b2:	2303      	movs	r3, #3
 80038b4:	2203      	movs	r2, #3
 80038b6:	2101      	movs	r1, #1
 80038b8:	480f      	ldr	r0, [pc, #60]	@ (80038f8 <BMP280_AppInit+0x70>)
 80038ba:	f7fd fdd0 	bl	800145e <bmp280_set_ctrl_meas>

    // Sanity read
    float t, p;
    if (bmp280_read_temp_press(&bmp, &t, &p) == HAL_OK) {
 80038be:	1d3a      	adds	r2, r7, #4
 80038c0:	f107 0308 	add.w	r3, r7, #8
 80038c4:	4619      	mov	r1, r3
 80038c6:	480c      	ldr	r0, [pc, #48]	@ (80038f8 <BMP280_AppInit+0x70>)
 80038c8:	f7fe f92e 	bl	8001b28 <bmp280_read_temp_press>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d109      	bne.n	80038e6 <BMP280_AppInit+0x5e>
        float alt = bmp280_altitude_m_from_pa(p, SEA_LEVEL_PA);
 80038d2:	edd7 7a01 	vldr	s15, [r7, #4]
 80038d6:	eddf 0a09 	vldr	s1, [pc, #36]	@ 80038fc <BMP280_AppInit+0x74>
 80038da:	eeb0 0a67 	vmov.f32	s0, s15
 80038de:	f7ff fa8d 	bl	8002dfc <bmp280_altitude_m_from_pa>
 80038e2:	ed87 0a03 	vstr	s0, [r7, #12]
        (void)alt;
    }
}
 80038e6:	bf00      	nop
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}
 80038ee:	bf00      	nop
 80038f0:	40020000 	.word	0x40020000
 80038f4:	200003a0 	.word	0x200003a0
 80038f8:	200004e8 	.word	0x200004e8
 80038fc:	47c5e680 	.word	0x47c5e680

08003900 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003900:	b480      	push	{r7}
 8003902:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003904:	b672      	cpsid	i
}
 8003906:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003908:	bf00      	nop
 800390a:	e7fd      	b.n	8003908 <Error_Handler+0x8>

0800390c <cdc_write>:
// retarget.c
#include "usbd_cdc_if.h"
#include <string.h>

static int cdc_write(const uint8_t* p, uint16_t n) {
 800390c:	b580      	push	{r7, lr}
 800390e:	b084      	sub	sp, #16
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	807b      	strh	r3, [r7, #2]
    // send in 64B chunks; wait if the USB stack is busy
    while (n) {
 8003918:	e015      	b.n	8003946 <cdc_write+0x3a>
        uint16_t chunk = (n > 64) ? 64 : n;
 800391a:	887b      	ldrh	r3, [r7, #2]
 800391c:	2b40      	cmp	r3, #64	@ 0x40
 800391e:	bf28      	it	cs
 8003920:	2340      	movcs	r3, #64	@ 0x40
 8003922:	81fb      	strh	r3, [r7, #14]
        while (CDC_Transmit_FS((uint8_t*)p, chunk) == USBD_BUSY) { /* spin */ }
 8003924:	bf00      	nop
 8003926:	89fb      	ldrh	r3, [r7, #14]
 8003928:	4619      	mov	r1, r3
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f008 fc6c 	bl	800c208 <CDC_Transmit_FS>
 8003930:	4603      	mov	r3, r0
 8003932:	2b01      	cmp	r3, #1
 8003934:	d0f7      	beq.n	8003926 <cdc_write+0x1a>
        p += chunk; n -= chunk;
 8003936:	89fb      	ldrh	r3, [r7, #14]
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	4413      	add	r3, r2
 800393c:	607b      	str	r3, [r7, #4]
 800393e:	887a      	ldrh	r2, [r7, #2]
 8003940:	89fb      	ldrh	r3, [r7, #14]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	807b      	strh	r3, [r7, #2]
    while (n) {
 8003946:	887b      	ldrh	r3, [r7, #2]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1e6      	bne.n	800391a <cdc_write+0xe>
    }
    return 0;
 800394c:	2300      	movs	r3, #0
}
 800394e:	4618      	mov	r0, r3
 8003950:	3710      	adds	r7, #16
 8003952:	46bd      	mov	sp, r7
 8003954:	bd80      	pop	{r7, pc}
	...

08003958 <_write>:

int _write(int file, char *ptr, int len)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	b086      	sub	sp, #24
 800395c:	af00      	add	r7, sp, #0
 800395e:	60f8      	str	r0, [r7, #12]
 8003960:	60b9      	str	r1, [r7, #8]
 8003962:	607a      	str	r2, [r7, #4]
    // turn \n into \r\n for terminals
    static uint8_t buf[128];
    int i = 0;
 8003964:	2300      	movs	r3, #0
 8003966:	617b      	str	r3, [r7, #20]
    for (int j = 0; j < len; ++j) {
 8003968:	2300      	movs	r3, #0
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	e02d      	b.n	80039ca <_write+0x72>
        if (ptr[j] == '\n') {
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	68ba      	ldr	r2, [r7, #8]
 8003972:	4413      	add	r3, r2
 8003974:	781b      	ldrb	r3, [r3, #0]
 8003976:	2b0a      	cmp	r3, #10
 8003978:	d110      	bne.n	800399c <_write+0x44>
            if (i >= (int)sizeof buf - 2) { cdc_write(buf, i); i = 0; }
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2b7d      	cmp	r3, #125	@ 0x7d
 800397e:	dd07      	ble.n	8003990 <_write+0x38>
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	b29b      	uxth	r3, r3
 8003984:	4619      	mov	r1, r3
 8003986:	481a      	ldr	r0, [pc, #104]	@ (80039f0 <_write+0x98>)
 8003988:	f7ff ffc0 	bl	800390c <cdc_write>
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
            buf[i++] = '\r';
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	617a      	str	r2, [r7, #20]
 8003996:	4a16      	ldr	r2, [pc, #88]	@ (80039f0 <_write+0x98>)
 8003998:	210d      	movs	r1, #13
 800399a:	54d1      	strb	r1, [r2, r3]
        }
        if (i >= (int)sizeof buf - 1) { cdc_write(buf, i); i = 0; }
 800399c:	697b      	ldr	r3, [r7, #20]
 800399e:	2b7e      	cmp	r3, #126	@ 0x7e
 80039a0:	dd07      	ble.n	80039b2 <_write+0x5a>
 80039a2:	697b      	ldr	r3, [r7, #20]
 80039a4:	b29b      	uxth	r3, r3
 80039a6:	4619      	mov	r1, r3
 80039a8:	4811      	ldr	r0, [pc, #68]	@ (80039f0 <_write+0x98>)
 80039aa:	f7ff ffaf 	bl	800390c <cdc_write>
 80039ae:	2300      	movs	r3, #0
 80039b0:	617b      	str	r3, [r7, #20]
        buf[i++] = (uint8_t)ptr[j];
 80039b2:	693b      	ldr	r3, [r7, #16]
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	441a      	add	r2, r3
 80039b8:	697b      	ldr	r3, [r7, #20]
 80039ba:	1c59      	adds	r1, r3, #1
 80039bc:	6179      	str	r1, [r7, #20]
 80039be:	7811      	ldrb	r1, [r2, #0]
 80039c0:	4a0b      	ldr	r2, [pc, #44]	@ (80039f0 <_write+0x98>)
 80039c2:	54d1      	strb	r1, [r2, r3]
    for (int j = 0; j < len; ++j) {
 80039c4:	693b      	ldr	r3, [r7, #16]
 80039c6:	3301      	adds	r3, #1
 80039c8:	613b      	str	r3, [r7, #16]
 80039ca:	693a      	ldr	r2, [r7, #16]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	dbcd      	blt.n	800396e <_write+0x16>
    }
    if (i) cdc_write(buf, i);
 80039d2:	697b      	ldr	r3, [r7, #20]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d005      	beq.n	80039e4 <_write+0x8c>
 80039d8:	697b      	ldr	r3, [r7, #20]
 80039da:	b29b      	uxth	r3, r3
 80039dc:	4619      	mov	r1, r3
 80039de:	4804      	ldr	r0, [pc, #16]	@ (80039f0 <_write+0x98>)
 80039e0:	f7ff ff94 	bl	800390c <cdc_write>
    return len;
 80039e4:	687b      	ldr	r3, [r7, #4]
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3718      	adds	r7, #24
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000908 	.word	0x20000908

080039f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80039f4:	b480      	push	{r7}
 80039f6:	b083      	sub	sp, #12
 80039f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039fa:	2300      	movs	r3, #0
 80039fc:	607b      	str	r3, [r7, #4]
 80039fe:	4b10      	ldr	r3, [pc, #64]	@ (8003a40 <HAL_MspInit+0x4c>)
 8003a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a02:	4a0f      	ldr	r2, [pc, #60]	@ (8003a40 <HAL_MspInit+0x4c>)
 8003a04:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a08:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a0a:	4b0d      	ldr	r3, [pc, #52]	@ (8003a40 <HAL_MspInit+0x4c>)
 8003a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a0e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a12:	607b      	str	r3, [r7, #4]
 8003a14:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	603b      	str	r3, [r7, #0]
 8003a1a:	4b09      	ldr	r3, [pc, #36]	@ (8003a40 <HAL_MspInit+0x4c>)
 8003a1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a1e:	4a08      	ldr	r2, [pc, #32]	@ (8003a40 <HAL_MspInit+0x4c>)
 8003a20:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a24:	6413      	str	r3, [r2, #64]	@ 0x40
 8003a26:	4b06      	ldr	r3, [pc, #24]	@ (8003a40 <HAL_MspInit+0x4c>)
 8003a28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003a2e:	603b      	str	r3, [r7, #0]
 8003a30:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003a32:	bf00      	nop
 8003a34:	370c      	adds	r7, #12
 8003a36:	46bd      	mov	sp, r7
 8003a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a3c:	4770      	bx	lr
 8003a3e:	bf00      	nop
 8003a40:	40023800 	.word	0x40023800

08003a44 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003a44:	b580      	push	{r7, lr}
 8003a46:	b08e      	sub	sp, #56	@ 0x38
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a4c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003a50:	2200      	movs	r2, #0
 8003a52:	601a      	str	r2, [r3, #0]
 8003a54:	605a      	str	r2, [r3, #4]
 8003a56:	609a      	str	r2, [r3, #8]
 8003a58:	60da      	str	r2, [r3, #12]
 8003a5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	4a4b      	ldr	r2, [pc, #300]	@ (8003b90 <HAL_SPI_MspInit+0x14c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d12c      	bne.n	8003ac0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003a66:	2300      	movs	r3, #0
 8003a68:	623b      	str	r3, [r7, #32]
 8003a6a:	4b4a      	ldr	r3, [pc, #296]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003a6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a6e:	4a49      	ldr	r2, [pc, #292]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003a70:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003a74:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a76:	4b47      	ldr	r3, [pc, #284]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003a78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a7a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003a7e:	623b      	str	r3, [r7, #32]
 8003a80:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a82:	2300      	movs	r3, #0
 8003a84:	61fb      	str	r3, [r7, #28]
 8003a86:	4b43      	ldr	r3, [pc, #268]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a8a:	4a42      	ldr	r2, [pc, #264]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003a8c:	f043 0301 	orr.w	r3, r3, #1
 8003a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a92:	4b40      	ldr	r3, [pc, #256]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a96:	f003 0301 	and.w	r3, r3, #1
 8003a9a:	61fb      	str	r3, [r7, #28]
 8003a9c:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003a9e:	23e0      	movs	r3, #224	@ 0xe0
 8003aa0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003aaa:	2303      	movs	r3, #3
 8003aac:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003aae:	2305      	movs	r3, #5
 8003ab0:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4837      	ldr	r0, [pc, #220]	@ (8003b98 <HAL_SPI_MspInit+0x154>)
 8003aba:	f001 f80b 	bl	8004ad4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003abe:	e063      	b.n	8003b88 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	4a35      	ldr	r2, [pc, #212]	@ (8003b9c <HAL_SPI_MspInit+0x158>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d12d      	bne.n	8003b26 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003aca:	2300      	movs	r3, #0
 8003acc:	61bb      	str	r3, [r7, #24]
 8003ace:	4b31      	ldr	r3, [pc, #196]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	4a30      	ldr	r2, [pc, #192]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003ad4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003ad8:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ada:	4b2e      	ldr	r3, [pc, #184]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ade:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003ae2:	61bb      	str	r3, [r7, #24]
 8003ae4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	617b      	str	r3, [r7, #20]
 8003aea:	4b2a      	ldr	r3, [pc, #168]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003aee:	4a29      	ldr	r2, [pc, #164]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003af0:	f043 0302 	orr.w	r3, r3, #2
 8003af4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003af6:	4b27      	ldr	r3, [pc, #156]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	f003 0302 	and.w	r3, r3, #2
 8003afe:	617b      	str	r3, [r7, #20]
 8003b00:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003b02:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003b06:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b10:	2303      	movs	r3, #3
 8003b12:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003b14:	2305      	movs	r3, #5
 8003b16:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b18:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4820      	ldr	r0, [pc, #128]	@ (8003ba0 <HAL_SPI_MspInit+0x15c>)
 8003b20:	f000 ffd8 	bl	8004ad4 <HAL_GPIO_Init>
}
 8003b24:	e030      	b.n	8003b88 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI3)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ba4 <HAL_SPI_MspInit+0x160>)
 8003b2c:	4293      	cmp	r3, r2
 8003b2e:	d12b      	bne.n	8003b88 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
 8003b34:	4b17      	ldr	r3, [pc, #92]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003b36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b38:	4a16      	ldr	r2, [pc, #88]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003b3a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003b3e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b40:	4b14      	ldr	r3, [pc, #80]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003b42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b44:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003b48:	613b      	str	r3, [r7, #16]
 8003b4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	4b10      	ldr	r3, [pc, #64]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003b52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b54:	4a0f      	ldr	r2, [pc, #60]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003b56:	f043 0302 	orr.w	r3, r3, #2
 8003b5a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b5c:	4b0d      	ldr	r3, [pc, #52]	@ (8003b94 <HAL_SPI_MspInit+0x150>)
 8003b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b60:	f003 0302 	and.w	r3, r3, #2
 8003b64:	60fb      	str	r3, [r7, #12]
 8003b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003b68:	2338      	movs	r3, #56	@ 0x38
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b70:	2300      	movs	r3, #0
 8003b72:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b74:	2303      	movs	r3, #3
 8003b76:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003b78:	2306      	movs	r3, #6
 8003b7a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b7c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003b80:	4619      	mov	r1, r3
 8003b82:	4807      	ldr	r0, [pc, #28]	@ (8003ba0 <HAL_SPI_MspInit+0x15c>)
 8003b84:	f000 ffa6 	bl	8004ad4 <HAL_GPIO_Init>
}
 8003b88:	bf00      	nop
 8003b8a:	3738      	adds	r7, #56	@ 0x38
 8003b8c:	46bd      	mov	sp, r7
 8003b8e:	bd80      	pop	{r7, pc}
 8003b90:	40013000 	.word	0x40013000
 8003b94:	40023800 	.word	0x40023800
 8003b98:	40020000 	.word	0x40020000
 8003b9c:	40003800 	.word	0x40003800
 8003ba0:	40020400 	.word	0x40020400
 8003ba4:	40003c00 	.word	0x40003c00

08003ba8 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003ba8:	b580      	push	{r7, lr}
 8003baa:	b08c      	sub	sp, #48	@ 0x30
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb0:	f107 031c 	add.w	r3, r7, #28
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	601a      	str	r2, [r3, #0]
 8003bb8:	605a      	str	r2, [r3, #4]
 8003bba:	609a      	str	r2, [r3, #8]
 8003bbc:	60da      	str	r2, [r3, #12]
 8003bbe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	4a4d      	ldr	r2, [pc, #308]	@ (8003cfc <HAL_UART_MspInit+0x154>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d163      	bne.n	8003c92 <HAL_UART_MspInit+0xea>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	4b4c      	ldr	r3, [pc, #304]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003bd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bd2:	4a4b      	ldr	r2, [pc, #300]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003bd4:	f043 0310 	orr.w	r3, r3, #16
 8003bd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8003bda:	4b49      	ldr	r3, [pc, #292]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003bdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bde:	f003 0310 	and.w	r3, r3, #16
 8003be2:	61bb      	str	r3, [r7, #24]
 8003be4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	617b      	str	r3, [r7, #20]
 8003bea:	4b45      	ldr	r3, [pc, #276]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003bec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bee:	4a44      	ldr	r2, [pc, #272]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003bf0:	f043 0302 	orr.w	r3, r3, #2
 8003bf4:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bf6:	4b42      	ldr	r3, [pc, #264]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003bf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bfa:	f003 0302 	and.w	r3, r3, #2
 8003bfe:	617b      	str	r3, [r7, #20]
 8003c00:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c02:	23c0      	movs	r3, #192	@ 0xc0
 8003c04:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c06:	2302      	movs	r3, #2
 8003c08:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c0e:	2303      	movs	r3, #3
 8003c10:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c12:	2307      	movs	r3, #7
 8003c14:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c16:	f107 031c 	add.w	r3, r7, #28
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4839      	ldr	r0, [pc, #228]	@ (8003d04 <HAL_UART_MspInit+0x15c>)
 8003c1e:	f000 ff59 	bl	8004ad4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003c22:	4b39      	ldr	r3, [pc, #228]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c24:	4a39      	ldr	r2, [pc, #228]	@ (8003d0c <HAL_UART_MspInit+0x164>)
 8003c26:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003c28:	4b37      	ldr	r3, [pc, #220]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c2a:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8003c2e:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003c30:	4b35      	ldr	r3, [pc, #212]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c32:	2200      	movs	r2, #0
 8003c34:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003c36:	4b34      	ldr	r3, [pc, #208]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c38:	2200      	movs	r2, #0
 8003c3a:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003c3c:	4b32      	ldr	r3, [pc, #200]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003c42:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003c44:	4b30      	ldr	r3, [pc, #192]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c46:	2200      	movs	r2, #0
 8003c48:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003c4a:	4b2f      	ldr	r3, [pc, #188]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c4c:	2200      	movs	r2, #0
 8003c4e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8003c50:	4b2d      	ldr	r3, [pc, #180]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c52:	2200      	movs	r2, #0
 8003c54:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8003c56:	4b2c      	ldr	r3, [pc, #176]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c58:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003c5c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003c5e:	4b2a      	ldr	r3, [pc, #168]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c60:	2200      	movs	r2, #0
 8003c62:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003c64:	4828      	ldr	r0, [pc, #160]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c66:	f000 fb33 	bl	80042d0 <HAL_DMA_Init>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d001      	beq.n	8003c74 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8003c70:	f7ff fe46 	bl	8003900 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	4a24      	ldr	r2, [pc, #144]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c78:	63da      	str	r2, [r3, #60]	@ 0x3c
 8003c7a:	4a23      	ldr	r2, [pc, #140]	@ (8003d08 <HAL_UART_MspInit+0x160>)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003c80:	2200      	movs	r2, #0
 8003c82:	2100      	movs	r1, #0
 8003c84:	2025      	movs	r0, #37	@ 0x25
 8003c86:	f000 faec 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003c8a:	2025      	movs	r0, #37	@ 0x25
 8003c8c:	f000 fb05 	bl	800429a <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c90:	e030      	b.n	8003cf4 <HAL_UART_MspInit+0x14c>
  else if(huart->Instance==USART2)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	4a1e      	ldr	r2, [pc, #120]	@ (8003d10 <HAL_UART_MspInit+0x168>)
 8003c98:	4293      	cmp	r3, r2
 8003c9a:	d12b      	bne.n	8003cf4 <HAL_UART_MspInit+0x14c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	613b      	str	r3, [r7, #16]
 8003ca0:	4b17      	ldr	r3, [pc, #92]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003ca2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ca4:	4a16      	ldr	r2, [pc, #88]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003ca6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003caa:	6413      	str	r3, [r2, #64]	@ 0x40
 8003cac:	4b14      	ldr	r3, [pc, #80]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003cae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003cb8:	2300      	movs	r3, #0
 8003cba:	60fb      	str	r3, [r7, #12]
 8003cbc:	4b10      	ldr	r3, [pc, #64]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cc0:	4a0f      	ldr	r2, [pc, #60]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cc8:	4b0d      	ldr	r3, [pc, #52]	@ (8003d00 <HAL_UART_MspInit+0x158>)
 8003cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ccc:	f003 0301 	and.w	r3, r3, #1
 8003cd0:	60fb      	str	r3, [r7, #12]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003cd4:	230c      	movs	r3, #12
 8003cd6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cd8:	2302      	movs	r3, #2
 8003cda:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cdc:	2300      	movs	r3, #0
 8003cde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ce0:	2303      	movs	r3, #3
 8003ce2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ce4:	2307      	movs	r3, #7
 8003ce6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce8:	f107 031c 	add.w	r3, r7, #28
 8003cec:	4619      	mov	r1, r3
 8003cee:	4809      	ldr	r0, [pc, #36]	@ (8003d14 <HAL_UART_MspInit+0x16c>)
 8003cf0:	f000 fef0 	bl	8004ad4 <HAL_GPIO_Init>
}
 8003cf4:	bf00      	nop
 8003cf6:	3730      	adds	r7, #48	@ 0x30
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	40011000 	.word	0x40011000
 8003d00:	40023800 	.word	0x40023800
 8003d04:	40020400 	.word	0x40020400
 8003d08:	20000488 	.word	0x20000488
 8003d0c:	40026440 	.word	0x40026440
 8003d10:	40004400 	.word	0x40004400
 8003d14:	40020000 	.word	0x40020000

08003d18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003d1c:	bf00      	nop
 8003d1e:	e7fd      	b.n	8003d1c <NMI_Handler+0x4>

08003d20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d24:	bf00      	nop
 8003d26:	e7fd      	b.n	8003d24 <HardFault_Handler+0x4>

08003d28 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d2c:	bf00      	nop
 8003d2e:	e7fd      	b.n	8003d2c <MemManage_Handler+0x4>

08003d30 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d30:	b480      	push	{r7}
 8003d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d34:	bf00      	nop
 8003d36:	e7fd      	b.n	8003d34 <BusFault_Handler+0x4>

08003d38 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d3c:	bf00      	nop
 8003d3e:	e7fd      	b.n	8003d3c <UsageFault_Handler+0x4>

08003d40 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003d40:	b480      	push	{r7}
 8003d42:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003d44:	bf00      	nop
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr

08003d4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d4e:	b480      	push	{r7}
 8003d50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d52:	bf00      	nop
 8003d54:	46bd      	mov	sp, r7
 8003d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5a:	4770      	bx	lr

08003d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr

08003d6a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003d6a:	b580      	push	{r7, lr}
 8003d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003d6e:	f000 f959 	bl	8004024 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003d72:	bf00      	nop
 8003d74:	bd80      	pop	{r7, pc}
	...

08003d78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003d7c:	4802      	ldr	r0, [pc, #8]	@ (8003d88 <USART1_IRQHandler+0x10>)
 8003d7e:	f003 fd87 	bl	8007890 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003d82:	bf00      	nop
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	200003f8 	.word	0x200003f8

08003d8c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */
extern DMA_HandleTypeDef hdma_usart1_rx;
  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003d90:	4802      	ldr	r0, [pc, #8]	@ (8003d9c <DMA2_Stream2_IRQHandler+0x10>)
 8003d92:	f000 fc35 	bl	8004600 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	bf00      	nop
 8003d9c:	20000488 	.word	0x20000488

08003da0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003da4:	4802      	ldr	r0, [pc, #8]	@ (8003db0 <OTG_FS_IRQHandler+0x10>)
 8003da6:	f001 f990 	bl	80050ca <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20001e70 	.word	0x20001e70

08003db4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return 1;
 8003db8:	2301      	movs	r3, #1
}
 8003dba:	4618      	mov	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <_kill>:

int _kill(int pid, int sig)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
 8003dcc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003dce:	f00a fbef 	bl	800e5b0 <__errno>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2216      	movs	r2, #22
 8003dd6:	601a      	str	r2, [r3, #0]
  return -1;
 8003dd8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ddc:	4618      	mov	r0, r3
 8003dde:	3708      	adds	r7, #8
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <_exit>:

void _exit (int status)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b082      	sub	sp, #8
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dec:	f04f 31ff 	mov.w	r1, #4294967295
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f7ff ffe7 	bl	8003dc4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003df6:	bf00      	nop
 8003df8:	e7fd      	b.n	8003df6 <_exit+0x12>

08003dfa <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b086      	sub	sp, #24
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e06:	2300      	movs	r3, #0
 8003e08:	617b      	str	r3, [r7, #20]
 8003e0a:	e00a      	b.n	8003e22 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003e0c:	f3af 8000 	nop.w
 8003e10:	4601      	mov	r1, r0
 8003e12:	68bb      	ldr	r3, [r7, #8]
 8003e14:	1c5a      	adds	r2, r3, #1
 8003e16:	60ba      	str	r2, [r7, #8]
 8003e18:	b2ca      	uxtb	r2, r1
 8003e1a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	697a      	ldr	r2, [r7, #20]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	429a      	cmp	r2, r3
 8003e28:	dbf0      	blt.n	8003e0c <_read+0x12>
  }

  return len;
 8003e2a:	687b      	ldr	r3, [r7, #4]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <_close>:
  }
  return len;
}

int _close(int file)
{
 8003e34:	b480      	push	{r7}
 8003e36:	b083      	sub	sp, #12
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e3c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e40:	4618      	mov	r0, r3
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003e5c:	605a      	str	r2, [r3, #4]
  return 0;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	370c      	adds	r7, #12
 8003e64:	46bd      	mov	sp, r7
 8003e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6a:	4770      	bx	lr

08003e6c <_isatty>:

int _isatty(int file)
{
 8003e6c:	b480      	push	{r7}
 8003e6e:	b083      	sub	sp, #12
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e74:	2301      	movs	r3, #1
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	370c      	adds	r7, #12
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr

08003e82 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e82:	b480      	push	{r7}
 8003e84:	b085      	sub	sp, #20
 8003e86:	af00      	add	r7, sp, #0
 8003e88:	60f8      	str	r0, [r7, #12]
 8003e8a:	60b9      	str	r1, [r7, #8]
 8003e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3714      	adds	r7, #20
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b086      	sub	sp, #24
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ea4:	4a14      	ldr	r2, [pc, #80]	@ (8003ef8 <_sbrk+0x5c>)
 8003ea6:	4b15      	ldr	r3, [pc, #84]	@ (8003efc <_sbrk+0x60>)
 8003ea8:	1ad3      	subs	r3, r2, r3
 8003eaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003eac:	697b      	ldr	r3, [r7, #20]
 8003eae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003eb0:	4b13      	ldr	r3, [pc, #76]	@ (8003f00 <_sbrk+0x64>)
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d102      	bne.n	8003ebe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003eb8:	4b11      	ldr	r3, [pc, #68]	@ (8003f00 <_sbrk+0x64>)
 8003eba:	4a12      	ldr	r2, [pc, #72]	@ (8003f04 <_sbrk+0x68>)
 8003ebc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ebe:	4b10      	ldr	r3, [pc, #64]	@ (8003f00 <_sbrk+0x64>)
 8003ec0:	681a      	ldr	r2, [r3, #0]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4413      	add	r3, r2
 8003ec6:	693a      	ldr	r2, [r7, #16]
 8003ec8:	429a      	cmp	r2, r3
 8003eca:	d207      	bcs.n	8003edc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ecc:	f00a fb70 	bl	800e5b0 <__errno>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	220c      	movs	r2, #12
 8003ed4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8003eda:	e009      	b.n	8003ef0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003edc:	4b08      	ldr	r3, [pc, #32]	@ (8003f00 <_sbrk+0x64>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ee2:	4b07      	ldr	r3, [pc, #28]	@ (8003f00 <_sbrk+0x64>)
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4413      	add	r3, r2
 8003eea:	4a05      	ldr	r2, [pc, #20]	@ (8003f00 <_sbrk+0x64>)
 8003eec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003eee:	68fb      	ldr	r3, [r7, #12]
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3718      	adds	r7, #24
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	20020000 	.word	0x20020000
 8003efc:	00000400 	.word	0x00000400
 8003f00:	20000988 	.word	0x20000988
 8003f04:	200026c0 	.word	0x200026c0

08003f08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f0c:	4b06      	ldr	r3, [pc, #24]	@ (8003f28 <SystemInit+0x20>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003f12:	4a05      	ldr	r2, [pc, #20]	@ (8003f28 <SystemInit+0x20>)
 8003f14:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003f18:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f1c:	bf00      	nop
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	e000ed00 	.word	0xe000ed00

08003f2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f2c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003f64 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003f30:	f7ff ffea 	bl	8003f08 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003f34:	480c      	ldr	r0, [pc, #48]	@ (8003f68 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003f36:	490d      	ldr	r1, [pc, #52]	@ (8003f6c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003f38:	4a0d      	ldr	r2, [pc, #52]	@ (8003f70 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003f3a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f3c:	e002      	b.n	8003f44 <LoopCopyDataInit>

08003f3e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f3e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f40:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f42:	3304      	adds	r3, #4

08003f44 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f44:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f46:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f48:	d3f9      	bcc.n	8003f3e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f4a:	4a0a      	ldr	r2, [pc, #40]	@ (8003f74 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003f4c:	4c0a      	ldr	r4, [pc, #40]	@ (8003f78 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003f4e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f50:	e001      	b.n	8003f56 <LoopFillZerobss>

08003f52 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f52:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f54:	3204      	adds	r2, #4

08003f56 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f56:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f58:	d3fb      	bcc.n	8003f52 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f5a:	f00a fb2f 	bl	800e5bc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003f5e:	f7fe fff7 	bl	8002f50 <main>
  bx  lr    
 8003f62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003f64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003f68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f6c:	200002c4 	.word	0x200002c4
  ldr r2, =_sidata
 8003f70:	08012000 	.word	0x08012000
  ldr r2, =_sbss
 8003f74:	200002c8 	.word	0x200002c8
  ldr r4, =_ebss
 8003f78:	200026c0 	.word	0x200026c0

08003f7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003f7c:	e7fe      	b.n	8003f7c <ADC_IRQHandler>
	...

08003f80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003f84:	4b0e      	ldr	r3, [pc, #56]	@ (8003fc0 <HAL_Init+0x40>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a0d      	ldr	r2, [pc, #52]	@ (8003fc0 <HAL_Init+0x40>)
 8003f8a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003f8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003f90:	4b0b      	ldr	r3, [pc, #44]	@ (8003fc0 <HAL_Init+0x40>)
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0a      	ldr	r2, [pc, #40]	@ (8003fc0 <HAL_Init+0x40>)
 8003f96:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003f9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003f9c:	4b08      	ldr	r3, [pc, #32]	@ (8003fc0 <HAL_Init+0x40>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	4a07      	ldr	r2, [pc, #28]	@ (8003fc0 <HAL_Init+0x40>)
 8003fa2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003fa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fa8:	2003      	movs	r0, #3
 8003faa:	f000 f94f 	bl	800424c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fae:	200f      	movs	r0, #15
 8003fb0:	f000 f808 	bl	8003fc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fb4:	f7ff fd1e 	bl	80039f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fb8:	2300      	movs	r3, #0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	bd80      	pop	{r7, pc}
 8003fbe:	bf00      	nop
 8003fc0:	40023c00 	.word	0x40023c00

08003fc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003fcc:	4b12      	ldr	r3, [pc, #72]	@ (8004018 <HAL_InitTick+0x54>)
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	4b12      	ldr	r3, [pc, #72]	@ (800401c <HAL_InitTick+0x58>)
 8003fd2:	781b      	ldrb	r3, [r3, #0]
 8003fd4:	4619      	mov	r1, r3
 8003fd6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003fda:	fbb3 f3f1 	udiv	r3, r3, r1
 8003fde:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f000 f967 	bl	80042b6 <HAL_SYSTICK_Config>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003fee:	2301      	movs	r3, #1
 8003ff0:	e00e      	b.n	8004010 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	2b0f      	cmp	r3, #15
 8003ff6:	d80a      	bhi.n	800400e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ff8:	2200      	movs	r2, #0
 8003ffa:	6879      	ldr	r1, [r7, #4]
 8003ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8004000:	f000 f92f 	bl	8004262 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004004:	4a06      	ldr	r2, [pc, #24]	@ (8004020 <HAL_InitTick+0x5c>)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800400a:	2300      	movs	r3, #0
 800400c:	e000      	b.n	8004010 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
}
 8004010:	4618      	mov	r0, r3
 8004012:	3708      	adds	r7, #8
 8004014:	46bd      	mov	sp, r7
 8004016:	bd80      	pop	{r7, pc}
 8004018:	20000000 	.word	0x20000000
 800401c:	20000008 	.word	0x20000008
 8004020:	20000004 	.word	0x20000004

08004024 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004024:	b480      	push	{r7}
 8004026:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004028:	4b06      	ldr	r3, [pc, #24]	@ (8004044 <HAL_IncTick+0x20>)
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	461a      	mov	r2, r3
 800402e:	4b06      	ldr	r3, [pc, #24]	@ (8004048 <HAL_IncTick+0x24>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	4413      	add	r3, r2
 8004034:	4a04      	ldr	r2, [pc, #16]	@ (8004048 <HAL_IncTick+0x24>)
 8004036:	6013      	str	r3, [r2, #0]
}
 8004038:	bf00      	nop
 800403a:	46bd      	mov	sp, r7
 800403c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	20000008 	.word	0x20000008
 8004048:	2000098c 	.word	0x2000098c

0800404c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800404c:	b480      	push	{r7}
 800404e:	af00      	add	r7, sp, #0
  return uwTick;
 8004050:	4b03      	ldr	r3, [pc, #12]	@ (8004060 <HAL_GetTick+0x14>)
 8004052:	681b      	ldr	r3, [r3, #0]
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	2000098c 	.word	0x2000098c

08004064 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800406c:	f7ff ffee 	bl	800404c <HAL_GetTick>
 8004070:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f1b3 3fff 	cmp.w	r3, #4294967295
 800407c:	d005      	beq.n	800408a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800407e:	4b0a      	ldr	r3, [pc, #40]	@ (80040a8 <HAL_Delay+0x44>)
 8004080:	781b      	ldrb	r3, [r3, #0]
 8004082:	461a      	mov	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800408a:	bf00      	nop
 800408c:	f7ff ffde 	bl	800404c <HAL_GetTick>
 8004090:	4602      	mov	r2, r0
 8004092:	68bb      	ldr	r3, [r7, #8]
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	68fa      	ldr	r2, [r7, #12]
 8004098:	429a      	cmp	r2, r3
 800409a:	d8f7      	bhi.n	800408c <HAL_Delay+0x28>
  {
  }
}
 800409c:	bf00      	nop
 800409e:	bf00      	nop
 80040a0:	3710      	adds	r7, #16
 80040a2:	46bd      	mov	sp, r7
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	20000008 	.word	0x20000008

080040ac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80040ac:	b480      	push	{r7}
 80040ae:	b085      	sub	sp, #20
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040bc:	4b0c      	ldr	r3, [pc, #48]	@ (80040f0 <__NVIC_SetPriorityGrouping+0x44>)
 80040be:	68db      	ldr	r3, [r3, #12]
 80040c0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040c2:	68ba      	ldr	r2, [r7, #8]
 80040c4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80040c8:	4013      	ands	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040d4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80040d8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80040dc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80040de:	4a04      	ldr	r2, [pc, #16]	@ (80040f0 <__NVIC_SetPriorityGrouping+0x44>)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	60d3      	str	r3, [r2, #12]
}
 80040e4:	bf00      	nop
 80040e6:	3714      	adds	r7, #20
 80040e8:	46bd      	mov	sp, r7
 80040ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ee:	4770      	bx	lr
 80040f0:	e000ed00 	.word	0xe000ed00

080040f4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80040f8:	4b04      	ldr	r3, [pc, #16]	@ (800410c <__NVIC_GetPriorityGrouping+0x18>)
 80040fa:	68db      	ldr	r3, [r3, #12]
 80040fc:	0a1b      	lsrs	r3, r3, #8
 80040fe:	f003 0307 	and.w	r3, r3, #7
}
 8004102:	4618      	mov	r0, r3
 8004104:	46bd      	mov	sp, r7
 8004106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410a:	4770      	bx	lr
 800410c:	e000ed00 	.word	0xe000ed00

08004110 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004110:	b480      	push	{r7}
 8004112:	b083      	sub	sp, #12
 8004114:	af00      	add	r7, sp, #0
 8004116:	4603      	mov	r3, r0
 8004118:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800411a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800411e:	2b00      	cmp	r3, #0
 8004120:	db0b      	blt.n	800413a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004122:	79fb      	ldrb	r3, [r7, #7]
 8004124:	f003 021f 	and.w	r2, r3, #31
 8004128:	4907      	ldr	r1, [pc, #28]	@ (8004148 <__NVIC_EnableIRQ+0x38>)
 800412a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800412e:	095b      	lsrs	r3, r3, #5
 8004130:	2001      	movs	r0, #1
 8004132:	fa00 f202 	lsl.w	r2, r0, r2
 8004136:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800413a:	bf00      	nop
 800413c:	370c      	adds	r7, #12
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	e000e100 	.word	0xe000e100

0800414c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800414c:	b480      	push	{r7}
 800414e:	b083      	sub	sp, #12
 8004150:	af00      	add	r7, sp, #0
 8004152:	4603      	mov	r3, r0
 8004154:	6039      	str	r1, [r7, #0]
 8004156:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004158:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800415c:	2b00      	cmp	r3, #0
 800415e:	db0a      	blt.n	8004176 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	b2da      	uxtb	r2, r3
 8004164:	490c      	ldr	r1, [pc, #48]	@ (8004198 <__NVIC_SetPriority+0x4c>)
 8004166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416a:	0112      	lsls	r2, r2, #4
 800416c:	b2d2      	uxtb	r2, r2
 800416e:	440b      	add	r3, r1
 8004170:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004174:	e00a      	b.n	800418c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004176:	683b      	ldr	r3, [r7, #0]
 8004178:	b2da      	uxtb	r2, r3
 800417a:	4908      	ldr	r1, [pc, #32]	@ (800419c <__NVIC_SetPriority+0x50>)
 800417c:	79fb      	ldrb	r3, [r7, #7]
 800417e:	f003 030f 	and.w	r3, r3, #15
 8004182:	3b04      	subs	r3, #4
 8004184:	0112      	lsls	r2, r2, #4
 8004186:	b2d2      	uxtb	r2, r2
 8004188:	440b      	add	r3, r1
 800418a:	761a      	strb	r2, [r3, #24]
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr
 8004198:	e000e100 	.word	0xe000e100
 800419c:	e000ed00 	.word	0xe000ed00

080041a0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80041a0:	b480      	push	{r7}
 80041a2:	b089      	sub	sp, #36	@ 0x24
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	60f8      	str	r0, [r7, #12]
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f003 0307 	and.w	r3, r3, #7
 80041b2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041b4:	69fb      	ldr	r3, [r7, #28]
 80041b6:	f1c3 0307 	rsb	r3, r3, #7
 80041ba:	2b04      	cmp	r3, #4
 80041bc:	bf28      	it	cs
 80041be:	2304      	movcs	r3, #4
 80041c0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041c2:	69fb      	ldr	r3, [r7, #28]
 80041c4:	3304      	adds	r3, #4
 80041c6:	2b06      	cmp	r3, #6
 80041c8:	d902      	bls.n	80041d0 <NVIC_EncodePriority+0x30>
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	3b03      	subs	r3, #3
 80041ce:	e000      	b.n	80041d2 <NVIC_EncodePriority+0x32>
 80041d0:	2300      	movs	r3, #0
 80041d2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041d4:	f04f 32ff 	mov.w	r2, #4294967295
 80041d8:	69bb      	ldr	r3, [r7, #24]
 80041da:	fa02 f303 	lsl.w	r3, r2, r3
 80041de:	43da      	mvns	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	401a      	ands	r2, r3
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80041e8:	f04f 31ff 	mov.w	r1, #4294967295
 80041ec:	697b      	ldr	r3, [r7, #20]
 80041ee:	fa01 f303 	lsl.w	r3, r1, r3
 80041f2:	43d9      	mvns	r1, r3
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f8:	4313      	orrs	r3, r2
         );
}
 80041fa:	4618      	mov	r0, r3
 80041fc:	3724      	adds	r7, #36	@ 0x24
 80041fe:	46bd      	mov	sp, r7
 8004200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004204:	4770      	bx	lr
	...

08004208 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	3b01      	subs	r3, #1
 8004214:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004218:	d301      	bcc.n	800421e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800421a:	2301      	movs	r3, #1
 800421c:	e00f      	b.n	800423e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800421e:	4a0a      	ldr	r2, [pc, #40]	@ (8004248 <SysTick_Config+0x40>)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	3b01      	subs	r3, #1
 8004224:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004226:	210f      	movs	r1, #15
 8004228:	f04f 30ff 	mov.w	r0, #4294967295
 800422c:	f7ff ff8e 	bl	800414c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004230:	4b05      	ldr	r3, [pc, #20]	@ (8004248 <SysTick_Config+0x40>)
 8004232:	2200      	movs	r2, #0
 8004234:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004236:	4b04      	ldr	r3, [pc, #16]	@ (8004248 <SysTick_Config+0x40>)
 8004238:	2207      	movs	r2, #7
 800423a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800423c:	2300      	movs	r3, #0
}
 800423e:	4618      	mov	r0, r3
 8004240:	3708      	adds	r7, #8
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
 8004246:	bf00      	nop
 8004248:	e000e010 	.word	0xe000e010

0800424c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b082      	sub	sp, #8
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004254:	6878      	ldr	r0, [r7, #4]
 8004256:	f7ff ff29 	bl	80040ac <__NVIC_SetPriorityGrouping>
}
 800425a:	bf00      	nop
 800425c:	3708      	adds	r7, #8
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004262:	b580      	push	{r7, lr}
 8004264:	b086      	sub	sp, #24
 8004266:	af00      	add	r7, sp, #0
 8004268:	4603      	mov	r3, r0
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
 800426e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004270:	2300      	movs	r3, #0
 8004272:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004274:	f7ff ff3e 	bl	80040f4 <__NVIC_GetPriorityGrouping>
 8004278:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800427a:	687a      	ldr	r2, [r7, #4]
 800427c:	68b9      	ldr	r1, [r7, #8]
 800427e:	6978      	ldr	r0, [r7, #20]
 8004280:	f7ff ff8e 	bl	80041a0 <NVIC_EncodePriority>
 8004284:	4602      	mov	r2, r0
 8004286:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800428a:	4611      	mov	r1, r2
 800428c:	4618      	mov	r0, r3
 800428e:	f7ff ff5d 	bl	800414c <__NVIC_SetPriority>
}
 8004292:	bf00      	nop
 8004294:	3718      	adds	r7, #24
 8004296:	46bd      	mov	sp, r7
 8004298:	bd80      	pop	{r7, pc}

0800429a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800429a:	b580      	push	{r7, lr}
 800429c:	b082      	sub	sp, #8
 800429e:	af00      	add	r7, sp, #0
 80042a0:	4603      	mov	r3, r0
 80042a2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7ff ff31 	bl	8004110 <__NVIC_EnableIRQ>
}
 80042ae:	bf00      	nop
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042b6:	b580      	push	{r7, lr}
 80042b8:	b082      	sub	sp, #8
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ffa2 	bl	8004208 <SysTick_Config>
 80042c4:	4603      	mov	r3, r0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80042d8:	2300      	movs	r3, #0
 80042da:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80042dc:	f7ff feb6 	bl	800404c <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d101      	bne.n	80042ec <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80042e8:	2301      	movs	r3, #1
 80042ea:	e099      	b.n	8004420 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2202      	movs	r2, #2
 80042f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f022 0201 	bic.w	r2, r2, #1
 800430a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800430c:	e00f      	b.n	800432e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800430e:	f7ff fe9d 	bl	800404c <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	2b05      	cmp	r3, #5
 800431a:	d908      	bls.n	800432e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2220      	movs	r2, #32
 8004320:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2203      	movs	r2, #3
 8004326:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 800432a:	2303      	movs	r3, #3
 800432c:	e078      	b.n	8004420 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	f003 0301 	and.w	r3, r3, #1
 8004338:	2b00      	cmp	r3, #0
 800433a:	d1e8      	bne.n	800430e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004344:	697a      	ldr	r2, [r7, #20]
 8004346:	4b38      	ldr	r3, [pc, #224]	@ (8004428 <HAL_DMA_Init+0x158>)
 8004348:	4013      	ands	r3, r2
 800434a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	689b      	ldr	r3, [r3, #8]
 8004354:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800435a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004366:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	699b      	ldr	r3, [r3, #24]
 800436c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004372:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6a1b      	ldr	r3, [r3, #32]
 8004378:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	4313      	orrs	r3, r2
 800437e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004384:	2b04      	cmp	r3, #4
 8004386:	d107      	bne.n	8004398 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004390:	4313      	orrs	r3, r2
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	697a      	ldr	r2, [r7, #20]
 800439e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	f023 0307 	bic.w	r3, r3, #7
 80043ae:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043be:	2b04      	cmp	r3, #4
 80043c0:	d117      	bne.n	80043f2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	4313      	orrs	r3, r2
 80043ca:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d00e      	beq.n	80043f2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80043d4:	6878      	ldr	r0, [r7, #4]
 80043d6:	f000 fb01 	bl	80049dc <DMA_CheckFifoParam>
 80043da:	4603      	mov	r3, r0
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d008      	beq.n	80043f2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2240      	movs	r2, #64	@ 0x40
 80043e4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2201      	movs	r2, #1
 80043ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80043ee:	2301      	movs	r3, #1
 80043f0:	e016      	b.n	8004420 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	697a      	ldr	r2, [r7, #20]
 80043f8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f000 fab8 	bl	8004970 <DMA_CalcBaseAndBitshift>
 8004400:	4603      	mov	r3, r0
 8004402:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004408:	223f      	movs	r2, #63	@ 0x3f
 800440a:	409a      	lsls	r2, r3
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	2201      	movs	r2, #1
 800441a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800441e:	2300      	movs	r3, #0
}
 8004420:	4618      	mov	r0, r3
 8004422:	3718      	adds	r7, #24
 8004424:	46bd      	mov	sp, r7
 8004426:	bd80      	pop	{r7, pc}
 8004428:	f010803f 	.word	0xf010803f

0800442c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800442c:	b580      	push	{r7, lr}
 800442e:	b086      	sub	sp, #24
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
 8004438:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800443a:	2300      	movs	r3, #0
 800443c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004442:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800444a:	2b01      	cmp	r3, #1
 800444c:	d101      	bne.n	8004452 <HAL_DMA_Start_IT+0x26>
 800444e:	2302      	movs	r3, #2
 8004450:	e040      	b.n	80044d4 <HAL_DMA_Start_IT+0xa8>
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2201      	movs	r2, #1
 8004456:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004460:	b2db      	uxtb	r3, r3
 8004462:	2b01      	cmp	r3, #1
 8004464:	d12f      	bne.n	80044c6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2202      	movs	r2, #2
 800446a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2200      	movs	r2, #0
 8004472:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	687a      	ldr	r2, [r7, #4]
 8004478:	68b9      	ldr	r1, [r7, #8]
 800447a:	68f8      	ldr	r0, [r7, #12]
 800447c:	f000 fa4a 	bl	8004914 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004484:	223f      	movs	r2, #63	@ 0x3f
 8004486:	409a      	lsls	r2, r3
 8004488:	693b      	ldr	r3, [r7, #16]
 800448a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	681a      	ldr	r2, [r3, #0]
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	f042 0216 	orr.w	r2, r2, #22
 800449a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d007      	beq.n	80044b4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	681a      	ldr	r2, [r3, #0]
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0208 	orr.w	r2, r2, #8
 80044b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f042 0201 	orr.w	r2, r2, #1
 80044c2:	601a      	str	r2, [r3, #0]
 80044c4:	e005      	b.n	80044d2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2200      	movs	r2, #0
 80044ca:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80044ce:	2302      	movs	r3, #2
 80044d0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80044d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b084      	sub	sp, #16
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044e8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044ea:	f7ff fdaf 	bl	800404c <HAL_GetTick>
 80044ee:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044f6:	b2db      	uxtb	r3, r3
 80044f8:	2b02      	cmp	r3, #2
 80044fa:	d008      	beq.n	800450e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2280      	movs	r2, #128	@ 0x80
 8004500:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2200      	movs	r2, #0
 8004506:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e052      	b.n	80045b4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f022 0216 	bic.w	r2, r2, #22
 800451c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	695a      	ldr	r2, [r3, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800452c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004532:	2b00      	cmp	r3, #0
 8004534:	d103      	bne.n	800453e <HAL_DMA_Abort+0x62>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800453a:	2b00      	cmp	r3, #0
 800453c:	d007      	beq.n	800454e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	681a      	ldr	r2, [r3, #0]
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f022 0208 	bic.w	r2, r2, #8
 800454c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681a      	ldr	r2, [r3, #0]
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f022 0201 	bic.w	r2, r2, #1
 800455c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800455e:	e013      	b.n	8004588 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004560:	f7ff fd74 	bl	800404c <HAL_GetTick>
 8004564:	4602      	mov	r2, r0
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	1ad3      	subs	r3, r2, r3
 800456a:	2b05      	cmp	r3, #5
 800456c:	d90c      	bls.n	8004588 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2220      	movs	r2, #32
 8004572:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	2203      	movs	r2, #3
 8004578:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2200      	movs	r2, #0
 8004580:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004584:	2303      	movs	r3, #3
 8004586:	e015      	b.n	80045b4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0301 	and.w	r3, r3, #1
 8004592:	2b00      	cmp	r3, #0
 8004594:	d1e4      	bne.n	8004560 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800459a:	223f      	movs	r2, #63	@ 0x3f
 800459c:	409a      	lsls	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2201      	movs	r2, #1
 80045a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2200      	movs	r2, #0
 80045ae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80045b2:	2300      	movs	r3, #0
}
 80045b4:	4618      	mov	r0, r3
 80045b6:	3710      	adds	r7, #16
 80045b8:	46bd      	mov	sp, r7
 80045ba:	bd80      	pop	{r7, pc}

080045bc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045bc:	b480      	push	{r7}
 80045be:	b083      	sub	sp, #12
 80045c0:	af00      	add	r7, sp, #0
 80045c2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b02      	cmp	r3, #2
 80045ce:	d004      	beq.n	80045da <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2280      	movs	r2, #128	@ 0x80
 80045d4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045d6:	2301      	movs	r3, #1
 80045d8:	e00c      	b.n	80045f4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2205      	movs	r2, #5
 80045de:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	681a      	ldr	r2, [r3, #0]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	f022 0201 	bic.w	r2, r2, #1
 80045f0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045f2:	2300      	movs	r3, #0
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	370c      	adds	r7, #12
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800460c:	4b8e      	ldr	r3, [pc, #568]	@ (8004848 <HAL_DMA_IRQHandler+0x248>)
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4a8e      	ldr	r2, [pc, #568]	@ (800484c <HAL_DMA_IRQHandler+0x24c>)
 8004612:	fba2 2303 	umull	r2, r3, r2, r3
 8004616:	0a9b      	lsrs	r3, r3, #10
 8004618:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800461e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800462a:	2208      	movs	r2, #8
 800462c:	409a      	lsls	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d01a      	beq.n	800466c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0304 	and.w	r3, r3, #4
 8004640:	2b00      	cmp	r3, #0
 8004642:	d013      	beq.n	800466c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	681a      	ldr	r2, [r3, #0]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0204 	bic.w	r2, r2, #4
 8004652:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004658:	2208      	movs	r2, #8
 800465a:	409a      	lsls	r2, r3
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004664:	f043 0201 	orr.w	r2, r3, #1
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004670:	2201      	movs	r2, #1
 8004672:	409a      	lsls	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	4013      	ands	r3, r2
 8004678:	2b00      	cmp	r3, #0
 800467a:	d012      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004686:	2b00      	cmp	r3, #0
 8004688:	d00b      	beq.n	80046a2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800468e:	2201      	movs	r2, #1
 8004690:	409a      	lsls	r2, r3
 8004692:	693b      	ldr	r3, [r7, #16]
 8004694:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800469a:	f043 0202 	orr.w	r2, r3, #2
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046a6:	2204      	movs	r2, #4
 80046a8:	409a      	lsls	r2, r3
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4013      	ands	r3, r2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d012      	beq.n	80046d8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f003 0302 	and.w	r3, r3, #2
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d00b      	beq.n	80046d8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046c4:	2204      	movs	r2, #4
 80046c6:	409a      	lsls	r2, r3
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046d0:	f043 0204 	orr.w	r2, r3, #4
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046dc:	2210      	movs	r2, #16
 80046de:	409a      	lsls	r2, r3
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	4013      	ands	r3, r2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d043      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 0308 	and.w	r3, r3, #8
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d03c      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80046fa:	2210      	movs	r2, #16
 80046fc:	409a      	lsls	r2, r3
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800470c:	2b00      	cmp	r3, #0
 800470e:	d018      	beq.n	8004742 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800471a:	2b00      	cmp	r3, #0
 800471c:	d108      	bne.n	8004730 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d024      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	4798      	blx	r3
 800472e:	e01f      	b.n	8004770 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004734:	2b00      	cmp	r3, #0
 8004736:	d01b      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	4798      	blx	r3
 8004740:	e016      	b.n	8004770 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800474c:	2b00      	cmp	r3, #0
 800474e:	d107      	bne.n	8004760 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	681a      	ldr	r2, [r3, #0]
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f022 0208 	bic.w	r2, r2, #8
 800475e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004764:	2b00      	cmp	r3, #0
 8004766:	d003      	beq.n	8004770 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004774:	2220      	movs	r2, #32
 8004776:	409a      	lsls	r2, r3
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4013      	ands	r3, r2
 800477c:	2b00      	cmp	r3, #0
 800477e:	f000 808f 	beq.w	80048a0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	f003 0310 	and.w	r3, r3, #16
 800478c:	2b00      	cmp	r3, #0
 800478e:	f000 8087 	beq.w	80048a0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004796:	2220      	movs	r2, #32
 8004798:	409a      	lsls	r2, r3
 800479a:	693b      	ldr	r3, [r7, #16]
 800479c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80047a4:	b2db      	uxtb	r3, r3
 80047a6:	2b05      	cmp	r3, #5
 80047a8:	d136      	bne.n	8004818 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0216 	bic.w	r2, r2, #22
 80047b8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	695a      	ldr	r2, [r3, #20]
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80047c8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d103      	bne.n	80047da <HAL_DMA_IRQHandler+0x1da>
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d007      	beq.n	80047ea <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f022 0208 	bic.w	r2, r2, #8
 80047e8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80047ee:	223f      	movs	r2, #63	@ 0x3f
 80047f0:	409a      	lsls	r2, r3
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	2201      	movs	r2, #1
 80047fa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800480a:	2b00      	cmp	r3, #0
 800480c:	d07e      	beq.n	800490c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004812:	6878      	ldr	r0, [r7, #4]
 8004814:	4798      	blx	r3
        }
        return;
 8004816:	e079      	b.n	800490c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004822:	2b00      	cmp	r3, #0
 8004824:	d01d      	beq.n	8004862 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d10d      	bne.n	8004850 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004838:	2b00      	cmp	r3, #0
 800483a:	d031      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004840:	6878      	ldr	r0, [r7, #4]
 8004842:	4798      	blx	r3
 8004844:	e02c      	b.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
 8004846:	bf00      	nop
 8004848:	20000000 	.word	0x20000000
 800484c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004854:	2b00      	cmp	r3, #0
 8004856:	d023      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800485c:	6878      	ldr	r0, [r7, #4]
 800485e:	4798      	blx	r3
 8004860:	e01e      	b.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10f      	bne.n	8004890 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	681a      	ldr	r2, [r3, #0]
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	f022 0210 	bic.w	r2, r2, #16
 800487e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2201      	movs	r2, #1
 8004884:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2200      	movs	r2, #0
 800488c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004894:	2b00      	cmp	r3, #0
 8004896:	d003      	beq.n	80048a0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d032      	beq.n	800490e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048ac:	f003 0301 	and.w	r3, r3, #1
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d022      	beq.n	80048fa <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2205      	movs	r2, #5
 80048b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f022 0201 	bic.w	r2, r2, #1
 80048ca:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80048cc:	68bb      	ldr	r3, [r7, #8]
 80048ce:	3301      	adds	r3, #1
 80048d0:	60bb      	str	r3, [r7, #8]
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	429a      	cmp	r2, r3
 80048d6:	d307      	bcc.n	80048e8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f003 0301 	and.w	r3, r3, #1
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d1f2      	bne.n	80048cc <HAL_DMA_IRQHandler+0x2cc>
 80048e6:	e000      	b.n	80048ea <HAL_DMA_IRQHandler+0x2ea>
          break;
 80048e8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2201      	movs	r2, #1
 80048ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d005      	beq.n	800490e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	4798      	blx	r3
 800490a:	e000      	b.n	800490e <HAL_DMA_IRQHandler+0x30e>
        return;
 800490c:	bf00      	nop
    }
  }
}
 800490e:	3718      	adds	r7, #24
 8004910:	46bd      	mov	sp, r7
 8004912:	bd80      	pop	{r7, pc}

08004914 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004914:	b480      	push	{r7}
 8004916:	b085      	sub	sp, #20
 8004918:	af00      	add	r7, sp, #0
 800491a:	60f8      	str	r0, [r7, #12]
 800491c:	60b9      	str	r1, [r7, #8]
 800491e:	607a      	str	r2, [r7, #4]
 8004920:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004930:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	689b      	ldr	r3, [r3, #8]
 800493e:	2b40      	cmp	r3, #64	@ 0x40
 8004940:	d108      	bne.n	8004954 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68ba      	ldr	r2, [r7, #8]
 8004950:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004952:	e007      	b.n	8004964 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68ba      	ldr	r2, [r7, #8]
 800495a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	687a      	ldr	r2, [r7, #4]
 8004962:	60da      	str	r2, [r3, #12]
}
 8004964:	bf00      	nop
 8004966:	3714      	adds	r7, #20
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr

08004970 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	b2db      	uxtb	r3, r3
 800497e:	3b10      	subs	r3, #16
 8004980:	4a14      	ldr	r2, [pc, #80]	@ (80049d4 <DMA_CalcBaseAndBitshift+0x64>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	091b      	lsrs	r3, r3, #4
 8004988:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800498a:	4a13      	ldr	r2, [pc, #76]	@ (80049d8 <DMA_CalcBaseAndBitshift+0x68>)
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	461a      	mov	r2, r3
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2b03      	cmp	r3, #3
 800499c:	d909      	bls.n	80049b2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049a6:	f023 0303 	bic.w	r3, r3, #3
 80049aa:	1d1a      	adds	r2, r3, #4
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	659a      	str	r2, [r3, #88]	@ 0x58
 80049b0:	e007      	b.n	80049c2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 80049ba:	f023 0303 	bic.w	r3, r3, #3
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80049c6:	4618      	mov	r0, r3
 80049c8:	3714      	adds	r7, #20
 80049ca:	46bd      	mov	sp, r7
 80049cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d0:	4770      	bx	lr
 80049d2:	bf00      	nop
 80049d4:	aaaaaaab 	.word	0xaaaaaaab
 80049d8:	08011b74 	.word	0x08011b74

080049dc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80049dc:	b480      	push	{r7}
 80049de:	b085      	sub	sp, #20
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80049e4:	2300      	movs	r3, #0
 80049e6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049ec:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d11f      	bne.n	8004a36 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80049f6:	68bb      	ldr	r3, [r7, #8]
 80049f8:	2b03      	cmp	r3, #3
 80049fa:	d856      	bhi.n	8004aaa <DMA_CheckFifoParam+0xce>
 80049fc:	a201      	add	r2, pc, #4	@ (adr r2, 8004a04 <DMA_CheckFifoParam+0x28>)
 80049fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a02:	bf00      	nop
 8004a04:	08004a15 	.word	0x08004a15
 8004a08:	08004a27 	.word	0x08004a27
 8004a0c:	08004a15 	.word	0x08004a15
 8004a10:	08004aab 	.word	0x08004aab
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a18:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d046      	beq.n	8004aae <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a24:	e043      	b.n	8004aae <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a2a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a2e:	d140      	bne.n	8004ab2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004a30:	2301      	movs	r3, #1
 8004a32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a34:	e03d      	b.n	8004ab2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	699b      	ldr	r3, [r3, #24]
 8004a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004a3e:	d121      	bne.n	8004a84 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004a40:	68bb      	ldr	r3, [r7, #8]
 8004a42:	2b03      	cmp	r3, #3
 8004a44:	d837      	bhi.n	8004ab6 <DMA_CheckFifoParam+0xda>
 8004a46:	a201      	add	r2, pc, #4	@ (adr r2, 8004a4c <DMA_CheckFifoParam+0x70>)
 8004a48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4c:	08004a5d 	.word	0x08004a5d
 8004a50:	08004a63 	.word	0x08004a63
 8004a54:	08004a5d 	.word	0x08004a5d
 8004a58:	08004a75 	.word	0x08004a75
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	e030      	b.n	8004ac4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a66:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d025      	beq.n	8004aba <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004a6e:	2301      	movs	r3, #1
 8004a70:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004a72:	e022      	b.n	8004aba <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a78:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004a7c:	d11f      	bne.n	8004abe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004a7e:	2301      	movs	r3, #1
 8004a80:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004a82:	e01c      	b.n	8004abe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d903      	bls.n	8004a92 <DMA_CheckFifoParam+0xb6>
 8004a8a:	68bb      	ldr	r3, [r7, #8]
 8004a8c:	2b03      	cmp	r3, #3
 8004a8e:	d003      	beq.n	8004a98 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004a90:	e018      	b.n	8004ac4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	73fb      	strb	r3, [r7, #15]
      break;
 8004a96:	e015      	b.n	8004ac4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a9c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d00e      	beq.n	8004ac2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004aa4:	2301      	movs	r3, #1
 8004aa6:	73fb      	strb	r3, [r7, #15]
      break;
 8004aa8:	e00b      	b.n	8004ac2 <DMA_CheckFifoParam+0xe6>
      break;
 8004aaa:	bf00      	nop
 8004aac:	e00a      	b.n	8004ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8004aae:	bf00      	nop
 8004ab0:	e008      	b.n	8004ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ab2:	bf00      	nop
 8004ab4:	e006      	b.n	8004ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ab6:	bf00      	nop
 8004ab8:	e004      	b.n	8004ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8004aba:	bf00      	nop
 8004abc:	e002      	b.n	8004ac4 <DMA_CheckFifoParam+0xe8>
      break;   
 8004abe:	bf00      	nop
 8004ac0:	e000      	b.n	8004ac4 <DMA_CheckFifoParam+0xe8>
      break;
 8004ac2:	bf00      	nop
    }
  } 
  
  return status; 
 8004ac4:	7bfb      	ldrb	r3, [r7, #15]
}
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	3714      	adds	r7, #20
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop

08004ad4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad4:	b480      	push	{r7}
 8004ad6:	b089      	sub	sp, #36	@ 0x24
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
 8004adc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ade:	2300      	movs	r3, #0
 8004ae0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aea:	2300      	movs	r3, #0
 8004aec:	61fb      	str	r3, [r7, #28]
 8004aee:	e159      	b.n	8004da4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004af0:	2201      	movs	r2, #1
 8004af2:	69fb      	ldr	r3, [r7, #28]
 8004af4:	fa02 f303 	lsl.w	r3, r2, r3
 8004af8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	4013      	ands	r3, r2
 8004b02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	697b      	ldr	r3, [r7, #20]
 8004b08:	429a      	cmp	r2, r3
 8004b0a:	f040 8148 	bne.w	8004d9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	f003 0303 	and.w	r3, r3, #3
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d005      	beq.n	8004b26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b22:	2b02      	cmp	r3, #2
 8004b24:	d130      	bne.n	8004b88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	689b      	ldr	r3, [r3, #8]
 8004b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b2c:	69fb      	ldr	r3, [r7, #28]
 8004b2e:	005b      	lsls	r3, r3, #1
 8004b30:	2203      	movs	r2, #3
 8004b32:	fa02 f303 	lsl.w	r3, r2, r3
 8004b36:	43db      	mvns	r3, r3
 8004b38:	69ba      	ldr	r2, [r7, #24]
 8004b3a:	4013      	ands	r3, r2
 8004b3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	68da      	ldr	r2, [r3, #12]
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	005b      	lsls	r3, r3, #1
 8004b46:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4a:	69ba      	ldr	r2, [r7, #24]
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	69ba      	ldr	r2, [r7, #24]
 8004b54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	685b      	ldr	r3, [r3, #4]
 8004b5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	69fb      	ldr	r3, [r7, #28]
 8004b60:	fa02 f303 	lsl.w	r3, r2, r3
 8004b64:	43db      	mvns	r3, r3
 8004b66:	69ba      	ldr	r2, [r7, #24]
 8004b68:	4013      	ands	r3, r2
 8004b6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	685b      	ldr	r3, [r3, #4]
 8004b70:	091b      	lsrs	r3, r3, #4
 8004b72:	f003 0201 	and.w	r2, r3, #1
 8004b76:	69fb      	ldr	r3, [r7, #28]
 8004b78:	fa02 f303 	lsl.w	r3, r2, r3
 8004b7c:	69ba      	ldr	r2, [r7, #24]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	f003 0303 	and.w	r3, r3, #3
 8004b90:	2b03      	cmp	r3, #3
 8004b92:	d017      	beq.n	8004bc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b9a:	69fb      	ldr	r3, [r7, #28]
 8004b9c:	005b      	lsls	r3, r3, #1
 8004b9e:	2203      	movs	r2, #3
 8004ba0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba4:	43db      	mvns	r3, r3
 8004ba6:	69ba      	ldr	r2, [r7, #24]
 8004ba8:	4013      	ands	r3, r2
 8004baa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bac:	683b      	ldr	r3, [r7, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	69fb      	ldr	r3, [r7, #28]
 8004bb2:	005b      	lsls	r3, r3, #1
 8004bb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004bb8:	69ba      	ldr	r2, [r7, #24]
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69ba      	ldr	r2, [r7, #24]
 8004bc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f003 0303 	and.w	r3, r3, #3
 8004bcc:	2b02      	cmp	r3, #2
 8004bce:	d123      	bne.n	8004c18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bd0:	69fb      	ldr	r3, [r7, #28]
 8004bd2:	08da      	lsrs	r2, r3, #3
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	3208      	adds	r2, #8
 8004bd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004bde:	69fb      	ldr	r3, [r7, #28]
 8004be0:	f003 0307 	and.w	r3, r3, #7
 8004be4:	009b      	lsls	r3, r3, #2
 8004be6:	220f      	movs	r2, #15
 8004be8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bec:	43db      	mvns	r3, r3
 8004bee:	69ba      	ldr	r2, [r7, #24]
 8004bf0:	4013      	ands	r3, r2
 8004bf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	691a      	ldr	r2, [r3, #16]
 8004bf8:	69fb      	ldr	r3, [r7, #28]
 8004bfa:	f003 0307 	and.w	r3, r3, #7
 8004bfe:	009b      	lsls	r3, r3, #2
 8004c00:	fa02 f303 	lsl.w	r3, r2, r3
 8004c04:	69ba      	ldr	r2, [r7, #24]
 8004c06:	4313      	orrs	r3, r2
 8004c08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c0a:	69fb      	ldr	r3, [r7, #28]
 8004c0c:	08da      	lsrs	r2, r3, #3
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	3208      	adds	r2, #8
 8004c12:	69b9      	ldr	r1, [r7, #24]
 8004c14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	2203      	movs	r2, #3
 8004c24:	fa02 f303 	lsl.w	r3, r2, r3
 8004c28:	43db      	mvns	r3, r3
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f003 0203 	and.w	r2, r3, #3
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	005b      	lsls	r3, r3, #1
 8004c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004c40:	69ba      	ldr	r2, [r7, #24]
 8004c42:	4313      	orrs	r3, r2
 8004c44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	685b      	ldr	r3, [r3, #4]
 8004c50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f000 80a2 	beq.w	8004d9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	60fb      	str	r3, [r7, #12]
 8004c5e:	4b57      	ldr	r3, [pc, #348]	@ (8004dbc <HAL_GPIO_Init+0x2e8>)
 8004c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c62:	4a56      	ldr	r2, [pc, #344]	@ (8004dbc <HAL_GPIO_Init+0x2e8>)
 8004c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8004c6a:	4b54      	ldr	r3, [pc, #336]	@ (8004dbc <HAL_GPIO_Init+0x2e8>)
 8004c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004c72:	60fb      	str	r3, [r7, #12]
 8004c74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c76:	4a52      	ldr	r2, [pc, #328]	@ (8004dc0 <HAL_GPIO_Init+0x2ec>)
 8004c78:	69fb      	ldr	r3, [r7, #28]
 8004c7a:	089b      	lsrs	r3, r3, #2
 8004c7c:	3302      	adds	r3, #2
 8004c7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c84:	69fb      	ldr	r3, [r7, #28]
 8004c86:	f003 0303 	and.w	r3, r3, #3
 8004c8a:	009b      	lsls	r3, r3, #2
 8004c8c:	220f      	movs	r2, #15
 8004c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004c92:	43db      	mvns	r3, r3
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	4013      	ands	r3, r2
 8004c98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a49      	ldr	r2, [pc, #292]	@ (8004dc4 <HAL_GPIO_Init+0x2f0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d019      	beq.n	8004cd6 <HAL_GPIO_Init+0x202>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a48      	ldr	r2, [pc, #288]	@ (8004dc8 <HAL_GPIO_Init+0x2f4>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d013      	beq.n	8004cd2 <HAL_GPIO_Init+0x1fe>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a47      	ldr	r2, [pc, #284]	@ (8004dcc <HAL_GPIO_Init+0x2f8>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00d      	beq.n	8004cce <HAL_GPIO_Init+0x1fa>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a46      	ldr	r2, [pc, #280]	@ (8004dd0 <HAL_GPIO_Init+0x2fc>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d007      	beq.n	8004cca <HAL_GPIO_Init+0x1f6>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a45      	ldr	r2, [pc, #276]	@ (8004dd4 <HAL_GPIO_Init+0x300>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d101      	bne.n	8004cc6 <HAL_GPIO_Init+0x1f2>
 8004cc2:	2304      	movs	r3, #4
 8004cc4:	e008      	b.n	8004cd8 <HAL_GPIO_Init+0x204>
 8004cc6:	2307      	movs	r3, #7
 8004cc8:	e006      	b.n	8004cd8 <HAL_GPIO_Init+0x204>
 8004cca:	2303      	movs	r3, #3
 8004ccc:	e004      	b.n	8004cd8 <HAL_GPIO_Init+0x204>
 8004cce:	2302      	movs	r3, #2
 8004cd0:	e002      	b.n	8004cd8 <HAL_GPIO_Init+0x204>
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <HAL_GPIO_Init+0x204>
 8004cd6:	2300      	movs	r3, #0
 8004cd8:	69fa      	ldr	r2, [r7, #28]
 8004cda:	f002 0203 	and.w	r2, r2, #3
 8004cde:	0092      	lsls	r2, r2, #2
 8004ce0:	4093      	lsls	r3, r2
 8004ce2:	69ba      	ldr	r2, [r7, #24]
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004ce8:	4935      	ldr	r1, [pc, #212]	@ (8004dc0 <HAL_GPIO_Init+0x2ec>)
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	089b      	lsrs	r3, r3, #2
 8004cee:	3302      	adds	r3, #2
 8004cf0:	69ba      	ldr	r2, [r7, #24]
 8004cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004cf6:	4b38      	ldr	r3, [pc, #224]	@ (8004dd8 <HAL_GPIO_Init+0x304>)
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004cfc:	693b      	ldr	r3, [r7, #16]
 8004cfe:	43db      	mvns	r3, r3
 8004d00:	69ba      	ldr	r2, [r7, #24]
 8004d02:	4013      	ands	r3, r2
 8004d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	685b      	ldr	r3, [r3, #4]
 8004d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d003      	beq.n	8004d1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004d12:	69ba      	ldr	r2, [r7, #24]
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	4313      	orrs	r3, r2
 8004d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d1a:	4a2f      	ldr	r2, [pc, #188]	@ (8004dd8 <HAL_GPIO_Init+0x304>)
 8004d1c:	69bb      	ldr	r3, [r7, #24]
 8004d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d20:	4b2d      	ldr	r3, [pc, #180]	@ (8004dd8 <HAL_GPIO_Init+0x304>)
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d26:	693b      	ldr	r3, [r7, #16]
 8004d28:	43db      	mvns	r3, r3
 8004d2a:	69ba      	ldr	r2, [r7, #24]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	685b      	ldr	r3, [r3, #4]
 8004d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d003      	beq.n	8004d44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004d3c:	69ba      	ldr	r2, [r7, #24]
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	4313      	orrs	r3, r2
 8004d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d44:	4a24      	ldr	r2, [pc, #144]	@ (8004dd8 <HAL_GPIO_Init+0x304>)
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d4a:	4b23      	ldr	r3, [pc, #140]	@ (8004dd8 <HAL_GPIO_Init+0x304>)
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	43db      	mvns	r3, r3
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	4013      	ands	r3, r2
 8004d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d5a:	683b      	ldr	r3, [r7, #0]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d003      	beq.n	8004d6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004d66:	69ba      	ldr	r2, [r7, #24]
 8004d68:	693b      	ldr	r3, [r7, #16]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d6e:	4a1a      	ldr	r2, [pc, #104]	@ (8004dd8 <HAL_GPIO_Init+0x304>)
 8004d70:	69bb      	ldr	r3, [r7, #24]
 8004d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d74:	4b18      	ldr	r3, [pc, #96]	@ (8004dd8 <HAL_GPIO_Init+0x304>)
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d7a:	693b      	ldr	r3, [r7, #16]
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	69ba      	ldr	r2, [r7, #24]
 8004d80:	4013      	ands	r3, r2
 8004d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d003      	beq.n	8004d98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004d90:	69ba      	ldr	r2, [r7, #24]
 8004d92:	693b      	ldr	r3, [r7, #16]
 8004d94:	4313      	orrs	r3, r2
 8004d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004d98:	4a0f      	ldr	r2, [pc, #60]	@ (8004dd8 <HAL_GPIO_Init+0x304>)
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	3301      	adds	r3, #1
 8004da2:	61fb      	str	r3, [r7, #28]
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	2b0f      	cmp	r3, #15
 8004da8:	f67f aea2 	bls.w	8004af0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dac:	bf00      	nop
 8004dae:	bf00      	nop
 8004db0:	3724      	adds	r7, #36	@ 0x24
 8004db2:	46bd      	mov	sp, r7
 8004db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	40023800 	.word	0x40023800
 8004dc0:	40013800 	.word	0x40013800
 8004dc4:	40020000 	.word	0x40020000
 8004dc8:	40020400 	.word	0x40020400
 8004dcc:	40020800 	.word	0x40020800
 8004dd0:	40020c00 	.word	0x40020c00
 8004dd4:	40021000 	.word	0x40021000
 8004dd8:	40013c00 	.word	0x40013c00

08004ddc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ddc:	b480      	push	{r7}
 8004dde:	b083      	sub	sp, #12
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	460b      	mov	r3, r1
 8004de6:	807b      	strh	r3, [r7, #2]
 8004de8:	4613      	mov	r3, r2
 8004dea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004dec:	787b      	ldrb	r3, [r7, #1]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d003      	beq.n	8004dfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004df2:	887a      	ldrh	r2, [r7, #2]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004df8:	e003      	b.n	8004e02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004dfa:	887b      	ldrh	r3, [r7, #2]
 8004dfc:	041a      	lsls	r2, r3, #16
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	619a      	str	r2, [r3, #24]
}
 8004e02:	bf00      	nop
 8004e04:	370c      	adds	r7, #12
 8004e06:	46bd      	mov	sp, r7
 8004e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e0c:	4770      	bx	lr

08004e0e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b085      	sub	sp, #20
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
 8004e16:	460b      	mov	r3, r1
 8004e18:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	695b      	ldr	r3, [r3, #20]
 8004e1e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e20:	887a      	ldrh	r2, [r7, #2]
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	4013      	ands	r3, r2
 8004e26:	041a      	lsls	r2, r3, #16
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	43d9      	mvns	r1, r3
 8004e2c:	887b      	ldrh	r3, [r7, #2]
 8004e2e:	400b      	ands	r3, r1
 8004e30:	431a      	orrs	r2, r3
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	619a      	str	r2, [r3, #24]
}
 8004e36:	bf00      	nop
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004e42:	b580      	push	{r7, lr}
 8004e44:	b086      	sub	sp, #24
 8004e46:	af02      	add	r7, sp, #8
 8004e48:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d101      	bne.n	8004e54 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e101      	b.n	8005058 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8004e60:	b2db      	uxtb	r3, r3
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d106      	bne.n	8004e74 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8004e6e:	6878      	ldr	r0, [r7, #4]
 8004e70:	f007 fb12 	bl	800c498 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	2203      	movs	r2, #3
 8004e78:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004e7c:	68bb      	ldr	r3, [r7, #8]
 8004e7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8004e82:	d102      	bne.n	8004e8a <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	2200      	movs	r2, #0
 8004e88:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	4618      	mov	r0, r3
 8004e90:	f003 fed5 	bl	8008c3e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6818      	ldr	r0, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	7c1a      	ldrb	r2, [r3, #16]
 8004e9c:	f88d 2000 	strb.w	r2, [sp]
 8004ea0:	3304      	adds	r3, #4
 8004ea2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004ea4:	f003 fdb4 	bl	8008a10 <USB_CoreInit>
 8004ea8:	4603      	mov	r3, r0
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d005      	beq.n	8004eba <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e0ce      	b.n	8005058 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f003 fecd 	bl	8008c60 <USB_SetCurrentMode>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d005      	beq.n	8004ed8 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2202      	movs	r2, #2
 8004ed0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0bf      	b.n	8005058 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004ed8:	2300      	movs	r3, #0
 8004eda:	73fb      	strb	r3, [r7, #15]
 8004edc:	e04a      	b.n	8004f74 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004ede:	7bfa      	ldrb	r2, [r7, #15]
 8004ee0:	6879      	ldr	r1, [r7, #4]
 8004ee2:	4613      	mov	r3, r2
 8004ee4:	00db      	lsls	r3, r3, #3
 8004ee6:	4413      	add	r3, r2
 8004ee8:	009b      	lsls	r3, r3, #2
 8004eea:	440b      	add	r3, r1
 8004eec:	3315      	adds	r3, #21
 8004eee:	2201      	movs	r2, #1
 8004ef0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004ef2:	7bfa      	ldrb	r2, [r7, #15]
 8004ef4:	6879      	ldr	r1, [r7, #4]
 8004ef6:	4613      	mov	r3, r2
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	009b      	lsls	r3, r3, #2
 8004efe:	440b      	add	r3, r1
 8004f00:	3314      	adds	r3, #20
 8004f02:	7bfa      	ldrb	r2, [r7, #15]
 8004f04:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004f06:	7bfa      	ldrb	r2, [r7, #15]
 8004f08:	7bfb      	ldrb	r3, [r7, #15]
 8004f0a:	b298      	uxth	r0, r3
 8004f0c:	6879      	ldr	r1, [r7, #4]
 8004f0e:	4613      	mov	r3, r2
 8004f10:	00db      	lsls	r3, r3, #3
 8004f12:	4413      	add	r3, r2
 8004f14:	009b      	lsls	r3, r3, #2
 8004f16:	440b      	add	r3, r1
 8004f18:	332e      	adds	r3, #46	@ 0x2e
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004f1e:	7bfa      	ldrb	r2, [r7, #15]
 8004f20:	6879      	ldr	r1, [r7, #4]
 8004f22:	4613      	mov	r3, r2
 8004f24:	00db      	lsls	r3, r3, #3
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	440b      	add	r3, r1
 8004f2c:	3318      	adds	r3, #24
 8004f2e:	2200      	movs	r2, #0
 8004f30:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004f32:	7bfa      	ldrb	r2, [r7, #15]
 8004f34:	6879      	ldr	r1, [r7, #4]
 8004f36:	4613      	mov	r3, r2
 8004f38:	00db      	lsls	r3, r3, #3
 8004f3a:	4413      	add	r3, r2
 8004f3c:	009b      	lsls	r3, r3, #2
 8004f3e:	440b      	add	r3, r1
 8004f40:	331c      	adds	r3, #28
 8004f42:	2200      	movs	r2, #0
 8004f44:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004f46:	7bfa      	ldrb	r2, [r7, #15]
 8004f48:	6879      	ldr	r1, [r7, #4]
 8004f4a:	4613      	mov	r3, r2
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	4413      	add	r3, r2
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	440b      	add	r3, r1
 8004f54:	3320      	adds	r3, #32
 8004f56:	2200      	movs	r2, #0
 8004f58:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004f5a:	7bfa      	ldrb	r2, [r7, #15]
 8004f5c:	6879      	ldr	r1, [r7, #4]
 8004f5e:	4613      	mov	r3, r2
 8004f60:	00db      	lsls	r3, r3, #3
 8004f62:	4413      	add	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	440b      	add	r3, r1
 8004f68:	3324      	adds	r3, #36	@ 0x24
 8004f6a:	2200      	movs	r2, #0
 8004f6c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	3301      	adds	r3, #1
 8004f72:	73fb      	strb	r3, [r7, #15]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	791b      	ldrb	r3, [r3, #4]
 8004f78:	7bfa      	ldrb	r2, [r7, #15]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d3af      	bcc.n	8004ede <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004f7e:	2300      	movs	r3, #0
 8004f80:	73fb      	strb	r3, [r7, #15]
 8004f82:	e044      	b.n	800500e <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004f84:	7bfa      	ldrb	r2, [r7, #15]
 8004f86:	6879      	ldr	r1, [r7, #4]
 8004f88:	4613      	mov	r3, r2
 8004f8a:	00db      	lsls	r3, r3, #3
 8004f8c:	4413      	add	r3, r2
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	440b      	add	r3, r1
 8004f92:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004f96:	2200      	movs	r2, #0
 8004f98:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004f9a:	7bfa      	ldrb	r2, [r7, #15]
 8004f9c:	6879      	ldr	r1, [r7, #4]
 8004f9e:	4613      	mov	r3, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	4413      	add	r3, r2
 8004fa4:	009b      	lsls	r3, r3, #2
 8004fa6:	440b      	add	r3, r1
 8004fa8:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004fac:	7bfa      	ldrb	r2, [r7, #15]
 8004fae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004fb0:	7bfa      	ldrb	r2, [r7, #15]
 8004fb2:	6879      	ldr	r1, [r7, #4]
 8004fb4:	4613      	mov	r3, r2
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	4413      	add	r3, r2
 8004fba:	009b      	lsls	r3, r3, #2
 8004fbc:	440b      	add	r3, r1
 8004fbe:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004fc6:	7bfa      	ldrb	r2, [r7, #15]
 8004fc8:	6879      	ldr	r1, [r7, #4]
 8004fca:	4613      	mov	r3, r2
 8004fcc:	00db      	lsls	r3, r3, #3
 8004fce:	4413      	add	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	440b      	add	r3, r1
 8004fd4:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004fd8:	2200      	movs	r2, #0
 8004fda:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004fdc:	7bfa      	ldrb	r2, [r7, #15]
 8004fde:	6879      	ldr	r1, [r7, #4]
 8004fe0:	4613      	mov	r3, r2
 8004fe2:	00db      	lsls	r3, r3, #3
 8004fe4:	4413      	add	r3, r2
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	440b      	add	r3, r1
 8004fea:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004fee:	2200      	movs	r2, #0
 8004ff0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004ff2:	7bfa      	ldrb	r2, [r7, #15]
 8004ff4:	6879      	ldr	r1, [r7, #4]
 8004ff6:	4613      	mov	r3, r2
 8004ff8:	00db      	lsls	r3, r3, #3
 8004ffa:	4413      	add	r3, r2
 8004ffc:	009b      	lsls	r3, r3, #2
 8004ffe:	440b      	add	r3, r1
 8005000:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005004:	2200      	movs	r2, #0
 8005006:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	3301      	adds	r3, #1
 800500c:	73fb      	strb	r3, [r7, #15]
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	7bfa      	ldrb	r2, [r7, #15]
 8005014:	429a      	cmp	r2, r3
 8005016:	d3b5      	bcc.n	8004f84 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	6818      	ldr	r0, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	7c1a      	ldrb	r2, [r3, #16]
 8005020:	f88d 2000 	strb.w	r2, [sp]
 8005024:	3304      	adds	r3, #4
 8005026:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005028:	f003 fe66 	bl	8008cf8 <USB_DevInit>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d005      	beq.n	800503e <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	2202      	movs	r2, #2
 8005036:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800503a:	2301      	movs	r3, #1
 800503c:	e00c      	b.n	8005058 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2200      	movs	r2, #0
 8005042:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f004 feb0 	bl	8009db6 <USB_DevDisconnect>

  return HAL_OK;
 8005056:	2300      	movs	r3, #0
}
 8005058:	4618      	mov	r0, r3
 800505a:	3710      	adds	r7, #16
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_PCD_Start+0x1c>
 8005078:	2302      	movs	r3, #2
 800507a:	e022      	b.n	80050c2 <HAL_PCD_Start+0x62>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	68db      	ldr	r3, [r3, #12]
 8005088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800508c:	2b00      	cmp	r3, #0
 800508e:	d009      	beq.n	80050a4 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8005094:	2b01      	cmp	r3, #1
 8005096:	d105      	bne.n	80050a4 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800509c:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	4618      	mov	r0, r3
 80050aa:	f003 fdb7 	bl	8008c1c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	4618      	mov	r0, r3
 80050b4:	f004 fe5e 	bl	8009d74 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2200      	movs	r2, #0
 80050bc:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80050c0:	2300      	movs	r3, #0
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3710      	adds	r7, #16
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}

080050ca <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80050ca:	b590      	push	{r4, r7, lr}
 80050cc:	b08d      	sub	sp, #52	@ 0x34
 80050ce:	af00      	add	r7, sp, #0
 80050d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d8:	6a3b      	ldr	r3, [r7, #32]
 80050da:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4618      	mov	r0, r3
 80050e2:	f004 ff1c 	bl	8009f1e <USB_GetMode>
 80050e6:	4603      	mov	r3, r0
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f040 848c 	bne.w	8005a06 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f004 fe80 	bl	8009df8 <USB_ReadInterrupts>
 80050f8:	4603      	mov	r3, r0
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	f000 8482 	beq.w	8005a04 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005106:	689b      	ldr	r3, [r3, #8]
 8005108:	0a1b      	lsrs	r3, r3, #8
 800510a:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4618      	mov	r0, r3
 800511a:	f004 fe6d 	bl	8009df8 <USB_ReadInterrupts>
 800511e:	4603      	mov	r3, r0
 8005120:	f003 0302 	and.w	r3, r3, #2
 8005124:	2b02      	cmp	r3, #2
 8005126:	d107      	bne.n	8005138 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	695a      	ldr	r2, [r3, #20]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	f002 0202 	and.w	r2, r2, #2
 8005136:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	4618      	mov	r0, r3
 800513e:	f004 fe5b 	bl	8009df8 <USB_ReadInterrupts>
 8005142:	4603      	mov	r3, r0
 8005144:	f003 0310 	and.w	r3, r3, #16
 8005148:	2b10      	cmp	r3, #16
 800514a:	d161      	bne.n	8005210 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	699a      	ldr	r2, [r3, #24]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	f022 0210 	bic.w	r2, r2, #16
 800515a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800515c:	6a3b      	ldr	r3, [r7, #32]
 800515e:	6a1b      	ldr	r3, [r3, #32]
 8005160:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8005162:	69bb      	ldr	r3, [r7, #24]
 8005164:	f003 020f 	and.w	r2, r3, #15
 8005168:	4613      	mov	r3, r2
 800516a:	00db      	lsls	r3, r3, #3
 800516c:	4413      	add	r3, r2
 800516e:	009b      	lsls	r3, r3, #2
 8005170:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005174:	687a      	ldr	r2, [r7, #4]
 8005176:	4413      	add	r3, r2
 8005178:	3304      	adds	r3, #4
 800517a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8005182:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8005186:	d124      	bne.n	80051d2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800518e:	4013      	ands	r3, r2
 8005190:	2b00      	cmp	r3, #0
 8005192:	d035      	beq.n	8005200 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8005198:	69bb      	ldr	r3, [r7, #24]
 800519a:	091b      	lsrs	r3, r3, #4
 800519c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800519e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051a2:	b29b      	uxth	r3, r3
 80051a4:	461a      	mov	r2, r3
 80051a6:	6a38      	ldr	r0, [r7, #32]
 80051a8:	f004 fc92 	bl	8009ad0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051ac:	697b      	ldr	r3, [r7, #20]
 80051ae:	68da      	ldr	r2, [r3, #12]
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	091b      	lsrs	r3, r3, #4
 80051b4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051b8:	441a      	add	r2, r3
 80051ba:	697b      	ldr	r3, [r7, #20]
 80051bc:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	695a      	ldr	r2, [r3, #20]
 80051c2:	69bb      	ldr	r3, [r7, #24]
 80051c4:	091b      	lsrs	r3, r3, #4
 80051c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051ca:	441a      	add	r2, r3
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	615a      	str	r2, [r3, #20]
 80051d0:	e016      	b.n	8005200 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80051d8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80051dc:	d110      	bne.n	8005200 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80051e4:	2208      	movs	r2, #8
 80051e6:	4619      	mov	r1, r3
 80051e8:	6a38      	ldr	r0, [r7, #32]
 80051ea:	f004 fc71 	bl	8009ad0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	695a      	ldr	r2, [r3, #20]
 80051f2:	69bb      	ldr	r3, [r7, #24]
 80051f4:	091b      	lsrs	r3, r3, #4
 80051f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80051fa:	441a      	add	r2, r3
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	699a      	ldr	r2, [r3, #24]
 8005206:	687b      	ldr	r3, [r7, #4]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f042 0210 	orr.w	r2, r2, #16
 800520e:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	4618      	mov	r0, r3
 8005216:	f004 fdef 	bl	8009df8 <USB_ReadInterrupts>
 800521a:	4603      	mov	r3, r0
 800521c:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005220:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8005224:	f040 80a7 	bne.w	8005376 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8005228:	2300      	movs	r3, #0
 800522a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	4618      	mov	r0, r3
 8005232:	f004 fdf4 	bl	8009e1e <USB_ReadDevAllOutEpInterrupt>
 8005236:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8005238:	e099      	b.n	800536e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800523a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800523c:	f003 0301 	and.w	r3, r3, #1
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 808e 	beq.w	8005362 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800524c:	b2d2      	uxtb	r2, r2
 800524e:	4611      	mov	r1, r2
 8005250:	4618      	mov	r0, r3
 8005252:	f004 fe18 	bl	8009e86 <USB_ReadDevOutEPInterrupt>
 8005256:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8005258:	693b      	ldr	r3, [r7, #16]
 800525a:	f003 0301 	and.w	r3, r3, #1
 800525e:	2b00      	cmp	r3, #0
 8005260:	d00c      	beq.n	800527c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8005262:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005264:	015a      	lsls	r2, r3, #5
 8005266:	69fb      	ldr	r3, [r7, #28]
 8005268:	4413      	add	r3, r2
 800526a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800526e:	461a      	mov	r2, r3
 8005270:	2301      	movs	r3, #1
 8005272:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8005274:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fea4 	bl	8005fc4 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d00c      	beq.n	80052a0 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8005286:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005288:	015a      	lsls	r2, r3, #5
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	4413      	add	r3, r2
 800528e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005292:	461a      	mov	r2, r3
 8005294:	2308      	movs	r3, #8
 8005296:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8005298:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800529a:	6878      	ldr	r0, [r7, #4]
 800529c:	f000 ff7a 	bl	8006194 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 80052a0:	693b      	ldr	r3, [r7, #16]
 80052a2:	f003 0310 	and.w	r3, r3, #16
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d008      	beq.n	80052bc <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	015a      	lsls	r2, r3, #5
 80052ae:	69fb      	ldr	r3, [r7, #28]
 80052b0:	4413      	add	r3, r2
 80052b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052b6:	461a      	mov	r2, r3
 80052b8:	2310      	movs	r3, #16
 80052ba:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80052bc:	693b      	ldr	r3, [r7, #16]
 80052be:	f003 0302 	and.w	r3, r3, #2
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	d030      	beq.n	8005328 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80052c6:	6a3b      	ldr	r3, [r7, #32]
 80052c8:	695b      	ldr	r3, [r3, #20]
 80052ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ce:	2b80      	cmp	r3, #128	@ 0x80
 80052d0:	d109      	bne.n	80052e6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80052d2:	69fb      	ldr	r3, [r7, #28]
 80052d4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	69fa      	ldr	r2, [r7, #28]
 80052dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80052e0:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80052e4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80052e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80052e8:	4613      	mov	r3, r2
 80052ea:	00db      	lsls	r3, r3, #3
 80052ec:	4413      	add	r3, r2
 80052ee:	009b      	lsls	r3, r3, #2
 80052f0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80052f4:	687a      	ldr	r2, [r7, #4]
 80052f6:	4413      	add	r3, r2
 80052f8:	3304      	adds	r3, #4
 80052fa:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	78db      	ldrb	r3, [r3, #3]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d108      	bne.n	8005316 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	2200      	movs	r2, #0
 8005308:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800530a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800530c:	b2db      	uxtb	r3, r3
 800530e:	4619      	mov	r1, r3
 8005310:	6878      	ldr	r0, [r7, #4]
 8005312:	f007 f9bd 	bl	800c690 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8005316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005318:	015a      	lsls	r2, r3, #5
 800531a:	69fb      	ldr	r3, [r7, #28]
 800531c:	4413      	add	r3, r2
 800531e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005322:	461a      	mov	r2, r3
 8005324:	2302      	movs	r3, #2
 8005326:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005328:	693b      	ldr	r3, [r7, #16]
 800532a:	f003 0320 	and.w	r3, r3, #32
 800532e:	2b00      	cmp	r3, #0
 8005330:	d008      	beq.n	8005344 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533e:	461a      	mov	r2, r3
 8005340:	2320      	movs	r3, #32
 8005342:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800534a:	2b00      	cmp	r3, #0
 800534c:	d009      	beq.n	8005362 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800534e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005350:	015a      	lsls	r2, r3, #5
 8005352:	69fb      	ldr	r3, [r7, #28]
 8005354:	4413      	add	r3, r2
 8005356:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800535a:	461a      	mov	r2, r3
 800535c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005360:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8005362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005364:	3301      	adds	r3, #1
 8005366:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800536e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005370:	2b00      	cmp	r3, #0
 8005372:	f47f af62 	bne.w	800523a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	4618      	mov	r0, r3
 800537c:	f004 fd3c 	bl	8009df8 <USB_ReadInterrupts>
 8005380:	4603      	mov	r3, r0
 8005382:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005386:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800538a:	f040 80db 	bne.w	8005544 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	4618      	mov	r0, r3
 8005394:	f004 fd5d 	bl	8009e52 <USB_ReadDevAllInEpInterrupt>
 8005398:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 800539a:	2300      	movs	r3, #0
 800539c:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 800539e:	e0cd      	b.n	800553c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 80053a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053a2:	f003 0301 	and.w	r3, r3, #1
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	f000 80c2 	beq.w	8005530 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053b2:	b2d2      	uxtb	r2, r2
 80053b4:	4611      	mov	r1, r2
 80053b6:	4618      	mov	r0, r3
 80053b8:	f004 fd83 	bl	8009ec2 <USB_ReadDevInEPInterrupt>
 80053bc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f003 0301 	and.w	r3, r3, #1
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d057      	beq.n	8005478 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80053c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ca:	f003 030f 	and.w	r3, r3, #15
 80053ce:	2201      	movs	r2, #1
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80053d6:	69fb      	ldr	r3, [r7, #28]
 80053d8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80053dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	43db      	mvns	r3, r3
 80053e2:	69f9      	ldr	r1, [r7, #28]
 80053e4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80053e8:	4013      	ands	r3, r2
 80053ea:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80053ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	69fb      	ldr	r3, [r7, #28]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f8:	461a      	mov	r2, r3
 80053fa:	2301      	movs	r3, #1
 80053fc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	799b      	ldrb	r3, [r3, #6]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d132      	bne.n	800546c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8005406:	6879      	ldr	r1, [r7, #4]
 8005408:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800540a:	4613      	mov	r3, r2
 800540c:	00db      	lsls	r3, r3, #3
 800540e:	4413      	add	r3, r2
 8005410:	009b      	lsls	r3, r3, #2
 8005412:	440b      	add	r3, r1
 8005414:	3320      	adds	r3, #32
 8005416:	6819      	ldr	r1, [r3, #0]
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800541c:	4613      	mov	r3, r2
 800541e:	00db      	lsls	r3, r3, #3
 8005420:	4413      	add	r3, r2
 8005422:	009b      	lsls	r3, r3, #2
 8005424:	4403      	add	r3, r0
 8005426:	331c      	adds	r3, #28
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4419      	add	r1, r3
 800542c:	6878      	ldr	r0, [r7, #4]
 800542e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005430:	4613      	mov	r3, r2
 8005432:	00db      	lsls	r3, r3, #3
 8005434:	4413      	add	r3, r2
 8005436:	009b      	lsls	r3, r3, #2
 8005438:	4403      	add	r3, r0
 800543a:	3320      	adds	r3, #32
 800543c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800543e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005440:	2b00      	cmp	r3, #0
 8005442:	d113      	bne.n	800546c <HAL_PCD_IRQHandler+0x3a2>
 8005444:	6879      	ldr	r1, [r7, #4]
 8005446:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005448:	4613      	mov	r3, r2
 800544a:	00db      	lsls	r3, r3, #3
 800544c:	4413      	add	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	440b      	add	r3, r1
 8005452:	3324      	adds	r3, #36	@ 0x24
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	2b00      	cmp	r3, #0
 8005458:	d108      	bne.n	800546c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005464:	461a      	mov	r2, r3
 8005466:	2101      	movs	r1, #1
 8005468:	f004 fd8a 	bl	8009f80 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800546c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800546e:	b2db      	uxtb	r3, r3
 8005470:	4619      	mov	r1, r3
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f007 f891 	bl	800c59a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	f003 0308 	and.w	r3, r3, #8
 800547e:	2b00      	cmp	r3, #0
 8005480:	d008      	beq.n	8005494 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8005482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800548e:	461a      	mov	r2, r3
 8005490:	2308      	movs	r3, #8
 8005492:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8005494:	693b      	ldr	r3, [r7, #16]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b00      	cmp	r3, #0
 800549c:	d008      	beq.n	80054b0 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800549e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054a0:	015a      	lsls	r2, r3, #5
 80054a2:	69fb      	ldr	r3, [r7, #28]
 80054a4:	4413      	add	r3, r2
 80054a6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054aa:	461a      	mov	r2, r3
 80054ac:	2310      	movs	r3, #16
 80054ae:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d008      	beq.n	80054cc <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80054ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054bc:	015a      	lsls	r2, r3, #5
 80054be:	69fb      	ldr	r3, [r7, #28]
 80054c0:	4413      	add	r3, r2
 80054c2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80054c6:	461a      	mov	r2, r3
 80054c8:	2340      	movs	r3, #64	@ 0x40
 80054ca:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d023      	beq.n	800551e <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80054d6:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054d8:	6a38      	ldr	r0, [r7, #32]
 80054da:	f003 fd71 	bl	8008fc0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80054de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	4413      	add	r3, r2
 80054e6:	009b      	lsls	r3, r3, #2
 80054e8:	3310      	adds	r3, #16
 80054ea:	687a      	ldr	r2, [r7, #4]
 80054ec:	4413      	add	r3, r2
 80054ee:	3304      	adds	r3, #4
 80054f0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	78db      	ldrb	r3, [r3, #3]
 80054f6:	2b01      	cmp	r3, #1
 80054f8:	d108      	bne.n	800550c <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	2200      	movs	r2, #0
 80054fe:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8005500:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005502:	b2db      	uxtb	r3, r3
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f007 f8d4 	bl	800c6b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800550c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800550e:	015a      	lsls	r2, r3, #5
 8005510:	69fb      	ldr	r3, [r7, #28]
 8005512:	4413      	add	r3, r2
 8005514:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005518:	461a      	mov	r2, r3
 800551a:	2302      	movs	r3, #2
 800551c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800551e:	693b      	ldr	r3, [r7, #16]
 8005520:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005524:	2b00      	cmp	r3, #0
 8005526:	d003      	beq.n	8005530 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005528:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800552a:	6878      	ldr	r0, [r7, #4]
 800552c:	f000 fcbd 	bl	8005eaa <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8005530:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005532:	3301      	adds	r3, #1
 8005534:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 800553c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800553e:	2b00      	cmp	r3, #0
 8005540:	f47f af2e 	bne.w	80053a0 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	4618      	mov	r0, r3
 800554a:	f004 fc55 	bl	8009df8 <USB_ReadInterrupts>
 800554e:	4603      	mov	r3, r0
 8005550:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005554:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005558:	d122      	bne.n	80055a0 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800555a:	69fb      	ldr	r3, [r7, #28]
 800555c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	69fa      	ldr	r2, [r7, #28]
 8005564:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005568:	f023 0301 	bic.w	r3, r3, #1
 800556c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005574:	2b01      	cmp	r3, #1
 8005576:	d108      	bne.n	800558a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2200      	movs	r2, #0
 800557c:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8005580:	2100      	movs	r1, #0
 8005582:	6878      	ldr	r0, [r7, #4]
 8005584:	f000 fea4 	bl	80062d0 <HAL_PCDEx_LPM_Callback>
 8005588:	e002      	b.n	8005590 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800558a:	6878      	ldr	r0, [r7, #4]
 800558c:	f007 f872 	bl	800c674 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	695a      	ldr	r2, [r3, #20]
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 800559e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f004 fc27 	bl	8009df8 <USB_ReadInterrupts>
 80055aa:	4603      	mov	r3, r0
 80055ac:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055b0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80055b4:	d112      	bne.n	80055dc <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80055b6:	69fb      	ldr	r3, [r7, #28]
 80055b8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f003 0301 	and.w	r3, r3, #1
 80055c2:	2b01      	cmp	r3, #1
 80055c4:	d102      	bne.n	80055cc <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f007 f82e 	bl	800c628 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	695a      	ldr	r2, [r3, #20]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80055da:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	4618      	mov	r0, r3
 80055e2:	f004 fc09 	bl	8009df8 <USB_ReadInterrupts>
 80055e6:	4603      	mov	r3, r0
 80055e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80055ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055f0:	f040 80b7 	bne.w	8005762 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	69fa      	ldr	r2, [r7, #28]
 80055fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005602:	f023 0301 	bic.w	r3, r3, #1
 8005606:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	2110      	movs	r1, #16
 800560e:	4618      	mov	r0, r3
 8005610:	f003 fcd6 	bl	8008fc0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005614:	2300      	movs	r3, #0
 8005616:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005618:	e046      	b.n	80056a8 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800561a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800561c:	015a      	lsls	r2, r3, #5
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	4413      	add	r3, r2
 8005622:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005626:	461a      	mov	r2, r3
 8005628:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800562c:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800562e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	69fb      	ldr	r3, [r7, #28]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800563e:	0151      	lsls	r1, r2, #5
 8005640:	69fa      	ldr	r2, [r7, #28]
 8005642:	440a      	add	r2, r1
 8005644:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005648:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800564c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800564e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005650:	015a      	lsls	r2, r3, #5
 8005652:	69fb      	ldr	r3, [r7, #28]
 8005654:	4413      	add	r3, r2
 8005656:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800565a:	461a      	mov	r2, r3
 800565c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005660:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005664:	015a      	lsls	r2, r3, #5
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	4413      	add	r3, r2
 800566a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005672:	0151      	lsls	r1, r2, #5
 8005674:	69fa      	ldr	r2, [r7, #28]
 8005676:	440a      	add	r2, r1
 8005678:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800567c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005680:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005682:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005684:	015a      	lsls	r2, r3, #5
 8005686:	69fb      	ldr	r3, [r7, #28]
 8005688:	4413      	add	r3, r2
 800568a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005692:	0151      	lsls	r1, r2, #5
 8005694:	69fa      	ldr	r2, [r7, #28]
 8005696:	440a      	add	r2, r1
 8005698:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800569c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80056a0:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80056a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a4:	3301      	adds	r3, #1
 80056a6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	791b      	ldrb	r3, [r3, #4]
 80056ac:	461a      	mov	r2, r3
 80056ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056b0:	4293      	cmp	r3, r2
 80056b2:	d3b2      	bcc.n	800561a <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80056b4:	69fb      	ldr	r3, [r7, #28]
 80056b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ba:	69db      	ldr	r3, [r3, #28]
 80056bc:	69fa      	ldr	r2, [r7, #28]
 80056be:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056c2:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80056c6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	7bdb      	ldrb	r3, [r3, #15]
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d016      	beq.n	80056fe <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80056d0:	69fb      	ldr	r3, [r7, #28]
 80056d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80056da:	69fa      	ldr	r2, [r7, #28]
 80056dc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056e0:	f043 030b 	orr.w	r3, r3, #11
 80056e4:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80056e8:	69fb      	ldr	r3, [r7, #28]
 80056ea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80056ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80056f0:	69fa      	ldr	r2, [r7, #28]
 80056f2:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80056f6:	f043 030b 	orr.w	r3, r3, #11
 80056fa:	6453      	str	r3, [r2, #68]	@ 0x44
 80056fc:	e015      	b.n	800572a <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005704:	695b      	ldr	r3, [r3, #20]
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800570c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8005710:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005714:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800571c:	691b      	ldr	r3, [r3, #16]
 800571e:	69fa      	ldr	r2, [r7, #28]
 8005720:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005724:	f043 030b 	orr.w	r3, r3, #11
 8005728:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	69fa      	ldr	r2, [r7, #28]
 8005734:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005738:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 800573c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6818      	ldr	r0, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800574c:	461a      	mov	r2, r3
 800574e:	f004 fc17 	bl	8009f80 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	695a      	ldr	r2, [r3, #20]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005760:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	4618      	mov	r0, r3
 8005768:	f004 fb46 	bl	8009df8 <USB_ReadInterrupts>
 800576c:	4603      	mov	r3, r0
 800576e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005772:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005776:	d123      	bne.n	80057c0 <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	4618      	mov	r0, r3
 800577e:	f004 fbdc 	bl	8009f3a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	4618      	mov	r0, r3
 8005788:	f003 fc93 	bl	80090b2 <USB_GetDevSpeed>
 800578c:	4603      	mov	r3, r0
 800578e:	461a      	mov	r2, r3
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681c      	ldr	r4, [r3, #0]
 8005798:	f001 f9ca 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 800579c:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80057a2:	461a      	mov	r2, r3
 80057a4:	4620      	mov	r0, r4
 80057a6:	f003 f997 	bl	8008ad8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80057aa:	6878      	ldr	r0, [r7, #4]
 80057ac:	f006 ff1d 	bl	800c5ea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	695a      	ldr	r2, [r3, #20]
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80057be:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f004 fb17 	bl	8009df8 <USB_ReadInterrupts>
 80057ca:	4603      	mov	r3, r0
 80057cc:	f003 0308 	and.w	r3, r3, #8
 80057d0:	2b08      	cmp	r3, #8
 80057d2:	d10a      	bne.n	80057ea <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f006 fefa 	bl	800c5ce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695a      	ldr	r2, [r3, #20]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f002 0208 	and.w	r2, r2, #8
 80057e8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4618      	mov	r0, r3
 80057f0:	f004 fb02 	bl	8009df8 <USB_ReadInterrupts>
 80057f4:	4603      	mov	r3, r0
 80057f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057fa:	2b80      	cmp	r3, #128	@ 0x80
 80057fc:	d123      	bne.n	8005846 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	699b      	ldr	r3, [r3, #24]
 8005802:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005806:	6a3b      	ldr	r3, [r7, #32]
 8005808:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800580a:	2301      	movs	r3, #1
 800580c:	627b      	str	r3, [r7, #36]	@ 0x24
 800580e:	e014      	b.n	800583a <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8005810:	6879      	ldr	r1, [r7, #4]
 8005812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005814:	4613      	mov	r3, r2
 8005816:	00db      	lsls	r3, r3, #3
 8005818:	4413      	add	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	440b      	add	r3, r1
 800581e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005822:	781b      	ldrb	r3, [r3, #0]
 8005824:	2b01      	cmp	r3, #1
 8005826:	d105      	bne.n	8005834 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800582a:	b2db      	uxtb	r3, r3
 800582c:	4619      	mov	r1, r3
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 fb0a 	bl	8005e48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005834:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005836:	3301      	adds	r3, #1
 8005838:	627b      	str	r3, [r7, #36]	@ 0x24
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	791b      	ldrb	r3, [r3, #4]
 800583e:	461a      	mov	r2, r3
 8005840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005842:	4293      	cmp	r3, r2
 8005844:	d3e4      	bcc.n	8005810 <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4618      	mov	r0, r3
 800584c:	f004 fad4 	bl	8009df8 <USB_ReadInterrupts>
 8005850:	4603      	mov	r3, r0
 8005852:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005856:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800585a:	d13c      	bne.n	80058d6 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800585c:	2301      	movs	r3, #1
 800585e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005860:	e02b      	b.n	80058ba <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8005862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005864:	015a      	lsls	r2, r3, #5
 8005866:	69fb      	ldr	r3, [r7, #28]
 8005868:	4413      	add	r3, r2
 800586a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005872:	6879      	ldr	r1, [r7, #4]
 8005874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005876:	4613      	mov	r3, r2
 8005878:	00db      	lsls	r3, r3, #3
 800587a:	4413      	add	r3, r2
 800587c:	009b      	lsls	r3, r3, #2
 800587e:	440b      	add	r3, r1
 8005880:	3318      	adds	r3, #24
 8005882:	781b      	ldrb	r3, [r3, #0]
 8005884:	2b01      	cmp	r3, #1
 8005886:	d115      	bne.n	80058b4 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005888:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800588a:	2b00      	cmp	r3, #0
 800588c:	da12      	bge.n	80058b4 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800588e:	6879      	ldr	r1, [r7, #4]
 8005890:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005892:	4613      	mov	r3, r2
 8005894:	00db      	lsls	r3, r3, #3
 8005896:	4413      	add	r3, r2
 8005898:	009b      	lsls	r3, r3, #2
 800589a:	440b      	add	r3, r1
 800589c:	3317      	adds	r3, #23
 800589e:	2201      	movs	r2, #1
 80058a0:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	b2db      	uxtb	r3, r3
 80058a6:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	4619      	mov	r1, r3
 80058ae:	6878      	ldr	r0, [r7, #4]
 80058b0:	f000 faca 	bl	8005e48 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058b6:	3301      	adds	r3, #1
 80058b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	791b      	ldrb	r3, [r3, #4]
 80058be:	461a      	mov	r2, r3
 80058c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d3cd      	bcc.n	8005862 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	695a      	ldr	r2, [r3, #20]
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80058d4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f004 fa8c 	bl	8009df8 <USB_ReadInterrupts>
 80058e0:	4603      	mov	r3, r0
 80058e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80058e6:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80058ea:	d156      	bne.n	800599a <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80058ec:	2301      	movs	r3, #1
 80058ee:	627b      	str	r3, [r7, #36]	@ 0x24
 80058f0:	e045      	b.n	800597e <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80058f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058f4:	015a      	lsls	r2, r3, #5
 80058f6:	69fb      	ldr	r3, [r7, #28]
 80058f8:	4413      	add	r3, r2
 80058fa:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005902:	6879      	ldr	r1, [r7, #4]
 8005904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005906:	4613      	mov	r3, r2
 8005908:	00db      	lsls	r3, r3, #3
 800590a:	4413      	add	r3, r2
 800590c:	009b      	lsls	r3, r3, #2
 800590e:	440b      	add	r3, r1
 8005910:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d12e      	bne.n	8005978 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800591a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800591c:	2b00      	cmp	r3, #0
 800591e:	da2b      	bge.n	8005978 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	0c1a      	lsrs	r2, r3, #16
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 800592a:	4053      	eors	r3, r2
 800592c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005930:	2b00      	cmp	r3, #0
 8005932:	d121      	bne.n	8005978 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005934:	6879      	ldr	r1, [r7, #4]
 8005936:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005938:	4613      	mov	r3, r2
 800593a:	00db      	lsls	r3, r3, #3
 800593c:	4413      	add	r3, r2
 800593e:	009b      	lsls	r3, r3, #2
 8005940:	440b      	add	r3, r1
 8005942:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005946:	2201      	movs	r2, #1
 8005948:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800594a:	6a3b      	ldr	r3, [r7, #32]
 800594c:	699b      	ldr	r3, [r3, #24]
 800594e:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005952:	6a3b      	ldr	r3, [r7, #32]
 8005954:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10a      	bne.n	8005978 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8005962:	69fb      	ldr	r3, [r7, #28]
 8005964:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005968:	685b      	ldr	r3, [r3, #4]
 800596a:	69fa      	ldr	r2, [r7, #28]
 800596c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005970:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005974:	6053      	str	r3, [r2, #4]
            break;
 8005976:	e008      	b.n	800598a <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005978:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800597a:	3301      	adds	r3, #1
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	791b      	ldrb	r3, [r3, #4]
 8005982:	461a      	mov	r2, r3
 8005984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005986:	4293      	cmp	r3, r2
 8005988:	d3b3      	bcc.n	80058f2 <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	681b      	ldr	r3, [r3, #0]
 800598e:	695a      	ldr	r2, [r3, #20]
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8005998:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	4618      	mov	r0, r3
 80059a0:	f004 fa2a 	bl	8009df8 <USB_ReadInterrupts>
 80059a4:	4603      	mov	r3, r0
 80059a6:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80059aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80059ae:	d10a      	bne.n	80059c6 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f006 fe91 	bl	800c6d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	695a      	ldr	r2, [r3, #20]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80059c4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	4618      	mov	r0, r3
 80059cc:	f004 fa14 	bl	8009df8 <USB_ReadInterrupts>
 80059d0:	4603      	mov	r3, r0
 80059d2:	f003 0304 	and.w	r3, r3, #4
 80059d6:	2b04      	cmp	r3, #4
 80059d8:	d115      	bne.n	8005a06 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	685b      	ldr	r3, [r3, #4]
 80059e0:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80059e2:	69bb      	ldr	r3, [r7, #24]
 80059e4:	f003 0304 	and.w	r3, r3, #4
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d002      	beq.n	80059f2 <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f006 fe81 	bl	800c6f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6859      	ldr	r1, [r3, #4]
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	69ba      	ldr	r2, [r7, #24]
 80059fe:	430a      	orrs	r2, r1
 8005a00:	605a      	str	r2, [r3, #4]
 8005a02:	e000      	b.n	8005a06 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005a04:	bf00      	nop
    }
  }
}
 8005a06:	3734      	adds	r7, #52	@ 0x34
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd90      	pop	{r4, r7, pc}

08005a0c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b082      	sub	sp, #8
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
 8005a14:	460b      	mov	r3, r1
 8005a16:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005a1e:	2b01      	cmp	r3, #1
 8005a20:	d101      	bne.n	8005a26 <HAL_PCD_SetAddress+0x1a>
 8005a22:	2302      	movs	r3, #2
 8005a24:	e012      	b.n	8005a4c <HAL_PCD_SetAddress+0x40>
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2201      	movs	r2, #1
 8005a2a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	78fa      	ldrb	r2, [r7, #3]
 8005a32:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	78fa      	ldrb	r2, [r7, #3]
 8005a3a:	4611      	mov	r1, r2
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f004 f973 	bl	8009d28 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005a4a:	2300      	movs	r3, #0
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3708      	adds	r7, #8
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b084      	sub	sp, #16
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	4608      	mov	r0, r1
 8005a5e:	4611      	mov	r1, r2
 8005a60:	461a      	mov	r2, r3
 8005a62:	4603      	mov	r3, r0
 8005a64:	70fb      	strb	r3, [r7, #3]
 8005a66:	460b      	mov	r3, r1
 8005a68:	803b      	strh	r3, [r7, #0]
 8005a6a:	4613      	mov	r3, r2
 8005a6c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a6e:	2300      	movs	r3, #0
 8005a70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005a72:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	da0f      	bge.n	8005a9a <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005a7a:	78fb      	ldrb	r3, [r7, #3]
 8005a7c:	f003 020f 	and.w	r2, r3, #15
 8005a80:	4613      	mov	r3, r2
 8005a82:	00db      	lsls	r3, r3, #3
 8005a84:	4413      	add	r3, r2
 8005a86:	009b      	lsls	r3, r3, #2
 8005a88:	3310      	adds	r3, #16
 8005a8a:	687a      	ldr	r2, [r7, #4]
 8005a8c:	4413      	add	r3, r2
 8005a8e:	3304      	adds	r3, #4
 8005a90:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	2201      	movs	r2, #1
 8005a96:	705a      	strb	r2, [r3, #1]
 8005a98:	e00f      	b.n	8005aba <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005a9a:	78fb      	ldrb	r3, [r7, #3]
 8005a9c:	f003 020f 	and.w	r2, r3, #15
 8005aa0:	4613      	mov	r3, r2
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4413      	add	r3, r2
 8005aa6:	009b      	lsls	r3, r3, #2
 8005aa8:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005aac:	687a      	ldr	r2, [r7, #4]
 8005aae:	4413      	add	r3, r2
 8005ab0:	3304      	adds	r3, #4
 8005ab2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2200      	movs	r2, #0
 8005ab8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8005aba:	78fb      	ldrb	r3, [r7, #3]
 8005abc:	f003 030f 	and.w	r3, r3, #15
 8005ac0:	b2da      	uxtb	r2, r3
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 8005ac6:	883b      	ldrh	r3, [r7, #0]
 8005ac8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	78ba      	ldrb	r2, [r7, #2]
 8005ad4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	785b      	ldrb	r3, [r3, #1]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d004      	beq.n	8005ae8 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	461a      	mov	r2, r3
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8005ae8:	78bb      	ldrb	r3, [r7, #2]
 8005aea:	2b02      	cmp	r3, #2
 8005aec:	d102      	bne.n	8005af4 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	2200      	movs	r2, #0
 8005af2:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005afa:	2b01      	cmp	r3, #1
 8005afc:	d101      	bne.n	8005b02 <HAL_PCD_EP_Open+0xae>
 8005afe:	2302      	movs	r3, #2
 8005b00:	e00e      	b.n	8005b20 <HAL_PCD_EP_Open+0xcc>
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2201      	movs	r2, #1
 8005b06:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	68f9      	ldr	r1, [r7, #12]
 8005b10:	4618      	mov	r0, r3
 8005b12:	f003 faf3 	bl	80090fc <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 8005b1e:	7afb      	ldrb	r3, [r7, #11]
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	3710      	adds	r7, #16
 8005b24:	46bd      	mov	sp, r7
 8005b26:	bd80      	pop	{r7, pc}

08005b28 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005b28:	b580      	push	{r7, lr}
 8005b2a:	b084      	sub	sp, #16
 8005b2c:	af00      	add	r7, sp, #0
 8005b2e:	6078      	str	r0, [r7, #4]
 8005b30:	460b      	mov	r3, r1
 8005b32:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005b34:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	da0f      	bge.n	8005b5c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005b3c:	78fb      	ldrb	r3, [r7, #3]
 8005b3e:	f003 020f 	and.w	r2, r3, #15
 8005b42:	4613      	mov	r3, r2
 8005b44:	00db      	lsls	r3, r3, #3
 8005b46:	4413      	add	r3, r2
 8005b48:	009b      	lsls	r3, r3, #2
 8005b4a:	3310      	adds	r3, #16
 8005b4c:	687a      	ldr	r2, [r7, #4]
 8005b4e:	4413      	add	r3, r2
 8005b50:	3304      	adds	r3, #4
 8005b52:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2201      	movs	r2, #1
 8005b58:	705a      	strb	r2, [r3, #1]
 8005b5a:	e00f      	b.n	8005b7c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005b5c:	78fb      	ldrb	r3, [r7, #3]
 8005b5e:	f003 020f 	and.w	r2, r3, #15
 8005b62:	4613      	mov	r3, r2
 8005b64:	00db      	lsls	r3, r3, #3
 8005b66:	4413      	add	r3, r2
 8005b68:	009b      	lsls	r3, r3, #2
 8005b6a:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b6e:	687a      	ldr	r2, [r7, #4]
 8005b70:	4413      	add	r3, r2
 8005b72:	3304      	adds	r3, #4
 8005b74:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005b7c:	78fb      	ldrb	r3, [r7, #3]
 8005b7e:	f003 030f 	and.w	r3, r3, #15
 8005b82:	b2da      	uxtb	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005b8e:	2b01      	cmp	r3, #1
 8005b90:	d101      	bne.n	8005b96 <HAL_PCD_EP_Close+0x6e>
 8005b92:	2302      	movs	r3, #2
 8005b94:	e00e      	b.n	8005bb4 <HAL_PCD_EP_Close+0x8c>
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2201      	movs	r2, #1
 8005b9a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68f9      	ldr	r1, [r7, #12]
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f003 fb31 	bl	800920c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b086      	sub	sp, #24
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	607a      	str	r2, [r7, #4]
 8005bc6:	603b      	str	r3, [r7, #0]
 8005bc8:	460b      	mov	r3, r1
 8005bca:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005bcc:	7afb      	ldrb	r3, [r7, #11]
 8005bce:	f003 020f 	and.w	r2, r3, #15
 8005bd2:	4613      	mov	r3, r2
 8005bd4:	00db      	lsls	r3, r3, #3
 8005bd6:	4413      	add	r3, r2
 8005bd8:	009b      	lsls	r3, r3, #2
 8005bda:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005bde:	68fa      	ldr	r2, [r7, #12]
 8005be0:	4413      	add	r3, r2
 8005be2:	3304      	adds	r3, #4
 8005be4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005be6:	697b      	ldr	r3, [r7, #20]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	683a      	ldr	r2, [r7, #0]
 8005bf0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	2200      	movs	r2, #0
 8005bf6:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005bfe:	7afb      	ldrb	r3, [r7, #11]
 8005c00:	f003 030f 	and.w	r3, r3, #15
 8005c04:	b2da      	uxtb	r2, r3
 8005c06:	697b      	ldr	r3, [r7, #20]
 8005c08:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	799b      	ldrb	r3, [r3, #6]
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d102      	bne.n	8005c18 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005c12:	687a      	ldr	r2, [r7, #4]
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6818      	ldr	r0, [r3, #0]
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	799b      	ldrb	r3, [r3, #6]
 8005c20:	461a      	mov	r2, r3
 8005c22:	6979      	ldr	r1, [r7, #20]
 8005c24:	f003 fbce 	bl	80093c4 <USB_EPStartXfer>

  return HAL_OK;
 8005c28:	2300      	movs	r3, #0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}

08005c32 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 8005c32:	b480      	push	{r7}
 8005c34:	b083      	sub	sp, #12
 8005c36:	af00      	add	r7, sp, #0
 8005c38:	6078      	str	r0, [r7, #4]
 8005c3a:	460b      	mov	r3, r1
 8005c3c:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8005c3e:	78fb      	ldrb	r3, [r7, #3]
 8005c40:	f003 020f 	and.w	r2, r3, #15
 8005c44:	6879      	ldr	r1, [r7, #4]
 8005c46:	4613      	mov	r3, r2
 8005c48:	00db      	lsls	r3, r3, #3
 8005c4a:	4413      	add	r3, r2
 8005c4c:	009b      	lsls	r3, r3, #2
 8005c4e:	440b      	add	r3, r1
 8005c50:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005c54:	681b      	ldr	r3, [r3, #0]
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	370c      	adds	r7, #12
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c60:	4770      	bx	lr

08005c62 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8005c62:	b580      	push	{r7, lr}
 8005c64:	b086      	sub	sp, #24
 8005c66:	af00      	add	r7, sp, #0
 8005c68:	60f8      	str	r0, [r7, #12]
 8005c6a:	607a      	str	r2, [r7, #4]
 8005c6c:	603b      	str	r3, [r7, #0]
 8005c6e:	460b      	mov	r3, r1
 8005c70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005c72:	7afb      	ldrb	r3, [r7, #11]
 8005c74:	f003 020f 	and.w	r2, r3, #15
 8005c78:	4613      	mov	r3, r2
 8005c7a:	00db      	lsls	r3, r3, #3
 8005c7c:	4413      	add	r3, r2
 8005c7e:	009b      	lsls	r3, r3, #2
 8005c80:	3310      	adds	r3, #16
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	4413      	add	r3, r2
 8005c86:	3304      	adds	r3, #4
 8005c88:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005c8a:	697b      	ldr	r3, [r7, #20]
 8005c8c:	687a      	ldr	r2, [r7, #4]
 8005c8e:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	683a      	ldr	r2, [r7, #0]
 8005c94:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8005c96:	697b      	ldr	r3, [r7, #20]
 8005c98:	2200      	movs	r2, #0
 8005c9a:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8005c9c:	697b      	ldr	r3, [r7, #20]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005ca2:	7afb      	ldrb	r3, [r7, #11]
 8005ca4:	f003 030f 	and.w	r3, r3, #15
 8005ca8:	b2da      	uxtb	r2, r3
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	799b      	ldrb	r3, [r3, #6]
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	d102      	bne.n	8005cbc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	6818      	ldr	r0, [r3, #0]
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	799b      	ldrb	r3, [r3, #6]
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	6979      	ldr	r1, [r7, #20]
 8005cc8:	f003 fb7c 	bl	80093c4 <USB_EPStartXfer>

  return HAL_OK;
 8005ccc:	2300      	movs	r3, #0
}
 8005cce:	4618      	mov	r0, r3
 8005cd0:	3718      	adds	r7, #24
 8005cd2:	46bd      	mov	sp, r7
 8005cd4:	bd80      	pop	{r7, pc}

08005cd6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005cd6:	b580      	push	{r7, lr}
 8005cd8:	b084      	sub	sp, #16
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	460b      	mov	r3, r1
 8005ce0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8005ce2:	78fb      	ldrb	r3, [r7, #3]
 8005ce4:	f003 030f 	and.w	r3, r3, #15
 8005ce8:	687a      	ldr	r2, [r7, #4]
 8005cea:	7912      	ldrb	r2, [r2, #4]
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d901      	bls.n	8005cf4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8005cf0:	2301      	movs	r3, #1
 8005cf2:	e04f      	b.n	8005d94 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005cf4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	da0f      	bge.n	8005d1c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005cfc:	78fb      	ldrb	r3, [r7, #3]
 8005cfe:	f003 020f 	and.w	r2, r3, #15
 8005d02:	4613      	mov	r3, r2
 8005d04:	00db      	lsls	r3, r3, #3
 8005d06:	4413      	add	r3, r2
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	3310      	adds	r3, #16
 8005d0c:	687a      	ldr	r2, [r7, #4]
 8005d0e:	4413      	add	r3, r2
 8005d10:	3304      	adds	r3, #4
 8005d12:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	2201      	movs	r2, #1
 8005d18:	705a      	strb	r2, [r3, #1]
 8005d1a:	e00d      	b.n	8005d38 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005d1c:	78fa      	ldrb	r2, [r7, #3]
 8005d1e:	4613      	mov	r3, r2
 8005d20:	00db      	lsls	r3, r3, #3
 8005d22:	4413      	add	r3, r2
 8005d24:	009b      	lsls	r3, r3, #2
 8005d26:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005d2a:	687a      	ldr	r2, [r7, #4]
 8005d2c:	4413      	add	r3, r2
 8005d2e:	3304      	adds	r3, #4
 8005d30:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005d3e:	78fb      	ldrb	r3, [r7, #3]
 8005d40:	f003 030f 	and.w	r3, r3, #15
 8005d44:	b2da      	uxtb	r2, r3
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005d50:	2b01      	cmp	r3, #1
 8005d52:	d101      	bne.n	8005d58 <HAL_PCD_EP_SetStall+0x82>
 8005d54:	2302      	movs	r3, #2
 8005d56:	e01d      	b.n	8005d94 <HAL_PCD_EP_SetStall+0xbe>
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	2201      	movs	r2, #1
 8005d5c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	68f9      	ldr	r1, [r7, #12]
 8005d66:	4618      	mov	r0, r3
 8005d68:	f003 ff0a 	bl	8009b80 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005d6c:	78fb      	ldrb	r3, [r7, #3]
 8005d6e:	f003 030f 	and.w	r3, r3, #15
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d109      	bne.n	8005d8a <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6818      	ldr	r0, [r3, #0]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	7999      	ldrb	r1, [r3, #6]
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d84:	461a      	mov	r2, r3
 8005d86:	f004 f8fb 	bl	8009f80 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005d92:	2300      	movs	r3, #0
}
 8005d94:	4618      	mov	r0, r3
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}

08005d9c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b084      	sub	sp, #16
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
 8005da4:	460b      	mov	r3, r1
 8005da6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8005da8:	78fb      	ldrb	r3, [r7, #3]
 8005daa:	f003 030f 	and.w	r3, r3, #15
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	7912      	ldrb	r2, [r2, #4]
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d901      	bls.n	8005dba <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8005db6:	2301      	movs	r3, #1
 8005db8:	e042      	b.n	8005e40 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005dba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	da0f      	bge.n	8005de2 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005dc2:	78fb      	ldrb	r3, [r7, #3]
 8005dc4:	f003 020f 	and.w	r2, r3, #15
 8005dc8:	4613      	mov	r3, r2
 8005dca:	00db      	lsls	r3, r3, #3
 8005dcc:	4413      	add	r3, r2
 8005dce:	009b      	lsls	r3, r3, #2
 8005dd0:	3310      	adds	r3, #16
 8005dd2:	687a      	ldr	r2, [r7, #4]
 8005dd4:	4413      	add	r3, r2
 8005dd6:	3304      	adds	r3, #4
 8005dd8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	705a      	strb	r2, [r3, #1]
 8005de0:	e00f      	b.n	8005e02 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005de2:	78fb      	ldrb	r3, [r7, #3]
 8005de4:	f003 020f 	and.w	r2, r3, #15
 8005de8:	4613      	mov	r3, r2
 8005dea:	00db      	lsls	r3, r3, #3
 8005dec:	4413      	add	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	4413      	add	r3, r2
 8005df8:	3304      	adds	r3, #4
 8005dfa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	2200      	movs	r2, #0
 8005e00:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	2200      	movs	r2, #0
 8005e06:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005e08:	78fb      	ldrb	r3, [r7, #3]
 8005e0a:	f003 030f 	and.w	r3, r3, #15
 8005e0e:	b2da      	uxtb	r2, r3
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005e1a:	2b01      	cmp	r3, #1
 8005e1c:	d101      	bne.n	8005e22 <HAL_PCD_EP_ClrStall+0x86>
 8005e1e:	2302      	movs	r3, #2
 8005e20:	e00e      	b.n	8005e40 <HAL_PCD_EP_ClrStall+0xa4>
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2201      	movs	r2, #1
 8005e26:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	68f9      	ldr	r1, [r7, #12]
 8005e30:	4618      	mov	r0, r3
 8005e32:	f003 ff13 	bl	8009c5c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005e3e:	2300      	movs	r3, #0
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3710      	adds	r7, #16
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	460b      	mov	r3, r1
 8005e52:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005e54:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	da0c      	bge.n	8005e76 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005e5c:	78fb      	ldrb	r3, [r7, #3]
 8005e5e:	f003 020f 	and.w	r2, r3, #15
 8005e62:	4613      	mov	r3, r2
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	4413      	add	r3, r2
 8005e68:	009b      	lsls	r3, r3, #2
 8005e6a:	3310      	adds	r3, #16
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	4413      	add	r3, r2
 8005e70:	3304      	adds	r3, #4
 8005e72:	60fb      	str	r3, [r7, #12]
 8005e74:	e00c      	b.n	8005e90 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005e76:	78fb      	ldrb	r3, [r7, #3]
 8005e78:	f003 020f 	and.w	r2, r3, #15
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	00db      	lsls	r3, r3, #3
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005e88:	687a      	ldr	r2, [r7, #4]
 8005e8a:	4413      	add	r3, r2
 8005e8c:	3304      	adds	r3, #4
 8005e8e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	68f9      	ldr	r1, [r7, #12]
 8005e96:	4618      	mov	r0, r3
 8005e98:	f003 fd32 	bl	8009900 <USB_EPStopXfer>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8005ea0:	7afb      	ldrb	r3, [r7, #11]
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}

08005eaa <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b08a      	sub	sp, #40	@ 0x28
 8005eae:	af02      	add	r7, sp, #8
 8005eb0:	6078      	str	r0, [r7, #4]
 8005eb2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eba:	697b      	ldr	r3, [r7, #20]
 8005ebc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8005ebe:	683a      	ldr	r2, [r7, #0]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	00db      	lsls	r3, r3, #3
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	3310      	adds	r3, #16
 8005eca:	687a      	ldr	r2, [r7, #4]
 8005ecc:	4413      	add	r3, r2
 8005ece:	3304      	adds	r3, #4
 8005ed0:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	695a      	ldr	r2, [r3, #20]
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	691b      	ldr	r3, [r3, #16]
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d901      	bls.n	8005ee2 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e06b      	b.n	8005fba <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	691a      	ldr	r2, [r3, #16]
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	69fa      	ldr	r2, [r7, #28]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d902      	bls.n	8005efe <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	689b      	ldr	r3, [r3, #8]
 8005efc:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005efe:	69fb      	ldr	r3, [r7, #28]
 8005f00:	3303      	adds	r3, #3
 8005f02:	089b      	lsrs	r3, r3, #2
 8005f04:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f06:	e02a      	b.n	8005f5e <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	691a      	ldr	r2, [r3, #16]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	1ad3      	subs	r3, r2, r3
 8005f12:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	689b      	ldr	r3, [r3, #8]
 8005f18:	69fa      	ldr	r2, [r7, #28]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	d902      	bls.n	8005f24 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	689b      	ldr	r3, [r3, #8]
 8005f22:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005f24:	69fb      	ldr	r3, [r7, #28]
 8005f26:	3303      	adds	r3, #3
 8005f28:	089b      	lsrs	r3, r3, #2
 8005f2a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	68d9      	ldr	r1, [r3, #12]
 8005f30:	683b      	ldr	r3, [r7, #0]
 8005f32:	b2da      	uxtb	r2, r3
 8005f34:	69fb      	ldr	r3, [r7, #28]
 8005f36:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005f3c:	9300      	str	r3, [sp, #0]
 8005f3e:	4603      	mov	r3, r0
 8005f40:	6978      	ldr	r0, [r7, #20]
 8005f42:	f003 fd87 	bl	8009a54 <USB_WritePacket>

    ep->xfer_buff  += len;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	68da      	ldr	r2, [r3, #12]
 8005f4a:	69fb      	ldr	r3, [r7, #28]
 8005f4c:	441a      	add	r2, r3
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	695a      	ldr	r2, [r3, #20]
 8005f56:	69fb      	ldr	r3, [r7, #28]
 8005f58:	441a      	add	r2, r3
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f5e:	683b      	ldr	r3, [r7, #0]
 8005f60:	015a      	lsls	r2, r3, #5
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	4413      	add	r3, r2
 8005f66:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005f6a:	699b      	ldr	r3, [r3, #24]
 8005f6c:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f6e:	69ba      	ldr	r2, [r7, #24]
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d809      	bhi.n	8005f88 <PCD_WriteEmptyTxFifo+0xde>
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	695a      	ldr	r2, [r3, #20]
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005f7c:	429a      	cmp	r2, r3
 8005f7e:	d203      	bcs.n	8005f88 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005f80:	68fb      	ldr	r3, [r7, #12]
 8005f82:	691b      	ldr	r3, [r3, #16]
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d1bf      	bne.n	8005f08 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	691a      	ldr	r2, [r3, #16]
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	695b      	ldr	r3, [r3, #20]
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d811      	bhi.n	8005fb8 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	2201      	movs	r2, #1
 8005f9c:	fa02 f303 	lsl.w	r3, r2, r3
 8005fa0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005fa2:	693b      	ldr	r3, [r7, #16]
 8005fa4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005fa8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005faa:	68bb      	ldr	r3, [r7, #8]
 8005fac:	43db      	mvns	r3, r3
 8005fae:	6939      	ldr	r1, [r7, #16]
 8005fb0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005fb4:	4013      	ands	r3, r2
 8005fb6:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005fb8:	2300      	movs	r3, #0
}
 8005fba:	4618      	mov	r0, r3
 8005fbc:	3720      	adds	r7, #32
 8005fbe:	46bd      	mov	sp, r7
 8005fc0:	bd80      	pop	{r7, pc}
	...

08005fc4 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b088      	sub	sp, #32
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005fd8:	69fb      	ldr	r3, [r7, #28]
 8005fda:	333c      	adds	r3, #60	@ 0x3c
 8005fdc:	3304      	adds	r3, #4
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	015a      	lsls	r2, r3, #5
 8005fe6:	69bb      	ldr	r3, [r7, #24]
 8005fe8:	4413      	add	r3, r2
 8005fea:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005fee:	689b      	ldr	r3, [r3, #8]
 8005ff0:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	799b      	ldrb	r3, [r3, #6]
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d17b      	bne.n	80060f2 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	f003 0308 	and.w	r3, r3, #8
 8006000:	2b00      	cmp	r3, #0
 8006002:	d015      	beq.n	8006030 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006004:	697b      	ldr	r3, [r7, #20]
 8006006:	4a61      	ldr	r2, [pc, #388]	@ (800618c <PCD_EP_OutXfrComplete_int+0x1c8>)
 8006008:	4293      	cmp	r3, r2
 800600a:	f240 80b9 	bls.w	8006180 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800600e:	693b      	ldr	r3, [r7, #16]
 8006010:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 80b3 	beq.w	8006180 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	015a      	lsls	r2, r3, #5
 800601e:	69bb      	ldr	r3, [r7, #24]
 8006020:	4413      	add	r3, r2
 8006022:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006026:	461a      	mov	r2, r3
 8006028:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800602c:	6093      	str	r3, [r2, #8]
 800602e:	e0a7      	b.n	8006180 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8006030:	693b      	ldr	r3, [r7, #16]
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d009      	beq.n	800604e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	015a      	lsls	r2, r3, #5
 800603e:	69bb      	ldr	r3, [r7, #24]
 8006040:	4413      	add	r3, r2
 8006042:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006046:	461a      	mov	r2, r3
 8006048:	2320      	movs	r3, #32
 800604a:	6093      	str	r3, [r2, #8]
 800604c:	e098      	b.n	8006180 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006054:	2b00      	cmp	r3, #0
 8006056:	f040 8093 	bne.w	8006180 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800605a:	697b      	ldr	r3, [r7, #20]
 800605c:	4a4b      	ldr	r2, [pc, #300]	@ (800618c <PCD_EP_OutXfrComplete_int+0x1c8>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d90f      	bls.n	8006082 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8006062:	693b      	ldr	r3, [r7, #16]
 8006064:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8006068:	2b00      	cmp	r3, #0
 800606a:	d00a      	beq.n	8006082 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	015a      	lsls	r2, r3, #5
 8006070:	69bb      	ldr	r3, [r7, #24]
 8006072:	4413      	add	r3, r2
 8006074:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006078:	461a      	mov	r2, r3
 800607a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800607e:	6093      	str	r3, [r2, #8]
 8006080:	e07e      	b.n	8006180 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8006082:	683a      	ldr	r2, [r7, #0]
 8006084:	4613      	mov	r3, r2
 8006086:	00db      	lsls	r3, r3, #3
 8006088:	4413      	add	r3, r2
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8006090:	687a      	ldr	r2, [r7, #4]
 8006092:	4413      	add	r3, r2
 8006094:	3304      	adds	r3, #4
 8006096:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6a1a      	ldr	r2, [r3, #32]
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	0159      	lsls	r1, r3, #5
 80060a0:	69bb      	ldr	r3, [r7, #24]
 80060a2:	440b      	add	r3, r1
 80060a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060ae:	1ad2      	subs	r2, r2, r3
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d114      	bne.n	80060e4 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	691b      	ldr	r3, [r3, #16]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d109      	bne.n	80060d6 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6818      	ldr	r0, [r3, #0]
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80060cc:	461a      	mov	r2, r3
 80060ce:	2101      	movs	r1, #1
 80060d0:	f003 ff56 	bl	8009f80 <USB_EP0_OutStart>
 80060d4:	e006      	b.n	80060e4 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	68da      	ldr	r2, [r3, #12]
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	695b      	ldr	r3, [r3, #20]
 80060de:	441a      	add	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	4619      	mov	r1, r3
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f006 fa3a 	bl	800c564 <HAL_PCD_DataOutStageCallback>
 80060f0:	e046      	b.n	8006180 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80060f2:	697b      	ldr	r3, [r7, #20]
 80060f4:	4a26      	ldr	r2, [pc, #152]	@ (8006190 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80060f6:	4293      	cmp	r3, r2
 80060f8:	d124      	bne.n	8006144 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80060fa:	693b      	ldr	r3, [r7, #16]
 80060fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8006100:	2b00      	cmp	r3, #0
 8006102:	d00a      	beq.n	800611a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	015a      	lsls	r2, r3, #5
 8006108:	69bb      	ldr	r3, [r7, #24]
 800610a:	4413      	add	r3, r2
 800610c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006110:	461a      	mov	r2, r3
 8006112:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006116:	6093      	str	r3, [r2, #8]
 8006118:	e032      	b.n	8006180 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d008      	beq.n	8006136 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8006124:	683b      	ldr	r3, [r7, #0]
 8006126:	015a      	lsls	r2, r3, #5
 8006128:	69bb      	ldr	r3, [r7, #24]
 800612a:	4413      	add	r3, r2
 800612c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8006130:	461a      	mov	r2, r3
 8006132:	2320      	movs	r3, #32
 8006134:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	4619      	mov	r1, r3
 800613c:	6878      	ldr	r0, [r7, #4]
 800613e:	f006 fa11 	bl	800c564 <HAL_PCD_DataOutStageCallback>
 8006142:	e01d      	b.n	8006180 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	2b00      	cmp	r3, #0
 8006148:	d114      	bne.n	8006174 <PCD_EP_OutXfrComplete_int+0x1b0>
 800614a:	6879      	ldr	r1, [r7, #4]
 800614c:	683a      	ldr	r2, [r7, #0]
 800614e:	4613      	mov	r3, r2
 8006150:	00db      	lsls	r3, r3, #3
 8006152:	4413      	add	r3, r2
 8006154:	009b      	lsls	r3, r3, #2
 8006156:	440b      	add	r3, r1
 8006158:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d108      	bne.n	8006174 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800616c:	461a      	mov	r2, r3
 800616e:	2100      	movs	r1, #0
 8006170:	f003 ff06 	bl	8009f80 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	b2db      	uxtb	r3, r3
 8006178:	4619      	mov	r1, r3
 800617a:	6878      	ldr	r0, [r7, #4]
 800617c:	f006 f9f2 	bl	800c564 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3720      	adds	r7, #32
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}
 800618a:	bf00      	nop
 800618c:	4f54300a 	.word	0x4f54300a
 8006190:	4f54310a 	.word	0x4f54310a

08006194 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	6078      	str	r0, [r7, #4]
 800619c:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80061a8:	697b      	ldr	r3, [r7, #20]
 80061aa:	333c      	adds	r3, #60	@ 0x3c
 80061ac:	3304      	adds	r3, #4
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80061b2:	683b      	ldr	r3, [r7, #0]
 80061b4:	015a      	lsls	r2, r3, #5
 80061b6:	693b      	ldr	r3, [r7, #16]
 80061b8:	4413      	add	r3, r2
 80061ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061be:	689b      	ldr	r3, [r3, #8]
 80061c0:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	4a15      	ldr	r2, [pc, #84]	@ (800621c <PCD_EP_OutSetupPacket_int+0x88>)
 80061c6:	4293      	cmp	r3, r2
 80061c8:	d90e      	bls.n	80061e8 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d009      	beq.n	80061e8 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80061d4:	683b      	ldr	r3, [r7, #0]
 80061d6:	015a      	lsls	r2, r3, #5
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	4413      	add	r3, r2
 80061dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80061e0:	461a      	mov	r2, r3
 80061e2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80061e6:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f006 f9a9 	bl	800c540 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	4a0a      	ldr	r2, [pc, #40]	@ (800621c <PCD_EP_OutSetupPacket_int+0x88>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d90c      	bls.n	8006210 <PCD_EP_OutSetupPacket_int+0x7c>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	799b      	ldrb	r3, [r3, #6]
 80061fa:	2b01      	cmp	r3, #1
 80061fc:	d108      	bne.n	8006210 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	6818      	ldr	r0, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8006208:	461a      	mov	r2, r3
 800620a:	2101      	movs	r1, #1
 800620c:	f003 feb8 	bl	8009f80 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8006210:	2300      	movs	r3, #0
}
 8006212:	4618      	mov	r0, r3
 8006214:	3718      	adds	r7, #24
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	4f54300a 	.word	0x4f54300a

08006220 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8006220:	b480      	push	{r7}
 8006222:	b085      	sub	sp, #20
 8006224:	af00      	add	r7, sp, #0
 8006226:	6078      	str	r0, [r7, #4]
 8006228:	460b      	mov	r3, r1
 800622a:	70fb      	strb	r3, [r7, #3]
 800622c:	4613      	mov	r3, r2
 800622e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006236:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8006238:	78fb      	ldrb	r3, [r7, #3]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d107      	bne.n	800624e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800623e:	883b      	ldrh	r3, [r7, #0]
 8006240:	0419      	lsls	r1, r3, #16
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	68ba      	ldr	r2, [r7, #8]
 8006248:	430a      	orrs	r2, r1
 800624a:	629a      	str	r2, [r3, #40]	@ 0x28
 800624c:	e028      	b.n	80062a0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006254:	0c1b      	lsrs	r3, r3, #16
 8006256:	68ba      	ldr	r2, [r7, #8]
 8006258:	4413      	add	r3, r2
 800625a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 800625c:	2300      	movs	r3, #0
 800625e:	73fb      	strb	r3, [r7, #15]
 8006260:	e00d      	b.n	800627e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681a      	ldr	r2, [r3, #0]
 8006266:	7bfb      	ldrb	r3, [r7, #15]
 8006268:	3340      	adds	r3, #64	@ 0x40
 800626a:	009b      	lsls	r3, r3, #2
 800626c:	4413      	add	r3, r2
 800626e:	685b      	ldr	r3, [r3, #4]
 8006270:	0c1b      	lsrs	r3, r3, #16
 8006272:	68ba      	ldr	r2, [r7, #8]
 8006274:	4413      	add	r3, r2
 8006276:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8006278:	7bfb      	ldrb	r3, [r7, #15]
 800627a:	3301      	adds	r3, #1
 800627c:	73fb      	strb	r3, [r7, #15]
 800627e:	7bfa      	ldrb	r2, [r7, #15]
 8006280:	78fb      	ldrb	r3, [r7, #3]
 8006282:	3b01      	subs	r3, #1
 8006284:	429a      	cmp	r2, r3
 8006286:	d3ec      	bcc.n	8006262 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8006288:	883b      	ldrh	r3, [r7, #0]
 800628a:	0418      	lsls	r0, r3, #16
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	6819      	ldr	r1, [r3, #0]
 8006290:	78fb      	ldrb	r3, [r7, #3]
 8006292:	3b01      	subs	r3, #1
 8006294:	68ba      	ldr	r2, [r7, #8]
 8006296:	4302      	orrs	r2, r0
 8006298:	3340      	adds	r3, #64	@ 0x40
 800629a:	009b      	lsls	r3, r3, #2
 800629c:	440b      	add	r3, r1
 800629e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	3714      	adds	r7, #20
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	887a      	ldrh	r2, [r7, #2]
 80062c0:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80062c2:	2300      	movs	r3, #0
}
 80062c4:	4618      	mov	r0, r3
 80062c6:	370c      	adds	r7, #12
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr

080062d0 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	460b      	mov	r3, r1
 80062da:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80062dc:	bf00      	nop
 80062de:	370c      	adds	r7, #12
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e267      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f003 0301 	and.w	r3, r3, #1
 8006302:	2b00      	cmp	r3, #0
 8006304:	d075      	beq.n	80063f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006306:	4b88      	ldr	r3, [pc, #544]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006308:	689b      	ldr	r3, [r3, #8]
 800630a:	f003 030c 	and.w	r3, r3, #12
 800630e:	2b04      	cmp	r3, #4
 8006310:	d00c      	beq.n	800632c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006312:	4b85      	ldr	r3, [pc, #532]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800631a:	2b08      	cmp	r3, #8
 800631c:	d112      	bne.n	8006344 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800631e:	4b82      	ldr	r3, [pc, #520]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006320:	685b      	ldr	r3, [r3, #4]
 8006322:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006326:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800632a:	d10b      	bne.n	8006344 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800632c:	4b7e      	ldr	r3, [pc, #504]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006334:	2b00      	cmp	r3, #0
 8006336:	d05b      	beq.n	80063f0 <HAL_RCC_OscConfig+0x108>
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d157      	bne.n	80063f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006340:	2301      	movs	r3, #1
 8006342:	e242      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	685b      	ldr	r3, [r3, #4]
 8006348:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800634c:	d106      	bne.n	800635c <HAL_RCC_OscConfig+0x74>
 800634e:	4b76      	ldr	r3, [pc, #472]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	4a75      	ldr	r2, [pc, #468]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006354:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006358:	6013      	str	r3, [r2, #0]
 800635a:	e01d      	b.n	8006398 <HAL_RCC_OscConfig+0xb0>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006364:	d10c      	bne.n	8006380 <HAL_RCC_OscConfig+0x98>
 8006366:	4b70      	ldr	r3, [pc, #448]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	4a6f      	ldr	r2, [pc, #444]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 800636c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006370:	6013      	str	r3, [r2, #0]
 8006372:	4b6d      	ldr	r3, [pc, #436]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	4a6c      	ldr	r2, [pc, #432]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006378:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800637c:	6013      	str	r3, [r2, #0]
 800637e:	e00b      	b.n	8006398 <HAL_RCC_OscConfig+0xb0>
 8006380:	4b69      	ldr	r3, [pc, #420]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	4a68      	ldr	r2, [pc, #416]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006386:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800638a:	6013      	str	r3, [r2, #0]
 800638c:	4b66      	ldr	r3, [pc, #408]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4a65      	ldr	r2, [pc, #404]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006392:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006396:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d013      	beq.n	80063c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063a0:	f7fd fe54 	bl	800404c <HAL_GetTick>
 80063a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063a6:	e008      	b.n	80063ba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063a8:	f7fd fe50 	bl	800404c <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	693b      	ldr	r3, [r7, #16]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	2b64      	cmp	r3, #100	@ 0x64
 80063b4:	d901      	bls.n	80063ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80063b6:	2303      	movs	r3, #3
 80063b8:	e207      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063ba:	4b5b      	ldr	r3, [pc, #364]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d0f0      	beq.n	80063a8 <HAL_RCC_OscConfig+0xc0>
 80063c6:	e014      	b.n	80063f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063c8:	f7fd fe40 	bl	800404c <HAL_GetTick>
 80063cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063ce:	e008      	b.n	80063e2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063d0:	f7fd fe3c 	bl	800404c <HAL_GetTick>
 80063d4:	4602      	mov	r2, r0
 80063d6:	693b      	ldr	r3, [r7, #16]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	2b64      	cmp	r3, #100	@ 0x64
 80063dc:	d901      	bls.n	80063e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80063de:	2303      	movs	r3, #3
 80063e0:	e1f3      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80063e2:	4b51      	ldr	r3, [pc, #324]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1f0      	bne.n	80063d0 <HAL_RCC_OscConfig+0xe8>
 80063ee:	e000      	b.n	80063f2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80063f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f003 0302 	and.w	r3, r3, #2
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d063      	beq.n	80064c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80063fe:	4b4a      	ldr	r3, [pc, #296]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	f003 030c 	and.w	r3, r3, #12
 8006406:	2b00      	cmp	r3, #0
 8006408:	d00b      	beq.n	8006422 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800640a:	4b47      	ldr	r3, [pc, #284]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006412:	2b08      	cmp	r3, #8
 8006414:	d11c      	bne.n	8006450 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006416:	4b44      	ldr	r3, [pc, #272]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800641e:	2b00      	cmp	r3, #0
 8006420:	d116      	bne.n	8006450 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006422:	4b41      	ldr	r3, [pc, #260]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f003 0302 	and.w	r3, r3, #2
 800642a:	2b00      	cmp	r3, #0
 800642c:	d005      	beq.n	800643a <HAL_RCC_OscConfig+0x152>
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	2b01      	cmp	r3, #1
 8006434:	d001      	beq.n	800643a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e1c7      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800643a:	4b3b      	ldr	r3, [pc, #236]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	691b      	ldr	r3, [r3, #16]
 8006446:	00db      	lsls	r3, r3, #3
 8006448:	4937      	ldr	r1, [pc, #220]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 800644a:	4313      	orrs	r3, r2
 800644c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800644e:	e03a      	b.n	80064c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	68db      	ldr	r3, [r3, #12]
 8006454:	2b00      	cmp	r3, #0
 8006456:	d020      	beq.n	800649a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006458:	4b34      	ldr	r3, [pc, #208]	@ (800652c <HAL_RCC_OscConfig+0x244>)
 800645a:	2201      	movs	r2, #1
 800645c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800645e:	f7fd fdf5 	bl	800404c <HAL_GetTick>
 8006462:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006464:	e008      	b.n	8006478 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006466:	f7fd fdf1 	bl	800404c <HAL_GetTick>
 800646a:	4602      	mov	r2, r0
 800646c:	693b      	ldr	r3, [r7, #16]
 800646e:	1ad3      	subs	r3, r2, r3
 8006470:	2b02      	cmp	r3, #2
 8006472:	d901      	bls.n	8006478 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006474:	2303      	movs	r3, #3
 8006476:	e1a8      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006478:	4b2b      	ldr	r3, [pc, #172]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	f003 0302 	and.w	r3, r3, #2
 8006480:	2b00      	cmp	r3, #0
 8006482:	d0f0      	beq.n	8006466 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006484:	4b28      	ldr	r3, [pc, #160]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	00db      	lsls	r3, r3, #3
 8006492:	4925      	ldr	r1, [pc, #148]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 8006494:	4313      	orrs	r3, r2
 8006496:	600b      	str	r3, [r1, #0]
 8006498:	e015      	b.n	80064c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800649a:	4b24      	ldr	r3, [pc, #144]	@ (800652c <HAL_RCC_OscConfig+0x244>)
 800649c:	2200      	movs	r2, #0
 800649e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064a0:	f7fd fdd4 	bl	800404c <HAL_GetTick>
 80064a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064a6:	e008      	b.n	80064ba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064a8:	f7fd fdd0 	bl	800404c <HAL_GetTick>
 80064ac:	4602      	mov	r2, r0
 80064ae:	693b      	ldr	r3, [r7, #16]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	2b02      	cmp	r3, #2
 80064b4:	d901      	bls.n	80064ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80064b6:	2303      	movs	r3, #3
 80064b8:	e187      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064ba:	4b1b      	ldr	r3, [pc, #108]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	f003 0302 	and.w	r3, r3, #2
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d1f0      	bne.n	80064a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	f003 0308 	and.w	r3, r3, #8
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d036      	beq.n	8006540 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	695b      	ldr	r3, [r3, #20]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d016      	beq.n	8006508 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80064da:	4b15      	ldr	r3, [pc, #84]	@ (8006530 <HAL_RCC_OscConfig+0x248>)
 80064dc:	2201      	movs	r2, #1
 80064de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80064e0:	f7fd fdb4 	bl	800404c <HAL_GetTick>
 80064e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064e6:	e008      	b.n	80064fa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80064e8:	f7fd fdb0 	bl	800404c <HAL_GetTick>
 80064ec:	4602      	mov	r2, r0
 80064ee:	693b      	ldr	r3, [r7, #16]
 80064f0:	1ad3      	subs	r3, r2, r3
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d901      	bls.n	80064fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e167      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80064fa:	4b0b      	ldr	r3, [pc, #44]	@ (8006528 <HAL_RCC_OscConfig+0x240>)
 80064fc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80064fe:	f003 0302 	and.w	r3, r3, #2
 8006502:	2b00      	cmp	r3, #0
 8006504:	d0f0      	beq.n	80064e8 <HAL_RCC_OscConfig+0x200>
 8006506:	e01b      	b.n	8006540 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006508:	4b09      	ldr	r3, [pc, #36]	@ (8006530 <HAL_RCC_OscConfig+0x248>)
 800650a:	2200      	movs	r2, #0
 800650c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800650e:	f7fd fd9d 	bl	800404c <HAL_GetTick>
 8006512:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006514:	e00e      	b.n	8006534 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006516:	f7fd fd99 	bl	800404c <HAL_GetTick>
 800651a:	4602      	mov	r2, r0
 800651c:	693b      	ldr	r3, [r7, #16]
 800651e:	1ad3      	subs	r3, r2, r3
 8006520:	2b02      	cmp	r3, #2
 8006522:	d907      	bls.n	8006534 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006524:	2303      	movs	r3, #3
 8006526:	e150      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
 8006528:	40023800 	.word	0x40023800
 800652c:	42470000 	.word	0x42470000
 8006530:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006534:	4b88      	ldr	r3, [pc, #544]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006536:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b00      	cmp	r3, #0
 800653e:	d1ea      	bne.n	8006516 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f003 0304 	and.w	r3, r3, #4
 8006548:	2b00      	cmp	r3, #0
 800654a:	f000 8097 	beq.w	800667c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800654e:	2300      	movs	r3, #0
 8006550:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006552:	4b81      	ldr	r3, [pc, #516]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006554:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006556:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800655a:	2b00      	cmp	r3, #0
 800655c:	d10f      	bne.n	800657e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800655e:	2300      	movs	r3, #0
 8006560:	60bb      	str	r3, [r7, #8]
 8006562:	4b7d      	ldr	r3, [pc, #500]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006566:	4a7c      	ldr	r2, [pc, #496]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006568:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800656c:	6413      	str	r3, [r2, #64]	@ 0x40
 800656e:	4b7a      	ldr	r3, [pc, #488]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006570:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006572:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006576:	60bb      	str	r3, [r7, #8]
 8006578:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800657a:	2301      	movs	r3, #1
 800657c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800657e:	4b77      	ldr	r3, [pc, #476]	@ (800675c <HAL_RCC_OscConfig+0x474>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006586:	2b00      	cmp	r3, #0
 8006588:	d118      	bne.n	80065bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800658a:	4b74      	ldr	r3, [pc, #464]	@ (800675c <HAL_RCC_OscConfig+0x474>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a73      	ldr	r2, [pc, #460]	@ (800675c <HAL_RCC_OscConfig+0x474>)
 8006590:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006594:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006596:	f7fd fd59 	bl	800404c <HAL_GetTick>
 800659a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800659c:	e008      	b.n	80065b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800659e:	f7fd fd55 	bl	800404c <HAL_GetTick>
 80065a2:	4602      	mov	r2, r0
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	1ad3      	subs	r3, r2, r3
 80065a8:	2b02      	cmp	r3, #2
 80065aa:	d901      	bls.n	80065b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065ac:	2303      	movs	r3, #3
 80065ae:	e10c      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065b0:	4b6a      	ldr	r3, [pc, #424]	@ (800675c <HAL_RCC_OscConfig+0x474>)
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d0f0      	beq.n	800659e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	2b01      	cmp	r3, #1
 80065c2:	d106      	bne.n	80065d2 <HAL_RCC_OscConfig+0x2ea>
 80065c4:	4b64      	ldr	r3, [pc, #400]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 80065c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065c8:	4a63      	ldr	r2, [pc, #396]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 80065ca:	f043 0301 	orr.w	r3, r3, #1
 80065ce:	6713      	str	r3, [r2, #112]	@ 0x70
 80065d0:	e01c      	b.n	800660c <HAL_RCC_OscConfig+0x324>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	689b      	ldr	r3, [r3, #8]
 80065d6:	2b05      	cmp	r3, #5
 80065d8:	d10c      	bne.n	80065f4 <HAL_RCC_OscConfig+0x30c>
 80065da:	4b5f      	ldr	r3, [pc, #380]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 80065dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065de:	4a5e      	ldr	r2, [pc, #376]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 80065e0:	f043 0304 	orr.w	r3, r3, #4
 80065e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80065e6:	4b5c      	ldr	r3, [pc, #368]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 80065e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065ea:	4a5b      	ldr	r2, [pc, #364]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 80065ec:	f043 0301 	orr.w	r3, r3, #1
 80065f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80065f2:	e00b      	b.n	800660c <HAL_RCC_OscConfig+0x324>
 80065f4:	4b58      	ldr	r3, [pc, #352]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 80065f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80065f8:	4a57      	ldr	r2, [pc, #348]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 80065fa:	f023 0301 	bic.w	r3, r3, #1
 80065fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006600:	4b55      	ldr	r3, [pc, #340]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006602:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006604:	4a54      	ldr	r2, [pc, #336]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006606:	f023 0304 	bic.w	r3, r3, #4
 800660a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d015      	beq.n	8006640 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006614:	f7fd fd1a 	bl	800404c <HAL_GetTick>
 8006618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800661a:	e00a      	b.n	8006632 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800661c:	f7fd fd16 	bl	800404c <HAL_GetTick>
 8006620:	4602      	mov	r2, r0
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	1ad3      	subs	r3, r2, r3
 8006626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800662a:	4293      	cmp	r3, r2
 800662c:	d901      	bls.n	8006632 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800662e:	2303      	movs	r3, #3
 8006630:	e0cb      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006632:	4b49      	ldr	r3, [pc, #292]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006636:	f003 0302 	and.w	r3, r3, #2
 800663a:	2b00      	cmp	r3, #0
 800663c:	d0ee      	beq.n	800661c <HAL_RCC_OscConfig+0x334>
 800663e:	e014      	b.n	800666a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006640:	f7fd fd04 	bl	800404c <HAL_GetTick>
 8006644:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006646:	e00a      	b.n	800665e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006648:	f7fd fd00 	bl	800404c <HAL_GetTick>
 800664c:	4602      	mov	r2, r0
 800664e:	693b      	ldr	r3, [r7, #16]
 8006650:	1ad3      	subs	r3, r2, r3
 8006652:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006656:	4293      	cmp	r3, r2
 8006658:	d901      	bls.n	800665e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800665a:	2303      	movs	r3, #3
 800665c:	e0b5      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800665e:	4b3e      	ldr	r3, [pc, #248]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006660:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006662:	f003 0302 	and.w	r3, r3, #2
 8006666:	2b00      	cmp	r3, #0
 8006668:	d1ee      	bne.n	8006648 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800666a:	7dfb      	ldrb	r3, [r7, #23]
 800666c:	2b01      	cmp	r3, #1
 800666e:	d105      	bne.n	800667c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006670:	4b39      	ldr	r3, [pc, #228]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006674:	4a38      	ldr	r2, [pc, #224]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006676:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800667a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	699b      	ldr	r3, [r3, #24]
 8006680:	2b00      	cmp	r3, #0
 8006682:	f000 80a1 	beq.w	80067c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006686:	4b34      	ldr	r3, [pc, #208]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	2b08      	cmp	r3, #8
 8006690:	d05c      	beq.n	800674c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	699b      	ldr	r3, [r3, #24]
 8006696:	2b02      	cmp	r3, #2
 8006698:	d141      	bne.n	800671e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800669a:	4b31      	ldr	r3, [pc, #196]	@ (8006760 <HAL_RCC_OscConfig+0x478>)
 800669c:	2200      	movs	r2, #0
 800669e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066a0:	f7fd fcd4 	bl	800404c <HAL_GetTick>
 80066a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066a6:	e008      	b.n	80066ba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066a8:	f7fd fcd0 	bl	800404c <HAL_GetTick>
 80066ac:	4602      	mov	r2, r0
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	1ad3      	subs	r3, r2, r3
 80066b2:	2b02      	cmp	r3, #2
 80066b4:	d901      	bls.n	80066ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80066b6:	2303      	movs	r3, #3
 80066b8:	e087      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066ba:	4b27      	ldr	r3, [pc, #156]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80066c2:	2b00      	cmp	r3, #0
 80066c4:	d1f0      	bne.n	80066a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	69da      	ldr	r2, [r3, #28]
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	6a1b      	ldr	r3, [r3, #32]
 80066ce:	431a      	orrs	r2, r3
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066d4:	019b      	lsls	r3, r3, #6
 80066d6:	431a      	orrs	r2, r3
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80066dc:	085b      	lsrs	r3, r3, #1
 80066de:	3b01      	subs	r3, #1
 80066e0:	041b      	lsls	r3, r3, #16
 80066e2:	431a      	orrs	r2, r3
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e8:	061b      	lsls	r3, r3, #24
 80066ea:	491b      	ldr	r1, [pc, #108]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 80066ec:	4313      	orrs	r3, r2
 80066ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80066f0:	4b1b      	ldr	r3, [pc, #108]	@ (8006760 <HAL_RCC_OscConfig+0x478>)
 80066f2:	2201      	movs	r2, #1
 80066f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066f6:	f7fd fca9 	bl	800404c <HAL_GetTick>
 80066fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066fc:	e008      	b.n	8006710 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066fe:	f7fd fca5 	bl	800404c <HAL_GetTick>
 8006702:	4602      	mov	r2, r0
 8006704:	693b      	ldr	r3, [r7, #16]
 8006706:	1ad3      	subs	r3, r2, r3
 8006708:	2b02      	cmp	r3, #2
 800670a:	d901      	bls.n	8006710 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800670c:	2303      	movs	r3, #3
 800670e:	e05c      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006710:	4b11      	ldr	r3, [pc, #68]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006718:	2b00      	cmp	r3, #0
 800671a:	d0f0      	beq.n	80066fe <HAL_RCC_OscConfig+0x416>
 800671c:	e054      	b.n	80067c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800671e:	4b10      	ldr	r3, [pc, #64]	@ (8006760 <HAL_RCC_OscConfig+0x478>)
 8006720:	2200      	movs	r2, #0
 8006722:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006724:	f7fd fc92 	bl	800404c <HAL_GetTick>
 8006728:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800672a:	e008      	b.n	800673e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800672c:	f7fd fc8e 	bl	800404c <HAL_GetTick>
 8006730:	4602      	mov	r2, r0
 8006732:	693b      	ldr	r3, [r7, #16]
 8006734:	1ad3      	subs	r3, r2, r3
 8006736:	2b02      	cmp	r3, #2
 8006738:	d901      	bls.n	800673e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800673a:	2303      	movs	r3, #3
 800673c:	e045      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800673e:	4b06      	ldr	r3, [pc, #24]	@ (8006758 <HAL_RCC_OscConfig+0x470>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006746:	2b00      	cmp	r3, #0
 8006748:	d1f0      	bne.n	800672c <HAL_RCC_OscConfig+0x444>
 800674a:	e03d      	b.n	80067c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	699b      	ldr	r3, [r3, #24]
 8006750:	2b01      	cmp	r3, #1
 8006752:	d107      	bne.n	8006764 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006754:	2301      	movs	r3, #1
 8006756:	e038      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
 8006758:	40023800 	.word	0x40023800
 800675c:	40007000 	.word	0x40007000
 8006760:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006764:	4b1b      	ldr	r3, [pc, #108]	@ (80067d4 <HAL_RCC_OscConfig+0x4ec>)
 8006766:	685b      	ldr	r3, [r3, #4]
 8006768:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	699b      	ldr	r3, [r3, #24]
 800676e:	2b01      	cmp	r3, #1
 8006770:	d028      	beq.n	80067c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800677c:	429a      	cmp	r2, r3
 800677e:	d121      	bne.n	80067c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800678a:	429a      	cmp	r2, r3
 800678c:	d11a      	bne.n	80067c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800678e:	68fa      	ldr	r2, [r7, #12]
 8006790:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006794:	4013      	ands	r3, r2
 8006796:	687a      	ldr	r2, [r7, #4]
 8006798:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800679a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800679c:	4293      	cmp	r3, r2
 800679e:	d111      	bne.n	80067c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067aa:	085b      	lsrs	r3, r3, #1
 80067ac:	3b01      	subs	r3, #1
 80067ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067b0:	429a      	cmp	r2, r3
 80067b2:	d107      	bne.n	80067c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d001      	beq.n	80067c8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e000      	b.n	80067ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3718      	adds	r7, #24
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}
 80067d2:	bf00      	nop
 80067d4:	40023800 	.word	0x40023800

080067d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b084      	sub	sp, #16
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
 80067e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d101      	bne.n	80067ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80067e8:	2301      	movs	r3, #1
 80067ea:	e0cc      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80067ec:	4b68      	ldr	r3, [pc, #416]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	f003 0307 	and.w	r3, r3, #7
 80067f4:	683a      	ldr	r2, [r7, #0]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d90c      	bls.n	8006814 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80067fa:	4b65      	ldr	r3, [pc, #404]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 80067fc:	683a      	ldr	r2, [r7, #0]
 80067fe:	b2d2      	uxtb	r2, r2
 8006800:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006802:	4b63      	ldr	r3, [pc, #396]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	f003 0307 	and.w	r3, r3, #7
 800680a:	683a      	ldr	r2, [r7, #0]
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e0b8      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f003 0302 	and.w	r3, r3, #2
 800681c:	2b00      	cmp	r3, #0
 800681e:	d020      	beq.n	8006862 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	681b      	ldr	r3, [r3, #0]
 8006824:	f003 0304 	and.w	r3, r3, #4
 8006828:	2b00      	cmp	r3, #0
 800682a:	d005      	beq.n	8006838 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800682c:	4b59      	ldr	r3, [pc, #356]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800682e:	689b      	ldr	r3, [r3, #8]
 8006830:	4a58      	ldr	r2, [pc, #352]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006832:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006836:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0308 	and.w	r3, r3, #8
 8006840:	2b00      	cmp	r3, #0
 8006842:	d005      	beq.n	8006850 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006844:	4b53      	ldr	r3, [pc, #332]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	4a52      	ldr	r2, [pc, #328]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800684a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800684e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006850:	4b50      	ldr	r3, [pc, #320]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006852:	689b      	ldr	r3, [r3, #8]
 8006854:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	689b      	ldr	r3, [r3, #8]
 800685c:	494d      	ldr	r1, [pc, #308]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800685e:	4313      	orrs	r3, r2
 8006860:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	f003 0301 	and.w	r3, r3, #1
 800686a:	2b00      	cmp	r3, #0
 800686c:	d044      	beq.n	80068f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	2b01      	cmp	r3, #1
 8006874:	d107      	bne.n	8006886 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006876:	4b47      	ldr	r3, [pc, #284]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800687e:	2b00      	cmp	r3, #0
 8006880:	d119      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006882:	2301      	movs	r3, #1
 8006884:	e07f      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	685b      	ldr	r3, [r3, #4]
 800688a:	2b02      	cmp	r3, #2
 800688c:	d003      	beq.n	8006896 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006892:	2b03      	cmp	r3, #3
 8006894:	d107      	bne.n	80068a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006896:	4b3f      	ldr	r3, [pc, #252]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d109      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	e06f      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068a6:	4b3b      	ldr	r3, [pc, #236]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f003 0302 	and.w	r3, r3, #2
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d101      	bne.n	80068b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e067      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80068b6:	4b37      	ldr	r3, [pc, #220]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	f023 0203 	bic.w	r2, r3, #3
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	685b      	ldr	r3, [r3, #4]
 80068c2:	4934      	ldr	r1, [pc, #208]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	4313      	orrs	r3, r2
 80068c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80068c8:	f7fd fbc0 	bl	800404c <HAL_GetTick>
 80068cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068ce:	e00a      	b.n	80068e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80068d0:	f7fd fbbc 	bl	800404c <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80068de:	4293      	cmp	r3, r2
 80068e0:	d901      	bls.n	80068e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80068e2:	2303      	movs	r3, #3
 80068e4:	e04f      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80068e6:	4b2b      	ldr	r3, [pc, #172]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 80068e8:	689b      	ldr	r3, [r3, #8]
 80068ea:	f003 020c 	and.w	r2, r3, #12
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	685b      	ldr	r3, [r3, #4]
 80068f2:	009b      	lsls	r3, r3, #2
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d1eb      	bne.n	80068d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80068f8:	4b25      	ldr	r3, [pc, #148]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	f003 0307 	and.w	r3, r3, #7
 8006900:	683a      	ldr	r2, [r7, #0]
 8006902:	429a      	cmp	r2, r3
 8006904:	d20c      	bcs.n	8006920 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006906:	4b22      	ldr	r3, [pc, #136]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	b2d2      	uxtb	r2, r2
 800690c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800690e:	4b20      	ldr	r3, [pc, #128]	@ (8006990 <HAL_RCC_ClockConfig+0x1b8>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f003 0307 	and.w	r3, r3, #7
 8006916:	683a      	ldr	r2, [r7, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d001      	beq.n	8006920 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800691c:	2301      	movs	r3, #1
 800691e:	e032      	b.n	8006986 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	f003 0304 	and.w	r3, r3, #4
 8006928:	2b00      	cmp	r3, #0
 800692a:	d008      	beq.n	800693e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800692c:	4b19      	ldr	r3, [pc, #100]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800692e:	689b      	ldr	r3, [r3, #8]
 8006930:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4916      	ldr	r1, [pc, #88]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800693a:	4313      	orrs	r3, r2
 800693c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	f003 0308 	and.w	r3, r3, #8
 8006946:	2b00      	cmp	r3, #0
 8006948:	d009      	beq.n	800695e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800694a:	4b12      	ldr	r3, [pc, #72]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	00db      	lsls	r3, r3, #3
 8006958:	490e      	ldr	r1, [pc, #56]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 800695a:	4313      	orrs	r3, r2
 800695c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800695e:	f000 f821 	bl	80069a4 <HAL_RCC_GetSysClockFreq>
 8006962:	4602      	mov	r2, r0
 8006964:	4b0b      	ldr	r3, [pc, #44]	@ (8006994 <HAL_RCC_ClockConfig+0x1bc>)
 8006966:	689b      	ldr	r3, [r3, #8]
 8006968:	091b      	lsrs	r3, r3, #4
 800696a:	f003 030f 	and.w	r3, r3, #15
 800696e:	490a      	ldr	r1, [pc, #40]	@ (8006998 <HAL_RCC_ClockConfig+0x1c0>)
 8006970:	5ccb      	ldrb	r3, [r1, r3]
 8006972:	fa22 f303 	lsr.w	r3, r2, r3
 8006976:	4a09      	ldr	r2, [pc, #36]	@ (800699c <HAL_RCC_ClockConfig+0x1c4>)
 8006978:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800697a:	4b09      	ldr	r3, [pc, #36]	@ (80069a0 <HAL_RCC_ClockConfig+0x1c8>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	4618      	mov	r0, r3
 8006980:	f7fd fb20 	bl	8003fc4 <HAL_InitTick>

  return HAL_OK;
 8006984:	2300      	movs	r3, #0
}
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}
 800698e:	bf00      	nop
 8006990:	40023c00 	.word	0x40023c00
 8006994:	40023800 	.word	0x40023800
 8006998:	08011b5c 	.word	0x08011b5c
 800699c:	20000000 	.word	0x20000000
 80069a0:	20000004 	.word	0x20000004

080069a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069a8:	b090      	sub	sp, #64	@ 0x40
 80069aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069ac:	2300      	movs	r3, #0
 80069ae:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80069b0:	2300      	movs	r3, #0
 80069b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80069b8:	2300      	movs	r3, #0
 80069ba:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80069bc:	4b59      	ldr	r3, [pc, #356]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f003 030c 	and.w	r3, r3, #12
 80069c4:	2b08      	cmp	r3, #8
 80069c6:	d00d      	beq.n	80069e4 <HAL_RCC_GetSysClockFreq+0x40>
 80069c8:	2b08      	cmp	r3, #8
 80069ca:	f200 80a1 	bhi.w	8006b10 <HAL_RCC_GetSysClockFreq+0x16c>
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d002      	beq.n	80069d8 <HAL_RCC_GetSysClockFreq+0x34>
 80069d2:	2b04      	cmp	r3, #4
 80069d4:	d003      	beq.n	80069de <HAL_RCC_GetSysClockFreq+0x3a>
 80069d6:	e09b      	b.n	8006b10 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80069d8:	4b53      	ldr	r3, [pc, #332]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x184>)
 80069da:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80069dc:	e09b      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80069de:	4b53      	ldr	r3, [pc, #332]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x188>)
 80069e0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80069e2:	e098      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80069e4:	4b4f      	ldr	r3, [pc, #316]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80069ec:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80069ee:	4b4d      	ldr	r3, [pc, #308]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d028      	beq.n	8006a4c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80069fa:	4b4a      	ldr	r3, [pc, #296]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 80069fc:	685b      	ldr	r3, [r3, #4]
 80069fe:	099b      	lsrs	r3, r3, #6
 8006a00:	2200      	movs	r2, #0
 8006a02:	623b      	str	r3, [r7, #32]
 8006a04:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a06:	6a3b      	ldr	r3, [r7, #32]
 8006a08:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	4b47      	ldr	r3, [pc, #284]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8006a10:	fb03 f201 	mul.w	r2, r3, r1
 8006a14:	2300      	movs	r3, #0
 8006a16:	fb00 f303 	mul.w	r3, r0, r3
 8006a1a:	4413      	add	r3, r2
 8006a1c:	4a43      	ldr	r2, [pc, #268]	@ (8006b2c <HAL_RCC_GetSysClockFreq+0x188>)
 8006a1e:	fba0 1202 	umull	r1, r2, r0, r2
 8006a22:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a24:	460a      	mov	r2, r1
 8006a26:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006a28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a2a:	4413      	add	r3, r2
 8006a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a30:	2200      	movs	r2, #0
 8006a32:	61bb      	str	r3, [r7, #24]
 8006a34:	61fa      	str	r2, [r7, #28]
 8006a36:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a3a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006a3e:	f7fa f97b 	bl	8000d38 <__aeabi_uldivmod>
 8006a42:	4602      	mov	r2, r0
 8006a44:	460b      	mov	r3, r1
 8006a46:	4613      	mov	r3, r2
 8006a48:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a4a:	e053      	b.n	8006af4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a4c:	4b35      	ldr	r3, [pc, #212]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a4e:	685b      	ldr	r3, [r3, #4]
 8006a50:	099b      	lsrs	r3, r3, #6
 8006a52:	2200      	movs	r2, #0
 8006a54:	613b      	str	r3, [r7, #16]
 8006a56:	617a      	str	r2, [r7, #20]
 8006a58:	693b      	ldr	r3, [r7, #16]
 8006a5a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006a5e:	f04f 0b00 	mov.w	fp, #0
 8006a62:	4652      	mov	r2, sl
 8006a64:	465b      	mov	r3, fp
 8006a66:	f04f 0000 	mov.w	r0, #0
 8006a6a:	f04f 0100 	mov.w	r1, #0
 8006a6e:	0159      	lsls	r1, r3, #5
 8006a70:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006a74:	0150      	lsls	r0, r2, #5
 8006a76:	4602      	mov	r2, r0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	ebb2 080a 	subs.w	r8, r2, sl
 8006a7e:	eb63 090b 	sbc.w	r9, r3, fp
 8006a82:	f04f 0200 	mov.w	r2, #0
 8006a86:	f04f 0300 	mov.w	r3, #0
 8006a8a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006a8e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006a92:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006a96:	ebb2 0408 	subs.w	r4, r2, r8
 8006a9a:	eb63 0509 	sbc.w	r5, r3, r9
 8006a9e:	f04f 0200 	mov.w	r2, #0
 8006aa2:	f04f 0300 	mov.w	r3, #0
 8006aa6:	00eb      	lsls	r3, r5, #3
 8006aa8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006aac:	00e2      	lsls	r2, r4, #3
 8006aae:	4614      	mov	r4, r2
 8006ab0:	461d      	mov	r5, r3
 8006ab2:	eb14 030a 	adds.w	r3, r4, sl
 8006ab6:	603b      	str	r3, [r7, #0]
 8006ab8:	eb45 030b 	adc.w	r3, r5, fp
 8006abc:	607b      	str	r3, [r7, #4]
 8006abe:	f04f 0200 	mov.w	r2, #0
 8006ac2:	f04f 0300 	mov.w	r3, #0
 8006ac6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006aca:	4629      	mov	r1, r5
 8006acc:	028b      	lsls	r3, r1, #10
 8006ace:	4621      	mov	r1, r4
 8006ad0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	028a      	lsls	r2, r1, #10
 8006ad8:	4610      	mov	r0, r2
 8006ada:	4619      	mov	r1, r3
 8006adc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ade:	2200      	movs	r2, #0
 8006ae0:	60bb      	str	r3, [r7, #8]
 8006ae2:	60fa      	str	r2, [r7, #12]
 8006ae4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ae8:	f7fa f926 	bl	8000d38 <__aeabi_uldivmod>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4613      	mov	r3, r2
 8006af2:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006af4:	4b0b      	ldr	r3, [pc, #44]	@ (8006b24 <HAL_RCC_GetSysClockFreq+0x180>)
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	0c1b      	lsrs	r3, r3, #16
 8006afa:	f003 0303 	and.w	r3, r3, #3
 8006afe:	3301      	adds	r3, #1
 8006b00:	005b      	lsls	r3, r3, #1
 8006b02:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006b04:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b08:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b0e:	e002      	b.n	8006b16 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b10:	4b05      	ldr	r3, [pc, #20]	@ (8006b28 <HAL_RCC_GetSysClockFreq+0x184>)
 8006b12:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006b18:	4618      	mov	r0, r3
 8006b1a:	3740      	adds	r7, #64	@ 0x40
 8006b1c:	46bd      	mov	sp, r7
 8006b1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b22:	bf00      	nop
 8006b24:	40023800 	.word	0x40023800
 8006b28:	00f42400 	.word	0x00f42400
 8006b2c:	00b71b00 	.word	0x00b71b00

08006b30 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b30:	b480      	push	{r7}
 8006b32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b34:	4b03      	ldr	r3, [pc, #12]	@ (8006b44 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b36:	681b      	ldr	r3, [r3, #0]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000000 	.word	0x20000000

08006b48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b4c:	f7ff fff0 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b50:	4602      	mov	r2, r0
 8006b52:	4b05      	ldr	r3, [pc, #20]	@ (8006b68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	0a9b      	lsrs	r3, r3, #10
 8006b58:	f003 0307 	and.w	r3, r3, #7
 8006b5c:	4903      	ldr	r1, [pc, #12]	@ (8006b6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8006b5e:	5ccb      	ldrb	r3, [r1, r3]
 8006b60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	bd80      	pop	{r7, pc}
 8006b68:	40023800 	.word	0x40023800
 8006b6c:	08011b6c 	.word	0x08011b6c

08006b70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006b74:	f7ff ffdc 	bl	8006b30 <HAL_RCC_GetHCLKFreq>
 8006b78:	4602      	mov	r2, r0
 8006b7a:	4b05      	ldr	r3, [pc, #20]	@ (8006b90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	0b5b      	lsrs	r3, r3, #13
 8006b80:	f003 0307 	and.w	r3, r3, #7
 8006b84:	4903      	ldr	r1, [pc, #12]	@ (8006b94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006b86:	5ccb      	ldrb	r3, [r1, r3]
 8006b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	40023800 	.word	0x40023800
 8006b94:	08011b6c 	.word	0x08011b6c

08006b98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b082      	sub	sp, #8
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d101      	bne.n	8006baa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006ba6:	2301      	movs	r3, #1
 8006ba8:	e07b      	b.n	8006ca2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d108      	bne.n	8006bc4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	685b      	ldr	r3, [r3, #4]
 8006bb6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bba:	d009      	beq.n	8006bd0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	2200      	movs	r2, #0
 8006bc0:	61da      	str	r2, [r3, #28]
 8006bc2:	e005      	b.n	8006bd0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2200      	movs	r2, #0
 8006bd4:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006bdc:	b2db      	uxtb	r3, r3
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d106      	bne.n	8006bf0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f7fc ff2a 	bl	8003a44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2202      	movs	r2, #2
 8006bf4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	681a      	ldr	r2, [r3, #0]
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c06:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	685b      	ldr	r3, [r3, #4]
 8006c0c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	689b      	ldr	r3, [r3, #8]
 8006c14:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c18:	431a      	orrs	r2, r3
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c22:	431a      	orrs	r2, r3
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	691b      	ldr	r3, [r3, #16]
 8006c28:	f003 0302 	and.w	r3, r3, #2
 8006c2c:	431a      	orrs	r2, r3
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	695b      	ldr	r3, [r3, #20]
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	431a      	orrs	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	699b      	ldr	r3, [r3, #24]
 8006c3c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c40:	431a      	orrs	r2, r3
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	69db      	ldr	r3, [r3, #28]
 8006c46:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c4a:	431a      	orrs	r2, r3
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6a1b      	ldr	r3, [r3, #32]
 8006c50:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c54:	ea42 0103 	orr.w	r1, r2, r3
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c5c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	430a      	orrs	r2, r1
 8006c66:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	699b      	ldr	r3, [r3, #24]
 8006c6c:	0c1b      	lsrs	r3, r3, #16
 8006c6e:	f003 0104 	and.w	r1, r3, #4
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c76:	f003 0210 	and.w	r2, r3, #16
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	430a      	orrs	r2, r1
 8006c80:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	69da      	ldr	r2, [r3, #28]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c90:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	2201      	movs	r2, #1
 8006c9c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006ca0:	2300      	movs	r3, #0
}
 8006ca2:	4618      	mov	r0, r3
 8006ca4:	3708      	adds	r7, #8
 8006ca6:	46bd      	mov	sp, r7
 8006ca8:	bd80      	pop	{r7, pc}

08006caa <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006caa:	b580      	push	{r7, lr}
 8006cac:	b088      	sub	sp, #32
 8006cae:	af00      	add	r7, sp, #0
 8006cb0:	60f8      	str	r0, [r7, #12]
 8006cb2:	60b9      	str	r1, [r7, #8]
 8006cb4:	603b      	str	r3, [r7, #0]
 8006cb6:	4613      	mov	r3, r2
 8006cb8:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cba:	f7fd f9c7 	bl	800404c <HAL_GetTick>
 8006cbe:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006cc0:	88fb      	ldrh	r3, [r7, #6]
 8006cc2:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	2b01      	cmp	r3, #1
 8006cce:	d001      	beq.n	8006cd4 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006cd0:	2302      	movs	r3, #2
 8006cd2:	e12a      	b.n	8006f2a <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cd4:	68bb      	ldr	r3, [r7, #8]
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d002      	beq.n	8006ce0 <HAL_SPI_Transmit+0x36>
 8006cda:	88fb      	ldrh	r3, [r7, #6]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d101      	bne.n	8006ce4 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006ce0:	2301      	movs	r3, #1
 8006ce2:	e122      	b.n	8006f2a <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cea:	2b01      	cmp	r3, #1
 8006cec:	d101      	bne.n	8006cf2 <HAL_SPI_Transmit+0x48>
 8006cee:	2302      	movs	r3, #2
 8006cf0:	e11b      	b.n	8006f2a <HAL_SPI_Transmit+0x280>
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2203      	movs	r2, #3
 8006cfe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	2200      	movs	r2, #0
 8006d06:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	68ba      	ldr	r2, [r7, #8]
 8006d0c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	88fa      	ldrh	r2, [r7, #6]
 8006d12:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	88fa      	ldrh	r2, [r7, #6]
 8006d18:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	2200      	movs	r2, #0
 8006d24:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	2200      	movs	r2, #0
 8006d30:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	2200      	movs	r2, #0
 8006d36:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d40:	d10f      	bne.n	8006d62 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d50:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	681a      	ldr	r2, [r3, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d60:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d6c:	2b40      	cmp	r3, #64	@ 0x40
 8006d6e:	d007      	beq.n	8006d80 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d7e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d88:	d152      	bne.n	8006e30 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	685b      	ldr	r3, [r3, #4]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_SPI_Transmit+0xee>
 8006d92:	8b7b      	ldrh	r3, [r7, #26]
 8006d94:	2b01      	cmp	r3, #1
 8006d96:	d145      	bne.n	8006e24 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d9c:	881a      	ldrh	r2, [r3, #0]
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006da8:	1c9a      	adds	r2, r3, #2
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29a      	uxth	r2, r3
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006dbc:	e032      	b.n	8006e24 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	689b      	ldr	r3, [r3, #8]
 8006dc4:	f003 0302 	and.w	r3, r3, #2
 8006dc8:	2b02      	cmp	r3, #2
 8006dca:	d112      	bne.n	8006df2 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dd0:	881a      	ldrh	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ddc:	1c9a      	adds	r2, r3, #2
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006de6:	b29b      	uxth	r3, r3
 8006de8:	3b01      	subs	r3, #1
 8006dea:	b29a      	uxth	r2, r3
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006df0:	e018      	b.n	8006e24 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006df2:	f7fd f92b 	bl	800404c <HAL_GetTick>
 8006df6:	4602      	mov	r2, r0
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	1ad3      	subs	r3, r2, r3
 8006dfc:	683a      	ldr	r2, [r7, #0]
 8006dfe:	429a      	cmp	r2, r3
 8006e00:	d803      	bhi.n	8006e0a <HAL_SPI_Transmit+0x160>
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e08:	d102      	bne.n	8006e10 <HAL_SPI_Transmit+0x166>
 8006e0a:	683b      	ldr	r3, [r7, #0]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	d109      	bne.n	8006e24 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	2201      	movs	r2, #1
 8006e14:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	2200      	movs	r2, #0
 8006e1c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e20:	2303      	movs	r3, #3
 8006e22:	e082      	b.n	8006f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e28:	b29b      	uxth	r3, r3
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d1c7      	bne.n	8006dbe <HAL_SPI_Transmit+0x114>
 8006e2e:	e053      	b.n	8006ed8 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	685b      	ldr	r3, [r3, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d002      	beq.n	8006e3e <HAL_SPI_Transmit+0x194>
 8006e38:	8b7b      	ldrh	r3, [r7, #26]
 8006e3a:	2b01      	cmp	r3, #1
 8006e3c:	d147      	bne.n	8006ece <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	330c      	adds	r3, #12
 8006e48:	7812      	ldrb	r2, [r2, #0]
 8006e4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e50:	1c5a      	adds	r2, r3, #1
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e5a:	b29b      	uxth	r3, r3
 8006e5c:	3b01      	subs	r3, #1
 8006e5e:	b29a      	uxth	r2, r3
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e64:	e033      	b.n	8006ece <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	689b      	ldr	r3, [r3, #8]
 8006e6c:	f003 0302 	and.w	r3, r3, #2
 8006e70:	2b02      	cmp	r3, #2
 8006e72:	d113      	bne.n	8006e9c <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	330c      	adds	r3, #12
 8006e7e:	7812      	ldrb	r2, [r2, #0]
 8006e80:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e86:	1c5a      	adds	r2, r3, #1
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e90:	b29b      	uxth	r3, r3
 8006e92:	3b01      	subs	r3, #1
 8006e94:	b29a      	uxth	r2, r3
 8006e96:	68fb      	ldr	r3, [r7, #12]
 8006e98:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e9a:	e018      	b.n	8006ece <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e9c:	f7fd f8d6 	bl	800404c <HAL_GetTick>
 8006ea0:	4602      	mov	r2, r0
 8006ea2:	69fb      	ldr	r3, [r7, #28]
 8006ea4:	1ad3      	subs	r3, r2, r3
 8006ea6:	683a      	ldr	r2, [r7, #0]
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d803      	bhi.n	8006eb4 <HAL_SPI_Transmit+0x20a>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eb2:	d102      	bne.n	8006eba <HAL_SPI_Transmit+0x210>
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d109      	bne.n	8006ece <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	2201      	movs	r2, #1
 8006ebe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	2200      	movs	r2, #0
 8006ec6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006eca:	2303      	movs	r3, #3
 8006ecc:	e02d      	b.n	8006f2a <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ed2:	b29b      	uxth	r3, r3
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d1c6      	bne.n	8006e66 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006ed8:	69fa      	ldr	r2, [r7, #28]
 8006eda:	6839      	ldr	r1, [r7, #0]
 8006edc:	68f8      	ldr	r0, [r7, #12]
 8006ede:	f000 fbd9 	bl	8007694 <SPI_EndRxTxTransaction>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d002      	beq.n	8006eee <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006ee8:	68fb      	ldr	r3, [r7, #12]
 8006eea:	2220      	movs	r2, #32
 8006eec:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	689b      	ldr	r3, [r3, #8]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d10a      	bne.n	8006f0c <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	617b      	str	r3, [r7, #20]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	617b      	str	r3, [r7, #20]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	617b      	str	r3, [r7, #20]
 8006f0a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2201      	movs	r2, #1
 8006f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	2200      	movs	r2, #0
 8006f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d001      	beq.n	8006f28 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006f24:	2301      	movs	r3, #1
 8006f26:	e000      	b.n	8006f2a <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006f28:	2300      	movs	r3, #0
  }
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3720      	adds	r7, #32
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b088      	sub	sp, #32
 8006f36:	af02      	add	r7, sp, #8
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	60b9      	str	r1, [r7, #8]
 8006f3c:	603b      	str	r3, [r7, #0]
 8006f3e:	4613      	mov	r3, r2
 8006f40:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f48:	b2db      	uxtb	r3, r3
 8006f4a:	2b01      	cmp	r3, #1
 8006f4c:	d001      	beq.n	8006f52 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006f4e:	2302      	movs	r3, #2
 8006f50:	e104      	b.n	800715c <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006f52:	68bb      	ldr	r3, [r7, #8]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d002      	beq.n	8006f5e <HAL_SPI_Receive+0x2c>
 8006f58:	88fb      	ldrh	r3, [r7, #6]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	d101      	bne.n	8006f62 <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e0fc      	b.n	800715c <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	685b      	ldr	r3, [r3, #4]
 8006f66:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f6a:	d112      	bne.n	8006f92 <HAL_SPI_Receive+0x60>
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	689b      	ldr	r3, [r3, #8]
 8006f70:	2b00      	cmp	r3, #0
 8006f72:	d10e      	bne.n	8006f92 <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2204      	movs	r2, #4
 8006f78:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f7c:	88fa      	ldrh	r2, [r7, #6]
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	9300      	str	r3, [sp, #0]
 8006f82:	4613      	mov	r3, r2
 8006f84:	68ba      	ldr	r2, [r7, #8]
 8006f86:	68b9      	ldr	r1, [r7, #8]
 8006f88:	68f8      	ldr	r0, [r7, #12]
 8006f8a:	f000 f8eb 	bl	8007164 <HAL_SPI_TransmitReceive>
 8006f8e:	4603      	mov	r3, r0
 8006f90:	e0e4      	b.n	800715c <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006f92:	f7fd f85b 	bl	800404c <HAL_GetTick>
 8006f96:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006f9e:	2b01      	cmp	r3, #1
 8006fa0:	d101      	bne.n	8006fa6 <HAL_SPI_Receive+0x74>
 8006fa2:	2302      	movs	r3, #2
 8006fa4:	e0da      	b.n	800715c <HAL_SPI_Receive+0x22a>
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	2204      	movs	r2, #4
 8006fb2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	68ba      	ldr	r2, [r7, #8]
 8006fc0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	88fa      	ldrh	r2, [r7, #6]
 8006fc6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	88fa      	ldrh	r2, [r7, #6]
 8006fcc:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	2200      	movs	r2, #0
 8006fd2:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	2200      	movs	r2, #0
 8006fea:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	689b      	ldr	r3, [r3, #8]
 8006ff0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006ff4:	d10f      	bne.n	8007016 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	681a      	ldr	r2, [r3, #0]
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007004:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	681b      	ldr	r3, [r3, #0]
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007014:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007020:	2b40      	cmp	r3, #64	@ 0x40
 8007022:	d007      	beq.n	8007034 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	681a      	ldr	r2, [r3, #0]
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007032:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	68db      	ldr	r3, [r3, #12]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d170      	bne.n	800711e <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800703c:	e035      	b.n	80070aa <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	689b      	ldr	r3, [r3, #8]
 8007044:	f003 0301 	and.w	r3, r3, #1
 8007048:	2b01      	cmp	r3, #1
 800704a:	d115      	bne.n	8007078 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f103 020c 	add.w	r2, r3, #12
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007058:	7812      	ldrb	r2, [r2, #0]
 800705a:	b2d2      	uxtb	r2, r2
 800705c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007062:	1c5a      	adds	r2, r3, #1
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800706c:	b29b      	uxth	r3, r3
 800706e:	3b01      	subs	r3, #1
 8007070:	b29a      	uxth	r2, r3
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8007076:	e018      	b.n	80070aa <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007078:	f7fc ffe8 	bl	800404c <HAL_GetTick>
 800707c:	4602      	mov	r2, r0
 800707e:	697b      	ldr	r3, [r7, #20]
 8007080:	1ad3      	subs	r3, r2, r3
 8007082:	683a      	ldr	r2, [r7, #0]
 8007084:	429a      	cmp	r2, r3
 8007086:	d803      	bhi.n	8007090 <HAL_SPI_Receive+0x15e>
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708e:	d102      	bne.n	8007096 <HAL_SPI_Receive+0x164>
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	2b00      	cmp	r3, #0
 8007094:	d109      	bne.n	80070aa <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	2201      	movs	r2, #1
 800709a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	2200      	movs	r2, #0
 80070a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e058      	b.n	800715c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070ae:	b29b      	uxth	r3, r3
 80070b0:	2b00      	cmp	r3, #0
 80070b2:	d1c4      	bne.n	800703e <HAL_SPI_Receive+0x10c>
 80070b4:	e038      	b.n	8007128 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	689b      	ldr	r3, [r3, #8]
 80070bc:	f003 0301 	and.w	r3, r3, #1
 80070c0:	2b01      	cmp	r3, #1
 80070c2:	d113      	bne.n	80070ec <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070c4:	68fb      	ldr	r3, [r7, #12]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	68da      	ldr	r2, [r3, #12]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070ce:	b292      	uxth	r2, r2
 80070d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070d6:	1c9a      	adds	r2, r3, #2
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80070dc:	68fb      	ldr	r3, [r7, #12]
 80070de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070e0:	b29b      	uxth	r3, r3
 80070e2:	3b01      	subs	r3, #1
 80070e4:	b29a      	uxth	r2, r3
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80070ea:	e018      	b.n	800711e <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80070ec:	f7fc ffae 	bl	800404c <HAL_GetTick>
 80070f0:	4602      	mov	r2, r0
 80070f2:	697b      	ldr	r3, [r7, #20]
 80070f4:	1ad3      	subs	r3, r2, r3
 80070f6:	683a      	ldr	r2, [r7, #0]
 80070f8:	429a      	cmp	r2, r3
 80070fa:	d803      	bhi.n	8007104 <HAL_SPI_Receive+0x1d2>
 80070fc:	683b      	ldr	r3, [r7, #0]
 80070fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007102:	d102      	bne.n	800710a <HAL_SPI_Receive+0x1d8>
 8007104:	683b      	ldr	r3, [r7, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d109      	bne.n	800711e <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	2201      	movs	r2, #1
 800710e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	2200      	movs	r2, #0
 8007116:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800711a:	2303      	movs	r3, #3
 800711c:	e01e      	b.n	800715c <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007122:	b29b      	uxth	r3, r3
 8007124:	2b00      	cmp	r3, #0
 8007126:	d1c6      	bne.n	80070b6 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007128:	697a      	ldr	r2, [r7, #20]
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f000 fa4b 	bl	80075c8 <SPI_EndRxTransaction>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d002      	beq.n	800713e <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	2220      	movs	r2, #32
 800713c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	2201      	movs	r2, #1
 8007142:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	2200      	movs	r2, #0
 800714a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007152:	2b00      	cmp	r3, #0
 8007154:	d001      	beq.n	800715a <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8007156:	2301      	movs	r3, #1
 8007158:	e000      	b.n	800715c <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800715a:	2300      	movs	r3, #0
  }
}
 800715c:	4618      	mov	r0, r3
 800715e:	3718      	adds	r7, #24
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}

08007164 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007164:	b580      	push	{r7, lr}
 8007166:	b08a      	sub	sp, #40	@ 0x28
 8007168:	af00      	add	r7, sp, #0
 800716a:	60f8      	str	r0, [r7, #12]
 800716c:	60b9      	str	r1, [r7, #8]
 800716e:	607a      	str	r2, [r7, #4]
 8007170:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007172:	2301      	movs	r3, #1
 8007174:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007176:	f7fc ff69 	bl	800404c <HAL_GetTick>
 800717a:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007182:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	685b      	ldr	r3, [r3, #4]
 8007188:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800718a:	887b      	ldrh	r3, [r7, #2]
 800718c:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800718e:	7ffb      	ldrb	r3, [r7, #31]
 8007190:	2b01      	cmp	r3, #1
 8007192:	d00c      	beq.n	80071ae <HAL_SPI_TransmitReceive+0x4a>
 8007194:	69bb      	ldr	r3, [r7, #24]
 8007196:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800719a:	d106      	bne.n	80071aa <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	689b      	ldr	r3, [r3, #8]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d102      	bne.n	80071aa <HAL_SPI_TransmitReceive+0x46>
 80071a4:	7ffb      	ldrb	r3, [r7, #31]
 80071a6:	2b04      	cmp	r3, #4
 80071a8:	d001      	beq.n	80071ae <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80071aa:	2302      	movs	r3, #2
 80071ac:	e17f      	b.n	80074ae <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d005      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x5c>
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d002      	beq.n	80071c0 <HAL_SPI_TransmitReceive+0x5c>
 80071ba:	887b      	ldrh	r3, [r7, #2]
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d101      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80071c0:	2301      	movs	r3, #1
 80071c2:	e174      	b.n	80074ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071ca:	2b01      	cmp	r3, #1
 80071cc:	d101      	bne.n	80071d2 <HAL_SPI_TransmitReceive+0x6e>
 80071ce:	2302      	movs	r3, #2
 80071d0:	e16d      	b.n	80074ae <HAL_SPI_TransmitReceive+0x34a>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	2201      	movs	r2, #1
 80071d6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071e0:	b2db      	uxtb	r3, r3
 80071e2:	2b04      	cmp	r3, #4
 80071e4:	d003      	beq.n	80071ee <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	2205      	movs	r2, #5
 80071ea:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	2200      	movs	r2, #0
 80071f2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	687a      	ldr	r2, [r7, #4]
 80071f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	887a      	ldrh	r2, [r7, #2]
 80071fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	887a      	ldrh	r2, [r7, #2]
 8007204:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	68ba      	ldr	r2, [r7, #8]
 800720a:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	887a      	ldrh	r2, [r7, #2]
 8007210:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	887a      	ldrh	r2, [r7, #2]
 8007216:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	2200      	movs	r2, #0
 800721c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2200      	movs	r2, #0
 8007222:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681b      	ldr	r3, [r3, #0]
 800722a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800722e:	2b40      	cmp	r3, #64	@ 0x40
 8007230:	d007      	beq.n	8007242 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007232:	68fb      	ldr	r3, [r7, #12]
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	681a      	ldr	r2, [r3, #0]
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007240:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800724a:	d17e      	bne.n	800734a <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	685b      	ldr	r3, [r3, #4]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d002      	beq.n	800725a <HAL_SPI_TransmitReceive+0xf6>
 8007254:	8afb      	ldrh	r3, [r7, #22]
 8007256:	2b01      	cmp	r3, #1
 8007258:	d16c      	bne.n	8007334 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800725a:	68fb      	ldr	r3, [r7, #12]
 800725c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800725e:	881a      	ldrh	r2, [r3, #0]
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800726a:	1c9a      	adds	r2, r3, #2
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007274:	b29b      	uxth	r3, r3
 8007276:	3b01      	subs	r3, #1
 8007278:	b29a      	uxth	r2, r3
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800727e:	e059      	b.n	8007334 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007280:	68fb      	ldr	r3, [r7, #12]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	689b      	ldr	r3, [r3, #8]
 8007286:	f003 0302 	and.w	r3, r3, #2
 800728a:	2b02      	cmp	r3, #2
 800728c:	d11b      	bne.n	80072c6 <HAL_SPI_TransmitReceive+0x162>
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007292:	b29b      	uxth	r3, r3
 8007294:	2b00      	cmp	r3, #0
 8007296:	d016      	beq.n	80072c6 <HAL_SPI_TransmitReceive+0x162>
 8007298:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800729a:	2b01      	cmp	r3, #1
 800729c:	d113      	bne.n	80072c6 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072a2:	881a      	ldrh	r2, [r3, #0]
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072ae:	1c9a      	adds	r2, r3, #2
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b8:	b29b      	uxth	r3, r3
 80072ba:	3b01      	subs	r3, #1
 80072bc:	b29a      	uxth	r2, r3
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072c2:	2300      	movs	r3, #0
 80072c4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	689b      	ldr	r3, [r3, #8]
 80072cc:	f003 0301 	and.w	r3, r3, #1
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d119      	bne.n	8007308 <HAL_SPI_TransmitReceive+0x1a4>
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072d8:	b29b      	uxth	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d014      	beq.n	8007308 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	68da      	ldr	r2, [r3, #12]
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e8:	b292      	uxth	r2, r2
 80072ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072f0:	1c9a      	adds	r2, r3, #2
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072fa:	b29b      	uxth	r3, r3
 80072fc:	3b01      	subs	r3, #1
 80072fe:	b29a      	uxth	r2, r3
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007304:	2301      	movs	r3, #1
 8007306:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8007308:	f7fc fea0 	bl	800404c <HAL_GetTick>
 800730c:	4602      	mov	r2, r0
 800730e:	6a3b      	ldr	r3, [r7, #32]
 8007310:	1ad3      	subs	r3, r2, r3
 8007312:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007314:	429a      	cmp	r2, r3
 8007316:	d80d      	bhi.n	8007334 <HAL_SPI_TransmitReceive+0x1d0>
 8007318:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800731a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800731e:	d009      	beq.n	8007334 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	2201      	movs	r2, #1
 8007324:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007330:	2303      	movs	r3, #3
 8007332:	e0bc      	b.n	80074ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d1a0      	bne.n	8007280 <HAL_SPI_TransmitReceive+0x11c>
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007342:	b29b      	uxth	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d19b      	bne.n	8007280 <HAL_SPI_TransmitReceive+0x11c>
 8007348:	e082      	b.n	8007450 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	685b      	ldr	r3, [r3, #4]
 800734e:	2b00      	cmp	r3, #0
 8007350:	d002      	beq.n	8007358 <HAL_SPI_TransmitReceive+0x1f4>
 8007352:	8afb      	ldrh	r3, [r7, #22]
 8007354:	2b01      	cmp	r3, #1
 8007356:	d171      	bne.n	800743c <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	330c      	adds	r3, #12
 8007362:	7812      	ldrb	r2, [r2, #0]
 8007364:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8007366:	68fb      	ldr	r3, [r7, #12]
 8007368:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800736a:	1c5a      	adds	r2, r3, #1
 800736c:	68fb      	ldr	r3, [r7, #12]
 800736e:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007374:	b29b      	uxth	r3, r3
 8007376:	3b01      	subs	r3, #1
 8007378:	b29a      	uxth	r2, r3
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800737e:	e05d      	b.n	800743c <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	689b      	ldr	r3, [r3, #8]
 8007386:	f003 0302 	and.w	r3, r3, #2
 800738a:	2b02      	cmp	r3, #2
 800738c:	d11c      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x264>
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007392:	b29b      	uxth	r3, r3
 8007394:	2b00      	cmp	r3, #0
 8007396:	d017      	beq.n	80073c8 <HAL_SPI_TransmitReceive+0x264>
 8007398:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739a:	2b01      	cmp	r3, #1
 800739c:	d114      	bne.n	80073c8 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	330c      	adds	r3, #12
 80073a8:	7812      	ldrb	r2, [r2, #0]
 80073aa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073ac:	68fb      	ldr	r3, [r7, #12]
 80073ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073b0:	1c5a      	adds	r2, r3, #1
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073ba:	b29b      	uxth	r3, r3
 80073bc:	3b01      	subs	r3, #1
 80073be:	b29a      	uxth	r2, r3
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	f003 0301 	and.w	r3, r3, #1
 80073d2:	2b01      	cmp	r3, #1
 80073d4:	d119      	bne.n	800740a <HAL_SPI_TransmitReceive+0x2a6>
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073da:	b29b      	uxth	r3, r3
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d014      	beq.n	800740a <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073ea:	b2d2      	uxtb	r2, r2
 80073ec:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f2:	1c5a      	adds	r2, r3, #1
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80073f8:	68fb      	ldr	r3, [r7, #12]
 80073fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	3b01      	subs	r3, #1
 8007400:	b29a      	uxth	r2, r3
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007406:	2301      	movs	r3, #1
 8007408:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800740a:	f7fc fe1f 	bl	800404c <HAL_GetTick>
 800740e:	4602      	mov	r2, r0
 8007410:	6a3b      	ldr	r3, [r7, #32]
 8007412:	1ad3      	subs	r3, r2, r3
 8007414:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007416:	429a      	cmp	r2, r3
 8007418:	d803      	bhi.n	8007422 <HAL_SPI_TransmitReceive+0x2be>
 800741a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800741c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007420:	d102      	bne.n	8007428 <HAL_SPI_TransmitReceive+0x2c4>
 8007422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007424:	2b00      	cmp	r3, #0
 8007426:	d109      	bne.n	800743c <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	2201      	movs	r2, #1
 800742c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007430:	68fb      	ldr	r3, [r7, #12]
 8007432:	2200      	movs	r2, #0
 8007434:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007438:	2303      	movs	r3, #3
 800743a:	e038      	b.n	80074ae <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800743c:	68fb      	ldr	r3, [r7, #12]
 800743e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007440:	b29b      	uxth	r3, r3
 8007442:	2b00      	cmp	r3, #0
 8007444:	d19c      	bne.n	8007380 <HAL_SPI_TransmitReceive+0x21c>
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800744a:	b29b      	uxth	r3, r3
 800744c:	2b00      	cmp	r3, #0
 800744e:	d197      	bne.n	8007380 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007450:	6a3a      	ldr	r2, [r7, #32]
 8007452:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007454:	68f8      	ldr	r0, [r7, #12]
 8007456:	f000 f91d 	bl	8007694 <SPI_EndRxTxTransaction>
 800745a:	4603      	mov	r3, r0
 800745c:	2b00      	cmp	r3, #0
 800745e:	d008      	beq.n	8007472 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	2220      	movs	r2, #32
 8007464:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	2200      	movs	r2, #0
 800746a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	e01d      	b.n	80074ae <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	689b      	ldr	r3, [r3, #8]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d10a      	bne.n	8007490 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800747a:	2300      	movs	r3, #0
 800747c:	613b      	str	r3, [r7, #16]
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	68db      	ldr	r3, [r3, #12]
 8007484:	613b      	str	r3, [r7, #16]
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	613b      	str	r3, [r7, #16]
 800748e:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	2201      	movs	r2, #1
 8007494:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d001      	beq.n	80074ac <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e000      	b.n	80074ae <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80074ac:	2300      	movs	r3, #0
  }
}
 80074ae:	4618      	mov	r0, r3
 80074b0:	3728      	adds	r7, #40	@ 0x28
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b088      	sub	sp, #32
 80074bc:	af00      	add	r7, sp, #0
 80074be:	60f8      	str	r0, [r7, #12]
 80074c0:	60b9      	str	r1, [r7, #8]
 80074c2:	603b      	str	r3, [r7, #0]
 80074c4:	4613      	mov	r3, r2
 80074c6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074c8:	f7fc fdc0 	bl	800404c <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d0:	1a9b      	subs	r3, r3, r2
 80074d2:	683a      	ldr	r2, [r7, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074d8:	f7fc fdb8 	bl	800404c <HAL_GetTick>
 80074dc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80074de:	4b39      	ldr	r3, [pc, #228]	@ (80075c4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	015b      	lsls	r3, r3, #5
 80074e4:	0d1b      	lsrs	r3, r3, #20
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	fb02 f303 	mul.w	r3, r2, r3
 80074ec:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80074ee:	e055      	b.n	800759c <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80074f6:	d051      	beq.n	800759c <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80074f8:	f7fc fda8 	bl	800404c <HAL_GetTick>
 80074fc:	4602      	mov	r2, r0
 80074fe:	69bb      	ldr	r3, [r7, #24]
 8007500:	1ad3      	subs	r3, r2, r3
 8007502:	69fa      	ldr	r2, [r7, #28]
 8007504:	429a      	cmp	r2, r3
 8007506:	d902      	bls.n	800750e <SPI_WaitFlagStateUntilTimeout+0x56>
 8007508:	69fb      	ldr	r3, [r7, #28]
 800750a:	2b00      	cmp	r3, #0
 800750c:	d13d      	bne.n	800758a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800751c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	685b      	ldr	r3, [r3, #4]
 8007522:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007526:	d111      	bne.n	800754c <SPI_WaitFlagStateUntilTimeout+0x94>
 8007528:	68fb      	ldr	r3, [r7, #12]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007530:	d004      	beq.n	800753c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	689b      	ldr	r3, [r3, #8]
 8007536:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800753a:	d107      	bne.n	800754c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	681a      	ldr	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800754a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007550:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007554:	d10f      	bne.n	8007576 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	681a      	ldr	r2, [r3, #0]
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007564:	601a      	str	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681a      	ldr	r2, [r3, #0]
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007574:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	2201      	movs	r2, #1
 800757a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2200      	movs	r2, #0
 8007582:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e018      	b.n	80075bc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800758a:	697b      	ldr	r3, [r7, #20]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d102      	bne.n	8007596 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8007590:	2300      	movs	r3, #0
 8007592:	61fb      	str	r3, [r7, #28]
 8007594:	e002      	b.n	800759c <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	3b01      	subs	r3, #1
 800759a:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	689a      	ldr	r2, [r3, #8]
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	4013      	ands	r3, r2
 80075a6:	68ba      	ldr	r2, [r7, #8]
 80075a8:	429a      	cmp	r2, r3
 80075aa:	bf0c      	ite	eq
 80075ac:	2301      	moveq	r3, #1
 80075ae:	2300      	movne	r3, #0
 80075b0:	b2db      	uxtb	r3, r3
 80075b2:	461a      	mov	r2, r3
 80075b4:	79fb      	ldrb	r3, [r7, #7]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d19a      	bne.n	80074f0 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3720      	adds	r7, #32
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20000000 	.word	0x20000000

080075c8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b086      	sub	sp, #24
 80075cc:	af02      	add	r7, sp, #8
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	685b      	ldr	r3, [r3, #4]
 80075d8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80075dc:	d111      	bne.n	8007602 <SPI_EndRxTransaction+0x3a>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	689b      	ldr	r3, [r3, #8]
 80075e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80075e6:	d004      	beq.n	80075f2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	689b      	ldr	r3, [r3, #8]
 80075ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075f0:	d107      	bne.n	8007602 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681a      	ldr	r2, [r3, #0]
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007600:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800760a:	d12a      	bne.n	8007662 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007614:	d012      	beq.n	800763c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	9300      	str	r3, [sp, #0]
 800761a:	68bb      	ldr	r3, [r7, #8]
 800761c:	2200      	movs	r2, #0
 800761e:	2180      	movs	r1, #128	@ 0x80
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f7ff ff49 	bl	80074b8 <SPI_WaitFlagStateUntilTimeout>
 8007626:	4603      	mov	r3, r0
 8007628:	2b00      	cmp	r3, #0
 800762a:	d02d      	beq.n	8007688 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007630:	f043 0220 	orr.w	r2, r3, #32
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007638:	2303      	movs	r3, #3
 800763a:	e026      	b.n	800768a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	9300      	str	r3, [sp, #0]
 8007640:	68bb      	ldr	r3, [r7, #8]
 8007642:	2200      	movs	r2, #0
 8007644:	2101      	movs	r1, #1
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff ff36 	bl	80074b8 <SPI_WaitFlagStateUntilTimeout>
 800764c:	4603      	mov	r3, r0
 800764e:	2b00      	cmp	r3, #0
 8007650:	d01a      	beq.n	8007688 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007656:	f043 0220 	orr.w	r2, r3, #32
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800765e:	2303      	movs	r3, #3
 8007660:	e013      	b.n	800768a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	9300      	str	r3, [sp, #0]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	2200      	movs	r2, #0
 800766a:	2101      	movs	r1, #1
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f7ff ff23 	bl	80074b8 <SPI_WaitFlagStateUntilTimeout>
 8007672:	4603      	mov	r3, r0
 8007674:	2b00      	cmp	r3, #0
 8007676:	d007      	beq.n	8007688 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800767c:	f043 0220 	orr.w	r2, r3, #32
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007684:	2303      	movs	r3, #3
 8007686:	e000      	b.n	800768a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007688:	2300      	movs	r3, #0
}
 800768a:	4618      	mov	r0, r3
 800768c:	3710      	adds	r7, #16
 800768e:	46bd      	mov	sp, r7
 8007690:	bd80      	pop	{r7, pc}
	...

08007694 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007694:	b580      	push	{r7, lr}
 8007696:	b088      	sub	sp, #32
 8007698:	af02      	add	r7, sp, #8
 800769a:	60f8      	str	r0, [r7, #12]
 800769c:	60b9      	str	r1, [r7, #8]
 800769e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	9300      	str	r3, [sp, #0]
 80076a4:	68bb      	ldr	r3, [r7, #8]
 80076a6:	2201      	movs	r2, #1
 80076a8:	2102      	movs	r1, #2
 80076aa:	68f8      	ldr	r0, [r7, #12]
 80076ac:	f7ff ff04 	bl	80074b8 <SPI_WaitFlagStateUntilTimeout>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d007      	beq.n	80076c6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076ba:	f043 0220 	orr.w	r2, r3, #32
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80076c2:	2303      	movs	r3, #3
 80076c4:	e032      	b.n	800772c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80076c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007734 <SPI_EndRxTxTransaction+0xa0>)
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	4a1b      	ldr	r2, [pc, #108]	@ (8007738 <SPI_EndRxTxTransaction+0xa4>)
 80076cc:	fba2 2303 	umull	r2, r3, r2, r3
 80076d0:	0d5b      	lsrs	r3, r3, #21
 80076d2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80076d6:	fb02 f303 	mul.w	r3, r2, r3
 80076da:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80076e4:	d112      	bne.n	800770c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	9300      	str	r3, [sp, #0]
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	2200      	movs	r2, #0
 80076ee:	2180      	movs	r1, #128	@ 0x80
 80076f0:	68f8      	ldr	r0, [r7, #12]
 80076f2:	f7ff fee1 	bl	80074b8 <SPI_WaitFlagStateUntilTimeout>
 80076f6:	4603      	mov	r3, r0
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d016      	beq.n	800772a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007700:	f043 0220 	orr.w	r2, r3, #32
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007708:	2303      	movs	r3, #3
 800770a:	e00f      	b.n	800772c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800770c:	697b      	ldr	r3, [r7, #20]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d00a      	beq.n	8007728 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	3b01      	subs	r3, #1
 8007716:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007722:	2b80      	cmp	r3, #128	@ 0x80
 8007724:	d0f2      	beq.n	800770c <SPI_EndRxTxTransaction+0x78>
 8007726:	e000      	b.n	800772a <SPI_EndRxTxTransaction+0x96>
        break;
 8007728:	bf00      	nop
  }

  return HAL_OK;
 800772a:	2300      	movs	r3, #0
}
 800772c:	4618      	mov	r0, r3
 800772e:	3718      	adds	r7, #24
 8007730:	46bd      	mov	sp, r7
 8007732:	bd80      	pop	{r7, pc}
 8007734:	20000000 	.word	0x20000000
 8007738:	165e9f81 	.word	0x165e9f81

0800773c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b082      	sub	sp, #8
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d101      	bne.n	800774e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800774a:	2301      	movs	r3, #1
 800774c:	e042      	b.n	80077d4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d106      	bne.n	8007768 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2200      	movs	r2, #0
 800775e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007762:	6878      	ldr	r0, [r7, #4]
 8007764:	f7fc fa20 	bl	8003ba8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2224      	movs	r2, #36	@ 0x24
 800776c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	68da      	ldr	r2, [r3, #12]
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800777e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007780:	6878      	ldr	r0, [r7, #4]
 8007782:	f000 fed1 	bl	8008528 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	691a      	ldr	r2, [r3, #16]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007794:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	695a      	ldr	r2, [r3, #20]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80077a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80077b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2200      	movs	r2, #0
 80077ba:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2220      	movs	r2, #32
 80077c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2220      	movs	r2, #32
 80077c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2200      	movs	r2, #0
 80077d0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80077d2:	2300      	movs	r3, #0
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3708      	adds	r7, #8
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b08c      	sub	sp, #48	@ 0x30
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	60b9      	str	r1, [r7, #8]
 80077e6:	4613      	mov	r3, r2
 80077e8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80077f0:	b2db      	uxtb	r3, r3
 80077f2:	2b20      	cmp	r3, #32
 80077f4:	d146      	bne.n	8007884 <HAL_UARTEx_ReceiveToIdle_DMA+0xa8>
  {
    if ((pData == NULL) || (Size == 0U))
 80077f6:	68bb      	ldr	r3, [r7, #8]
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d002      	beq.n	8007802 <HAL_UARTEx_ReceiveToIdle_DMA+0x26>
 80077fc:	88fb      	ldrh	r3, [r7, #6]
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d101      	bne.n	8007806 <HAL_UARTEx_ReceiveToIdle_DMA+0x2a>
    {
      return HAL_ERROR;
 8007802:	2301      	movs	r3, #1
 8007804:	e03f      	b.n	8007886 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	2201      	movs	r2, #1
 800780a:	631a      	str	r2, [r3, #48]	@ 0x30
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	2200      	movs	r2, #0
 8007810:	635a      	str	r2, [r3, #52]	@ 0x34

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 8007812:	88fb      	ldrh	r3, [r7, #6]
 8007814:	461a      	mov	r2, r3
 8007816:	68b9      	ldr	r1, [r7, #8]
 8007818:	68f8      	ldr	r0, [r7, #12]
 800781a:	f000 fc1d 	bl	8008058 <UART_Start_Receive_DMA>
 800781e:	4603      	mov	r3, r0
 8007820:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007828:	2b01      	cmp	r3, #1
 800782a:	d125      	bne.n	8007878 <HAL_UARTEx_ReceiveToIdle_DMA+0x9c>
    {
      __HAL_UART_CLEAR_IDLEFLAG(huart);
 800782c:	2300      	movs	r3, #0
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	613b      	str	r3, [r7, #16]
 8007838:	68fb      	ldr	r3, [r7, #12]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	685b      	ldr	r3, [r3, #4]
 800783e:	613b      	str	r3, [r7, #16]
 8007840:	693b      	ldr	r3, [r7, #16]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	330c      	adds	r3, #12
 8007848:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784a:	69bb      	ldr	r3, [r7, #24]
 800784c:	e853 3f00 	ldrex	r3, [r3]
 8007850:	617b      	str	r3, [r7, #20]
   return(result);
 8007852:	697b      	ldr	r3, [r7, #20]
 8007854:	f043 0310 	orr.w	r3, r3, #16
 8007858:	62bb      	str	r3, [r7, #40]	@ 0x28
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	330c      	adds	r3, #12
 8007860:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007862:	627a      	str	r2, [r7, #36]	@ 0x24
 8007864:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007866:	6a39      	ldr	r1, [r7, #32]
 8007868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800786a:	e841 2300 	strex	r3, r2, [r1]
 800786e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007870:	69fb      	ldr	r3, [r7, #28]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d1e5      	bne.n	8007842 <HAL_UARTEx_ReceiveToIdle_DMA+0x66>
 8007876:	e002      	b.n	800787e <HAL_UARTEx_ReceiveToIdle_DMA+0xa2>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8007878:	2301      	movs	r3, #1
 800787a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    }

    return status;
 800787e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007882:	e000      	b.n	8007886 <HAL_UARTEx_ReceiveToIdle_DMA+0xaa>
  }
  else
  {
    return HAL_BUSY;
 8007884:	2302      	movs	r3, #2
  }
}
 8007886:	4618      	mov	r0, r3
 8007888:	3730      	adds	r7, #48	@ 0x30
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}
	...

08007890 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b0ba      	sub	sp, #232	@ 0xe8
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	68db      	ldr	r3, [r3, #12]
 80078a8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	695b      	ldr	r3, [r3, #20]
 80078b2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80078b6:	2300      	movs	r3, #0
 80078b8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80078bc:	2300      	movs	r3, #0
 80078be:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80078c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078c6:	f003 030f 	and.w	r3, r3, #15
 80078ca:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80078ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d10f      	bne.n	80078f6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80078d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80078da:	f003 0320 	and.w	r3, r3, #32
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d009      	beq.n	80078f6 <HAL_UART_IRQHandler+0x66>
 80078e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80078e6:	f003 0320 	and.w	r3, r3, #32
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d003      	beq.n	80078f6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80078ee:	6878      	ldr	r0, [r7, #4]
 80078f0:	f000 fd5c 	bl	80083ac <UART_Receive_IT>
      return;
 80078f4:	e273      	b.n	8007dde <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80078f6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	f000 80de 	beq.w	8007abc <HAL_UART_IRQHandler+0x22c>
 8007900:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007904:	f003 0301 	and.w	r3, r3, #1
 8007908:	2b00      	cmp	r3, #0
 800790a:	d106      	bne.n	800791a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800790c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007910:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007914:	2b00      	cmp	r3, #0
 8007916:	f000 80d1 	beq.w	8007abc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800791a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800791e:	f003 0301 	and.w	r3, r3, #1
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00b      	beq.n	800793e <HAL_UART_IRQHandler+0xae>
 8007926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800792a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800792e:	2b00      	cmp	r3, #0
 8007930:	d005      	beq.n	800793e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007936:	f043 0201 	orr.w	r2, r3, #1
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800793e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007942:	f003 0304 	and.w	r3, r3, #4
 8007946:	2b00      	cmp	r3, #0
 8007948:	d00b      	beq.n	8007962 <HAL_UART_IRQHandler+0xd2>
 800794a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d005      	beq.n	8007962 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800795a:	f043 0202 	orr.w	r2, r3, #2
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007962:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007966:	f003 0302 	and.w	r3, r3, #2
 800796a:	2b00      	cmp	r3, #0
 800796c:	d00b      	beq.n	8007986 <HAL_UART_IRQHandler+0xf6>
 800796e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007972:	f003 0301 	and.w	r3, r3, #1
 8007976:	2b00      	cmp	r3, #0
 8007978:	d005      	beq.n	8007986 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800797e:	f043 0204 	orr.w	r2, r3, #4
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007986:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800798a:	f003 0308 	and.w	r3, r3, #8
 800798e:	2b00      	cmp	r3, #0
 8007990:	d011      	beq.n	80079b6 <HAL_UART_IRQHandler+0x126>
 8007992:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007996:	f003 0320 	and.w	r3, r3, #32
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800799e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80079a2:	f003 0301 	and.w	r3, r3, #1
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ae:	f043 0208 	orr.w	r2, r3, #8
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	f000 820a 	beq.w	8007dd4 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80079c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80079c4:	f003 0320 	and.w	r3, r3, #32
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d008      	beq.n	80079de <HAL_UART_IRQHandler+0x14e>
 80079cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80079d0:	f003 0320 	and.w	r3, r3, #32
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f000 fce7 	bl	80083ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80079de:	687b      	ldr	r3, [r7, #4]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80079e8:	2b40      	cmp	r3, #64	@ 0x40
 80079ea:	bf0c      	ite	eq
 80079ec:	2301      	moveq	r3, #1
 80079ee:	2300      	movne	r3, #0
 80079f0:	b2db      	uxtb	r3, r3
 80079f2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80079f6:	687b      	ldr	r3, [r7, #4]
 80079f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80079fa:	f003 0308 	and.w	r3, r3, #8
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d103      	bne.n	8007a0a <HAL_UART_IRQHandler+0x17a>
 8007a02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d04f      	beq.n	8007aaa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007a0a:	6878      	ldr	r0, [r7, #4]
 8007a0c:	f000 fbf2 	bl	80081f4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	695b      	ldr	r3, [r3, #20]
 8007a16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a1a:	2b40      	cmp	r3, #64	@ 0x40
 8007a1c:	d141      	bne.n	8007aa2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	3314      	adds	r3, #20
 8007a24:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a28:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007a2c:	e853 3f00 	ldrex	r3, [r3]
 8007a30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007a34:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007a38:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	3314      	adds	r3, #20
 8007a46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007a4a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8007a4e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007a56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007a5a:	e841 2300 	strex	r3, r2, [r1]
 8007a5e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8007a62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d1d9      	bne.n	8007a1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d013      	beq.n	8007a9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a76:	4a8a      	ldr	r2, [pc, #552]	@ (8007ca0 <HAL_UART_IRQHandler+0x410>)
 8007a78:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a7e:	4618      	mov	r0, r3
 8007a80:	f7fc fd9c 	bl	80045bc <HAL_DMA_Abort_IT>
 8007a84:	4603      	mov	r3, r0
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d016      	beq.n	8007ab8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007a8e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007a90:	687a      	ldr	r2, [r7, #4]
 8007a92:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007a94:	4610      	mov	r0, r2
 8007a96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007a98:	e00e      	b.n	8007ab8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007a9a:	6878      	ldr	r0, [r7, #4]
 8007a9c:	f7fa fc40 	bl	8002320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa0:	e00a      	b.n	8007ab8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	f7fa fc3c 	bl	8002320 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007aa8:	e006      	b.n	8007ab8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7fa fc38 	bl	8002320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	2200      	movs	r2, #0
 8007ab4:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007ab6:	e18d      	b.n	8007dd4 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ab8:	bf00      	nop
    return;
 8007aba:	e18b      	b.n	8007dd4 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	f040 8167 	bne.w	8007d94 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007ac6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007aca:	f003 0310 	and.w	r3, r3, #16
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	f000 8160 	beq.w	8007d94 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007ad4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007ad8:	f003 0310 	and.w	r3, r3, #16
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	f000 8159 	beq.w	8007d94 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	60bb      	str	r3, [r7, #8]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	60bb      	str	r3, [r7, #8]
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	685b      	ldr	r3, [r3, #4]
 8007af4:	60bb      	str	r3, [r7, #8]
 8007af6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	695b      	ldr	r3, [r3, #20]
 8007afe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007b02:	2b40      	cmp	r3, #64	@ 0x40
 8007b04:	f040 80ce 	bne.w	8007ca4 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	685b      	ldr	r3, [r3, #4]
 8007b10:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007b14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	f000 80a9 	beq.w	8007c70 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007b22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b26:	429a      	cmp	r2, r3
 8007b28:	f080 80a2 	bcs.w	8007c70 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007b32:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007b38:	69db      	ldr	r3, [r3, #28]
 8007b3a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007b3e:	f000 8088 	beq.w	8007c52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	330c      	adds	r3, #12
 8007b48:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007b50:	e853 3f00 	ldrex	r3, [r3]
 8007b54:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007b58:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007b5c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007b60:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	330c      	adds	r3, #12
 8007b6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8007b6e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007b72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b76:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8007b7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007b7e:	e841 2300 	strex	r3, r2, [r1]
 8007b82:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8007b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d1d9      	bne.n	8007b42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	3314      	adds	r3, #20
 8007b94:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b96:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007b98:	e853 3f00 	ldrex	r3, [r3]
 8007b9c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007b9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007ba0:	f023 0301 	bic.w	r3, r3, #1
 8007ba4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	3314      	adds	r3, #20
 8007bae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007bb2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007bb6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007bba:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bbe:	e841 2300 	strex	r3, r2, [r1]
 8007bc2:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007bc4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d1e1      	bne.n	8007b8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3314      	adds	r3, #20
 8007bd0:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd2:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bd4:	e853 3f00 	ldrex	r3, [r3]
 8007bd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007bda:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bdc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007be0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	3314      	adds	r3, #20
 8007bea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007bee:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007bf0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bf2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007bf4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007bf6:	e841 2300 	strex	r3, r2, [r1]
 8007bfa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007bfc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007bfe:	2b00      	cmp	r3, #0
 8007c00:	d1e3      	bne.n	8007bca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	330c      	adds	r3, #12
 8007c16:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c1a:	e853 3f00 	ldrex	r3, [r3]
 8007c1e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c20:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c22:	f023 0310 	bic.w	r3, r3, #16
 8007c26:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	330c      	adds	r3, #12
 8007c30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8007c34:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007c36:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c38:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c3a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c3c:	e841 2300 	strex	r3, r2, [r1]
 8007c40:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c42:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d1e3      	bne.n	8007c10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f7fc fc45 	bl	80044dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2202      	movs	r2, #2
 8007c56:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007c60:	b29b      	uxth	r3, r3
 8007c62:	1ad3      	subs	r3, r2, r3
 8007c64:	b29b      	uxth	r3, r3
 8007c66:	4619      	mov	r1, r3
 8007c68:	6878      	ldr	r0, [r7, #4]
 8007c6a:	f7fa fb03 	bl	8002274 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8007c6e:	e0b3      	b.n	8007dd8 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c74:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	f040 80ad 	bne.w	8007dd8 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8007c82:	69db      	ldr	r3, [r3, #28]
 8007c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007c88:	f040 80a6 	bne.w	8007dd8 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2202      	movs	r2, #2
 8007c90:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007c96:	4619      	mov	r1, r3
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f7fa faeb 	bl	8002274 <HAL_UARTEx_RxEventCallback>
      return;
 8007c9e:	e09b      	b.n	8007dd8 <HAL_UART_IRQHandler+0x548>
 8007ca0:	080082bb 	.word	0x080082bb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cac:	b29b      	uxth	r3, r3
 8007cae:	1ad3      	subs	r3, r2, r3
 8007cb0:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	2b00      	cmp	r3, #0
 8007cbc:	f000 808e 	beq.w	8007ddc <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007cc0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	f000 8089 	beq.w	8007ddc <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	330c      	adds	r3, #12
 8007cd0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cd4:	e853 3f00 	ldrex	r3, [r3]
 8007cd8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007cda:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ce0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	330c      	adds	r3, #12
 8007cea:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8007cee:	647a      	str	r2, [r7, #68]	@ 0x44
 8007cf0:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cf2:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cf4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cf6:	e841 2300 	strex	r3, r2, [r1]
 8007cfa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cfc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d1e3      	bne.n	8007cca <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	3314      	adds	r3, #20
 8007d08:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d0c:	e853 3f00 	ldrex	r3, [r3]
 8007d10:	623b      	str	r3, [r7, #32]
   return(result);
 8007d12:	6a3b      	ldr	r3, [r7, #32]
 8007d14:	f023 0301 	bic.w	r3, r3, #1
 8007d18:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	3314      	adds	r3, #20
 8007d22:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007d26:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d2e:	e841 2300 	strex	r3, r2, [r1]
 8007d32:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d1e3      	bne.n	8007d02 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2220      	movs	r2, #32
 8007d3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	330c      	adds	r3, #12
 8007d4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d50:	693b      	ldr	r3, [r7, #16]
 8007d52:	e853 3f00 	ldrex	r3, [r3]
 8007d56:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	f023 0310 	bic.w	r3, r3, #16
 8007d5e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	330c      	adds	r3, #12
 8007d68:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8007d6c:	61fa      	str	r2, [r7, #28]
 8007d6e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d70:	69b9      	ldr	r1, [r7, #24]
 8007d72:	69fa      	ldr	r2, [r7, #28]
 8007d74:	e841 2300 	strex	r3, r2, [r1]
 8007d78:	617b      	str	r3, [r7, #20]
   return(result);
 8007d7a:	697b      	ldr	r3, [r7, #20]
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d1e3      	bne.n	8007d48 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	2202      	movs	r2, #2
 8007d84:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007d86:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007d8a:	4619      	mov	r1, r3
 8007d8c:	6878      	ldr	r0, [r7, #4]
 8007d8e:	f7fa fa71 	bl	8002274 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007d92:	e023      	b.n	8007ddc <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007d98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d009      	beq.n	8007db4 <HAL_UART_IRQHandler+0x524>
 8007da0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007da4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d003      	beq.n	8007db4 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8007dac:	6878      	ldr	r0, [r7, #4]
 8007dae:	f000 fa95 	bl	80082dc <UART_Transmit_IT>
    return;
 8007db2:	e014      	b.n	8007dde <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007db8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d00e      	beq.n	8007dde <HAL_UART_IRQHandler+0x54e>
 8007dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007dc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007dc8:	2b00      	cmp	r3, #0
 8007dca:	d008      	beq.n	8007dde <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8007dcc:	6878      	ldr	r0, [r7, #4]
 8007dce:	f000 fad5 	bl	800837c <UART_EndTransmit_IT>
    return;
 8007dd2:	e004      	b.n	8007dde <HAL_UART_IRQHandler+0x54e>
    return;
 8007dd4:	bf00      	nop
 8007dd6:	e002      	b.n	8007dde <HAL_UART_IRQHandler+0x54e>
      return;
 8007dd8:	bf00      	nop
 8007dda:	e000      	b.n	8007dde <HAL_UART_IRQHandler+0x54e>
      return;
 8007ddc:	bf00      	nop
  }
}
 8007dde:	37e8      	adds	r7, #232	@ 0xe8
 8007de0:	46bd      	mov	sp, r7
 8007de2:	bd80      	pop	{r7, pc}

08007de4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007de4:	b480      	push	{r7}
 8007de6:	b083      	sub	sp, #12
 8007de8:	af00      	add	r7, sp, #0
 8007dea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007dec:	bf00      	nop
 8007dee:	370c      	adds	r7, #12
 8007df0:	46bd      	mov	sp, r7
 8007df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df6:	4770      	bx	lr

08007df8 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007df8:	b480      	push	{r7}
 8007dfa:	b083      	sub	sp, #12
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr

08007e0c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007e0c:	b480      	push	{r7}
 8007e0e:	b083      	sub	sp, #12
 8007e10:	af00      	add	r7, sp, #0
 8007e12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007e14:	bf00      	nop
 8007e16:	370c      	adds	r7, #12
 8007e18:	46bd      	mov	sp, r7
 8007e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e1e:	4770      	bx	lr

08007e20 <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 8007e20:	b480      	push	{r7}
 8007e22:	b085      	sub	sp, #20
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8007e28:	2300      	movs	r3, #0
 8007e2a:	60fb      	str	r3, [r7, #12]
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007e36:	b2db      	uxtb	r3, r3
 8007e38:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007e40:	b2db      	uxtb	r3, r3
 8007e42:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	b2da      	uxtb	r2, r3
 8007e48:	68bb      	ldr	r3, [r7, #8]
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	4313      	orrs	r3, r2
 8007e4e:	b2db      	uxtb	r3, r3
}
 8007e50:	4618      	mov	r0, r3
 8007e52:	3714      	adds	r7, #20
 8007e54:	46bd      	mov	sp, r7
 8007e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e5a:	4770      	bx	lr

08007e5c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b09c      	sub	sp, #112	@ 0x70
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007e68:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d172      	bne.n	8007f5e <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8007e78:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e7e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	330c      	adds	r3, #12
 8007e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e86:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007e88:	e853 3f00 	ldrex	r3, [r3]
 8007e8c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007e8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007e90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007e94:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007e9e:	65ba      	str	r2, [r7, #88]	@ 0x58
 8007ea0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ea2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007ea4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ea6:	e841 2300 	strex	r3, r2, [r1]
 8007eaa:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007eac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d1e5      	bne.n	8007e7e <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007eb2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	3314      	adds	r3, #20
 8007eb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ebc:	e853 3f00 	ldrex	r3, [r3]
 8007ec0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ec2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ec4:	f023 0301 	bic.w	r3, r3, #1
 8007ec8:	667b      	str	r3, [r7, #100]	@ 0x64
 8007eca:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	3314      	adds	r3, #20
 8007ed0:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007ed2:	647a      	str	r2, [r7, #68]	@ 0x44
 8007ed4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ed6:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007ed8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007eda:	e841 2300 	strex	r3, r2, [r1]
 8007ede:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007ee0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d1e5      	bne.n	8007eb2 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ee6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	3314      	adds	r3, #20
 8007eec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef0:	e853 3f00 	ldrex	r3, [r3]
 8007ef4:	623b      	str	r3, [r7, #32]
   return(result);
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007efc:	663b      	str	r3, [r7, #96]	@ 0x60
 8007efe:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	3314      	adds	r3, #20
 8007f04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007f06:	633a      	str	r2, [r7, #48]	@ 0x30
 8007f08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007f0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007f0e:	e841 2300 	strex	r3, r2, [r1]
 8007f12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d1e5      	bne.n	8007ee6 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007f1a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f1c:	2220      	movs	r2, #32
 8007f1e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f22:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f26:	2b01      	cmp	r3, #1
 8007f28:	d119      	bne.n	8007f5e <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f2a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	330c      	adds	r3, #12
 8007f30:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	e853 3f00 	ldrex	r3, [r3]
 8007f38:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f3a:	68fb      	ldr	r3, [r7, #12]
 8007f3c:	f023 0310 	bic.w	r3, r3, #16
 8007f40:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	330c      	adds	r3, #12
 8007f48:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007f4a:	61fa      	str	r2, [r7, #28]
 8007f4c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f4e:	69b9      	ldr	r1, [r7, #24]
 8007f50:	69fa      	ldr	r2, [r7, #28]
 8007f52:	e841 2300 	strex	r3, r2, [r1]
 8007f56:	617b      	str	r3, [r7, #20]
   return(result);
 8007f58:	697b      	ldr	r3, [r7, #20]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d1e5      	bne.n	8007f2a <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f60:	2200      	movs	r2, #0
 8007f62:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f64:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f68:	2b01      	cmp	r3, #1
 8007f6a:	d106      	bne.n	8007f7a <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007f6c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f6e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007f70:	4619      	mov	r1, r3
 8007f72:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f74:	f7fa f97e 	bl	8002274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007f78:	e002      	b.n	8007f80 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8007f7a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007f7c:	f7ff ff3c 	bl	8007df8 <HAL_UART_RxCpltCallback>
}
 8007f80:	bf00      	nop
 8007f82:	3770      	adds	r7, #112	@ 0x70
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007f94:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007f96:	68fb      	ldr	r3, [r7, #12]
 8007f98:	2201      	movs	r2, #1
 8007f9a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	d108      	bne.n	8007fb6 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007fa8:	085b      	lsrs	r3, r3, #1
 8007faa:	b29b      	uxth	r3, r3
 8007fac:	4619      	mov	r1, r3
 8007fae:	68f8      	ldr	r0, [r7, #12]
 8007fb0:	f7fa f960 	bl	8002274 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007fb4:	e002      	b.n	8007fbc <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8007fb6:	68f8      	ldr	r0, [r7, #12]
 8007fb8:	f7ff ff28 	bl	8007e0c <HAL_UART_RxHalfCpltCallback>
}
 8007fbc:	bf00      	nop
 8007fbe:	3710      	adds	r7, #16
 8007fc0:	46bd      	mov	sp, r7
 8007fc2:	bd80      	pop	{r7, pc}

08007fc4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007fc4:	b580      	push	{r7, lr}
 8007fc6:	b084      	sub	sp, #16
 8007fc8:	af00      	add	r7, sp, #0
 8007fca:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007fcc:	2300      	movs	r3, #0
 8007fce:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007fd4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007fd6:	68bb      	ldr	r3, [r7, #8]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	695b      	ldr	r3, [r3, #20]
 8007fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007fe0:	2b80      	cmp	r3, #128	@ 0x80
 8007fe2:	bf0c      	ite	eq
 8007fe4:	2301      	moveq	r3, #1
 8007fe6:	2300      	movne	r3, #0
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007fec:	68bb      	ldr	r3, [r7, #8]
 8007fee:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ff2:	b2db      	uxtb	r3, r3
 8007ff4:	2b21      	cmp	r3, #33	@ 0x21
 8007ff6:	d108      	bne.n	800800a <UART_DMAError+0x46>
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	2b00      	cmp	r3, #0
 8007ffc:	d005      	beq.n	800800a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007ffe:	68bb      	ldr	r3, [r7, #8]
 8008000:	2200      	movs	r2, #0
 8008002:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8008004:	68b8      	ldr	r0, [r7, #8]
 8008006:	f000 f8cd 	bl	80081a4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800800a:	68bb      	ldr	r3, [r7, #8]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	695b      	ldr	r3, [r3, #20]
 8008010:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008014:	2b40      	cmp	r3, #64	@ 0x40
 8008016:	bf0c      	ite	eq
 8008018:	2301      	moveq	r3, #1
 800801a:	2300      	movne	r3, #0
 800801c:	b2db      	uxtb	r3, r3
 800801e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008020:	68bb      	ldr	r3, [r7, #8]
 8008022:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8008026:	b2db      	uxtb	r3, r3
 8008028:	2b22      	cmp	r3, #34	@ 0x22
 800802a:	d108      	bne.n	800803e <UART_DMAError+0x7a>
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	2b00      	cmp	r3, #0
 8008030:	d005      	beq.n	800803e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	2200      	movs	r2, #0
 8008036:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8008038:	68b8      	ldr	r0, [r7, #8]
 800803a:	f000 f8db 	bl	80081f4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800803e:	68bb      	ldr	r3, [r7, #8]
 8008040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008042:	f043 0210 	orr.w	r2, r3, #16
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800804a:	68b8      	ldr	r0, [r7, #8]
 800804c:	f7fa f968 	bl	8002320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008050:	bf00      	nop
 8008052:	3710      	adds	r7, #16
 8008054:	46bd      	mov	sp, r7
 8008056:	bd80      	pop	{r7, pc}

08008058 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b098      	sub	sp, #96	@ 0x60
 800805c:	af00      	add	r7, sp, #0
 800805e:	60f8      	str	r0, [r7, #12]
 8008060:	60b9      	str	r1, [r7, #8]
 8008062:	4613      	mov	r3, r2
 8008064:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008066:	68ba      	ldr	r2, [r7, #8]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	88fa      	ldrh	r2, [r7, #6]
 8008070:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	2200      	movs	r2, #0
 8008076:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	2222      	movs	r2, #34	@ 0x22
 800807c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008084:	4a44      	ldr	r2, [pc, #272]	@ (8008198 <UART_Start_Receive_DMA+0x140>)
 8008086:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800808c:	4a43      	ldr	r2, [pc, #268]	@ (800819c <UART_Start_Receive_DMA+0x144>)
 800808e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008094:	4a42      	ldr	r2, [pc, #264]	@ (80081a0 <UART_Start_Receive_DMA+0x148>)
 8008096:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800809c:	2200      	movs	r2, #0
 800809e:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80080a0:	f107 0308 	add.w	r3, r7, #8
 80080a4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size) != HAL_OK)
 80080a6:	68fb      	ldr	r3, [r7, #12]
 80080a8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	3304      	adds	r3, #4
 80080b0:	4619      	mov	r1, r3
 80080b2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	88fb      	ldrh	r3, [r7, #6]
 80080b8:	f7fc f9b8 	bl	800442c <HAL_DMA_Start_IT>
 80080bc:	4603      	mov	r3, r0
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d008      	beq.n	80080d4 <UART_Start_Receive_DMA+0x7c>
  {
    /* Set error code to DMA */
    huart->ErrorCode = HAL_UART_ERROR_DMA;
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	2210      	movs	r2, #16
 80080c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Restore huart->RxState to ready */
    huart->RxState = HAL_UART_STATE_READY;
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	2220      	movs	r2, #32
 80080cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_ERROR;
 80080d0:	2301      	movs	r3, #1
 80080d2:	e05d      	b.n	8008190 <UART_Start_Receive_DMA+0x138>
  }
  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80080d4:	2300      	movs	r3, #0
 80080d6:	613b      	str	r3, [r7, #16]
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	613b      	str	r3, [r7, #16]
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	613b      	str	r3, [r7, #16]
 80080e8:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	691b      	ldr	r3, [r3, #16]
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d019      	beq.n	8008126 <UART_Start_Receive_DMA+0xce>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	330c      	adds	r3, #12
 80080f8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80080fc:	e853 3f00 	ldrex	r3, [r3]
 8008100:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008102:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008104:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008108:	65bb      	str	r3, [r7, #88]	@ 0x58
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	330c      	adds	r3, #12
 8008110:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008112:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8008114:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008116:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8008118:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800811a:	e841 2300 	strex	r3, r2, [r1]
 800811e:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008120:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008122:	2b00      	cmp	r3, #0
 8008124:	d1e5      	bne.n	80080f2 <UART_Start_Receive_DMA+0x9a>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3314      	adds	r3, #20
 800812c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800812e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008130:	e853 3f00 	ldrex	r3, [r3]
 8008134:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008136:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008138:	f043 0301 	orr.w	r3, r3, #1
 800813c:	657b      	str	r3, [r7, #84]	@ 0x54
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	3314      	adds	r3, #20
 8008144:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008146:	63ba      	str	r2, [r7, #56]	@ 0x38
 8008148:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800814c:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800814e:	e841 2300 	strex	r3, r2, [r1]
 8008152:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008156:	2b00      	cmp	r3, #0
 8008158:	d1e5      	bne.n	8008126 <UART_Start_Receive_DMA+0xce>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	3314      	adds	r3, #20
 8008160:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008162:	69bb      	ldr	r3, [r7, #24]
 8008164:	e853 3f00 	ldrex	r3, [r3]
 8008168:	617b      	str	r3, [r7, #20]
   return(result);
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008170:	653b      	str	r3, [r7, #80]	@ 0x50
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	3314      	adds	r3, #20
 8008178:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800817a:	627a      	str	r2, [r7, #36]	@ 0x24
 800817c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800817e:	6a39      	ldr	r1, [r7, #32]
 8008180:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008182:	e841 2300 	strex	r3, r2, [r1]
 8008186:	61fb      	str	r3, [r7, #28]
   return(result);
 8008188:	69fb      	ldr	r3, [r7, #28]
 800818a:	2b00      	cmp	r3, #0
 800818c:	d1e5      	bne.n	800815a <UART_Start_Receive_DMA+0x102>

  return HAL_OK;
 800818e:	2300      	movs	r3, #0
}
 8008190:	4618      	mov	r0, r3
 8008192:	3760      	adds	r7, #96	@ 0x60
 8008194:	46bd      	mov	sp, r7
 8008196:	bd80      	pop	{r7, pc}
 8008198:	08007e5d 	.word	0x08007e5d
 800819c:	08007f89 	.word	0x08007f89
 80081a0:	08007fc5 	.word	0x08007fc5

080081a4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80081a4:	b480      	push	{r7}
 80081a6:	b089      	sub	sp, #36	@ 0x24
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	330c      	adds	r3, #12
 80081b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	e853 3f00 	ldrex	r3, [r3]
 80081ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80081bc:	68bb      	ldr	r3, [r7, #8]
 80081be:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80081c2:	61fb      	str	r3, [r7, #28]
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	330c      	adds	r3, #12
 80081ca:	69fa      	ldr	r2, [r7, #28]
 80081cc:	61ba      	str	r2, [r7, #24]
 80081ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6979      	ldr	r1, [r7, #20]
 80081d2:	69ba      	ldr	r2, [r7, #24]
 80081d4:	e841 2300 	strex	r3, r2, [r1]
 80081d8:	613b      	str	r3, [r7, #16]
   return(result);
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e5      	bne.n	80081ac <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80081e8:	bf00      	nop
 80081ea:	3724      	adds	r7, #36	@ 0x24
 80081ec:	46bd      	mov	sp, r7
 80081ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f2:	4770      	bx	lr

080081f4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b095      	sub	sp, #84	@ 0x54
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	330c      	adds	r3, #12
 8008202:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008204:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008206:	e853 3f00 	ldrex	r3, [r3]
 800820a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800820c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800820e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	330c      	adds	r3, #12
 800821a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800821c:	643a      	str	r2, [r7, #64]	@ 0x40
 800821e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008220:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008222:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008224:	e841 2300 	strex	r3, r2, [r1]
 8008228:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800822a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800822c:	2b00      	cmp	r3, #0
 800822e:	d1e5      	bne.n	80081fc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	3314      	adds	r3, #20
 8008236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008238:	6a3b      	ldr	r3, [r7, #32]
 800823a:	e853 3f00 	ldrex	r3, [r3]
 800823e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008240:	69fb      	ldr	r3, [r7, #28]
 8008242:	f023 0301 	bic.w	r3, r3, #1
 8008246:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	3314      	adds	r3, #20
 800824e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008250:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008252:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008254:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008256:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008258:	e841 2300 	strex	r3, r2, [r1]
 800825c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800825e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008260:	2b00      	cmp	r3, #0
 8008262:	d1e5      	bne.n	8008230 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008268:	2b01      	cmp	r3, #1
 800826a:	d119      	bne.n	80082a0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	330c      	adds	r3, #12
 8008272:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	e853 3f00 	ldrex	r3, [r3]
 800827a:	60bb      	str	r3, [r7, #8]
   return(result);
 800827c:	68bb      	ldr	r3, [r7, #8]
 800827e:	f023 0310 	bic.w	r3, r3, #16
 8008282:	647b      	str	r3, [r7, #68]	@ 0x44
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	330c      	adds	r3, #12
 800828a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800828c:	61ba      	str	r2, [r7, #24]
 800828e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008290:	6979      	ldr	r1, [r7, #20]
 8008292:	69ba      	ldr	r2, [r7, #24]
 8008294:	e841 2300 	strex	r3, r2, [r1]
 8008298:	613b      	str	r3, [r7, #16]
   return(result);
 800829a:	693b      	ldr	r3, [r7, #16]
 800829c:	2b00      	cmp	r3, #0
 800829e:	d1e5      	bne.n	800826c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	2220      	movs	r2, #32
 80082a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	2200      	movs	r2, #0
 80082ac:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80082ae:	bf00      	nop
 80082b0:	3754      	adds	r7, #84	@ 0x54
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr

080082ba <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082ba:	b580      	push	{r7, lr}
 80082bc:	b084      	sub	sp, #16
 80082be:	af00      	add	r7, sp, #0
 80082c0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082c6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	2200      	movs	r2, #0
 80082cc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80082ce:	68f8      	ldr	r0, [r7, #12]
 80082d0:	f7fa f826 	bl	8002320 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082d4:	bf00      	nop
 80082d6:	3710      	adds	r7, #16
 80082d8:	46bd      	mov	sp, r7
 80082da:	bd80      	pop	{r7, pc}

080082dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80082dc:	b480      	push	{r7}
 80082de:	b085      	sub	sp, #20
 80082e0:	af00      	add	r7, sp, #0
 80082e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80082ea:	b2db      	uxtb	r3, r3
 80082ec:	2b21      	cmp	r3, #33	@ 0x21
 80082ee:	d13e      	bne.n	800836e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	689b      	ldr	r3, [r3, #8]
 80082f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80082f8:	d114      	bne.n	8008324 <UART_Transmit_IT+0x48>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	691b      	ldr	r3, [r3, #16]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d110      	bne.n	8008324 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	6a1b      	ldr	r3, [r3, #32]
 8008306:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	881b      	ldrh	r3, [r3, #0]
 800830c:	461a      	mov	r2, r3
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008316:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	6a1b      	ldr	r3, [r3, #32]
 800831c:	1c9a      	adds	r2, r3, #2
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	621a      	str	r2, [r3, #32]
 8008322:	e008      	b.n	8008336 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6a1b      	ldr	r3, [r3, #32]
 8008328:	1c59      	adds	r1, r3, #1
 800832a:	687a      	ldr	r2, [r7, #4]
 800832c:	6211      	str	r1, [r2, #32]
 800832e:	781a      	ldrb	r2, [r3, #0]
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	681b      	ldr	r3, [r3, #0]
 8008334:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800833a:	b29b      	uxth	r3, r3
 800833c:	3b01      	subs	r3, #1
 800833e:	b29b      	uxth	r3, r3
 8008340:	687a      	ldr	r2, [r7, #4]
 8008342:	4619      	mov	r1, r3
 8008344:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8008346:	2b00      	cmp	r3, #0
 8008348:	d10f      	bne.n	800836a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	68da      	ldr	r2, [r3, #12]
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008358:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	68da      	ldr	r2, [r3, #12]
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008368:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800836a:	2300      	movs	r3, #0
 800836c:	e000      	b.n	8008370 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800836e:	2302      	movs	r3, #2
  }
}
 8008370:	4618      	mov	r0, r3
 8008372:	3714      	adds	r7, #20
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr

0800837c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800837c:	b580      	push	{r7, lr}
 800837e:	b082      	sub	sp, #8
 8008380:	af00      	add	r7, sp, #0
 8008382:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	68da      	ldr	r2, [r3, #12]
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008392:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2220      	movs	r2, #32
 8008398:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800839c:	6878      	ldr	r0, [r7, #4]
 800839e:	f7ff fd21 	bl	8007de4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80083a2:	2300      	movs	r3, #0
}
 80083a4:	4618      	mov	r0, r3
 80083a6:	3708      	adds	r7, #8
 80083a8:	46bd      	mov	sp, r7
 80083aa:	bd80      	pop	{r7, pc}

080083ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b08c      	sub	sp, #48	@ 0x30
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 80083b4:	2300      	movs	r3, #0
 80083b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 80083b8:	2300      	movs	r3, #0
 80083ba:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b22      	cmp	r3, #34	@ 0x22
 80083c6:	f040 80aa 	bne.w	800851e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80083d2:	d115      	bne.n	8008400 <UART_Receive_IT+0x54>
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	691b      	ldr	r3, [r3, #16]
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d111      	bne.n	8008400 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083e0:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	685b      	ldr	r3, [r3, #4]
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80083ee:	b29a      	uxth	r2, r3
 80083f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083f2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083f8:	1c9a      	adds	r2, r3, #2
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	629a      	str	r2, [r3, #40]	@ 0x28
 80083fe:	e024      	b.n	800844a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008404:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	689b      	ldr	r3, [r3, #8]
 800840a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800840e:	d007      	beq.n	8008420 <UART_Receive_IT+0x74>
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	689b      	ldr	r3, [r3, #8]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d10a      	bne.n	800842e <UART_Receive_IT+0x82>
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	691b      	ldr	r3, [r3, #16]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d106      	bne.n	800842e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	685b      	ldr	r3, [r3, #4]
 8008426:	b2da      	uxtb	r2, r3
 8008428:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800842a:	701a      	strb	r2, [r3, #0]
 800842c:	e008      	b.n	8008440 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	685b      	ldr	r3, [r3, #4]
 8008434:	b2db      	uxtb	r3, r3
 8008436:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800843a:	b2da      	uxtb	r2, r3
 800843c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800843e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008444:	1c5a      	adds	r2, r3, #1
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800844e:	b29b      	uxth	r3, r3
 8008450:	3b01      	subs	r3, #1
 8008452:	b29b      	uxth	r3, r3
 8008454:	687a      	ldr	r2, [r7, #4]
 8008456:	4619      	mov	r1, r3
 8008458:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800845a:	2b00      	cmp	r3, #0
 800845c:	d15d      	bne.n	800851a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68da      	ldr	r2, [r3, #12]
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f022 0220 	bic.w	r2, r2, #32
 800846c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68da      	ldr	r2, [r3, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800847c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	695a      	ldr	r2, [r3, #20]
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f022 0201 	bic.w	r2, r2, #1
 800848c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	2220      	movs	r2, #32
 8008492:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2200      	movs	r2, #0
 800849a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084a0:	2b01      	cmp	r3, #1
 80084a2:	d135      	bne.n	8008510 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084a4:	687b      	ldr	r3, [r7, #4]
 80084a6:	2200      	movs	r2, #0
 80084a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	330c      	adds	r3, #12
 80084b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084b2:	697b      	ldr	r3, [r7, #20]
 80084b4:	e853 3f00 	ldrex	r3, [r3]
 80084b8:	613b      	str	r3, [r7, #16]
   return(result);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f023 0310 	bic.w	r3, r3, #16
 80084c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	330c      	adds	r3, #12
 80084c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80084ca:	623a      	str	r2, [r7, #32]
 80084cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084ce:	69f9      	ldr	r1, [r7, #28]
 80084d0:	6a3a      	ldr	r2, [r7, #32]
 80084d2:	e841 2300 	strex	r3, r2, [r1]
 80084d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80084d8:	69bb      	ldr	r3, [r7, #24]
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d1e5      	bne.n	80084aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	f003 0310 	and.w	r3, r3, #16
 80084e8:	2b10      	cmp	r3, #16
 80084ea:	d10a      	bne.n	8008502 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80084ec:	2300      	movs	r3, #0
 80084ee:	60fb      	str	r3, [r7, #12]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	60fb      	str	r3, [r7, #12]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	685b      	ldr	r3, [r3, #4]
 80084fe:	60fb      	str	r3, [r7, #12]
 8008500:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8008506:	4619      	mov	r1, r3
 8008508:	6878      	ldr	r0, [r7, #4]
 800850a:	f7f9 feb3 	bl	8002274 <HAL_UARTEx_RxEventCallback>
 800850e:	e002      	b.n	8008516 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f7ff fc71 	bl	8007df8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008516:	2300      	movs	r3, #0
 8008518:	e002      	b.n	8008520 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800851a:	2300      	movs	r3, #0
 800851c:	e000      	b.n	8008520 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800851e:	2302      	movs	r3, #2
  }
}
 8008520:	4618      	mov	r0, r3
 8008522:	3730      	adds	r7, #48	@ 0x30
 8008524:	46bd      	mov	sp, r7
 8008526:	bd80      	pop	{r7, pc}

08008528 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008528:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800852c:	b0c0      	sub	sp, #256	@ 0x100
 800852e:	af00      	add	r7, sp, #0
 8008530:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008538:	681b      	ldr	r3, [r3, #0]
 800853a:	691b      	ldr	r3, [r3, #16]
 800853c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8008540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008544:	68d9      	ldr	r1, [r3, #12]
 8008546:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800854a:	681a      	ldr	r2, [r3, #0]
 800854c:	ea40 0301 	orr.w	r3, r0, r1
 8008550:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008552:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008556:	689a      	ldr	r2, [r3, #8]
 8008558:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800855c:	691b      	ldr	r3, [r3, #16]
 800855e:	431a      	orrs	r2, r3
 8008560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008564:	695b      	ldr	r3, [r3, #20]
 8008566:	431a      	orrs	r2, r3
 8008568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800856c:	69db      	ldr	r3, [r3, #28]
 800856e:	4313      	orrs	r3, r2
 8008570:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008574:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	68db      	ldr	r3, [r3, #12]
 800857c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8008580:	f021 010c 	bic.w	r1, r1, #12
 8008584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008588:	681a      	ldr	r2, [r3, #0]
 800858a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800858e:	430b      	orrs	r3, r1
 8008590:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800859e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085a2:	6999      	ldr	r1, [r3, #24]
 80085a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	ea40 0301 	orr.w	r3, r0, r1
 80085ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80085b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085b4:	681a      	ldr	r2, [r3, #0]
 80085b6:	4b8f      	ldr	r3, [pc, #572]	@ (80087f4 <UART_SetConfig+0x2cc>)
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d005      	beq.n	80085c8 <UART_SetConfig+0xa0>
 80085bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085c0:	681a      	ldr	r2, [r3, #0]
 80085c2:	4b8d      	ldr	r3, [pc, #564]	@ (80087f8 <UART_SetConfig+0x2d0>)
 80085c4:	429a      	cmp	r2, r3
 80085c6:	d104      	bne.n	80085d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80085c8:	f7fe fad2 	bl	8006b70 <HAL_RCC_GetPCLK2Freq>
 80085cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80085d0:	e003      	b.n	80085da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80085d2:	f7fe fab9 	bl	8006b48 <HAL_RCC_GetPCLK1Freq>
 80085d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80085de:	69db      	ldr	r3, [r3, #28]
 80085e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80085e4:	f040 810c 	bne.w	8008800 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80085e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80085ec:	2200      	movs	r2, #0
 80085ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80085f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80085f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80085fa:	4622      	mov	r2, r4
 80085fc:	462b      	mov	r3, r5
 80085fe:	1891      	adds	r1, r2, r2
 8008600:	65b9      	str	r1, [r7, #88]	@ 0x58
 8008602:	415b      	adcs	r3, r3
 8008604:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008606:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800860a:	4621      	mov	r1, r4
 800860c:	eb12 0801 	adds.w	r8, r2, r1
 8008610:	4629      	mov	r1, r5
 8008612:	eb43 0901 	adc.w	r9, r3, r1
 8008616:	f04f 0200 	mov.w	r2, #0
 800861a:	f04f 0300 	mov.w	r3, #0
 800861e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008622:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008626:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800862a:	4690      	mov	r8, r2
 800862c:	4699      	mov	r9, r3
 800862e:	4623      	mov	r3, r4
 8008630:	eb18 0303 	adds.w	r3, r8, r3
 8008634:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8008638:	462b      	mov	r3, r5
 800863a:	eb49 0303 	adc.w	r3, r9, r3
 800863e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8008642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008646:	685b      	ldr	r3, [r3, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800864e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8008652:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8008656:	460b      	mov	r3, r1
 8008658:	18db      	adds	r3, r3, r3
 800865a:	653b      	str	r3, [r7, #80]	@ 0x50
 800865c:	4613      	mov	r3, r2
 800865e:	eb42 0303 	adc.w	r3, r2, r3
 8008662:	657b      	str	r3, [r7, #84]	@ 0x54
 8008664:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8008668:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800866c:	f7f8 fb64 	bl	8000d38 <__aeabi_uldivmod>
 8008670:	4602      	mov	r2, r0
 8008672:	460b      	mov	r3, r1
 8008674:	4b61      	ldr	r3, [pc, #388]	@ (80087fc <UART_SetConfig+0x2d4>)
 8008676:	fba3 2302 	umull	r2, r3, r3, r2
 800867a:	095b      	lsrs	r3, r3, #5
 800867c:	011c      	lsls	r4, r3, #4
 800867e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008682:	2200      	movs	r2, #0
 8008684:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8008688:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800868c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8008690:	4642      	mov	r2, r8
 8008692:	464b      	mov	r3, r9
 8008694:	1891      	adds	r1, r2, r2
 8008696:	64b9      	str	r1, [r7, #72]	@ 0x48
 8008698:	415b      	adcs	r3, r3
 800869a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800869c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80086a0:	4641      	mov	r1, r8
 80086a2:	eb12 0a01 	adds.w	sl, r2, r1
 80086a6:	4649      	mov	r1, r9
 80086a8:	eb43 0b01 	adc.w	fp, r3, r1
 80086ac:	f04f 0200 	mov.w	r2, #0
 80086b0:	f04f 0300 	mov.w	r3, #0
 80086b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80086b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80086bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80086c0:	4692      	mov	sl, r2
 80086c2:	469b      	mov	fp, r3
 80086c4:	4643      	mov	r3, r8
 80086c6:	eb1a 0303 	adds.w	r3, sl, r3
 80086ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80086ce:	464b      	mov	r3, r9
 80086d0:	eb4b 0303 	adc.w	r3, fp, r3
 80086d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80086d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80086dc:	685b      	ldr	r3, [r3, #4]
 80086de:	2200      	movs	r2, #0
 80086e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80086e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80086e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80086ec:	460b      	mov	r3, r1
 80086ee:	18db      	adds	r3, r3, r3
 80086f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80086f2:	4613      	mov	r3, r2
 80086f4:	eb42 0303 	adc.w	r3, r2, r3
 80086f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80086fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80086fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8008702:	f7f8 fb19 	bl	8000d38 <__aeabi_uldivmod>
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	4611      	mov	r1, r2
 800870c:	4b3b      	ldr	r3, [pc, #236]	@ (80087fc <UART_SetConfig+0x2d4>)
 800870e:	fba3 2301 	umull	r2, r3, r3, r1
 8008712:	095b      	lsrs	r3, r3, #5
 8008714:	2264      	movs	r2, #100	@ 0x64
 8008716:	fb02 f303 	mul.w	r3, r2, r3
 800871a:	1acb      	subs	r3, r1, r3
 800871c:	00db      	lsls	r3, r3, #3
 800871e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8008722:	4b36      	ldr	r3, [pc, #216]	@ (80087fc <UART_SetConfig+0x2d4>)
 8008724:	fba3 2302 	umull	r2, r3, r3, r2
 8008728:	095b      	lsrs	r3, r3, #5
 800872a:	005b      	lsls	r3, r3, #1
 800872c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8008730:	441c      	add	r4, r3
 8008732:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008736:	2200      	movs	r2, #0
 8008738:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800873c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8008740:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8008744:	4642      	mov	r2, r8
 8008746:	464b      	mov	r3, r9
 8008748:	1891      	adds	r1, r2, r2
 800874a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800874c:	415b      	adcs	r3, r3
 800874e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008750:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8008754:	4641      	mov	r1, r8
 8008756:	1851      	adds	r1, r2, r1
 8008758:	6339      	str	r1, [r7, #48]	@ 0x30
 800875a:	4649      	mov	r1, r9
 800875c:	414b      	adcs	r3, r1
 800875e:	637b      	str	r3, [r7, #52]	@ 0x34
 8008760:	f04f 0200 	mov.w	r2, #0
 8008764:	f04f 0300 	mov.w	r3, #0
 8008768:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800876c:	4659      	mov	r1, fp
 800876e:	00cb      	lsls	r3, r1, #3
 8008770:	4651      	mov	r1, sl
 8008772:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008776:	4651      	mov	r1, sl
 8008778:	00ca      	lsls	r2, r1, #3
 800877a:	4610      	mov	r0, r2
 800877c:	4619      	mov	r1, r3
 800877e:	4603      	mov	r3, r0
 8008780:	4642      	mov	r2, r8
 8008782:	189b      	adds	r3, r3, r2
 8008784:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8008788:	464b      	mov	r3, r9
 800878a:	460a      	mov	r2, r1
 800878c:	eb42 0303 	adc.w	r3, r2, r3
 8008790:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8008794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008798:	685b      	ldr	r3, [r3, #4]
 800879a:	2200      	movs	r2, #0
 800879c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80087a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80087a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80087a8:	460b      	mov	r3, r1
 80087aa:	18db      	adds	r3, r3, r3
 80087ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80087ae:	4613      	mov	r3, r2
 80087b0:	eb42 0303 	adc.w	r3, r2, r3
 80087b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80087b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80087ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80087be:	f7f8 fabb 	bl	8000d38 <__aeabi_uldivmod>
 80087c2:	4602      	mov	r2, r0
 80087c4:	460b      	mov	r3, r1
 80087c6:	4b0d      	ldr	r3, [pc, #52]	@ (80087fc <UART_SetConfig+0x2d4>)
 80087c8:	fba3 1302 	umull	r1, r3, r3, r2
 80087cc:	095b      	lsrs	r3, r3, #5
 80087ce:	2164      	movs	r1, #100	@ 0x64
 80087d0:	fb01 f303 	mul.w	r3, r1, r3
 80087d4:	1ad3      	subs	r3, r2, r3
 80087d6:	00db      	lsls	r3, r3, #3
 80087d8:	3332      	adds	r3, #50	@ 0x32
 80087da:	4a08      	ldr	r2, [pc, #32]	@ (80087fc <UART_SetConfig+0x2d4>)
 80087dc:	fba2 2303 	umull	r2, r3, r2, r3
 80087e0:	095b      	lsrs	r3, r3, #5
 80087e2:	f003 0207 	and.w	r2, r3, #7
 80087e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80087ea:	681b      	ldr	r3, [r3, #0]
 80087ec:	4422      	add	r2, r4
 80087ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80087f0:	e106      	b.n	8008a00 <UART_SetConfig+0x4d8>
 80087f2:	bf00      	nop
 80087f4:	40011000 	.word	0x40011000
 80087f8:	40011400 	.word	0x40011400
 80087fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008800:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008804:	2200      	movs	r2, #0
 8008806:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800880a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800880e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8008812:	4642      	mov	r2, r8
 8008814:	464b      	mov	r3, r9
 8008816:	1891      	adds	r1, r2, r2
 8008818:	6239      	str	r1, [r7, #32]
 800881a:	415b      	adcs	r3, r3
 800881c:	627b      	str	r3, [r7, #36]	@ 0x24
 800881e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008822:	4641      	mov	r1, r8
 8008824:	1854      	adds	r4, r2, r1
 8008826:	4649      	mov	r1, r9
 8008828:	eb43 0501 	adc.w	r5, r3, r1
 800882c:	f04f 0200 	mov.w	r2, #0
 8008830:	f04f 0300 	mov.w	r3, #0
 8008834:	00eb      	lsls	r3, r5, #3
 8008836:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800883a:	00e2      	lsls	r2, r4, #3
 800883c:	4614      	mov	r4, r2
 800883e:	461d      	mov	r5, r3
 8008840:	4643      	mov	r3, r8
 8008842:	18e3      	adds	r3, r4, r3
 8008844:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8008848:	464b      	mov	r3, r9
 800884a:	eb45 0303 	adc.w	r3, r5, r3
 800884e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8008852:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	2200      	movs	r2, #0
 800885a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800885e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8008862:	f04f 0200 	mov.w	r2, #0
 8008866:	f04f 0300 	mov.w	r3, #0
 800886a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800886e:	4629      	mov	r1, r5
 8008870:	008b      	lsls	r3, r1, #2
 8008872:	4621      	mov	r1, r4
 8008874:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008878:	4621      	mov	r1, r4
 800887a:	008a      	lsls	r2, r1, #2
 800887c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8008880:	f7f8 fa5a 	bl	8000d38 <__aeabi_uldivmod>
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	4b60      	ldr	r3, [pc, #384]	@ (8008a0c <UART_SetConfig+0x4e4>)
 800888a:	fba3 2302 	umull	r2, r3, r3, r2
 800888e:	095b      	lsrs	r3, r3, #5
 8008890:	011c      	lsls	r4, r3, #4
 8008892:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008896:	2200      	movs	r2, #0
 8008898:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800889c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80088a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80088a4:	4642      	mov	r2, r8
 80088a6:	464b      	mov	r3, r9
 80088a8:	1891      	adds	r1, r2, r2
 80088aa:	61b9      	str	r1, [r7, #24]
 80088ac:	415b      	adcs	r3, r3
 80088ae:	61fb      	str	r3, [r7, #28]
 80088b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80088b4:	4641      	mov	r1, r8
 80088b6:	1851      	adds	r1, r2, r1
 80088b8:	6139      	str	r1, [r7, #16]
 80088ba:	4649      	mov	r1, r9
 80088bc:	414b      	adcs	r3, r1
 80088be:	617b      	str	r3, [r7, #20]
 80088c0:	f04f 0200 	mov.w	r2, #0
 80088c4:	f04f 0300 	mov.w	r3, #0
 80088c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80088cc:	4659      	mov	r1, fp
 80088ce:	00cb      	lsls	r3, r1, #3
 80088d0:	4651      	mov	r1, sl
 80088d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80088d6:	4651      	mov	r1, sl
 80088d8:	00ca      	lsls	r2, r1, #3
 80088da:	4610      	mov	r0, r2
 80088dc:	4619      	mov	r1, r3
 80088de:	4603      	mov	r3, r0
 80088e0:	4642      	mov	r2, r8
 80088e2:	189b      	adds	r3, r3, r2
 80088e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80088e8:	464b      	mov	r3, r9
 80088ea:	460a      	mov	r2, r1
 80088ec:	eb42 0303 	adc.w	r3, r2, r3
 80088f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80088f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80088f8:	685b      	ldr	r3, [r3, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80088fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008900:	f04f 0200 	mov.w	r2, #0
 8008904:	f04f 0300 	mov.w	r3, #0
 8008908:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800890c:	4649      	mov	r1, r9
 800890e:	008b      	lsls	r3, r1, #2
 8008910:	4641      	mov	r1, r8
 8008912:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008916:	4641      	mov	r1, r8
 8008918:	008a      	lsls	r2, r1, #2
 800891a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800891e:	f7f8 fa0b 	bl	8000d38 <__aeabi_uldivmod>
 8008922:	4602      	mov	r2, r0
 8008924:	460b      	mov	r3, r1
 8008926:	4611      	mov	r1, r2
 8008928:	4b38      	ldr	r3, [pc, #224]	@ (8008a0c <UART_SetConfig+0x4e4>)
 800892a:	fba3 2301 	umull	r2, r3, r3, r1
 800892e:	095b      	lsrs	r3, r3, #5
 8008930:	2264      	movs	r2, #100	@ 0x64
 8008932:	fb02 f303 	mul.w	r3, r2, r3
 8008936:	1acb      	subs	r3, r1, r3
 8008938:	011b      	lsls	r3, r3, #4
 800893a:	3332      	adds	r3, #50	@ 0x32
 800893c:	4a33      	ldr	r2, [pc, #204]	@ (8008a0c <UART_SetConfig+0x4e4>)
 800893e:	fba2 2303 	umull	r2, r3, r2, r3
 8008942:	095b      	lsrs	r3, r3, #5
 8008944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008948:	441c      	add	r4, r3
 800894a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800894e:	2200      	movs	r2, #0
 8008950:	673b      	str	r3, [r7, #112]	@ 0x70
 8008952:	677a      	str	r2, [r7, #116]	@ 0x74
 8008954:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008958:	4642      	mov	r2, r8
 800895a:	464b      	mov	r3, r9
 800895c:	1891      	adds	r1, r2, r2
 800895e:	60b9      	str	r1, [r7, #8]
 8008960:	415b      	adcs	r3, r3
 8008962:	60fb      	str	r3, [r7, #12]
 8008964:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008968:	4641      	mov	r1, r8
 800896a:	1851      	adds	r1, r2, r1
 800896c:	6039      	str	r1, [r7, #0]
 800896e:	4649      	mov	r1, r9
 8008970:	414b      	adcs	r3, r1
 8008972:	607b      	str	r3, [r7, #4]
 8008974:	f04f 0200 	mov.w	r2, #0
 8008978:	f04f 0300 	mov.w	r3, #0
 800897c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008980:	4659      	mov	r1, fp
 8008982:	00cb      	lsls	r3, r1, #3
 8008984:	4651      	mov	r1, sl
 8008986:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800898a:	4651      	mov	r1, sl
 800898c:	00ca      	lsls	r2, r1, #3
 800898e:	4610      	mov	r0, r2
 8008990:	4619      	mov	r1, r3
 8008992:	4603      	mov	r3, r0
 8008994:	4642      	mov	r2, r8
 8008996:	189b      	adds	r3, r3, r2
 8008998:	66bb      	str	r3, [r7, #104]	@ 0x68
 800899a:	464b      	mov	r3, r9
 800899c:	460a      	mov	r2, r1
 800899e:	eb42 0303 	adc.w	r3, r2, r3
 80089a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80089a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80089ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80089b0:	f04f 0200 	mov.w	r2, #0
 80089b4:	f04f 0300 	mov.w	r3, #0
 80089b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80089bc:	4649      	mov	r1, r9
 80089be:	008b      	lsls	r3, r1, #2
 80089c0:	4641      	mov	r1, r8
 80089c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089c6:	4641      	mov	r1, r8
 80089c8:	008a      	lsls	r2, r1, #2
 80089ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80089ce:	f7f8 f9b3 	bl	8000d38 <__aeabi_uldivmod>
 80089d2:	4602      	mov	r2, r0
 80089d4:	460b      	mov	r3, r1
 80089d6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <UART_SetConfig+0x4e4>)
 80089d8:	fba3 1302 	umull	r1, r3, r3, r2
 80089dc:	095b      	lsrs	r3, r3, #5
 80089de:	2164      	movs	r1, #100	@ 0x64
 80089e0:	fb01 f303 	mul.w	r3, r1, r3
 80089e4:	1ad3      	subs	r3, r2, r3
 80089e6:	011b      	lsls	r3, r3, #4
 80089e8:	3332      	adds	r3, #50	@ 0x32
 80089ea:	4a08      	ldr	r2, [pc, #32]	@ (8008a0c <UART_SetConfig+0x4e4>)
 80089ec:	fba2 2303 	umull	r2, r3, r2, r3
 80089f0:	095b      	lsrs	r3, r3, #5
 80089f2:	f003 020f 	and.w	r2, r3, #15
 80089f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4422      	add	r2, r4
 80089fe:	609a      	str	r2, [r3, #8]
}
 8008a00:	bf00      	nop
 8008a02:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8008a06:	46bd      	mov	sp, r7
 8008a08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a0c:	51eb851f 	.word	0x51eb851f

08008a10 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008a10:	b084      	sub	sp, #16
 8008a12:	b580      	push	{r7, lr}
 8008a14:	b084      	sub	sp, #16
 8008a16:	af00      	add	r7, sp, #0
 8008a18:	6078      	str	r0, [r7, #4]
 8008a1a:	f107 001c 	add.w	r0, r7, #28
 8008a1e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008a22:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8008a26:	2b01      	cmp	r3, #1
 8008a28:	d123      	bne.n	8008a72 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a2e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	68db      	ldr	r3, [r3, #12]
 8008a3a:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8008a3e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008a42:	687a      	ldr	r2, [r7, #4]
 8008a44:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008a52:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8008a56:	2b01      	cmp	r3, #1
 8008a58:	d105      	bne.n	8008a66 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	68db      	ldr	r3, [r3, #12]
 8008a5e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a66:	6878      	ldr	r0, [r7, #4]
 8008a68:	f001 fae8 	bl	800a03c <USB_CoreReset>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	73fb      	strb	r3, [r7, #15]
 8008a70:	e01b      	b.n	8008aaa <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	68db      	ldr	r3, [r3, #12]
 8008a76:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008a7e:	6878      	ldr	r0, [r7, #4]
 8008a80:	f001 fadc 	bl	800a03c <USB_CoreReset>
 8008a84:	4603      	mov	r3, r0
 8008a86:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8008a88:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d106      	bne.n	8008a9e <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a94:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	639a      	str	r2, [r3, #56]	@ 0x38
 8008a9c:	e005      	b.n	8008aaa <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008aa2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008aaa:	7fbb      	ldrb	r3, [r7, #30]
 8008aac:	2b01      	cmp	r3, #1
 8008aae:	d10b      	bne.n	8008ac8 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	f043 0206 	orr.w	r2, r3, #6
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	689b      	ldr	r3, [r3, #8]
 8008ac0:	f043 0220 	orr.w	r2, r3, #32
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008ac8:	7bfb      	ldrb	r3, [r7, #15]
}
 8008aca:	4618      	mov	r0, r3
 8008acc:	3710      	adds	r7, #16
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008ad4:	b004      	add	sp, #16
 8008ad6:	4770      	bx	lr

08008ad8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008ad8:	b480      	push	{r7}
 8008ada:	b087      	sub	sp, #28
 8008adc:	af00      	add	r7, sp, #0
 8008ade:	60f8      	str	r0, [r7, #12]
 8008ae0:	60b9      	str	r1, [r7, #8]
 8008ae2:	4613      	mov	r3, r2
 8008ae4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8008ae6:	79fb      	ldrb	r3, [r7, #7]
 8008ae8:	2b02      	cmp	r3, #2
 8008aea:	d165      	bne.n	8008bb8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008aec:	68bb      	ldr	r3, [r7, #8]
 8008aee:	4a41      	ldr	r2, [pc, #260]	@ (8008bf4 <USB_SetTurnaroundTime+0x11c>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d906      	bls.n	8008b02 <USB_SetTurnaroundTime+0x2a>
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	4a40      	ldr	r2, [pc, #256]	@ (8008bf8 <USB_SetTurnaroundTime+0x120>)
 8008af8:	4293      	cmp	r3, r2
 8008afa:	d202      	bcs.n	8008b02 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008afc:	230f      	movs	r3, #15
 8008afe:	617b      	str	r3, [r7, #20]
 8008b00:	e062      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8008b02:	68bb      	ldr	r3, [r7, #8]
 8008b04:	4a3c      	ldr	r2, [pc, #240]	@ (8008bf8 <USB_SetTurnaroundTime+0x120>)
 8008b06:	4293      	cmp	r3, r2
 8008b08:	d306      	bcc.n	8008b18 <USB_SetTurnaroundTime+0x40>
 8008b0a:	68bb      	ldr	r3, [r7, #8]
 8008b0c:	4a3b      	ldr	r2, [pc, #236]	@ (8008bfc <USB_SetTurnaroundTime+0x124>)
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d202      	bcs.n	8008b18 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8008b12:	230e      	movs	r3, #14
 8008b14:	617b      	str	r3, [r7, #20]
 8008b16:	e057      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008b18:	68bb      	ldr	r3, [r7, #8]
 8008b1a:	4a38      	ldr	r2, [pc, #224]	@ (8008bfc <USB_SetTurnaroundTime+0x124>)
 8008b1c:	4293      	cmp	r3, r2
 8008b1e:	d306      	bcc.n	8008b2e <USB_SetTurnaroundTime+0x56>
 8008b20:	68bb      	ldr	r3, [r7, #8]
 8008b22:	4a37      	ldr	r2, [pc, #220]	@ (8008c00 <USB_SetTurnaroundTime+0x128>)
 8008b24:	4293      	cmp	r3, r2
 8008b26:	d202      	bcs.n	8008b2e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008b28:	230d      	movs	r3, #13
 8008b2a:	617b      	str	r3, [r7, #20]
 8008b2c:	e04c      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008b2e:	68bb      	ldr	r3, [r7, #8]
 8008b30:	4a33      	ldr	r2, [pc, #204]	@ (8008c00 <USB_SetTurnaroundTime+0x128>)
 8008b32:	4293      	cmp	r3, r2
 8008b34:	d306      	bcc.n	8008b44 <USB_SetTurnaroundTime+0x6c>
 8008b36:	68bb      	ldr	r3, [r7, #8]
 8008b38:	4a32      	ldr	r2, [pc, #200]	@ (8008c04 <USB_SetTurnaroundTime+0x12c>)
 8008b3a:	4293      	cmp	r3, r2
 8008b3c:	d802      	bhi.n	8008b44 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8008b3e:	230c      	movs	r3, #12
 8008b40:	617b      	str	r3, [r7, #20]
 8008b42:	e041      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8008b44:	68bb      	ldr	r3, [r7, #8]
 8008b46:	4a2f      	ldr	r2, [pc, #188]	@ (8008c04 <USB_SetTurnaroundTime+0x12c>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d906      	bls.n	8008b5a <USB_SetTurnaroundTime+0x82>
 8008b4c:	68bb      	ldr	r3, [r7, #8]
 8008b4e:	4a2e      	ldr	r2, [pc, #184]	@ (8008c08 <USB_SetTurnaroundTime+0x130>)
 8008b50:	4293      	cmp	r3, r2
 8008b52:	d802      	bhi.n	8008b5a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8008b54:	230b      	movs	r3, #11
 8008b56:	617b      	str	r3, [r7, #20]
 8008b58:	e036      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8008b5a:	68bb      	ldr	r3, [r7, #8]
 8008b5c:	4a2a      	ldr	r2, [pc, #168]	@ (8008c08 <USB_SetTurnaroundTime+0x130>)
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d906      	bls.n	8008b70 <USB_SetTurnaroundTime+0x98>
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	4a29      	ldr	r2, [pc, #164]	@ (8008c0c <USB_SetTurnaroundTime+0x134>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d802      	bhi.n	8008b70 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8008b6a:	230a      	movs	r3, #10
 8008b6c:	617b      	str	r3, [r7, #20]
 8008b6e:	e02b      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8008b70:	68bb      	ldr	r3, [r7, #8]
 8008b72:	4a26      	ldr	r2, [pc, #152]	@ (8008c0c <USB_SetTurnaroundTime+0x134>)
 8008b74:	4293      	cmp	r3, r2
 8008b76:	d906      	bls.n	8008b86 <USB_SetTurnaroundTime+0xae>
 8008b78:	68bb      	ldr	r3, [r7, #8]
 8008b7a:	4a25      	ldr	r2, [pc, #148]	@ (8008c10 <USB_SetTurnaroundTime+0x138>)
 8008b7c:	4293      	cmp	r3, r2
 8008b7e:	d202      	bcs.n	8008b86 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8008b80:	2309      	movs	r3, #9
 8008b82:	617b      	str	r3, [r7, #20]
 8008b84:	e020      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8008b86:	68bb      	ldr	r3, [r7, #8]
 8008b88:	4a21      	ldr	r2, [pc, #132]	@ (8008c10 <USB_SetTurnaroundTime+0x138>)
 8008b8a:	4293      	cmp	r3, r2
 8008b8c:	d306      	bcc.n	8008b9c <USB_SetTurnaroundTime+0xc4>
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	4a20      	ldr	r2, [pc, #128]	@ (8008c14 <USB_SetTurnaroundTime+0x13c>)
 8008b92:	4293      	cmp	r3, r2
 8008b94:	d802      	bhi.n	8008b9c <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8008b96:	2308      	movs	r3, #8
 8008b98:	617b      	str	r3, [r7, #20]
 8008b9a:	e015      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	4a1d      	ldr	r2, [pc, #116]	@ (8008c14 <USB_SetTurnaroundTime+0x13c>)
 8008ba0:	4293      	cmp	r3, r2
 8008ba2:	d906      	bls.n	8008bb2 <USB_SetTurnaroundTime+0xda>
 8008ba4:	68bb      	ldr	r3, [r7, #8]
 8008ba6:	4a1c      	ldr	r2, [pc, #112]	@ (8008c18 <USB_SetTurnaroundTime+0x140>)
 8008ba8:	4293      	cmp	r3, r2
 8008baa:	d202      	bcs.n	8008bb2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008bac:	2307      	movs	r3, #7
 8008bae:	617b      	str	r3, [r7, #20]
 8008bb0:	e00a      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8008bb2:	2306      	movs	r3, #6
 8008bb4:	617b      	str	r3, [r7, #20]
 8008bb6:	e007      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008bb8:	79fb      	ldrb	r3, [r7, #7]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008bbe:	2309      	movs	r3, #9
 8008bc0:	617b      	str	r3, [r7, #20]
 8008bc2:	e001      	b.n	8008bc8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8008bc4:	2309      	movs	r3, #9
 8008bc6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	68db      	ldr	r3, [r3, #12]
 8008bcc:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	68da      	ldr	r2, [r3, #12]
 8008bd8:	697b      	ldr	r3, [r7, #20]
 8008bda:	029b      	lsls	r3, r3, #10
 8008bdc:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008be0:	431a      	orrs	r2, r3
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008be6:	2300      	movs	r3, #0
}
 8008be8:	4618      	mov	r0, r3
 8008bea:	371c      	adds	r7, #28
 8008bec:	46bd      	mov	sp, r7
 8008bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bf2:	4770      	bx	lr
 8008bf4:	00d8acbf 	.word	0x00d8acbf
 8008bf8:	00e4e1c0 	.word	0x00e4e1c0
 8008bfc:	00f42400 	.word	0x00f42400
 8008c00:	01067380 	.word	0x01067380
 8008c04:	011a499f 	.word	0x011a499f
 8008c08:	01312cff 	.word	0x01312cff
 8008c0c:	014ca43f 	.word	0x014ca43f
 8008c10:	016e3600 	.word	0x016e3600
 8008c14:	01a6ab1f 	.word	0x01a6ab1f
 8008c18:	01e84800 	.word	0x01e84800

08008c1c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c1c:	b480      	push	{r7}
 8008c1e:	b083      	sub	sp, #12
 8008c20:	af00      	add	r7, sp, #0
 8008c22:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	689b      	ldr	r3, [r3, #8]
 8008c28:	f043 0201 	orr.w	r2, r3, #1
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c30:	2300      	movs	r3, #0
}
 8008c32:	4618      	mov	r0, r3
 8008c34:	370c      	adds	r7, #12
 8008c36:	46bd      	mov	sp, r7
 8008c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3c:	4770      	bx	lr

08008c3e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008c3e:	b480      	push	{r7}
 8008c40:	b083      	sub	sp, #12
 8008c42:	af00      	add	r7, sp, #0
 8008c44:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	f023 0201 	bic.w	r2, r3, #1
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008c52:	2300      	movs	r3, #0
}
 8008c54:	4618      	mov	r0, r3
 8008c56:	370c      	adds	r7, #12
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c5e:	4770      	bx	lr

08008c60 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008c60:	b580      	push	{r7, lr}
 8008c62:	b084      	sub	sp, #16
 8008c64:	af00      	add	r7, sp, #0
 8008c66:	6078      	str	r0, [r7, #4]
 8008c68:	460b      	mov	r3, r1
 8008c6a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	68db      	ldr	r3, [r3, #12]
 8008c74:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008c7c:	78fb      	ldrb	r3, [r7, #3]
 8008c7e:	2b01      	cmp	r3, #1
 8008c80:	d115      	bne.n	8008cae <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	68db      	ldr	r3, [r3, #12]
 8008c86:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008c8e:	200a      	movs	r0, #10
 8008c90:	f7fb f9e8 	bl	8004064 <HAL_Delay>
      ms += 10U;
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	330a      	adds	r3, #10
 8008c98:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008c9a:	6878      	ldr	r0, [r7, #4]
 8008c9c:	f001 f93f 	bl	8009f1e <USB_GetMode>
 8008ca0:	4603      	mov	r3, r0
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d01e      	beq.n	8008ce4 <USB_SetCurrentMode+0x84>
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2bc7      	cmp	r3, #199	@ 0xc7
 8008caa:	d9f0      	bls.n	8008c8e <USB_SetCurrentMode+0x2e>
 8008cac:	e01a      	b.n	8008ce4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008cae:	78fb      	ldrb	r3, [r7, #3]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d115      	bne.n	8008ce0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	68db      	ldr	r3, [r3, #12]
 8008cb8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008cc0:	200a      	movs	r0, #10
 8008cc2:	f7fb f9cf 	bl	8004064 <HAL_Delay>
      ms += 10U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	330a      	adds	r3, #10
 8008cca:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008ccc:	6878      	ldr	r0, [r7, #4]
 8008cce:	f001 f926 	bl	8009f1e <USB_GetMode>
 8008cd2:	4603      	mov	r3, r0
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d005      	beq.n	8008ce4 <USB_SetCurrentMode+0x84>
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	2bc7      	cmp	r3, #199	@ 0xc7
 8008cdc:	d9f0      	bls.n	8008cc0 <USB_SetCurrentMode+0x60>
 8008cde:	e001      	b.n	8008ce4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008ce0:	2301      	movs	r3, #1
 8008ce2:	e005      	b.n	8008cf0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	2bc8      	cmp	r3, #200	@ 0xc8
 8008ce8:	d101      	bne.n	8008cee <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008cea:	2301      	movs	r3, #1
 8008cec:	e000      	b.n	8008cf0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008cee:	2300      	movs	r3, #0
}
 8008cf0:	4618      	mov	r0, r3
 8008cf2:	3710      	adds	r7, #16
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008cf8:	b084      	sub	sp, #16
 8008cfa:	b580      	push	{r7, lr}
 8008cfc:	b086      	sub	sp, #24
 8008cfe:	af00      	add	r7, sp, #0
 8008d00:	6078      	str	r0, [r7, #4]
 8008d02:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8008d06:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008d0a:	2300      	movs	r3, #0
 8008d0c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8008d12:	2300      	movs	r3, #0
 8008d14:	613b      	str	r3, [r7, #16]
 8008d16:	e009      	b.n	8008d2c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008d18:	687a      	ldr	r2, [r7, #4]
 8008d1a:	693b      	ldr	r3, [r7, #16]
 8008d1c:	3340      	adds	r3, #64	@ 0x40
 8008d1e:	009b      	lsls	r3, r3, #2
 8008d20:	4413      	add	r3, r2
 8008d22:	2200      	movs	r2, #0
 8008d24:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8008d26:	693b      	ldr	r3, [r7, #16]
 8008d28:	3301      	adds	r3, #1
 8008d2a:	613b      	str	r3, [r7, #16]
 8008d2c:	693b      	ldr	r3, [r7, #16]
 8008d2e:	2b0e      	cmp	r3, #14
 8008d30:	d9f2      	bls.n	8008d18 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8008d32:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d11c      	bne.n	8008d74 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008d40:	685b      	ldr	r3, [r3, #4]
 8008d42:	68fa      	ldr	r2, [r7, #12]
 8008d44:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008d48:	f043 0302 	orr.w	r3, r3, #2
 8008d4c:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d52:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d5e:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d6a:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	639a      	str	r2, [r3, #56]	@ 0x38
 8008d72:	e00b      	b.n	8008d8c <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d78:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008d84:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008d92:	461a      	mov	r2, r3
 8008d94:	2300      	movs	r3, #0
 8008d96:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008d98:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d10d      	bne.n	8008dbc <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008da0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d104      	bne.n	8008db2 <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008da8:	2100      	movs	r1, #0
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f968 	bl	8009080 <USB_SetDevSpeed>
 8008db0:	e008      	b.n	8008dc4 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8008db2:	2101      	movs	r1, #1
 8008db4:	6878      	ldr	r0, [r7, #4]
 8008db6:	f000 f963 	bl	8009080 <USB_SetDevSpeed>
 8008dba:	e003      	b.n	8008dc4 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008dbc:	2103      	movs	r1, #3
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f000 f95e 	bl	8009080 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8008dc4:	2110      	movs	r1, #16
 8008dc6:	6878      	ldr	r0, [r7, #4]
 8008dc8:	f000 f8fa 	bl	8008fc0 <USB_FlushTxFifo>
 8008dcc:	4603      	mov	r3, r0
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d001      	beq.n	8008dd6 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f000 f924 	bl	8009024 <USB_FlushRxFifo>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d001      	beq.n	8008de6 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 8008de2:	2301      	movs	r3, #1
 8008de4:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008dec:	461a      	mov	r2, r3
 8008dee:	2300      	movs	r3, #0
 8008df0:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008df8:	461a      	mov	r2, r3
 8008dfa:	2300      	movs	r3, #0
 8008dfc:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008dfe:	68fb      	ldr	r3, [r7, #12]
 8008e00:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e04:	461a      	mov	r2, r3
 8008e06:	2300      	movs	r3, #0
 8008e08:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e0a:	2300      	movs	r3, #0
 8008e0c:	613b      	str	r3, [r7, #16]
 8008e0e:	e043      	b.n	8008e98 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008e10:	693b      	ldr	r3, [r7, #16]
 8008e12:	015a      	lsls	r2, r3, #5
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	4413      	add	r3, r2
 8008e18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008e22:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008e26:	d118      	bne.n	8008e5a <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d10a      	bne.n	8008e44 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008e2e:	693b      	ldr	r3, [r7, #16]
 8008e30:	015a      	lsls	r2, r3, #5
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	4413      	add	r3, r2
 8008e36:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008e40:	6013      	str	r3, [r2, #0]
 8008e42:	e013      	b.n	8008e6c <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008e44:	693b      	ldr	r3, [r7, #16]
 8008e46:	015a      	lsls	r2, r3, #5
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	4413      	add	r3, r2
 8008e4c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e50:	461a      	mov	r2, r3
 8008e52:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008e56:	6013      	str	r3, [r2, #0]
 8008e58:	e008      	b.n	8008e6c <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008e5a:	693b      	ldr	r3, [r7, #16]
 8008e5c:	015a      	lsls	r2, r3, #5
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	4413      	add	r3, r2
 8008e62:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e66:	461a      	mov	r2, r3
 8008e68:	2300      	movs	r3, #0
 8008e6a:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	015a      	lsls	r2, r3, #5
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	4413      	add	r3, r2
 8008e74:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e78:	461a      	mov	r2, r3
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008e7e:	693b      	ldr	r3, [r7, #16]
 8008e80:	015a      	lsls	r2, r3, #5
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	4413      	add	r3, r2
 8008e86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e8a:	461a      	mov	r2, r3
 8008e8c:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008e90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008e92:	693b      	ldr	r3, [r7, #16]
 8008e94:	3301      	adds	r3, #1
 8008e96:	613b      	str	r3, [r7, #16]
 8008e98:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008e9c:	461a      	mov	r2, r3
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	4293      	cmp	r3, r2
 8008ea2:	d3b5      	bcc.n	8008e10 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	613b      	str	r3, [r7, #16]
 8008ea8:	e043      	b.n	8008f32 <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008eaa:	693b      	ldr	r3, [r7, #16]
 8008eac:	015a      	lsls	r2, r3, #5
 8008eae:	68fb      	ldr	r3, [r7, #12]
 8008eb0:	4413      	add	r3, r2
 8008eb2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008ebc:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008ec0:	d118      	bne.n	8008ef4 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 8008ec2:	693b      	ldr	r3, [r7, #16]
 8008ec4:	2b00      	cmp	r3, #0
 8008ec6:	d10a      	bne.n	8008ede <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008ec8:	693b      	ldr	r3, [r7, #16]
 8008eca:	015a      	lsls	r2, r3, #5
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	4413      	add	r3, r2
 8008ed0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008ed4:	461a      	mov	r2, r3
 8008ed6:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008eda:	6013      	str	r3, [r2, #0]
 8008edc:	e013      	b.n	8008f06 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008ede:	693b      	ldr	r3, [r7, #16]
 8008ee0:	015a      	lsls	r2, r3, #5
 8008ee2:	68fb      	ldr	r3, [r7, #12]
 8008ee4:	4413      	add	r3, r2
 8008ee6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008eea:	461a      	mov	r2, r3
 8008eec:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008ef0:	6013      	str	r3, [r2, #0]
 8008ef2:	e008      	b.n	8008f06 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008ef4:	693b      	ldr	r3, [r7, #16]
 8008ef6:	015a      	lsls	r2, r3, #5
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	4413      	add	r3, r2
 8008efc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f00:	461a      	mov	r2, r3
 8008f02:	2300      	movs	r3, #0
 8008f04:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008f06:	693b      	ldr	r3, [r7, #16]
 8008f08:	015a      	lsls	r2, r3, #5
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	4413      	add	r3, r2
 8008f0e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f12:	461a      	mov	r2, r3
 8008f14:	2300      	movs	r3, #0
 8008f16:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008f18:	693b      	ldr	r3, [r7, #16]
 8008f1a:	015a      	lsls	r2, r3, #5
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	4413      	add	r3, r2
 8008f20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f24:	461a      	mov	r2, r3
 8008f26:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008f2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	3301      	adds	r3, #1
 8008f30:	613b      	str	r3, [r7, #16]
 8008f32:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008f36:	461a      	mov	r2, r3
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	d3b5      	bcc.n	8008eaa <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008f44:	691b      	ldr	r3, [r3, #16]
 8008f46:	68fa      	ldr	r2, [r7, #12]
 8008f48:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8008f4c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008f50:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	2200      	movs	r2, #0
 8008f56:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8008f5e:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008f60:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d105      	bne.n	8008f74 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	699b      	ldr	r3, [r3, #24]
 8008f6c:	f043 0210 	orr.w	r2, r3, #16
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	699a      	ldr	r2, [r3, #24]
 8008f78:	4b10      	ldr	r3, [pc, #64]	@ (8008fbc <USB_DevInit+0x2c4>)
 8008f7a:	4313      	orrs	r3, r2
 8008f7c:	687a      	ldr	r2, [r7, #4]
 8008f7e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008f80:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	d005      	beq.n	8008f94 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	699b      	ldr	r3, [r3, #24]
 8008f8c:	f043 0208 	orr.w	r2, r3, #8
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008f94:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008f98:	2b01      	cmp	r3, #1
 8008f9a:	d107      	bne.n	8008fac <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	699b      	ldr	r3, [r3, #24]
 8008fa0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008fa4:	f043 0304 	orr.w	r3, r3, #4
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008fac:	7dfb      	ldrb	r3, [r7, #23]
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3718      	adds	r7, #24
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008fb8:	b004      	add	sp, #16
 8008fba:	4770      	bx	lr
 8008fbc:	803c3800 	.word	0x803c3800

08008fc0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008fc0:	b480      	push	{r7}
 8008fc2:	b085      	sub	sp, #20
 8008fc4:	af00      	add	r7, sp, #0
 8008fc6:	6078      	str	r0, [r7, #4]
 8008fc8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008fce:	68fb      	ldr	r3, [r7, #12]
 8008fd0:	3301      	adds	r3, #1
 8008fd2:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008fda:	d901      	bls.n	8008fe0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008fdc:	2303      	movs	r3, #3
 8008fde:	e01b      	b.n	8009018 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	691b      	ldr	r3, [r3, #16]
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	daf2      	bge.n	8008fce <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008fe8:	2300      	movs	r3, #0
 8008fea:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	019b      	lsls	r3, r3, #6
 8008ff0:	f043 0220 	orr.w	r2, r3, #32
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	3301      	adds	r3, #1
 8008ffc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009004:	d901      	bls.n	800900a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8009006:	2303      	movs	r3, #3
 8009008:	e006      	b.n	8009018 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b20      	cmp	r3, #32
 8009014:	d0f0      	beq.n	8008ff8 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8009016:	2300      	movs	r3, #0
}
 8009018:	4618      	mov	r0, r3
 800901a:	3714      	adds	r7, #20
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8009024:	b480      	push	{r7}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800902c:	2300      	movs	r3, #0
 800902e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8009030:	68fb      	ldr	r3, [r7, #12]
 8009032:	3301      	adds	r3, #1
 8009034:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8009036:	68fb      	ldr	r3, [r7, #12]
 8009038:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800903c:	d901      	bls.n	8009042 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800903e:	2303      	movs	r3, #3
 8009040:	e018      	b.n	8009074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	691b      	ldr	r3, [r3, #16]
 8009046:	2b00      	cmp	r3, #0
 8009048:	daf2      	bge.n	8009030 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800904a:	2300      	movs	r3, #0
 800904c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	2210      	movs	r2, #16
 8009052:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8009054:	68fb      	ldr	r3, [r7, #12]
 8009056:	3301      	adds	r3, #1
 8009058:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800905a:	68fb      	ldr	r3, [r7, #12]
 800905c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8009060:	d901      	bls.n	8009066 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8009062:	2303      	movs	r3, #3
 8009064:	e006      	b.n	8009074 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	691b      	ldr	r3, [r3, #16]
 800906a:	f003 0310 	and.w	r3, r3, #16
 800906e:	2b10      	cmp	r3, #16
 8009070:	d0f0      	beq.n	8009054 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8009072:	2300      	movs	r3, #0
}
 8009074:	4618      	mov	r0, r3
 8009076:	3714      	adds	r7, #20
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
 8009088:	460b      	mov	r3, r1
 800908a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009096:	681a      	ldr	r2, [r3, #0]
 8009098:	78fb      	ldrb	r3, [r7, #3]
 800909a:	68f9      	ldr	r1, [r7, #12]
 800909c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80090a0:	4313      	orrs	r3, r2
 80090a2:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80090a4:	2300      	movs	r3, #0
}
 80090a6:	4618      	mov	r0, r3
 80090a8:	3714      	adds	r7, #20
 80090aa:	46bd      	mov	sp, r7
 80090ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b0:	4770      	bx	lr

080090b2 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b087      	sub	sp, #28
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090c4:	689b      	ldr	r3, [r3, #8]
 80090c6:	f003 0306 	and.w	r3, r3, #6
 80090ca:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80090cc:	68fb      	ldr	r3, [r7, #12]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d102      	bne.n	80090d8 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80090d2:	2300      	movs	r3, #0
 80090d4:	75fb      	strb	r3, [r7, #23]
 80090d6:	e00a      	b.n	80090ee <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2b02      	cmp	r3, #2
 80090dc:	d002      	beq.n	80090e4 <USB_GetDevSpeed+0x32>
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	2b06      	cmp	r3, #6
 80090e2:	d102      	bne.n	80090ea <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80090e4:	2302      	movs	r3, #2
 80090e6:	75fb      	strb	r3, [r7, #23]
 80090e8:	e001      	b.n	80090ee <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80090ea:	230f      	movs	r3, #15
 80090ec:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80090ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80090f0:	4618      	mov	r0, r3
 80090f2:	371c      	adds	r7, #28
 80090f4:	46bd      	mov	sp, r7
 80090f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090fa:	4770      	bx	lr

080090fc <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80090fc:	b480      	push	{r7}
 80090fe:	b085      	sub	sp, #20
 8009100:	af00      	add	r7, sp, #0
 8009102:	6078      	str	r0, [r7, #4]
 8009104:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800910a:	683b      	ldr	r3, [r7, #0]
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009110:	683b      	ldr	r3, [r7, #0]
 8009112:	785b      	ldrb	r3, [r3, #1]
 8009114:	2b01      	cmp	r3, #1
 8009116:	d13a      	bne.n	800918e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800911e:	69da      	ldr	r2, [r3, #28]
 8009120:	683b      	ldr	r3, [r7, #0]
 8009122:	781b      	ldrb	r3, [r3, #0]
 8009124:	f003 030f 	and.w	r3, r3, #15
 8009128:	2101      	movs	r1, #1
 800912a:	fa01 f303 	lsl.w	r3, r1, r3
 800912e:	b29b      	uxth	r3, r3
 8009130:	68f9      	ldr	r1, [r7, #12]
 8009132:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009136:	4313      	orrs	r3, r2
 8009138:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800913a:	68bb      	ldr	r3, [r7, #8]
 800913c:	015a      	lsls	r2, r3, #5
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	4413      	add	r3, r2
 8009142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800914c:	2b00      	cmp	r3, #0
 800914e:	d155      	bne.n	80091fc <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	015a      	lsls	r2, r3, #5
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	4413      	add	r3, r2
 8009158:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800915c:	681a      	ldr	r2, [r3, #0]
 800915e:	683b      	ldr	r3, [r7, #0]
 8009160:	689b      	ldr	r3, [r3, #8]
 8009162:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	791b      	ldrb	r3, [r3, #4]
 800916a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800916c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800916e:	68bb      	ldr	r3, [r7, #8]
 8009170:	059b      	lsls	r3, r3, #22
 8009172:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8009174:	4313      	orrs	r3, r2
 8009176:	68ba      	ldr	r2, [r7, #8]
 8009178:	0151      	lsls	r1, r2, #5
 800917a:	68fa      	ldr	r2, [r7, #12]
 800917c:	440a      	add	r2, r1
 800917e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009182:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009186:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800918a:	6013      	str	r3, [r2, #0]
 800918c:	e036      	b.n	80091fc <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009194:	69da      	ldr	r2, [r3, #28]
 8009196:	683b      	ldr	r3, [r7, #0]
 8009198:	781b      	ldrb	r3, [r3, #0]
 800919a:	f003 030f 	and.w	r3, r3, #15
 800919e:	2101      	movs	r1, #1
 80091a0:	fa01 f303 	lsl.w	r3, r1, r3
 80091a4:	041b      	lsls	r3, r3, #16
 80091a6:	68f9      	ldr	r1, [r7, #12]
 80091a8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80091ac:	4313      	orrs	r3, r2
 80091ae:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80091b0:	68bb      	ldr	r3, [r7, #8]
 80091b2:	015a      	lsls	r2, r3, #5
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	4413      	add	r3, r2
 80091b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d11a      	bne.n	80091fc <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091c6:	68bb      	ldr	r3, [r7, #8]
 80091c8:	015a      	lsls	r2, r3, #5
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4413      	add	r3, r2
 80091ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80091d2:	681a      	ldr	r2, [r3, #0]
 80091d4:	683b      	ldr	r3, [r7, #0]
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80091dc:	683b      	ldr	r3, [r7, #0]
 80091de:	791b      	ldrb	r3, [r3, #4]
 80091e0:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80091e2:	430b      	orrs	r3, r1
 80091e4:	4313      	orrs	r3, r2
 80091e6:	68ba      	ldr	r2, [r7, #8]
 80091e8:	0151      	lsls	r1, r2, #5
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	440a      	add	r2, r1
 80091ee:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80091f2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80091f6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80091fa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80091fc:	2300      	movs	r3, #0
}
 80091fe:	4618      	mov	r0, r3
 8009200:	3714      	adds	r7, #20
 8009202:	46bd      	mov	sp, r7
 8009204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009208:	4770      	bx	lr
	...

0800920c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800920c:	b480      	push	{r7}
 800920e:	b085      	sub	sp, #20
 8009210:	af00      	add	r7, sp, #0
 8009212:	6078      	str	r0, [r7, #4]
 8009214:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800921a:	683b      	ldr	r3, [r7, #0]
 800921c:	781b      	ldrb	r3, [r3, #0]
 800921e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	785b      	ldrb	r3, [r3, #1]
 8009224:	2b01      	cmp	r3, #1
 8009226:	d161      	bne.n	80092ec <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009228:	68bb      	ldr	r3, [r7, #8]
 800922a:	015a      	lsls	r2, r3, #5
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	4413      	add	r3, r2
 8009230:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800923a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800923e:	d11f      	bne.n	8009280 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8009240:	68bb      	ldr	r3, [r7, #8]
 8009242:	015a      	lsls	r2, r3, #5
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4413      	add	r3, r2
 8009248:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	68ba      	ldr	r2, [r7, #8]
 8009250:	0151      	lsls	r1, r2, #5
 8009252:	68fa      	ldr	r2, [r7, #12]
 8009254:	440a      	add	r2, r1
 8009256:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800925a:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800925e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8009260:	68bb      	ldr	r3, [r7, #8]
 8009262:	015a      	lsls	r2, r3, #5
 8009264:	68fb      	ldr	r3, [r7, #12]
 8009266:	4413      	add	r3, r2
 8009268:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68ba      	ldr	r2, [r7, #8]
 8009270:	0151      	lsls	r1, r2, #5
 8009272:	68fa      	ldr	r2, [r7, #12]
 8009274:	440a      	add	r2, r1
 8009276:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800927a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800927e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009286:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8009288:	683b      	ldr	r3, [r7, #0]
 800928a:	781b      	ldrb	r3, [r3, #0]
 800928c:	f003 030f 	and.w	r3, r3, #15
 8009290:	2101      	movs	r1, #1
 8009292:	fa01 f303 	lsl.w	r3, r1, r3
 8009296:	b29b      	uxth	r3, r3
 8009298:	43db      	mvns	r3, r3
 800929a:	68f9      	ldr	r1, [r7, #12]
 800929c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092a0:	4013      	ands	r3, r2
 80092a2:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80092aa:	69da      	ldr	r2, [r3, #28]
 80092ac:	683b      	ldr	r3, [r7, #0]
 80092ae:	781b      	ldrb	r3, [r3, #0]
 80092b0:	f003 030f 	and.w	r3, r3, #15
 80092b4:	2101      	movs	r1, #1
 80092b6:	fa01 f303 	lsl.w	r3, r1, r3
 80092ba:	b29b      	uxth	r3, r3
 80092bc:	43db      	mvns	r3, r3
 80092be:	68f9      	ldr	r1, [r7, #12]
 80092c0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80092c4:	4013      	ands	r3, r2
 80092c6:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	015a      	lsls	r2, r3, #5
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	4413      	add	r3, r2
 80092d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	0159      	lsls	r1, r3, #5
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	440b      	add	r3, r1
 80092de:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80092e2:	4619      	mov	r1, r3
 80092e4:	4b35      	ldr	r3, [pc, #212]	@ (80093bc <USB_DeactivateEndpoint+0x1b0>)
 80092e6:	4013      	ands	r3, r2
 80092e8:	600b      	str	r3, [r1, #0]
 80092ea:	e060      	b.n	80093ae <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80092ec:	68bb      	ldr	r3, [r7, #8]
 80092ee:	015a      	lsls	r2, r3, #5
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4413      	add	r3, r2
 80092f4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009302:	d11f      	bne.n	8009344 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8009304:	68bb      	ldr	r3, [r7, #8]
 8009306:	015a      	lsls	r2, r3, #5
 8009308:	68fb      	ldr	r3, [r7, #12]
 800930a:	4413      	add	r3, r2
 800930c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	68ba      	ldr	r2, [r7, #8]
 8009314:	0151      	lsls	r1, r2, #5
 8009316:	68fa      	ldr	r2, [r7, #12]
 8009318:	440a      	add	r2, r1
 800931a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800931e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009322:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	015a      	lsls	r2, r3, #5
 8009328:	68fb      	ldr	r3, [r7, #12]
 800932a:	4413      	add	r3, r2
 800932c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	68ba      	ldr	r2, [r7, #8]
 8009334:	0151      	lsls	r1, r2, #5
 8009336:	68fa      	ldr	r2, [r7, #12]
 8009338:	440a      	add	r2, r1
 800933a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800933e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009342:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800934a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800934c:	683b      	ldr	r3, [r7, #0]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	f003 030f 	and.w	r3, r3, #15
 8009354:	2101      	movs	r1, #1
 8009356:	fa01 f303 	lsl.w	r3, r1, r3
 800935a:	041b      	lsls	r3, r3, #16
 800935c:	43db      	mvns	r3, r3
 800935e:	68f9      	ldr	r1, [r7, #12]
 8009360:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009364:	4013      	ands	r3, r2
 8009366:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800936e:	69da      	ldr	r2, [r3, #28]
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	781b      	ldrb	r3, [r3, #0]
 8009374:	f003 030f 	and.w	r3, r3, #15
 8009378:	2101      	movs	r1, #1
 800937a:	fa01 f303 	lsl.w	r3, r1, r3
 800937e:	041b      	lsls	r3, r3, #16
 8009380:	43db      	mvns	r3, r3
 8009382:	68f9      	ldr	r1, [r7, #12]
 8009384:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009388:	4013      	ands	r3, r2
 800938a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800938c:	68bb      	ldr	r3, [r7, #8]
 800938e:	015a      	lsls	r2, r3, #5
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	4413      	add	r3, r2
 8009394:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009398:	681a      	ldr	r2, [r3, #0]
 800939a:	68bb      	ldr	r3, [r7, #8]
 800939c:	0159      	lsls	r1, r3, #5
 800939e:	68fb      	ldr	r3, [r7, #12]
 80093a0:	440b      	add	r3, r1
 80093a2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80093a6:	4619      	mov	r1, r3
 80093a8:	4b05      	ldr	r3, [pc, #20]	@ (80093c0 <USB_DeactivateEndpoint+0x1b4>)
 80093aa:	4013      	ands	r3, r2
 80093ac:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80093ae:	2300      	movs	r3, #0
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	3714      	adds	r7, #20
 80093b4:	46bd      	mov	sp, r7
 80093b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ba:	4770      	bx	lr
 80093bc:	ec337800 	.word	0xec337800
 80093c0:	eff37800 	.word	0xeff37800

080093c4 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80093c4:	b580      	push	{r7, lr}
 80093c6:	b08a      	sub	sp, #40	@ 0x28
 80093c8:	af02      	add	r7, sp, #8
 80093ca:	60f8      	str	r0, [r7, #12]
 80093cc:	60b9      	str	r1, [r7, #8]
 80093ce:	4613      	mov	r3, r2
 80093d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80093d6:	68bb      	ldr	r3, [r7, #8]
 80093d8:	781b      	ldrb	r3, [r3, #0]
 80093da:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	785b      	ldrb	r3, [r3, #1]
 80093e0:	2b01      	cmp	r3, #1
 80093e2:	f040 817f 	bne.w	80096e4 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80093e6:	68bb      	ldr	r3, [r7, #8]
 80093e8:	691b      	ldr	r3, [r3, #16]
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d132      	bne.n	8009454 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80093ee:	69bb      	ldr	r3, [r7, #24]
 80093f0:	015a      	lsls	r2, r3, #5
 80093f2:	69fb      	ldr	r3, [r7, #28]
 80093f4:	4413      	add	r3, r2
 80093f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80093fa:	691b      	ldr	r3, [r3, #16]
 80093fc:	69ba      	ldr	r2, [r7, #24]
 80093fe:	0151      	lsls	r1, r2, #5
 8009400:	69fa      	ldr	r2, [r7, #28]
 8009402:	440a      	add	r2, r1
 8009404:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009408:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 800940c:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009410:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8009412:	69bb      	ldr	r3, [r7, #24]
 8009414:	015a      	lsls	r2, r3, #5
 8009416:	69fb      	ldr	r3, [r7, #28]
 8009418:	4413      	add	r3, r2
 800941a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800941e:	691b      	ldr	r3, [r3, #16]
 8009420:	69ba      	ldr	r2, [r7, #24]
 8009422:	0151      	lsls	r1, r2, #5
 8009424:	69fa      	ldr	r2, [r7, #28]
 8009426:	440a      	add	r2, r1
 8009428:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800942c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009432:	69bb      	ldr	r3, [r7, #24]
 8009434:	015a      	lsls	r2, r3, #5
 8009436:	69fb      	ldr	r3, [r7, #28]
 8009438:	4413      	add	r3, r2
 800943a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800943e:	691b      	ldr	r3, [r3, #16]
 8009440:	69ba      	ldr	r2, [r7, #24]
 8009442:	0151      	lsls	r1, r2, #5
 8009444:	69fa      	ldr	r2, [r7, #28]
 8009446:	440a      	add	r2, r1
 8009448:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800944c:	0cdb      	lsrs	r3, r3, #19
 800944e:	04db      	lsls	r3, r3, #19
 8009450:	6113      	str	r3, [r2, #16]
 8009452:	e097      	b.n	8009584 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8009454:	69bb      	ldr	r3, [r7, #24]
 8009456:	015a      	lsls	r2, r3, #5
 8009458:	69fb      	ldr	r3, [r7, #28]
 800945a:	4413      	add	r3, r2
 800945c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009460:	691b      	ldr	r3, [r3, #16]
 8009462:	69ba      	ldr	r2, [r7, #24]
 8009464:	0151      	lsls	r1, r2, #5
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	440a      	add	r2, r1
 800946a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800946e:	0cdb      	lsrs	r3, r3, #19
 8009470:	04db      	lsls	r3, r3, #19
 8009472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8009474:	69bb      	ldr	r3, [r7, #24]
 8009476:	015a      	lsls	r2, r3, #5
 8009478:	69fb      	ldr	r3, [r7, #28]
 800947a:	4413      	add	r3, r2
 800947c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009480:	691b      	ldr	r3, [r3, #16]
 8009482:	69ba      	ldr	r2, [r7, #24]
 8009484:	0151      	lsls	r1, r2, #5
 8009486:	69fa      	ldr	r2, [r7, #28]
 8009488:	440a      	add	r2, r1
 800948a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800948e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009492:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009496:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8009498:	69bb      	ldr	r3, [r7, #24]
 800949a:	2b00      	cmp	r3, #0
 800949c:	d11a      	bne.n	80094d4 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 800949e:	68bb      	ldr	r3, [r7, #8]
 80094a0:	691a      	ldr	r2, [r3, #16]
 80094a2:	68bb      	ldr	r3, [r7, #8]
 80094a4:	689b      	ldr	r3, [r3, #8]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d903      	bls.n	80094b2 <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 80094aa:	68bb      	ldr	r3, [r7, #8]
 80094ac:	689a      	ldr	r2, [r3, #8]
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80094b2:	69bb      	ldr	r3, [r7, #24]
 80094b4:	015a      	lsls	r2, r3, #5
 80094b6:	69fb      	ldr	r3, [r7, #28]
 80094b8:	4413      	add	r3, r2
 80094ba:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094be:	691b      	ldr	r3, [r3, #16]
 80094c0:	69ba      	ldr	r2, [r7, #24]
 80094c2:	0151      	lsls	r1, r2, #5
 80094c4:	69fa      	ldr	r2, [r7, #28]
 80094c6:	440a      	add	r2, r1
 80094c8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094cc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80094d0:	6113      	str	r3, [r2, #16]
 80094d2:	e044      	b.n	800955e <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80094d4:	68bb      	ldr	r3, [r7, #8]
 80094d6:	691a      	ldr	r2, [r3, #16]
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	689b      	ldr	r3, [r3, #8]
 80094dc:	4413      	add	r3, r2
 80094de:	1e5a      	subs	r2, r3, #1
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	689b      	ldr	r3, [r3, #8]
 80094e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80094e8:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 80094ea:	69bb      	ldr	r3, [r7, #24]
 80094ec:	015a      	lsls	r2, r3, #5
 80094ee:	69fb      	ldr	r3, [r7, #28]
 80094f0:	4413      	add	r3, r2
 80094f2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094f6:	691a      	ldr	r2, [r3, #16]
 80094f8:	8afb      	ldrh	r3, [r7, #22]
 80094fa:	04d9      	lsls	r1, r3, #19
 80094fc:	4ba4      	ldr	r3, [pc, #656]	@ (8009790 <USB_EPStartXfer+0x3cc>)
 80094fe:	400b      	ands	r3, r1
 8009500:	69b9      	ldr	r1, [r7, #24]
 8009502:	0148      	lsls	r0, r1, #5
 8009504:	69f9      	ldr	r1, [r7, #28]
 8009506:	4401      	add	r1, r0
 8009508:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800950c:	4313      	orrs	r3, r2
 800950e:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	791b      	ldrb	r3, [r3, #4]
 8009514:	2b01      	cmp	r3, #1
 8009516:	d122      	bne.n	800955e <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8009518:	69bb      	ldr	r3, [r7, #24]
 800951a:	015a      	lsls	r2, r3, #5
 800951c:	69fb      	ldr	r3, [r7, #28]
 800951e:	4413      	add	r3, r2
 8009520:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009524:	691b      	ldr	r3, [r3, #16]
 8009526:	69ba      	ldr	r2, [r7, #24]
 8009528:	0151      	lsls	r1, r2, #5
 800952a:	69fa      	ldr	r2, [r7, #28]
 800952c:	440a      	add	r2, r1
 800952e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009532:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8009536:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8009538:	69bb      	ldr	r3, [r7, #24]
 800953a:	015a      	lsls	r2, r3, #5
 800953c:	69fb      	ldr	r3, [r7, #28]
 800953e:	4413      	add	r3, r2
 8009540:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009544:	691a      	ldr	r2, [r3, #16]
 8009546:	8afb      	ldrh	r3, [r7, #22]
 8009548:	075b      	lsls	r3, r3, #29
 800954a:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800954e:	69b9      	ldr	r1, [r7, #24]
 8009550:	0148      	lsls	r0, r1, #5
 8009552:	69f9      	ldr	r1, [r7, #28]
 8009554:	4401      	add	r1, r0
 8009556:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800955a:	4313      	orrs	r3, r2
 800955c:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800955e:	69bb      	ldr	r3, [r7, #24]
 8009560:	015a      	lsls	r2, r3, #5
 8009562:	69fb      	ldr	r3, [r7, #28]
 8009564:	4413      	add	r3, r2
 8009566:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800956a:	691a      	ldr	r2, [r3, #16]
 800956c:	68bb      	ldr	r3, [r7, #8]
 800956e:	691b      	ldr	r3, [r3, #16]
 8009570:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009574:	69b9      	ldr	r1, [r7, #24]
 8009576:	0148      	lsls	r0, r1, #5
 8009578:	69f9      	ldr	r1, [r7, #28]
 800957a:	4401      	add	r1, r0
 800957c:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8009580:	4313      	orrs	r3, r2
 8009582:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8009584:	79fb      	ldrb	r3, [r7, #7]
 8009586:	2b01      	cmp	r3, #1
 8009588:	d14b      	bne.n	8009622 <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800958a:	68bb      	ldr	r3, [r7, #8]
 800958c:	69db      	ldr	r3, [r3, #28]
 800958e:	2b00      	cmp	r3, #0
 8009590:	d009      	beq.n	80095a6 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8009592:	69bb      	ldr	r3, [r7, #24]
 8009594:	015a      	lsls	r2, r3, #5
 8009596:	69fb      	ldr	r3, [r7, #28]
 8009598:	4413      	add	r3, r2
 800959a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800959e:	461a      	mov	r2, r3
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	69db      	ldr	r3, [r3, #28]
 80095a4:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	791b      	ldrb	r3, [r3, #4]
 80095aa:	2b01      	cmp	r3, #1
 80095ac:	d128      	bne.n	8009600 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095b4:	689b      	ldr	r3, [r3, #8]
 80095b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d110      	bne.n	80095e0 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80095be:	69bb      	ldr	r3, [r7, #24]
 80095c0:	015a      	lsls	r2, r3, #5
 80095c2:	69fb      	ldr	r3, [r7, #28]
 80095c4:	4413      	add	r3, r2
 80095c6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	69ba      	ldr	r2, [r7, #24]
 80095ce:	0151      	lsls	r1, r2, #5
 80095d0:	69fa      	ldr	r2, [r7, #28]
 80095d2:	440a      	add	r2, r1
 80095d4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095d8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80095dc:	6013      	str	r3, [r2, #0]
 80095de:	e00f      	b.n	8009600 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80095e0:	69bb      	ldr	r3, [r7, #24]
 80095e2:	015a      	lsls	r2, r3, #5
 80095e4:	69fb      	ldr	r3, [r7, #28]
 80095e6:	4413      	add	r3, r2
 80095e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	69ba      	ldr	r2, [r7, #24]
 80095f0:	0151      	lsls	r1, r2, #5
 80095f2:	69fa      	ldr	r2, [r7, #28]
 80095f4:	440a      	add	r2, r1
 80095f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80095fa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80095fe:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009600:	69bb      	ldr	r3, [r7, #24]
 8009602:	015a      	lsls	r2, r3, #5
 8009604:	69fb      	ldr	r3, [r7, #28]
 8009606:	4413      	add	r3, r2
 8009608:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	69ba      	ldr	r2, [r7, #24]
 8009610:	0151      	lsls	r1, r2, #5
 8009612:	69fa      	ldr	r2, [r7, #28]
 8009614:	440a      	add	r2, r1
 8009616:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800961a:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800961e:	6013      	str	r3, [r2, #0]
 8009620:	e166      	b.n	80098f0 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	015a      	lsls	r2, r3, #5
 8009626:	69fb      	ldr	r3, [r7, #28]
 8009628:	4413      	add	r3, r2
 800962a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	69ba      	ldr	r2, [r7, #24]
 8009632:	0151      	lsls	r1, r2, #5
 8009634:	69fa      	ldr	r2, [r7, #28]
 8009636:	440a      	add	r2, r1
 8009638:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800963c:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009640:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009642:	68bb      	ldr	r3, [r7, #8]
 8009644:	791b      	ldrb	r3, [r3, #4]
 8009646:	2b01      	cmp	r3, #1
 8009648:	d015      	beq.n	8009676 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800964a:	68bb      	ldr	r3, [r7, #8]
 800964c:	691b      	ldr	r3, [r3, #16]
 800964e:	2b00      	cmp	r3, #0
 8009650:	f000 814e 	beq.w	80098f0 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8009654:	69fb      	ldr	r3, [r7, #28]
 8009656:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800965a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800965c:	68bb      	ldr	r3, [r7, #8]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	f003 030f 	and.w	r3, r3, #15
 8009664:	2101      	movs	r1, #1
 8009666:	fa01 f303 	lsl.w	r3, r1, r3
 800966a:	69f9      	ldr	r1, [r7, #28]
 800966c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009670:	4313      	orrs	r3, r2
 8009672:	634b      	str	r3, [r1, #52]	@ 0x34
 8009674:	e13c      	b.n	80098f0 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8009676:	69fb      	ldr	r3, [r7, #28]
 8009678:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800967c:	689b      	ldr	r3, [r3, #8]
 800967e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009682:	2b00      	cmp	r3, #0
 8009684:	d110      	bne.n	80096a8 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	015a      	lsls	r2, r3, #5
 800968a:	69fb      	ldr	r3, [r7, #28]
 800968c:	4413      	add	r3, r2
 800968e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009692:	681b      	ldr	r3, [r3, #0]
 8009694:	69ba      	ldr	r2, [r7, #24]
 8009696:	0151      	lsls	r1, r2, #5
 8009698:	69fa      	ldr	r2, [r7, #28]
 800969a:	440a      	add	r2, r1
 800969c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096a0:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80096a4:	6013      	str	r3, [r2, #0]
 80096a6:	e00f      	b.n	80096c8 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80096a8:	69bb      	ldr	r3, [r7, #24]
 80096aa:	015a      	lsls	r2, r3, #5
 80096ac:	69fb      	ldr	r3, [r7, #28]
 80096ae:	4413      	add	r3, r2
 80096b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	69ba      	ldr	r2, [r7, #24]
 80096b8:	0151      	lsls	r1, r2, #5
 80096ba:	69fa      	ldr	r2, [r7, #28]
 80096bc:	440a      	add	r2, r1
 80096be:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80096c2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80096c6:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80096c8:	68bb      	ldr	r3, [r7, #8]
 80096ca:	68d9      	ldr	r1, [r3, #12]
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	781a      	ldrb	r2, [r3, #0]
 80096d0:	68bb      	ldr	r3, [r7, #8]
 80096d2:	691b      	ldr	r3, [r3, #16]
 80096d4:	b298      	uxth	r0, r3
 80096d6:	79fb      	ldrb	r3, [r7, #7]
 80096d8:	9300      	str	r3, [sp, #0]
 80096da:	4603      	mov	r3, r0
 80096dc:	68f8      	ldr	r0, [r7, #12]
 80096de:	f000 f9b9 	bl	8009a54 <USB_WritePacket>
 80096e2:	e105      	b.n	80098f0 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80096e4:	69bb      	ldr	r3, [r7, #24]
 80096e6:	015a      	lsls	r2, r3, #5
 80096e8:	69fb      	ldr	r3, [r7, #28]
 80096ea:	4413      	add	r3, r2
 80096ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80096f0:	691b      	ldr	r3, [r3, #16]
 80096f2:	69ba      	ldr	r2, [r7, #24]
 80096f4:	0151      	lsls	r1, r2, #5
 80096f6:	69fa      	ldr	r2, [r7, #28]
 80096f8:	440a      	add	r2, r1
 80096fa:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80096fe:	0cdb      	lsrs	r3, r3, #19
 8009700:	04db      	lsls	r3, r3, #19
 8009702:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8009704:	69bb      	ldr	r3, [r7, #24]
 8009706:	015a      	lsls	r2, r3, #5
 8009708:	69fb      	ldr	r3, [r7, #28]
 800970a:	4413      	add	r3, r2
 800970c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009710:	691b      	ldr	r3, [r3, #16]
 8009712:	69ba      	ldr	r2, [r7, #24]
 8009714:	0151      	lsls	r1, r2, #5
 8009716:	69fa      	ldr	r2, [r7, #28]
 8009718:	440a      	add	r2, r1
 800971a:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800971e:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8009722:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8009726:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8009728:	69bb      	ldr	r3, [r7, #24]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d132      	bne.n	8009794 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 800972e:	68bb      	ldr	r3, [r7, #8]
 8009730:	691b      	ldr	r3, [r3, #16]
 8009732:	2b00      	cmp	r3, #0
 8009734:	d003      	beq.n	800973e <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	689a      	ldr	r2, [r3, #8]
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	689a      	ldr	r2, [r3, #8]
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8009746:	69bb      	ldr	r3, [r7, #24]
 8009748:	015a      	lsls	r2, r3, #5
 800974a:	69fb      	ldr	r3, [r7, #28]
 800974c:	4413      	add	r3, r2
 800974e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009752:	691a      	ldr	r2, [r3, #16]
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	6a1b      	ldr	r3, [r3, #32]
 8009758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800975c:	69b9      	ldr	r1, [r7, #24]
 800975e:	0148      	lsls	r0, r1, #5
 8009760:	69f9      	ldr	r1, [r7, #28]
 8009762:	4401      	add	r1, r0
 8009764:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009768:	4313      	orrs	r3, r2
 800976a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800976c:	69bb      	ldr	r3, [r7, #24]
 800976e:	015a      	lsls	r2, r3, #5
 8009770:	69fb      	ldr	r3, [r7, #28]
 8009772:	4413      	add	r3, r2
 8009774:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009778:	691b      	ldr	r3, [r3, #16]
 800977a:	69ba      	ldr	r2, [r7, #24]
 800977c:	0151      	lsls	r1, r2, #5
 800977e:	69fa      	ldr	r2, [r7, #28]
 8009780:	440a      	add	r2, r1
 8009782:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009786:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800978a:	6113      	str	r3, [r2, #16]
 800978c:	e062      	b.n	8009854 <USB_EPStartXfer+0x490>
 800978e:	bf00      	nop
 8009790:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8009794:	68bb      	ldr	r3, [r7, #8]
 8009796:	691b      	ldr	r3, [r3, #16]
 8009798:	2b00      	cmp	r3, #0
 800979a:	d123      	bne.n	80097e4 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800979c:	69bb      	ldr	r3, [r7, #24]
 800979e:	015a      	lsls	r2, r3, #5
 80097a0:	69fb      	ldr	r3, [r7, #28]
 80097a2:	4413      	add	r3, r2
 80097a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097a8:	691a      	ldr	r2, [r3, #16]
 80097aa:	68bb      	ldr	r3, [r7, #8]
 80097ac:	689b      	ldr	r3, [r3, #8]
 80097ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80097b2:	69b9      	ldr	r1, [r7, #24]
 80097b4:	0148      	lsls	r0, r1, #5
 80097b6:	69f9      	ldr	r1, [r7, #28]
 80097b8:	4401      	add	r1, r0
 80097ba:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80097be:	4313      	orrs	r3, r2
 80097c0:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80097c2:	69bb      	ldr	r3, [r7, #24]
 80097c4:	015a      	lsls	r2, r3, #5
 80097c6:	69fb      	ldr	r3, [r7, #28]
 80097c8:	4413      	add	r3, r2
 80097ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80097ce:	691b      	ldr	r3, [r3, #16]
 80097d0:	69ba      	ldr	r2, [r7, #24]
 80097d2:	0151      	lsls	r1, r2, #5
 80097d4:	69fa      	ldr	r2, [r7, #28]
 80097d6:	440a      	add	r2, r1
 80097d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80097dc:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80097e0:	6113      	str	r3, [r2, #16]
 80097e2:	e037      	b.n	8009854 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	691a      	ldr	r2, [r3, #16]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	689b      	ldr	r3, [r3, #8]
 80097ec:	4413      	add	r3, r2
 80097ee:	1e5a      	subs	r2, r3, #1
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	689b      	ldr	r3, [r3, #8]
 80097f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80097f8:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80097fa:	68bb      	ldr	r3, [r7, #8]
 80097fc:	689b      	ldr	r3, [r3, #8]
 80097fe:	8afa      	ldrh	r2, [r7, #22]
 8009800:	fb03 f202 	mul.w	r2, r3, r2
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009808:	69bb      	ldr	r3, [r7, #24]
 800980a:	015a      	lsls	r2, r3, #5
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	4413      	add	r3, r2
 8009810:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009814:	691a      	ldr	r2, [r3, #16]
 8009816:	8afb      	ldrh	r3, [r7, #22]
 8009818:	04d9      	lsls	r1, r3, #19
 800981a:	4b38      	ldr	r3, [pc, #224]	@ (80098fc <USB_EPStartXfer+0x538>)
 800981c:	400b      	ands	r3, r1
 800981e:	69b9      	ldr	r1, [r7, #24]
 8009820:	0148      	lsls	r0, r1, #5
 8009822:	69f9      	ldr	r1, [r7, #28]
 8009824:	4401      	add	r1, r0
 8009826:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800982a:	4313      	orrs	r3, r2
 800982c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800982e:	69bb      	ldr	r3, [r7, #24]
 8009830:	015a      	lsls	r2, r3, #5
 8009832:	69fb      	ldr	r3, [r7, #28]
 8009834:	4413      	add	r3, r2
 8009836:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800983a:	691a      	ldr	r2, [r3, #16]
 800983c:	68bb      	ldr	r3, [r7, #8]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8009844:	69b9      	ldr	r1, [r7, #24]
 8009846:	0148      	lsls	r0, r1, #5
 8009848:	69f9      	ldr	r1, [r7, #28]
 800984a:	4401      	add	r1, r0
 800984c:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009850:	4313      	orrs	r3, r2
 8009852:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8009854:	79fb      	ldrb	r3, [r7, #7]
 8009856:	2b01      	cmp	r3, #1
 8009858:	d10d      	bne.n	8009876 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	68db      	ldr	r3, [r3, #12]
 800985e:	2b00      	cmp	r3, #0
 8009860:	d009      	beq.n	8009876 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	68d9      	ldr	r1, [r3, #12]
 8009866:	69bb      	ldr	r3, [r7, #24]
 8009868:	015a      	lsls	r2, r3, #5
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	4413      	add	r3, r2
 800986e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009872:	460a      	mov	r2, r1
 8009874:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8009876:	68bb      	ldr	r3, [r7, #8]
 8009878:	791b      	ldrb	r3, [r3, #4]
 800987a:	2b01      	cmp	r3, #1
 800987c:	d128      	bne.n	80098d0 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800987e:	69fb      	ldr	r3, [r7, #28]
 8009880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800988a:	2b00      	cmp	r3, #0
 800988c:	d110      	bne.n	80098b0 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800988e:	69bb      	ldr	r3, [r7, #24]
 8009890:	015a      	lsls	r2, r3, #5
 8009892:	69fb      	ldr	r3, [r7, #28]
 8009894:	4413      	add	r3, r2
 8009896:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800989a:	681b      	ldr	r3, [r3, #0]
 800989c:	69ba      	ldr	r2, [r7, #24]
 800989e:	0151      	lsls	r1, r2, #5
 80098a0:	69fa      	ldr	r2, [r7, #28]
 80098a2:	440a      	add	r2, r1
 80098a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80098ac:	6013      	str	r3, [r2, #0]
 80098ae:	e00f      	b.n	80098d0 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80098b0:	69bb      	ldr	r3, [r7, #24]
 80098b2:	015a      	lsls	r2, r3, #5
 80098b4:	69fb      	ldr	r3, [r7, #28]
 80098b6:	4413      	add	r3, r2
 80098b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	69ba      	ldr	r2, [r7, #24]
 80098c0:	0151      	lsls	r1, r2, #5
 80098c2:	69fa      	ldr	r2, [r7, #28]
 80098c4:	440a      	add	r2, r1
 80098c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80098ce:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80098d0:	69bb      	ldr	r3, [r7, #24]
 80098d2:	015a      	lsls	r2, r3, #5
 80098d4:	69fb      	ldr	r3, [r7, #28]
 80098d6:	4413      	add	r3, r2
 80098d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	69ba      	ldr	r2, [r7, #24]
 80098e0:	0151      	lsls	r1, r2, #5
 80098e2:	69fa      	ldr	r2, [r7, #28]
 80098e4:	440a      	add	r2, r1
 80098e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80098ea:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80098ee:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80098f0:	2300      	movs	r3, #0
}
 80098f2:	4618      	mov	r0, r3
 80098f4:	3720      	adds	r7, #32
 80098f6:	46bd      	mov	sp, r7
 80098f8:	bd80      	pop	{r7, pc}
 80098fa:	bf00      	nop
 80098fc:	1ff80000 	.word	0x1ff80000

08009900 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009900:	b480      	push	{r7}
 8009902:	b087      	sub	sp, #28
 8009904:	af00      	add	r7, sp, #0
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800990a:	2300      	movs	r3, #0
 800990c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800990e:	2300      	movs	r3, #0
 8009910:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	785b      	ldrb	r3, [r3, #1]
 800991a:	2b01      	cmp	r3, #1
 800991c:	d14a      	bne.n	80099b4 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	781b      	ldrb	r3, [r3, #0]
 8009922:	015a      	lsls	r2, r3, #5
 8009924:	693b      	ldr	r3, [r7, #16]
 8009926:	4413      	add	r3, r2
 8009928:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800992c:	681b      	ldr	r3, [r3, #0]
 800992e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009932:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009936:	f040 8086 	bne.w	8009a46 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800993a:	683b      	ldr	r3, [r7, #0]
 800993c:	781b      	ldrb	r3, [r3, #0]
 800993e:	015a      	lsls	r2, r3, #5
 8009940:	693b      	ldr	r3, [r7, #16]
 8009942:	4413      	add	r3, r2
 8009944:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	683a      	ldr	r2, [r7, #0]
 800994c:	7812      	ldrb	r2, [r2, #0]
 800994e:	0151      	lsls	r1, r2, #5
 8009950:	693a      	ldr	r2, [r7, #16]
 8009952:	440a      	add	r2, r1
 8009954:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009958:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800995c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800995e:	683b      	ldr	r3, [r7, #0]
 8009960:	781b      	ldrb	r3, [r3, #0]
 8009962:	015a      	lsls	r2, r3, #5
 8009964:	693b      	ldr	r3, [r7, #16]
 8009966:	4413      	add	r3, r2
 8009968:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	683a      	ldr	r2, [r7, #0]
 8009970:	7812      	ldrb	r2, [r2, #0]
 8009972:	0151      	lsls	r1, r2, #5
 8009974:	693a      	ldr	r2, [r7, #16]
 8009976:	440a      	add	r2, r1
 8009978:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800997c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009980:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	3301      	adds	r3, #1
 8009986:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800998e:	4293      	cmp	r3, r2
 8009990:	d902      	bls.n	8009998 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8009992:	2301      	movs	r3, #1
 8009994:	75fb      	strb	r3, [r7, #23]
          break;
 8009996:	e056      	b.n	8009a46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	781b      	ldrb	r3, [r3, #0]
 800999c:	015a      	lsls	r2, r3, #5
 800999e:	693b      	ldr	r3, [r7, #16]
 80099a0:	4413      	add	r3, r2
 80099a2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80099a6:	681b      	ldr	r3, [r3, #0]
 80099a8:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099ac:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099b0:	d0e7      	beq.n	8009982 <USB_EPStopXfer+0x82>
 80099b2:	e048      	b.n	8009a46 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80099b4:	683b      	ldr	r3, [r7, #0]
 80099b6:	781b      	ldrb	r3, [r3, #0]
 80099b8:	015a      	lsls	r2, r3, #5
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	4413      	add	r3, r2
 80099be:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80099c8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80099cc:	d13b      	bne.n	8009a46 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80099ce:	683b      	ldr	r3, [r7, #0]
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	015a      	lsls	r2, r3, #5
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	4413      	add	r3, r2
 80099d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	683a      	ldr	r2, [r7, #0]
 80099e0:	7812      	ldrb	r2, [r2, #0]
 80099e2:	0151      	lsls	r1, r2, #5
 80099e4:	693a      	ldr	r2, [r7, #16]
 80099e6:	440a      	add	r2, r1
 80099e8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80099ec:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80099f0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80099f2:	683b      	ldr	r3, [r7, #0]
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	015a      	lsls	r2, r3, #5
 80099f8:	693b      	ldr	r3, [r7, #16]
 80099fa:	4413      	add	r3, r2
 80099fc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	683a      	ldr	r2, [r7, #0]
 8009a04:	7812      	ldrb	r2, [r2, #0]
 8009a06:	0151      	lsls	r1, r2, #5
 8009a08:	693a      	ldr	r2, [r7, #16]
 8009a0a:	440a      	add	r2, r1
 8009a0c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009a10:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8009a14:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	3301      	adds	r3, #1
 8009a1a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009a1c:	68fb      	ldr	r3, [r7, #12]
 8009a1e:	f242 7210 	movw	r2, #10000	@ 0x2710
 8009a22:	4293      	cmp	r3, r2
 8009a24:	d902      	bls.n	8009a2c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8009a26:	2301      	movs	r3, #1
 8009a28:	75fb      	strb	r3, [r7, #23]
          break;
 8009a2a:	e00c      	b.n	8009a46 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009a2c:	683b      	ldr	r3, [r7, #0]
 8009a2e:	781b      	ldrb	r3, [r3, #0]
 8009a30:	015a      	lsls	r2, r3, #5
 8009a32:	693b      	ldr	r3, [r7, #16]
 8009a34:	4413      	add	r3, r2
 8009a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009a40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009a44:	d0e7      	beq.n	8009a16 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8009a46:	7dfb      	ldrb	r3, [r7, #23]
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	371c      	adds	r7, #28
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8009a54:	b480      	push	{r7}
 8009a56:	b089      	sub	sp, #36	@ 0x24
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	60f8      	str	r0, [r7, #12]
 8009a5c:	60b9      	str	r1, [r7, #8]
 8009a5e:	4611      	mov	r1, r2
 8009a60:	461a      	mov	r2, r3
 8009a62:	460b      	mov	r3, r1
 8009a64:	71fb      	strb	r3, [r7, #7]
 8009a66:	4613      	mov	r3, r2
 8009a68:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8009a6e:	68bb      	ldr	r3, [r7, #8]
 8009a70:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8009a72:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d123      	bne.n	8009ac2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8009a7a:	88bb      	ldrh	r3, [r7, #4]
 8009a7c:	3303      	adds	r3, #3
 8009a7e:	089b      	lsrs	r3, r3, #2
 8009a80:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8009a82:	2300      	movs	r3, #0
 8009a84:	61bb      	str	r3, [r7, #24]
 8009a86:	e018      	b.n	8009aba <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8009a88:	79fb      	ldrb	r3, [r7, #7]
 8009a8a:	031a      	lsls	r2, r3, #12
 8009a8c:	697b      	ldr	r3, [r7, #20]
 8009a8e:	4413      	add	r3, r2
 8009a90:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009a94:	461a      	mov	r2, r3
 8009a96:	69fb      	ldr	r3, [r7, #28]
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009a9c:	69fb      	ldr	r3, [r7, #28]
 8009a9e:	3301      	adds	r3, #1
 8009aa0:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009aa2:	69fb      	ldr	r3, [r7, #28]
 8009aa4:	3301      	adds	r3, #1
 8009aa6:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009aa8:	69fb      	ldr	r3, [r7, #28]
 8009aaa:	3301      	adds	r3, #1
 8009aac:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009aae:	69fb      	ldr	r3, [r7, #28]
 8009ab0:	3301      	adds	r3, #1
 8009ab2:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8009ab4:	69bb      	ldr	r3, [r7, #24]
 8009ab6:	3301      	adds	r3, #1
 8009ab8:	61bb      	str	r3, [r7, #24]
 8009aba:	69ba      	ldr	r2, [r7, #24]
 8009abc:	693b      	ldr	r3, [r7, #16]
 8009abe:	429a      	cmp	r2, r3
 8009ac0:	d3e2      	bcc.n	8009a88 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8009ac2:	2300      	movs	r3, #0
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3724      	adds	r7, #36	@ 0x24
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ace:	4770      	bx	lr

08009ad0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009ad0:	b480      	push	{r7}
 8009ad2:	b08b      	sub	sp, #44	@ 0x2c
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	60f8      	str	r0, [r7, #12]
 8009ad8:	60b9      	str	r1, [r7, #8]
 8009ada:	4613      	mov	r3, r2
 8009adc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8009ae2:	68bb      	ldr	r3, [r7, #8]
 8009ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8009ae6:	88fb      	ldrh	r3, [r7, #6]
 8009ae8:	089b      	lsrs	r3, r3, #2
 8009aea:	b29b      	uxth	r3, r3
 8009aec:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009aee:	88fb      	ldrh	r3, [r7, #6]
 8009af0:	f003 0303 	and.w	r3, r3, #3
 8009af4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8009af6:	2300      	movs	r3, #0
 8009af8:	623b      	str	r3, [r7, #32]
 8009afa:	e014      	b.n	8009b26 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b06:	601a      	str	r2, [r3, #0]
    pDest++;
 8009b08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b10:	3301      	adds	r3, #1
 8009b12:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b16:	3301      	adds	r3, #1
 8009b18:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b1c:	3301      	adds	r3, #1
 8009b1e:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009b20:	6a3b      	ldr	r3, [r7, #32]
 8009b22:	3301      	adds	r3, #1
 8009b24:	623b      	str	r3, [r7, #32]
 8009b26:	6a3a      	ldr	r2, [r7, #32]
 8009b28:	697b      	ldr	r3, [r7, #20]
 8009b2a:	429a      	cmp	r2, r3
 8009b2c:	d3e6      	bcc.n	8009afc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009b2e:	8bfb      	ldrh	r3, [r7, #30]
 8009b30:	2b00      	cmp	r3, #0
 8009b32:	d01e      	beq.n	8009b72 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8009b34:	2300      	movs	r3, #0
 8009b36:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8009b38:	69bb      	ldr	r3, [r7, #24]
 8009b3a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8009b3e:	461a      	mov	r2, r3
 8009b40:	f107 0310 	add.w	r3, r7, #16
 8009b44:	6812      	ldr	r2, [r2, #0]
 8009b46:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8009b48:	693a      	ldr	r2, [r7, #16]
 8009b4a:	6a3b      	ldr	r3, [r7, #32]
 8009b4c:	b2db      	uxtb	r3, r3
 8009b4e:	00db      	lsls	r3, r3, #3
 8009b50:	fa22 f303 	lsr.w	r3, r2, r3
 8009b54:	b2da      	uxtb	r2, r3
 8009b56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b58:	701a      	strb	r2, [r3, #0]
      i++;
 8009b5a:	6a3b      	ldr	r3, [r7, #32]
 8009b5c:	3301      	adds	r3, #1
 8009b5e:	623b      	str	r3, [r7, #32]
      pDest++;
 8009b60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009b62:	3301      	adds	r3, #1
 8009b64:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8009b66:	8bfb      	ldrh	r3, [r7, #30]
 8009b68:	3b01      	subs	r3, #1
 8009b6a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8009b6c:	8bfb      	ldrh	r3, [r7, #30]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d1ea      	bne.n	8009b48 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8009b72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009b74:	4618      	mov	r0, r3
 8009b76:	372c      	adds	r7, #44	@ 0x2c
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
 8009b88:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009b8e:	683b      	ldr	r3, [r7, #0]
 8009b90:	781b      	ldrb	r3, [r3, #0]
 8009b92:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009b94:	683b      	ldr	r3, [r7, #0]
 8009b96:	785b      	ldrb	r3, [r3, #1]
 8009b98:	2b01      	cmp	r3, #1
 8009b9a:	d12c      	bne.n	8009bf6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	015a      	lsls	r2, r3, #5
 8009ba0:	68fb      	ldr	r3, [r7, #12]
 8009ba2:	4413      	add	r3, r2
 8009ba4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	db12      	blt.n	8009bd4 <USB_EPSetStall+0x54>
 8009bae:	68bb      	ldr	r3, [r7, #8]
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d00f      	beq.n	8009bd4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8009bb4:	68bb      	ldr	r3, [r7, #8]
 8009bb6:	015a      	lsls	r2, r3, #5
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	4413      	add	r3, r2
 8009bbc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	68ba      	ldr	r2, [r7, #8]
 8009bc4:	0151      	lsls	r1, r2, #5
 8009bc6:	68fa      	ldr	r2, [r7, #12]
 8009bc8:	440a      	add	r2, r1
 8009bca:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bce:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009bd2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8009bd4:	68bb      	ldr	r3, [r7, #8]
 8009bd6:	015a      	lsls	r2, r3, #5
 8009bd8:	68fb      	ldr	r3, [r7, #12]
 8009bda:	4413      	add	r3, r2
 8009bdc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	68ba      	ldr	r2, [r7, #8]
 8009be4:	0151      	lsls	r1, r2, #5
 8009be6:	68fa      	ldr	r2, [r7, #12]
 8009be8:	440a      	add	r2, r1
 8009bea:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009bee:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009bf2:	6013      	str	r3, [r2, #0]
 8009bf4:	e02b      	b.n	8009c4e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	015a      	lsls	r2, r3, #5
 8009bfa:	68fb      	ldr	r3, [r7, #12]
 8009bfc:	4413      	add	r3, r2
 8009bfe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	db12      	blt.n	8009c2e <USB_EPSetStall+0xae>
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d00f      	beq.n	8009c2e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	015a      	lsls	r2, r3, #5
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	4413      	add	r3, r2
 8009c16:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	68ba      	ldr	r2, [r7, #8]
 8009c1e:	0151      	lsls	r1, r2, #5
 8009c20:	68fa      	ldr	r2, [r7, #12]
 8009c22:	440a      	add	r2, r1
 8009c24:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c28:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009c2c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009c2e:	68bb      	ldr	r3, [r7, #8]
 8009c30:	015a      	lsls	r2, r3, #5
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	4413      	add	r3, r2
 8009c36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68ba      	ldr	r2, [r7, #8]
 8009c3e:	0151      	lsls	r1, r2, #5
 8009c40:	68fa      	ldr	r2, [r7, #12]
 8009c42:	440a      	add	r2, r1
 8009c44:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009c48:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8009c4c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009c4e:	2300      	movs	r3, #0
}
 8009c50:	4618      	mov	r0, r3
 8009c52:	3714      	adds	r7, #20
 8009c54:	46bd      	mov	sp, r7
 8009c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c5a:	4770      	bx	lr

08009c5c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8009c5c:	b480      	push	{r7}
 8009c5e:	b085      	sub	sp, #20
 8009c60:	af00      	add	r7, sp, #0
 8009c62:	6078      	str	r0, [r7, #4]
 8009c64:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8009c6a:	683b      	ldr	r3, [r7, #0]
 8009c6c:	781b      	ldrb	r3, [r3, #0]
 8009c6e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8009c70:	683b      	ldr	r3, [r7, #0]
 8009c72:	785b      	ldrb	r3, [r3, #1]
 8009c74:	2b01      	cmp	r3, #1
 8009c76:	d128      	bne.n	8009cca <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8009c78:	68bb      	ldr	r3, [r7, #8]
 8009c7a:	015a      	lsls	r2, r3, #5
 8009c7c:	68fb      	ldr	r3, [r7, #12]
 8009c7e:	4413      	add	r3, r2
 8009c80:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	68ba      	ldr	r2, [r7, #8]
 8009c88:	0151      	lsls	r1, r2, #5
 8009c8a:	68fa      	ldr	r2, [r7, #12]
 8009c8c:	440a      	add	r2, r1
 8009c8e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009c92:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009c96:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	791b      	ldrb	r3, [r3, #4]
 8009c9c:	2b03      	cmp	r3, #3
 8009c9e:	d003      	beq.n	8009ca8 <USB_EPClearStall+0x4c>
 8009ca0:	683b      	ldr	r3, [r7, #0]
 8009ca2:	791b      	ldrb	r3, [r3, #4]
 8009ca4:	2b02      	cmp	r3, #2
 8009ca6:	d138      	bne.n	8009d1a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009ca8:	68bb      	ldr	r3, [r7, #8]
 8009caa:	015a      	lsls	r2, r3, #5
 8009cac:	68fb      	ldr	r3, [r7, #12]
 8009cae:	4413      	add	r3, r2
 8009cb0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009cb4:	681b      	ldr	r3, [r3, #0]
 8009cb6:	68ba      	ldr	r2, [r7, #8]
 8009cb8:	0151      	lsls	r1, r2, #5
 8009cba:	68fa      	ldr	r2, [r7, #12]
 8009cbc:	440a      	add	r2, r1
 8009cbe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009cc2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009cc6:	6013      	str	r3, [r2, #0]
 8009cc8:	e027      	b.n	8009d1a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009cca:	68bb      	ldr	r3, [r7, #8]
 8009ccc:	015a      	lsls	r2, r3, #5
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	4413      	add	r3, r2
 8009cd2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	68ba      	ldr	r2, [r7, #8]
 8009cda:	0151      	lsls	r1, r2, #5
 8009cdc:	68fa      	ldr	r2, [r7, #12]
 8009cde:	440a      	add	r2, r1
 8009ce0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ce4:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009ce8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	791b      	ldrb	r3, [r3, #4]
 8009cee:	2b03      	cmp	r3, #3
 8009cf0:	d003      	beq.n	8009cfa <USB_EPClearStall+0x9e>
 8009cf2:	683b      	ldr	r3, [r7, #0]
 8009cf4:	791b      	ldrb	r3, [r3, #4]
 8009cf6:	2b02      	cmp	r3, #2
 8009cf8:	d10f      	bne.n	8009d1a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009cfa:	68bb      	ldr	r3, [r7, #8]
 8009cfc:	015a      	lsls	r2, r3, #5
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	4413      	add	r3, r2
 8009d02:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009d06:	681b      	ldr	r3, [r3, #0]
 8009d08:	68ba      	ldr	r2, [r7, #8]
 8009d0a:	0151      	lsls	r1, r2, #5
 8009d0c:	68fa      	ldr	r2, [r7, #12]
 8009d0e:	440a      	add	r2, r1
 8009d10:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009d14:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009d18:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009d1a:	2300      	movs	r3, #0
}
 8009d1c:	4618      	mov	r0, r3
 8009d1e:	3714      	adds	r7, #20
 8009d20:	46bd      	mov	sp, r7
 8009d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d26:	4770      	bx	lr

08009d28 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009d28:	b480      	push	{r7}
 8009d2a:	b085      	sub	sp, #20
 8009d2c:	af00      	add	r7, sp, #0
 8009d2e:	6078      	str	r0, [r7, #4]
 8009d30:	460b      	mov	r3, r1
 8009d32:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d34:	687b      	ldr	r3, [r7, #4]
 8009d36:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	68fa      	ldr	r2, [r7, #12]
 8009d42:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009d46:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8009d4a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8009d4c:	68fb      	ldr	r3, [r7, #12]
 8009d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d52:	681a      	ldr	r2, [r3, #0]
 8009d54:	78fb      	ldrb	r3, [r7, #3]
 8009d56:	011b      	lsls	r3, r3, #4
 8009d58:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8009d5c:	68f9      	ldr	r1, [r7, #12]
 8009d5e:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8009d62:	4313      	orrs	r3, r2
 8009d64:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8009d66:	2300      	movs	r3, #0
}
 8009d68:	4618      	mov	r0, r3
 8009d6a:	3714      	adds	r7, #20
 8009d6c:	46bd      	mov	sp, r7
 8009d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d72:	4770      	bx	lr

08009d74 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009d74:	b480      	push	{r7}
 8009d76:	b085      	sub	sp, #20
 8009d78:	af00      	add	r7, sp, #0
 8009d7a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	68fa      	ldr	r2, [r7, #12]
 8009d8a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009d8e:	f023 0303 	bic.w	r3, r3, #3
 8009d92:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8009d94:	68fb      	ldr	r3, [r7, #12]
 8009d96:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009d9a:	685b      	ldr	r3, [r3, #4]
 8009d9c:	68fa      	ldr	r2, [r7, #12]
 8009d9e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009da2:	f023 0302 	bic.w	r3, r3, #2
 8009da6:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009da8:	2300      	movs	r3, #0
}
 8009daa:	4618      	mov	r0, r3
 8009dac:	3714      	adds	r7, #20
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	68fa      	ldr	r2, [r7, #12]
 8009dcc:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009dd0:	f023 0303 	bic.w	r3, r3, #3
 8009dd4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ddc:	685b      	ldr	r3, [r3, #4]
 8009dde:	68fa      	ldr	r2, [r7, #12]
 8009de0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009de4:	f043 0302 	orr.w	r3, r3, #2
 8009de8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009dea:	2300      	movs	r3, #0
}
 8009dec:	4618      	mov	r0, r3
 8009dee:	3714      	adds	r7, #20
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009df8:	b480      	push	{r7}
 8009dfa:	b085      	sub	sp, #20
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	695b      	ldr	r3, [r3, #20]
 8009e04:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	699b      	ldr	r3, [r3, #24]
 8009e0a:	68fa      	ldr	r2, [r7, #12]
 8009e0c:	4013      	ands	r3, r2
 8009e0e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009e10:	68fb      	ldr	r3, [r7, #12]
}
 8009e12:	4618      	mov	r0, r3
 8009e14:	3714      	adds	r7, #20
 8009e16:	46bd      	mov	sp, r7
 8009e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e1c:	4770      	bx	lr

08009e1e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e1e:	b480      	push	{r7}
 8009e20:	b085      	sub	sp, #20
 8009e22:	af00      	add	r7, sp, #0
 8009e24:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e2a:	68fb      	ldr	r3, [r7, #12]
 8009e2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e30:	699b      	ldr	r3, [r3, #24]
 8009e32:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e3a:	69db      	ldr	r3, [r3, #28]
 8009e3c:	68ba      	ldr	r2, [r7, #8]
 8009e3e:	4013      	ands	r3, r2
 8009e40:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8009e42:	68bb      	ldr	r3, [r7, #8]
 8009e44:	0c1b      	lsrs	r3, r3, #16
}
 8009e46:	4618      	mov	r0, r3
 8009e48:	3714      	adds	r7, #20
 8009e4a:	46bd      	mov	sp, r7
 8009e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e50:	4770      	bx	lr

08009e52 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009e52:	b480      	push	{r7}
 8009e54:	b085      	sub	sp, #20
 8009e56:	af00      	add	r7, sp, #0
 8009e58:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e64:	699b      	ldr	r3, [r3, #24]
 8009e66:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009e6e:	69db      	ldr	r3, [r3, #28]
 8009e70:	68ba      	ldr	r2, [r7, #8]
 8009e72:	4013      	ands	r3, r2
 8009e74:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8009e76:	68bb      	ldr	r3, [r7, #8]
 8009e78:	b29b      	uxth	r3, r3
}
 8009e7a:	4618      	mov	r0, r3
 8009e7c:	3714      	adds	r7, #20
 8009e7e:	46bd      	mov	sp, r7
 8009e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e84:	4770      	bx	lr

08009e86 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009e86:	b480      	push	{r7}
 8009e88:	b085      	sub	sp, #20
 8009e8a:	af00      	add	r7, sp, #0
 8009e8c:	6078      	str	r0, [r7, #4]
 8009e8e:	460b      	mov	r3, r1
 8009e90:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8009e96:	78fb      	ldrb	r3, [r7, #3]
 8009e98:	015a      	lsls	r2, r3, #5
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	4413      	add	r3, r2
 8009e9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ea2:	689b      	ldr	r3, [r3, #8]
 8009ea4:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009eac:	695b      	ldr	r3, [r3, #20]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	4013      	ands	r3, r2
 8009eb2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009eb4:	68bb      	ldr	r3, [r7, #8]
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3714      	adds	r7, #20
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec0:	4770      	bx	lr

08009ec2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8009ec2:	b480      	push	{r7}
 8009ec4:	b087      	sub	sp, #28
 8009ec6:	af00      	add	r7, sp, #0
 8009ec8:	6078      	str	r0, [r7, #4]
 8009eca:	460b      	mov	r3, r1
 8009ecc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8009ed2:	697b      	ldr	r3, [r7, #20]
 8009ed4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009edc:	697b      	ldr	r3, [r7, #20]
 8009ede:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009ee2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009ee4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8009ee6:	78fb      	ldrb	r3, [r7, #3]
 8009ee8:	f003 030f 	and.w	r3, r3, #15
 8009eec:	68fa      	ldr	r2, [r7, #12]
 8009eee:	fa22 f303 	lsr.w	r3, r2, r3
 8009ef2:	01db      	lsls	r3, r3, #7
 8009ef4:	b2db      	uxtb	r3, r3
 8009ef6:	693a      	ldr	r2, [r7, #16]
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009efc:	78fb      	ldrb	r3, [r7, #3]
 8009efe:	015a      	lsls	r2, r3, #5
 8009f00:	697b      	ldr	r3, [r7, #20]
 8009f02:	4413      	add	r3, r2
 8009f04:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f08:	689b      	ldr	r3, [r3, #8]
 8009f0a:	693a      	ldr	r2, [r7, #16]
 8009f0c:	4013      	ands	r3, r2
 8009f0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009f10:	68bb      	ldr	r3, [r7, #8]
}
 8009f12:	4618      	mov	r0, r3
 8009f14:	371c      	adds	r7, #28
 8009f16:	46bd      	mov	sp, r7
 8009f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1c:	4770      	bx	lr

08009f1e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f1e:	b480      	push	{r7}
 8009f20:	b083      	sub	sp, #12
 8009f22:	af00      	add	r7, sp, #0
 8009f24:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	695b      	ldr	r3, [r3, #20]
 8009f2a:	f003 0301 	and.w	r3, r3, #1
}
 8009f2e:	4618      	mov	r0, r3
 8009f30:	370c      	adds	r7, #12
 8009f32:	46bd      	mov	sp, r7
 8009f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f38:	4770      	bx	lr

08009f3a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8009f3a:	b480      	push	{r7}
 8009f3c:	b085      	sub	sp, #20
 8009f3e:	af00      	add	r7, sp, #0
 8009f40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009f4c:	681b      	ldr	r3, [r3, #0]
 8009f4e:	68fa      	ldr	r2, [r7, #12]
 8009f50:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009f54:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8009f58:	f023 0307 	bic.w	r3, r3, #7
 8009f5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009f64:	685b      	ldr	r3, [r3, #4]
 8009f66:	68fa      	ldr	r2, [r7, #12]
 8009f68:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8009f6c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009f70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009f72:	2300      	movs	r3, #0
}
 8009f74:	4618      	mov	r0, r3
 8009f76:	3714      	adds	r7, #20
 8009f78:	46bd      	mov	sp, r7
 8009f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f7e:	4770      	bx	lr

08009f80 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b087      	sub	sp, #28
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	60f8      	str	r0, [r7, #12]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	607a      	str	r2, [r7, #4]
 8009f8c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	333c      	adds	r3, #60	@ 0x3c
 8009f96:	3304      	adds	r3, #4
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009f9c:	693b      	ldr	r3, [r7, #16]
 8009f9e:	4a26      	ldr	r2, [pc, #152]	@ (800a038 <USB_EP0_OutStart+0xb8>)
 8009fa0:	4293      	cmp	r3, r2
 8009fa2:	d90a      	bls.n	8009fba <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8009fa4:	697b      	ldr	r3, [r7, #20]
 8009fa6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009fb0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009fb4:	d101      	bne.n	8009fba <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e037      	b.n	800a02a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009fba:	697b      	ldr	r3, [r7, #20]
 8009fbc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fc0:	461a      	mov	r2, r3
 8009fc2:	2300      	movs	r3, #0
 8009fc4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8009fc6:	697b      	ldr	r3, [r7, #20]
 8009fc8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fcc:	691b      	ldr	r3, [r3, #16]
 8009fce:	697a      	ldr	r2, [r7, #20]
 8009fd0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fd4:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009fd8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009fda:	697b      	ldr	r3, [r7, #20]
 8009fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009fe0:	691b      	ldr	r3, [r3, #16]
 8009fe2:	697a      	ldr	r2, [r7, #20]
 8009fe4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009fe8:	f043 0318 	orr.w	r3, r3, #24
 8009fec:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009fee:	697b      	ldr	r3, [r7, #20]
 8009ff0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009ff4:	691b      	ldr	r3, [r3, #16]
 8009ff6:	697a      	ldr	r2, [r7, #20]
 8009ff8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009ffc:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 800a000:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800a002:	7afb      	ldrb	r3, [r7, #11]
 800a004:	2b01      	cmp	r3, #1
 800a006:	d10f      	bne.n	800a028 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 800a008:	697b      	ldr	r3, [r7, #20]
 800a00a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a00e:	461a      	mov	r2, r3
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800a014:	697b      	ldr	r3, [r7, #20]
 800a016:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	697a      	ldr	r2, [r7, #20]
 800a01e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800a022:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800a026:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800a028:	2300      	movs	r3, #0
}
 800a02a:	4618      	mov	r0, r3
 800a02c:	371c      	adds	r7, #28
 800a02e:	46bd      	mov	sp, r7
 800a030:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a034:	4770      	bx	lr
 800a036:	bf00      	nop
 800a038:	4f54300a 	.word	0x4f54300a

0800a03c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b085      	sub	sp, #20
 800a040:	af00      	add	r7, sp, #0
 800a042:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800a044:	2300      	movs	r3, #0
 800a046:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	3301      	adds	r3, #1
 800a04c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a04e:	68fb      	ldr	r3, [r7, #12]
 800a050:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a054:	d901      	bls.n	800a05a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800a056:	2303      	movs	r3, #3
 800a058:	e022      	b.n	800a0a0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800a05a:	687b      	ldr	r3, [r7, #4]
 800a05c:	691b      	ldr	r3, [r3, #16]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	daf2      	bge.n	800a048 <USB_CoreReset+0xc>

  count = 10U;
 800a062:	230a      	movs	r3, #10
 800a064:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 800a066:	e002      	b.n	800a06e <USB_CoreReset+0x32>
  {
    count--;
 800a068:	68fb      	ldr	r3, [r7, #12]
 800a06a:	3b01      	subs	r3, #1
 800a06c:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	2b00      	cmp	r3, #0
 800a072:	d1f9      	bne.n	800a068 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800a074:	687b      	ldr	r3, [r7, #4]
 800a076:	691b      	ldr	r3, [r3, #16]
 800a078:	f043 0201 	orr.w	r2, r3, #1
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800a080:	68fb      	ldr	r3, [r7, #12]
 800a082:	3301      	adds	r3, #1
 800a084:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800a086:	68fb      	ldr	r3, [r7, #12]
 800a088:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800a08c:	d901      	bls.n	800a092 <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 800a08e:	2303      	movs	r3, #3
 800a090:	e006      	b.n	800a0a0 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	691b      	ldr	r3, [r3, #16]
 800a096:	f003 0301 	and.w	r3, r3, #1
 800a09a:	2b01      	cmp	r3, #1
 800a09c:	d0f0      	beq.n	800a080 <USB_CoreReset+0x44>

  return HAL_OK;
 800a09e:	2300      	movs	r3, #0
}
 800a0a0:	4618      	mov	r0, r3
 800a0a2:	3714      	adds	r7, #20
 800a0a4:	46bd      	mov	sp, r7
 800a0a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0aa:	4770      	bx	lr

0800a0ac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a0ac:	b580      	push	{r7, lr}
 800a0ae:	b084      	sub	sp, #16
 800a0b0:	af00      	add	r7, sp, #0
 800a0b2:	6078      	str	r0, [r7, #4]
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800a0b8:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 800a0bc:	f002 fcb2 	bl	800ca24 <USBD_static_malloc>
 800a0c0:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d109      	bne.n	800a0dc <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	32b0      	adds	r2, #176	@ 0xb0
 800a0d2:	2100      	movs	r1, #0
 800a0d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800a0d8:	2302      	movs	r3, #2
 800a0da:	e0d4      	b.n	800a286 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 800a0dc:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 800a0e0:	2100      	movs	r1, #0
 800a0e2:	68f8      	ldr	r0, [r7, #12]
 800a0e4:	f004 f9dc 	bl	800e4a0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	32b0      	adds	r2, #176	@ 0xb0
 800a0f2:	68f9      	ldr	r1, [r7, #12]
 800a0f4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	32b0      	adds	r2, #176	@ 0xb0
 800a102:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	7c1b      	ldrb	r3, [r3, #16]
 800a110:	2b00      	cmp	r3, #0
 800a112:	d138      	bne.n	800a186 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a114:	4b5e      	ldr	r3, [pc, #376]	@ (800a290 <USBD_CDC_Init+0x1e4>)
 800a116:	7819      	ldrb	r1, [r3, #0]
 800a118:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a11c:	2202      	movs	r2, #2
 800a11e:	6878      	ldr	r0, [r7, #4]
 800a120:	f002 fb5d 	bl	800c7de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a124:	4b5a      	ldr	r3, [pc, #360]	@ (800a290 <USBD_CDC_Init+0x1e4>)
 800a126:	781b      	ldrb	r3, [r3, #0]
 800a128:	f003 020f 	and.w	r2, r3, #15
 800a12c:	6879      	ldr	r1, [r7, #4]
 800a12e:	4613      	mov	r3, r2
 800a130:	009b      	lsls	r3, r3, #2
 800a132:	4413      	add	r3, r2
 800a134:	009b      	lsls	r3, r3, #2
 800a136:	440b      	add	r3, r1
 800a138:	3323      	adds	r3, #35	@ 0x23
 800a13a:	2201      	movs	r2, #1
 800a13c:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a13e:	4b55      	ldr	r3, [pc, #340]	@ (800a294 <USBD_CDC_Init+0x1e8>)
 800a140:	7819      	ldrb	r1, [r3, #0]
 800a142:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a146:	2202      	movs	r2, #2
 800a148:	6878      	ldr	r0, [r7, #4]
 800a14a:	f002 fb48 	bl	800c7de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a14e:	4b51      	ldr	r3, [pc, #324]	@ (800a294 <USBD_CDC_Init+0x1e8>)
 800a150:	781b      	ldrb	r3, [r3, #0]
 800a152:	f003 020f 	and.w	r2, r3, #15
 800a156:	6879      	ldr	r1, [r7, #4]
 800a158:	4613      	mov	r3, r2
 800a15a:	009b      	lsls	r3, r3, #2
 800a15c:	4413      	add	r3, r2
 800a15e:	009b      	lsls	r3, r3, #2
 800a160:	440b      	add	r3, r1
 800a162:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a166:	2201      	movs	r2, #1
 800a168:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 800a16a:	4b4b      	ldr	r3, [pc, #300]	@ (800a298 <USBD_CDC_Init+0x1ec>)
 800a16c:	781b      	ldrb	r3, [r3, #0]
 800a16e:	f003 020f 	and.w	r2, r3, #15
 800a172:	6879      	ldr	r1, [r7, #4]
 800a174:	4613      	mov	r3, r2
 800a176:	009b      	lsls	r3, r3, #2
 800a178:	4413      	add	r3, r2
 800a17a:	009b      	lsls	r3, r3, #2
 800a17c:	440b      	add	r3, r1
 800a17e:	331c      	adds	r3, #28
 800a180:	2210      	movs	r2, #16
 800a182:	601a      	str	r2, [r3, #0]
 800a184:	e035      	b.n	800a1f2 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800a186:	4b42      	ldr	r3, [pc, #264]	@ (800a290 <USBD_CDC_Init+0x1e4>)
 800a188:	7819      	ldrb	r1, [r3, #0]
 800a18a:	2340      	movs	r3, #64	@ 0x40
 800a18c:	2202      	movs	r2, #2
 800a18e:	6878      	ldr	r0, [r7, #4]
 800a190:	f002 fb25 	bl	800c7de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800a194:	4b3e      	ldr	r3, [pc, #248]	@ (800a290 <USBD_CDC_Init+0x1e4>)
 800a196:	781b      	ldrb	r3, [r3, #0]
 800a198:	f003 020f 	and.w	r2, r3, #15
 800a19c:	6879      	ldr	r1, [r7, #4]
 800a19e:	4613      	mov	r3, r2
 800a1a0:	009b      	lsls	r3, r3, #2
 800a1a2:	4413      	add	r3, r2
 800a1a4:	009b      	lsls	r3, r3, #2
 800a1a6:	440b      	add	r3, r1
 800a1a8:	3323      	adds	r3, #35	@ 0x23
 800a1aa:	2201      	movs	r2, #1
 800a1ac:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800a1ae:	4b39      	ldr	r3, [pc, #228]	@ (800a294 <USBD_CDC_Init+0x1e8>)
 800a1b0:	7819      	ldrb	r1, [r3, #0]
 800a1b2:	2340      	movs	r3, #64	@ 0x40
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	6878      	ldr	r0, [r7, #4]
 800a1b8:	f002 fb11 	bl	800c7de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 800a1bc:	4b35      	ldr	r3, [pc, #212]	@ (800a294 <USBD_CDC_Init+0x1e8>)
 800a1be:	781b      	ldrb	r3, [r3, #0]
 800a1c0:	f003 020f 	and.w	r2, r3, #15
 800a1c4:	6879      	ldr	r1, [r7, #4]
 800a1c6:	4613      	mov	r3, r2
 800a1c8:	009b      	lsls	r3, r3, #2
 800a1ca:	4413      	add	r3, r2
 800a1cc:	009b      	lsls	r3, r3, #2
 800a1ce:	440b      	add	r3, r1
 800a1d0:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a1d4:	2201      	movs	r2, #1
 800a1d6:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 800a1d8:	4b2f      	ldr	r3, [pc, #188]	@ (800a298 <USBD_CDC_Init+0x1ec>)
 800a1da:	781b      	ldrb	r3, [r3, #0]
 800a1dc:	f003 020f 	and.w	r2, r3, #15
 800a1e0:	6879      	ldr	r1, [r7, #4]
 800a1e2:	4613      	mov	r3, r2
 800a1e4:	009b      	lsls	r3, r3, #2
 800a1e6:	4413      	add	r3, r2
 800a1e8:	009b      	lsls	r3, r3, #2
 800a1ea:	440b      	add	r3, r1
 800a1ec:	331c      	adds	r3, #28
 800a1ee:	2210      	movs	r2, #16
 800a1f0:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800a1f2:	4b29      	ldr	r3, [pc, #164]	@ (800a298 <USBD_CDC_Init+0x1ec>)
 800a1f4:	7819      	ldrb	r1, [r3, #0]
 800a1f6:	2308      	movs	r3, #8
 800a1f8:	2203      	movs	r2, #3
 800a1fa:	6878      	ldr	r0, [r7, #4]
 800a1fc:	f002 faef 	bl	800c7de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 800a200:	4b25      	ldr	r3, [pc, #148]	@ (800a298 <USBD_CDC_Init+0x1ec>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	f003 020f 	and.w	r2, r3, #15
 800a208:	6879      	ldr	r1, [r7, #4]
 800a20a:	4613      	mov	r3, r2
 800a20c:	009b      	lsls	r3, r3, #2
 800a20e:	4413      	add	r3, r2
 800a210:	009b      	lsls	r3, r3, #2
 800a212:	440b      	add	r3, r1
 800a214:	3323      	adds	r3, #35	@ 0x23
 800a216:	2201      	movs	r2, #1
 800a218:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	2200      	movs	r2, #0
 800a21e:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a228:	687a      	ldr	r2, [r7, #4]
 800a22a:	33b0      	adds	r3, #176	@ 0xb0
 800a22c:	009b      	lsls	r3, r3, #2
 800a22e:	4413      	add	r3, r2
 800a230:	685b      	ldr	r3, [r3, #4]
 800a232:	681b      	ldr	r3, [r3, #0]
 800a234:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2200      	movs	r2, #0
 800a23a:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 800a23e:	68fb      	ldr	r3, [r7, #12]
 800a240:	2200      	movs	r2, #0
 800a242:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d101      	bne.n	800a254 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 800a250:	2302      	movs	r3, #2
 800a252:	e018      	b.n	800a286 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a254:	687b      	ldr	r3, [r7, #4]
 800a256:	7c1b      	ldrb	r3, [r3, #16]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d10a      	bne.n	800a272 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a25c:	4b0d      	ldr	r3, [pc, #52]	@ (800a294 <USBD_CDC_Init+0x1e8>)
 800a25e:	7819      	ldrb	r1, [r3, #0]
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a266:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f002 fba6 	bl	800c9bc <USBD_LL_PrepareReceive>
 800a270:	e008      	b.n	800a284 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a272:	4b08      	ldr	r3, [pc, #32]	@ (800a294 <USBD_CDC_Init+0x1e8>)
 800a274:	7819      	ldrb	r1, [r3, #0]
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a27c:	2340      	movs	r3, #64	@ 0x40
 800a27e:	6878      	ldr	r0, [r7, #4]
 800a280:	f002 fb9c 	bl	800c9bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a284:	2300      	movs	r3, #0
}
 800a286:	4618      	mov	r0, r3
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	20000093 	.word	0x20000093
 800a294:	20000094 	.word	0x20000094
 800a298:	20000095 	.word	0x20000095

0800a29c <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a29c:	b580      	push	{r7, lr}
 800a29e:	b082      	sub	sp, #8
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	6078      	str	r0, [r7, #4]
 800a2a4:	460b      	mov	r3, r1
 800a2a6:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 800a2a8:	4b3a      	ldr	r3, [pc, #232]	@ (800a394 <USBD_CDC_DeInit+0xf8>)
 800a2aa:	781b      	ldrb	r3, [r3, #0]
 800a2ac:	4619      	mov	r1, r3
 800a2ae:	6878      	ldr	r0, [r7, #4]
 800a2b0:	f002 fabb 	bl	800c82a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 800a2b4:	4b37      	ldr	r3, [pc, #220]	@ (800a394 <USBD_CDC_DeInit+0xf8>)
 800a2b6:	781b      	ldrb	r3, [r3, #0]
 800a2b8:	f003 020f 	and.w	r2, r3, #15
 800a2bc:	6879      	ldr	r1, [r7, #4]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	009b      	lsls	r3, r3, #2
 800a2c2:	4413      	add	r3, r2
 800a2c4:	009b      	lsls	r3, r3, #2
 800a2c6:	440b      	add	r3, r1
 800a2c8:	3323      	adds	r3, #35	@ 0x23
 800a2ca:	2200      	movs	r2, #0
 800a2cc:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800a2ce:	4b32      	ldr	r3, [pc, #200]	@ (800a398 <USBD_CDC_DeInit+0xfc>)
 800a2d0:	781b      	ldrb	r3, [r3, #0]
 800a2d2:	4619      	mov	r1, r3
 800a2d4:	6878      	ldr	r0, [r7, #4]
 800a2d6:	f002 faa8 	bl	800c82a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 800a2da:	4b2f      	ldr	r3, [pc, #188]	@ (800a398 <USBD_CDC_DeInit+0xfc>)
 800a2dc:	781b      	ldrb	r3, [r3, #0]
 800a2de:	f003 020f 	and.w	r2, r3, #15
 800a2e2:	6879      	ldr	r1, [r7, #4]
 800a2e4:	4613      	mov	r3, r2
 800a2e6:	009b      	lsls	r3, r3, #2
 800a2e8:	4413      	add	r3, r2
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	440b      	add	r3, r1
 800a2ee:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 800a2f6:	4b29      	ldr	r3, [pc, #164]	@ (800a39c <USBD_CDC_DeInit+0x100>)
 800a2f8:	781b      	ldrb	r3, [r3, #0]
 800a2fa:	4619      	mov	r1, r3
 800a2fc:	6878      	ldr	r0, [r7, #4]
 800a2fe:	f002 fa94 	bl	800c82a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 800a302:	4b26      	ldr	r3, [pc, #152]	@ (800a39c <USBD_CDC_DeInit+0x100>)
 800a304:	781b      	ldrb	r3, [r3, #0]
 800a306:	f003 020f 	and.w	r2, r3, #15
 800a30a:	6879      	ldr	r1, [r7, #4]
 800a30c:	4613      	mov	r3, r2
 800a30e:	009b      	lsls	r3, r3, #2
 800a310:	4413      	add	r3, r2
 800a312:	009b      	lsls	r3, r3, #2
 800a314:	440b      	add	r3, r1
 800a316:	3323      	adds	r3, #35	@ 0x23
 800a318:	2200      	movs	r2, #0
 800a31a:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 800a31c:	4b1f      	ldr	r3, [pc, #124]	@ (800a39c <USBD_CDC_DeInit+0x100>)
 800a31e:	781b      	ldrb	r3, [r3, #0]
 800a320:	f003 020f 	and.w	r2, r3, #15
 800a324:	6879      	ldr	r1, [r7, #4]
 800a326:	4613      	mov	r3, r2
 800a328:	009b      	lsls	r3, r3, #2
 800a32a:	4413      	add	r3, r2
 800a32c:	009b      	lsls	r3, r3, #2
 800a32e:	440b      	add	r3, r1
 800a330:	331c      	adds	r3, #28
 800a332:	2200      	movs	r2, #0
 800a334:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	32b0      	adds	r2, #176	@ 0xb0
 800a340:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d01f      	beq.n	800a388 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a34e:	687a      	ldr	r2, [r7, #4]
 800a350:	33b0      	adds	r3, #176	@ 0xb0
 800a352:	009b      	lsls	r3, r3, #2
 800a354:	4413      	add	r3, r2
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	32b0      	adds	r2, #176	@ 0xb0
 800a366:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a36a:	4618      	mov	r0, r3
 800a36c:	f002 fb68 	bl	800ca40 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a376:	687b      	ldr	r3, [r7, #4]
 800a378:	32b0      	adds	r2, #176	@ 0xb0
 800a37a:	2100      	movs	r1, #0
 800a37c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2200      	movs	r2, #0
 800a384:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 800a388:	2300      	movs	r3, #0
}
 800a38a:	4618      	mov	r0, r3
 800a38c:	3708      	adds	r7, #8
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20000093 	.word	0x20000093
 800a398:	20000094 	.word	0x20000094
 800a39c:	20000095 	.word	0x20000095

0800a3a0 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800a3a0:	b580      	push	{r7, lr}
 800a3a2:	b086      	sub	sp, #24
 800a3a4:	af00      	add	r7, sp, #0
 800a3a6:	6078      	str	r0, [r7, #4]
 800a3a8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	32b0      	adds	r2, #176	@ 0xb0
 800a3b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a3b8:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800a3be:	2300      	movs	r3, #0
 800a3c0:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 800a3c6:	693b      	ldr	r3, [r7, #16]
 800a3c8:	2b00      	cmp	r3, #0
 800a3ca:	d101      	bne.n	800a3d0 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 800a3cc:	2303      	movs	r3, #3
 800a3ce:	e0bf      	b.n	800a550 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800a3d0:	683b      	ldr	r3, [r7, #0]
 800a3d2:	781b      	ldrb	r3, [r3, #0]
 800a3d4:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d050      	beq.n	800a47e <USBD_CDC_Setup+0xde>
 800a3dc:	2b20      	cmp	r3, #32
 800a3de:	f040 80af 	bne.w	800a540 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800a3e2:	683b      	ldr	r3, [r7, #0]
 800a3e4:	88db      	ldrh	r3, [r3, #6]
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	d03a      	beq.n	800a460 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 800a3ea:	683b      	ldr	r3, [r7, #0]
 800a3ec:	781b      	ldrb	r3, [r3, #0]
 800a3ee:	b25b      	sxtb	r3, r3
 800a3f0:	2b00      	cmp	r3, #0
 800a3f2:	da1b      	bge.n	800a42c <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a3fa:	687a      	ldr	r2, [r7, #4]
 800a3fc:	33b0      	adds	r3, #176	@ 0xb0
 800a3fe:	009b      	lsls	r3, r3, #2
 800a400:	4413      	add	r3, r2
 800a402:	685b      	ldr	r3, [r3, #4]
 800a404:	689b      	ldr	r3, [r3, #8]
 800a406:	683a      	ldr	r2, [r7, #0]
 800a408:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 800a40a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a40c:	683a      	ldr	r2, [r7, #0]
 800a40e:	88d2      	ldrh	r2, [r2, #6]
 800a410:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 800a412:	683b      	ldr	r3, [r7, #0]
 800a414:	88db      	ldrh	r3, [r3, #6]
 800a416:	2b07      	cmp	r3, #7
 800a418:	bf28      	it	cs
 800a41a:	2307      	movcs	r3, #7
 800a41c:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 800a41e:	693b      	ldr	r3, [r7, #16]
 800a420:	89fa      	ldrh	r2, [r7, #14]
 800a422:	4619      	mov	r1, r3
 800a424:	6878      	ldr	r0, [r7, #4]
 800a426:	f001 fda9 	bl	800bf7c <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 800a42a:	e090      	b.n	800a54e <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 800a42c:	683b      	ldr	r3, [r7, #0]
 800a42e:	785a      	ldrb	r2, [r3, #1]
 800a430:	693b      	ldr	r3, [r7, #16]
 800a432:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 800a436:	683b      	ldr	r3, [r7, #0]
 800a438:	88db      	ldrh	r3, [r3, #6]
 800a43a:	2b3f      	cmp	r3, #63	@ 0x3f
 800a43c:	d803      	bhi.n	800a446 <USBD_CDC_Setup+0xa6>
 800a43e:	683b      	ldr	r3, [r7, #0]
 800a440:	88db      	ldrh	r3, [r3, #6]
 800a442:	b2da      	uxtb	r2, r3
 800a444:	e000      	b.n	800a448 <USBD_CDC_Setup+0xa8>
 800a446:	2240      	movs	r2, #64	@ 0x40
 800a448:	693b      	ldr	r3, [r7, #16]
 800a44a:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 800a44e:	6939      	ldr	r1, [r7, #16]
 800a450:	693b      	ldr	r3, [r7, #16]
 800a452:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 800a456:	461a      	mov	r2, r3
 800a458:	6878      	ldr	r0, [r7, #4]
 800a45a:	f001 fdbe 	bl	800bfda <USBD_CtlPrepareRx>
      break;
 800a45e:	e076      	b.n	800a54e <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a466:	687a      	ldr	r2, [r7, #4]
 800a468:	33b0      	adds	r3, #176	@ 0xb0
 800a46a:	009b      	lsls	r3, r3, #2
 800a46c:	4413      	add	r3, r2
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	689b      	ldr	r3, [r3, #8]
 800a472:	683a      	ldr	r2, [r7, #0]
 800a474:	7850      	ldrb	r0, [r2, #1]
 800a476:	2200      	movs	r2, #0
 800a478:	6839      	ldr	r1, [r7, #0]
 800a47a:	4798      	blx	r3
      break;
 800a47c:	e067      	b.n	800a54e <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800a47e:	683b      	ldr	r3, [r7, #0]
 800a480:	785b      	ldrb	r3, [r3, #1]
 800a482:	2b0b      	cmp	r3, #11
 800a484:	d851      	bhi.n	800a52a <USBD_CDC_Setup+0x18a>
 800a486:	a201      	add	r2, pc, #4	@ (adr r2, 800a48c <USBD_CDC_Setup+0xec>)
 800a488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a48c:	0800a4bd 	.word	0x0800a4bd
 800a490:	0800a539 	.word	0x0800a539
 800a494:	0800a52b 	.word	0x0800a52b
 800a498:	0800a52b 	.word	0x0800a52b
 800a49c:	0800a52b 	.word	0x0800a52b
 800a4a0:	0800a52b 	.word	0x0800a52b
 800a4a4:	0800a52b 	.word	0x0800a52b
 800a4a8:	0800a52b 	.word	0x0800a52b
 800a4ac:	0800a52b 	.word	0x0800a52b
 800a4b0:	0800a52b 	.word	0x0800a52b
 800a4b4:	0800a4e7 	.word	0x0800a4e7
 800a4b8:	0800a511 	.word	0x0800a511
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4c2:	b2db      	uxtb	r3, r3
 800a4c4:	2b03      	cmp	r3, #3
 800a4c6:	d107      	bne.n	800a4d8 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800a4c8:	f107 030a 	add.w	r3, r7, #10
 800a4cc:	2202      	movs	r2, #2
 800a4ce:	4619      	mov	r1, r3
 800a4d0:	6878      	ldr	r0, [r7, #4]
 800a4d2:	f001 fd53 	bl	800bf7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a4d6:	e032      	b.n	800a53e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a4d8:	6839      	ldr	r1, [r7, #0]
 800a4da:	6878      	ldr	r0, [r7, #4]
 800a4dc:	f001 fcd1 	bl	800be82 <USBD_CtlError>
            ret = USBD_FAIL;
 800a4e0:	2303      	movs	r3, #3
 800a4e2:	75fb      	strb	r3, [r7, #23]
          break;
 800a4e4:	e02b      	b.n	800a53e <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a4ec:	b2db      	uxtb	r3, r3
 800a4ee:	2b03      	cmp	r3, #3
 800a4f0:	d107      	bne.n	800a502 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800a4f2:	f107 030d 	add.w	r3, r7, #13
 800a4f6:	2201      	movs	r2, #1
 800a4f8:	4619      	mov	r1, r3
 800a4fa:	6878      	ldr	r0, [r7, #4]
 800a4fc:	f001 fd3e 	bl	800bf7c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800a500:	e01d      	b.n	800a53e <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 800a502:	6839      	ldr	r1, [r7, #0]
 800a504:	6878      	ldr	r0, [r7, #4]
 800a506:	f001 fcbc 	bl	800be82 <USBD_CtlError>
            ret = USBD_FAIL;
 800a50a:	2303      	movs	r3, #3
 800a50c:	75fb      	strb	r3, [r7, #23]
          break;
 800a50e:	e016      	b.n	800a53e <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a516:	b2db      	uxtb	r3, r3
 800a518:	2b03      	cmp	r3, #3
 800a51a:	d00f      	beq.n	800a53c <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 800a51c:	6839      	ldr	r1, [r7, #0]
 800a51e:	6878      	ldr	r0, [r7, #4]
 800a520:	f001 fcaf 	bl	800be82 <USBD_CtlError>
            ret = USBD_FAIL;
 800a524:	2303      	movs	r3, #3
 800a526:	75fb      	strb	r3, [r7, #23]
          }
          break;
 800a528:	e008      	b.n	800a53c <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800a52a:	6839      	ldr	r1, [r7, #0]
 800a52c:	6878      	ldr	r0, [r7, #4]
 800a52e:	f001 fca8 	bl	800be82 <USBD_CtlError>
          ret = USBD_FAIL;
 800a532:	2303      	movs	r3, #3
 800a534:	75fb      	strb	r3, [r7, #23]
          break;
 800a536:	e002      	b.n	800a53e <USBD_CDC_Setup+0x19e>
          break;
 800a538:	bf00      	nop
 800a53a:	e008      	b.n	800a54e <USBD_CDC_Setup+0x1ae>
          break;
 800a53c:	bf00      	nop
      }
      break;
 800a53e:	e006      	b.n	800a54e <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800a540:	6839      	ldr	r1, [r7, #0]
 800a542:	6878      	ldr	r0, [r7, #4]
 800a544:	f001 fc9d 	bl	800be82 <USBD_CtlError>
      ret = USBD_FAIL;
 800a548:	2303      	movs	r3, #3
 800a54a:	75fb      	strb	r3, [r7, #23]
      break;
 800a54c:	bf00      	nop
  }

  return (uint8_t)ret;
 800a54e:	7dfb      	ldrb	r3, [r7, #23]
}
 800a550:	4618      	mov	r0, r3
 800a552:	3718      	adds	r7, #24
 800a554:	46bd      	mov	sp, r7
 800a556:	bd80      	pop	{r7, pc}

0800a558 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a558:	b580      	push	{r7, lr}
 800a55a:	b084      	sub	sp, #16
 800a55c:	af00      	add	r7, sp, #0
 800a55e:	6078      	str	r0, [r7, #4]
 800a560:	460b      	mov	r3, r1
 800a562:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800a56a:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	32b0      	adds	r2, #176	@ 0xb0
 800a576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d101      	bne.n	800a582 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800a57e:	2303      	movs	r3, #3
 800a580:	e065      	b.n	800a64e <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	32b0      	adds	r2, #176	@ 0xb0
 800a58c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a590:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a592:	78fb      	ldrb	r3, [r7, #3]
 800a594:	f003 020f 	and.w	r2, r3, #15
 800a598:	6879      	ldr	r1, [r7, #4]
 800a59a:	4613      	mov	r3, r2
 800a59c:	009b      	lsls	r3, r3, #2
 800a59e:	4413      	add	r3, r2
 800a5a0:	009b      	lsls	r3, r3, #2
 800a5a2:	440b      	add	r3, r1
 800a5a4:	3314      	adds	r3, #20
 800a5a6:	681b      	ldr	r3, [r3, #0]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d02f      	beq.n	800a60c <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 800a5ac:	78fb      	ldrb	r3, [r7, #3]
 800a5ae:	f003 020f 	and.w	r2, r3, #15
 800a5b2:	6879      	ldr	r1, [r7, #4]
 800a5b4:	4613      	mov	r3, r2
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	4413      	add	r3, r2
 800a5ba:	009b      	lsls	r3, r3, #2
 800a5bc:	440b      	add	r3, r1
 800a5be:	3314      	adds	r3, #20
 800a5c0:	681a      	ldr	r2, [r3, #0]
 800a5c2:	78fb      	ldrb	r3, [r7, #3]
 800a5c4:	f003 010f 	and.w	r1, r3, #15
 800a5c8:	68f8      	ldr	r0, [r7, #12]
 800a5ca:	460b      	mov	r3, r1
 800a5cc:	00db      	lsls	r3, r3, #3
 800a5ce:	440b      	add	r3, r1
 800a5d0:	009b      	lsls	r3, r3, #2
 800a5d2:	4403      	add	r3, r0
 800a5d4:	331c      	adds	r3, #28
 800a5d6:	681b      	ldr	r3, [r3, #0]
 800a5d8:	fbb2 f1f3 	udiv	r1, r2, r3
 800a5dc:	fb01 f303 	mul.w	r3, r1, r3
 800a5e0:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d112      	bne.n	800a60c <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 800a5e6:	78fb      	ldrb	r3, [r7, #3]
 800a5e8:	f003 020f 	and.w	r2, r3, #15
 800a5ec:	6879      	ldr	r1, [r7, #4]
 800a5ee:	4613      	mov	r3, r2
 800a5f0:	009b      	lsls	r3, r3, #2
 800a5f2:	4413      	add	r3, r2
 800a5f4:	009b      	lsls	r3, r3, #2
 800a5f6:	440b      	add	r3, r1
 800a5f8:	3314      	adds	r3, #20
 800a5fa:	2200      	movs	r2, #0
 800a5fc:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800a5fe:	78f9      	ldrb	r1, [r7, #3]
 800a600:	2300      	movs	r3, #0
 800a602:	2200      	movs	r2, #0
 800a604:	6878      	ldr	r0, [r7, #4]
 800a606:	f002 f9b8 	bl	800c97a <USBD_LL_Transmit>
 800a60a:	e01f      	b.n	800a64c <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 800a60c:	68bb      	ldr	r3, [r7, #8]
 800a60e:	2200      	movs	r2, #0
 800a610:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a61a:	687a      	ldr	r2, [r7, #4]
 800a61c:	33b0      	adds	r3, #176	@ 0xb0
 800a61e:	009b      	lsls	r3, r3, #2
 800a620:	4413      	add	r3, r2
 800a622:	685b      	ldr	r3, [r3, #4]
 800a624:	691b      	ldr	r3, [r3, #16]
 800a626:	2b00      	cmp	r3, #0
 800a628:	d010      	beq.n	800a64c <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a630:	687a      	ldr	r2, [r7, #4]
 800a632:	33b0      	adds	r3, #176	@ 0xb0
 800a634:	009b      	lsls	r3, r3, #2
 800a636:	4413      	add	r3, r2
 800a638:	685b      	ldr	r3, [r3, #4]
 800a63a:	691b      	ldr	r3, [r3, #16]
 800a63c:	68ba      	ldr	r2, [r7, #8]
 800a63e:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800a642:	68ba      	ldr	r2, [r7, #8]
 800a644:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 800a648:	78fa      	ldrb	r2, [r7, #3]
 800a64a:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b084      	sub	sp, #16
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	6078      	str	r0, [r7, #4]
 800a65e:	460b      	mov	r3, r1
 800a660:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	32b0      	adds	r2, #176	@ 0xb0
 800a66c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a670:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	32b0      	adds	r2, #176	@ 0xb0
 800a67c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a680:	2b00      	cmp	r3, #0
 800a682:	d101      	bne.n	800a688 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800a684:	2303      	movs	r3, #3
 800a686:	e01a      	b.n	800a6be <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800a688:	78fb      	ldrb	r3, [r7, #3]
 800a68a:	4619      	mov	r1, r3
 800a68c:	6878      	ldr	r0, [r7, #4]
 800a68e:	f002 f9b6 	bl	800c9fe <USBD_LL_GetRxDataSize>
 800a692:	4602      	mov	r2, r0
 800a694:	68fb      	ldr	r3, [r7, #12]
 800a696:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800a69a:	687b      	ldr	r3, [r7, #4]
 800a69c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6a0:	687a      	ldr	r2, [r7, #4]
 800a6a2:	33b0      	adds	r3, #176	@ 0xb0
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	4413      	add	r3, r2
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	68db      	ldr	r3, [r3, #12]
 800a6ac:	68fa      	ldr	r2, [r7, #12]
 800a6ae:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800a6b2:	68fa      	ldr	r2, [r7, #12]
 800a6b4:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 800a6b8:	4611      	mov	r1, r2
 800a6ba:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 800a6bc:	2300      	movs	r3, #0
}
 800a6be:	4618      	mov	r0, r3
 800a6c0:	3710      	adds	r7, #16
 800a6c2:	46bd      	mov	sp, r7
 800a6c4:	bd80      	pop	{r7, pc}

0800a6c6 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800a6c6:	b580      	push	{r7, lr}
 800a6c8:	b084      	sub	sp, #16
 800a6ca:	af00      	add	r7, sp, #0
 800a6cc:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a6ce:	687b      	ldr	r3, [r7, #4]
 800a6d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	32b0      	adds	r2, #176	@ 0xb0
 800a6d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a6dc:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a6de:	68fb      	ldr	r3, [r7, #12]
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d101      	bne.n	800a6e8 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800a6e4:	2303      	movs	r3, #3
 800a6e6:	e024      	b.n	800a732 <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a6ee:	687a      	ldr	r2, [r7, #4]
 800a6f0:	33b0      	adds	r3, #176	@ 0xb0
 800a6f2:	009b      	lsls	r3, r3, #2
 800a6f4:	4413      	add	r3, r2
 800a6f6:	685b      	ldr	r3, [r3, #4]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d019      	beq.n	800a730 <USBD_CDC_EP0_RxReady+0x6a>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 800a702:	2bff      	cmp	r3, #255	@ 0xff
 800a704:	d014      	beq.n	800a730 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a706:	687b      	ldr	r3, [r7, #4]
 800a708:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	33b0      	adds	r3, #176	@ 0xb0
 800a710:	009b      	lsls	r3, r3, #2
 800a712:	4413      	add	r3, r2
 800a714:	685b      	ldr	r3, [r3, #4]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	68fa      	ldr	r2, [r7, #12]
 800a71a:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 800a71e:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 800a720:	68fa      	ldr	r2, [r7, #12]
 800a722:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 800a726:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	22ff      	movs	r2, #255	@ 0xff
 800a72c:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 800a730:	2300      	movs	r3, #0
}
 800a732:	4618      	mov	r0, r3
 800a734:	3710      	adds	r7, #16
 800a736:	46bd      	mov	sp, r7
 800a738:	bd80      	pop	{r7, pc}
	...

0800a73c <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 800a73c:	b580      	push	{r7, lr}
 800a73e:	b086      	sub	sp, #24
 800a740:	af00      	add	r7, sp, #0
 800a742:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a744:	2182      	movs	r1, #130	@ 0x82
 800a746:	4818      	ldr	r0, [pc, #96]	@ (800a7a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a748:	f000 fd62 	bl	800b210 <USBD_GetEpDesc>
 800a74c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a74e:	2101      	movs	r1, #1
 800a750:	4815      	ldr	r0, [pc, #84]	@ (800a7a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a752:	f000 fd5d 	bl	800b210 <USBD_GetEpDesc>
 800a756:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a758:	2181      	movs	r1, #129	@ 0x81
 800a75a:	4813      	ldr	r0, [pc, #76]	@ (800a7a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800a75c:	f000 fd58 	bl	800b210 <USBD_GetEpDesc>
 800a760:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a762:	697b      	ldr	r3, [r7, #20]
 800a764:	2b00      	cmp	r3, #0
 800a766:	d002      	beq.n	800a76e <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	2210      	movs	r2, #16
 800a76c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	2b00      	cmp	r3, #0
 800a772:	d006      	beq.n	800a782 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	2200      	movs	r2, #0
 800a778:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a77c:	711a      	strb	r2, [r3, #4]
 800a77e:	2200      	movs	r2, #0
 800a780:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a782:	68fb      	ldr	r3, [r7, #12]
 800a784:	2b00      	cmp	r3, #0
 800a786:	d006      	beq.n	800a796 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	2200      	movs	r2, #0
 800a78c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a790:	711a      	strb	r2, [r3, #4]
 800a792:	2200      	movs	r2, #0
 800a794:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a796:	687b      	ldr	r3, [r7, #4]
 800a798:	2243      	movs	r2, #67	@ 0x43
 800a79a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a79c:	4b02      	ldr	r3, [pc, #8]	@ (800a7a8 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a79e:	4618      	mov	r0, r3
 800a7a0:	3718      	adds	r7, #24
 800a7a2:	46bd      	mov	sp, r7
 800a7a4:	bd80      	pop	{r7, pc}
 800a7a6:	bf00      	nop
 800a7a8:	20000050 	.word	0x20000050

0800a7ac <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b086      	sub	sp, #24
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a7b4:	2182      	movs	r1, #130	@ 0x82
 800a7b6:	4818      	ldr	r0, [pc, #96]	@ (800a818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a7b8:	f000 fd2a 	bl	800b210 <USBD_GetEpDesc>
 800a7bc:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a7be:	2101      	movs	r1, #1
 800a7c0:	4815      	ldr	r0, [pc, #84]	@ (800a818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a7c2:	f000 fd25 	bl	800b210 <USBD_GetEpDesc>
 800a7c6:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a7c8:	2181      	movs	r1, #129	@ 0x81
 800a7ca:	4813      	ldr	r0, [pc, #76]	@ (800a818 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a7cc:	f000 fd20 	bl	800b210 <USBD_GetEpDesc>
 800a7d0:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a7d2:	697b      	ldr	r3, [r7, #20]
 800a7d4:	2b00      	cmp	r3, #0
 800a7d6:	d002      	beq.n	800a7de <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a7d8:	697b      	ldr	r3, [r7, #20]
 800a7da:	2210      	movs	r2, #16
 800a7dc:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a7de:	693b      	ldr	r3, [r7, #16]
 800a7e0:	2b00      	cmp	r3, #0
 800a7e2:	d006      	beq.n	800a7f2 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	711a      	strb	r2, [r3, #4]
 800a7ea:	2200      	movs	r2, #0
 800a7ec:	f042 0202 	orr.w	r2, r2, #2
 800a7f0:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a7f2:	68fb      	ldr	r3, [r7, #12]
 800a7f4:	2b00      	cmp	r3, #0
 800a7f6:	d006      	beq.n	800a806 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a7f8:	68fb      	ldr	r3, [r7, #12]
 800a7fa:	2200      	movs	r2, #0
 800a7fc:	711a      	strb	r2, [r3, #4]
 800a7fe:	2200      	movs	r2, #0
 800a800:	f042 0202 	orr.w	r2, r2, #2
 800a804:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	2243      	movs	r2, #67	@ 0x43
 800a80a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a80c:	4b02      	ldr	r3, [pc, #8]	@ (800a818 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a80e:	4618      	mov	r0, r3
 800a810:	3718      	adds	r7, #24
 800a812:	46bd      	mov	sp, r7
 800a814:	bd80      	pop	{r7, pc}
 800a816:	bf00      	nop
 800a818:	20000050 	.word	0x20000050

0800a81c <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a81c:	b580      	push	{r7, lr}
 800a81e:	b086      	sub	sp, #24
 800a820:	af00      	add	r7, sp, #0
 800a822:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a824:	2182      	movs	r1, #130	@ 0x82
 800a826:	4818      	ldr	r0, [pc, #96]	@ (800a888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a828:	f000 fcf2 	bl	800b210 <USBD_GetEpDesc>
 800a82c:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a82e:	2101      	movs	r1, #1
 800a830:	4815      	ldr	r0, [pc, #84]	@ (800a888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a832:	f000 fced 	bl	800b210 <USBD_GetEpDesc>
 800a836:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a838:	2181      	movs	r1, #129	@ 0x81
 800a83a:	4813      	ldr	r0, [pc, #76]	@ (800a888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a83c:	f000 fce8 	bl	800b210 <USBD_GetEpDesc>
 800a840:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a842:	697b      	ldr	r3, [r7, #20]
 800a844:	2b00      	cmp	r3, #0
 800a846:	d002      	beq.n	800a84e <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	2210      	movs	r2, #16
 800a84c:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a84e:	693b      	ldr	r3, [r7, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	d006      	beq.n	800a862 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a854:	693b      	ldr	r3, [r7, #16]
 800a856:	2200      	movs	r2, #0
 800a858:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a85c:	711a      	strb	r2, [r3, #4]
 800a85e:	2200      	movs	r2, #0
 800a860:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d006      	beq.n	800a876 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2200      	movs	r2, #0
 800a86c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a870:	711a      	strb	r2, [r3, #4]
 800a872:	2200      	movs	r2, #0
 800a874:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	2243      	movs	r2, #67	@ 0x43
 800a87a:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a87c:	4b02      	ldr	r3, [pc, #8]	@ (800a888 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a87e:	4618      	mov	r0, r3
 800a880:	3718      	adds	r7, #24
 800a882:	46bd      	mov	sp, r7
 800a884:	bd80      	pop	{r7, pc}
 800a886:	bf00      	nop
 800a888:	20000050 	.word	0x20000050

0800a88c <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a88c:	b480      	push	{r7}
 800a88e:	b083      	sub	sp, #12
 800a890:	af00      	add	r7, sp, #0
 800a892:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	220a      	movs	r2, #10
 800a898:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a89a:	4b03      	ldr	r3, [pc, #12]	@ (800a8a8 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a89c:	4618      	mov	r0, r3
 800a89e:	370c      	adds	r7, #12
 800a8a0:	46bd      	mov	sp, r7
 800a8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a6:	4770      	bx	lr
 800a8a8:	2000000c 	.word	0x2000000c

0800a8ac <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a8ac:	b480      	push	{r7}
 800a8ae:	b083      	sub	sp, #12
 800a8b0:	af00      	add	r7, sp, #0
 800a8b2:	6078      	str	r0, [r7, #4]
 800a8b4:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a8b6:	683b      	ldr	r3, [r7, #0]
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	d101      	bne.n	800a8c0 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a8bc:	2303      	movs	r3, #3
 800a8be:	e009      	b.n	800a8d4 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a8c6:	687a      	ldr	r2, [r7, #4]
 800a8c8:	33b0      	adds	r3, #176	@ 0xb0
 800a8ca:	009b      	lsls	r3, r3, #2
 800a8cc:	4413      	add	r3, r2
 800a8ce:	683a      	ldr	r2, [r7, #0]
 800a8d0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a8e0:	b480      	push	{r7}
 800a8e2:	b087      	sub	sp, #28
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	60f8      	str	r0, [r7, #12]
 800a8e8:	60b9      	str	r1, [r7, #8]
 800a8ea:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a8ec:	68fb      	ldr	r3, [r7, #12]
 800a8ee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	32b0      	adds	r2, #176	@ 0xb0
 800a8f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a8fa:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a8fc:	697b      	ldr	r3, [r7, #20]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d101      	bne.n	800a906 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a902:	2303      	movs	r3, #3
 800a904:	e008      	b.n	800a918 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a906:	697b      	ldr	r3, [r7, #20]
 800a908:	68ba      	ldr	r2, [r7, #8]
 800a90a:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	687a      	ldr	r2, [r7, #4]
 800a912:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	371c      	adds	r7, #28
 800a91c:	46bd      	mov	sp, r7
 800a91e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a922:	4770      	bx	lr

0800a924 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a924:	b480      	push	{r7}
 800a926:	b085      	sub	sp, #20
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	32b0      	adds	r2, #176	@ 0xb0
 800a938:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93c:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	2b00      	cmp	r3, #0
 800a942:	d101      	bne.n	800a948 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a944:	2303      	movs	r3, #3
 800a946:	e004      	b.n	800a952 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	683a      	ldr	r2, [r7, #0]
 800a94c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a950:	2300      	movs	r3, #0
}
 800a952:	4618      	mov	r0, r3
 800a954:	3714      	adds	r7, #20
 800a956:	46bd      	mov	sp, r7
 800a958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a95c:	4770      	bx	lr
	...

0800a960 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a96e:	687b      	ldr	r3, [r7, #4]
 800a970:	32b0      	adds	r2, #176	@ 0xb0
 800a972:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a976:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a978:	2301      	movs	r3, #1
 800a97a:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a97c:	68bb      	ldr	r3, [r7, #8]
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d101      	bne.n	800a986 <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a982:	2303      	movs	r3, #3
 800a984:	e025      	b.n	800a9d2 <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a986:	68bb      	ldr	r3, [r7, #8]
 800a988:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d11f      	bne.n	800a9d0 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a990:	68bb      	ldr	r3, [r7, #8]
 800a992:	2201      	movs	r2, #1
 800a994:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a998:	4b10      	ldr	r3, [pc, #64]	@ (800a9dc <USBD_CDC_TransmitPacket+0x7c>)
 800a99a:	781b      	ldrb	r3, [r3, #0]
 800a99c:	f003 020f 	and.w	r2, r3, #15
 800a9a0:	68bb      	ldr	r3, [r7, #8]
 800a9a2:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a9a6:	6878      	ldr	r0, [r7, #4]
 800a9a8:	4613      	mov	r3, r2
 800a9aa:	009b      	lsls	r3, r3, #2
 800a9ac:	4413      	add	r3, r2
 800a9ae:	009b      	lsls	r3, r3, #2
 800a9b0:	4403      	add	r3, r0
 800a9b2:	3314      	adds	r3, #20
 800a9b4:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a9b6:	4b09      	ldr	r3, [pc, #36]	@ (800a9dc <USBD_CDC_TransmitPacket+0x7c>)
 800a9b8:	7819      	ldrb	r1, [r3, #0]
 800a9ba:	68bb      	ldr	r3, [r7, #8]
 800a9bc:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a9c0:	68bb      	ldr	r3, [r7, #8]
 800a9c2:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a9c6:	6878      	ldr	r0, [r7, #4]
 800a9c8:	f001 ffd7 	bl	800c97a <USBD_LL_Transmit>

    ret = USBD_OK;
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a9d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800a9d2:	4618      	mov	r0, r3
 800a9d4:	3710      	adds	r7, #16
 800a9d6:	46bd      	mov	sp, r7
 800a9d8:	bd80      	pop	{r7, pc}
 800a9da:	bf00      	nop
 800a9dc:	20000093 	.word	0x20000093

0800a9e0 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a9e0:	b580      	push	{r7, lr}
 800a9e2:	b084      	sub	sp, #16
 800a9e4:	af00      	add	r7, sp, #0
 800a9e6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	32b0      	adds	r2, #176	@ 0xb0
 800a9f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9f6:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9fe:	687b      	ldr	r3, [r7, #4]
 800aa00:	32b0      	adds	r2, #176	@ 0xb0
 800aa02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d101      	bne.n	800aa0e <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800aa0a:	2303      	movs	r3, #3
 800aa0c:	e018      	b.n	800aa40 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	7c1b      	ldrb	r3, [r3, #16]
 800aa12:	2b00      	cmp	r3, #0
 800aa14:	d10a      	bne.n	800aa2c <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa16:	4b0c      	ldr	r3, [pc, #48]	@ (800aa48 <USBD_CDC_ReceivePacket+0x68>)
 800aa18:	7819      	ldrb	r1, [r3, #0]
 800aa1a:	68fb      	ldr	r3, [r7, #12]
 800aa1c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa20:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800aa24:	6878      	ldr	r0, [r7, #4]
 800aa26:	f001 ffc9 	bl	800c9bc <USBD_LL_PrepareReceive>
 800aa2a:	e008      	b.n	800aa3e <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800aa2c:	4b06      	ldr	r3, [pc, #24]	@ (800aa48 <USBD_CDC_ReceivePacket+0x68>)
 800aa2e:	7819      	ldrb	r1, [r3, #0]
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800aa36:	2340      	movs	r3, #64	@ 0x40
 800aa38:	6878      	ldr	r0, [r7, #4]
 800aa3a:	f001 ffbf 	bl	800c9bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800aa3e:	2300      	movs	r3, #0
}
 800aa40:	4618      	mov	r0, r3
 800aa42:	3710      	adds	r7, #16
 800aa44:	46bd      	mov	sp, r7
 800aa46:	bd80      	pop	{r7, pc}
 800aa48:	20000094 	.word	0x20000094

0800aa4c <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800aa4c:	b580      	push	{r7, lr}
 800aa4e:	b086      	sub	sp, #24
 800aa50:	af00      	add	r7, sp, #0
 800aa52:	60f8      	str	r0, [r7, #12]
 800aa54:	60b9      	str	r1, [r7, #8]
 800aa56:	4613      	mov	r3, r2
 800aa58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d101      	bne.n	800aa64 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aa60:	2303      	movs	r3, #3
 800aa62:	e01f      	b.n	800aaa4 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800aa64:	68fb      	ldr	r3, [r7, #12]
 800aa66:	2200      	movs	r2, #0
 800aa68:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800aa6c:	68fb      	ldr	r3, [r7, #12]
 800aa6e:	2200      	movs	r2, #0
 800aa70:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	2200      	movs	r2, #0
 800aa78:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800aa7c:	68bb      	ldr	r3, [r7, #8]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d003      	beq.n	800aa8a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800aa82:	68fb      	ldr	r3, [r7, #12]
 800aa84:	68ba      	ldr	r2, [r7, #8]
 800aa86:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	2201      	movs	r2, #1
 800aa8e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800aa92:	68fb      	ldr	r3, [r7, #12]
 800aa94:	79fa      	ldrb	r2, [r7, #7]
 800aa96:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800aa98:	68f8      	ldr	r0, [r7, #12]
 800aa9a:	f001 fe39 	bl	800c710 <USBD_LL_Init>
 800aa9e:	4603      	mov	r3, r0
 800aaa0:	75fb      	strb	r3, [r7, #23]

  return ret;
 800aaa2:	7dfb      	ldrb	r3, [r7, #23]
}
 800aaa4:	4618      	mov	r0, r3
 800aaa6:	3718      	adds	r7, #24
 800aaa8:	46bd      	mov	sp, r7
 800aaaa:	bd80      	pop	{r7, pc}

0800aaac <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800aaac:	b580      	push	{r7, lr}
 800aaae:	b084      	sub	sp, #16
 800aab0:	af00      	add	r7, sp, #0
 800aab2:	6078      	str	r0, [r7, #4]
 800aab4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800aab6:	2300      	movs	r3, #0
 800aab8:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800aaba:	683b      	ldr	r3, [r7, #0]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d101      	bne.n	800aac4 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800aac0:	2303      	movs	r3, #3
 800aac2:	e025      	b.n	800ab10 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800aac4:	687b      	ldr	r3, [r7, #4]
 800aac6:	683a      	ldr	r2, [r7, #0]
 800aac8:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	32ae      	adds	r2, #174	@ 0xae
 800aad6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aada:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d00f      	beq.n	800ab00 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800aae6:	687b      	ldr	r3, [r7, #4]
 800aae8:	32ae      	adds	r2, #174	@ 0xae
 800aaea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aaee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800aaf0:	f107 020e 	add.w	r2, r7, #14
 800aaf4:	4610      	mov	r0, r2
 800aaf6:	4798      	blx	r3
 800aaf8:	4602      	mov	r2, r0
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800ab06:	1c5a      	adds	r2, r3, #1
 800ab08:	687b      	ldr	r3, [r7, #4]
 800ab0a:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800ab0e:	2300      	movs	r3, #0
}
 800ab10:	4618      	mov	r0, r3
 800ab12:	3710      	adds	r7, #16
 800ab14:	46bd      	mov	sp, r7
 800ab16:	bd80      	pop	{r7, pc}

0800ab18 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800ab18:	b580      	push	{r7, lr}
 800ab1a:	b082      	sub	sp, #8
 800ab1c:	af00      	add	r7, sp, #0
 800ab1e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800ab20:	6878      	ldr	r0, [r7, #4]
 800ab22:	f001 fe41 	bl	800c7a8 <USBD_LL_Start>
 800ab26:	4603      	mov	r3, r0
}
 800ab28:	4618      	mov	r0, r3
 800ab2a:	3708      	adds	r7, #8
 800ab2c:	46bd      	mov	sp, r7
 800ab2e:	bd80      	pop	{r7, pc}

0800ab30 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800ab30:	b480      	push	{r7}
 800ab32:	b083      	sub	sp, #12
 800ab34:	af00      	add	r7, sp, #0
 800ab36:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800ab38:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800ab3a:	4618      	mov	r0, r3
 800ab3c:	370c      	adds	r7, #12
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr

0800ab46 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab46:	b580      	push	{r7, lr}
 800ab48:	b084      	sub	sp, #16
 800ab4a:	af00      	add	r7, sp, #0
 800ab4c:	6078      	str	r0, [r7, #4]
 800ab4e:	460b      	mov	r3, r1
 800ab50:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab52:	2300      	movs	r3, #0
 800ab54:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d009      	beq.n	800ab74 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	78fa      	ldrb	r2, [r7, #3]
 800ab6a:	4611      	mov	r1, r2
 800ab6c:	6878      	ldr	r0, [r7, #4]
 800ab6e:	4798      	blx	r3
 800ab70:	4603      	mov	r3, r0
 800ab72:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800ab74:	7bfb      	ldrb	r3, [r7, #15]
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3710      	adds	r7, #16
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}

0800ab7e <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ab7e:	b580      	push	{r7, lr}
 800ab80:	b084      	sub	sp, #16
 800ab82:	af00      	add	r7, sp, #0
 800ab84:	6078      	str	r0, [r7, #4]
 800ab86:	460b      	mov	r3, r1
 800ab88:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab8a:	2300      	movs	r3, #0
 800ab8c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ab94:	685b      	ldr	r3, [r3, #4]
 800ab96:	78fa      	ldrb	r2, [r7, #3]
 800ab98:	4611      	mov	r1, r2
 800ab9a:	6878      	ldr	r0, [r7, #4]
 800ab9c:	4798      	blx	r3
 800ab9e:	4603      	mov	r3, r0
 800aba0:	2b00      	cmp	r3, #0
 800aba2:	d001      	beq.n	800aba8 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800aba4:	2303      	movs	r3, #3
 800aba6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aba8:	7bfb      	ldrb	r3, [r7, #15]
}
 800abaa:	4618      	mov	r0, r3
 800abac:	3710      	adds	r7, #16
 800abae:	46bd      	mov	sp, r7
 800abb0:	bd80      	pop	{r7, pc}

0800abb2 <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800abb2:	b580      	push	{r7, lr}
 800abb4:	b084      	sub	sp, #16
 800abb6:	af00      	add	r7, sp, #0
 800abb8:	6078      	str	r0, [r7, #4]
 800abba:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800abc2:	6839      	ldr	r1, [r7, #0]
 800abc4:	4618      	mov	r0, r3
 800abc6:	f001 f922 	bl	800be0e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	2201      	movs	r2, #1
 800abce:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800abd2:	687b      	ldr	r3, [r7, #4]
 800abd4:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800abd8:	461a      	mov	r2, r3
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800abe6:	f003 031f 	and.w	r3, r3, #31
 800abea:	2b02      	cmp	r3, #2
 800abec:	d01a      	beq.n	800ac24 <USBD_LL_SetupStage+0x72>
 800abee:	2b02      	cmp	r3, #2
 800abf0:	d822      	bhi.n	800ac38 <USBD_LL_SetupStage+0x86>
 800abf2:	2b00      	cmp	r3, #0
 800abf4:	d002      	beq.n	800abfc <USBD_LL_SetupStage+0x4a>
 800abf6:	2b01      	cmp	r3, #1
 800abf8:	d00a      	beq.n	800ac10 <USBD_LL_SetupStage+0x5e>
 800abfa:	e01d      	b.n	800ac38 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac02:	4619      	mov	r1, r3
 800ac04:	6878      	ldr	r0, [r7, #4]
 800ac06:	f000 fb77 	bl	800b2f8 <USBD_StdDevReq>
 800ac0a:	4603      	mov	r3, r0
 800ac0c:	73fb      	strb	r3, [r7, #15]
      break;
 800ac0e:	e020      	b.n	800ac52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800ac10:	687b      	ldr	r3, [r7, #4]
 800ac12:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac16:	4619      	mov	r1, r3
 800ac18:	6878      	ldr	r0, [r7, #4]
 800ac1a:	f000 fbdf 	bl	800b3dc <USBD_StdItfReq>
 800ac1e:	4603      	mov	r3, r0
 800ac20:	73fb      	strb	r3, [r7, #15]
      break;
 800ac22:	e016      	b.n	800ac52 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800ac2a:	4619      	mov	r1, r3
 800ac2c:	6878      	ldr	r0, [r7, #4]
 800ac2e:	f000 fc41 	bl	800b4b4 <USBD_StdEPReq>
 800ac32:	4603      	mov	r3, r0
 800ac34:	73fb      	strb	r3, [r7, #15]
      break;
 800ac36:	e00c      	b.n	800ac52 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800ac3e:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800ac42:	b2db      	uxtb	r3, r3
 800ac44:	4619      	mov	r1, r3
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f001 fe0e 	bl	800c868 <USBD_LL_StallEP>
 800ac4c:	4603      	mov	r3, r0
 800ac4e:	73fb      	strb	r3, [r7, #15]
      break;
 800ac50:	bf00      	nop
  }

  return ret;
 800ac52:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac54:	4618      	mov	r0, r3
 800ac56:	3710      	adds	r7, #16
 800ac58:	46bd      	mov	sp, r7
 800ac5a:	bd80      	pop	{r7, pc}

0800ac5c <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800ac5c:	b580      	push	{r7, lr}
 800ac5e:	b086      	sub	sp, #24
 800ac60:	af00      	add	r7, sp, #0
 800ac62:	60f8      	str	r0, [r7, #12]
 800ac64:	460b      	mov	r3, r1
 800ac66:	607a      	str	r2, [r7, #4]
 800ac68:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800ac6a:	2300      	movs	r3, #0
 800ac6c:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800ac6e:	7afb      	ldrb	r3, [r7, #11]
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d177      	bne.n	800ad64 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800ac7a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800ac82:	2b03      	cmp	r3, #3
 800ac84:	f040 80a1 	bne.w	800adca <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800ac88:	693b      	ldr	r3, [r7, #16]
 800ac8a:	685b      	ldr	r3, [r3, #4]
 800ac8c:	693a      	ldr	r2, [r7, #16]
 800ac8e:	8992      	ldrh	r2, [r2, #12]
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d91c      	bls.n	800acce <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	685b      	ldr	r3, [r3, #4]
 800ac98:	693a      	ldr	r2, [r7, #16]
 800ac9a:	8992      	ldrh	r2, [r2, #12]
 800ac9c:	1a9a      	subs	r2, r3, r2
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800aca2:	693b      	ldr	r3, [r7, #16]
 800aca4:	691b      	ldr	r3, [r3, #16]
 800aca6:	693a      	ldr	r2, [r7, #16]
 800aca8:	8992      	ldrh	r2, [r2, #12]
 800acaa:	441a      	add	r2, r3
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800acb0:	693b      	ldr	r3, [r7, #16]
 800acb2:	6919      	ldr	r1, [r3, #16]
 800acb4:	693b      	ldr	r3, [r7, #16]
 800acb6:	899b      	ldrh	r3, [r3, #12]
 800acb8:	461a      	mov	r2, r3
 800acba:	693b      	ldr	r3, [r7, #16]
 800acbc:	685b      	ldr	r3, [r3, #4]
 800acbe:	4293      	cmp	r3, r2
 800acc0:	bf38      	it	cc
 800acc2:	4613      	movcc	r3, r2
 800acc4:	461a      	mov	r2, r3
 800acc6:	68f8      	ldr	r0, [r7, #12]
 800acc8:	f001 f9a8 	bl	800c01c <USBD_CtlContinueRx>
 800accc:	e07d      	b.n	800adca <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800acd4:	f003 031f 	and.w	r3, r3, #31
 800acd8:	2b02      	cmp	r3, #2
 800acda:	d014      	beq.n	800ad06 <USBD_LL_DataOutStage+0xaa>
 800acdc:	2b02      	cmp	r3, #2
 800acde:	d81d      	bhi.n	800ad1c <USBD_LL_DataOutStage+0xc0>
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d002      	beq.n	800acea <USBD_LL_DataOutStage+0x8e>
 800ace4:	2b01      	cmp	r3, #1
 800ace6:	d003      	beq.n	800acf0 <USBD_LL_DataOutStage+0x94>
 800ace8:	e018      	b.n	800ad1c <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800acea:	2300      	movs	r3, #0
 800acec:	75bb      	strb	r3, [r7, #22]
            break;
 800acee:	e018      	b.n	800ad22 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800acf6:	b2db      	uxtb	r3, r3
 800acf8:	4619      	mov	r1, r3
 800acfa:	68f8      	ldr	r0, [r7, #12]
 800acfc:	f000 fa6e 	bl	800b1dc <USBD_CoreFindIF>
 800ad00:	4603      	mov	r3, r0
 800ad02:	75bb      	strb	r3, [r7, #22]
            break;
 800ad04:	e00d      	b.n	800ad22 <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800ad0c:	b2db      	uxtb	r3, r3
 800ad0e:	4619      	mov	r1, r3
 800ad10:	68f8      	ldr	r0, [r7, #12]
 800ad12:	f000 fa70 	bl	800b1f6 <USBD_CoreFindEP>
 800ad16:	4603      	mov	r3, r0
 800ad18:	75bb      	strb	r3, [r7, #22]
            break;
 800ad1a:	e002      	b.n	800ad22 <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800ad1c:	2300      	movs	r3, #0
 800ad1e:	75bb      	strb	r3, [r7, #22]
            break;
 800ad20:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800ad22:	7dbb      	ldrb	r3, [r7, #22]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d119      	bne.n	800ad5c <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad2e:	b2db      	uxtb	r3, r3
 800ad30:	2b03      	cmp	r3, #3
 800ad32:	d113      	bne.n	800ad5c <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800ad34:	7dba      	ldrb	r2, [r7, #22]
 800ad36:	68fb      	ldr	r3, [r7, #12]
 800ad38:	32ae      	adds	r2, #174	@ 0xae
 800ad3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad3e:	691b      	ldr	r3, [r3, #16]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d00b      	beq.n	800ad5c <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800ad44:	7dba      	ldrb	r2, [r7, #22]
 800ad46:	68fb      	ldr	r3, [r7, #12]
 800ad48:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800ad4c:	7dba      	ldrb	r2, [r7, #22]
 800ad4e:	68fb      	ldr	r3, [r7, #12]
 800ad50:	32ae      	adds	r2, #174	@ 0xae
 800ad52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad56:	691b      	ldr	r3, [r3, #16]
 800ad58:	68f8      	ldr	r0, [r7, #12]
 800ad5a:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800ad5c:	68f8      	ldr	r0, [r7, #12]
 800ad5e:	f001 f96e 	bl	800c03e <USBD_CtlSendStatus>
 800ad62:	e032      	b.n	800adca <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800ad64:	7afb      	ldrb	r3, [r7, #11]
 800ad66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ad6a:	b2db      	uxtb	r3, r3
 800ad6c:	4619      	mov	r1, r3
 800ad6e:	68f8      	ldr	r0, [r7, #12]
 800ad70:	f000 fa41 	bl	800b1f6 <USBD_CoreFindEP>
 800ad74:	4603      	mov	r3, r0
 800ad76:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad78:	7dbb      	ldrb	r3, [r7, #22]
 800ad7a:	2bff      	cmp	r3, #255	@ 0xff
 800ad7c:	d025      	beq.n	800adca <USBD_LL_DataOutStage+0x16e>
 800ad7e:	7dbb      	ldrb	r3, [r7, #22]
 800ad80:	2b00      	cmp	r3, #0
 800ad82:	d122      	bne.n	800adca <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ad84:	68fb      	ldr	r3, [r7, #12]
 800ad86:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ad8a:	b2db      	uxtb	r3, r3
 800ad8c:	2b03      	cmp	r3, #3
 800ad8e:	d117      	bne.n	800adc0 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800ad90:	7dba      	ldrb	r2, [r7, #22]
 800ad92:	68fb      	ldr	r3, [r7, #12]
 800ad94:	32ae      	adds	r2, #174	@ 0xae
 800ad96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad9a:	699b      	ldr	r3, [r3, #24]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d00f      	beq.n	800adc0 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800ada0:	7dba      	ldrb	r2, [r7, #22]
 800ada2:	68fb      	ldr	r3, [r7, #12]
 800ada4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800ada8:	7dba      	ldrb	r2, [r7, #22]
 800adaa:	68fb      	ldr	r3, [r7, #12]
 800adac:	32ae      	adds	r2, #174	@ 0xae
 800adae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800adb2:	699b      	ldr	r3, [r3, #24]
 800adb4:	7afa      	ldrb	r2, [r7, #11]
 800adb6:	4611      	mov	r1, r2
 800adb8:	68f8      	ldr	r0, [r7, #12]
 800adba:	4798      	blx	r3
 800adbc:	4603      	mov	r3, r0
 800adbe:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800adc0:	7dfb      	ldrb	r3, [r7, #23]
 800adc2:	2b00      	cmp	r3, #0
 800adc4:	d001      	beq.n	800adca <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800adc6:	7dfb      	ldrb	r3, [r7, #23]
 800adc8:	e000      	b.n	800adcc <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800adca:	2300      	movs	r3, #0
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3718      	adds	r7, #24
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}

0800add4 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800add4:	b580      	push	{r7, lr}
 800add6:	b086      	sub	sp, #24
 800add8:	af00      	add	r7, sp, #0
 800adda:	60f8      	str	r0, [r7, #12]
 800addc:	460b      	mov	r3, r1
 800adde:	607a      	str	r2, [r7, #4]
 800ade0:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800ade2:	7afb      	ldrb	r3, [r7, #11]
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d178      	bne.n	800aeda <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800ade8:	68fb      	ldr	r3, [r7, #12]
 800adea:	3314      	adds	r3, #20
 800adec:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800adee:	68fb      	ldr	r3, [r7, #12]
 800adf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800adf4:	2b02      	cmp	r3, #2
 800adf6:	d163      	bne.n	800aec0 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800adf8:	693b      	ldr	r3, [r7, #16]
 800adfa:	685b      	ldr	r3, [r3, #4]
 800adfc:	693a      	ldr	r2, [r7, #16]
 800adfe:	8992      	ldrh	r2, [r2, #12]
 800ae00:	4293      	cmp	r3, r2
 800ae02:	d91c      	bls.n	800ae3e <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800ae04:	693b      	ldr	r3, [r7, #16]
 800ae06:	685b      	ldr	r3, [r3, #4]
 800ae08:	693a      	ldr	r2, [r7, #16]
 800ae0a:	8992      	ldrh	r2, [r2, #12]
 800ae0c:	1a9a      	subs	r2, r3, r2
 800ae0e:	693b      	ldr	r3, [r7, #16]
 800ae10:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800ae12:	693b      	ldr	r3, [r7, #16]
 800ae14:	691b      	ldr	r3, [r3, #16]
 800ae16:	693a      	ldr	r2, [r7, #16]
 800ae18:	8992      	ldrh	r2, [r2, #12]
 800ae1a:	441a      	add	r2, r3
 800ae1c:	693b      	ldr	r3, [r7, #16]
 800ae1e:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800ae20:	693b      	ldr	r3, [r7, #16]
 800ae22:	6919      	ldr	r1, [r3, #16]
 800ae24:	693b      	ldr	r3, [r7, #16]
 800ae26:	685b      	ldr	r3, [r3, #4]
 800ae28:	461a      	mov	r2, r3
 800ae2a:	68f8      	ldr	r0, [r7, #12]
 800ae2c:	f001 f8c4 	bl	800bfb8 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae30:	2300      	movs	r3, #0
 800ae32:	2200      	movs	r2, #0
 800ae34:	2100      	movs	r1, #0
 800ae36:	68f8      	ldr	r0, [r7, #12]
 800ae38:	f001 fdc0 	bl	800c9bc <USBD_LL_PrepareReceive>
 800ae3c:	e040      	b.n	800aec0 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800ae3e:	693b      	ldr	r3, [r7, #16]
 800ae40:	899b      	ldrh	r3, [r3, #12]
 800ae42:	461a      	mov	r2, r3
 800ae44:	693b      	ldr	r3, [r7, #16]
 800ae46:	685b      	ldr	r3, [r3, #4]
 800ae48:	429a      	cmp	r2, r3
 800ae4a:	d11c      	bne.n	800ae86 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800ae4c:	693b      	ldr	r3, [r7, #16]
 800ae4e:	681b      	ldr	r3, [r3, #0]
 800ae50:	693a      	ldr	r2, [r7, #16]
 800ae52:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800ae54:	4293      	cmp	r3, r2
 800ae56:	d316      	bcc.n	800ae86 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800ae58:	693b      	ldr	r3, [r7, #16]
 800ae5a:	681a      	ldr	r2, [r3, #0]
 800ae5c:	68fb      	ldr	r3, [r7, #12]
 800ae5e:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800ae62:	429a      	cmp	r2, r3
 800ae64:	d20f      	bcs.n	800ae86 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800ae66:	2200      	movs	r2, #0
 800ae68:	2100      	movs	r1, #0
 800ae6a:	68f8      	ldr	r0, [r7, #12]
 800ae6c:	f001 f8a4 	bl	800bfb8 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800ae70:	68fb      	ldr	r3, [r7, #12]
 800ae72:	2200      	movs	r2, #0
 800ae74:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800ae78:	2300      	movs	r3, #0
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	2100      	movs	r1, #0
 800ae7e:	68f8      	ldr	r0, [r7, #12]
 800ae80:	f001 fd9c 	bl	800c9bc <USBD_LL_PrepareReceive>
 800ae84:	e01c      	b.n	800aec0 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae8c:	b2db      	uxtb	r3, r3
 800ae8e:	2b03      	cmp	r3, #3
 800ae90:	d10f      	bne.n	800aeb2 <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ae98:	68db      	ldr	r3, [r3, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d009      	beq.n	800aeb2 <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	2200      	movs	r2, #0
 800aea2:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aeac:	68db      	ldr	r3, [r3, #12]
 800aeae:	68f8      	ldr	r0, [r7, #12]
 800aeb0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800aeb2:	2180      	movs	r1, #128	@ 0x80
 800aeb4:	68f8      	ldr	r0, [r7, #12]
 800aeb6:	f001 fcd7 	bl	800c868 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800aeba:	68f8      	ldr	r0, [r7, #12]
 800aebc:	f001 f8d2 	bl	800c064 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800aec0:	68fb      	ldr	r3, [r7, #12]
 800aec2:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800aec6:	2b00      	cmp	r3, #0
 800aec8:	d03a      	beq.n	800af40 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800aeca:	68f8      	ldr	r0, [r7, #12]
 800aecc:	f7ff fe30 	bl	800ab30 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800aed0:	68fb      	ldr	r3, [r7, #12]
 800aed2:	2200      	movs	r2, #0
 800aed4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800aed8:	e032      	b.n	800af40 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800aeda:	7afb      	ldrb	r3, [r7, #11]
 800aedc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800aee0:	b2db      	uxtb	r3, r3
 800aee2:	4619      	mov	r1, r3
 800aee4:	68f8      	ldr	r0, [r7, #12]
 800aee6:	f000 f986 	bl	800b1f6 <USBD_CoreFindEP>
 800aeea:	4603      	mov	r3, r0
 800aeec:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800aeee:	7dfb      	ldrb	r3, [r7, #23]
 800aef0:	2bff      	cmp	r3, #255	@ 0xff
 800aef2:	d025      	beq.n	800af40 <USBD_LL_DataInStage+0x16c>
 800aef4:	7dfb      	ldrb	r3, [r7, #23]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d122      	bne.n	800af40 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800af00:	b2db      	uxtb	r3, r3
 800af02:	2b03      	cmp	r3, #3
 800af04:	d11c      	bne.n	800af40 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800af06:	7dfa      	ldrb	r2, [r7, #23]
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	32ae      	adds	r2, #174	@ 0xae
 800af0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af10:	695b      	ldr	r3, [r3, #20]
 800af12:	2b00      	cmp	r3, #0
 800af14:	d014      	beq.n	800af40 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800af16:	7dfa      	ldrb	r2, [r7, #23]
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800af1e:	7dfa      	ldrb	r2, [r7, #23]
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	32ae      	adds	r2, #174	@ 0xae
 800af24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800af28:	695b      	ldr	r3, [r3, #20]
 800af2a:	7afa      	ldrb	r2, [r7, #11]
 800af2c:	4611      	mov	r1, r2
 800af2e:	68f8      	ldr	r0, [r7, #12]
 800af30:	4798      	blx	r3
 800af32:	4603      	mov	r3, r0
 800af34:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800af36:	7dbb      	ldrb	r3, [r7, #22]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d001      	beq.n	800af40 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800af3c:	7dbb      	ldrb	r3, [r7, #22]
 800af3e:	e000      	b.n	800af42 <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800af40:	2300      	movs	r3, #0
}
 800af42:	4618      	mov	r0, r3
 800af44:	3718      	adds	r7, #24
 800af46:	46bd      	mov	sp, r7
 800af48:	bd80      	pop	{r7, pc}

0800af4a <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800af4a:	b580      	push	{r7, lr}
 800af4c:	b084      	sub	sp, #16
 800af4e:	af00      	add	r7, sp, #0
 800af50:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800af52:	2300      	movs	r3, #0
 800af54:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	2201      	movs	r2, #1
 800af5a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800af5e:	687b      	ldr	r3, [r7, #4]
 800af60:	2200      	movs	r2, #0
 800af62:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800af66:	687b      	ldr	r3, [r7, #4]
 800af68:	2200      	movs	r2, #0
 800af6a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	2200      	movs	r2, #0
 800af70:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	2200      	movs	r2, #0
 800af78:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af82:	2b00      	cmp	r3, #0
 800af84:	d014      	beq.n	800afb0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800af86:	687b      	ldr	r3, [r7, #4]
 800af88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af8c:	685b      	ldr	r3, [r3, #4]
 800af8e:	2b00      	cmp	r3, #0
 800af90:	d00e      	beq.n	800afb0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800af98:	685b      	ldr	r3, [r3, #4]
 800af9a:	687a      	ldr	r2, [r7, #4]
 800af9c:	6852      	ldr	r2, [r2, #4]
 800af9e:	b2d2      	uxtb	r2, r2
 800afa0:	4611      	mov	r1, r2
 800afa2:	6878      	ldr	r0, [r7, #4]
 800afa4:	4798      	blx	r3
 800afa6:	4603      	mov	r3, r0
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d001      	beq.n	800afb0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800afac:	2303      	movs	r3, #3
 800afae:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afb0:	2340      	movs	r3, #64	@ 0x40
 800afb2:	2200      	movs	r2, #0
 800afb4:	2100      	movs	r1, #0
 800afb6:	6878      	ldr	r0, [r7, #4]
 800afb8:	f001 fc11 	bl	800c7de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	2201      	movs	r2, #1
 800afc0:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	2240      	movs	r2, #64	@ 0x40
 800afc8:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800afcc:	2340      	movs	r3, #64	@ 0x40
 800afce:	2200      	movs	r2, #0
 800afd0:	2180      	movs	r1, #128	@ 0x80
 800afd2:	6878      	ldr	r0, [r7, #4]
 800afd4:	f001 fc03 	bl	800c7de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	2201      	movs	r2, #1
 800afdc:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	2240      	movs	r2, #64	@ 0x40
 800afe4:	841a      	strh	r2, [r3, #32]

  return ret;
 800afe6:	7bfb      	ldrb	r3, [r7, #15]
}
 800afe8:	4618      	mov	r0, r3
 800afea:	3710      	adds	r7, #16
 800afec:	46bd      	mov	sp, r7
 800afee:	bd80      	pop	{r7, pc}

0800aff0 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b083      	sub	sp, #12
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	6078      	str	r0, [r7, #4]
 800aff8:	460b      	mov	r3, r1
 800affa:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800affc:	687b      	ldr	r3, [r7, #4]
 800affe:	78fa      	ldrb	r2, [r7, #3]
 800b000:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800b002:	2300      	movs	r3, #0
}
 800b004:	4618      	mov	r0, r3
 800b006:	370c      	adds	r7, #12
 800b008:	46bd      	mov	sp, r7
 800b00a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00e:	4770      	bx	lr

0800b010 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800b010:	b480      	push	{r7}
 800b012:	b083      	sub	sp, #12
 800b014:	af00      	add	r7, sp, #0
 800b016:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b01e:	b2db      	uxtb	r3, r3
 800b020:	2b04      	cmp	r3, #4
 800b022:	d006      	beq.n	800b032 <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b02a:	b2da      	uxtb	r2, r3
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	2204      	movs	r2, #4
 800b036:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800b03a:	2300      	movs	r3, #0
}
 800b03c:	4618      	mov	r0, r3
 800b03e:	370c      	adds	r7, #12
 800b040:	46bd      	mov	sp, r7
 800b042:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b046:	4770      	bx	lr

0800b048 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800b048:	b480      	push	{r7}
 800b04a:	b083      	sub	sp, #12
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b056:	b2db      	uxtb	r3, r3
 800b058:	2b04      	cmp	r3, #4
 800b05a:	d106      	bne.n	800b06a <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800b062:	b2da      	uxtb	r2, r3
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800b06a:	2300      	movs	r3, #0
}
 800b06c:	4618      	mov	r0, r3
 800b06e:	370c      	adds	r7, #12
 800b070:	46bd      	mov	sp, r7
 800b072:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b076:	4770      	bx	lr

0800b078 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800b078:	b580      	push	{r7, lr}
 800b07a:	b082      	sub	sp, #8
 800b07c:	af00      	add	r7, sp, #0
 800b07e:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b086:	b2db      	uxtb	r3, r3
 800b088:	2b03      	cmp	r3, #3
 800b08a:	d110      	bne.n	800b0ae <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b092:	2b00      	cmp	r3, #0
 800b094:	d00b      	beq.n	800b0ae <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b09c:	69db      	ldr	r3, [r3, #28]
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d005      	beq.n	800b0ae <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0a8:	69db      	ldr	r3, [r3, #28]
 800b0aa:	6878      	ldr	r0, [r7, #4]
 800b0ac:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800b0ae:	2300      	movs	r3, #0
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3708      	adds	r7, #8
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b082      	sub	sp, #8
 800b0bc:	af00      	add	r7, sp, #0
 800b0be:	6078      	str	r0, [r7, #4]
 800b0c0:	460b      	mov	r3, r1
 800b0c2:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	32ae      	adds	r2, #174	@ 0xae
 800b0ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d101      	bne.n	800b0da <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800b0d6:	2303      	movs	r3, #3
 800b0d8:	e01c      	b.n	800b114 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b0e0:	b2db      	uxtb	r3, r3
 800b0e2:	2b03      	cmp	r3, #3
 800b0e4:	d115      	bne.n	800b112 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800b0e6:	687b      	ldr	r3, [r7, #4]
 800b0e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	32ae      	adds	r2, #174	@ 0xae
 800b0f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	2b00      	cmp	r3, #0
 800b0f8:	d00b      	beq.n	800b112 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b100:	687b      	ldr	r3, [r7, #4]
 800b102:	32ae      	adds	r2, #174	@ 0xae
 800b104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b108:	6a1b      	ldr	r3, [r3, #32]
 800b10a:	78fa      	ldrb	r2, [r7, #3]
 800b10c:	4611      	mov	r1, r2
 800b10e:	6878      	ldr	r0, [r7, #4]
 800b110:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b112:	2300      	movs	r3, #0
}
 800b114:	4618      	mov	r0, r3
 800b116:	3708      	adds	r7, #8
 800b118:	46bd      	mov	sp, r7
 800b11a:	bd80      	pop	{r7, pc}

0800b11c <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800b11c:	b580      	push	{r7, lr}
 800b11e:	b082      	sub	sp, #8
 800b120:	af00      	add	r7, sp, #0
 800b122:	6078      	str	r0, [r7, #4]
 800b124:	460b      	mov	r3, r1
 800b126:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	32ae      	adds	r2, #174	@ 0xae
 800b132:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b136:	2b00      	cmp	r3, #0
 800b138:	d101      	bne.n	800b13e <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800b13a:	2303      	movs	r3, #3
 800b13c:	e01c      	b.n	800b178 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b144:	b2db      	uxtb	r3, r3
 800b146:	2b03      	cmp	r3, #3
 800b148:	d115      	bne.n	800b176 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800b14a:	687b      	ldr	r3, [r7, #4]
 800b14c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	32ae      	adds	r2, #174	@ 0xae
 800b154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b158:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	d00b      	beq.n	800b176 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b164:	687b      	ldr	r3, [r7, #4]
 800b166:	32ae      	adds	r2, #174	@ 0xae
 800b168:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b16c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b16e:	78fa      	ldrb	r2, [r7, #3]
 800b170:	4611      	mov	r1, r2
 800b172:	6878      	ldr	r0, [r7, #4]
 800b174:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800b176:	2300      	movs	r3, #0
}
 800b178:	4618      	mov	r0, r3
 800b17a:	3708      	adds	r7, #8
 800b17c:	46bd      	mov	sp, r7
 800b17e:	bd80      	pop	{r7, pc}

0800b180 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800b180:	b480      	push	{r7}
 800b182:	b083      	sub	sp, #12
 800b184:	af00      	add	r7, sp, #0
 800b186:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800b188:	2300      	movs	r3, #0
}
 800b18a:	4618      	mov	r0, r3
 800b18c:	370c      	adds	r7, #12
 800b18e:	46bd      	mov	sp, r7
 800b190:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b194:	4770      	bx	lr

0800b196 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800b196:	b580      	push	{r7, lr}
 800b198:	b084      	sub	sp, #16
 800b19a:	af00      	add	r7, sp, #0
 800b19c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800b19e:	2300      	movs	r3, #0
 800b1a0:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800b1a2:	687b      	ldr	r3, [r7, #4]
 800b1a4:	2201      	movs	r2, #1
 800b1a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800b1aa:	687b      	ldr	r3, [r7, #4]
 800b1ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1b0:	2b00      	cmp	r3, #0
 800b1b2:	d00e      	beq.n	800b1d2 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800b1b4:	687b      	ldr	r3, [r7, #4]
 800b1b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b1ba:	685b      	ldr	r3, [r3, #4]
 800b1bc:	687a      	ldr	r2, [r7, #4]
 800b1be:	6852      	ldr	r2, [r2, #4]
 800b1c0:	b2d2      	uxtb	r2, r2
 800b1c2:	4611      	mov	r1, r2
 800b1c4:	6878      	ldr	r0, [r7, #4]
 800b1c6:	4798      	blx	r3
 800b1c8:	4603      	mov	r3, r0
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d001      	beq.n	800b1d2 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800b1ce:	2303      	movs	r3, #3
 800b1d0:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800b1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800b1d4:	4618      	mov	r0, r3
 800b1d6:	3710      	adds	r7, #16
 800b1d8:	46bd      	mov	sp, r7
 800b1da:	bd80      	pop	{r7, pc}

0800b1dc <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b1dc:	b480      	push	{r7}
 800b1de:	b083      	sub	sp, #12
 800b1e0:	af00      	add	r7, sp, #0
 800b1e2:	6078      	str	r0, [r7, #4]
 800b1e4:	460b      	mov	r3, r1
 800b1e6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b1e8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	370c      	adds	r7, #12
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr

0800b1f6 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800b1f6:	b480      	push	{r7}
 800b1f8:	b083      	sub	sp, #12
 800b1fa:	af00      	add	r7, sp, #0
 800b1fc:	6078      	str	r0, [r7, #4]
 800b1fe:	460b      	mov	r3, r1
 800b200:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800b202:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800b204:	4618      	mov	r0, r3
 800b206:	370c      	adds	r7, #12
 800b208:	46bd      	mov	sp, r7
 800b20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20e:	4770      	bx	lr

0800b210 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b086      	sub	sp, #24
 800b214:	af00      	add	r7, sp, #0
 800b216:	6078      	str	r0, [r7, #4]
 800b218:	460b      	mov	r3, r1
 800b21a:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800b21c:	687b      	ldr	r3, [r7, #4]
 800b21e:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800b220:	687b      	ldr	r3, [r7, #4]
 800b222:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800b224:	2300      	movs	r3, #0
 800b226:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800b228:	68fb      	ldr	r3, [r7, #12]
 800b22a:	885b      	ldrh	r3, [r3, #2]
 800b22c:	b29b      	uxth	r3, r3
 800b22e:	68fa      	ldr	r2, [r7, #12]
 800b230:	7812      	ldrb	r2, [r2, #0]
 800b232:	4293      	cmp	r3, r2
 800b234:	d91f      	bls.n	800b276 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800b236:	68fb      	ldr	r3, [r7, #12]
 800b238:	781b      	ldrb	r3, [r3, #0]
 800b23a:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800b23c:	e013      	b.n	800b266 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800b23e:	f107 030a 	add.w	r3, r7, #10
 800b242:	4619      	mov	r1, r3
 800b244:	6978      	ldr	r0, [r7, #20]
 800b246:	f000 f81b 	bl	800b280 <USBD_GetNextDesc>
 800b24a:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800b24c:	697b      	ldr	r3, [r7, #20]
 800b24e:	785b      	ldrb	r3, [r3, #1]
 800b250:	2b05      	cmp	r3, #5
 800b252:	d108      	bne.n	800b266 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800b254:	697b      	ldr	r3, [r7, #20]
 800b256:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800b258:	693b      	ldr	r3, [r7, #16]
 800b25a:	789b      	ldrb	r3, [r3, #2]
 800b25c:	78fa      	ldrb	r2, [r7, #3]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d008      	beq.n	800b274 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800b262:	2300      	movs	r3, #0
 800b264:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800b266:	68fb      	ldr	r3, [r7, #12]
 800b268:	885b      	ldrh	r3, [r3, #2]
 800b26a:	b29a      	uxth	r2, r3
 800b26c:	897b      	ldrh	r3, [r7, #10]
 800b26e:	429a      	cmp	r2, r3
 800b270:	d8e5      	bhi.n	800b23e <USBD_GetEpDesc+0x2e>
 800b272:	e000      	b.n	800b276 <USBD_GetEpDesc+0x66>
          break;
 800b274:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800b276:	693b      	ldr	r3, [r7, #16]
}
 800b278:	4618      	mov	r0, r3
 800b27a:	3718      	adds	r7, #24
 800b27c:	46bd      	mov	sp, r7
 800b27e:	bd80      	pop	{r7, pc}

0800b280 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800b280:	b480      	push	{r7}
 800b282:	b085      	sub	sp, #20
 800b284:	af00      	add	r7, sp, #0
 800b286:	6078      	str	r0, [r7, #4]
 800b288:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800b28e:	683b      	ldr	r3, [r7, #0]
 800b290:	881b      	ldrh	r3, [r3, #0]
 800b292:	68fa      	ldr	r2, [r7, #12]
 800b294:	7812      	ldrb	r2, [r2, #0]
 800b296:	4413      	add	r3, r2
 800b298:	b29a      	uxth	r2, r3
 800b29a:	683b      	ldr	r3, [r7, #0]
 800b29c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	781b      	ldrb	r3, [r3, #0]
 800b2a2:	461a      	mov	r2, r3
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	4413      	add	r3, r2
 800b2a8:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800b2aa:	68fb      	ldr	r3, [r7, #12]
}
 800b2ac:	4618      	mov	r0, r3
 800b2ae:	3714      	adds	r7, #20
 800b2b0:	46bd      	mov	sp, r7
 800b2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2b6:	4770      	bx	lr

0800b2b8 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b087      	sub	sp, #28
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	781b      	ldrb	r3, [r3, #0]
 800b2c8:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800b2ca:	697b      	ldr	r3, [r7, #20]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800b2d0:	697b      	ldr	r3, [r7, #20]
 800b2d2:	781b      	ldrb	r3, [r3, #0]
 800b2d4:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800b2d6:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800b2da:	021b      	lsls	r3, r3, #8
 800b2dc:	b21a      	sxth	r2, r3
 800b2de:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800b2e2:	4313      	orrs	r3, r2
 800b2e4:	b21b      	sxth	r3, r3
 800b2e6:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800b2e8:	89fb      	ldrh	r3, [r7, #14]
}
 800b2ea:	4618      	mov	r0, r3
 800b2ec:	371c      	adds	r7, #28
 800b2ee:	46bd      	mov	sp, r7
 800b2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2f4:	4770      	bx	lr
	...

0800b2f8 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b2f8:	b580      	push	{r7, lr}
 800b2fa:	b084      	sub	sp, #16
 800b2fc:	af00      	add	r7, sp, #0
 800b2fe:	6078      	str	r0, [r7, #4]
 800b300:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b302:	2300      	movs	r3, #0
 800b304:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b306:	683b      	ldr	r3, [r7, #0]
 800b308:	781b      	ldrb	r3, [r3, #0]
 800b30a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b30e:	2b40      	cmp	r3, #64	@ 0x40
 800b310:	d005      	beq.n	800b31e <USBD_StdDevReq+0x26>
 800b312:	2b40      	cmp	r3, #64	@ 0x40
 800b314:	d857      	bhi.n	800b3c6 <USBD_StdDevReq+0xce>
 800b316:	2b00      	cmp	r3, #0
 800b318:	d00f      	beq.n	800b33a <USBD_StdDevReq+0x42>
 800b31a:	2b20      	cmp	r3, #32
 800b31c:	d153      	bne.n	800b3c6 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	32ae      	adds	r2, #174	@ 0xae
 800b328:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b32c:	689b      	ldr	r3, [r3, #8]
 800b32e:	6839      	ldr	r1, [r7, #0]
 800b330:	6878      	ldr	r0, [r7, #4]
 800b332:	4798      	blx	r3
 800b334:	4603      	mov	r3, r0
 800b336:	73fb      	strb	r3, [r7, #15]
      break;
 800b338:	e04a      	b.n	800b3d0 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	785b      	ldrb	r3, [r3, #1]
 800b33e:	2b09      	cmp	r3, #9
 800b340:	d83b      	bhi.n	800b3ba <USBD_StdDevReq+0xc2>
 800b342:	a201      	add	r2, pc, #4	@ (adr r2, 800b348 <USBD_StdDevReq+0x50>)
 800b344:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b348:	0800b39d 	.word	0x0800b39d
 800b34c:	0800b3b1 	.word	0x0800b3b1
 800b350:	0800b3bb 	.word	0x0800b3bb
 800b354:	0800b3a7 	.word	0x0800b3a7
 800b358:	0800b3bb 	.word	0x0800b3bb
 800b35c:	0800b37b 	.word	0x0800b37b
 800b360:	0800b371 	.word	0x0800b371
 800b364:	0800b3bb 	.word	0x0800b3bb
 800b368:	0800b393 	.word	0x0800b393
 800b36c:	0800b385 	.word	0x0800b385
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800b370:	6839      	ldr	r1, [r7, #0]
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	f000 fa3e 	bl	800b7f4 <USBD_GetDescriptor>
          break;
 800b378:	e024      	b.n	800b3c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800b37a:	6839      	ldr	r1, [r7, #0]
 800b37c:	6878      	ldr	r0, [r7, #4]
 800b37e:	f000 fba3 	bl	800bac8 <USBD_SetAddress>
          break;
 800b382:	e01f      	b.n	800b3c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800b384:	6839      	ldr	r1, [r7, #0]
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fbe2 	bl	800bb50 <USBD_SetConfig>
 800b38c:	4603      	mov	r3, r0
 800b38e:	73fb      	strb	r3, [r7, #15]
          break;
 800b390:	e018      	b.n	800b3c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800b392:	6839      	ldr	r1, [r7, #0]
 800b394:	6878      	ldr	r0, [r7, #4]
 800b396:	f000 fc85 	bl	800bca4 <USBD_GetConfig>
          break;
 800b39a:	e013      	b.n	800b3c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800b39c:	6839      	ldr	r1, [r7, #0]
 800b39e:	6878      	ldr	r0, [r7, #4]
 800b3a0:	f000 fcb6 	bl	800bd10 <USBD_GetStatus>
          break;
 800b3a4:	e00e      	b.n	800b3c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800b3a6:	6839      	ldr	r1, [r7, #0]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 fce5 	bl	800bd78 <USBD_SetFeature>
          break;
 800b3ae:	e009      	b.n	800b3c4 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800b3b0:	6839      	ldr	r1, [r7, #0]
 800b3b2:	6878      	ldr	r0, [r7, #4]
 800b3b4:	f000 fd09 	bl	800bdca <USBD_ClrFeature>
          break;
 800b3b8:	e004      	b.n	800b3c4 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800b3ba:	6839      	ldr	r1, [r7, #0]
 800b3bc:	6878      	ldr	r0, [r7, #4]
 800b3be:	f000 fd60 	bl	800be82 <USBD_CtlError>
          break;
 800b3c2:	bf00      	nop
      }
      break;
 800b3c4:	e004      	b.n	800b3d0 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800b3c6:	6839      	ldr	r1, [r7, #0]
 800b3c8:	6878      	ldr	r0, [r7, #4]
 800b3ca:	f000 fd5a 	bl	800be82 <USBD_CtlError>
      break;
 800b3ce:	bf00      	nop
  }

  return ret;
 800b3d0:	7bfb      	ldrb	r3, [r7, #15]
}
 800b3d2:	4618      	mov	r0, r3
 800b3d4:	3710      	adds	r7, #16
 800b3d6:	46bd      	mov	sp, r7
 800b3d8:	bd80      	pop	{r7, pc}
 800b3da:	bf00      	nop

0800b3dc <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3dc:	b580      	push	{r7, lr}
 800b3de:	b084      	sub	sp, #16
 800b3e0:	af00      	add	r7, sp, #0
 800b3e2:	6078      	str	r0, [r7, #4]
 800b3e4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3e6:	2300      	movs	r3, #0
 800b3e8:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b3ea:	683b      	ldr	r3, [r7, #0]
 800b3ec:	781b      	ldrb	r3, [r3, #0]
 800b3ee:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b3f2:	2b40      	cmp	r3, #64	@ 0x40
 800b3f4:	d005      	beq.n	800b402 <USBD_StdItfReq+0x26>
 800b3f6:	2b40      	cmp	r3, #64	@ 0x40
 800b3f8:	d852      	bhi.n	800b4a0 <USBD_StdItfReq+0xc4>
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d001      	beq.n	800b402 <USBD_StdItfReq+0x26>
 800b3fe:	2b20      	cmp	r3, #32
 800b400:	d14e      	bne.n	800b4a0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b408:	b2db      	uxtb	r3, r3
 800b40a:	3b01      	subs	r3, #1
 800b40c:	2b02      	cmp	r3, #2
 800b40e:	d840      	bhi.n	800b492 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	889b      	ldrh	r3, [r3, #4]
 800b414:	b2db      	uxtb	r3, r3
 800b416:	2b01      	cmp	r3, #1
 800b418:	d836      	bhi.n	800b488 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800b41a:	683b      	ldr	r3, [r7, #0]
 800b41c:	889b      	ldrh	r3, [r3, #4]
 800b41e:	b2db      	uxtb	r3, r3
 800b420:	4619      	mov	r1, r3
 800b422:	6878      	ldr	r0, [r7, #4]
 800b424:	f7ff feda 	bl	800b1dc <USBD_CoreFindIF>
 800b428:	4603      	mov	r3, r0
 800b42a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b42c:	7bbb      	ldrb	r3, [r7, #14]
 800b42e:	2bff      	cmp	r3, #255	@ 0xff
 800b430:	d01d      	beq.n	800b46e <USBD_StdItfReq+0x92>
 800b432:	7bbb      	ldrb	r3, [r7, #14]
 800b434:	2b00      	cmp	r3, #0
 800b436:	d11a      	bne.n	800b46e <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800b438:	7bba      	ldrb	r2, [r7, #14]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	32ae      	adds	r2, #174	@ 0xae
 800b43e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b442:	689b      	ldr	r3, [r3, #8]
 800b444:	2b00      	cmp	r3, #0
 800b446:	d00f      	beq.n	800b468 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800b448:	7bba      	ldrb	r2, [r7, #14]
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b450:	7bba      	ldrb	r2, [r7, #14]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	32ae      	adds	r2, #174	@ 0xae
 800b456:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b45a:	689b      	ldr	r3, [r3, #8]
 800b45c:	6839      	ldr	r1, [r7, #0]
 800b45e:	6878      	ldr	r0, [r7, #4]
 800b460:	4798      	blx	r3
 800b462:	4603      	mov	r3, r0
 800b464:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b466:	e004      	b.n	800b472 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800b468:	2303      	movs	r3, #3
 800b46a:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800b46c:	e001      	b.n	800b472 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800b46e:	2303      	movs	r3, #3
 800b470:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800b472:	683b      	ldr	r3, [r7, #0]
 800b474:	88db      	ldrh	r3, [r3, #6]
 800b476:	2b00      	cmp	r3, #0
 800b478:	d110      	bne.n	800b49c <USBD_StdItfReq+0xc0>
 800b47a:	7bfb      	ldrb	r3, [r7, #15]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10d      	bne.n	800b49c <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800b480:	6878      	ldr	r0, [r7, #4]
 800b482:	f000 fddc 	bl	800c03e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800b486:	e009      	b.n	800b49c <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800b488:	6839      	ldr	r1, [r7, #0]
 800b48a:	6878      	ldr	r0, [r7, #4]
 800b48c:	f000 fcf9 	bl	800be82 <USBD_CtlError>
          break;
 800b490:	e004      	b.n	800b49c <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800b492:	6839      	ldr	r1, [r7, #0]
 800b494:	6878      	ldr	r0, [r7, #4]
 800b496:	f000 fcf4 	bl	800be82 <USBD_CtlError>
          break;
 800b49a:	e000      	b.n	800b49e <USBD_StdItfReq+0xc2>
          break;
 800b49c:	bf00      	nop
      }
      break;
 800b49e:	e004      	b.n	800b4aa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800b4a0:	6839      	ldr	r1, [r7, #0]
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f000 fced 	bl	800be82 <USBD_CtlError>
      break;
 800b4a8:	bf00      	nop
  }

  return ret;
 800b4aa:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	3710      	adds	r7, #16
 800b4b0:	46bd      	mov	sp, r7
 800b4b2:	bd80      	pop	{r7, pc}

0800b4b4 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b4b4:	b580      	push	{r7, lr}
 800b4b6:	b084      	sub	sp, #16
 800b4b8:	af00      	add	r7, sp, #0
 800b4ba:	6078      	str	r0, [r7, #4]
 800b4bc:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800b4be:	2300      	movs	r3, #0
 800b4c0:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800b4c2:	683b      	ldr	r3, [r7, #0]
 800b4c4:	889b      	ldrh	r3, [r3, #4]
 800b4c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800b4c8:	683b      	ldr	r3, [r7, #0]
 800b4ca:	781b      	ldrb	r3, [r3, #0]
 800b4cc:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800b4d0:	2b40      	cmp	r3, #64	@ 0x40
 800b4d2:	d007      	beq.n	800b4e4 <USBD_StdEPReq+0x30>
 800b4d4:	2b40      	cmp	r3, #64	@ 0x40
 800b4d6:	f200 8181 	bhi.w	800b7dc <USBD_StdEPReq+0x328>
 800b4da:	2b00      	cmp	r3, #0
 800b4dc:	d02a      	beq.n	800b534 <USBD_StdEPReq+0x80>
 800b4de:	2b20      	cmp	r3, #32
 800b4e0:	f040 817c 	bne.w	800b7dc <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800b4e4:	7bbb      	ldrb	r3, [r7, #14]
 800b4e6:	4619      	mov	r1, r3
 800b4e8:	6878      	ldr	r0, [r7, #4]
 800b4ea:	f7ff fe84 	bl	800b1f6 <USBD_CoreFindEP>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b4f2:	7b7b      	ldrb	r3, [r7, #13]
 800b4f4:	2bff      	cmp	r3, #255	@ 0xff
 800b4f6:	f000 8176 	beq.w	800b7e6 <USBD_StdEPReq+0x332>
 800b4fa:	7b7b      	ldrb	r3, [r7, #13]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	f040 8172 	bne.w	800b7e6 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800b502:	7b7a      	ldrb	r2, [r7, #13]
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800b50a:	7b7a      	ldrb	r2, [r7, #13]
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	32ae      	adds	r2, #174	@ 0xae
 800b510:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b514:	689b      	ldr	r3, [r3, #8]
 800b516:	2b00      	cmp	r3, #0
 800b518:	f000 8165 	beq.w	800b7e6 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800b51c:	7b7a      	ldrb	r2, [r7, #13]
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	32ae      	adds	r2, #174	@ 0xae
 800b522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	6839      	ldr	r1, [r7, #0]
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	4798      	blx	r3
 800b52e:	4603      	mov	r3, r0
 800b530:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800b532:	e158      	b.n	800b7e6 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800b534:	683b      	ldr	r3, [r7, #0]
 800b536:	785b      	ldrb	r3, [r3, #1]
 800b538:	2b03      	cmp	r3, #3
 800b53a:	d008      	beq.n	800b54e <USBD_StdEPReq+0x9a>
 800b53c:	2b03      	cmp	r3, #3
 800b53e:	f300 8147 	bgt.w	800b7d0 <USBD_StdEPReq+0x31c>
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 809b 	beq.w	800b67e <USBD_StdEPReq+0x1ca>
 800b548:	2b01      	cmp	r3, #1
 800b54a:	d03c      	beq.n	800b5c6 <USBD_StdEPReq+0x112>
 800b54c:	e140      	b.n	800b7d0 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b554:	b2db      	uxtb	r3, r3
 800b556:	2b02      	cmp	r3, #2
 800b558:	d002      	beq.n	800b560 <USBD_StdEPReq+0xac>
 800b55a:	2b03      	cmp	r3, #3
 800b55c:	d016      	beq.n	800b58c <USBD_StdEPReq+0xd8>
 800b55e:	e02c      	b.n	800b5ba <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b560:	7bbb      	ldrb	r3, [r7, #14]
 800b562:	2b00      	cmp	r3, #0
 800b564:	d00d      	beq.n	800b582 <USBD_StdEPReq+0xce>
 800b566:	7bbb      	ldrb	r3, [r7, #14]
 800b568:	2b80      	cmp	r3, #128	@ 0x80
 800b56a:	d00a      	beq.n	800b582 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b56c:	7bbb      	ldrb	r3, [r7, #14]
 800b56e:	4619      	mov	r1, r3
 800b570:	6878      	ldr	r0, [r7, #4]
 800b572:	f001 f979 	bl	800c868 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b576:	2180      	movs	r1, #128	@ 0x80
 800b578:	6878      	ldr	r0, [r7, #4]
 800b57a:	f001 f975 	bl	800c868 <USBD_LL_StallEP>
 800b57e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b580:	e020      	b.n	800b5c4 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800b582:	6839      	ldr	r1, [r7, #0]
 800b584:	6878      	ldr	r0, [r7, #4]
 800b586:	f000 fc7c 	bl	800be82 <USBD_CtlError>
              break;
 800b58a:	e01b      	b.n	800b5c4 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	885b      	ldrh	r3, [r3, #2]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d10e      	bne.n	800b5b2 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800b594:	7bbb      	ldrb	r3, [r7, #14]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d00b      	beq.n	800b5b2 <USBD_StdEPReq+0xfe>
 800b59a:	7bbb      	ldrb	r3, [r7, #14]
 800b59c:	2b80      	cmp	r3, #128	@ 0x80
 800b59e:	d008      	beq.n	800b5b2 <USBD_StdEPReq+0xfe>
 800b5a0:	683b      	ldr	r3, [r7, #0]
 800b5a2:	88db      	ldrh	r3, [r3, #6]
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d104      	bne.n	800b5b2 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5a8:	7bbb      	ldrb	r3, [r7, #14]
 800b5aa:	4619      	mov	r1, r3
 800b5ac:	6878      	ldr	r0, [r7, #4]
 800b5ae:	f001 f95b 	bl	800c868 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800b5b2:	6878      	ldr	r0, [r7, #4]
 800b5b4:	f000 fd43 	bl	800c03e <USBD_CtlSendStatus>

              break;
 800b5b8:	e004      	b.n	800b5c4 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800b5ba:	6839      	ldr	r1, [r7, #0]
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f000 fc60 	bl	800be82 <USBD_CtlError>
              break;
 800b5c2:	bf00      	nop
          }
          break;
 800b5c4:	e109      	b.n	800b7da <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800b5c6:	687b      	ldr	r3, [r7, #4]
 800b5c8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b5cc:	b2db      	uxtb	r3, r3
 800b5ce:	2b02      	cmp	r3, #2
 800b5d0:	d002      	beq.n	800b5d8 <USBD_StdEPReq+0x124>
 800b5d2:	2b03      	cmp	r3, #3
 800b5d4:	d016      	beq.n	800b604 <USBD_StdEPReq+0x150>
 800b5d6:	e04b      	b.n	800b670 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b5d8:	7bbb      	ldrb	r3, [r7, #14]
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d00d      	beq.n	800b5fa <USBD_StdEPReq+0x146>
 800b5de:	7bbb      	ldrb	r3, [r7, #14]
 800b5e0:	2b80      	cmp	r3, #128	@ 0x80
 800b5e2:	d00a      	beq.n	800b5fa <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800b5e4:	7bbb      	ldrb	r3, [r7, #14]
 800b5e6:	4619      	mov	r1, r3
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f001 f93d 	bl	800c868 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800b5ee:	2180      	movs	r1, #128	@ 0x80
 800b5f0:	6878      	ldr	r0, [r7, #4]
 800b5f2:	f001 f939 	bl	800c868 <USBD_LL_StallEP>
 800b5f6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800b5f8:	e040      	b.n	800b67c <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800b5fa:	6839      	ldr	r1, [r7, #0]
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	f000 fc40 	bl	800be82 <USBD_CtlError>
              break;
 800b602:	e03b      	b.n	800b67c <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800b604:	683b      	ldr	r3, [r7, #0]
 800b606:	885b      	ldrh	r3, [r3, #2]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d136      	bne.n	800b67a <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800b60c:	7bbb      	ldrb	r3, [r7, #14]
 800b60e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b612:	2b00      	cmp	r3, #0
 800b614:	d004      	beq.n	800b620 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800b616:	7bbb      	ldrb	r3, [r7, #14]
 800b618:	4619      	mov	r1, r3
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f001 f943 	bl	800c8a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800b620:	6878      	ldr	r0, [r7, #4]
 800b622:	f000 fd0c 	bl	800c03e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800b626:	7bbb      	ldrb	r3, [r7, #14]
 800b628:	4619      	mov	r1, r3
 800b62a:	6878      	ldr	r0, [r7, #4]
 800b62c:	f7ff fde3 	bl	800b1f6 <USBD_CoreFindEP>
 800b630:	4603      	mov	r3, r0
 800b632:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800b634:	7b7b      	ldrb	r3, [r7, #13]
 800b636:	2bff      	cmp	r3, #255	@ 0xff
 800b638:	d01f      	beq.n	800b67a <USBD_StdEPReq+0x1c6>
 800b63a:	7b7b      	ldrb	r3, [r7, #13]
 800b63c:	2b00      	cmp	r3, #0
 800b63e:	d11c      	bne.n	800b67a <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800b640:	7b7a      	ldrb	r2, [r7, #13]
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800b648:	7b7a      	ldrb	r2, [r7, #13]
 800b64a:	687b      	ldr	r3, [r7, #4]
 800b64c:	32ae      	adds	r2, #174	@ 0xae
 800b64e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b652:	689b      	ldr	r3, [r3, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d010      	beq.n	800b67a <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800b658:	7b7a      	ldrb	r2, [r7, #13]
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	32ae      	adds	r2, #174	@ 0xae
 800b65e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b662:	689b      	ldr	r3, [r3, #8]
 800b664:	6839      	ldr	r1, [r7, #0]
 800b666:	6878      	ldr	r0, [r7, #4]
 800b668:	4798      	blx	r3
 800b66a:	4603      	mov	r3, r0
 800b66c:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800b66e:	e004      	b.n	800b67a <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800b670:	6839      	ldr	r1, [r7, #0]
 800b672:	6878      	ldr	r0, [r7, #4]
 800b674:	f000 fc05 	bl	800be82 <USBD_CtlError>
              break;
 800b678:	e000      	b.n	800b67c <USBD_StdEPReq+0x1c8>
              break;
 800b67a:	bf00      	nop
          }
          break;
 800b67c:	e0ad      	b.n	800b7da <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b684:	b2db      	uxtb	r3, r3
 800b686:	2b02      	cmp	r3, #2
 800b688:	d002      	beq.n	800b690 <USBD_StdEPReq+0x1dc>
 800b68a:	2b03      	cmp	r3, #3
 800b68c:	d033      	beq.n	800b6f6 <USBD_StdEPReq+0x242>
 800b68e:	e099      	b.n	800b7c4 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800b690:	7bbb      	ldrb	r3, [r7, #14]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d007      	beq.n	800b6a6 <USBD_StdEPReq+0x1f2>
 800b696:	7bbb      	ldrb	r3, [r7, #14]
 800b698:	2b80      	cmp	r3, #128	@ 0x80
 800b69a:	d004      	beq.n	800b6a6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800b69c:	6839      	ldr	r1, [r7, #0]
 800b69e:	6878      	ldr	r0, [r7, #4]
 800b6a0:	f000 fbef 	bl	800be82 <USBD_CtlError>
                break;
 800b6a4:	e093      	b.n	800b7ce <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6a6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6aa:	2b00      	cmp	r3, #0
 800b6ac:	da0b      	bge.n	800b6c6 <USBD_StdEPReq+0x212>
 800b6ae:	7bbb      	ldrb	r3, [r7, #14]
 800b6b0:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b6b4:	4613      	mov	r3, r2
 800b6b6:	009b      	lsls	r3, r3, #2
 800b6b8:	4413      	add	r3, r2
 800b6ba:	009b      	lsls	r3, r3, #2
 800b6bc:	3310      	adds	r3, #16
 800b6be:	687a      	ldr	r2, [r7, #4]
 800b6c0:	4413      	add	r3, r2
 800b6c2:	3304      	adds	r3, #4
 800b6c4:	e00b      	b.n	800b6de <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b6c6:	7bbb      	ldrb	r3, [r7, #14]
 800b6c8:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b6cc:	4613      	mov	r3, r2
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	4413      	add	r3, r2
 800b6d2:	009b      	lsls	r3, r3, #2
 800b6d4:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b6d8:	687a      	ldr	r2, [r7, #4]
 800b6da:	4413      	add	r3, r2
 800b6dc:	3304      	adds	r3, #4
 800b6de:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800b6e0:	68bb      	ldr	r3, [r7, #8]
 800b6e2:	2200      	movs	r2, #0
 800b6e4:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	330e      	adds	r3, #14
 800b6ea:	2202      	movs	r2, #2
 800b6ec:	4619      	mov	r1, r3
 800b6ee:	6878      	ldr	r0, [r7, #4]
 800b6f0:	f000 fc44 	bl	800bf7c <USBD_CtlSendData>
              break;
 800b6f4:	e06b      	b.n	800b7ce <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800b6f6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b6fa:	2b00      	cmp	r3, #0
 800b6fc:	da11      	bge.n	800b722 <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800b6fe:	7bbb      	ldrb	r3, [r7, #14]
 800b700:	f003 020f 	and.w	r2, r3, #15
 800b704:	6879      	ldr	r1, [r7, #4]
 800b706:	4613      	mov	r3, r2
 800b708:	009b      	lsls	r3, r3, #2
 800b70a:	4413      	add	r3, r2
 800b70c:	009b      	lsls	r3, r3, #2
 800b70e:	440b      	add	r3, r1
 800b710:	3323      	adds	r3, #35	@ 0x23
 800b712:	781b      	ldrb	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d117      	bne.n	800b748 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b718:	6839      	ldr	r1, [r7, #0]
 800b71a:	6878      	ldr	r0, [r7, #4]
 800b71c:	f000 fbb1 	bl	800be82 <USBD_CtlError>
                  break;
 800b720:	e055      	b.n	800b7ce <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800b722:	7bbb      	ldrb	r3, [r7, #14]
 800b724:	f003 020f 	and.w	r2, r3, #15
 800b728:	6879      	ldr	r1, [r7, #4]
 800b72a:	4613      	mov	r3, r2
 800b72c:	009b      	lsls	r3, r3, #2
 800b72e:	4413      	add	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	440b      	add	r3, r1
 800b734:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800b738:	781b      	ldrb	r3, [r3, #0]
 800b73a:	2b00      	cmp	r3, #0
 800b73c:	d104      	bne.n	800b748 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800b73e:	6839      	ldr	r1, [r7, #0]
 800b740:	6878      	ldr	r0, [r7, #4]
 800b742:	f000 fb9e 	bl	800be82 <USBD_CtlError>
                  break;
 800b746:	e042      	b.n	800b7ce <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b748:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b74c:	2b00      	cmp	r3, #0
 800b74e:	da0b      	bge.n	800b768 <USBD_StdEPReq+0x2b4>
 800b750:	7bbb      	ldrb	r3, [r7, #14]
 800b752:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800b756:	4613      	mov	r3, r2
 800b758:	009b      	lsls	r3, r3, #2
 800b75a:	4413      	add	r3, r2
 800b75c:	009b      	lsls	r3, r3, #2
 800b75e:	3310      	adds	r3, #16
 800b760:	687a      	ldr	r2, [r7, #4]
 800b762:	4413      	add	r3, r2
 800b764:	3304      	adds	r3, #4
 800b766:	e00b      	b.n	800b780 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800b768:	7bbb      	ldrb	r3, [r7, #14]
 800b76a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800b76e:	4613      	mov	r3, r2
 800b770:	009b      	lsls	r3, r3, #2
 800b772:	4413      	add	r3, r2
 800b774:	009b      	lsls	r3, r3, #2
 800b776:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800b77a:	687a      	ldr	r2, [r7, #4]
 800b77c:	4413      	add	r3, r2
 800b77e:	3304      	adds	r3, #4
 800b780:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800b782:	7bbb      	ldrb	r3, [r7, #14]
 800b784:	2b00      	cmp	r3, #0
 800b786:	d002      	beq.n	800b78e <USBD_StdEPReq+0x2da>
 800b788:	7bbb      	ldrb	r3, [r7, #14]
 800b78a:	2b80      	cmp	r3, #128	@ 0x80
 800b78c:	d103      	bne.n	800b796 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800b78e:	68bb      	ldr	r3, [r7, #8]
 800b790:	2200      	movs	r2, #0
 800b792:	739a      	strb	r2, [r3, #14]
 800b794:	e00e      	b.n	800b7b4 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800b796:	7bbb      	ldrb	r3, [r7, #14]
 800b798:	4619      	mov	r1, r3
 800b79a:	6878      	ldr	r0, [r7, #4]
 800b79c:	f001 f8a2 	bl	800c8e4 <USBD_LL_IsStallEP>
 800b7a0:	4603      	mov	r3, r0
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d003      	beq.n	800b7ae <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b7a6:	68bb      	ldr	r3, [r7, #8]
 800b7a8:	2201      	movs	r2, #1
 800b7aa:	739a      	strb	r2, [r3, #14]
 800b7ac:	e002      	b.n	800b7b4 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b7b4:	68bb      	ldr	r3, [r7, #8]
 800b7b6:	330e      	adds	r3, #14
 800b7b8:	2202      	movs	r2, #2
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	6878      	ldr	r0, [r7, #4]
 800b7be:	f000 fbdd 	bl	800bf7c <USBD_CtlSendData>
              break;
 800b7c2:	e004      	b.n	800b7ce <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b7c4:	6839      	ldr	r1, [r7, #0]
 800b7c6:	6878      	ldr	r0, [r7, #4]
 800b7c8:	f000 fb5b 	bl	800be82 <USBD_CtlError>
              break;
 800b7cc:	bf00      	nop
          }
          break;
 800b7ce:	e004      	b.n	800b7da <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b7d0:	6839      	ldr	r1, [r7, #0]
 800b7d2:	6878      	ldr	r0, [r7, #4]
 800b7d4:	f000 fb55 	bl	800be82 <USBD_CtlError>
          break;
 800b7d8:	bf00      	nop
      }
      break;
 800b7da:	e005      	b.n	800b7e8 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b7dc:	6839      	ldr	r1, [r7, #0]
 800b7de:	6878      	ldr	r0, [r7, #4]
 800b7e0:	f000 fb4f 	bl	800be82 <USBD_CtlError>
      break;
 800b7e4:	e000      	b.n	800b7e8 <USBD_StdEPReq+0x334>
      break;
 800b7e6:	bf00      	nop
  }

  return ret;
 800b7e8:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7ea:	4618      	mov	r0, r3
 800b7ec:	3710      	adds	r7, #16
 800b7ee:	46bd      	mov	sp, r7
 800b7f0:	bd80      	pop	{r7, pc}
	...

0800b7f4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b084      	sub	sp, #16
 800b7f8:	af00      	add	r7, sp, #0
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b7fe:	2300      	movs	r3, #0
 800b800:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b802:	2300      	movs	r3, #0
 800b804:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b806:	2300      	movs	r3, #0
 800b808:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b80a:	683b      	ldr	r3, [r7, #0]
 800b80c:	885b      	ldrh	r3, [r3, #2]
 800b80e:	0a1b      	lsrs	r3, r3, #8
 800b810:	b29b      	uxth	r3, r3
 800b812:	3b01      	subs	r3, #1
 800b814:	2b06      	cmp	r3, #6
 800b816:	f200 8128 	bhi.w	800ba6a <USBD_GetDescriptor+0x276>
 800b81a:	a201      	add	r2, pc, #4	@ (adr r2, 800b820 <USBD_GetDescriptor+0x2c>)
 800b81c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b820:	0800b83d 	.word	0x0800b83d
 800b824:	0800b855 	.word	0x0800b855
 800b828:	0800b895 	.word	0x0800b895
 800b82c:	0800ba6b 	.word	0x0800ba6b
 800b830:	0800ba6b 	.word	0x0800ba6b
 800b834:	0800ba0b 	.word	0x0800ba0b
 800b838:	0800ba37 	.word	0x0800ba37
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	687a      	ldr	r2, [r7, #4]
 800b846:	7c12      	ldrb	r2, [r2, #16]
 800b848:	f107 0108 	add.w	r1, r7, #8
 800b84c:	4610      	mov	r0, r2
 800b84e:	4798      	blx	r3
 800b850:	60f8      	str	r0, [r7, #12]
      break;
 800b852:	e112      	b.n	800ba7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	7c1b      	ldrb	r3, [r3, #16]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10d      	bne.n	800b878 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b864:	f107 0208 	add.w	r2, r7, #8
 800b868:	4610      	mov	r0, r2
 800b86a:	4798      	blx	r3
 800b86c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b86e:	68fb      	ldr	r3, [r7, #12]
 800b870:	3301      	adds	r3, #1
 800b872:	2202      	movs	r2, #2
 800b874:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b876:	e100      	b.n	800ba7a <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b87e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b880:	f107 0208 	add.w	r2, r7, #8
 800b884:	4610      	mov	r0, r2
 800b886:	4798      	blx	r3
 800b888:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	3301      	adds	r3, #1
 800b88e:	2202      	movs	r2, #2
 800b890:	701a      	strb	r2, [r3, #0]
      break;
 800b892:	e0f2      	b.n	800ba7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b894:	683b      	ldr	r3, [r7, #0]
 800b896:	885b      	ldrh	r3, [r3, #2]
 800b898:	b2db      	uxtb	r3, r3
 800b89a:	2b05      	cmp	r3, #5
 800b89c:	f200 80ac 	bhi.w	800b9f8 <USBD_GetDescriptor+0x204>
 800b8a0:	a201      	add	r2, pc, #4	@ (adr r2, 800b8a8 <USBD_GetDescriptor+0xb4>)
 800b8a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8a6:	bf00      	nop
 800b8a8:	0800b8c1 	.word	0x0800b8c1
 800b8ac:	0800b8f5 	.word	0x0800b8f5
 800b8b0:	0800b929 	.word	0x0800b929
 800b8b4:	0800b95d 	.word	0x0800b95d
 800b8b8:	0800b991 	.word	0x0800b991
 800b8bc:	0800b9c5 	.word	0x0800b9c5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d00b      	beq.n	800b8e4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8d2:	685b      	ldr	r3, [r3, #4]
 800b8d4:	687a      	ldr	r2, [r7, #4]
 800b8d6:	7c12      	ldrb	r2, [r2, #16]
 800b8d8:	f107 0108 	add.w	r1, r7, #8
 800b8dc:	4610      	mov	r0, r2
 800b8de:	4798      	blx	r3
 800b8e0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b8e2:	e091      	b.n	800ba08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b8e4:	6839      	ldr	r1, [r7, #0]
 800b8e6:	6878      	ldr	r0, [r7, #4]
 800b8e8:	f000 facb 	bl	800be82 <USBD_CtlError>
            err++;
 800b8ec:	7afb      	ldrb	r3, [r7, #11]
 800b8ee:	3301      	adds	r3, #1
 800b8f0:	72fb      	strb	r3, [r7, #11]
          break;
 800b8f2:	e089      	b.n	800ba08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b8f4:	687b      	ldr	r3, [r7, #4]
 800b8f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b8fa:	689b      	ldr	r3, [r3, #8]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d00b      	beq.n	800b918 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b900:	687b      	ldr	r3, [r7, #4]
 800b902:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	687a      	ldr	r2, [r7, #4]
 800b90a:	7c12      	ldrb	r2, [r2, #16]
 800b90c:	f107 0108 	add.w	r1, r7, #8
 800b910:	4610      	mov	r0, r2
 800b912:	4798      	blx	r3
 800b914:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b916:	e077      	b.n	800ba08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b918:	6839      	ldr	r1, [r7, #0]
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	f000 fab1 	bl	800be82 <USBD_CtlError>
            err++;
 800b920:	7afb      	ldrb	r3, [r7, #11]
 800b922:	3301      	adds	r3, #1
 800b924:	72fb      	strb	r3, [r7, #11]
          break;
 800b926:	e06f      	b.n	800ba08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b92e:	68db      	ldr	r3, [r3, #12]
 800b930:	2b00      	cmp	r3, #0
 800b932:	d00b      	beq.n	800b94c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b93a:	68db      	ldr	r3, [r3, #12]
 800b93c:	687a      	ldr	r2, [r7, #4]
 800b93e:	7c12      	ldrb	r2, [r2, #16]
 800b940:	f107 0108 	add.w	r1, r7, #8
 800b944:	4610      	mov	r0, r2
 800b946:	4798      	blx	r3
 800b948:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b94a:	e05d      	b.n	800ba08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b94c:	6839      	ldr	r1, [r7, #0]
 800b94e:	6878      	ldr	r0, [r7, #4]
 800b950:	f000 fa97 	bl	800be82 <USBD_CtlError>
            err++;
 800b954:	7afb      	ldrb	r3, [r7, #11]
 800b956:	3301      	adds	r3, #1
 800b958:	72fb      	strb	r3, [r7, #11]
          break;
 800b95a:	e055      	b.n	800ba08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b95c:	687b      	ldr	r3, [r7, #4]
 800b95e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b962:	691b      	ldr	r3, [r3, #16]
 800b964:	2b00      	cmp	r3, #0
 800b966:	d00b      	beq.n	800b980 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b96e:	691b      	ldr	r3, [r3, #16]
 800b970:	687a      	ldr	r2, [r7, #4]
 800b972:	7c12      	ldrb	r2, [r2, #16]
 800b974:	f107 0108 	add.w	r1, r7, #8
 800b978:	4610      	mov	r0, r2
 800b97a:	4798      	blx	r3
 800b97c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b97e:	e043      	b.n	800ba08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b980:	6839      	ldr	r1, [r7, #0]
 800b982:	6878      	ldr	r0, [r7, #4]
 800b984:	f000 fa7d 	bl	800be82 <USBD_CtlError>
            err++;
 800b988:	7afb      	ldrb	r3, [r7, #11]
 800b98a:	3301      	adds	r3, #1
 800b98c:	72fb      	strb	r3, [r7, #11]
          break;
 800b98e:	e03b      	b.n	800ba08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b996:	695b      	ldr	r3, [r3, #20]
 800b998:	2b00      	cmp	r3, #0
 800b99a:	d00b      	beq.n	800b9b4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9a2:	695b      	ldr	r3, [r3, #20]
 800b9a4:	687a      	ldr	r2, [r7, #4]
 800b9a6:	7c12      	ldrb	r2, [r2, #16]
 800b9a8:	f107 0108 	add.w	r1, r7, #8
 800b9ac:	4610      	mov	r0, r2
 800b9ae:	4798      	blx	r3
 800b9b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9b2:	e029      	b.n	800ba08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9b4:	6839      	ldr	r1, [r7, #0]
 800b9b6:	6878      	ldr	r0, [r7, #4]
 800b9b8:	f000 fa63 	bl	800be82 <USBD_CtlError>
            err++;
 800b9bc:	7afb      	ldrb	r3, [r7, #11]
 800b9be:	3301      	adds	r3, #1
 800b9c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b9c2:	e021      	b.n	800ba08 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9ca:	699b      	ldr	r3, [r3, #24]
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d00b      	beq.n	800b9e8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b9d6:	699b      	ldr	r3, [r3, #24]
 800b9d8:	687a      	ldr	r2, [r7, #4]
 800b9da:	7c12      	ldrb	r2, [r2, #16]
 800b9dc:	f107 0108 	add.w	r1, r7, #8
 800b9e0:	4610      	mov	r0, r2
 800b9e2:	4798      	blx	r3
 800b9e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b9e6:	e00f      	b.n	800ba08 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b9e8:	6839      	ldr	r1, [r7, #0]
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 fa49 	bl	800be82 <USBD_CtlError>
            err++;
 800b9f0:	7afb      	ldrb	r3, [r7, #11]
 800b9f2:	3301      	adds	r3, #1
 800b9f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b9f6:	e007      	b.n	800ba08 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b9f8:	6839      	ldr	r1, [r7, #0]
 800b9fa:	6878      	ldr	r0, [r7, #4]
 800b9fc:	f000 fa41 	bl	800be82 <USBD_CtlError>
          err++;
 800ba00:	7afb      	ldrb	r3, [r7, #11]
 800ba02:	3301      	adds	r3, #1
 800ba04:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800ba06:	bf00      	nop
      }
      break;
 800ba08:	e037      	b.n	800ba7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	7c1b      	ldrb	r3, [r3, #16]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d109      	bne.n	800ba26 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800ba1a:	f107 0208 	add.w	r2, r7, #8
 800ba1e:	4610      	mov	r0, r2
 800ba20:	4798      	blx	r3
 800ba22:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba24:	e029      	b.n	800ba7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba26:	6839      	ldr	r1, [r7, #0]
 800ba28:	6878      	ldr	r0, [r7, #4]
 800ba2a:	f000 fa2a 	bl	800be82 <USBD_CtlError>
        err++;
 800ba2e:	7afb      	ldrb	r3, [r7, #11]
 800ba30:	3301      	adds	r3, #1
 800ba32:	72fb      	strb	r3, [r7, #11]
      break;
 800ba34:	e021      	b.n	800ba7a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800ba36:	687b      	ldr	r3, [r7, #4]
 800ba38:	7c1b      	ldrb	r3, [r3, #16]
 800ba3a:	2b00      	cmp	r3, #0
 800ba3c:	d10d      	bne.n	800ba5a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800ba44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba46:	f107 0208 	add.w	r2, r7, #8
 800ba4a:	4610      	mov	r0, r2
 800ba4c:	4798      	blx	r3
 800ba4e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	3301      	adds	r3, #1
 800ba54:	2207      	movs	r2, #7
 800ba56:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800ba58:	e00f      	b.n	800ba7a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800ba5a:	6839      	ldr	r1, [r7, #0]
 800ba5c:	6878      	ldr	r0, [r7, #4]
 800ba5e:	f000 fa10 	bl	800be82 <USBD_CtlError>
        err++;
 800ba62:	7afb      	ldrb	r3, [r7, #11]
 800ba64:	3301      	adds	r3, #1
 800ba66:	72fb      	strb	r3, [r7, #11]
      break;
 800ba68:	e007      	b.n	800ba7a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800ba6a:	6839      	ldr	r1, [r7, #0]
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f000 fa08 	bl	800be82 <USBD_CtlError>
      err++;
 800ba72:	7afb      	ldrb	r3, [r7, #11]
 800ba74:	3301      	adds	r3, #1
 800ba76:	72fb      	strb	r3, [r7, #11]
      break;
 800ba78:	bf00      	nop
  }

  if (err != 0U)
 800ba7a:	7afb      	ldrb	r3, [r7, #11]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d11e      	bne.n	800babe <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800ba80:	683b      	ldr	r3, [r7, #0]
 800ba82:	88db      	ldrh	r3, [r3, #6]
 800ba84:	2b00      	cmp	r3, #0
 800ba86:	d016      	beq.n	800bab6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800ba88:	893b      	ldrh	r3, [r7, #8]
 800ba8a:	2b00      	cmp	r3, #0
 800ba8c:	d00e      	beq.n	800baac <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800ba8e:	683b      	ldr	r3, [r7, #0]
 800ba90:	88da      	ldrh	r2, [r3, #6]
 800ba92:	893b      	ldrh	r3, [r7, #8]
 800ba94:	4293      	cmp	r3, r2
 800ba96:	bf28      	it	cs
 800ba98:	4613      	movcs	r3, r2
 800ba9a:	b29b      	uxth	r3, r3
 800ba9c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800ba9e:	893b      	ldrh	r3, [r7, #8]
 800baa0:	461a      	mov	r2, r3
 800baa2:	68f9      	ldr	r1, [r7, #12]
 800baa4:	6878      	ldr	r0, [r7, #4]
 800baa6:	f000 fa69 	bl	800bf7c <USBD_CtlSendData>
 800baaa:	e009      	b.n	800bac0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800baac:	6839      	ldr	r1, [r7, #0]
 800baae:	6878      	ldr	r0, [r7, #4]
 800bab0:	f000 f9e7 	bl	800be82 <USBD_CtlError>
 800bab4:	e004      	b.n	800bac0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800bab6:	6878      	ldr	r0, [r7, #4]
 800bab8:	f000 fac1 	bl	800c03e <USBD_CtlSendStatus>
 800babc:	e000      	b.n	800bac0 <USBD_GetDescriptor+0x2cc>
    return;
 800babe:	bf00      	nop
  }
}
 800bac0:	3710      	adds	r7, #16
 800bac2:	46bd      	mov	sp, r7
 800bac4:	bd80      	pop	{r7, pc}
 800bac6:	bf00      	nop

0800bac8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bac8:	b580      	push	{r7, lr}
 800baca:	b084      	sub	sp, #16
 800bacc:	af00      	add	r7, sp, #0
 800bace:	6078      	str	r0, [r7, #4]
 800bad0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800bad2:	683b      	ldr	r3, [r7, #0]
 800bad4:	889b      	ldrh	r3, [r3, #4]
 800bad6:	2b00      	cmp	r3, #0
 800bad8:	d131      	bne.n	800bb3e <USBD_SetAddress+0x76>
 800bada:	683b      	ldr	r3, [r7, #0]
 800badc:	88db      	ldrh	r3, [r3, #6]
 800bade:	2b00      	cmp	r3, #0
 800bae0:	d12d      	bne.n	800bb3e <USBD_SetAddress+0x76>
 800bae2:	683b      	ldr	r3, [r7, #0]
 800bae4:	885b      	ldrh	r3, [r3, #2]
 800bae6:	2b7f      	cmp	r3, #127	@ 0x7f
 800bae8:	d829      	bhi.n	800bb3e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800baea:	683b      	ldr	r3, [r7, #0]
 800baec:	885b      	ldrh	r3, [r3, #2]
 800baee:	b2db      	uxtb	r3, r3
 800baf0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800baf4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bafc:	b2db      	uxtb	r3, r3
 800bafe:	2b03      	cmp	r3, #3
 800bb00:	d104      	bne.n	800bb0c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800bb02:	6839      	ldr	r1, [r7, #0]
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f9bc 	bl	800be82 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb0a:	e01d      	b.n	800bb48 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	7bfa      	ldrb	r2, [r7, #15]
 800bb10:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800bb14:	7bfb      	ldrb	r3, [r7, #15]
 800bb16:	4619      	mov	r1, r3
 800bb18:	6878      	ldr	r0, [r7, #4]
 800bb1a:	f000 ff0f 	bl	800c93c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800bb1e:	6878      	ldr	r0, [r7, #4]
 800bb20:	f000 fa8d 	bl	800c03e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800bb24:	7bfb      	ldrb	r3, [r7, #15]
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	d004      	beq.n	800bb34 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bb2a:	687b      	ldr	r3, [r7, #4]
 800bb2c:	2202      	movs	r2, #2
 800bb2e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb32:	e009      	b.n	800bb48 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800bb34:	687b      	ldr	r3, [r7, #4]
 800bb36:	2201      	movs	r2, #1
 800bb38:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800bb3c:	e004      	b.n	800bb48 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800bb3e:	6839      	ldr	r1, [r7, #0]
 800bb40:	6878      	ldr	r0, [r7, #4]
 800bb42:	f000 f99e 	bl	800be82 <USBD_CtlError>
  }
}
 800bb46:	bf00      	nop
 800bb48:	bf00      	nop
 800bb4a:	3710      	adds	r7, #16
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	bd80      	pop	{r7, pc}

0800bb50 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bb50:	b580      	push	{r7, lr}
 800bb52:	b084      	sub	sp, #16
 800bb54:	af00      	add	r7, sp, #0
 800bb56:	6078      	str	r0, [r7, #4]
 800bb58:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800bb5a:	2300      	movs	r3, #0
 800bb5c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800bb5e:	683b      	ldr	r3, [r7, #0]
 800bb60:	885b      	ldrh	r3, [r3, #2]
 800bb62:	b2da      	uxtb	r2, r3
 800bb64:	4b4e      	ldr	r3, [pc, #312]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bb66:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800bb68:	4b4d      	ldr	r3, [pc, #308]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bb6a:	781b      	ldrb	r3, [r3, #0]
 800bb6c:	2b01      	cmp	r3, #1
 800bb6e:	d905      	bls.n	800bb7c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800bb70:	6839      	ldr	r1, [r7, #0]
 800bb72:	6878      	ldr	r0, [r7, #4]
 800bb74:	f000 f985 	bl	800be82 <USBD_CtlError>
    return USBD_FAIL;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e08c      	b.n	800bc96 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bb82:	b2db      	uxtb	r3, r3
 800bb84:	2b02      	cmp	r3, #2
 800bb86:	d002      	beq.n	800bb8e <USBD_SetConfig+0x3e>
 800bb88:	2b03      	cmp	r3, #3
 800bb8a:	d029      	beq.n	800bbe0 <USBD_SetConfig+0x90>
 800bb8c:	e075      	b.n	800bc7a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800bb8e:	4b44      	ldr	r3, [pc, #272]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bb90:	781b      	ldrb	r3, [r3, #0]
 800bb92:	2b00      	cmp	r3, #0
 800bb94:	d020      	beq.n	800bbd8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800bb96:	4b42      	ldr	r3, [pc, #264]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bb98:	781b      	ldrb	r3, [r3, #0]
 800bb9a:	461a      	mov	r2, r3
 800bb9c:	687b      	ldr	r3, [r7, #4]
 800bb9e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bba0:	4b3f      	ldr	r3, [pc, #252]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bba2:	781b      	ldrb	r3, [r3, #0]
 800bba4:	4619      	mov	r1, r3
 800bba6:	6878      	ldr	r0, [r7, #4]
 800bba8:	f7fe ffcd 	bl	800ab46 <USBD_SetClassConfig>
 800bbac:	4603      	mov	r3, r0
 800bbae:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800bbb0:	7bfb      	ldrb	r3, [r7, #15]
 800bbb2:	2b00      	cmp	r3, #0
 800bbb4:	d008      	beq.n	800bbc8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800bbb6:	6839      	ldr	r1, [r7, #0]
 800bbb8:	6878      	ldr	r0, [r7, #4]
 800bbba:	f000 f962 	bl	800be82 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	2202      	movs	r2, #2
 800bbc2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bbc6:	e065      	b.n	800bc94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bbc8:	6878      	ldr	r0, [r7, #4]
 800bbca:	f000 fa38 	bl	800c03e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800bbce:	687b      	ldr	r3, [r7, #4]
 800bbd0:	2203      	movs	r2, #3
 800bbd2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bbd6:	e05d      	b.n	800bc94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bbd8:	6878      	ldr	r0, [r7, #4]
 800bbda:	f000 fa30 	bl	800c03e <USBD_CtlSendStatus>
      break;
 800bbde:	e059      	b.n	800bc94 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800bbe0:	4b2f      	ldr	r3, [pc, #188]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bbe2:	781b      	ldrb	r3, [r3, #0]
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	d112      	bne.n	800bc0e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	2202      	movs	r2, #2
 800bbec:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800bbf0:	4b2b      	ldr	r3, [pc, #172]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bbf2:	781b      	ldrb	r3, [r3, #0]
 800bbf4:	461a      	mov	r2, r3
 800bbf6:	687b      	ldr	r3, [r7, #4]
 800bbf8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bbfa:	4b29      	ldr	r3, [pc, #164]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bbfc:	781b      	ldrb	r3, [r3, #0]
 800bbfe:	4619      	mov	r1, r3
 800bc00:	6878      	ldr	r0, [r7, #4]
 800bc02:	f7fe ffbc 	bl	800ab7e <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800bc06:	6878      	ldr	r0, [r7, #4]
 800bc08:	f000 fa19 	bl	800c03e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800bc0c:	e042      	b.n	800bc94 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800bc0e:	4b24      	ldr	r3, [pc, #144]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bc10:	781b      	ldrb	r3, [r3, #0]
 800bc12:	461a      	mov	r2, r3
 800bc14:	687b      	ldr	r3, [r7, #4]
 800bc16:	685b      	ldr	r3, [r3, #4]
 800bc18:	429a      	cmp	r2, r3
 800bc1a:	d02a      	beq.n	800bc72 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	685b      	ldr	r3, [r3, #4]
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	4619      	mov	r1, r3
 800bc24:	6878      	ldr	r0, [r7, #4]
 800bc26:	f7fe ffaa 	bl	800ab7e <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800bc2a:	4b1d      	ldr	r3, [pc, #116]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bc2c:	781b      	ldrb	r3, [r3, #0]
 800bc2e:	461a      	mov	r2, r3
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800bc34:	4b1a      	ldr	r3, [pc, #104]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bc36:	781b      	ldrb	r3, [r3, #0]
 800bc38:	4619      	mov	r1, r3
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7fe ff83 	bl	800ab46 <USBD_SetClassConfig>
 800bc40:	4603      	mov	r3, r0
 800bc42:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800bc44:	7bfb      	ldrb	r3, [r7, #15]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d00f      	beq.n	800bc6a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800bc4a:	6839      	ldr	r1, [r7, #0]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f000 f918 	bl	800be82 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800bc52:	687b      	ldr	r3, [r7, #4]
 800bc54:	685b      	ldr	r3, [r3, #4]
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	4619      	mov	r1, r3
 800bc5a:	6878      	ldr	r0, [r7, #4]
 800bc5c:	f7fe ff8f 	bl	800ab7e <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2202      	movs	r2, #2
 800bc64:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800bc68:	e014      	b.n	800bc94 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800bc6a:	6878      	ldr	r0, [r7, #4]
 800bc6c:	f000 f9e7 	bl	800c03e <USBD_CtlSendStatus>
      break;
 800bc70:	e010      	b.n	800bc94 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800bc72:	6878      	ldr	r0, [r7, #4]
 800bc74:	f000 f9e3 	bl	800c03e <USBD_CtlSendStatus>
      break;
 800bc78:	e00c      	b.n	800bc94 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800bc7a:	6839      	ldr	r1, [r7, #0]
 800bc7c:	6878      	ldr	r0, [r7, #4]
 800bc7e:	f000 f900 	bl	800be82 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800bc82:	4b07      	ldr	r3, [pc, #28]	@ (800bca0 <USBD_SetConfig+0x150>)
 800bc84:	781b      	ldrb	r3, [r3, #0]
 800bc86:	4619      	mov	r1, r3
 800bc88:	6878      	ldr	r0, [r7, #4]
 800bc8a:	f7fe ff78 	bl	800ab7e <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800bc8e:	2303      	movs	r3, #3
 800bc90:	73fb      	strb	r3, [r7, #15]
      break;
 800bc92:	bf00      	nop
  }

  return ret;
 800bc94:	7bfb      	ldrb	r3, [r7, #15]
}
 800bc96:	4618      	mov	r0, r3
 800bc98:	3710      	adds	r7, #16
 800bc9a:	46bd      	mov	sp, r7
 800bc9c:	bd80      	pop	{r7, pc}
 800bc9e:	bf00      	nop
 800bca0:	20000990 	.word	0x20000990

0800bca4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0
 800bcaa:	6078      	str	r0, [r7, #4]
 800bcac:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800bcae:	683b      	ldr	r3, [r7, #0]
 800bcb0:	88db      	ldrh	r3, [r3, #6]
 800bcb2:	2b01      	cmp	r3, #1
 800bcb4:	d004      	beq.n	800bcc0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800bcb6:	6839      	ldr	r1, [r7, #0]
 800bcb8:	6878      	ldr	r0, [r7, #4]
 800bcba:	f000 f8e2 	bl	800be82 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800bcbe:	e023      	b.n	800bd08 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800bcc0:	687b      	ldr	r3, [r7, #4]
 800bcc2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bcc6:	b2db      	uxtb	r3, r3
 800bcc8:	2b02      	cmp	r3, #2
 800bcca:	dc02      	bgt.n	800bcd2 <USBD_GetConfig+0x2e>
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	dc03      	bgt.n	800bcd8 <USBD_GetConfig+0x34>
 800bcd0:	e015      	b.n	800bcfe <USBD_GetConfig+0x5a>
 800bcd2:	2b03      	cmp	r3, #3
 800bcd4:	d00b      	beq.n	800bcee <USBD_GetConfig+0x4a>
 800bcd6:	e012      	b.n	800bcfe <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	2200      	movs	r2, #0
 800bcdc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	3308      	adds	r3, #8
 800bce2:	2201      	movs	r2, #1
 800bce4:	4619      	mov	r1, r3
 800bce6:	6878      	ldr	r0, [r7, #4]
 800bce8:	f000 f948 	bl	800bf7c <USBD_CtlSendData>
        break;
 800bcec:	e00c      	b.n	800bd08 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800bcee:	687b      	ldr	r3, [r7, #4]
 800bcf0:	3304      	adds	r3, #4
 800bcf2:	2201      	movs	r2, #1
 800bcf4:	4619      	mov	r1, r3
 800bcf6:	6878      	ldr	r0, [r7, #4]
 800bcf8:	f000 f940 	bl	800bf7c <USBD_CtlSendData>
        break;
 800bcfc:	e004      	b.n	800bd08 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800bcfe:	6839      	ldr	r1, [r7, #0]
 800bd00:	6878      	ldr	r0, [r7, #4]
 800bd02:	f000 f8be 	bl	800be82 <USBD_CtlError>
        break;
 800bd06:	bf00      	nop
}
 800bd08:	bf00      	nop
 800bd0a:	3708      	adds	r7, #8
 800bd0c:	46bd      	mov	sp, r7
 800bd0e:	bd80      	pop	{r7, pc}

0800bd10 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd10:	b580      	push	{r7, lr}
 800bd12:	b082      	sub	sp, #8
 800bd14:	af00      	add	r7, sp, #0
 800bd16:	6078      	str	r0, [r7, #4]
 800bd18:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bd1a:	687b      	ldr	r3, [r7, #4]
 800bd1c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bd20:	b2db      	uxtb	r3, r3
 800bd22:	3b01      	subs	r3, #1
 800bd24:	2b02      	cmp	r3, #2
 800bd26:	d81e      	bhi.n	800bd66 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800bd28:	683b      	ldr	r3, [r7, #0]
 800bd2a:	88db      	ldrh	r3, [r3, #6]
 800bd2c:	2b02      	cmp	r3, #2
 800bd2e:	d004      	beq.n	800bd3a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800bd30:	6839      	ldr	r1, [r7, #0]
 800bd32:	6878      	ldr	r0, [r7, #4]
 800bd34:	f000 f8a5 	bl	800be82 <USBD_CtlError>
        break;
 800bd38:	e01a      	b.n	800bd70 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2201      	movs	r2, #1
 800bd3e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d005      	beq.n	800bd56 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800bd4a:	687b      	ldr	r3, [r7, #4]
 800bd4c:	68db      	ldr	r3, [r3, #12]
 800bd4e:	f043 0202 	orr.w	r2, r3, #2
 800bd52:	687b      	ldr	r3, [r7, #4]
 800bd54:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	330c      	adds	r3, #12
 800bd5a:	2202      	movs	r2, #2
 800bd5c:	4619      	mov	r1, r3
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f000 f90c 	bl	800bf7c <USBD_CtlSendData>
      break;
 800bd64:	e004      	b.n	800bd70 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800bd66:	6839      	ldr	r1, [r7, #0]
 800bd68:	6878      	ldr	r0, [r7, #4]
 800bd6a:	f000 f88a 	bl	800be82 <USBD_CtlError>
      break;
 800bd6e:	bf00      	nop
  }
}
 800bd70:	bf00      	nop
 800bd72:	3708      	adds	r7, #8
 800bd74:	46bd      	mov	sp, r7
 800bd76:	bd80      	pop	{r7, pc}

0800bd78 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b082      	sub	sp, #8
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	6078      	str	r0, [r7, #4]
 800bd80:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bd82:	683b      	ldr	r3, [r7, #0]
 800bd84:	885b      	ldrh	r3, [r3, #2]
 800bd86:	2b01      	cmp	r3, #1
 800bd88:	d107      	bne.n	800bd9a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800bd92:	6878      	ldr	r0, [r7, #4]
 800bd94:	f000 f953 	bl	800c03e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800bd98:	e013      	b.n	800bdc2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	885b      	ldrh	r3, [r3, #2]
 800bd9e:	2b02      	cmp	r3, #2
 800bda0:	d10b      	bne.n	800bdba <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800bda2:	683b      	ldr	r3, [r7, #0]
 800bda4:	889b      	ldrh	r3, [r3, #4]
 800bda6:	0a1b      	lsrs	r3, r3, #8
 800bda8:	b29b      	uxth	r3, r3
 800bdaa:	b2da      	uxtb	r2, r3
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800bdb2:	6878      	ldr	r0, [r7, #4]
 800bdb4:	f000 f943 	bl	800c03e <USBD_CtlSendStatus>
}
 800bdb8:	e003      	b.n	800bdc2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800bdba:	6839      	ldr	r1, [r7, #0]
 800bdbc:	6878      	ldr	r0, [r7, #4]
 800bdbe:	f000 f860 	bl	800be82 <USBD_CtlError>
}
 800bdc2:	bf00      	nop
 800bdc4:	3708      	adds	r7, #8
 800bdc6:	46bd      	mov	sp, r7
 800bdc8:	bd80      	pop	{r7, pc}

0800bdca <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800bdca:	b580      	push	{r7, lr}
 800bdcc:	b082      	sub	sp, #8
 800bdce:	af00      	add	r7, sp, #0
 800bdd0:	6078      	str	r0, [r7, #4]
 800bdd2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800bdda:	b2db      	uxtb	r3, r3
 800bddc:	3b01      	subs	r3, #1
 800bdde:	2b02      	cmp	r3, #2
 800bde0:	d80b      	bhi.n	800bdfa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	885b      	ldrh	r3, [r3, #2]
 800bde6:	2b01      	cmp	r3, #1
 800bde8:	d10c      	bne.n	800be04 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	2200      	movs	r2, #0
 800bdee:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800bdf2:	6878      	ldr	r0, [r7, #4]
 800bdf4:	f000 f923 	bl	800c03e <USBD_CtlSendStatus>
      }
      break;
 800bdf8:	e004      	b.n	800be04 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800bdfa:	6839      	ldr	r1, [r7, #0]
 800bdfc:	6878      	ldr	r0, [r7, #4]
 800bdfe:	f000 f840 	bl	800be82 <USBD_CtlError>
      break;
 800be02:	e000      	b.n	800be06 <USBD_ClrFeature+0x3c>
      break;
 800be04:	bf00      	nop
  }
}
 800be06:	bf00      	nop
 800be08:	3708      	adds	r7, #8
 800be0a:	46bd      	mov	sp, r7
 800be0c:	bd80      	pop	{r7, pc}

0800be0e <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800be0e:	b580      	push	{r7, lr}
 800be10:	b084      	sub	sp, #16
 800be12:	af00      	add	r7, sp, #0
 800be14:	6078      	str	r0, [r7, #4]
 800be16:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	781a      	ldrb	r2, [r3, #0]
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	3301      	adds	r3, #1
 800be28:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	781a      	ldrb	r2, [r3, #0]
 800be2e:	687b      	ldr	r3, [r7, #4]
 800be30:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800be32:	68fb      	ldr	r3, [r7, #12]
 800be34:	3301      	adds	r3, #1
 800be36:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800be38:	68f8      	ldr	r0, [r7, #12]
 800be3a:	f7ff fa3d 	bl	800b2b8 <SWAPBYTE>
 800be3e:	4603      	mov	r3, r0
 800be40:	461a      	mov	r2, r3
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	3301      	adds	r3, #1
 800be4a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	3301      	adds	r3, #1
 800be50:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800be52:	68f8      	ldr	r0, [r7, #12]
 800be54:	f7ff fa30 	bl	800b2b8 <SWAPBYTE>
 800be58:	4603      	mov	r3, r0
 800be5a:	461a      	mov	r2, r3
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	3301      	adds	r3, #1
 800be64:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	3301      	adds	r3, #1
 800be6a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800be6c:	68f8      	ldr	r0, [r7, #12]
 800be6e:	f7ff fa23 	bl	800b2b8 <SWAPBYTE>
 800be72:	4603      	mov	r3, r0
 800be74:	461a      	mov	r2, r3
 800be76:	687b      	ldr	r3, [r7, #4]
 800be78:	80da      	strh	r2, [r3, #6]
}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}

0800be82 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800be82:	b580      	push	{r7, lr}
 800be84:	b082      	sub	sp, #8
 800be86:	af00      	add	r7, sp, #0
 800be88:	6078      	str	r0, [r7, #4]
 800be8a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800be8c:	2180      	movs	r1, #128	@ 0x80
 800be8e:	6878      	ldr	r0, [r7, #4]
 800be90:	f000 fcea 	bl	800c868 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800be94:	2100      	movs	r1, #0
 800be96:	6878      	ldr	r0, [r7, #4]
 800be98:	f000 fce6 	bl	800c868 <USBD_LL_StallEP>
}
 800be9c:	bf00      	nop
 800be9e:	3708      	adds	r7, #8
 800bea0:	46bd      	mov	sp, r7
 800bea2:	bd80      	pop	{r7, pc}

0800bea4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800bea4:	b580      	push	{r7, lr}
 800bea6:	b086      	sub	sp, #24
 800bea8:	af00      	add	r7, sp, #0
 800beaa:	60f8      	str	r0, [r7, #12]
 800beac:	60b9      	str	r1, [r7, #8]
 800beae:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800beb0:	2300      	movs	r3, #0
 800beb2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800beb4:	68fb      	ldr	r3, [r7, #12]
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d042      	beq.n	800bf40 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800bebe:	6938      	ldr	r0, [r7, #16]
 800bec0:	f000 f842 	bl	800bf48 <USBD_GetLen>
 800bec4:	4603      	mov	r3, r0
 800bec6:	3301      	adds	r3, #1
 800bec8:	005b      	lsls	r3, r3, #1
 800beca:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800bece:	d808      	bhi.n	800bee2 <USBD_GetString+0x3e>
 800bed0:	6938      	ldr	r0, [r7, #16]
 800bed2:	f000 f839 	bl	800bf48 <USBD_GetLen>
 800bed6:	4603      	mov	r3, r0
 800bed8:	3301      	adds	r3, #1
 800beda:	b29b      	uxth	r3, r3
 800bedc:	005b      	lsls	r3, r3, #1
 800bede:	b29a      	uxth	r2, r3
 800bee0:	e001      	b.n	800bee6 <USBD_GetString+0x42>
 800bee2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800beea:	7dfb      	ldrb	r3, [r7, #23]
 800beec:	68ba      	ldr	r2, [r7, #8]
 800beee:	4413      	add	r3, r2
 800bef0:	687a      	ldr	r2, [r7, #4]
 800bef2:	7812      	ldrb	r2, [r2, #0]
 800bef4:	701a      	strb	r2, [r3, #0]
  idx++;
 800bef6:	7dfb      	ldrb	r3, [r7, #23]
 800bef8:	3301      	adds	r3, #1
 800befa:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800befc:	7dfb      	ldrb	r3, [r7, #23]
 800befe:	68ba      	ldr	r2, [r7, #8]
 800bf00:	4413      	add	r3, r2
 800bf02:	2203      	movs	r2, #3
 800bf04:	701a      	strb	r2, [r3, #0]
  idx++;
 800bf06:	7dfb      	ldrb	r3, [r7, #23]
 800bf08:	3301      	adds	r3, #1
 800bf0a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800bf0c:	e013      	b.n	800bf36 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800bf0e:	7dfb      	ldrb	r3, [r7, #23]
 800bf10:	68ba      	ldr	r2, [r7, #8]
 800bf12:	4413      	add	r3, r2
 800bf14:	693a      	ldr	r2, [r7, #16]
 800bf16:	7812      	ldrb	r2, [r2, #0]
 800bf18:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800bf1a:	693b      	ldr	r3, [r7, #16]
 800bf1c:	3301      	adds	r3, #1
 800bf1e:	613b      	str	r3, [r7, #16]
    idx++;
 800bf20:	7dfb      	ldrb	r3, [r7, #23]
 800bf22:	3301      	adds	r3, #1
 800bf24:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800bf26:	7dfb      	ldrb	r3, [r7, #23]
 800bf28:	68ba      	ldr	r2, [r7, #8]
 800bf2a:	4413      	add	r3, r2
 800bf2c:	2200      	movs	r2, #0
 800bf2e:	701a      	strb	r2, [r3, #0]
    idx++;
 800bf30:	7dfb      	ldrb	r3, [r7, #23]
 800bf32:	3301      	adds	r3, #1
 800bf34:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800bf36:	693b      	ldr	r3, [r7, #16]
 800bf38:	781b      	ldrb	r3, [r3, #0]
 800bf3a:	2b00      	cmp	r3, #0
 800bf3c:	d1e7      	bne.n	800bf0e <USBD_GetString+0x6a>
 800bf3e:	e000      	b.n	800bf42 <USBD_GetString+0x9e>
    return;
 800bf40:	bf00      	nop
  }
}
 800bf42:	3718      	adds	r7, #24
 800bf44:	46bd      	mov	sp, r7
 800bf46:	bd80      	pop	{r7, pc}

0800bf48 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800bf48:	b480      	push	{r7}
 800bf4a:	b085      	sub	sp, #20
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800bf50:	2300      	movs	r3, #0
 800bf52:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800bf58:	e005      	b.n	800bf66 <USBD_GetLen+0x1e>
  {
    len++;
 800bf5a:	7bfb      	ldrb	r3, [r7, #15]
 800bf5c:	3301      	adds	r3, #1
 800bf5e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800bf60:	68bb      	ldr	r3, [r7, #8]
 800bf62:	3301      	adds	r3, #1
 800bf64:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800bf66:	68bb      	ldr	r3, [r7, #8]
 800bf68:	781b      	ldrb	r3, [r3, #0]
 800bf6a:	2b00      	cmp	r3, #0
 800bf6c:	d1f5      	bne.n	800bf5a <USBD_GetLen+0x12>
  }

  return len;
 800bf6e:	7bfb      	ldrb	r3, [r7, #15]
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3714      	adds	r7, #20
 800bf74:	46bd      	mov	sp, r7
 800bf76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7a:	4770      	bx	lr

0800bf7c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	60f8      	str	r0, [r7, #12]
 800bf84:	60b9      	str	r1, [r7, #8]
 800bf86:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	2202      	movs	r2, #2
 800bf8c:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	687a      	ldr	r2, [r7, #4]
 800bf94:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	68ba      	ldr	r2, [r7, #8]
 800bf9a:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	687a      	ldr	r2, [r7, #4]
 800bfa0:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfa2:	687b      	ldr	r3, [r7, #4]
 800bfa4:	68ba      	ldr	r2, [r7, #8]
 800bfa6:	2100      	movs	r1, #0
 800bfa8:	68f8      	ldr	r0, [r7, #12]
 800bfaa:	f000 fce6 	bl	800c97a <USBD_LL_Transmit>

  return USBD_OK;
 800bfae:	2300      	movs	r3, #0
}
 800bfb0:	4618      	mov	r0, r3
 800bfb2:	3710      	adds	r7, #16
 800bfb4:	46bd      	mov	sp, r7
 800bfb6:	bd80      	pop	{r7, pc}

0800bfb8 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800bfb8:	b580      	push	{r7, lr}
 800bfba:	b084      	sub	sp, #16
 800bfbc:	af00      	add	r7, sp, #0
 800bfbe:	60f8      	str	r0, [r7, #12]
 800bfc0:	60b9      	str	r1, [r7, #8]
 800bfc2:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	68ba      	ldr	r2, [r7, #8]
 800bfc8:	2100      	movs	r1, #0
 800bfca:	68f8      	ldr	r0, [r7, #12]
 800bfcc:	f000 fcd5 	bl	800c97a <USBD_LL_Transmit>

  return USBD_OK;
 800bfd0:	2300      	movs	r3, #0
}
 800bfd2:	4618      	mov	r0, r3
 800bfd4:	3710      	adds	r7, #16
 800bfd6:	46bd      	mov	sp, r7
 800bfd8:	bd80      	pop	{r7, pc}

0800bfda <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800bfda:	b580      	push	{r7, lr}
 800bfdc:	b084      	sub	sp, #16
 800bfde:	af00      	add	r7, sp, #0
 800bfe0:	60f8      	str	r0, [r7, #12]
 800bfe2:	60b9      	str	r1, [r7, #8]
 800bfe4:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800bfe6:	68fb      	ldr	r3, [r7, #12]
 800bfe8:	2203      	movs	r2, #3
 800bfea:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	687a      	ldr	r2, [r7, #4]
 800bff2:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	68ba      	ldr	r2, [r7, #8]
 800bffa:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	687a      	ldr	r2, [r7, #4]
 800c002:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c006:	687b      	ldr	r3, [r7, #4]
 800c008:	68ba      	ldr	r2, [r7, #8]
 800c00a:	2100      	movs	r1, #0
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f000 fcd5 	bl	800c9bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c012:	2300      	movs	r3, #0
}
 800c014:	4618      	mov	r0, r3
 800c016:	3710      	adds	r7, #16
 800c018:	46bd      	mov	sp, r7
 800c01a:	bd80      	pop	{r7, pc}

0800c01c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	60f8      	str	r0, [r7, #12]
 800c024:	60b9      	str	r1, [r7, #8]
 800c026:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	68ba      	ldr	r2, [r7, #8]
 800c02c:	2100      	movs	r1, #0
 800c02e:	68f8      	ldr	r0, [r7, #12]
 800c030:	f000 fcc4 	bl	800c9bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c034:	2300      	movs	r3, #0
}
 800c036:	4618      	mov	r0, r3
 800c038:	3710      	adds	r7, #16
 800c03a:	46bd      	mov	sp, r7
 800c03c:	bd80      	pop	{r7, pc}

0800c03e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800c03e:	b580      	push	{r7, lr}
 800c040:	b082      	sub	sp, #8
 800c042:	af00      	add	r7, sp, #0
 800c044:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	2204      	movs	r2, #4
 800c04a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800c04e:	2300      	movs	r3, #0
 800c050:	2200      	movs	r2, #0
 800c052:	2100      	movs	r1, #0
 800c054:	6878      	ldr	r0, [r7, #4]
 800c056:	f000 fc90 	bl	800c97a <USBD_LL_Transmit>

  return USBD_OK;
 800c05a:	2300      	movs	r3, #0
}
 800c05c:	4618      	mov	r0, r3
 800c05e:	3708      	adds	r7, #8
 800c060:	46bd      	mov	sp, r7
 800c062:	bd80      	pop	{r7, pc}

0800c064 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800c064:	b580      	push	{r7, lr}
 800c066:	b082      	sub	sp, #8
 800c068:	af00      	add	r7, sp, #0
 800c06a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	2205      	movs	r2, #5
 800c070:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800c074:	2300      	movs	r3, #0
 800c076:	2200      	movs	r2, #0
 800c078:	2100      	movs	r1, #0
 800c07a:	6878      	ldr	r0, [r7, #4]
 800c07c:	f000 fc9e 	bl	800c9bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 800c080:	2300      	movs	r3, #0
}
 800c082:	4618      	mov	r0, r3
 800c084:	3708      	adds	r7, #8
 800c086:	46bd      	mov	sp, r7
 800c088:	bd80      	pop	{r7, pc}
	...

0800c08c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800c08c:	b580      	push	{r7, lr}
 800c08e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800c090:	2200      	movs	r2, #0
 800c092:	4912      	ldr	r1, [pc, #72]	@ (800c0dc <MX_USB_DEVICE_Init+0x50>)
 800c094:	4812      	ldr	r0, [pc, #72]	@ (800c0e0 <MX_USB_DEVICE_Init+0x54>)
 800c096:	f7fe fcd9 	bl	800aa4c <USBD_Init>
 800c09a:	4603      	mov	r3, r0
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d001      	beq.n	800c0a4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800c0a0:	f7f7 fc2e 	bl	8003900 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800c0a4:	490f      	ldr	r1, [pc, #60]	@ (800c0e4 <MX_USB_DEVICE_Init+0x58>)
 800c0a6:	480e      	ldr	r0, [pc, #56]	@ (800c0e0 <MX_USB_DEVICE_Init+0x54>)
 800c0a8:	f7fe fd00 	bl	800aaac <USBD_RegisterClass>
 800c0ac:	4603      	mov	r3, r0
 800c0ae:	2b00      	cmp	r3, #0
 800c0b0:	d001      	beq.n	800c0b6 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800c0b2:	f7f7 fc25 	bl	8003900 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800c0b6:	490c      	ldr	r1, [pc, #48]	@ (800c0e8 <MX_USB_DEVICE_Init+0x5c>)
 800c0b8:	4809      	ldr	r0, [pc, #36]	@ (800c0e0 <MX_USB_DEVICE_Init+0x54>)
 800c0ba:	f7fe fbf7 	bl	800a8ac <USBD_CDC_RegisterInterface>
 800c0be:	4603      	mov	r3, r0
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d001      	beq.n	800c0c8 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800c0c4:	f7f7 fc1c 	bl	8003900 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800c0c8:	4805      	ldr	r0, [pc, #20]	@ (800c0e0 <MX_USB_DEVICE_Init+0x54>)
 800c0ca:	f7fe fd25 	bl	800ab18 <USBD_Start>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d001      	beq.n	800c0d8 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800c0d4:	f7f7 fc14 	bl	8003900 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800c0d8:	bf00      	nop
 800c0da:	bd80      	pop	{r7, pc}
 800c0dc:	200000ac 	.word	0x200000ac
 800c0e0:	20000994 	.word	0x20000994
 800c0e4:	20000018 	.word	0x20000018
 800c0e8:	20000098 	.word	0x20000098

0800c0ec <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800c0ec:	b580      	push	{r7, lr}
 800c0ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800c0f0:	2200      	movs	r2, #0
 800c0f2:	4905      	ldr	r1, [pc, #20]	@ (800c108 <CDC_Init_FS+0x1c>)
 800c0f4:	4805      	ldr	r0, [pc, #20]	@ (800c10c <CDC_Init_FS+0x20>)
 800c0f6:	f7fe fbf3 	bl	800a8e0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800c0fa:	4905      	ldr	r1, [pc, #20]	@ (800c110 <CDC_Init_FS+0x24>)
 800c0fc:	4803      	ldr	r0, [pc, #12]	@ (800c10c <CDC_Init_FS+0x20>)
 800c0fe:	f7fe fc11 	bl	800a924 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800c102:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800c104:	4618      	mov	r0, r3
 800c106:	bd80      	pop	{r7, pc}
 800c108:	20001470 	.word	0x20001470
 800c10c:	20000994 	.word	0x20000994
 800c110:	20000c70 	.word	0x20000c70

0800c114 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800c114:	b480      	push	{r7}
 800c116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800c118:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800c11a:	4618      	mov	r0, r3
 800c11c:	46bd      	mov	sp, r7
 800c11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c122:	4770      	bx	lr

0800c124 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800c124:	b480      	push	{r7}
 800c126:	b083      	sub	sp, #12
 800c128:	af00      	add	r7, sp, #0
 800c12a:	4603      	mov	r3, r0
 800c12c:	6039      	str	r1, [r7, #0]
 800c12e:	71fb      	strb	r3, [r7, #7]
 800c130:	4613      	mov	r3, r2
 800c132:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800c134:	79fb      	ldrb	r3, [r7, #7]
 800c136:	2b23      	cmp	r3, #35	@ 0x23
 800c138:	d84a      	bhi.n	800c1d0 <CDC_Control_FS+0xac>
 800c13a:	a201      	add	r2, pc, #4	@ (adr r2, 800c140 <CDC_Control_FS+0x1c>)
 800c13c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c140:	0800c1d1 	.word	0x0800c1d1
 800c144:	0800c1d1 	.word	0x0800c1d1
 800c148:	0800c1d1 	.word	0x0800c1d1
 800c14c:	0800c1d1 	.word	0x0800c1d1
 800c150:	0800c1d1 	.word	0x0800c1d1
 800c154:	0800c1d1 	.word	0x0800c1d1
 800c158:	0800c1d1 	.word	0x0800c1d1
 800c15c:	0800c1d1 	.word	0x0800c1d1
 800c160:	0800c1d1 	.word	0x0800c1d1
 800c164:	0800c1d1 	.word	0x0800c1d1
 800c168:	0800c1d1 	.word	0x0800c1d1
 800c16c:	0800c1d1 	.word	0x0800c1d1
 800c170:	0800c1d1 	.word	0x0800c1d1
 800c174:	0800c1d1 	.word	0x0800c1d1
 800c178:	0800c1d1 	.word	0x0800c1d1
 800c17c:	0800c1d1 	.word	0x0800c1d1
 800c180:	0800c1d1 	.word	0x0800c1d1
 800c184:	0800c1d1 	.word	0x0800c1d1
 800c188:	0800c1d1 	.word	0x0800c1d1
 800c18c:	0800c1d1 	.word	0x0800c1d1
 800c190:	0800c1d1 	.word	0x0800c1d1
 800c194:	0800c1d1 	.word	0x0800c1d1
 800c198:	0800c1d1 	.word	0x0800c1d1
 800c19c:	0800c1d1 	.word	0x0800c1d1
 800c1a0:	0800c1d1 	.word	0x0800c1d1
 800c1a4:	0800c1d1 	.word	0x0800c1d1
 800c1a8:	0800c1d1 	.word	0x0800c1d1
 800c1ac:	0800c1d1 	.word	0x0800c1d1
 800c1b0:	0800c1d1 	.word	0x0800c1d1
 800c1b4:	0800c1d1 	.word	0x0800c1d1
 800c1b8:	0800c1d1 	.word	0x0800c1d1
 800c1bc:	0800c1d1 	.word	0x0800c1d1
 800c1c0:	0800c1d1 	.word	0x0800c1d1
 800c1c4:	0800c1d1 	.word	0x0800c1d1
 800c1c8:	0800c1d1 	.word	0x0800c1d1
 800c1cc:	0800c1d1 	.word	0x0800c1d1
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800c1d0:	bf00      	nop
  }

  return (USBD_OK);
 800c1d2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	370c      	adds	r7, #12
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1de:	4770      	bx	lr

0800c1e0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b082      	sub	sp, #8
 800c1e4:	af00      	add	r7, sp, #0
 800c1e6:	6078      	str	r0, [r7, #4]
 800c1e8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800c1ea:	6879      	ldr	r1, [r7, #4]
 800c1ec:	4805      	ldr	r0, [pc, #20]	@ (800c204 <CDC_Receive_FS+0x24>)
 800c1ee:	f7fe fb99 	bl	800a924 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800c1f2:	4804      	ldr	r0, [pc, #16]	@ (800c204 <CDC_Receive_FS+0x24>)
 800c1f4:	f7fe fbf4 	bl	800a9e0 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800c1f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800c1fa:	4618      	mov	r0, r3
 800c1fc:	3708      	adds	r7, #8
 800c1fe:	46bd      	mov	sp, r7
 800c200:	bd80      	pop	{r7, pc}
 800c202:	bf00      	nop
 800c204:	20000994 	.word	0x20000994

0800c208 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800c208:	b580      	push	{r7, lr}
 800c20a:	b084      	sub	sp, #16
 800c20c:	af00      	add	r7, sp, #0
 800c20e:	6078      	str	r0, [r7, #4]
 800c210:	460b      	mov	r3, r1
 800c212:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800c214:	2300      	movs	r3, #0
 800c216:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800c218:	4b0d      	ldr	r3, [pc, #52]	@ (800c250 <CDC_Transmit_FS+0x48>)
 800c21a:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800c21e:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800c220:	68bb      	ldr	r3, [r7, #8]
 800c222:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800c226:	2b00      	cmp	r3, #0
 800c228:	d001      	beq.n	800c22e <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800c22a:	2301      	movs	r3, #1
 800c22c:	e00b      	b.n	800c246 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800c22e:	887b      	ldrh	r3, [r7, #2]
 800c230:	461a      	mov	r2, r3
 800c232:	6879      	ldr	r1, [r7, #4]
 800c234:	4806      	ldr	r0, [pc, #24]	@ (800c250 <CDC_Transmit_FS+0x48>)
 800c236:	f7fe fb53 	bl	800a8e0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800c23a:	4805      	ldr	r0, [pc, #20]	@ (800c250 <CDC_Transmit_FS+0x48>)
 800c23c:	f7fe fb90 	bl	800a960 <USBD_CDC_TransmitPacket>
 800c240:	4603      	mov	r3, r0
 800c242:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800c244:	7bfb      	ldrb	r3, [r7, #15]
}
 800c246:	4618      	mov	r0, r3
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}
 800c24e:	bf00      	nop
 800c250:	20000994 	.word	0x20000994

0800c254 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800c254:	b480      	push	{r7}
 800c256:	b087      	sub	sp, #28
 800c258:	af00      	add	r7, sp, #0
 800c25a:	60f8      	str	r0, [r7, #12]
 800c25c:	60b9      	str	r1, [r7, #8]
 800c25e:	4613      	mov	r3, r2
 800c260:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800c262:	2300      	movs	r3, #0
 800c264:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800c266:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800c26a:	4618      	mov	r0, r3
 800c26c:	371c      	adds	r7, #28
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr
	...

0800c278 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c278:	b480      	push	{r7}
 800c27a:	b083      	sub	sp, #12
 800c27c:	af00      	add	r7, sp, #0
 800c27e:	4603      	mov	r3, r0
 800c280:	6039      	str	r1, [r7, #0]
 800c282:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800c284:	683b      	ldr	r3, [r7, #0]
 800c286:	2212      	movs	r2, #18
 800c288:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800c28a:	4b03      	ldr	r3, [pc, #12]	@ (800c298 <USBD_FS_DeviceDescriptor+0x20>)
}
 800c28c:	4618      	mov	r0, r3
 800c28e:	370c      	adds	r7, #12
 800c290:	46bd      	mov	sp, r7
 800c292:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c296:	4770      	bx	lr
 800c298:	200000c8 	.word	0x200000c8

0800c29c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c29c:	b480      	push	{r7}
 800c29e:	b083      	sub	sp, #12
 800c2a0:	af00      	add	r7, sp, #0
 800c2a2:	4603      	mov	r3, r0
 800c2a4:	6039      	str	r1, [r7, #0]
 800c2a6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800c2a8:	683b      	ldr	r3, [r7, #0]
 800c2aa:	2204      	movs	r2, #4
 800c2ac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800c2ae:	4b03      	ldr	r3, [pc, #12]	@ (800c2bc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr
 800c2bc:	200000dc 	.word	0x200000dc

0800c2c0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2c0:	b580      	push	{r7, lr}
 800c2c2:	b082      	sub	sp, #8
 800c2c4:	af00      	add	r7, sp, #0
 800c2c6:	4603      	mov	r3, r0
 800c2c8:	6039      	str	r1, [r7, #0]
 800c2ca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c2cc:	79fb      	ldrb	r3, [r7, #7]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	d105      	bne.n	800c2de <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2d2:	683a      	ldr	r2, [r7, #0]
 800c2d4:	4907      	ldr	r1, [pc, #28]	@ (800c2f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c2d6:	4808      	ldr	r0, [pc, #32]	@ (800c2f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2d8:	f7ff fde4 	bl	800bea4 <USBD_GetString>
 800c2dc:	e004      	b.n	800c2e8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800c2de:	683a      	ldr	r2, [r7, #0]
 800c2e0:	4904      	ldr	r1, [pc, #16]	@ (800c2f4 <USBD_FS_ProductStrDescriptor+0x34>)
 800c2e2:	4805      	ldr	r0, [pc, #20]	@ (800c2f8 <USBD_FS_ProductStrDescriptor+0x38>)
 800c2e4:	f7ff fdde 	bl	800bea4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c2e8:	4b02      	ldr	r3, [pc, #8]	@ (800c2f4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800c2ea:	4618      	mov	r0, r3
 800c2ec:	3708      	adds	r7, #8
 800c2ee:	46bd      	mov	sp, r7
 800c2f0:	bd80      	pop	{r7, pc}
 800c2f2:	bf00      	nop
 800c2f4:	20001c70 	.word	0x20001c70
 800c2f8:	08011b14 	.word	0x08011b14

0800c2fc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c2fc:	b580      	push	{r7, lr}
 800c2fe:	b082      	sub	sp, #8
 800c300:	af00      	add	r7, sp, #0
 800c302:	4603      	mov	r3, r0
 800c304:	6039      	str	r1, [r7, #0]
 800c306:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800c308:	683a      	ldr	r2, [r7, #0]
 800c30a:	4904      	ldr	r1, [pc, #16]	@ (800c31c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800c30c:	4804      	ldr	r0, [pc, #16]	@ (800c320 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800c30e:	f7ff fdc9 	bl	800bea4 <USBD_GetString>
  return USBD_StrDesc;
 800c312:	4b02      	ldr	r3, [pc, #8]	@ (800c31c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800c314:	4618      	mov	r0, r3
 800c316:	3708      	adds	r7, #8
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}
 800c31c:	20001c70 	.word	0x20001c70
 800c320:	08011b2c 	.word	0x08011b2c

0800c324 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b082      	sub	sp, #8
 800c328:	af00      	add	r7, sp, #0
 800c32a:	4603      	mov	r3, r0
 800c32c:	6039      	str	r1, [r7, #0]
 800c32e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800c330:	683b      	ldr	r3, [r7, #0]
 800c332:	221a      	movs	r2, #26
 800c334:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800c336:	f000 f843 	bl	800c3c0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800c33a:	4b02      	ldr	r3, [pc, #8]	@ (800c344 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800c33c:	4618      	mov	r0, r3
 800c33e:	3708      	adds	r7, #8
 800c340:	46bd      	mov	sp, r7
 800c342:	bd80      	pop	{r7, pc}
 800c344:	200000e0 	.word	0x200000e0

0800c348 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c348:	b580      	push	{r7, lr}
 800c34a:	b082      	sub	sp, #8
 800c34c:	af00      	add	r7, sp, #0
 800c34e:	4603      	mov	r3, r0
 800c350:	6039      	str	r1, [r7, #0]
 800c352:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800c354:	79fb      	ldrb	r3, [r7, #7]
 800c356:	2b00      	cmp	r3, #0
 800c358:	d105      	bne.n	800c366 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c35a:	683a      	ldr	r2, [r7, #0]
 800c35c:	4907      	ldr	r1, [pc, #28]	@ (800c37c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c35e:	4808      	ldr	r0, [pc, #32]	@ (800c380 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c360:	f7ff fda0 	bl	800bea4 <USBD_GetString>
 800c364:	e004      	b.n	800c370 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800c366:	683a      	ldr	r2, [r7, #0]
 800c368:	4904      	ldr	r1, [pc, #16]	@ (800c37c <USBD_FS_ConfigStrDescriptor+0x34>)
 800c36a:	4805      	ldr	r0, [pc, #20]	@ (800c380 <USBD_FS_ConfigStrDescriptor+0x38>)
 800c36c:	f7ff fd9a 	bl	800bea4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c370:	4b02      	ldr	r3, [pc, #8]	@ (800c37c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800c372:	4618      	mov	r0, r3
 800c374:	3708      	adds	r7, #8
 800c376:	46bd      	mov	sp, r7
 800c378:	bd80      	pop	{r7, pc}
 800c37a:	bf00      	nop
 800c37c:	20001c70 	.word	0x20001c70
 800c380:	08011b40 	.word	0x08011b40

0800c384 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800c384:	b580      	push	{r7, lr}
 800c386:	b082      	sub	sp, #8
 800c388:	af00      	add	r7, sp, #0
 800c38a:	4603      	mov	r3, r0
 800c38c:	6039      	str	r1, [r7, #0]
 800c38e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800c390:	79fb      	ldrb	r3, [r7, #7]
 800c392:	2b00      	cmp	r3, #0
 800c394:	d105      	bne.n	800c3a2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c396:	683a      	ldr	r2, [r7, #0]
 800c398:	4907      	ldr	r1, [pc, #28]	@ (800c3b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c39a:	4808      	ldr	r0, [pc, #32]	@ (800c3bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c39c:	f7ff fd82 	bl	800bea4 <USBD_GetString>
 800c3a0:	e004      	b.n	800c3ac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800c3a2:	683a      	ldr	r2, [r7, #0]
 800c3a4:	4904      	ldr	r1, [pc, #16]	@ (800c3b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800c3a6:	4805      	ldr	r0, [pc, #20]	@ (800c3bc <USBD_FS_InterfaceStrDescriptor+0x38>)
 800c3a8:	f7ff fd7c 	bl	800bea4 <USBD_GetString>
  }
  return USBD_StrDesc;
 800c3ac:	4b02      	ldr	r3, [pc, #8]	@ (800c3b8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800c3ae:	4618      	mov	r0, r3
 800c3b0:	3708      	adds	r7, #8
 800c3b2:	46bd      	mov	sp, r7
 800c3b4:	bd80      	pop	{r7, pc}
 800c3b6:	bf00      	nop
 800c3b8:	20001c70 	.word	0x20001c70
 800c3bc:	08011b4c 	.word	0x08011b4c

0800c3c0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800c3c0:	b580      	push	{r7, lr}
 800c3c2:	b084      	sub	sp, #16
 800c3c4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800c3c6:	4b0f      	ldr	r3, [pc, #60]	@ (800c404 <Get_SerialNum+0x44>)
 800c3c8:	681b      	ldr	r3, [r3, #0]
 800c3ca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800c3cc:	4b0e      	ldr	r3, [pc, #56]	@ (800c408 <Get_SerialNum+0x48>)
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800c3d2:	4b0e      	ldr	r3, [pc, #56]	@ (800c40c <Get_SerialNum+0x4c>)
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800c3d8:	68fa      	ldr	r2, [r7, #12]
 800c3da:	687b      	ldr	r3, [r7, #4]
 800c3dc:	4413      	add	r3, r2
 800c3de:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	d009      	beq.n	800c3fa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800c3e6:	2208      	movs	r2, #8
 800c3e8:	4909      	ldr	r1, [pc, #36]	@ (800c410 <Get_SerialNum+0x50>)
 800c3ea:	68f8      	ldr	r0, [r7, #12]
 800c3ec:	f000 f814 	bl	800c418 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800c3f0:	2204      	movs	r2, #4
 800c3f2:	4908      	ldr	r1, [pc, #32]	@ (800c414 <Get_SerialNum+0x54>)
 800c3f4:	68b8      	ldr	r0, [r7, #8]
 800c3f6:	f000 f80f 	bl	800c418 <IntToUnicode>
  }
}
 800c3fa:	bf00      	nop
 800c3fc:	3710      	adds	r7, #16
 800c3fe:	46bd      	mov	sp, r7
 800c400:	bd80      	pop	{r7, pc}
 800c402:	bf00      	nop
 800c404:	1fff7a10 	.word	0x1fff7a10
 800c408:	1fff7a14 	.word	0x1fff7a14
 800c40c:	1fff7a18 	.word	0x1fff7a18
 800c410:	200000e2 	.word	0x200000e2
 800c414:	200000f2 	.word	0x200000f2

0800c418 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800c418:	b480      	push	{r7}
 800c41a:	b087      	sub	sp, #28
 800c41c:	af00      	add	r7, sp, #0
 800c41e:	60f8      	str	r0, [r7, #12]
 800c420:	60b9      	str	r1, [r7, #8]
 800c422:	4613      	mov	r3, r2
 800c424:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800c426:	2300      	movs	r3, #0
 800c428:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800c42a:	2300      	movs	r3, #0
 800c42c:	75fb      	strb	r3, [r7, #23]
 800c42e:	e027      	b.n	800c480 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	0f1b      	lsrs	r3, r3, #28
 800c434:	2b09      	cmp	r3, #9
 800c436:	d80b      	bhi.n	800c450 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	0f1b      	lsrs	r3, r3, #28
 800c43c:	b2da      	uxtb	r2, r3
 800c43e:	7dfb      	ldrb	r3, [r7, #23]
 800c440:	005b      	lsls	r3, r3, #1
 800c442:	4619      	mov	r1, r3
 800c444:	68bb      	ldr	r3, [r7, #8]
 800c446:	440b      	add	r3, r1
 800c448:	3230      	adds	r2, #48	@ 0x30
 800c44a:	b2d2      	uxtb	r2, r2
 800c44c:	701a      	strb	r2, [r3, #0]
 800c44e:	e00a      	b.n	800c466 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800c450:	68fb      	ldr	r3, [r7, #12]
 800c452:	0f1b      	lsrs	r3, r3, #28
 800c454:	b2da      	uxtb	r2, r3
 800c456:	7dfb      	ldrb	r3, [r7, #23]
 800c458:	005b      	lsls	r3, r3, #1
 800c45a:	4619      	mov	r1, r3
 800c45c:	68bb      	ldr	r3, [r7, #8]
 800c45e:	440b      	add	r3, r1
 800c460:	3237      	adds	r2, #55	@ 0x37
 800c462:	b2d2      	uxtb	r2, r2
 800c464:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	011b      	lsls	r3, r3, #4
 800c46a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800c46c:	7dfb      	ldrb	r3, [r7, #23]
 800c46e:	005b      	lsls	r3, r3, #1
 800c470:	3301      	adds	r3, #1
 800c472:	68ba      	ldr	r2, [r7, #8]
 800c474:	4413      	add	r3, r2
 800c476:	2200      	movs	r2, #0
 800c478:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800c47a:	7dfb      	ldrb	r3, [r7, #23]
 800c47c:	3301      	adds	r3, #1
 800c47e:	75fb      	strb	r3, [r7, #23]
 800c480:	7dfa      	ldrb	r2, [r7, #23]
 800c482:	79fb      	ldrb	r3, [r7, #7]
 800c484:	429a      	cmp	r2, r3
 800c486:	d3d3      	bcc.n	800c430 <IntToUnicode+0x18>
  }
}
 800c488:	bf00      	nop
 800c48a:	bf00      	nop
 800c48c:	371c      	adds	r7, #28
 800c48e:	46bd      	mov	sp, r7
 800c490:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c494:	4770      	bx	lr
	...

0800c498 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800c498:	b580      	push	{r7, lr}
 800c49a:	b08a      	sub	sp, #40	@ 0x28
 800c49c:	af00      	add	r7, sp, #0
 800c49e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800c4a0:	f107 0314 	add.w	r3, r7, #20
 800c4a4:	2200      	movs	r2, #0
 800c4a6:	601a      	str	r2, [r3, #0]
 800c4a8:	605a      	str	r2, [r3, #4]
 800c4aa:	609a      	str	r2, [r3, #8]
 800c4ac:	60da      	str	r2, [r3, #12]
 800c4ae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800c4b8:	d13a      	bne.n	800c530 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800c4ba:	2300      	movs	r3, #0
 800c4bc:	613b      	str	r3, [r7, #16]
 800c4be:	4b1e      	ldr	r3, [pc, #120]	@ (800c538 <HAL_PCD_MspInit+0xa0>)
 800c4c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4c2:	4a1d      	ldr	r2, [pc, #116]	@ (800c538 <HAL_PCD_MspInit+0xa0>)
 800c4c4:	f043 0301 	orr.w	r3, r3, #1
 800c4c8:	6313      	str	r3, [r2, #48]	@ 0x30
 800c4ca:	4b1b      	ldr	r3, [pc, #108]	@ (800c538 <HAL_PCD_MspInit+0xa0>)
 800c4cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	613b      	str	r3, [r7, #16]
 800c4d4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800c4d6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800c4da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800c4dc:	2302      	movs	r3, #2
 800c4de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800c4e4:	2303      	movs	r3, #3
 800c4e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800c4e8:	230a      	movs	r3, #10
 800c4ea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800c4ec:	f107 0314 	add.w	r3, r7, #20
 800c4f0:	4619      	mov	r1, r3
 800c4f2:	4812      	ldr	r0, [pc, #72]	@ (800c53c <HAL_PCD_MspInit+0xa4>)
 800c4f4:	f7f8 faee 	bl	8004ad4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800c4f8:	4b0f      	ldr	r3, [pc, #60]	@ (800c538 <HAL_PCD_MspInit+0xa0>)
 800c4fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4fc:	4a0e      	ldr	r2, [pc, #56]	@ (800c538 <HAL_PCD_MspInit+0xa0>)
 800c4fe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800c502:	6353      	str	r3, [r2, #52]	@ 0x34
 800c504:	2300      	movs	r3, #0
 800c506:	60fb      	str	r3, [r7, #12]
 800c508:	4b0b      	ldr	r3, [pc, #44]	@ (800c538 <HAL_PCD_MspInit+0xa0>)
 800c50a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c50c:	4a0a      	ldr	r2, [pc, #40]	@ (800c538 <HAL_PCD_MspInit+0xa0>)
 800c50e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800c512:	6453      	str	r3, [r2, #68]	@ 0x44
 800c514:	4b08      	ldr	r3, [pc, #32]	@ (800c538 <HAL_PCD_MspInit+0xa0>)
 800c516:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c518:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800c51c:	60fb      	str	r3, [r7, #12]
 800c51e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800c520:	2200      	movs	r2, #0
 800c522:	2100      	movs	r1, #0
 800c524:	2043      	movs	r0, #67	@ 0x43
 800c526:	f7f7 fe9c 	bl	8004262 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800c52a:	2043      	movs	r0, #67	@ 0x43
 800c52c:	f7f7 feb5 	bl	800429a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800c530:	bf00      	nop
 800c532:	3728      	adds	r7, #40	@ 0x28
 800c534:	46bd      	mov	sp, r7
 800c536:	bd80      	pop	{r7, pc}
 800c538:	40023800 	.word	0x40023800
 800c53c:	40020000 	.word	0x40020000

0800c540 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c540:	b580      	push	{r7, lr}
 800c542:	b082      	sub	sp, #8
 800c544:	af00      	add	r7, sp, #0
 800c546:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800c548:	687b      	ldr	r3, [r7, #4]
 800c54a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800c54e:	687b      	ldr	r3, [r7, #4]
 800c550:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800c554:	4619      	mov	r1, r3
 800c556:	4610      	mov	r0, r2
 800c558:	f7fe fb2b 	bl	800abb2 <USBD_LL_SetupStage>
}
 800c55c:	bf00      	nop
 800c55e:	3708      	adds	r7, #8
 800c560:	46bd      	mov	sp, r7
 800c562:	bd80      	pop	{r7, pc}

0800c564 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c564:	b580      	push	{r7, lr}
 800c566:	b082      	sub	sp, #8
 800c568:	af00      	add	r7, sp, #0
 800c56a:	6078      	str	r0, [r7, #4]
 800c56c:	460b      	mov	r3, r1
 800c56e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c576:	78fa      	ldrb	r2, [r7, #3]
 800c578:	6879      	ldr	r1, [r7, #4]
 800c57a:	4613      	mov	r3, r2
 800c57c:	00db      	lsls	r3, r3, #3
 800c57e:	4413      	add	r3, r2
 800c580:	009b      	lsls	r3, r3, #2
 800c582:	440b      	add	r3, r1
 800c584:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800c588:	681a      	ldr	r2, [r3, #0]
 800c58a:	78fb      	ldrb	r3, [r7, #3]
 800c58c:	4619      	mov	r1, r3
 800c58e:	f7fe fb65 	bl	800ac5c <USBD_LL_DataOutStage>
}
 800c592:	bf00      	nop
 800c594:	3708      	adds	r7, #8
 800c596:	46bd      	mov	sp, r7
 800c598:	bd80      	pop	{r7, pc}

0800c59a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c59a:	b580      	push	{r7, lr}
 800c59c:	b082      	sub	sp, #8
 800c59e:	af00      	add	r7, sp, #0
 800c5a0:	6078      	str	r0, [r7, #4]
 800c5a2:	460b      	mov	r3, r1
 800c5a4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800c5ac:	78fa      	ldrb	r2, [r7, #3]
 800c5ae:	6879      	ldr	r1, [r7, #4]
 800c5b0:	4613      	mov	r3, r2
 800c5b2:	00db      	lsls	r3, r3, #3
 800c5b4:	4413      	add	r3, r2
 800c5b6:	009b      	lsls	r3, r3, #2
 800c5b8:	440b      	add	r3, r1
 800c5ba:	3320      	adds	r3, #32
 800c5bc:	681a      	ldr	r2, [r3, #0]
 800c5be:	78fb      	ldrb	r3, [r7, #3]
 800c5c0:	4619      	mov	r1, r3
 800c5c2:	f7fe fc07 	bl	800add4 <USBD_LL_DataInStage>
}
 800c5c6:	bf00      	nop
 800c5c8:	3708      	adds	r7, #8
 800c5ca:	46bd      	mov	sp, r7
 800c5cc:	bd80      	pop	{r7, pc}

0800c5ce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ce:	b580      	push	{r7, lr}
 800c5d0:	b082      	sub	sp, #8
 800c5d2:	af00      	add	r7, sp, #0
 800c5d4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c5dc:	4618      	mov	r0, r3
 800c5de:	f7fe fd4b 	bl	800b078 <USBD_LL_SOF>
}
 800c5e2:	bf00      	nop
 800c5e4:	3708      	adds	r7, #8
 800c5e6:	46bd      	mov	sp, r7
 800c5e8:	bd80      	pop	{r7, pc}

0800c5ea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c5ea:	b580      	push	{r7, lr}
 800c5ec:	b084      	sub	sp, #16
 800c5ee:	af00      	add	r7, sp, #0
 800c5f0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800c5f2:	2301      	movs	r3, #1
 800c5f4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800c5f6:	687b      	ldr	r3, [r7, #4]
 800c5f8:	79db      	ldrb	r3, [r3, #7]
 800c5fa:	2b02      	cmp	r3, #2
 800c5fc:	d001      	beq.n	800c602 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800c5fe:	f7f7 f97f 	bl	8003900 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800c602:	687b      	ldr	r3, [r7, #4]
 800c604:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c608:	7bfa      	ldrb	r2, [r7, #15]
 800c60a:	4611      	mov	r1, r2
 800c60c:	4618      	mov	r0, r3
 800c60e:	f7fe fcef 	bl	800aff0 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800c612:	687b      	ldr	r3, [r7, #4]
 800c614:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c618:	4618      	mov	r0, r3
 800c61a:	f7fe fc96 	bl	800af4a <USBD_LL_Reset>
}
 800c61e:	bf00      	nop
 800c620:	3710      	adds	r7, #16
 800c622:	46bd      	mov	sp, r7
 800c624:	bd80      	pop	{r7, pc}
	...

0800c628 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c628:	b580      	push	{r7, lr}
 800c62a:	b082      	sub	sp, #8
 800c62c:	af00      	add	r7, sp, #0
 800c62e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800c630:	687b      	ldr	r3, [r7, #4]
 800c632:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c636:	4618      	mov	r0, r3
 800c638:	f7fe fcea 	bl	800b010 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800c63c:	687b      	ldr	r3, [r7, #4]
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800c644:	681b      	ldr	r3, [r3, #0]
 800c646:	687a      	ldr	r2, [r7, #4]
 800c648:	6812      	ldr	r2, [r2, #0]
 800c64a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800c64e:	f043 0301 	orr.w	r3, r3, #1
 800c652:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	7adb      	ldrb	r3, [r3, #11]
 800c658:	2b00      	cmp	r3, #0
 800c65a:	d005      	beq.n	800c668 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800c65c:	4b04      	ldr	r3, [pc, #16]	@ (800c670 <HAL_PCD_SuspendCallback+0x48>)
 800c65e:	691b      	ldr	r3, [r3, #16]
 800c660:	4a03      	ldr	r2, [pc, #12]	@ (800c670 <HAL_PCD_SuspendCallback+0x48>)
 800c662:	f043 0306 	orr.w	r3, r3, #6
 800c666:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800c668:	bf00      	nop
 800c66a:	3708      	adds	r7, #8
 800c66c:	46bd      	mov	sp, r7
 800c66e:	bd80      	pop	{r7, pc}
 800c670:	e000ed00 	.word	0xe000ed00

0800c674 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c674:	b580      	push	{r7, lr}
 800c676:	b082      	sub	sp, #8
 800c678:	af00      	add	r7, sp, #0
 800c67a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c682:	4618      	mov	r0, r3
 800c684:	f7fe fce0 	bl	800b048 <USBD_LL_Resume>
}
 800c688:	bf00      	nop
 800c68a:	3708      	adds	r7, #8
 800c68c:	46bd      	mov	sp, r7
 800c68e:	bd80      	pop	{r7, pc}

0800c690 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c690:	b580      	push	{r7, lr}
 800c692:	b082      	sub	sp, #8
 800c694:	af00      	add	r7, sp, #0
 800c696:	6078      	str	r0, [r7, #4]
 800c698:	460b      	mov	r3, r1
 800c69a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c69c:	687b      	ldr	r3, [r7, #4]
 800c69e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6a2:	78fa      	ldrb	r2, [r7, #3]
 800c6a4:	4611      	mov	r1, r2
 800c6a6:	4618      	mov	r0, r3
 800c6a8:	f7fe fd38 	bl	800b11c <USBD_LL_IsoOUTIncomplete>
}
 800c6ac:	bf00      	nop
 800c6ae:	3708      	adds	r7, #8
 800c6b0:	46bd      	mov	sp, r7
 800c6b2:	bd80      	pop	{r7, pc}

0800c6b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6b4:	b580      	push	{r7, lr}
 800c6b6:	b082      	sub	sp, #8
 800c6b8:	af00      	add	r7, sp, #0
 800c6ba:	6078      	str	r0, [r7, #4]
 800c6bc:	460b      	mov	r3, r1
 800c6be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6c6:	78fa      	ldrb	r2, [r7, #3]
 800c6c8:	4611      	mov	r1, r2
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	f7fe fcf4 	bl	800b0b8 <USBD_LL_IsoINIncomplete>
}
 800c6d0:	bf00      	nop
 800c6d2:	3708      	adds	r7, #8
 800c6d4:	46bd      	mov	sp, r7
 800c6d6:	bd80      	pop	{r7, pc}

0800c6d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b082      	sub	sp, #8
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c6e6:	4618      	mov	r0, r3
 800c6e8:	f7fe fd4a 	bl	800b180 <USBD_LL_DevConnected>
}
 800c6ec:	bf00      	nop
 800c6ee:	3708      	adds	r7, #8
 800c6f0:	46bd      	mov	sp, r7
 800c6f2:	bd80      	pop	{r7, pc}

0800c6f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800c6f4:	b580      	push	{r7, lr}
 800c6f6:	b082      	sub	sp, #8
 800c6f8:	af00      	add	r7, sp, #0
 800c6fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800c702:	4618      	mov	r0, r3
 800c704:	f7fe fd47 	bl	800b196 <USBD_LL_DevDisconnected>
}
 800c708:	bf00      	nop
 800c70a:	3708      	adds	r7, #8
 800c70c:	46bd      	mov	sp, r7
 800c70e:	bd80      	pop	{r7, pc}

0800c710 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800c710:	b580      	push	{r7, lr}
 800c712:	b082      	sub	sp, #8
 800c714:	af00      	add	r7, sp, #0
 800c716:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800c718:	687b      	ldr	r3, [r7, #4]
 800c71a:	781b      	ldrb	r3, [r3, #0]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d13c      	bne.n	800c79a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800c720:	4a20      	ldr	r2, [pc, #128]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c722:	687b      	ldr	r3, [r7, #4]
 800c724:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	4a1e      	ldr	r2, [pc, #120]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c72c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800c730:	4b1c      	ldr	r3, [pc, #112]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c732:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800c736:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800c738:	4b1a      	ldr	r3, [pc, #104]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c73a:	2204      	movs	r2, #4
 800c73c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800c73e:	4b19      	ldr	r3, [pc, #100]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c740:	2202      	movs	r2, #2
 800c742:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800c744:	4b17      	ldr	r3, [pc, #92]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c746:	2200      	movs	r2, #0
 800c748:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800c74a:	4b16      	ldr	r3, [pc, #88]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c74c:	2202      	movs	r2, #2
 800c74e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800c750:	4b14      	ldr	r3, [pc, #80]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c752:	2200      	movs	r2, #0
 800c754:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800c756:	4b13      	ldr	r3, [pc, #76]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c758:	2200      	movs	r2, #0
 800c75a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800c75c:	4b11      	ldr	r3, [pc, #68]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c75e:	2200      	movs	r2, #0
 800c760:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800c762:	4b10      	ldr	r3, [pc, #64]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c764:	2200      	movs	r2, #0
 800c766:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800c768:	4b0e      	ldr	r3, [pc, #56]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c76a:	2200      	movs	r2, #0
 800c76c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800c76e:	480d      	ldr	r0, [pc, #52]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c770:	f7f8 fb67 	bl	8004e42 <HAL_PCD_Init>
 800c774:	4603      	mov	r3, r0
 800c776:	2b00      	cmp	r3, #0
 800c778:	d001      	beq.n	800c77e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800c77a:	f7f7 f8c1 	bl	8003900 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800c77e:	2180      	movs	r1, #128	@ 0x80
 800c780:	4808      	ldr	r0, [pc, #32]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c782:	f7f9 fd94 	bl	80062ae <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800c786:	2240      	movs	r2, #64	@ 0x40
 800c788:	2100      	movs	r1, #0
 800c78a:	4806      	ldr	r0, [pc, #24]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c78c:	f7f9 fd48 	bl	8006220 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800c790:	2280      	movs	r2, #128	@ 0x80
 800c792:	2101      	movs	r1, #1
 800c794:	4803      	ldr	r0, [pc, #12]	@ (800c7a4 <USBD_LL_Init+0x94>)
 800c796:	f7f9 fd43 	bl	8006220 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c79a:	2300      	movs	r3, #0
}
 800c79c:	4618      	mov	r0, r3
 800c79e:	3708      	adds	r7, #8
 800c7a0:	46bd      	mov	sp, r7
 800c7a2:	bd80      	pop	{r7, pc}
 800c7a4:	20001e70 	.word	0x20001e70

0800c7a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c7a8:	b580      	push	{r7, lr}
 800c7aa:	b084      	sub	sp, #16
 800c7ac:	af00      	add	r7, sp, #0
 800c7ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7b0:	2300      	movs	r3, #0
 800c7b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7b4:	2300      	movs	r3, #0
 800c7b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c7be:	4618      	mov	r0, r3
 800c7c0:	f7f8 fc4e 	bl	8005060 <HAL_PCD_Start>
 800c7c4:	4603      	mov	r3, r0
 800c7c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c7c8:	7bfb      	ldrb	r3, [r7, #15]
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	f000 f942 	bl	800ca54 <USBD_Get_USB_Status>
 800c7d0:	4603      	mov	r3, r0
 800c7d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c7d4:	7bbb      	ldrb	r3, [r7, #14]
}
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3710      	adds	r7, #16
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	bd80      	pop	{r7, pc}

0800c7de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c7de:	b580      	push	{r7, lr}
 800c7e0:	b084      	sub	sp, #16
 800c7e2:	af00      	add	r7, sp, #0
 800c7e4:	6078      	str	r0, [r7, #4]
 800c7e6:	4608      	mov	r0, r1
 800c7e8:	4611      	mov	r1, r2
 800c7ea:	461a      	mov	r2, r3
 800c7ec:	4603      	mov	r3, r0
 800c7ee:	70fb      	strb	r3, [r7, #3]
 800c7f0:	460b      	mov	r3, r1
 800c7f2:	70bb      	strb	r3, [r7, #2]
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c7fc:	2300      	movs	r3, #0
 800c7fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c800:	687b      	ldr	r3, [r7, #4]
 800c802:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c806:	78bb      	ldrb	r3, [r7, #2]
 800c808:	883a      	ldrh	r2, [r7, #0]
 800c80a:	78f9      	ldrb	r1, [r7, #3]
 800c80c:	f7f9 f922 	bl	8005a54 <HAL_PCD_EP_Open>
 800c810:	4603      	mov	r3, r0
 800c812:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c814:	7bfb      	ldrb	r3, [r7, #15]
 800c816:	4618      	mov	r0, r3
 800c818:	f000 f91c 	bl	800ca54 <USBD_Get_USB_Status>
 800c81c:	4603      	mov	r3, r0
 800c81e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c820:	7bbb      	ldrb	r3, [r7, #14]
}
 800c822:	4618      	mov	r0, r3
 800c824:	3710      	adds	r7, #16
 800c826:	46bd      	mov	sp, r7
 800c828:	bd80      	pop	{r7, pc}

0800c82a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c82a:	b580      	push	{r7, lr}
 800c82c:	b084      	sub	sp, #16
 800c82e:	af00      	add	r7, sp, #0
 800c830:	6078      	str	r0, [r7, #4]
 800c832:	460b      	mov	r3, r1
 800c834:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c836:	2300      	movs	r3, #0
 800c838:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c83a:	2300      	movs	r3, #0
 800c83c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c83e:	687b      	ldr	r3, [r7, #4]
 800c840:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c844:	78fa      	ldrb	r2, [r7, #3]
 800c846:	4611      	mov	r1, r2
 800c848:	4618      	mov	r0, r3
 800c84a:	f7f9 f96d 	bl	8005b28 <HAL_PCD_EP_Close>
 800c84e:	4603      	mov	r3, r0
 800c850:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c852:	7bfb      	ldrb	r3, [r7, #15]
 800c854:	4618      	mov	r0, r3
 800c856:	f000 f8fd 	bl	800ca54 <USBD_Get_USB_Status>
 800c85a:	4603      	mov	r3, r0
 800c85c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c85e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c860:	4618      	mov	r0, r3
 800c862:	3710      	adds	r7, #16
 800c864:	46bd      	mov	sp, r7
 800c866:	bd80      	pop	{r7, pc}

0800c868 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c868:	b580      	push	{r7, lr}
 800c86a:	b084      	sub	sp, #16
 800c86c:	af00      	add	r7, sp, #0
 800c86e:	6078      	str	r0, [r7, #4]
 800c870:	460b      	mov	r3, r1
 800c872:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c874:	2300      	movs	r3, #0
 800c876:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c878:	2300      	movs	r3, #0
 800c87a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c882:	78fa      	ldrb	r2, [r7, #3]
 800c884:	4611      	mov	r1, r2
 800c886:	4618      	mov	r0, r3
 800c888:	f7f9 fa25 	bl	8005cd6 <HAL_PCD_EP_SetStall>
 800c88c:	4603      	mov	r3, r0
 800c88e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c890:	7bfb      	ldrb	r3, [r7, #15]
 800c892:	4618      	mov	r0, r3
 800c894:	f000 f8de 	bl	800ca54 <USBD_Get_USB_Status>
 800c898:	4603      	mov	r3, r0
 800c89a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c89c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}

0800c8a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8a6:	b580      	push	{r7, lr}
 800c8a8:	b084      	sub	sp, #16
 800c8aa:	af00      	add	r7, sp, #0
 800c8ac:	6078      	str	r0, [r7, #4]
 800c8ae:	460b      	mov	r3, r1
 800c8b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c8b2:	2300      	movs	r3, #0
 800c8b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c8b6:	2300      	movs	r3, #0
 800c8b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8c0:	78fa      	ldrb	r2, [r7, #3]
 800c8c2:	4611      	mov	r1, r2
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7f9 fa69 	bl	8005d9c <HAL_PCD_EP_ClrStall>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c8ce:	7bfb      	ldrb	r3, [r7, #15]
 800c8d0:	4618      	mov	r0, r3
 800c8d2:	f000 f8bf 	bl	800ca54 <USBD_Get_USB_Status>
 800c8d6:	4603      	mov	r3, r0
 800c8d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c8da:	7bbb      	ldrb	r3, [r7, #14]
}
 800c8dc:	4618      	mov	r0, r3
 800c8de:	3710      	adds	r7, #16
 800c8e0:	46bd      	mov	sp, r7
 800c8e2:	bd80      	pop	{r7, pc}

0800c8e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c8e4:	b480      	push	{r7}
 800c8e6:	b085      	sub	sp, #20
 800c8e8:	af00      	add	r7, sp, #0
 800c8ea:	6078      	str	r0, [r7, #4]
 800c8ec:	460b      	mov	r3, r1
 800c8ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c8f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c8f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	da0b      	bge.n	800c918 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c900:	78fb      	ldrb	r3, [r7, #3]
 800c902:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c906:	68f9      	ldr	r1, [r7, #12]
 800c908:	4613      	mov	r3, r2
 800c90a:	00db      	lsls	r3, r3, #3
 800c90c:	4413      	add	r3, r2
 800c90e:	009b      	lsls	r3, r3, #2
 800c910:	440b      	add	r3, r1
 800c912:	3316      	adds	r3, #22
 800c914:	781b      	ldrb	r3, [r3, #0]
 800c916:	e00b      	b.n	800c930 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c918:	78fb      	ldrb	r3, [r7, #3]
 800c91a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c91e:	68f9      	ldr	r1, [r7, #12]
 800c920:	4613      	mov	r3, r2
 800c922:	00db      	lsls	r3, r3, #3
 800c924:	4413      	add	r3, r2
 800c926:	009b      	lsls	r3, r3, #2
 800c928:	440b      	add	r3, r1
 800c92a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c92e:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c930:	4618      	mov	r0, r3
 800c932:	3714      	adds	r7, #20
 800c934:	46bd      	mov	sp, r7
 800c936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c93a:	4770      	bx	lr

0800c93c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c93c:	b580      	push	{r7, lr}
 800c93e:	b084      	sub	sp, #16
 800c940:	af00      	add	r7, sp, #0
 800c942:	6078      	str	r0, [r7, #4]
 800c944:	460b      	mov	r3, r1
 800c946:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c948:	2300      	movs	r3, #0
 800c94a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c94c:	2300      	movs	r3, #0
 800c94e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c956:	78fa      	ldrb	r2, [r7, #3]
 800c958:	4611      	mov	r1, r2
 800c95a:	4618      	mov	r0, r3
 800c95c:	f7f9 f856 	bl	8005a0c <HAL_PCD_SetAddress>
 800c960:	4603      	mov	r3, r0
 800c962:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c964:	7bfb      	ldrb	r3, [r7, #15]
 800c966:	4618      	mov	r0, r3
 800c968:	f000 f874 	bl	800ca54 <USBD_Get_USB_Status>
 800c96c:	4603      	mov	r3, r0
 800c96e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c970:	7bbb      	ldrb	r3, [r7, #14]
}
 800c972:	4618      	mov	r0, r3
 800c974:	3710      	adds	r7, #16
 800c976:	46bd      	mov	sp, r7
 800c978:	bd80      	pop	{r7, pc}

0800c97a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c97a:	b580      	push	{r7, lr}
 800c97c:	b086      	sub	sp, #24
 800c97e:	af00      	add	r7, sp, #0
 800c980:	60f8      	str	r0, [r7, #12]
 800c982:	607a      	str	r2, [r7, #4]
 800c984:	603b      	str	r3, [r7, #0]
 800c986:	460b      	mov	r3, r1
 800c988:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c98a:	2300      	movs	r3, #0
 800c98c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c98e:	2300      	movs	r3, #0
 800c990:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c992:	68fb      	ldr	r3, [r7, #12]
 800c994:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c998:	7af9      	ldrb	r1, [r7, #11]
 800c99a:	683b      	ldr	r3, [r7, #0]
 800c99c:	687a      	ldr	r2, [r7, #4]
 800c99e:	f7f9 f960 	bl	8005c62 <HAL_PCD_EP_Transmit>
 800c9a2:	4603      	mov	r3, r0
 800c9a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9a6:	7dfb      	ldrb	r3, [r7, #23]
 800c9a8:	4618      	mov	r0, r3
 800c9aa:	f000 f853 	bl	800ca54 <USBD_Get_USB_Status>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9b2:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9b4:	4618      	mov	r0, r3
 800c9b6:	3718      	adds	r7, #24
 800c9b8:	46bd      	mov	sp, r7
 800c9ba:	bd80      	pop	{r7, pc}

0800c9bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c9bc:	b580      	push	{r7, lr}
 800c9be:	b086      	sub	sp, #24
 800c9c0:	af00      	add	r7, sp, #0
 800c9c2:	60f8      	str	r0, [r7, #12]
 800c9c4:	607a      	str	r2, [r7, #4]
 800c9c6:	603b      	str	r3, [r7, #0]
 800c9c8:	460b      	mov	r3, r1
 800c9ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c9cc:	2300      	movs	r3, #0
 800c9ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c9d0:	2300      	movs	r3, #0
 800c9d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c9d4:	68fb      	ldr	r3, [r7, #12]
 800c9d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c9da:	7af9      	ldrb	r1, [r7, #11]
 800c9dc:	683b      	ldr	r3, [r7, #0]
 800c9de:	687a      	ldr	r2, [r7, #4]
 800c9e0:	f7f9 f8ec 	bl	8005bbc <HAL_PCD_EP_Receive>
 800c9e4:	4603      	mov	r3, r0
 800c9e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c9e8:	7dfb      	ldrb	r3, [r7, #23]
 800c9ea:	4618      	mov	r0, r3
 800c9ec:	f000 f832 	bl	800ca54 <USBD_Get_USB_Status>
 800c9f0:	4603      	mov	r3, r0
 800c9f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c9f4:	7dbb      	ldrb	r3, [r7, #22]
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3718      	adds	r7, #24
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b082      	sub	sp, #8
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	460b      	mov	r3, r1
 800ca08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800ca10:	78fa      	ldrb	r2, [r7, #3]
 800ca12:	4611      	mov	r1, r2
 800ca14:	4618      	mov	r0, r3
 800ca16:	f7f9 f90c 	bl	8005c32 <HAL_PCD_EP_GetRxCount>
 800ca1a:	4603      	mov	r3, r0
}
 800ca1c:	4618      	mov	r0, r3
 800ca1e:	3708      	adds	r7, #8
 800ca20:	46bd      	mov	sp, r7
 800ca22:	bd80      	pop	{r7, pc}

0800ca24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800ca24:	b480      	push	{r7}
 800ca26:	b083      	sub	sp, #12
 800ca28:	af00      	add	r7, sp, #0
 800ca2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800ca2c:	4b03      	ldr	r3, [pc, #12]	@ (800ca3c <USBD_static_malloc+0x18>)
}
 800ca2e:	4618      	mov	r0, r3
 800ca30:	370c      	adds	r7, #12
 800ca32:	46bd      	mov	sp, r7
 800ca34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca38:	4770      	bx	lr
 800ca3a:	bf00      	nop
 800ca3c:	20002354 	.word	0x20002354

0800ca40 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800ca40:	b480      	push	{r7}
 800ca42:	b083      	sub	sp, #12
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]

}
 800ca48:	bf00      	nop
 800ca4a:	370c      	adds	r7, #12
 800ca4c:	46bd      	mov	sp, r7
 800ca4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca52:	4770      	bx	lr

0800ca54 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800ca54:	b480      	push	{r7}
 800ca56:	b085      	sub	sp, #20
 800ca58:	af00      	add	r7, sp, #0
 800ca5a:	4603      	mov	r3, r0
 800ca5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800ca5e:	2300      	movs	r3, #0
 800ca60:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800ca62:	79fb      	ldrb	r3, [r7, #7]
 800ca64:	2b03      	cmp	r3, #3
 800ca66:	d817      	bhi.n	800ca98 <USBD_Get_USB_Status+0x44>
 800ca68:	a201      	add	r2, pc, #4	@ (adr r2, 800ca70 <USBD_Get_USB_Status+0x1c>)
 800ca6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ca6e:	bf00      	nop
 800ca70:	0800ca81 	.word	0x0800ca81
 800ca74:	0800ca87 	.word	0x0800ca87
 800ca78:	0800ca8d 	.word	0x0800ca8d
 800ca7c:	0800ca93 	.word	0x0800ca93
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800ca80:	2300      	movs	r3, #0
 800ca82:	73fb      	strb	r3, [r7, #15]
    break;
 800ca84:	e00b      	b.n	800ca9e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800ca86:	2303      	movs	r3, #3
 800ca88:	73fb      	strb	r3, [r7, #15]
    break;
 800ca8a:	e008      	b.n	800ca9e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800ca8c:	2301      	movs	r3, #1
 800ca8e:	73fb      	strb	r3, [r7, #15]
    break;
 800ca90:	e005      	b.n	800ca9e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800ca92:	2303      	movs	r3, #3
 800ca94:	73fb      	strb	r3, [r7, #15]
    break;
 800ca96:	e002      	b.n	800ca9e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800ca98:	2303      	movs	r3, #3
 800ca9a:	73fb      	strb	r3, [r7, #15]
    break;
 800ca9c:	bf00      	nop
  }
  return usb_status;
 800ca9e:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa0:	4618      	mov	r0, r3
 800caa2:	3714      	adds	r7, #20
 800caa4:	46bd      	mov	sp, r7
 800caa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caaa:	4770      	bx	lr

0800caac <atof>:
 800caac:	2100      	movs	r1, #0
 800caae:	f000 be07 	b.w	800d6c0 <strtod>

0800cab2 <atoi>:
 800cab2:	220a      	movs	r2, #10
 800cab4:	2100      	movs	r1, #0
 800cab6:	f000 be89 	b.w	800d7cc <strtol>

0800caba <sulp>:
 800caba:	b570      	push	{r4, r5, r6, lr}
 800cabc:	4604      	mov	r4, r0
 800cabe:	460d      	mov	r5, r1
 800cac0:	ec45 4b10 	vmov	d0, r4, r5
 800cac4:	4616      	mov	r6, r2
 800cac6:	f003 fbc7 	bl	8010258 <__ulp>
 800caca:	ec51 0b10 	vmov	r0, r1, d0
 800cace:	b17e      	cbz	r6, 800caf0 <sulp+0x36>
 800cad0:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800cad4:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800cad8:	2b00      	cmp	r3, #0
 800cada:	dd09      	ble.n	800caf0 <sulp+0x36>
 800cadc:	051b      	lsls	r3, r3, #20
 800cade:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 800cae2:	2400      	movs	r4, #0
 800cae4:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 800cae8:	4622      	mov	r2, r4
 800caea:	462b      	mov	r3, r5
 800caec:	f7f3 fd8c 	bl	8000608 <__aeabi_dmul>
 800caf0:	ec41 0b10 	vmov	d0, r0, r1
 800caf4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800caf8 <_strtod_l>:
 800caf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cafc:	b09f      	sub	sp, #124	@ 0x7c
 800cafe:	460c      	mov	r4, r1
 800cb00:	9217      	str	r2, [sp, #92]	@ 0x5c
 800cb02:	2200      	movs	r2, #0
 800cb04:	921a      	str	r2, [sp, #104]	@ 0x68
 800cb06:	9005      	str	r0, [sp, #20]
 800cb08:	f04f 0a00 	mov.w	sl, #0
 800cb0c:	f04f 0b00 	mov.w	fp, #0
 800cb10:	460a      	mov	r2, r1
 800cb12:	9219      	str	r2, [sp, #100]	@ 0x64
 800cb14:	7811      	ldrb	r1, [r2, #0]
 800cb16:	292b      	cmp	r1, #43	@ 0x2b
 800cb18:	d04a      	beq.n	800cbb0 <_strtod_l+0xb8>
 800cb1a:	d838      	bhi.n	800cb8e <_strtod_l+0x96>
 800cb1c:	290d      	cmp	r1, #13
 800cb1e:	d832      	bhi.n	800cb86 <_strtod_l+0x8e>
 800cb20:	2908      	cmp	r1, #8
 800cb22:	d832      	bhi.n	800cb8a <_strtod_l+0x92>
 800cb24:	2900      	cmp	r1, #0
 800cb26:	d03b      	beq.n	800cba0 <_strtod_l+0xa8>
 800cb28:	2200      	movs	r2, #0
 800cb2a:	920e      	str	r2, [sp, #56]	@ 0x38
 800cb2c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800cb2e:	782a      	ldrb	r2, [r5, #0]
 800cb30:	2a30      	cmp	r2, #48	@ 0x30
 800cb32:	f040 80b2 	bne.w	800cc9a <_strtod_l+0x1a2>
 800cb36:	786a      	ldrb	r2, [r5, #1]
 800cb38:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800cb3c:	2a58      	cmp	r2, #88	@ 0x58
 800cb3e:	d16e      	bne.n	800cc1e <_strtod_l+0x126>
 800cb40:	9302      	str	r3, [sp, #8]
 800cb42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	ab1a      	add	r3, sp, #104	@ 0x68
 800cb48:	9300      	str	r3, [sp, #0]
 800cb4a:	4a8f      	ldr	r2, [pc, #572]	@ (800cd88 <_strtod_l+0x290>)
 800cb4c:	9805      	ldr	r0, [sp, #20]
 800cb4e:	ab1b      	add	r3, sp, #108	@ 0x6c
 800cb50:	a919      	add	r1, sp, #100	@ 0x64
 800cb52:	f002 fc7b 	bl	800f44c <__gethex>
 800cb56:	f010 060f 	ands.w	r6, r0, #15
 800cb5a:	4604      	mov	r4, r0
 800cb5c:	d005      	beq.n	800cb6a <_strtod_l+0x72>
 800cb5e:	2e06      	cmp	r6, #6
 800cb60:	d128      	bne.n	800cbb4 <_strtod_l+0xbc>
 800cb62:	3501      	adds	r5, #1
 800cb64:	2300      	movs	r3, #0
 800cb66:	9519      	str	r5, [sp, #100]	@ 0x64
 800cb68:	930e      	str	r3, [sp, #56]	@ 0x38
 800cb6a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cb6c:	2b00      	cmp	r3, #0
 800cb6e:	f040 858e 	bne.w	800d68e <_strtod_l+0xb96>
 800cb72:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800cb74:	b1cb      	cbz	r3, 800cbaa <_strtod_l+0xb2>
 800cb76:	4652      	mov	r2, sl
 800cb78:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 800cb7c:	ec43 2b10 	vmov	d0, r2, r3
 800cb80:	b01f      	add	sp, #124	@ 0x7c
 800cb82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb86:	2920      	cmp	r1, #32
 800cb88:	d1ce      	bne.n	800cb28 <_strtod_l+0x30>
 800cb8a:	3201      	adds	r2, #1
 800cb8c:	e7c1      	b.n	800cb12 <_strtod_l+0x1a>
 800cb8e:	292d      	cmp	r1, #45	@ 0x2d
 800cb90:	d1ca      	bne.n	800cb28 <_strtod_l+0x30>
 800cb92:	2101      	movs	r1, #1
 800cb94:	910e      	str	r1, [sp, #56]	@ 0x38
 800cb96:	1c51      	adds	r1, r2, #1
 800cb98:	9119      	str	r1, [sp, #100]	@ 0x64
 800cb9a:	7852      	ldrb	r2, [r2, #1]
 800cb9c:	2a00      	cmp	r2, #0
 800cb9e:	d1c5      	bne.n	800cb2c <_strtod_l+0x34>
 800cba0:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800cba2:	9419      	str	r4, [sp, #100]	@ 0x64
 800cba4:	2b00      	cmp	r3, #0
 800cba6:	f040 8570 	bne.w	800d68a <_strtod_l+0xb92>
 800cbaa:	4652      	mov	r2, sl
 800cbac:	465b      	mov	r3, fp
 800cbae:	e7e5      	b.n	800cb7c <_strtod_l+0x84>
 800cbb0:	2100      	movs	r1, #0
 800cbb2:	e7ef      	b.n	800cb94 <_strtod_l+0x9c>
 800cbb4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800cbb6:	b13a      	cbz	r2, 800cbc8 <_strtod_l+0xd0>
 800cbb8:	2135      	movs	r1, #53	@ 0x35
 800cbba:	a81c      	add	r0, sp, #112	@ 0x70
 800cbbc:	f003 fc46 	bl	801044c <__copybits>
 800cbc0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cbc2:	9805      	ldr	r0, [sp, #20]
 800cbc4:	f003 f81c 	bl	800fc00 <_Bfree>
 800cbc8:	3e01      	subs	r6, #1
 800cbca:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800cbcc:	2e04      	cmp	r6, #4
 800cbce:	d806      	bhi.n	800cbde <_strtod_l+0xe6>
 800cbd0:	e8df f006 	tbb	[pc, r6]
 800cbd4:	201d0314 	.word	0x201d0314
 800cbd8:	14          	.byte	0x14
 800cbd9:	00          	.byte	0x00
 800cbda:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800cbde:	05e1      	lsls	r1, r4, #23
 800cbe0:	bf48      	it	mi
 800cbe2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 800cbe6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800cbea:	0d1b      	lsrs	r3, r3, #20
 800cbec:	051b      	lsls	r3, r3, #20
 800cbee:	2b00      	cmp	r3, #0
 800cbf0:	d1bb      	bne.n	800cb6a <_strtod_l+0x72>
 800cbf2:	f001 fcdd 	bl	800e5b0 <__errno>
 800cbf6:	2322      	movs	r3, #34	@ 0x22
 800cbf8:	6003      	str	r3, [r0, #0]
 800cbfa:	e7b6      	b.n	800cb6a <_strtod_l+0x72>
 800cbfc:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 800cc00:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 800cc04:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 800cc08:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800cc0c:	e7e7      	b.n	800cbde <_strtod_l+0xe6>
 800cc0e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 800cd90 <_strtod_l+0x298>
 800cc12:	e7e4      	b.n	800cbde <_strtod_l+0xe6>
 800cc14:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 800cc18:	f04f 3aff 	mov.w	sl, #4294967295
 800cc1c:	e7df      	b.n	800cbde <_strtod_l+0xe6>
 800cc1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc20:	1c5a      	adds	r2, r3, #1
 800cc22:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc24:	785b      	ldrb	r3, [r3, #1]
 800cc26:	2b30      	cmp	r3, #48	@ 0x30
 800cc28:	d0f9      	beq.n	800cc1e <_strtod_l+0x126>
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d09d      	beq.n	800cb6a <_strtod_l+0x72>
 800cc2e:	2301      	movs	r3, #1
 800cc30:	2700      	movs	r7, #0
 800cc32:	9308      	str	r3, [sp, #32]
 800cc34:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800cc36:	930c      	str	r3, [sp, #48]	@ 0x30
 800cc38:	970b      	str	r7, [sp, #44]	@ 0x2c
 800cc3a:	46b9      	mov	r9, r7
 800cc3c:	220a      	movs	r2, #10
 800cc3e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 800cc40:	7805      	ldrb	r5, [r0, #0]
 800cc42:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800cc46:	b2d9      	uxtb	r1, r3
 800cc48:	2909      	cmp	r1, #9
 800cc4a:	d928      	bls.n	800cc9e <_strtod_l+0x1a6>
 800cc4c:	494f      	ldr	r1, [pc, #316]	@ (800cd8c <_strtod_l+0x294>)
 800cc4e:	2201      	movs	r2, #1
 800cc50:	f001 fc3b 	bl	800e4ca <strncmp>
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d032      	beq.n	800ccbe <_strtod_l+0x1c6>
 800cc58:	2000      	movs	r0, #0
 800cc5a:	462a      	mov	r2, r5
 800cc5c:	900a      	str	r0, [sp, #40]	@ 0x28
 800cc5e:	464d      	mov	r5, r9
 800cc60:	4603      	mov	r3, r0
 800cc62:	2a65      	cmp	r2, #101	@ 0x65
 800cc64:	d001      	beq.n	800cc6a <_strtod_l+0x172>
 800cc66:	2a45      	cmp	r2, #69	@ 0x45
 800cc68:	d114      	bne.n	800cc94 <_strtod_l+0x19c>
 800cc6a:	b91d      	cbnz	r5, 800cc74 <_strtod_l+0x17c>
 800cc6c:	9a08      	ldr	r2, [sp, #32]
 800cc6e:	4302      	orrs	r2, r0
 800cc70:	d096      	beq.n	800cba0 <_strtod_l+0xa8>
 800cc72:	2500      	movs	r5, #0
 800cc74:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800cc76:	1c62      	adds	r2, r4, #1
 800cc78:	9219      	str	r2, [sp, #100]	@ 0x64
 800cc7a:	7862      	ldrb	r2, [r4, #1]
 800cc7c:	2a2b      	cmp	r2, #43	@ 0x2b
 800cc7e:	d07a      	beq.n	800cd76 <_strtod_l+0x27e>
 800cc80:	2a2d      	cmp	r2, #45	@ 0x2d
 800cc82:	d07e      	beq.n	800cd82 <_strtod_l+0x28a>
 800cc84:	f04f 0c00 	mov.w	ip, #0
 800cc88:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 800cc8c:	2909      	cmp	r1, #9
 800cc8e:	f240 8085 	bls.w	800cd9c <_strtod_l+0x2a4>
 800cc92:	9419      	str	r4, [sp, #100]	@ 0x64
 800cc94:	f04f 0800 	mov.w	r8, #0
 800cc98:	e0a5      	b.n	800cde6 <_strtod_l+0x2ee>
 800cc9a:	2300      	movs	r3, #0
 800cc9c:	e7c8      	b.n	800cc30 <_strtod_l+0x138>
 800cc9e:	f1b9 0f08 	cmp.w	r9, #8
 800cca2:	bfd8      	it	le
 800cca4:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800cca6:	f100 0001 	add.w	r0, r0, #1
 800ccaa:	bfda      	itte	le
 800ccac:	fb02 3301 	mlale	r3, r2, r1, r3
 800ccb0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800ccb2:	fb02 3707 	mlagt	r7, r2, r7, r3
 800ccb6:	f109 0901 	add.w	r9, r9, #1
 800ccba:	9019      	str	r0, [sp, #100]	@ 0x64
 800ccbc:	e7bf      	b.n	800cc3e <_strtod_l+0x146>
 800ccbe:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccc0:	1c5a      	adds	r2, r3, #1
 800ccc2:	9219      	str	r2, [sp, #100]	@ 0x64
 800ccc4:	785a      	ldrb	r2, [r3, #1]
 800ccc6:	f1b9 0f00 	cmp.w	r9, #0
 800ccca:	d03b      	beq.n	800cd44 <_strtod_l+0x24c>
 800cccc:	900a      	str	r0, [sp, #40]	@ 0x28
 800ccce:	464d      	mov	r5, r9
 800ccd0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 800ccd4:	2b09      	cmp	r3, #9
 800ccd6:	d912      	bls.n	800ccfe <_strtod_l+0x206>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e7c2      	b.n	800cc62 <_strtod_l+0x16a>
 800ccdc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccde:	1c5a      	adds	r2, r3, #1
 800cce0:	9219      	str	r2, [sp, #100]	@ 0x64
 800cce2:	785a      	ldrb	r2, [r3, #1]
 800cce4:	3001      	adds	r0, #1
 800cce6:	2a30      	cmp	r2, #48	@ 0x30
 800cce8:	d0f8      	beq.n	800ccdc <_strtod_l+0x1e4>
 800ccea:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800ccee:	2b08      	cmp	r3, #8
 800ccf0:	f200 84d2 	bhi.w	800d698 <_strtod_l+0xba0>
 800ccf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ccf6:	900a      	str	r0, [sp, #40]	@ 0x28
 800ccf8:	2000      	movs	r0, #0
 800ccfa:	930c      	str	r3, [sp, #48]	@ 0x30
 800ccfc:	4605      	mov	r5, r0
 800ccfe:	3a30      	subs	r2, #48	@ 0x30
 800cd00:	f100 0301 	add.w	r3, r0, #1
 800cd04:	d018      	beq.n	800cd38 <_strtod_l+0x240>
 800cd06:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800cd08:	4419      	add	r1, r3
 800cd0a:	910a      	str	r1, [sp, #40]	@ 0x28
 800cd0c:	462e      	mov	r6, r5
 800cd0e:	f04f 0e0a 	mov.w	lr, #10
 800cd12:	1c71      	adds	r1, r6, #1
 800cd14:	eba1 0c05 	sub.w	ip, r1, r5
 800cd18:	4563      	cmp	r3, ip
 800cd1a:	dc15      	bgt.n	800cd48 <_strtod_l+0x250>
 800cd1c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 800cd20:	182b      	adds	r3, r5, r0
 800cd22:	2b08      	cmp	r3, #8
 800cd24:	f105 0501 	add.w	r5, r5, #1
 800cd28:	4405      	add	r5, r0
 800cd2a:	dc1a      	bgt.n	800cd62 <_strtod_l+0x26a>
 800cd2c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cd2e:	230a      	movs	r3, #10
 800cd30:	fb03 2301 	mla	r3, r3, r1, r2
 800cd34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800cd36:	2300      	movs	r3, #0
 800cd38:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd3a:	1c51      	adds	r1, r2, #1
 800cd3c:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd3e:	7852      	ldrb	r2, [r2, #1]
 800cd40:	4618      	mov	r0, r3
 800cd42:	e7c5      	b.n	800ccd0 <_strtod_l+0x1d8>
 800cd44:	4648      	mov	r0, r9
 800cd46:	e7ce      	b.n	800cce6 <_strtod_l+0x1ee>
 800cd48:	2e08      	cmp	r6, #8
 800cd4a:	dc05      	bgt.n	800cd58 <_strtod_l+0x260>
 800cd4c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 800cd4e:	fb0e f606 	mul.w	r6, lr, r6
 800cd52:	960b      	str	r6, [sp, #44]	@ 0x2c
 800cd54:	460e      	mov	r6, r1
 800cd56:	e7dc      	b.n	800cd12 <_strtod_l+0x21a>
 800cd58:	2910      	cmp	r1, #16
 800cd5a:	bfd8      	it	le
 800cd5c:	fb0e f707 	mulle.w	r7, lr, r7
 800cd60:	e7f8      	b.n	800cd54 <_strtod_l+0x25c>
 800cd62:	2b0f      	cmp	r3, #15
 800cd64:	bfdc      	itt	le
 800cd66:	230a      	movle	r3, #10
 800cd68:	fb03 2707 	mlale	r7, r3, r7, r2
 800cd6c:	e7e3      	b.n	800cd36 <_strtod_l+0x23e>
 800cd6e:	2300      	movs	r3, #0
 800cd70:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd72:	2301      	movs	r3, #1
 800cd74:	e77a      	b.n	800cc6c <_strtod_l+0x174>
 800cd76:	f04f 0c00 	mov.w	ip, #0
 800cd7a:	1ca2      	adds	r2, r4, #2
 800cd7c:	9219      	str	r2, [sp, #100]	@ 0x64
 800cd7e:	78a2      	ldrb	r2, [r4, #2]
 800cd80:	e782      	b.n	800cc88 <_strtod_l+0x190>
 800cd82:	f04f 0c01 	mov.w	ip, #1
 800cd86:	e7f8      	b.n	800cd7a <_strtod_l+0x282>
 800cd88:	08011d64 	.word	0x08011d64
 800cd8c:	08011b7c 	.word	0x08011b7c
 800cd90:	7ff00000 	.word	0x7ff00000
 800cd94:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cd96:	1c51      	adds	r1, r2, #1
 800cd98:	9119      	str	r1, [sp, #100]	@ 0x64
 800cd9a:	7852      	ldrb	r2, [r2, #1]
 800cd9c:	2a30      	cmp	r2, #48	@ 0x30
 800cd9e:	d0f9      	beq.n	800cd94 <_strtod_l+0x29c>
 800cda0:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800cda4:	2908      	cmp	r1, #8
 800cda6:	f63f af75 	bhi.w	800cc94 <_strtod_l+0x19c>
 800cdaa:	3a30      	subs	r2, #48	@ 0x30
 800cdac:	9209      	str	r2, [sp, #36]	@ 0x24
 800cdae:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cdb0:	920f      	str	r2, [sp, #60]	@ 0x3c
 800cdb2:	f04f 080a 	mov.w	r8, #10
 800cdb6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800cdb8:	1c56      	adds	r6, r2, #1
 800cdba:	9619      	str	r6, [sp, #100]	@ 0x64
 800cdbc:	7852      	ldrb	r2, [r2, #1]
 800cdbe:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800cdc2:	f1be 0f09 	cmp.w	lr, #9
 800cdc6:	d939      	bls.n	800ce3c <_strtod_l+0x344>
 800cdc8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800cdca:	1a76      	subs	r6, r6, r1
 800cdcc:	2e08      	cmp	r6, #8
 800cdce:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 800cdd2:	dc03      	bgt.n	800cddc <_strtod_l+0x2e4>
 800cdd4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cdd6:	4588      	cmp	r8, r1
 800cdd8:	bfa8      	it	ge
 800cdda:	4688      	movge	r8, r1
 800cddc:	f1bc 0f00 	cmp.w	ip, #0
 800cde0:	d001      	beq.n	800cde6 <_strtod_l+0x2ee>
 800cde2:	f1c8 0800 	rsb	r8, r8, #0
 800cde6:	2d00      	cmp	r5, #0
 800cde8:	d14e      	bne.n	800ce88 <_strtod_l+0x390>
 800cdea:	9908      	ldr	r1, [sp, #32]
 800cdec:	4308      	orrs	r0, r1
 800cdee:	f47f aebc 	bne.w	800cb6a <_strtod_l+0x72>
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f47f aed4 	bne.w	800cba0 <_strtod_l+0xa8>
 800cdf8:	2a69      	cmp	r2, #105	@ 0x69
 800cdfa:	d028      	beq.n	800ce4e <_strtod_l+0x356>
 800cdfc:	dc25      	bgt.n	800ce4a <_strtod_l+0x352>
 800cdfe:	2a49      	cmp	r2, #73	@ 0x49
 800ce00:	d025      	beq.n	800ce4e <_strtod_l+0x356>
 800ce02:	2a4e      	cmp	r2, #78	@ 0x4e
 800ce04:	f47f aecc 	bne.w	800cba0 <_strtod_l+0xa8>
 800ce08:	499a      	ldr	r1, [pc, #616]	@ (800d074 <_strtod_l+0x57c>)
 800ce0a:	a819      	add	r0, sp, #100	@ 0x64
 800ce0c:	f002 fd40 	bl	800f890 <__match>
 800ce10:	2800      	cmp	r0, #0
 800ce12:	f43f aec5 	beq.w	800cba0 <_strtod_l+0xa8>
 800ce16:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce18:	781b      	ldrb	r3, [r3, #0]
 800ce1a:	2b28      	cmp	r3, #40	@ 0x28
 800ce1c:	d12e      	bne.n	800ce7c <_strtod_l+0x384>
 800ce1e:	4996      	ldr	r1, [pc, #600]	@ (800d078 <_strtod_l+0x580>)
 800ce20:	aa1c      	add	r2, sp, #112	@ 0x70
 800ce22:	a819      	add	r0, sp, #100	@ 0x64
 800ce24:	f002 fd48 	bl	800f8b8 <__hexnan>
 800ce28:	2805      	cmp	r0, #5
 800ce2a:	d127      	bne.n	800ce7c <_strtod_l+0x384>
 800ce2c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800ce2e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800ce32:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800ce36:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 800ce3a:	e696      	b.n	800cb6a <_strtod_l+0x72>
 800ce3c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce3e:	fb08 2101 	mla	r1, r8, r1, r2
 800ce42:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800ce46:	9209      	str	r2, [sp, #36]	@ 0x24
 800ce48:	e7b5      	b.n	800cdb6 <_strtod_l+0x2be>
 800ce4a:	2a6e      	cmp	r2, #110	@ 0x6e
 800ce4c:	e7da      	b.n	800ce04 <_strtod_l+0x30c>
 800ce4e:	498b      	ldr	r1, [pc, #556]	@ (800d07c <_strtod_l+0x584>)
 800ce50:	a819      	add	r0, sp, #100	@ 0x64
 800ce52:	f002 fd1d 	bl	800f890 <__match>
 800ce56:	2800      	cmp	r0, #0
 800ce58:	f43f aea2 	beq.w	800cba0 <_strtod_l+0xa8>
 800ce5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce5e:	4988      	ldr	r1, [pc, #544]	@ (800d080 <_strtod_l+0x588>)
 800ce60:	3b01      	subs	r3, #1
 800ce62:	a819      	add	r0, sp, #100	@ 0x64
 800ce64:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce66:	f002 fd13 	bl	800f890 <__match>
 800ce6a:	b910      	cbnz	r0, 800ce72 <_strtod_l+0x37a>
 800ce6c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800ce6e:	3301      	adds	r3, #1
 800ce70:	9319      	str	r3, [sp, #100]	@ 0x64
 800ce72:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 800d090 <_strtod_l+0x598>
 800ce76:	f04f 0a00 	mov.w	sl, #0
 800ce7a:	e676      	b.n	800cb6a <_strtod_l+0x72>
 800ce7c:	4881      	ldr	r0, [pc, #516]	@ (800d084 <_strtod_l+0x58c>)
 800ce7e:	f001 fbd3 	bl	800e628 <nan>
 800ce82:	ec5b ab10 	vmov	sl, fp, d0
 800ce86:	e670      	b.n	800cb6a <_strtod_l+0x72>
 800ce88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800ce8a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800ce8c:	eba8 0303 	sub.w	r3, r8, r3
 800ce90:	f1b9 0f00 	cmp.w	r9, #0
 800ce94:	bf08      	it	eq
 800ce96:	46a9      	moveq	r9, r5
 800ce98:	2d10      	cmp	r5, #16
 800ce9a:	9309      	str	r3, [sp, #36]	@ 0x24
 800ce9c:	462c      	mov	r4, r5
 800ce9e:	bfa8      	it	ge
 800cea0:	2410      	movge	r4, #16
 800cea2:	f7f3 fb37 	bl	8000514 <__aeabi_ui2d>
 800cea6:	2d09      	cmp	r5, #9
 800cea8:	4682      	mov	sl, r0
 800ceaa:	468b      	mov	fp, r1
 800ceac:	dc13      	bgt.n	800ced6 <_strtod_l+0x3de>
 800ceae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	f43f ae5a 	beq.w	800cb6a <_strtod_l+0x72>
 800ceb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ceb8:	dd78      	ble.n	800cfac <_strtod_l+0x4b4>
 800ceba:	2b16      	cmp	r3, #22
 800cebc:	dc5f      	bgt.n	800cf7e <_strtod_l+0x486>
 800cebe:	4972      	ldr	r1, [pc, #456]	@ (800d088 <_strtod_l+0x590>)
 800cec0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cec4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cec8:	4652      	mov	r2, sl
 800ceca:	465b      	mov	r3, fp
 800cecc:	f7f3 fb9c 	bl	8000608 <__aeabi_dmul>
 800ced0:	4682      	mov	sl, r0
 800ced2:	468b      	mov	fp, r1
 800ced4:	e649      	b.n	800cb6a <_strtod_l+0x72>
 800ced6:	4b6c      	ldr	r3, [pc, #432]	@ (800d088 <_strtod_l+0x590>)
 800ced8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cedc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 800cee0:	f7f3 fb92 	bl	8000608 <__aeabi_dmul>
 800cee4:	4682      	mov	sl, r0
 800cee6:	4638      	mov	r0, r7
 800cee8:	468b      	mov	fp, r1
 800ceea:	f7f3 fb13 	bl	8000514 <__aeabi_ui2d>
 800ceee:	4602      	mov	r2, r0
 800cef0:	460b      	mov	r3, r1
 800cef2:	4650      	mov	r0, sl
 800cef4:	4659      	mov	r1, fp
 800cef6:	f7f3 f9d1 	bl	800029c <__adddf3>
 800cefa:	2d0f      	cmp	r5, #15
 800cefc:	4682      	mov	sl, r0
 800cefe:	468b      	mov	fp, r1
 800cf00:	ddd5      	ble.n	800ceae <_strtod_l+0x3b6>
 800cf02:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cf04:	1b2c      	subs	r4, r5, r4
 800cf06:	441c      	add	r4, r3
 800cf08:	2c00      	cmp	r4, #0
 800cf0a:	f340 8093 	ble.w	800d034 <_strtod_l+0x53c>
 800cf0e:	f014 030f 	ands.w	r3, r4, #15
 800cf12:	d00a      	beq.n	800cf2a <_strtod_l+0x432>
 800cf14:	495c      	ldr	r1, [pc, #368]	@ (800d088 <_strtod_l+0x590>)
 800cf16:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800cf1a:	4652      	mov	r2, sl
 800cf1c:	465b      	mov	r3, fp
 800cf1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf22:	f7f3 fb71 	bl	8000608 <__aeabi_dmul>
 800cf26:	4682      	mov	sl, r0
 800cf28:	468b      	mov	fp, r1
 800cf2a:	f034 040f 	bics.w	r4, r4, #15
 800cf2e:	d073      	beq.n	800d018 <_strtod_l+0x520>
 800cf30:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800cf34:	dd49      	ble.n	800cfca <_strtod_l+0x4d2>
 800cf36:	2400      	movs	r4, #0
 800cf38:	46a0      	mov	r8, r4
 800cf3a:	940b      	str	r4, [sp, #44]	@ 0x2c
 800cf3c:	46a1      	mov	r9, r4
 800cf3e:	9a05      	ldr	r2, [sp, #20]
 800cf40:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 800d090 <_strtod_l+0x598>
 800cf44:	2322      	movs	r3, #34	@ 0x22
 800cf46:	6013      	str	r3, [r2, #0]
 800cf48:	f04f 0a00 	mov.w	sl, #0
 800cf4c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f43f ae0b 	beq.w	800cb6a <_strtod_l+0x72>
 800cf54:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800cf56:	9805      	ldr	r0, [sp, #20]
 800cf58:	f002 fe52 	bl	800fc00 <_Bfree>
 800cf5c:	9805      	ldr	r0, [sp, #20]
 800cf5e:	4649      	mov	r1, r9
 800cf60:	f002 fe4e 	bl	800fc00 <_Bfree>
 800cf64:	9805      	ldr	r0, [sp, #20]
 800cf66:	4641      	mov	r1, r8
 800cf68:	f002 fe4a 	bl	800fc00 <_Bfree>
 800cf6c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800cf6e:	9805      	ldr	r0, [sp, #20]
 800cf70:	f002 fe46 	bl	800fc00 <_Bfree>
 800cf74:	9805      	ldr	r0, [sp, #20]
 800cf76:	4621      	mov	r1, r4
 800cf78:	f002 fe42 	bl	800fc00 <_Bfree>
 800cf7c:	e5f5      	b.n	800cb6a <_strtod_l+0x72>
 800cf7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cf80:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800cf84:	4293      	cmp	r3, r2
 800cf86:	dbbc      	blt.n	800cf02 <_strtod_l+0x40a>
 800cf88:	4c3f      	ldr	r4, [pc, #252]	@ (800d088 <_strtod_l+0x590>)
 800cf8a:	f1c5 050f 	rsb	r5, r5, #15
 800cf8e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800cf92:	4652      	mov	r2, sl
 800cf94:	465b      	mov	r3, fp
 800cf96:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cf9a:	f7f3 fb35 	bl	8000608 <__aeabi_dmul>
 800cf9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfa0:	1b5d      	subs	r5, r3, r5
 800cfa2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800cfa6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800cfaa:	e78f      	b.n	800cecc <_strtod_l+0x3d4>
 800cfac:	3316      	adds	r3, #22
 800cfae:	dba8      	blt.n	800cf02 <_strtod_l+0x40a>
 800cfb0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cfb2:	eba3 0808 	sub.w	r8, r3, r8
 800cfb6:	4b34      	ldr	r3, [pc, #208]	@ (800d088 <_strtod_l+0x590>)
 800cfb8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800cfbc:	e9d8 2300 	ldrd	r2, r3, [r8]
 800cfc0:	4650      	mov	r0, sl
 800cfc2:	4659      	mov	r1, fp
 800cfc4:	f7f3 fc4a 	bl	800085c <__aeabi_ddiv>
 800cfc8:	e782      	b.n	800ced0 <_strtod_l+0x3d8>
 800cfca:	2300      	movs	r3, #0
 800cfcc:	4f2f      	ldr	r7, [pc, #188]	@ (800d08c <_strtod_l+0x594>)
 800cfce:	1124      	asrs	r4, r4, #4
 800cfd0:	4650      	mov	r0, sl
 800cfd2:	4659      	mov	r1, fp
 800cfd4:	461e      	mov	r6, r3
 800cfd6:	2c01      	cmp	r4, #1
 800cfd8:	dc21      	bgt.n	800d01e <_strtod_l+0x526>
 800cfda:	b10b      	cbz	r3, 800cfe0 <_strtod_l+0x4e8>
 800cfdc:	4682      	mov	sl, r0
 800cfde:	468b      	mov	fp, r1
 800cfe0:	492a      	ldr	r1, [pc, #168]	@ (800d08c <_strtod_l+0x594>)
 800cfe2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 800cfe6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800cfea:	4652      	mov	r2, sl
 800cfec:	465b      	mov	r3, fp
 800cfee:	e9d1 0100 	ldrd	r0, r1, [r1]
 800cff2:	f7f3 fb09 	bl	8000608 <__aeabi_dmul>
 800cff6:	4b26      	ldr	r3, [pc, #152]	@ (800d090 <_strtod_l+0x598>)
 800cff8:	460a      	mov	r2, r1
 800cffa:	400b      	ands	r3, r1
 800cffc:	4925      	ldr	r1, [pc, #148]	@ (800d094 <_strtod_l+0x59c>)
 800cffe:	428b      	cmp	r3, r1
 800d000:	4682      	mov	sl, r0
 800d002:	d898      	bhi.n	800cf36 <_strtod_l+0x43e>
 800d004:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 800d008:	428b      	cmp	r3, r1
 800d00a:	bf86      	itte	hi
 800d00c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 800d098 <_strtod_l+0x5a0>
 800d010:	f04f 3aff 	movhi.w	sl, #4294967295
 800d014:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 800d018:	2300      	movs	r3, #0
 800d01a:	9308      	str	r3, [sp, #32]
 800d01c:	e076      	b.n	800d10c <_strtod_l+0x614>
 800d01e:	07e2      	lsls	r2, r4, #31
 800d020:	d504      	bpl.n	800d02c <_strtod_l+0x534>
 800d022:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d026:	f7f3 faef 	bl	8000608 <__aeabi_dmul>
 800d02a:	2301      	movs	r3, #1
 800d02c:	3601      	adds	r6, #1
 800d02e:	1064      	asrs	r4, r4, #1
 800d030:	3708      	adds	r7, #8
 800d032:	e7d0      	b.n	800cfd6 <_strtod_l+0x4de>
 800d034:	d0f0      	beq.n	800d018 <_strtod_l+0x520>
 800d036:	4264      	negs	r4, r4
 800d038:	f014 020f 	ands.w	r2, r4, #15
 800d03c:	d00a      	beq.n	800d054 <_strtod_l+0x55c>
 800d03e:	4b12      	ldr	r3, [pc, #72]	@ (800d088 <_strtod_l+0x590>)
 800d040:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d044:	4650      	mov	r0, sl
 800d046:	4659      	mov	r1, fp
 800d048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d04c:	f7f3 fc06 	bl	800085c <__aeabi_ddiv>
 800d050:	4682      	mov	sl, r0
 800d052:	468b      	mov	fp, r1
 800d054:	1124      	asrs	r4, r4, #4
 800d056:	d0df      	beq.n	800d018 <_strtod_l+0x520>
 800d058:	2c1f      	cmp	r4, #31
 800d05a:	dd1f      	ble.n	800d09c <_strtod_l+0x5a4>
 800d05c:	2400      	movs	r4, #0
 800d05e:	46a0      	mov	r8, r4
 800d060:	940b      	str	r4, [sp, #44]	@ 0x2c
 800d062:	46a1      	mov	r9, r4
 800d064:	9a05      	ldr	r2, [sp, #20]
 800d066:	2322      	movs	r3, #34	@ 0x22
 800d068:	f04f 0a00 	mov.w	sl, #0
 800d06c:	f04f 0b00 	mov.w	fp, #0
 800d070:	6013      	str	r3, [r2, #0]
 800d072:	e76b      	b.n	800cf4c <_strtod_l+0x454>
 800d074:	08011b8b 	.word	0x08011b8b
 800d078:	08011d50 	.word	0x08011d50
 800d07c:	08011b83 	.word	0x08011b83
 800d080:	08011bbd 	.word	0x08011bbd
 800d084:	08011d4c 	.word	0x08011d4c
 800d088:	08011ed8 	.word	0x08011ed8
 800d08c:	08011eb0 	.word	0x08011eb0
 800d090:	7ff00000 	.word	0x7ff00000
 800d094:	7ca00000 	.word	0x7ca00000
 800d098:	7fefffff 	.word	0x7fefffff
 800d09c:	f014 0310 	ands.w	r3, r4, #16
 800d0a0:	bf18      	it	ne
 800d0a2:	236a      	movne	r3, #106	@ 0x6a
 800d0a4:	4ea9      	ldr	r6, [pc, #676]	@ (800d34c <_strtod_l+0x854>)
 800d0a6:	9308      	str	r3, [sp, #32]
 800d0a8:	4650      	mov	r0, sl
 800d0aa:	4659      	mov	r1, fp
 800d0ac:	2300      	movs	r3, #0
 800d0ae:	07e7      	lsls	r7, r4, #31
 800d0b0:	d504      	bpl.n	800d0bc <_strtod_l+0x5c4>
 800d0b2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800d0b6:	f7f3 faa7 	bl	8000608 <__aeabi_dmul>
 800d0ba:	2301      	movs	r3, #1
 800d0bc:	1064      	asrs	r4, r4, #1
 800d0be:	f106 0608 	add.w	r6, r6, #8
 800d0c2:	d1f4      	bne.n	800d0ae <_strtod_l+0x5b6>
 800d0c4:	b10b      	cbz	r3, 800d0ca <_strtod_l+0x5d2>
 800d0c6:	4682      	mov	sl, r0
 800d0c8:	468b      	mov	fp, r1
 800d0ca:	9b08      	ldr	r3, [sp, #32]
 800d0cc:	b1b3      	cbz	r3, 800d0fc <_strtod_l+0x604>
 800d0ce:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800d0d2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	4659      	mov	r1, fp
 800d0da:	dd0f      	ble.n	800d0fc <_strtod_l+0x604>
 800d0dc:	2b1f      	cmp	r3, #31
 800d0de:	dd56      	ble.n	800d18e <_strtod_l+0x696>
 800d0e0:	2b34      	cmp	r3, #52	@ 0x34
 800d0e2:	bfde      	ittt	le
 800d0e4:	f04f 33ff 	movle.w	r3, #4294967295
 800d0e8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 800d0ec:	4093      	lslle	r3, r2
 800d0ee:	f04f 0a00 	mov.w	sl, #0
 800d0f2:	bfcc      	ite	gt
 800d0f4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 800d0f8:	ea03 0b01 	andle.w	fp, r3, r1
 800d0fc:	2200      	movs	r2, #0
 800d0fe:	2300      	movs	r3, #0
 800d100:	4650      	mov	r0, sl
 800d102:	4659      	mov	r1, fp
 800d104:	f7f3 fce8 	bl	8000ad8 <__aeabi_dcmpeq>
 800d108:	2800      	cmp	r0, #0
 800d10a:	d1a7      	bne.n	800d05c <_strtod_l+0x564>
 800d10c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d10e:	9300      	str	r3, [sp, #0]
 800d110:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800d112:	9805      	ldr	r0, [sp, #20]
 800d114:	462b      	mov	r3, r5
 800d116:	464a      	mov	r2, r9
 800d118:	f002 fdda 	bl	800fcd0 <__s2b>
 800d11c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800d11e:	2800      	cmp	r0, #0
 800d120:	f43f af09 	beq.w	800cf36 <_strtod_l+0x43e>
 800d124:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d126:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d128:	2a00      	cmp	r2, #0
 800d12a:	eba3 0308 	sub.w	r3, r3, r8
 800d12e:	bfa8      	it	ge
 800d130:	2300      	movge	r3, #0
 800d132:	9312      	str	r3, [sp, #72]	@ 0x48
 800d134:	2400      	movs	r4, #0
 800d136:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800d13a:	9316      	str	r3, [sp, #88]	@ 0x58
 800d13c:	46a0      	mov	r8, r4
 800d13e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d140:	9805      	ldr	r0, [sp, #20]
 800d142:	6859      	ldr	r1, [r3, #4]
 800d144:	f002 fd1c 	bl	800fb80 <_Balloc>
 800d148:	4681      	mov	r9, r0
 800d14a:	2800      	cmp	r0, #0
 800d14c:	f43f aef7 	beq.w	800cf3e <_strtod_l+0x446>
 800d150:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d152:	691a      	ldr	r2, [r3, #16]
 800d154:	3202      	adds	r2, #2
 800d156:	f103 010c 	add.w	r1, r3, #12
 800d15a:	0092      	lsls	r2, r2, #2
 800d15c:	300c      	adds	r0, #12
 800d15e:	f001 fa54 	bl	800e60a <memcpy>
 800d162:	ec4b ab10 	vmov	d0, sl, fp
 800d166:	9805      	ldr	r0, [sp, #20]
 800d168:	aa1c      	add	r2, sp, #112	@ 0x70
 800d16a:	a91b      	add	r1, sp, #108	@ 0x6c
 800d16c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800d170:	f003 f8e2 	bl	8010338 <__d2b>
 800d174:	901a      	str	r0, [sp, #104]	@ 0x68
 800d176:	2800      	cmp	r0, #0
 800d178:	f43f aee1 	beq.w	800cf3e <_strtod_l+0x446>
 800d17c:	9805      	ldr	r0, [sp, #20]
 800d17e:	2101      	movs	r1, #1
 800d180:	f002 fe3c 	bl	800fdfc <__i2b>
 800d184:	4680      	mov	r8, r0
 800d186:	b948      	cbnz	r0, 800d19c <_strtod_l+0x6a4>
 800d188:	f04f 0800 	mov.w	r8, #0
 800d18c:	e6d7      	b.n	800cf3e <_strtod_l+0x446>
 800d18e:	f04f 32ff 	mov.w	r2, #4294967295
 800d192:	fa02 f303 	lsl.w	r3, r2, r3
 800d196:	ea03 0a0a 	and.w	sl, r3, sl
 800d19a:	e7af      	b.n	800d0fc <_strtod_l+0x604>
 800d19c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800d19e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800d1a0:	2d00      	cmp	r5, #0
 800d1a2:	bfab      	itete	ge
 800d1a4:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800d1a6:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800d1a8:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800d1aa:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800d1ac:	bfac      	ite	ge
 800d1ae:	18ef      	addge	r7, r5, r3
 800d1b0:	1b5e      	sublt	r6, r3, r5
 800d1b2:	9b08      	ldr	r3, [sp, #32]
 800d1b4:	1aed      	subs	r5, r5, r3
 800d1b6:	4415      	add	r5, r2
 800d1b8:	4b65      	ldr	r3, [pc, #404]	@ (800d350 <_strtod_l+0x858>)
 800d1ba:	3d01      	subs	r5, #1
 800d1bc:	429d      	cmp	r5, r3
 800d1be:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800d1c2:	da50      	bge.n	800d266 <_strtod_l+0x76e>
 800d1c4:	1b5b      	subs	r3, r3, r5
 800d1c6:	2b1f      	cmp	r3, #31
 800d1c8:	eba2 0203 	sub.w	r2, r2, r3
 800d1cc:	f04f 0101 	mov.w	r1, #1
 800d1d0:	dc3d      	bgt.n	800d24e <_strtod_l+0x756>
 800d1d2:	fa01 f303 	lsl.w	r3, r1, r3
 800d1d6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d1d8:	2300      	movs	r3, #0
 800d1da:	9310      	str	r3, [sp, #64]	@ 0x40
 800d1dc:	18bd      	adds	r5, r7, r2
 800d1de:	9b08      	ldr	r3, [sp, #32]
 800d1e0:	42af      	cmp	r7, r5
 800d1e2:	4416      	add	r6, r2
 800d1e4:	441e      	add	r6, r3
 800d1e6:	463b      	mov	r3, r7
 800d1e8:	bfa8      	it	ge
 800d1ea:	462b      	movge	r3, r5
 800d1ec:	42b3      	cmp	r3, r6
 800d1ee:	bfa8      	it	ge
 800d1f0:	4633      	movge	r3, r6
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	bfc2      	ittt	gt
 800d1f6:	1aed      	subgt	r5, r5, r3
 800d1f8:	1af6      	subgt	r6, r6, r3
 800d1fa:	1aff      	subgt	r7, r7, r3
 800d1fc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800d1fe:	2b00      	cmp	r3, #0
 800d200:	dd16      	ble.n	800d230 <_strtod_l+0x738>
 800d202:	4641      	mov	r1, r8
 800d204:	9805      	ldr	r0, [sp, #20]
 800d206:	461a      	mov	r2, r3
 800d208:	f002 feb0 	bl	800ff6c <__pow5mult>
 800d20c:	4680      	mov	r8, r0
 800d20e:	2800      	cmp	r0, #0
 800d210:	d0ba      	beq.n	800d188 <_strtod_l+0x690>
 800d212:	4601      	mov	r1, r0
 800d214:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800d216:	9805      	ldr	r0, [sp, #20]
 800d218:	f002 fe06 	bl	800fe28 <__multiply>
 800d21c:	900a      	str	r0, [sp, #40]	@ 0x28
 800d21e:	2800      	cmp	r0, #0
 800d220:	f43f ae8d 	beq.w	800cf3e <_strtod_l+0x446>
 800d224:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d226:	9805      	ldr	r0, [sp, #20]
 800d228:	f002 fcea 	bl	800fc00 <_Bfree>
 800d22c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d22e:	931a      	str	r3, [sp, #104]	@ 0x68
 800d230:	2d00      	cmp	r5, #0
 800d232:	dc1d      	bgt.n	800d270 <_strtod_l+0x778>
 800d234:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d236:	2b00      	cmp	r3, #0
 800d238:	dd23      	ble.n	800d282 <_strtod_l+0x78a>
 800d23a:	4649      	mov	r1, r9
 800d23c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800d23e:	9805      	ldr	r0, [sp, #20]
 800d240:	f002 fe94 	bl	800ff6c <__pow5mult>
 800d244:	4681      	mov	r9, r0
 800d246:	b9e0      	cbnz	r0, 800d282 <_strtod_l+0x78a>
 800d248:	f04f 0900 	mov.w	r9, #0
 800d24c:	e677      	b.n	800cf3e <_strtod_l+0x446>
 800d24e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800d252:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800d256:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800d25a:	35e2      	adds	r5, #226	@ 0xe2
 800d25c:	fa01 f305 	lsl.w	r3, r1, r5
 800d260:	9310      	str	r3, [sp, #64]	@ 0x40
 800d262:	9113      	str	r1, [sp, #76]	@ 0x4c
 800d264:	e7ba      	b.n	800d1dc <_strtod_l+0x6e4>
 800d266:	2300      	movs	r3, #0
 800d268:	9310      	str	r3, [sp, #64]	@ 0x40
 800d26a:	2301      	movs	r3, #1
 800d26c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800d26e:	e7b5      	b.n	800d1dc <_strtod_l+0x6e4>
 800d270:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d272:	9805      	ldr	r0, [sp, #20]
 800d274:	462a      	mov	r2, r5
 800d276:	f002 fed3 	bl	8010020 <__lshift>
 800d27a:	901a      	str	r0, [sp, #104]	@ 0x68
 800d27c:	2800      	cmp	r0, #0
 800d27e:	d1d9      	bne.n	800d234 <_strtod_l+0x73c>
 800d280:	e65d      	b.n	800cf3e <_strtod_l+0x446>
 800d282:	2e00      	cmp	r6, #0
 800d284:	dd07      	ble.n	800d296 <_strtod_l+0x79e>
 800d286:	4649      	mov	r1, r9
 800d288:	9805      	ldr	r0, [sp, #20]
 800d28a:	4632      	mov	r2, r6
 800d28c:	f002 fec8 	bl	8010020 <__lshift>
 800d290:	4681      	mov	r9, r0
 800d292:	2800      	cmp	r0, #0
 800d294:	d0d8      	beq.n	800d248 <_strtod_l+0x750>
 800d296:	2f00      	cmp	r7, #0
 800d298:	dd08      	ble.n	800d2ac <_strtod_l+0x7b4>
 800d29a:	4641      	mov	r1, r8
 800d29c:	9805      	ldr	r0, [sp, #20]
 800d29e:	463a      	mov	r2, r7
 800d2a0:	f002 febe 	bl	8010020 <__lshift>
 800d2a4:	4680      	mov	r8, r0
 800d2a6:	2800      	cmp	r0, #0
 800d2a8:	f43f ae49 	beq.w	800cf3e <_strtod_l+0x446>
 800d2ac:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d2ae:	9805      	ldr	r0, [sp, #20]
 800d2b0:	464a      	mov	r2, r9
 800d2b2:	f002 ff3d 	bl	8010130 <__mdiff>
 800d2b6:	4604      	mov	r4, r0
 800d2b8:	2800      	cmp	r0, #0
 800d2ba:	f43f ae40 	beq.w	800cf3e <_strtod_l+0x446>
 800d2be:	68c3      	ldr	r3, [r0, #12]
 800d2c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800d2c2:	2300      	movs	r3, #0
 800d2c4:	60c3      	str	r3, [r0, #12]
 800d2c6:	4641      	mov	r1, r8
 800d2c8:	f002 ff16 	bl	80100f8 <__mcmp>
 800d2cc:	2800      	cmp	r0, #0
 800d2ce:	da45      	bge.n	800d35c <_strtod_l+0x864>
 800d2d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d2d2:	ea53 030a 	orrs.w	r3, r3, sl
 800d2d6:	d16b      	bne.n	800d3b0 <_strtod_l+0x8b8>
 800d2d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d2dc:	2b00      	cmp	r3, #0
 800d2de:	d167      	bne.n	800d3b0 <_strtod_l+0x8b8>
 800d2e0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d2e4:	0d1b      	lsrs	r3, r3, #20
 800d2e6:	051b      	lsls	r3, r3, #20
 800d2e8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d2ec:	d960      	bls.n	800d3b0 <_strtod_l+0x8b8>
 800d2ee:	6963      	ldr	r3, [r4, #20]
 800d2f0:	b913      	cbnz	r3, 800d2f8 <_strtod_l+0x800>
 800d2f2:	6923      	ldr	r3, [r4, #16]
 800d2f4:	2b01      	cmp	r3, #1
 800d2f6:	dd5b      	ble.n	800d3b0 <_strtod_l+0x8b8>
 800d2f8:	4621      	mov	r1, r4
 800d2fa:	2201      	movs	r2, #1
 800d2fc:	9805      	ldr	r0, [sp, #20]
 800d2fe:	f002 fe8f 	bl	8010020 <__lshift>
 800d302:	4641      	mov	r1, r8
 800d304:	4604      	mov	r4, r0
 800d306:	f002 fef7 	bl	80100f8 <__mcmp>
 800d30a:	2800      	cmp	r0, #0
 800d30c:	dd50      	ble.n	800d3b0 <_strtod_l+0x8b8>
 800d30e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d312:	9a08      	ldr	r2, [sp, #32]
 800d314:	0d1b      	lsrs	r3, r3, #20
 800d316:	051b      	lsls	r3, r3, #20
 800d318:	2a00      	cmp	r2, #0
 800d31a:	d06a      	beq.n	800d3f2 <_strtod_l+0x8fa>
 800d31c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800d320:	d867      	bhi.n	800d3f2 <_strtod_l+0x8fa>
 800d322:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800d326:	f67f ae9d 	bls.w	800d064 <_strtod_l+0x56c>
 800d32a:	4b0a      	ldr	r3, [pc, #40]	@ (800d354 <_strtod_l+0x85c>)
 800d32c:	4650      	mov	r0, sl
 800d32e:	4659      	mov	r1, fp
 800d330:	2200      	movs	r2, #0
 800d332:	f7f3 f969 	bl	8000608 <__aeabi_dmul>
 800d336:	4b08      	ldr	r3, [pc, #32]	@ (800d358 <_strtod_l+0x860>)
 800d338:	400b      	ands	r3, r1
 800d33a:	4682      	mov	sl, r0
 800d33c:	468b      	mov	fp, r1
 800d33e:	2b00      	cmp	r3, #0
 800d340:	f47f ae08 	bne.w	800cf54 <_strtod_l+0x45c>
 800d344:	9a05      	ldr	r2, [sp, #20]
 800d346:	2322      	movs	r3, #34	@ 0x22
 800d348:	6013      	str	r3, [r2, #0]
 800d34a:	e603      	b.n	800cf54 <_strtod_l+0x45c>
 800d34c:	08011d78 	.word	0x08011d78
 800d350:	fffffc02 	.word	0xfffffc02
 800d354:	39500000 	.word	0x39500000
 800d358:	7ff00000 	.word	0x7ff00000
 800d35c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d360:	d165      	bne.n	800d42e <_strtod_l+0x936>
 800d362:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800d364:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d368:	b35a      	cbz	r2, 800d3c2 <_strtod_l+0x8ca>
 800d36a:	4a9f      	ldr	r2, [pc, #636]	@ (800d5e8 <_strtod_l+0xaf0>)
 800d36c:	4293      	cmp	r3, r2
 800d36e:	d12b      	bne.n	800d3c8 <_strtod_l+0x8d0>
 800d370:	9b08      	ldr	r3, [sp, #32]
 800d372:	4651      	mov	r1, sl
 800d374:	b303      	cbz	r3, 800d3b8 <_strtod_l+0x8c0>
 800d376:	4b9d      	ldr	r3, [pc, #628]	@ (800d5ec <_strtod_l+0xaf4>)
 800d378:	465a      	mov	r2, fp
 800d37a:	4013      	ands	r3, r2
 800d37c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800d380:	f04f 32ff 	mov.w	r2, #4294967295
 800d384:	d81b      	bhi.n	800d3be <_strtod_l+0x8c6>
 800d386:	0d1b      	lsrs	r3, r3, #20
 800d388:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800d38c:	fa02 f303 	lsl.w	r3, r2, r3
 800d390:	4299      	cmp	r1, r3
 800d392:	d119      	bne.n	800d3c8 <_strtod_l+0x8d0>
 800d394:	4b96      	ldr	r3, [pc, #600]	@ (800d5f0 <_strtod_l+0xaf8>)
 800d396:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d398:	429a      	cmp	r2, r3
 800d39a:	d102      	bne.n	800d3a2 <_strtod_l+0x8aa>
 800d39c:	3101      	adds	r1, #1
 800d39e:	f43f adce 	beq.w	800cf3e <_strtod_l+0x446>
 800d3a2:	4b92      	ldr	r3, [pc, #584]	@ (800d5ec <_strtod_l+0xaf4>)
 800d3a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3a6:	401a      	ands	r2, r3
 800d3a8:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800d3ac:	f04f 0a00 	mov.w	sl, #0
 800d3b0:	9b08      	ldr	r3, [sp, #32]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1b9      	bne.n	800d32a <_strtod_l+0x832>
 800d3b6:	e5cd      	b.n	800cf54 <_strtod_l+0x45c>
 800d3b8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3bc:	e7e8      	b.n	800d390 <_strtod_l+0x898>
 800d3be:	4613      	mov	r3, r2
 800d3c0:	e7e6      	b.n	800d390 <_strtod_l+0x898>
 800d3c2:	ea53 030a 	orrs.w	r3, r3, sl
 800d3c6:	d0a2      	beq.n	800d30e <_strtod_l+0x816>
 800d3c8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d3ca:	b1db      	cbz	r3, 800d404 <_strtod_l+0x90c>
 800d3cc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800d3ce:	4213      	tst	r3, r2
 800d3d0:	d0ee      	beq.n	800d3b0 <_strtod_l+0x8b8>
 800d3d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d3d4:	9a08      	ldr	r2, [sp, #32]
 800d3d6:	4650      	mov	r0, sl
 800d3d8:	4659      	mov	r1, fp
 800d3da:	b1bb      	cbz	r3, 800d40c <_strtod_l+0x914>
 800d3dc:	f7ff fb6d 	bl	800caba <sulp>
 800d3e0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d3e4:	ec53 2b10 	vmov	r2, r3, d0
 800d3e8:	f7f2 ff58 	bl	800029c <__adddf3>
 800d3ec:	4682      	mov	sl, r0
 800d3ee:	468b      	mov	fp, r1
 800d3f0:	e7de      	b.n	800d3b0 <_strtod_l+0x8b8>
 800d3f2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800d3f6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800d3fa:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800d3fe:	f04f 3aff 	mov.w	sl, #4294967295
 800d402:	e7d5      	b.n	800d3b0 <_strtod_l+0x8b8>
 800d404:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800d406:	ea13 0f0a 	tst.w	r3, sl
 800d40a:	e7e1      	b.n	800d3d0 <_strtod_l+0x8d8>
 800d40c:	f7ff fb55 	bl	800caba <sulp>
 800d410:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d414:	ec53 2b10 	vmov	r2, r3, d0
 800d418:	f7f2 ff3e 	bl	8000298 <__aeabi_dsub>
 800d41c:	2200      	movs	r2, #0
 800d41e:	2300      	movs	r3, #0
 800d420:	4682      	mov	sl, r0
 800d422:	468b      	mov	fp, r1
 800d424:	f7f3 fb58 	bl	8000ad8 <__aeabi_dcmpeq>
 800d428:	2800      	cmp	r0, #0
 800d42a:	d0c1      	beq.n	800d3b0 <_strtod_l+0x8b8>
 800d42c:	e61a      	b.n	800d064 <_strtod_l+0x56c>
 800d42e:	4641      	mov	r1, r8
 800d430:	4620      	mov	r0, r4
 800d432:	f002 ffd9 	bl	80103e8 <__ratio>
 800d436:	ec57 6b10 	vmov	r6, r7, d0
 800d43a:	2200      	movs	r2, #0
 800d43c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800d440:	4630      	mov	r0, r6
 800d442:	4639      	mov	r1, r7
 800d444:	f7f3 fb5c 	bl	8000b00 <__aeabi_dcmple>
 800d448:	2800      	cmp	r0, #0
 800d44a:	d06f      	beq.n	800d52c <_strtod_l+0xa34>
 800d44c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d44e:	2b00      	cmp	r3, #0
 800d450:	d17a      	bne.n	800d548 <_strtod_l+0xa50>
 800d452:	f1ba 0f00 	cmp.w	sl, #0
 800d456:	d158      	bne.n	800d50a <_strtod_l+0xa12>
 800d458:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d45a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d15a      	bne.n	800d518 <_strtod_l+0xa20>
 800d462:	4b64      	ldr	r3, [pc, #400]	@ (800d5f4 <_strtod_l+0xafc>)
 800d464:	2200      	movs	r2, #0
 800d466:	4630      	mov	r0, r6
 800d468:	4639      	mov	r1, r7
 800d46a:	f7f3 fb3f 	bl	8000aec <__aeabi_dcmplt>
 800d46e:	2800      	cmp	r0, #0
 800d470:	d159      	bne.n	800d526 <_strtod_l+0xa2e>
 800d472:	4630      	mov	r0, r6
 800d474:	4639      	mov	r1, r7
 800d476:	4b60      	ldr	r3, [pc, #384]	@ (800d5f8 <_strtod_l+0xb00>)
 800d478:	2200      	movs	r2, #0
 800d47a:	f7f3 f8c5 	bl	8000608 <__aeabi_dmul>
 800d47e:	4606      	mov	r6, r0
 800d480:	460f      	mov	r7, r1
 800d482:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800d486:	9606      	str	r6, [sp, #24]
 800d488:	9307      	str	r3, [sp, #28]
 800d48a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d48e:	4d57      	ldr	r5, [pc, #348]	@ (800d5ec <_strtod_l+0xaf4>)
 800d490:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d494:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d496:	401d      	ands	r5, r3
 800d498:	4b58      	ldr	r3, [pc, #352]	@ (800d5fc <_strtod_l+0xb04>)
 800d49a:	429d      	cmp	r5, r3
 800d49c:	f040 80b2 	bne.w	800d604 <_strtod_l+0xb0c>
 800d4a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d4a2:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800d4a6:	ec4b ab10 	vmov	d0, sl, fp
 800d4aa:	f002 fed5 	bl	8010258 <__ulp>
 800d4ae:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800d4b2:	ec51 0b10 	vmov	r0, r1, d0
 800d4b6:	f7f3 f8a7 	bl	8000608 <__aeabi_dmul>
 800d4ba:	4652      	mov	r2, sl
 800d4bc:	465b      	mov	r3, fp
 800d4be:	f7f2 feed 	bl	800029c <__adddf3>
 800d4c2:	460b      	mov	r3, r1
 800d4c4:	4949      	ldr	r1, [pc, #292]	@ (800d5ec <_strtod_l+0xaf4>)
 800d4c6:	4a4e      	ldr	r2, [pc, #312]	@ (800d600 <_strtod_l+0xb08>)
 800d4c8:	4019      	ands	r1, r3
 800d4ca:	4291      	cmp	r1, r2
 800d4cc:	4682      	mov	sl, r0
 800d4ce:	d942      	bls.n	800d556 <_strtod_l+0xa5e>
 800d4d0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800d4d2:	4b47      	ldr	r3, [pc, #284]	@ (800d5f0 <_strtod_l+0xaf8>)
 800d4d4:	429a      	cmp	r2, r3
 800d4d6:	d103      	bne.n	800d4e0 <_strtod_l+0x9e8>
 800d4d8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d4da:	3301      	adds	r3, #1
 800d4dc:	f43f ad2f 	beq.w	800cf3e <_strtod_l+0x446>
 800d4e0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800d5f0 <_strtod_l+0xaf8>
 800d4e4:	f04f 3aff 	mov.w	sl, #4294967295
 800d4e8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800d4ea:	9805      	ldr	r0, [sp, #20]
 800d4ec:	f002 fb88 	bl	800fc00 <_Bfree>
 800d4f0:	9805      	ldr	r0, [sp, #20]
 800d4f2:	4649      	mov	r1, r9
 800d4f4:	f002 fb84 	bl	800fc00 <_Bfree>
 800d4f8:	9805      	ldr	r0, [sp, #20]
 800d4fa:	4641      	mov	r1, r8
 800d4fc:	f002 fb80 	bl	800fc00 <_Bfree>
 800d500:	9805      	ldr	r0, [sp, #20]
 800d502:	4621      	mov	r1, r4
 800d504:	f002 fb7c 	bl	800fc00 <_Bfree>
 800d508:	e619      	b.n	800d13e <_strtod_l+0x646>
 800d50a:	f1ba 0f01 	cmp.w	sl, #1
 800d50e:	d103      	bne.n	800d518 <_strtod_l+0xa20>
 800d510:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d512:	2b00      	cmp	r3, #0
 800d514:	f43f ada6 	beq.w	800d064 <_strtod_l+0x56c>
 800d518:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800d5c8 <_strtod_l+0xad0>
 800d51c:	4f35      	ldr	r7, [pc, #212]	@ (800d5f4 <_strtod_l+0xafc>)
 800d51e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d522:	2600      	movs	r6, #0
 800d524:	e7b1      	b.n	800d48a <_strtod_l+0x992>
 800d526:	4f34      	ldr	r7, [pc, #208]	@ (800d5f8 <_strtod_l+0xb00>)
 800d528:	2600      	movs	r6, #0
 800d52a:	e7aa      	b.n	800d482 <_strtod_l+0x98a>
 800d52c:	4b32      	ldr	r3, [pc, #200]	@ (800d5f8 <_strtod_l+0xb00>)
 800d52e:	4630      	mov	r0, r6
 800d530:	4639      	mov	r1, r7
 800d532:	2200      	movs	r2, #0
 800d534:	f7f3 f868 	bl	8000608 <__aeabi_dmul>
 800d538:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d53a:	4606      	mov	r6, r0
 800d53c:	460f      	mov	r7, r1
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d09f      	beq.n	800d482 <_strtod_l+0x98a>
 800d542:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800d546:	e7a0      	b.n	800d48a <_strtod_l+0x992>
 800d548:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800d5d0 <_strtod_l+0xad8>
 800d54c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800d550:	ec57 6b17 	vmov	r6, r7, d7
 800d554:	e799      	b.n	800d48a <_strtod_l+0x992>
 800d556:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800d55a:	9b08      	ldr	r3, [sp, #32]
 800d55c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800d560:	2b00      	cmp	r3, #0
 800d562:	d1c1      	bne.n	800d4e8 <_strtod_l+0x9f0>
 800d564:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800d568:	0d1b      	lsrs	r3, r3, #20
 800d56a:	051b      	lsls	r3, r3, #20
 800d56c:	429d      	cmp	r5, r3
 800d56e:	d1bb      	bne.n	800d4e8 <_strtod_l+0x9f0>
 800d570:	4630      	mov	r0, r6
 800d572:	4639      	mov	r1, r7
 800d574:	f7f3 fbf8 	bl	8000d68 <__aeabi_d2lz>
 800d578:	f7f3 f818 	bl	80005ac <__aeabi_l2d>
 800d57c:	4602      	mov	r2, r0
 800d57e:	460b      	mov	r3, r1
 800d580:	4630      	mov	r0, r6
 800d582:	4639      	mov	r1, r7
 800d584:	f7f2 fe88 	bl	8000298 <__aeabi_dsub>
 800d588:	460b      	mov	r3, r1
 800d58a:	4602      	mov	r2, r0
 800d58c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800d590:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800d594:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d596:	ea46 060a 	orr.w	r6, r6, sl
 800d59a:	431e      	orrs	r6, r3
 800d59c:	d06f      	beq.n	800d67e <_strtod_l+0xb86>
 800d59e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d5d8 <_strtod_l+0xae0>)
 800d5a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5a4:	f7f3 faa2 	bl	8000aec <__aeabi_dcmplt>
 800d5a8:	2800      	cmp	r0, #0
 800d5aa:	f47f acd3 	bne.w	800cf54 <_strtod_l+0x45c>
 800d5ae:	a30c      	add	r3, pc, #48	@ (adr r3, 800d5e0 <_strtod_l+0xae8>)
 800d5b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5b4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800d5b8:	f7f3 fab6 	bl	8000b28 <__aeabi_dcmpgt>
 800d5bc:	2800      	cmp	r0, #0
 800d5be:	d093      	beq.n	800d4e8 <_strtod_l+0x9f0>
 800d5c0:	e4c8      	b.n	800cf54 <_strtod_l+0x45c>
 800d5c2:	bf00      	nop
 800d5c4:	f3af 8000 	nop.w
 800d5c8:	00000000 	.word	0x00000000
 800d5cc:	bff00000 	.word	0xbff00000
 800d5d0:	00000000 	.word	0x00000000
 800d5d4:	3ff00000 	.word	0x3ff00000
 800d5d8:	94a03595 	.word	0x94a03595
 800d5dc:	3fdfffff 	.word	0x3fdfffff
 800d5e0:	35afe535 	.word	0x35afe535
 800d5e4:	3fe00000 	.word	0x3fe00000
 800d5e8:	000fffff 	.word	0x000fffff
 800d5ec:	7ff00000 	.word	0x7ff00000
 800d5f0:	7fefffff 	.word	0x7fefffff
 800d5f4:	3ff00000 	.word	0x3ff00000
 800d5f8:	3fe00000 	.word	0x3fe00000
 800d5fc:	7fe00000 	.word	0x7fe00000
 800d600:	7c9fffff 	.word	0x7c9fffff
 800d604:	9b08      	ldr	r3, [sp, #32]
 800d606:	b323      	cbz	r3, 800d652 <_strtod_l+0xb5a>
 800d608:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800d60c:	d821      	bhi.n	800d652 <_strtod_l+0xb5a>
 800d60e:	a328      	add	r3, pc, #160	@ (adr r3, 800d6b0 <_strtod_l+0xbb8>)
 800d610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d614:	4630      	mov	r0, r6
 800d616:	4639      	mov	r1, r7
 800d618:	f7f3 fa72 	bl	8000b00 <__aeabi_dcmple>
 800d61c:	b1a0      	cbz	r0, 800d648 <_strtod_l+0xb50>
 800d61e:	4639      	mov	r1, r7
 800d620:	4630      	mov	r0, r6
 800d622:	f7f3 fac9 	bl	8000bb8 <__aeabi_d2uiz>
 800d626:	2801      	cmp	r0, #1
 800d628:	bf38      	it	cc
 800d62a:	2001      	movcc	r0, #1
 800d62c:	f7f2 ff72 	bl	8000514 <__aeabi_ui2d>
 800d630:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800d632:	4606      	mov	r6, r0
 800d634:	460f      	mov	r7, r1
 800d636:	b9fb      	cbnz	r3, 800d678 <_strtod_l+0xb80>
 800d638:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800d63c:	9014      	str	r0, [sp, #80]	@ 0x50
 800d63e:	9315      	str	r3, [sp, #84]	@ 0x54
 800d640:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800d644:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800d648:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800d64a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800d64e:	1b5b      	subs	r3, r3, r5
 800d650:	9311      	str	r3, [sp, #68]	@ 0x44
 800d652:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800d656:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800d65a:	f002 fdfd 	bl	8010258 <__ulp>
 800d65e:	4650      	mov	r0, sl
 800d660:	ec53 2b10 	vmov	r2, r3, d0
 800d664:	4659      	mov	r1, fp
 800d666:	f7f2 ffcf 	bl	8000608 <__aeabi_dmul>
 800d66a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800d66e:	f7f2 fe15 	bl	800029c <__adddf3>
 800d672:	4682      	mov	sl, r0
 800d674:	468b      	mov	fp, r1
 800d676:	e770      	b.n	800d55a <_strtod_l+0xa62>
 800d678:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800d67c:	e7e0      	b.n	800d640 <_strtod_l+0xb48>
 800d67e:	a30e      	add	r3, pc, #56	@ (adr r3, 800d6b8 <_strtod_l+0xbc0>)
 800d680:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d684:	f7f3 fa32 	bl	8000aec <__aeabi_dcmplt>
 800d688:	e798      	b.n	800d5bc <_strtod_l+0xac4>
 800d68a:	2300      	movs	r3, #0
 800d68c:	930e      	str	r3, [sp, #56]	@ 0x38
 800d68e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800d690:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800d692:	6013      	str	r3, [r2, #0]
 800d694:	f7ff ba6d 	b.w	800cb72 <_strtod_l+0x7a>
 800d698:	2a65      	cmp	r2, #101	@ 0x65
 800d69a:	f43f ab68 	beq.w	800cd6e <_strtod_l+0x276>
 800d69e:	2a45      	cmp	r2, #69	@ 0x45
 800d6a0:	f43f ab65 	beq.w	800cd6e <_strtod_l+0x276>
 800d6a4:	2301      	movs	r3, #1
 800d6a6:	f7ff bba0 	b.w	800cdea <_strtod_l+0x2f2>
 800d6aa:	bf00      	nop
 800d6ac:	f3af 8000 	nop.w
 800d6b0:	ffc00000 	.word	0xffc00000
 800d6b4:	41dfffff 	.word	0x41dfffff
 800d6b8:	94a03595 	.word	0x94a03595
 800d6bc:	3fcfffff 	.word	0x3fcfffff

0800d6c0 <strtod>:
 800d6c0:	460a      	mov	r2, r1
 800d6c2:	4601      	mov	r1, r0
 800d6c4:	4802      	ldr	r0, [pc, #8]	@ (800d6d0 <strtod+0x10>)
 800d6c6:	4b03      	ldr	r3, [pc, #12]	@ (800d6d4 <strtod+0x14>)
 800d6c8:	6800      	ldr	r0, [r0, #0]
 800d6ca:	f7ff ba15 	b.w	800caf8 <_strtod_l>
 800d6ce:	bf00      	nop
 800d6d0:	20000274 	.word	0x20000274
 800d6d4:	20000108 	.word	0x20000108

0800d6d8 <_strtol_l.isra.0>:
 800d6d8:	2b24      	cmp	r3, #36	@ 0x24
 800d6da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d6de:	4686      	mov	lr, r0
 800d6e0:	4690      	mov	r8, r2
 800d6e2:	d801      	bhi.n	800d6e8 <_strtol_l.isra.0+0x10>
 800d6e4:	2b01      	cmp	r3, #1
 800d6e6:	d106      	bne.n	800d6f6 <_strtol_l.isra.0+0x1e>
 800d6e8:	f000 ff62 	bl	800e5b0 <__errno>
 800d6ec:	2316      	movs	r3, #22
 800d6ee:	6003      	str	r3, [r0, #0]
 800d6f0:	2000      	movs	r0, #0
 800d6f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d6f6:	4834      	ldr	r0, [pc, #208]	@ (800d7c8 <_strtol_l.isra.0+0xf0>)
 800d6f8:	460d      	mov	r5, r1
 800d6fa:	462a      	mov	r2, r5
 800d6fc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d700:	5d06      	ldrb	r6, [r0, r4]
 800d702:	f016 0608 	ands.w	r6, r6, #8
 800d706:	d1f8      	bne.n	800d6fa <_strtol_l.isra.0+0x22>
 800d708:	2c2d      	cmp	r4, #45	@ 0x2d
 800d70a:	d110      	bne.n	800d72e <_strtol_l.isra.0+0x56>
 800d70c:	782c      	ldrb	r4, [r5, #0]
 800d70e:	2601      	movs	r6, #1
 800d710:	1c95      	adds	r5, r2, #2
 800d712:	f033 0210 	bics.w	r2, r3, #16
 800d716:	d115      	bne.n	800d744 <_strtol_l.isra.0+0x6c>
 800d718:	2c30      	cmp	r4, #48	@ 0x30
 800d71a:	d10d      	bne.n	800d738 <_strtol_l.isra.0+0x60>
 800d71c:	782a      	ldrb	r2, [r5, #0]
 800d71e:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800d722:	2a58      	cmp	r2, #88	@ 0x58
 800d724:	d108      	bne.n	800d738 <_strtol_l.isra.0+0x60>
 800d726:	786c      	ldrb	r4, [r5, #1]
 800d728:	3502      	adds	r5, #2
 800d72a:	2310      	movs	r3, #16
 800d72c:	e00a      	b.n	800d744 <_strtol_l.isra.0+0x6c>
 800d72e:	2c2b      	cmp	r4, #43	@ 0x2b
 800d730:	bf04      	itt	eq
 800d732:	782c      	ldrbeq	r4, [r5, #0]
 800d734:	1c95      	addeq	r5, r2, #2
 800d736:	e7ec      	b.n	800d712 <_strtol_l.isra.0+0x3a>
 800d738:	2b00      	cmp	r3, #0
 800d73a:	d1f6      	bne.n	800d72a <_strtol_l.isra.0+0x52>
 800d73c:	2c30      	cmp	r4, #48	@ 0x30
 800d73e:	bf14      	ite	ne
 800d740:	230a      	movne	r3, #10
 800d742:	2308      	moveq	r3, #8
 800d744:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800d748:	f10c 3cff 	add.w	ip, ip, #4294967295
 800d74c:	2200      	movs	r2, #0
 800d74e:	fbbc f9f3 	udiv	r9, ip, r3
 800d752:	4610      	mov	r0, r2
 800d754:	fb03 ca19 	mls	sl, r3, r9, ip
 800d758:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800d75c:	2f09      	cmp	r7, #9
 800d75e:	d80f      	bhi.n	800d780 <_strtol_l.isra.0+0xa8>
 800d760:	463c      	mov	r4, r7
 800d762:	42a3      	cmp	r3, r4
 800d764:	dd1b      	ble.n	800d79e <_strtol_l.isra.0+0xc6>
 800d766:	1c57      	adds	r7, r2, #1
 800d768:	d007      	beq.n	800d77a <_strtol_l.isra.0+0xa2>
 800d76a:	4581      	cmp	r9, r0
 800d76c:	d314      	bcc.n	800d798 <_strtol_l.isra.0+0xc0>
 800d76e:	d101      	bne.n	800d774 <_strtol_l.isra.0+0x9c>
 800d770:	45a2      	cmp	sl, r4
 800d772:	db11      	blt.n	800d798 <_strtol_l.isra.0+0xc0>
 800d774:	fb00 4003 	mla	r0, r0, r3, r4
 800d778:	2201      	movs	r2, #1
 800d77a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800d77e:	e7eb      	b.n	800d758 <_strtol_l.isra.0+0x80>
 800d780:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800d784:	2f19      	cmp	r7, #25
 800d786:	d801      	bhi.n	800d78c <_strtol_l.isra.0+0xb4>
 800d788:	3c37      	subs	r4, #55	@ 0x37
 800d78a:	e7ea      	b.n	800d762 <_strtol_l.isra.0+0x8a>
 800d78c:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800d790:	2f19      	cmp	r7, #25
 800d792:	d804      	bhi.n	800d79e <_strtol_l.isra.0+0xc6>
 800d794:	3c57      	subs	r4, #87	@ 0x57
 800d796:	e7e4      	b.n	800d762 <_strtol_l.isra.0+0x8a>
 800d798:	f04f 32ff 	mov.w	r2, #4294967295
 800d79c:	e7ed      	b.n	800d77a <_strtol_l.isra.0+0xa2>
 800d79e:	1c53      	adds	r3, r2, #1
 800d7a0:	d108      	bne.n	800d7b4 <_strtol_l.isra.0+0xdc>
 800d7a2:	2322      	movs	r3, #34	@ 0x22
 800d7a4:	f8ce 3000 	str.w	r3, [lr]
 800d7a8:	4660      	mov	r0, ip
 800d7aa:	f1b8 0f00 	cmp.w	r8, #0
 800d7ae:	d0a0      	beq.n	800d6f2 <_strtol_l.isra.0+0x1a>
 800d7b0:	1e69      	subs	r1, r5, #1
 800d7b2:	e006      	b.n	800d7c2 <_strtol_l.isra.0+0xea>
 800d7b4:	b106      	cbz	r6, 800d7b8 <_strtol_l.isra.0+0xe0>
 800d7b6:	4240      	negs	r0, r0
 800d7b8:	f1b8 0f00 	cmp.w	r8, #0
 800d7bc:	d099      	beq.n	800d6f2 <_strtol_l.isra.0+0x1a>
 800d7be:	2a00      	cmp	r2, #0
 800d7c0:	d1f6      	bne.n	800d7b0 <_strtol_l.isra.0+0xd8>
 800d7c2:	f8c8 1000 	str.w	r1, [r8]
 800d7c6:	e794      	b.n	800d6f2 <_strtol_l.isra.0+0x1a>
 800d7c8:	08011da1 	.word	0x08011da1

0800d7cc <strtol>:
 800d7cc:	4613      	mov	r3, r2
 800d7ce:	460a      	mov	r2, r1
 800d7d0:	4601      	mov	r1, r0
 800d7d2:	4802      	ldr	r0, [pc, #8]	@ (800d7dc <strtol+0x10>)
 800d7d4:	6800      	ldr	r0, [r0, #0]
 800d7d6:	f7ff bf7f 	b.w	800d6d8 <_strtol_l.isra.0>
 800d7da:	bf00      	nop
 800d7dc:	20000274 	.word	0x20000274

0800d7e0 <__cvt>:
 800d7e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d7e4:	ec57 6b10 	vmov	r6, r7, d0
 800d7e8:	2f00      	cmp	r7, #0
 800d7ea:	460c      	mov	r4, r1
 800d7ec:	4619      	mov	r1, r3
 800d7ee:	463b      	mov	r3, r7
 800d7f0:	bfbb      	ittet	lt
 800d7f2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800d7f6:	461f      	movlt	r7, r3
 800d7f8:	2300      	movge	r3, #0
 800d7fa:	232d      	movlt	r3, #45	@ 0x2d
 800d7fc:	700b      	strb	r3, [r1, #0]
 800d7fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800d800:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800d804:	4691      	mov	r9, r2
 800d806:	f023 0820 	bic.w	r8, r3, #32
 800d80a:	bfbc      	itt	lt
 800d80c:	4632      	movlt	r2, r6
 800d80e:	4616      	movlt	r6, r2
 800d810:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d814:	d005      	beq.n	800d822 <__cvt+0x42>
 800d816:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800d81a:	d100      	bne.n	800d81e <__cvt+0x3e>
 800d81c:	3401      	adds	r4, #1
 800d81e:	2102      	movs	r1, #2
 800d820:	e000      	b.n	800d824 <__cvt+0x44>
 800d822:	2103      	movs	r1, #3
 800d824:	ab03      	add	r3, sp, #12
 800d826:	9301      	str	r3, [sp, #4]
 800d828:	ab02      	add	r3, sp, #8
 800d82a:	9300      	str	r3, [sp, #0]
 800d82c:	ec47 6b10 	vmov	d0, r6, r7
 800d830:	4653      	mov	r3, sl
 800d832:	4622      	mov	r2, r4
 800d834:	f000 ff88 	bl	800e748 <_dtoa_r>
 800d838:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800d83c:	4605      	mov	r5, r0
 800d83e:	d119      	bne.n	800d874 <__cvt+0x94>
 800d840:	f019 0f01 	tst.w	r9, #1
 800d844:	d00e      	beq.n	800d864 <__cvt+0x84>
 800d846:	eb00 0904 	add.w	r9, r0, r4
 800d84a:	2200      	movs	r2, #0
 800d84c:	2300      	movs	r3, #0
 800d84e:	4630      	mov	r0, r6
 800d850:	4639      	mov	r1, r7
 800d852:	f7f3 f941 	bl	8000ad8 <__aeabi_dcmpeq>
 800d856:	b108      	cbz	r0, 800d85c <__cvt+0x7c>
 800d858:	f8cd 900c 	str.w	r9, [sp, #12]
 800d85c:	2230      	movs	r2, #48	@ 0x30
 800d85e:	9b03      	ldr	r3, [sp, #12]
 800d860:	454b      	cmp	r3, r9
 800d862:	d31e      	bcc.n	800d8a2 <__cvt+0xc2>
 800d864:	9b03      	ldr	r3, [sp, #12]
 800d866:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800d868:	1b5b      	subs	r3, r3, r5
 800d86a:	4628      	mov	r0, r5
 800d86c:	6013      	str	r3, [r2, #0]
 800d86e:	b004      	add	sp, #16
 800d870:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d874:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800d878:	eb00 0904 	add.w	r9, r0, r4
 800d87c:	d1e5      	bne.n	800d84a <__cvt+0x6a>
 800d87e:	7803      	ldrb	r3, [r0, #0]
 800d880:	2b30      	cmp	r3, #48	@ 0x30
 800d882:	d10a      	bne.n	800d89a <__cvt+0xba>
 800d884:	2200      	movs	r2, #0
 800d886:	2300      	movs	r3, #0
 800d888:	4630      	mov	r0, r6
 800d88a:	4639      	mov	r1, r7
 800d88c:	f7f3 f924 	bl	8000ad8 <__aeabi_dcmpeq>
 800d890:	b918      	cbnz	r0, 800d89a <__cvt+0xba>
 800d892:	f1c4 0401 	rsb	r4, r4, #1
 800d896:	f8ca 4000 	str.w	r4, [sl]
 800d89a:	f8da 3000 	ldr.w	r3, [sl]
 800d89e:	4499      	add	r9, r3
 800d8a0:	e7d3      	b.n	800d84a <__cvt+0x6a>
 800d8a2:	1c59      	adds	r1, r3, #1
 800d8a4:	9103      	str	r1, [sp, #12]
 800d8a6:	701a      	strb	r2, [r3, #0]
 800d8a8:	e7d9      	b.n	800d85e <__cvt+0x7e>

0800d8aa <__exponent>:
 800d8aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d8ac:	2900      	cmp	r1, #0
 800d8ae:	bfba      	itte	lt
 800d8b0:	4249      	neglt	r1, r1
 800d8b2:	232d      	movlt	r3, #45	@ 0x2d
 800d8b4:	232b      	movge	r3, #43	@ 0x2b
 800d8b6:	2909      	cmp	r1, #9
 800d8b8:	7002      	strb	r2, [r0, #0]
 800d8ba:	7043      	strb	r3, [r0, #1]
 800d8bc:	dd29      	ble.n	800d912 <__exponent+0x68>
 800d8be:	f10d 0307 	add.w	r3, sp, #7
 800d8c2:	461d      	mov	r5, r3
 800d8c4:	270a      	movs	r7, #10
 800d8c6:	461a      	mov	r2, r3
 800d8c8:	fbb1 f6f7 	udiv	r6, r1, r7
 800d8cc:	fb07 1416 	mls	r4, r7, r6, r1
 800d8d0:	3430      	adds	r4, #48	@ 0x30
 800d8d2:	f802 4c01 	strb.w	r4, [r2, #-1]
 800d8d6:	460c      	mov	r4, r1
 800d8d8:	2c63      	cmp	r4, #99	@ 0x63
 800d8da:	f103 33ff 	add.w	r3, r3, #4294967295
 800d8de:	4631      	mov	r1, r6
 800d8e0:	dcf1      	bgt.n	800d8c6 <__exponent+0x1c>
 800d8e2:	3130      	adds	r1, #48	@ 0x30
 800d8e4:	1e94      	subs	r4, r2, #2
 800d8e6:	f803 1c01 	strb.w	r1, [r3, #-1]
 800d8ea:	1c41      	adds	r1, r0, #1
 800d8ec:	4623      	mov	r3, r4
 800d8ee:	42ab      	cmp	r3, r5
 800d8f0:	d30a      	bcc.n	800d908 <__exponent+0x5e>
 800d8f2:	f10d 0309 	add.w	r3, sp, #9
 800d8f6:	1a9b      	subs	r3, r3, r2
 800d8f8:	42ac      	cmp	r4, r5
 800d8fa:	bf88      	it	hi
 800d8fc:	2300      	movhi	r3, #0
 800d8fe:	3302      	adds	r3, #2
 800d900:	4403      	add	r3, r0
 800d902:	1a18      	subs	r0, r3, r0
 800d904:	b003      	add	sp, #12
 800d906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d908:	f813 6b01 	ldrb.w	r6, [r3], #1
 800d90c:	f801 6f01 	strb.w	r6, [r1, #1]!
 800d910:	e7ed      	b.n	800d8ee <__exponent+0x44>
 800d912:	2330      	movs	r3, #48	@ 0x30
 800d914:	3130      	adds	r1, #48	@ 0x30
 800d916:	7083      	strb	r3, [r0, #2]
 800d918:	70c1      	strb	r1, [r0, #3]
 800d91a:	1d03      	adds	r3, r0, #4
 800d91c:	e7f1      	b.n	800d902 <__exponent+0x58>
	...

0800d920 <_printf_float>:
 800d920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d924:	b08d      	sub	sp, #52	@ 0x34
 800d926:	460c      	mov	r4, r1
 800d928:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800d92c:	4616      	mov	r6, r2
 800d92e:	461f      	mov	r7, r3
 800d930:	4605      	mov	r5, r0
 800d932:	f000 fdf3 	bl	800e51c <_localeconv_r>
 800d936:	6803      	ldr	r3, [r0, #0]
 800d938:	9304      	str	r3, [sp, #16]
 800d93a:	4618      	mov	r0, r3
 800d93c:	f7f2 fca0 	bl	8000280 <strlen>
 800d940:	2300      	movs	r3, #0
 800d942:	930a      	str	r3, [sp, #40]	@ 0x28
 800d944:	f8d8 3000 	ldr.w	r3, [r8]
 800d948:	9005      	str	r0, [sp, #20]
 800d94a:	3307      	adds	r3, #7
 800d94c:	f023 0307 	bic.w	r3, r3, #7
 800d950:	f103 0208 	add.w	r2, r3, #8
 800d954:	f894 a018 	ldrb.w	sl, [r4, #24]
 800d958:	f8d4 b000 	ldr.w	fp, [r4]
 800d95c:	f8c8 2000 	str.w	r2, [r8]
 800d960:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d964:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800d968:	9307      	str	r3, [sp, #28]
 800d96a:	f8cd 8018 	str.w	r8, [sp, #24]
 800d96e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800d972:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d976:	4b9c      	ldr	r3, [pc, #624]	@ (800dbe8 <_printf_float+0x2c8>)
 800d978:	f04f 32ff 	mov.w	r2, #4294967295
 800d97c:	f7f3 f8de 	bl	8000b3c <__aeabi_dcmpun>
 800d980:	bb70      	cbnz	r0, 800d9e0 <_printf_float+0xc0>
 800d982:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800d986:	4b98      	ldr	r3, [pc, #608]	@ (800dbe8 <_printf_float+0x2c8>)
 800d988:	f04f 32ff 	mov.w	r2, #4294967295
 800d98c:	f7f3 f8b8 	bl	8000b00 <__aeabi_dcmple>
 800d990:	bb30      	cbnz	r0, 800d9e0 <_printf_float+0xc0>
 800d992:	2200      	movs	r2, #0
 800d994:	2300      	movs	r3, #0
 800d996:	4640      	mov	r0, r8
 800d998:	4649      	mov	r1, r9
 800d99a:	f7f3 f8a7 	bl	8000aec <__aeabi_dcmplt>
 800d99e:	b110      	cbz	r0, 800d9a6 <_printf_float+0x86>
 800d9a0:	232d      	movs	r3, #45	@ 0x2d
 800d9a2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d9a6:	4a91      	ldr	r2, [pc, #580]	@ (800dbec <_printf_float+0x2cc>)
 800d9a8:	4b91      	ldr	r3, [pc, #580]	@ (800dbf0 <_printf_float+0x2d0>)
 800d9aa:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800d9ae:	bf8c      	ite	hi
 800d9b0:	4690      	movhi	r8, r2
 800d9b2:	4698      	movls	r8, r3
 800d9b4:	2303      	movs	r3, #3
 800d9b6:	6123      	str	r3, [r4, #16]
 800d9b8:	f02b 0304 	bic.w	r3, fp, #4
 800d9bc:	6023      	str	r3, [r4, #0]
 800d9be:	f04f 0900 	mov.w	r9, #0
 800d9c2:	9700      	str	r7, [sp, #0]
 800d9c4:	4633      	mov	r3, r6
 800d9c6:	aa0b      	add	r2, sp, #44	@ 0x2c
 800d9c8:	4621      	mov	r1, r4
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f000 f9d2 	bl	800dd74 <_printf_common>
 800d9d0:	3001      	adds	r0, #1
 800d9d2:	f040 808d 	bne.w	800daf0 <_printf_float+0x1d0>
 800d9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800d9da:	b00d      	add	sp, #52	@ 0x34
 800d9dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d9e0:	4642      	mov	r2, r8
 800d9e2:	464b      	mov	r3, r9
 800d9e4:	4640      	mov	r0, r8
 800d9e6:	4649      	mov	r1, r9
 800d9e8:	f7f3 f8a8 	bl	8000b3c <__aeabi_dcmpun>
 800d9ec:	b140      	cbz	r0, 800da00 <_printf_float+0xe0>
 800d9ee:	464b      	mov	r3, r9
 800d9f0:	2b00      	cmp	r3, #0
 800d9f2:	bfbc      	itt	lt
 800d9f4:	232d      	movlt	r3, #45	@ 0x2d
 800d9f6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800d9fa:	4a7e      	ldr	r2, [pc, #504]	@ (800dbf4 <_printf_float+0x2d4>)
 800d9fc:	4b7e      	ldr	r3, [pc, #504]	@ (800dbf8 <_printf_float+0x2d8>)
 800d9fe:	e7d4      	b.n	800d9aa <_printf_float+0x8a>
 800da00:	6863      	ldr	r3, [r4, #4]
 800da02:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800da06:	9206      	str	r2, [sp, #24]
 800da08:	1c5a      	adds	r2, r3, #1
 800da0a:	d13b      	bne.n	800da84 <_printf_float+0x164>
 800da0c:	2306      	movs	r3, #6
 800da0e:	6063      	str	r3, [r4, #4]
 800da10:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800da14:	2300      	movs	r3, #0
 800da16:	6022      	str	r2, [r4, #0]
 800da18:	9303      	str	r3, [sp, #12]
 800da1a:	ab0a      	add	r3, sp, #40	@ 0x28
 800da1c:	e9cd a301 	strd	sl, r3, [sp, #4]
 800da20:	ab09      	add	r3, sp, #36	@ 0x24
 800da22:	9300      	str	r3, [sp, #0]
 800da24:	6861      	ldr	r1, [r4, #4]
 800da26:	ec49 8b10 	vmov	d0, r8, r9
 800da2a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800da2e:	4628      	mov	r0, r5
 800da30:	f7ff fed6 	bl	800d7e0 <__cvt>
 800da34:	9b06      	ldr	r3, [sp, #24]
 800da36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800da38:	2b47      	cmp	r3, #71	@ 0x47
 800da3a:	4680      	mov	r8, r0
 800da3c:	d129      	bne.n	800da92 <_printf_float+0x172>
 800da3e:	1cc8      	adds	r0, r1, #3
 800da40:	db02      	blt.n	800da48 <_printf_float+0x128>
 800da42:	6863      	ldr	r3, [r4, #4]
 800da44:	4299      	cmp	r1, r3
 800da46:	dd41      	ble.n	800dacc <_printf_float+0x1ac>
 800da48:	f1aa 0a02 	sub.w	sl, sl, #2
 800da4c:	fa5f fa8a 	uxtb.w	sl, sl
 800da50:	3901      	subs	r1, #1
 800da52:	4652      	mov	r2, sl
 800da54:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800da58:	9109      	str	r1, [sp, #36]	@ 0x24
 800da5a:	f7ff ff26 	bl	800d8aa <__exponent>
 800da5e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800da60:	1813      	adds	r3, r2, r0
 800da62:	2a01      	cmp	r2, #1
 800da64:	4681      	mov	r9, r0
 800da66:	6123      	str	r3, [r4, #16]
 800da68:	dc02      	bgt.n	800da70 <_printf_float+0x150>
 800da6a:	6822      	ldr	r2, [r4, #0]
 800da6c:	07d2      	lsls	r2, r2, #31
 800da6e:	d501      	bpl.n	800da74 <_printf_float+0x154>
 800da70:	3301      	adds	r3, #1
 800da72:	6123      	str	r3, [r4, #16]
 800da74:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d0a2      	beq.n	800d9c2 <_printf_float+0xa2>
 800da7c:	232d      	movs	r3, #45	@ 0x2d
 800da7e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800da82:	e79e      	b.n	800d9c2 <_printf_float+0xa2>
 800da84:	9a06      	ldr	r2, [sp, #24]
 800da86:	2a47      	cmp	r2, #71	@ 0x47
 800da88:	d1c2      	bne.n	800da10 <_printf_float+0xf0>
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d1c0      	bne.n	800da10 <_printf_float+0xf0>
 800da8e:	2301      	movs	r3, #1
 800da90:	e7bd      	b.n	800da0e <_printf_float+0xee>
 800da92:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800da96:	d9db      	bls.n	800da50 <_printf_float+0x130>
 800da98:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800da9c:	d118      	bne.n	800dad0 <_printf_float+0x1b0>
 800da9e:	2900      	cmp	r1, #0
 800daa0:	6863      	ldr	r3, [r4, #4]
 800daa2:	dd0b      	ble.n	800dabc <_printf_float+0x19c>
 800daa4:	6121      	str	r1, [r4, #16]
 800daa6:	b913      	cbnz	r3, 800daae <_printf_float+0x18e>
 800daa8:	6822      	ldr	r2, [r4, #0]
 800daaa:	07d0      	lsls	r0, r2, #31
 800daac:	d502      	bpl.n	800dab4 <_printf_float+0x194>
 800daae:	3301      	adds	r3, #1
 800dab0:	440b      	add	r3, r1
 800dab2:	6123      	str	r3, [r4, #16]
 800dab4:	65a1      	str	r1, [r4, #88]	@ 0x58
 800dab6:	f04f 0900 	mov.w	r9, #0
 800daba:	e7db      	b.n	800da74 <_printf_float+0x154>
 800dabc:	b913      	cbnz	r3, 800dac4 <_printf_float+0x1a4>
 800dabe:	6822      	ldr	r2, [r4, #0]
 800dac0:	07d2      	lsls	r2, r2, #31
 800dac2:	d501      	bpl.n	800dac8 <_printf_float+0x1a8>
 800dac4:	3302      	adds	r3, #2
 800dac6:	e7f4      	b.n	800dab2 <_printf_float+0x192>
 800dac8:	2301      	movs	r3, #1
 800daca:	e7f2      	b.n	800dab2 <_printf_float+0x192>
 800dacc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800dad0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800dad2:	4299      	cmp	r1, r3
 800dad4:	db05      	blt.n	800dae2 <_printf_float+0x1c2>
 800dad6:	6823      	ldr	r3, [r4, #0]
 800dad8:	6121      	str	r1, [r4, #16]
 800dada:	07d8      	lsls	r0, r3, #31
 800dadc:	d5ea      	bpl.n	800dab4 <_printf_float+0x194>
 800dade:	1c4b      	adds	r3, r1, #1
 800dae0:	e7e7      	b.n	800dab2 <_printf_float+0x192>
 800dae2:	2900      	cmp	r1, #0
 800dae4:	bfd4      	ite	le
 800dae6:	f1c1 0202 	rsble	r2, r1, #2
 800daea:	2201      	movgt	r2, #1
 800daec:	4413      	add	r3, r2
 800daee:	e7e0      	b.n	800dab2 <_printf_float+0x192>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	055a      	lsls	r2, r3, #21
 800daf4:	d407      	bmi.n	800db06 <_printf_float+0x1e6>
 800daf6:	6923      	ldr	r3, [r4, #16]
 800daf8:	4642      	mov	r2, r8
 800dafa:	4631      	mov	r1, r6
 800dafc:	4628      	mov	r0, r5
 800dafe:	47b8      	blx	r7
 800db00:	3001      	adds	r0, #1
 800db02:	d12b      	bne.n	800db5c <_printf_float+0x23c>
 800db04:	e767      	b.n	800d9d6 <_printf_float+0xb6>
 800db06:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800db0a:	f240 80dd 	bls.w	800dcc8 <_printf_float+0x3a8>
 800db0e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800db12:	2200      	movs	r2, #0
 800db14:	2300      	movs	r3, #0
 800db16:	f7f2 ffdf 	bl	8000ad8 <__aeabi_dcmpeq>
 800db1a:	2800      	cmp	r0, #0
 800db1c:	d033      	beq.n	800db86 <_printf_float+0x266>
 800db1e:	4a37      	ldr	r2, [pc, #220]	@ (800dbfc <_printf_float+0x2dc>)
 800db20:	2301      	movs	r3, #1
 800db22:	4631      	mov	r1, r6
 800db24:	4628      	mov	r0, r5
 800db26:	47b8      	blx	r7
 800db28:	3001      	adds	r0, #1
 800db2a:	f43f af54 	beq.w	800d9d6 <_printf_float+0xb6>
 800db2e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800db32:	4543      	cmp	r3, r8
 800db34:	db02      	blt.n	800db3c <_printf_float+0x21c>
 800db36:	6823      	ldr	r3, [r4, #0]
 800db38:	07d8      	lsls	r0, r3, #31
 800db3a:	d50f      	bpl.n	800db5c <_printf_float+0x23c>
 800db3c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800db40:	4631      	mov	r1, r6
 800db42:	4628      	mov	r0, r5
 800db44:	47b8      	blx	r7
 800db46:	3001      	adds	r0, #1
 800db48:	f43f af45 	beq.w	800d9d6 <_printf_float+0xb6>
 800db4c:	f04f 0900 	mov.w	r9, #0
 800db50:	f108 38ff 	add.w	r8, r8, #4294967295
 800db54:	f104 0a1a 	add.w	sl, r4, #26
 800db58:	45c8      	cmp	r8, r9
 800db5a:	dc09      	bgt.n	800db70 <_printf_float+0x250>
 800db5c:	6823      	ldr	r3, [r4, #0]
 800db5e:	079b      	lsls	r3, r3, #30
 800db60:	f100 8103 	bmi.w	800dd6a <_printf_float+0x44a>
 800db64:	68e0      	ldr	r0, [r4, #12]
 800db66:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800db68:	4298      	cmp	r0, r3
 800db6a:	bfb8      	it	lt
 800db6c:	4618      	movlt	r0, r3
 800db6e:	e734      	b.n	800d9da <_printf_float+0xba>
 800db70:	2301      	movs	r3, #1
 800db72:	4652      	mov	r2, sl
 800db74:	4631      	mov	r1, r6
 800db76:	4628      	mov	r0, r5
 800db78:	47b8      	blx	r7
 800db7a:	3001      	adds	r0, #1
 800db7c:	f43f af2b 	beq.w	800d9d6 <_printf_float+0xb6>
 800db80:	f109 0901 	add.w	r9, r9, #1
 800db84:	e7e8      	b.n	800db58 <_printf_float+0x238>
 800db86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800db88:	2b00      	cmp	r3, #0
 800db8a:	dc39      	bgt.n	800dc00 <_printf_float+0x2e0>
 800db8c:	4a1b      	ldr	r2, [pc, #108]	@ (800dbfc <_printf_float+0x2dc>)
 800db8e:	2301      	movs	r3, #1
 800db90:	4631      	mov	r1, r6
 800db92:	4628      	mov	r0, r5
 800db94:	47b8      	blx	r7
 800db96:	3001      	adds	r0, #1
 800db98:	f43f af1d 	beq.w	800d9d6 <_printf_float+0xb6>
 800db9c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800dba0:	ea59 0303 	orrs.w	r3, r9, r3
 800dba4:	d102      	bne.n	800dbac <_printf_float+0x28c>
 800dba6:	6823      	ldr	r3, [r4, #0]
 800dba8:	07d9      	lsls	r1, r3, #31
 800dbaa:	d5d7      	bpl.n	800db5c <_printf_float+0x23c>
 800dbac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dbb0:	4631      	mov	r1, r6
 800dbb2:	4628      	mov	r0, r5
 800dbb4:	47b8      	blx	r7
 800dbb6:	3001      	adds	r0, #1
 800dbb8:	f43f af0d 	beq.w	800d9d6 <_printf_float+0xb6>
 800dbbc:	f04f 0a00 	mov.w	sl, #0
 800dbc0:	f104 0b1a 	add.w	fp, r4, #26
 800dbc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dbc6:	425b      	negs	r3, r3
 800dbc8:	4553      	cmp	r3, sl
 800dbca:	dc01      	bgt.n	800dbd0 <_printf_float+0x2b0>
 800dbcc:	464b      	mov	r3, r9
 800dbce:	e793      	b.n	800daf8 <_printf_float+0x1d8>
 800dbd0:	2301      	movs	r3, #1
 800dbd2:	465a      	mov	r2, fp
 800dbd4:	4631      	mov	r1, r6
 800dbd6:	4628      	mov	r0, r5
 800dbd8:	47b8      	blx	r7
 800dbda:	3001      	adds	r0, #1
 800dbdc:	f43f aefb 	beq.w	800d9d6 <_printf_float+0xb6>
 800dbe0:	f10a 0a01 	add.w	sl, sl, #1
 800dbe4:	e7ee      	b.n	800dbc4 <_printf_float+0x2a4>
 800dbe6:	bf00      	nop
 800dbe8:	7fefffff 	.word	0x7fefffff
 800dbec:	08011b82 	.word	0x08011b82
 800dbf0:	08011b7e 	.word	0x08011b7e
 800dbf4:	08011b8a 	.word	0x08011b8a
 800dbf8:	08011b86 	.word	0x08011b86
 800dbfc:	08011b8e 	.word	0x08011b8e
 800dc00:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc02:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dc06:	4553      	cmp	r3, sl
 800dc08:	bfa8      	it	ge
 800dc0a:	4653      	movge	r3, sl
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	4699      	mov	r9, r3
 800dc10:	dc36      	bgt.n	800dc80 <_printf_float+0x360>
 800dc12:	f04f 0b00 	mov.w	fp, #0
 800dc16:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc1a:	f104 021a 	add.w	r2, r4, #26
 800dc1e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800dc20:	9306      	str	r3, [sp, #24]
 800dc22:	eba3 0309 	sub.w	r3, r3, r9
 800dc26:	455b      	cmp	r3, fp
 800dc28:	dc31      	bgt.n	800dc8e <_printf_float+0x36e>
 800dc2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc2c:	459a      	cmp	sl, r3
 800dc2e:	dc3a      	bgt.n	800dca6 <_printf_float+0x386>
 800dc30:	6823      	ldr	r3, [r4, #0]
 800dc32:	07da      	lsls	r2, r3, #31
 800dc34:	d437      	bmi.n	800dca6 <_printf_float+0x386>
 800dc36:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc38:	ebaa 0903 	sub.w	r9, sl, r3
 800dc3c:	9b06      	ldr	r3, [sp, #24]
 800dc3e:	ebaa 0303 	sub.w	r3, sl, r3
 800dc42:	4599      	cmp	r9, r3
 800dc44:	bfa8      	it	ge
 800dc46:	4699      	movge	r9, r3
 800dc48:	f1b9 0f00 	cmp.w	r9, #0
 800dc4c:	dc33      	bgt.n	800dcb6 <_printf_float+0x396>
 800dc4e:	f04f 0800 	mov.w	r8, #0
 800dc52:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800dc56:	f104 0b1a 	add.w	fp, r4, #26
 800dc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc5c:	ebaa 0303 	sub.w	r3, sl, r3
 800dc60:	eba3 0309 	sub.w	r3, r3, r9
 800dc64:	4543      	cmp	r3, r8
 800dc66:	f77f af79 	ble.w	800db5c <_printf_float+0x23c>
 800dc6a:	2301      	movs	r3, #1
 800dc6c:	465a      	mov	r2, fp
 800dc6e:	4631      	mov	r1, r6
 800dc70:	4628      	mov	r0, r5
 800dc72:	47b8      	blx	r7
 800dc74:	3001      	adds	r0, #1
 800dc76:	f43f aeae 	beq.w	800d9d6 <_printf_float+0xb6>
 800dc7a:	f108 0801 	add.w	r8, r8, #1
 800dc7e:	e7ec      	b.n	800dc5a <_printf_float+0x33a>
 800dc80:	4642      	mov	r2, r8
 800dc82:	4631      	mov	r1, r6
 800dc84:	4628      	mov	r0, r5
 800dc86:	47b8      	blx	r7
 800dc88:	3001      	adds	r0, #1
 800dc8a:	d1c2      	bne.n	800dc12 <_printf_float+0x2f2>
 800dc8c:	e6a3      	b.n	800d9d6 <_printf_float+0xb6>
 800dc8e:	2301      	movs	r3, #1
 800dc90:	4631      	mov	r1, r6
 800dc92:	4628      	mov	r0, r5
 800dc94:	9206      	str	r2, [sp, #24]
 800dc96:	47b8      	blx	r7
 800dc98:	3001      	adds	r0, #1
 800dc9a:	f43f ae9c 	beq.w	800d9d6 <_printf_float+0xb6>
 800dc9e:	9a06      	ldr	r2, [sp, #24]
 800dca0:	f10b 0b01 	add.w	fp, fp, #1
 800dca4:	e7bb      	b.n	800dc1e <_printf_float+0x2fe>
 800dca6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcaa:	4631      	mov	r1, r6
 800dcac:	4628      	mov	r0, r5
 800dcae:	47b8      	blx	r7
 800dcb0:	3001      	adds	r0, #1
 800dcb2:	d1c0      	bne.n	800dc36 <_printf_float+0x316>
 800dcb4:	e68f      	b.n	800d9d6 <_printf_float+0xb6>
 800dcb6:	9a06      	ldr	r2, [sp, #24]
 800dcb8:	464b      	mov	r3, r9
 800dcba:	4442      	add	r2, r8
 800dcbc:	4631      	mov	r1, r6
 800dcbe:	4628      	mov	r0, r5
 800dcc0:	47b8      	blx	r7
 800dcc2:	3001      	adds	r0, #1
 800dcc4:	d1c3      	bne.n	800dc4e <_printf_float+0x32e>
 800dcc6:	e686      	b.n	800d9d6 <_printf_float+0xb6>
 800dcc8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800dccc:	f1ba 0f01 	cmp.w	sl, #1
 800dcd0:	dc01      	bgt.n	800dcd6 <_printf_float+0x3b6>
 800dcd2:	07db      	lsls	r3, r3, #31
 800dcd4:	d536      	bpl.n	800dd44 <_printf_float+0x424>
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	4642      	mov	r2, r8
 800dcda:	4631      	mov	r1, r6
 800dcdc:	4628      	mov	r0, r5
 800dcde:	47b8      	blx	r7
 800dce0:	3001      	adds	r0, #1
 800dce2:	f43f ae78 	beq.w	800d9d6 <_printf_float+0xb6>
 800dce6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800dcea:	4631      	mov	r1, r6
 800dcec:	4628      	mov	r0, r5
 800dcee:	47b8      	blx	r7
 800dcf0:	3001      	adds	r0, #1
 800dcf2:	f43f ae70 	beq.w	800d9d6 <_printf_float+0xb6>
 800dcf6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dd02:	f7f2 fee9 	bl	8000ad8 <__aeabi_dcmpeq>
 800dd06:	b9c0      	cbnz	r0, 800dd3a <_printf_float+0x41a>
 800dd08:	4653      	mov	r3, sl
 800dd0a:	f108 0201 	add.w	r2, r8, #1
 800dd0e:	4631      	mov	r1, r6
 800dd10:	4628      	mov	r0, r5
 800dd12:	47b8      	blx	r7
 800dd14:	3001      	adds	r0, #1
 800dd16:	d10c      	bne.n	800dd32 <_printf_float+0x412>
 800dd18:	e65d      	b.n	800d9d6 <_printf_float+0xb6>
 800dd1a:	2301      	movs	r3, #1
 800dd1c:	465a      	mov	r2, fp
 800dd1e:	4631      	mov	r1, r6
 800dd20:	4628      	mov	r0, r5
 800dd22:	47b8      	blx	r7
 800dd24:	3001      	adds	r0, #1
 800dd26:	f43f ae56 	beq.w	800d9d6 <_printf_float+0xb6>
 800dd2a:	f108 0801 	add.w	r8, r8, #1
 800dd2e:	45d0      	cmp	r8, sl
 800dd30:	dbf3      	blt.n	800dd1a <_printf_float+0x3fa>
 800dd32:	464b      	mov	r3, r9
 800dd34:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800dd38:	e6df      	b.n	800dafa <_printf_float+0x1da>
 800dd3a:	f04f 0800 	mov.w	r8, #0
 800dd3e:	f104 0b1a 	add.w	fp, r4, #26
 800dd42:	e7f4      	b.n	800dd2e <_printf_float+0x40e>
 800dd44:	2301      	movs	r3, #1
 800dd46:	4642      	mov	r2, r8
 800dd48:	e7e1      	b.n	800dd0e <_printf_float+0x3ee>
 800dd4a:	2301      	movs	r3, #1
 800dd4c:	464a      	mov	r2, r9
 800dd4e:	4631      	mov	r1, r6
 800dd50:	4628      	mov	r0, r5
 800dd52:	47b8      	blx	r7
 800dd54:	3001      	adds	r0, #1
 800dd56:	f43f ae3e 	beq.w	800d9d6 <_printf_float+0xb6>
 800dd5a:	f108 0801 	add.w	r8, r8, #1
 800dd5e:	68e3      	ldr	r3, [r4, #12]
 800dd60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800dd62:	1a5b      	subs	r3, r3, r1
 800dd64:	4543      	cmp	r3, r8
 800dd66:	dcf0      	bgt.n	800dd4a <_printf_float+0x42a>
 800dd68:	e6fc      	b.n	800db64 <_printf_float+0x244>
 800dd6a:	f04f 0800 	mov.w	r8, #0
 800dd6e:	f104 0919 	add.w	r9, r4, #25
 800dd72:	e7f4      	b.n	800dd5e <_printf_float+0x43e>

0800dd74 <_printf_common>:
 800dd74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dd78:	4616      	mov	r6, r2
 800dd7a:	4698      	mov	r8, r3
 800dd7c:	688a      	ldr	r2, [r1, #8]
 800dd7e:	690b      	ldr	r3, [r1, #16]
 800dd80:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800dd84:	4293      	cmp	r3, r2
 800dd86:	bfb8      	it	lt
 800dd88:	4613      	movlt	r3, r2
 800dd8a:	6033      	str	r3, [r6, #0]
 800dd8c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800dd90:	4607      	mov	r7, r0
 800dd92:	460c      	mov	r4, r1
 800dd94:	b10a      	cbz	r2, 800dd9a <_printf_common+0x26>
 800dd96:	3301      	adds	r3, #1
 800dd98:	6033      	str	r3, [r6, #0]
 800dd9a:	6823      	ldr	r3, [r4, #0]
 800dd9c:	0699      	lsls	r1, r3, #26
 800dd9e:	bf42      	ittt	mi
 800dda0:	6833      	ldrmi	r3, [r6, #0]
 800dda2:	3302      	addmi	r3, #2
 800dda4:	6033      	strmi	r3, [r6, #0]
 800dda6:	6825      	ldr	r5, [r4, #0]
 800dda8:	f015 0506 	ands.w	r5, r5, #6
 800ddac:	d106      	bne.n	800ddbc <_printf_common+0x48>
 800ddae:	f104 0a19 	add.w	sl, r4, #25
 800ddb2:	68e3      	ldr	r3, [r4, #12]
 800ddb4:	6832      	ldr	r2, [r6, #0]
 800ddb6:	1a9b      	subs	r3, r3, r2
 800ddb8:	42ab      	cmp	r3, r5
 800ddba:	dc26      	bgt.n	800de0a <_printf_common+0x96>
 800ddbc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800ddc0:	6822      	ldr	r2, [r4, #0]
 800ddc2:	3b00      	subs	r3, #0
 800ddc4:	bf18      	it	ne
 800ddc6:	2301      	movne	r3, #1
 800ddc8:	0692      	lsls	r2, r2, #26
 800ddca:	d42b      	bmi.n	800de24 <_printf_common+0xb0>
 800ddcc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800ddd0:	4641      	mov	r1, r8
 800ddd2:	4638      	mov	r0, r7
 800ddd4:	47c8      	blx	r9
 800ddd6:	3001      	adds	r0, #1
 800ddd8:	d01e      	beq.n	800de18 <_printf_common+0xa4>
 800ddda:	6823      	ldr	r3, [r4, #0]
 800dddc:	6922      	ldr	r2, [r4, #16]
 800ddde:	f003 0306 	and.w	r3, r3, #6
 800dde2:	2b04      	cmp	r3, #4
 800dde4:	bf02      	ittt	eq
 800dde6:	68e5      	ldreq	r5, [r4, #12]
 800dde8:	6833      	ldreq	r3, [r6, #0]
 800ddea:	1aed      	subeq	r5, r5, r3
 800ddec:	68a3      	ldr	r3, [r4, #8]
 800ddee:	bf0c      	ite	eq
 800ddf0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800ddf4:	2500      	movne	r5, #0
 800ddf6:	4293      	cmp	r3, r2
 800ddf8:	bfc4      	itt	gt
 800ddfa:	1a9b      	subgt	r3, r3, r2
 800ddfc:	18ed      	addgt	r5, r5, r3
 800ddfe:	2600      	movs	r6, #0
 800de00:	341a      	adds	r4, #26
 800de02:	42b5      	cmp	r5, r6
 800de04:	d11a      	bne.n	800de3c <_printf_common+0xc8>
 800de06:	2000      	movs	r0, #0
 800de08:	e008      	b.n	800de1c <_printf_common+0xa8>
 800de0a:	2301      	movs	r3, #1
 800de0c:	4652      	mov	r2, sl
 800de0e:	4641      	mov	r1, r8
 800de10:	4638      	mov	r0, r7
 800de12:	47c8      	blx	r9
 800de14:	3001      	adds	r0, #1
 800de16:	d103      	bne.n	800de20 <_printf_common+0xac>
 800de18:	f04f 30ff 	mov.w	r0, #4294967295
 800de1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800de20:	3501      	adds	r5, #1
 800de22:	e7c6      	b.n	800ddb2 <_printf_common+0x3e>
 800de24:	18e1      	adds	r1, r4, r3
 800de26:	1c5a      	adds	r2, r3, #1
 800de28:	2030      	movs	r0, #48	@ 0x30
 800de2a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800de2e:	4422      	add	r2, r4
 800de30:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800de34:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800de38:	3302      	adds	r3, #2
 800de3a:	e7c7      	b.n	800ddcc <_printf_common+0x58>
 800de3c:	2301      	movs	r3, #1
 800de3e:	4622      	mov	r2, r4
 800de40:	4641      	mov	r1, r8
 800de42:	4638      	mov	r0, r7
 800de44:	47c8      	blx	r9
 800de46:	3001      	adds	r0, #1
 800de48:	d0e6      	beq.n	800de18 <_printf_common+0xa4>
 800de4a:	3601      	adds	r6, #1
 800de4c:	e7d9      	b.n	800de02 <_printf_common+0x8e>
	...

0800de50 <_printf_i>:
 800de50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800de54:	7e0f      	ldrb	r7, [r1, #24]
 800de56:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800de58:	2f78      	cmp	r7, #120	@ 0x78
 800de5a:	4691      	mov	r9, r2
 800de5c:	4680      	mov	r8, r0
 800de5e:	460c      	mov	r4, r1
 800de60:	469a      	mov	sl, r3
 800de62:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800de66:	d807      	bhi.n	800de78 <_printf_i+0x28>
 800de68:	2f62      	cmp	r7, #98	@ 0x62
 800de6a:	d80a      	bhi.n	800de82 <_printf_i+0x32>
 800de6c:	2f00      	cmp	r7, #0
 800de6e:	f000 80d1 	beq.w	800e014 <_printf_i+0x1c4>
 800de72:	2f58      	cmp	r7, #88	@ 0x58
 800de74:	f000 80b8 	beq.w	800dfe8 <_printf_i+0x198>
 800de78:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800de7c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800de80:	e03a      	b.n	800def8 <_printf_i+0xa8>
 800de82:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800de86:	2b15      	cmp	r3, #21
 800de88:	d8f6      	bhi.n	800de78 <_printf_i+0x28>
 800de8a:	a101      	add	r1, pc, #4	@ (adr r1, 800de90 <_printf_i+0x40>)
 800de8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800de90:	0800dee9 	.word	0x0800dee9
 800de94:	0800defd 	.word	0x0800defd
 800de98:	0800de79 	.word	0x0800de79
 800de9c:	0800de79 	.word	0x0800de79
 800dea0:	0800de79 	.word	0x0800de79
 800dea4:	0800de79 	.word	0x0800de79
 800dea8:	0800defd 	.word	0x0800defd
 800deac:	0800de79 	.word	0x0800de79
 800deb0:	0800de79 	.word	0x0800de79
 800deb4:	0800de79 	.word	0x0800de79
 800deb8:	0800de79 	.word	0x0800de79
 800debc:	0800dffb 	.word	0x0800dffb
 800dec0:	0800df27 	.word	0x0800df27
 800dec4:	0800dfb5 	.word	0x0800dfb5
 800dec8:	0800de79 	.word	0x0800de79
 800decc:	0800de79 	.word	0x0800de79
 800ded0:	0800e01d 	.word	0x0800e01d
 800ded4:	0800de79 	.word	0x0800de79
 800ded8:	0800df27 	.word	0x0800df27
 800dedc:	0800de79 	.word	0x0800de79
 800dee0:	0800de79 	.word	0x0800de79
 800dee4:	0800dfbd 	.word	0x0800dfbd
 800dee8:	6833      	ldr	r3, [r6, #0]
 800deea:	1d1a      	adds	r2, r3, #4
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	6032      	str	r2, [r6, #0]
 800def0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800def4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800def8:	2301      	movs	r3, #1
 800defa:	e09c      	b.n	800e036 <_printf_i+0x1e6>
 800defc:	6833      	ldr	r3, [r6, #0]
 800defe:	6820      	ldr	r0, [r4, #0]
 800df00:	1d19      	adds	r1, r3, #4
 800df02:	6031      	str	r1, [r6, #0]
 800df04:	0606      	lsls	r6, r0, #24
 800df06:	d501      	bpl.n	800df0c <_printf_i+0xbc>
 800df08:	681d      	ldr	r5, [r3, #0]
 800df0a:	e003      	b.n	800df14 <_printf_i+0xc4>
 800df0c:	0645      	lsls	r5, r0, #25
 800df0e:	d5fb      	bpl.n	800df08 <_printf_i+0xb8>
 800df10:	f9b3 5000 	ldrsh.w	r5, [r3]
 800df14:	2d00      	cmp	r5, #0
 800df16:	da03      	bge.n	800df20 <_printf_i+0xd0>
 800df18:	232d      	movs	r3, #45	@ 0x2d
 800df1a:	426d      	negs	r5, r5
 800df1c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800df20:	4858      	ldr	r0, [pc, #352]	@ (800e084 <_printf_i+0x234>)
 800df22:	230a      	movs	r3, #10
 800df24:	e011      	b.n	800df4a <_printf_i+0xfa>
 800df26:	6821      	ldr	r1, [r4, #0]
 800df28:	6833      	ldr	r3, [r6, #0]
 800df2a:	0608      	lsls	r0, r1, #24
 800df2c:	f853 5b04 	ldr.w	r5, [r3], #4
 800df30:	d402      	bmi.n	800df38 <_printf_i+0xe8>
 800df32:	0649      	lsls	r1, r1, #25
 800df34:	bf48      	it	mi
 800df36:	b2ad      	uxthmi	r5, r5
 800df38:	2f6f      	cmp	r7, #111	@ 0x6f
 800df3a:	4852      	ldr	r0, [pc, #328]	@ (800e084 <_printf_i+0x234>)
 800df3c:	6033      	str	r3, [r6, #0]
 800df3e:	bf14      	ite	ne
 800df40:	230a      	movne	r3, #10
 800df42:	2308      	moveq	r3, #8
 800df44:	2100      	movs	r1, #0
 800df46:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800df4a:	6866      	ldr	r6, [r4, #4]
 800df4c:	60a6      	str	r6, [r4, #8]
 800df4e:	2e00      	cmp	r6, #0
 800df50:	db05      	blt.n	800df5e <_printf_i+0x10e>
 800df52:	6821      	ldr	r1, [r4, #0]
 800df54:	432e      	orrs	r6, r5
 800df56:	f021 0104 	bic.w	r1, r1, #4
 800df5a:	6021      	str	r1, [r4, #0]
 800df5c:	d04b      	beq.n	800dff6 <_printf_i+0x1a6>
 800df5e:	4616      	mov	r6, r2
 800df60:	fbb5 f1f3 	udiv	r1, r5, r3
 800df64:	fb03 5711 	mls	r7, r3, r1, r5
 800df68:	5dc7      	ldrb	r7, [r0, r7]
 800df6a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800df6e:	462f      	mov	r7, r5
 800df70:	42bb      	cmp	r3, r7
 800df72:	460d      	mov	r5, r1
 800df74:	d9f4      	bls.n	800df60 <_printf_i+0x110>
 800df76:	2b08      	cmp	r3, #8
 800df78:	d10b      	bne.n	800df92 <_printf_i+0x142>
 800df7a:	6823      	ldr	r3, [r4, #0]
 800df7c:	07df      	lsls	r7, r3, #31
 800df7e:	d508      	bpl.n	800df92 <_printf_i+0x142>
 800df80:	6923      	ldr	r3, [r4, #16]
 800df82:	6861      	ldr	r1, [r4, #4]
 800df84:	4299      	cmp	r1, r3
 800df86:	bfde      	ittt	le
 800df88:	2330      	movle	r3, #48	@ 0x30
 800df8a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800df8e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800df92:	1b92      	subs	r2, r2, r6
 800df94:	6122      	str	r2, [r4, #16]
 800df96:	f8cd a000 	str.w	sl, [sp]
 800df9a:	464b      	mov	r3, r9
 800df9c:	aa03      	add	r2, sp, #12
 800df9e:	4621      	mov	r1, r4
 800dfa0:	4640      	mov	r0, r8
 800dfa2:	f7ff fee7 	bl	800dd74 <_printf_common>
 800dfa6:	3001      	adds	r0, #1
 800dfa8:	d14a      	bne.n	800e040 <_printf_i+0x1f0>
 800dfaa:	f04f 30ff 	mov.w	r0, #4294967295
 800dfae:	b004      	add	sp, #16
 800dfb0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dfb4:	6823      	ldr	r3, [r4, #0]
 800dfb6:	f043 0320 	orr.w	r3, r3, #32
 800dfba:	6023      	str	r3, [r4, #0]
 800dfbc:	4832      	ldr	r0, [pc, #200]	@ (800e088 <_printf_i+0x238>)
 800dfbe:	2778      	movs	r7, #120	@ 0x78
 800dfc0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800dfc4:	6823      	ldr	r3, [r4, #0]
 800dfc6:	6831      	ldr	r1, [r6, #0]
 800dfc8:	061f      	lsls	r7, r3, #24
 800dfca:	f851 5b04 	ldr.w	r5, [r1], #4
 800dfce:	d402      	bmi.n	800dfd6 <_printf_i+0x186>
 800dfd0:	065f      	lsls	r7, r3, #25
 800dfd2:	bf48      	it	mi
 800dfd4:	b2ad      	uxthmi	r5, r5
 800dfd6:	6031      	str	r1, [r6, #0]
 800dfd8:	07d9      	lsls	r1, r3, #31
 800dfda:	bf44      	itt	mi
 800dfdc:	f043 0320 	orrmi.w	r3, r3, #32
 800dfe0:	6023      	strmi	r3, [r4, #0]
 800dfe2:	b11d      	cbz	r5, 800dfec <_printf_i+0x19c>
 800dfe4:	2310      	movs	r3, #16
 800dfe6:	e7ad      	b.n	800df44 <_printf_i+0xf4>
 800dfe8:	4826      	ldr	r0, [pc, #152]	@ (800e084 <_printf_i+0x234>)
 800dfea:	e7e9      	b.n	800dfc0 <_printf_i+0x170>
 800dfec:	6823      	ldr	r3, [r4, #0]
 800dfee:	f023 0320 	bic.w	r3, r3, #32
 800dff2:	6023      	str	r3, [r4, #0]
 800dff4:	e7f6      	b.n	800dfe4 <_printf_i+0x194>
 800dff6:	4616      	mov	r6, r2
 800dff8:	e7bd      	b.n	800df76 <_printf_i+0x126>
 800dffa:	6833      	ldr	r3, [r6, #0]
 800dffc:	6825      	ldr	r5, [r4, #0]
 800dffe:	6961      	ldr	r1, [r4, #20]
 800e000:	1d18      	adds	r0, r3, #4
 800e002:	6030      	str	r0, [r6, #0]
 800e004:	062e      	lsls	r6, r5, #24
 800e006:	681b      	ldr	r3, [r3, #0]
 800e008:	d501      	bpl.n	800e00e <_printf_i+0x1be>
 800e00a:	6019      	str	r1, [r3, #0]
 800e00c:	e002      	b.n	800e014 <_printf_i+0x1c4>
 800e00e:	0668      	lsls	r0, r5, #25
 800e010:	d5fb      	bpl.n	800e00a <_printf_i+0x1ba>
 800e012:	8019      	strh	r1, [r3, #0]
 800e014:	2300      	movs	r3, #0
 800e016:	6123      	str	r3, [r4, #16]
 800e018:	4616      	mov	r6, r2
 800e01a:	e7bc      	b.n	800df96 <_printf_i+0x146>
 800e01c:	6833      	ldr	r3, [r6, #0]
 800e01e:	1d1a      	adds	r2, r3, #4
 800e020:	6032      	str	r2, [r6, #0]
 800e022:	681e      	ldr	r6, [r3, #0]
 800e024:	6862      	ldr	r2, [r4, #4]
 800e026:	2100      	movs	r1, #0
 800e028:	4630      	mov	r0, r6
 800e02a:	f7f2 f8d9 	bl	80001e0 <memchr>
 800e02e:	b108      	cbz	r0, 800e034 <_printf_i+0x1e4>
 800e030:	1b80      	subs	r0, r0, r6
 800e032:	6060      	str	r0, [r4, #4]
 800e034:	6863      	ldr	r3, [r4, #4]
 800e036:	6123      	str	r3, [r4, #16]
 800e038:	2300      	movs	r3, #0
 800e03a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800e03e:	e7aa      	b.n	800df96 <_printf_i+0x146>
 800e040:	6923      	ldr	r3, [r4, #16]
 800e042:	4632      	mov	r2, r6
 800e044:	4649      	mov	r1, r9
 800e046:	4640      	mov	r0, r8
 800e048:	47d0      	blx	sl
 800e04a:	3001      	adds	r0, #1
 800e04c:	d0ad      	beq.n	800dfaa <_printf_i+0x15a>
 800e04e:	6823      	ldr	r3, [r4, #0]
 800e050:	079b      	lsls	r3, r3, #30
 800e052:	d413      	bmi.n	800e07c <_printf_i+0x22c>
 800e054:	68e0      	ldr	r0, [r4, #12]
 800e056:	9b03      	ldr	r3, [sp, #12]
 800e058:	4298      	cmp	r0, r3
 800e05a:	bfb8      	it	lt
 800e05c:	4618      	movlt	r0, r3
 800e05e:	e7a6      	b.n	800dfae <_printf_i+0x15e>
 800e060:	2301      	movs	r3, #1
 800e062:	4632      	mov	r2, r6
 800e064:	4649      	mov	r1, r9
 800e066:	4640      	mov	r0, r8
 800e068:	47d0      	blx	sl
 800e06a:	3001      	adds	r0, #1
 800e06c:	d09d      	beq.n	800dfaa <_printf_i+0x15a>
 800e06e:	3501      	adds	r5, #1
 800e070:	68e3      	ldr	r3, [r4, #12]
 800e072:	9903      	ldr	r1, [sp, #12]
 800e074:	1a5b      	subs	r3, r3, r1
 800e076:	42ab      	cmp	r3, r5
 800e078:	dcf2      	bgt.n	800e060 <_printf_i+0x210>
 800e07a:	e7eb      	b.n	800e054 <_printf_i+0x204>
 800e07c:	2500      	movs	r5, #0
 800e07e:	f104 0619 	add.w	r6, r4, #25
 800e082:	e7f5      	b.n	800e070 <_printf_i+0x220>
 800e084:	08011b90 	.word	0x08011b90
 800e088:	08011ba1 	.word	0x08011ba1

0800e08c <std>:
 800e08c:	2300      	movs	r3, #0
 800e08e:	b510      	push	{r4, lr}
 800e090:	4604      	mov	r4, r0
 800e092:	e9c0 3300 	strd	r3, r3, [r0]
 800e096:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e09a:	6083      	str	r3, [r0, #8]
 800e09c:	8181      	strh	r1, [r0, #12]
 800e09e:	6643      	str	r3, [r0, #100]	@ 0x64
 800e0a0:	81c2      	strh	r2, [r0, #14]
 800e0a2:	6183      	str	r3, [r0, #24]
 800e0a4:	4619      	mov	r1, r3
 800e0a6:	2208      	movs	r2, #8
 800e0a8:	305c      	adds	r0, #92	@ 0x5c
 800e0aa:	f000 f9f9 	bl	800e4a0 <memset>
 800e0ae:	4b0d      	ldr	r3, [pc, #52]	@ (800e0e4 <std+0x58>)
 800e0b0:	6263      	str	r3, [r4, #36]	@ 0x24
 800e0b2:	4b0d      	ldr	r3, [pc, #52]	@ (800e0e8 <std+0x5c>)
 800e0b4:	62a3      	str	r3, [r4, #40]	@ 0x28
 800e0b6:	4b0d      	ldr	r3, [pc, #52]	@ (800e0ec <std+0x60>)
 800e0b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e0ba:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f0 <std+0x64>)
 800e0bc:	6323      	str	r3, [r4, #48]	@ 0x30
 800e0be:	4b0d      	ldr	r3, [pc, #52]	@ (800e0f4 <std+0x68>)
 800e0c0:	6224      	str	r4, [r4, #32]
 800e0c2:	429c      	cmp	r4, r3
 800e0c4:	d006      	beq.n	800e0d4 <std+0x48>
 800e0c6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800e0ca:	4294      	cmp	r4, r2
 800e0cc:	d002      	beq.n	800e0d4 <std+0x48>
 800e0ce:	33d0      	adds	r3, #208	@ 0xd0
 800e0d0:	429c      	cmp	r4, r3
 800e0d2:	d105      	bne.n	800e0e0 <std+0x54>
 800e0d4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800e0d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e0dc:	f000 ba92 	b.w	800e604 <__retarget_lock_init_recursive>
 800e0e0:	bd10      	pop	{r4, pc}
 800e0e2:	bf00      	nop
 800e0e4:	0800e2f1 	.word	0x0800e2f1
 800e0e8:	0800e313 	.word	0x0800e313
 800e0ec:	0800e34b 	.word	0x0800e34b
 800e0f0:	0800e36f 	.word	0x0800e36f
 800e0f4:	20002574 	.word	0x20002574

0800e0f8 <stdio_exit_handler>:
 800e0f8:	4a02      	ldr	r2, [pc, #8]	@ (800e104 <stdio_exit_handler+0xc>)
 800e0fa:	4903      	ldr	r1, [pc, #12]	@ (800e108 <stdio_exit_handler+0x10>)
 800e0fc:	4803      	ldr	r0, [pc, #12]	@ (800e10c <stdio_exit_handler+0x14>)
 800e0fe:	f000 b869 	b.w	800e1d4 <_fwalk_sglue>
 800e102:	bf00      	nop
 800e104:	200000fc 	.word	0x200000fc
 800e108:	08010879 	.word	0x08010879
 800e10c:	20000278 	.word	0x20000278

0800e110 <cleanup_stdio>:
 800e110:	6841      	ldr	r1, [r0, #4]
 800e112:	4b0c      	ldr	r3, [pc, #48]	@ (800e144 <cleanup_stdio+0x34>)
 800e114:	4299      	cmp	r1, r3
 800e116:	b510      	push	{r4, lr}
 800e118:	4604      	mov	r4, r0
 800e11a:	d001      	beq.n	800e120 <cleanup_stdio+0x10>
 800e11c:	f002 fbac 	bl	8010878 <_fflush_r>
 800e120:	68a1      	ldr	r1, [r4, #8]
 800e122:	4b09      	ldr	r3, [pc, #36]	@ (800e148 <cleanup_stdio+0x38>)
 800e124:	4299      	cmp	r1, r3
 800e126:	d002      	beq.n	800e12e <cleanup_stdio+0x1e>
 800e128:	4620      	mov	r0, r4
 800e12a:	f002 fba5 	bl	8010878 <_fflush_r>
 800e12e:	68e1      	ldr	r1, [r4, #12]
 800e130:	4b06      	ldr	r3, [pc, #24]	@ (800e14c <cleanup_stdio+0x3c>)
 800e132:	4299      	cmp	r1, r3
 800e134:	d004      	beq.n	800e140 <cleanup_stdio+0x30>
 800e136:	4620      	mov	r0, r4
 800e138:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e13c:	f002 bb9c 	b.w	8010878 <_fflush_r>
 800e140:	bd10      	pop	{r4, pc}
 800e142:	bf00      	nop
 800e144:	20002574 	.word	0x20002574
 800e148:	200025dc 	.word	0x200025dc
 800e14c:	20002644 	.word	0x20002644

0800e150 <global_stdio_init.part.0>:
 800e150:	b510      	push	{r4, lr}
 800e152:	4b0b      	ldr	r3, [pc, #44]	@ (800e180 <global_stdio_init.part.0+0x30>)
 800e154:	4c0b      	ldr	r4, [pc, #44]	@ (800e184 <global_stdio_init.part.0+0x34>)
 800e156:	4a0c      	ldr	r2, [pc, #48]	@ (800e188 <global_stdio_init.part.0+0x38>)
 800e158:	601a      	str	r2, [r3, #0]
 800e15a:	4620      	mov	r0, r4
 800e15c:	2200      	movs	r2, #0
 800e15e:	2104      	movs	r1, #4
 800e160:	f7ff ff94 	bl	800e08c <std>
 800e164:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800e168:	2201      	movs	r2, #1
 800e16a:	2109      	movs	r1, #9
 800e16c:	f7ff ff8e 	bl	800e08c <std>
 800e170:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800e174:	2202      	movs	r2, #2
 800e176:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e17a:	2112      	movs	r1, #18
 800e17c:	f7ff bf86 	b.w	800e08c <std>
 800e180:	200026ac 	.word	0x200026ac
 800e184:	20002574 	.word	0x20002574
 800e188:	0800e0f9 	.word	0x0800e0f9

0800e18c <__sfp_lock_acquire>:
 800e18c:	4801      	ldr	r0, [pc, #4]	@ (800e194 <__sfp_lock_acquire+0x8>)
 800e18e:	f000 ba3a 	b.w	800e606 <__retarget_lock_acquire_recursive>
 800e192:	bf00      	nop
 800e194:	200026b5 	.word	0x200026b5

0800e198 <__sfp_lock_release>:
 800e198:	4801      	ldr	r0, [pc, #4]	@ (800e1a0 <__sfp_lock_release+0x8>)
 800e19a:	f000 ba35 	b.w	800e608 <__retarget_lock_release_recursive>
 800e19e:	bf00      	nop
 800e1a0:	200026b5 	.word	0x200026b5

0800e1a4 <__sinit>:
 800e1a4:	b510      	push	{r4, lr}
 800e1a6:	4604      	mov	r4, r0
 800e1a8:	f7ff fff0 	bl	800e18c <__sfp_lock_acquire>
 800e1ac:	6a23      	ldr	r3, [r4, #32]
 800e1ae:	b11b      	cbz	r3, 800e1b8 <__sinit+0x14>
 800e1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e1b4:	f7ff bff0 	b.w	800e198 <__sfp_lock_release>
 800e1b8:	4b04      	ldr	r3, [pc, #16]	@ (800e1cc <__sinit+0x28>)
 800e1ba:	6223      	str	r3, [r4, #32]
 800e1bc:	4b04      	ldr	r3, [pc, #16]	@ (800e1d0 <__sinit+0x2c>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d1f5      	bne.n	800e1b0 <__sinit+0xc>
 800e1c4:	f7ff ffc4 	bl	800e150 <global_stdio_init.part.0>
 800e1c8:	e7f2      	b.n	800e1b0 <__sinit+0xc>
 800e1ca:	bf00      	nop
 800e1cc:	0800e111 	.word	0x0800e111
 800e1d0:	200026ac 	.word	0x200026ac

0800e1d4 <_fwalk_sglue>:
 800e1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e1d8:	4607      	mov	r7, r0
 800e1da:	4688      	mov	r8, r1
 800e1dc:	4614      	mov	r4, r2
 800e1de:	2600      	movs	r6, #0
 800e1e0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e1e4:	f1b9 0901 	subs.w	r9, r9, #1
 800e1e8:	d505      	bpl.n	800e1f6 <_fwalk_sglue+0x22>
 800e1ea:	6824      	ldr	r4, [r4, #0]
 800e1ec:	2c00      	cmp	r4, #0
 800e1ee:	d1f7      	bne.n	800e1e0 <_fwalk_sglue+0xc>
 800e1f0:	4630      	mov	r0, r6
 800e1f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e1f6:	89ab      	ldrh	r3, [r5, #12]
 800e1f8:	2b01      	cmp	r3, #1
 800e1fa:	d907      	bls.n	800e20c <_fwalk_sglue+0x38>
 800e1fc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e200:	3301      	adds	r3, #1
 800e202:	d003      	beq.n	800e20c <_fwalk_sglue+0x38>
 800e204:	4629      	mov	r1, r5
 800e206:	4638      	mov	r0, r7
 800e208:	47c0      	blx	r8
 800e20a:	4306      	orrs	r6, r0
 800e20c:	3568      	adds	r5, #104	@ 0x68
 800e20e:	e7e9      	b.n	800e1e4 <_fwalk_sglue+0x10>

0800e210 <iprintf>:
 800e210:	b40f      	push	{r0, r1, r2, r3}
 800e212:	b507      	push	{r0, r1, r2, lr}
 800e214:	4906      	ldr	r1, [pc, #24]	@ (800e230 <iprintf+0x20>)
 800e216:	ab04      	add	r3, sp, #16
 800e218:	6808      	ldr	r0, [r1, #0]
 800e21a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e21e:	6881      	ldr	r1, [r0, #8]
 800e220:	9301      	str	r3, [sp, #4]
 800e222:	f002 f98d 	bl	8010540 <_vfiprintf_r>
 800e226:	b003      	add	sp, #12
 800e228:	f85d eb04 	ldr.w	lr, [sp], #4
 800e22c:	b004      	add	sp, #16
 800e22e:	4770      	bx	lr
 800e230:	20000274 	.word	0x20000274

0800e234 <_puts_r>:
 800e234:	6a03      	ldr	r3, [r0, #32]
 800e236:	b570      	push	{r4, r5, r6, lr}
 800e238:	6884      	ldr	r4, [r0, #8]
 800e23a:	4605      	mov	r5, r0
 800e23c:	460e      	mov	r6, r1
 800e23e:	b90b      	cbnz	r3, 800e244 <_puts_r+0x10>
 800e240:	f7ff ffb0 	bl	800e1a4 <__sinit>
 800e244:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e246:	07db      	lsls	r3, r3, #31
 800e248:	d405      	bmi.n	800e256 <_puts_r+0x22>
 800e24a:	89a3      	ldrh	r3, [r4, #12]
 800e24c:	0598      	lsls	r0, r3, #22
 800e24e:	d402      	bmi.n	800e256 <_puts_r+0x22>
 800e250:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e252:	f000 f9d8 	bl	800e606 <__retarget_lock_acquire_recursive>
 800e256:	89a3      	ldrh	r3, [r4, #12]
 800e258:	0719      	lsls	r1, r3, #28
 800e25a:	d502      	bpl.n	800e262 <_puts_r+0x2e>
 800e25c:	6923      	ldr	r3, [r4, #16]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d135      	bne.n	800e2ce <_puts_r+0x9a>
 800e262:	4621      	mov	r1, r4
 800e264:	4628      	mov	r0, r5
 800e266:	f000 f8c5 	bl	800e3f4 <__swsetup_r>
 800e26a:	b380      	cbz	r0, 800e2ce <_puts_r+0x9a>
 800e26c:	f04f 35ff 	mov.w	r5, #4294967295
 800e270:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800e272:	07da      	lsls	r2, r3, #31
 800e274:	d405      	bmi.n	800e282 <_puts_r+0x4e>
 800e276:	89a3      	ldrh	r3, [r4, #12]
 800e278:	059b      	lsls	r3, r3, #22
 800e27a:	d402      	bmi.n	800e282 <_puts_r+0x4e>
 800e27c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800e27e:	f000 f9c3 	bl	800e608 <__retarget_lock_release_recursive>
 800e282:	4628      	mov	r0, r5
 800e284:	bd70      	pop	{r4, r5, r6, pc}
 800e286:	2b00      	cmp	r3, #0
 800e288:	da04      	bge.n	800e294 <_puts_r+0x60>
 800e28a:	69a2      	ldr	r2, [r4, #24]
 800e28c:	429a      	cmp	r2, r3
 800e28e:	dc17      	bgt.n	800e2c0 <_puts_r+0x8c>
 800e290:	290a      	cmp	r1, #10
 800e292:	d015      	beq.n	800e2c0 <_puts_r+0x8c>
 800e294:	6823      	ldr	r3, [r4, #0]
 800e296:	1c5a      	adds	r2, r3, #1
 800e298:	6022      	str	r2, [r4, #0]
 800e29a:	7019      	strb	r1, [r3, #0]
 800e29c:	68a3      	ldr	r3, [r4, #8]
 800e29e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800e2a2:	3b01      	subs	r3, #1
 800e2a4:	60a3      	str	r3, [r4, #8]
 800e2a6:	2900      	cmp	r1, #0
 800e2a8:	d1ed      	bne.n	800e286 <_puts_r+0x52>
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	da11      	bge.n	800e2d2 <_puts_r+0x9e>
 800e2ae:	4622      	mov	r2, r4
 800e2b0:	210a      	movs	r1, #10
 800e2b2:	4628      	mov	r0, r5
 800e2b4:	f000 f85f 	bl	800e376 <__swbuf_r>
 800e2b8:	3001      	adds	r0, #1
 800e2ba:	d0d7      	beq.n	800e26c <_puts_r+0x38>
 800e2bc:	250a      	movs	r5, #10
 800e2be:	e7d7      	b.n	800e270 <_puts_r+0x3c>
 800e2c0:	4622      	mov	r2, r4
 800e2c2:	4628      	mov	r0, r5
 800e2c4:	f000 f857 	bl	800e376 <__swbuf_r>
 800e2c8:	3001      	adds	r0, #1
 800e2ca:	d1e7      	bne.n	800e29c <_puts_r+0x68>
 800e2cc:	e7ce      	b.n	800e26c <_puts_r+0x38>
 800e2ce:	3e01      	subs	r6, #1
 800e2d0:	e7e4      	b.n	800e29c <_puts_r+0x68>
 800e2d2:	6823      	ldr	r3, [r4, #0]
 800e2d4:	1c5a      	adds	r2, r3, #1
 800e2d6:	6022      	str	r2, [r4, #0]
 800e2d8:	220a      	movs	r2, #10
 800e2da:	701a      	strb	r2, [r3, #0]
 800e2dc:	e7ee      	b.n	800e2bc <_puts_r+0x88>
	...

0800e2e0 <puts>:
 800e2e0:	4b02      	ldr	r3, [pc, #8]	@ (800e2ec <puts+0xc>)
 800e2e2:	4601      	mov	r1, r0
 800e2e4:	6818      	ldr	r0, [r3, #0]
 800e2e6:	f7ff bfa5 	b.w	800e234 <_puts_r>
 800e2ea:	bf00      	nop
 800e2ec:	20000274 	.word	0x20000274

0800e2f0 <__sread>:
 800e2f0:	b510      	push	{r4, lr}
 800e2f2:	460c      	mov	r4, r1
 800e2f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e2f8:	f000 f936 	bl	800e568 <_read_r>
 800e2fc:	2800      	cmp	r0, #0
 800e2fe:	bfab      	itete	ge
 800e300:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800e302:	89a3      	ldrhlt	r3, [r4, #12]
 800e304:	181b      	addge	r3, r3, r0
 800e306:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800e30a:	bfac      	ite	ge
 800e30c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800e30e:	81a3      	strhlt	r3, [r4, #12]
 800e310:	bd10      	pop	{r4, pc}

0800e312 <__swrite>:
 800e312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e316:	461f      	mov	r7, r3
 800e318:	898b      	ldrh	r3, [r1, #12]
 800e31a:	05db      	lsls	r3, r3, #23
 800e31c:	4605      	mov	r5, r0
 800e31e:	460c      	mov	r4, r1
 800e320:	4616      	mov	r6, r2
 800e322:	d505      	bpl.n	800e330 <__swrite+0x1e>
 800e324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e328:	2302      	movs	r3, #2
 800e32a:	2200      	movs	r2, #0
 800e32c:	f000 f90a 	bl	800e544 <_lseek_r>
 800e330:	89a3      	ldrh	r3, [r4, #12]
 800e332:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e336:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800e33a:	81a3      	strh	r3, [r4, #12]
 800e33c:	4632      	mov	r2, r6
 800e33e:	463b      	mov	r3, r7
 800e340:	4628      	mov	r0, r5
 800e342:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e346:	f000 b921 	b.w	800e58c <_write_r>

0800e34a <__sseek>:
 800e34a:	b510      	push	{r4, lr}
 800e34c:	460c      	mov	r4, r1
 800e34e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e352:	f000 f8f7 	bl	800e544 <_lseek_r>
 800e356:	1c43      	adds	r3, r0, #1
 800e358:	89a3      	ldrh	r3, [r4, #12]
 800e35a:	bf15      	itete	ne
 800e35c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800e35e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800e362:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800e366:	81a3      	strheq	r3, [r4, #12]
 800e368:	bf18      	it	ne
 800e36a:	81a3      	strhne	r3, [r4, #12]
 800e36c:	bd10      	pop	{r4, pc}

0800e36e <__sclose>:
 800e36e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e372:	f000 b8d7 	b.w	800e524 <_close_r>

0800e376 <__swbuf_r>:
 800e376:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e378:	460e      	mov	r6, r1
 800e37a:	4614      	mov	r4, r2
 800e37c:	4605      	mov	r5, r0
 800e37e:	b118      	cbz	r0, 800e388 <__swbuf_r+0x12>
 800e380:	6a03      	ldr	r3, [r0, #32]
 800e382:	b90b      	cbnz	r3, 800e388 <__swbuf_r+0x12>
 800e384:	f7ff ff0e 	bl	800e1a4 <__sinit>
 800e388:	69a3      	ldr	r3, [r4, #24]
 800e38a:	60a3      	str	r3, [r4, #8]
 800e38c:	89a3      	ldrh	r3, [r4, #12]
 800e38e:	071a      	lsls	r2, r3, #28
 800e390:	d501      	bpl.n	800e396 <__swbuf_r+0x20>
 800e392:	6923      	ldr	r3, [r4, #16]
 800e394:	b943      	cbnz	r3, 800e3a8 <__swbuf_r+0x32>
 800e396:	4621      	mov	r1, r4
 800e398:	4628      	mov	r0, r5
 800e39a:	f000 f82b 	bl	800e3f4 <__swsetup_r>
 800e39e:	b118      	cbz	r0, 800e3a8 <__swbuf_r+0x32>
 800e3a0:	f04f 37ff 	mov.w	r7, #4294967295
 800e3a4:	4638      	mov	r0, r7
 800e3a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e3a8:	6823      	ldr	r3, [r4, #0]
 800e3aa:	6922      	ldr	r2, [r4, #16]
 800e3ac:	1a98      	subs	r0, r3, r2
 800e3ae:	6963      	ldr	r3, [r4, #20]
 800e3b0:	b2f6      	uxtb	r6, r6
 800e3b2:	4283      	cmp	r3, r0
 800e3b4:	4637      	mov	r7, r6
 800e3b6:	dc05      	bgt.n	800e3c4 <__swbuf_r+0x4e>
 800e3b8:	4621      	mov	r1, r4
 800e3ba:	4628      	mov	r0, r5
 800e3bc:	f002 fa5c 	bl	8010878 <_fflush_r>
 800e3c0:	2800      	cmp	r0, #0
 800e3c2:	d1ed      	bne.n	800e3a0 <__swbuf_r+0x2a>
 800e3c4:	68a3      	ldr	r3, [r4, #8]
 800e3c6:	3b01      	subs	r3, #1
 800e3c8:	60a3      	str	r3, [r4, #8]
 800e3ca:	6823      	ldr	r3, [r4, #0]
 800e3cc:	1c5a      	adds	r2, r3, #1
 800e3ce:	6022      	str	r2, [r4, #0]
 800e3d0:	701e      	strb	r6, [r3, #0]
 800e3d2:	6962      	ldr	r2, [r4, #20]
 800e3d4:	1c43      	adds	r3, r0, #1
 800e3d6:	429a      	cmp	r2, r3
 800e3d8:	d004      	beq.n	800e3e4 <__swbuf_r+0x6e>
 800e3da:	89a3      	ldrh	r3, [r4, #12]
 800e3dc:	07db      	lsls	r3, r3, #31
 800e3de:	d5e1      	bpl.n	800e3a4 <__swbuf_r+0x2e>
 800e3e0:	2e0a      	cmp	r6, #10
 800e3e2:	d1df      	bne.n	800e3a4 <__swbuf_r+0x2e>
 800e3e4:	4621      	mov	r1, r4
 800e3e6:	4628      	mov	r0, r5
 800e3e8:	f002 fa46 	bl	8010878 <_fflush_r>
 800e3ec:	2800      	cmp	r0, #0
 800e3ee:	d0d9      	beq.n	800e3a4 <__swbuf_r+0x2e>
 800e3f0:	e7d6      	b.n	800e3a0 <__swbuf_r+0x2a>
	...

0800e3f4 <__swsetup_r>:
 800e3f4:	b538      	push	{r3, r4, r5, lr}
 800e3f6:	4b29      	ldr	r3, [pc, #164]	@ (800e49c <__swsetup_r+0xa8>)
 800e3f8:	4605      	mov	r5, r0
 800e3fa:	6818      	ldr	r0, [r3, #0]
 800e3fc:	460c      	mov	r4, r1
 800e3fe:	b118      	cbz	r0, 800e408 <__swsetup_r+0x14>
 800e400:	6a03      	ldr	r3, [r0, #32]
 800e402:	b90b      	cbnz	r3, 800e408 <__swsetup_r+0x14>
 800e404:	f7ff fece 	bl	800e1a4 <__sinit>
 800e408:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e40c:	0719      	lsls	r1, r3, #28
 800e40e:	d422      	bmi.n	800e456 <__swsetup_r+0x62>
 800e410:	06da      	lsls	r2, r3, #27
 800e412:	d407      	bmi.n	800e424 <__swsetup_r+0x30>
 800e414:	2209      	movs	r2, #9
 800e416:	602a      	str	r2, [r5, #0]
 800e418:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e41c:	81a3      	strh	r3, [r4, #12]
 800e41e:	f04f 30ff 	mov.w	r0, #4294967295
 800e422:	e033      	b.n	800e48c <__swsetup_r+0x98>
 800e424:	0758      	lsls	r0, r3, #29
 800e426:	d512      	bpl.n	800e44e <__swsetup_r+0x5a>
 800e428:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800e42a:	b141      	cbz	r1, 800e43e <__swsetup_r+0x4a>
 800e42c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800e430:	4299      	cmp	r1, r3
 800e432:	d002      	beq.n	800e43a <__swsetup_r+0x46>
 800e434:	4628      	mov	r0, r5
 800e436:	f000 ff57 	bl	800f2e8 <_free_r>
 800e43a:	2300      	movs	r3, #0
 800e43c:	6363      	str	r3, [r4, #52]	@ 0x34
 800e43e:	89a3      	ldrh	r3, [r4, #12]
 800e440:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800e444:	81a3      	strh	r3, [r4, #12]
 800e446:	2300      	movs	r3, #0
 800e448:	6063      	str	r3, [r4, #4]
 800e44a:	6923      	ldr	r3, [r4, #16]
 800e44c:	6023      	str	r3, [r4, #0]
 800e44e:	89a3      	ldrh	r3, [r4, #12]
 800e450:	f043 0308 	orr.w	r3, r3, #8
 800e454:	81a3      	strh	r3, [r4, #12]
 800e456:	6923      	ldr	r3, [r4, #16]
 800e458:	b94b      	cbnz	r3, 800e46e <__swsetup_r+0x7a>
 800e45a:	89a3      	ldrh	r3, [r4, #12]
 800e45c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800e460:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800e464:	d003      	beq.n	800e46e <__swsetup_r+0x7a>
 800e466:	4621      	mov	r1, r4
 800e468:	4628      	mov	r0, r5
 800e46a:	f002 fa53 	bl	8010914 <__smakebuf_r>
 800e46e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e472:	f013 0201 	ands.w	r2, r3, #1
 800e476:	d00a      	beq.n	800e48e <__swsetup_r+0x9a>
 800e478:	2200      	movs	r2, #0
 800e47a:	60a2      	str	r2, [r4, #8]
 800e47c:	6962      	ldr	r2, [r4, #20]
 800e47e:	4252      	negs	r2, r2
 800e480:	61a2      	str	r2, [r4, #24]
 800e482:	6922      	ldr	r2, [r4, #16]
 800e484:	b942      	cbnz	r2, 800e498 <__swsetup_r+0xa4>
 800e486:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800e48a:	d1c5      	bne.n	800e418 <__swsetup_r+0x24>
 800e48c:	bd38      	pop	{r3, r4, r5, pc}
 800e48e:	0799      	lsls	r1, r3, #30
 800e490:	bf58      	it	pl
 800e492:	6962      	ldrpl	r2, [r4, #20]
 800e494:	60a2      	str	r2, [r4, #8]
 800e496:	e7f4      	b.n	800e482 <__swsetup_r+0x8e>
 800e498:	2000      	movs	r0, #0
 800e49a:	e7f7      	b.n	800e48c <__swsetup_r+0x98>
 800e49c:	20000274 	.word	0x20000274

0800e4a0 <memset>:
 800e4a0:	4402      	add	r2, r0
 800e4a2:	4603      	mov	r3, r0
 800e4a4:	4293      	cmp	r3, r2
 800e4a6:	d100      	bne.n	800e4aa <memset+0xa>
 800e4a8:	4770      	bx	lr
 800e4aa:	f803 1b01 	strb.w	r1, [r3], #1
 800e4ae:	e7f9      	b.n	800e4a4 <memset+0x4>

0800e4b0 <strchr>:
 800e4b0:	b2c9      	uxtb	r1, r1
 800e4b2:	4603      	mov	r3, r0
 800e4b4:	4618      	mov	r0, r3
 800e4b6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4ba:	b112      	cbz	r2, 800e4c2 <strchr+0x12>
 800e4bc:	428a      	cmp	r2, r1
 800e4be:	d1f9      	bne.n	800e4b4 <strchr+0x4>
 800e4c0:	4770      	bx	lr
 800e4c2:	2900      	cmp	r1, #0
 800e4c4:	bf18      	it	ne
 800e4c6:	2000      	movne	r0, #0
 800e4c8:	4770      	bx	lr

0800e4ca <strncmp>:
 800e4ca:	b510      	push	{r4, lr}
 800e4cc:	b16a      	cbz	r2, 800e4ea <strncmp+0x20>
 800e4ce:	3901      	subs	r1, #1
 800e4d0:	1884      	adds	r4, r0, r2
 800e4d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e4d6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d103      	bne.n	800e4e6 <strncmp+0x1c>
 800e4de:	42a0      	cmp	r0, r4
 800e4e0:	d001      	beq.n	800e4e6 <strncmp+0x1c>
 800e4e2:	2a00      	cmp	r2, #0
 800e4e4:	d1f5      	bne.n	800e4d2 <strncmp+0x8>
 800e4e6:	1ad0      	subs	r0, r2, r3
 800e4e8:	bd10      	pop	{r4, pc}
 800e4ea:	4610      	mov	r0, r2
 800e4ec:	e7fc      	b.n	800e4e8 <strncmp+0x1e>

0800e4ee <strrchr>:
 800e4ee:	b538      	push	{r3, r4, r5, lr}
 800e4f0:	f011 04ff 	ands.w	r4, r1, #255	@ 0xff
 800e4f4:	4603      	mov	r3, r0
 800e4f6:	d10e      	bne.n	800e516 <strrchr+0x28>
 800e4f8:	4621      	mov	r1, r4
 800e4fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e4fe:	f7ff bfd7 	b.w	800e4b0 <strchr>
 800e502:	1c43      	adds	r3, r0, #1
 800e504:	4605      	mov	r5, r0
 800e506:	4621      	mov	r1, r4
 800e508:	4618      	mov	r0, r3
 800e50a:	f7ff ffd1 	bl	800e4b0 <strchr>
 800e50e:	2800      	cmp	r0, #0
 800e510:	d1f7      	bne.n	800e502 <strrchr+0x14>
 800e512:	4628      	mov	r0, r5
 800e514:	bd38      	pop	{r3, r4, r5, pc}
 800e516:	2500      	movs	r5, #0
 800e518:	e7f5      	b.n	800e506 <strrchr+0x18>
	...

0800e51c <_localeconv_r>:
 800e51c:	4800      	ldr	r0, [pc, #0]	@ (800e520 <_localeconv_r+0x4>)
 800e51e:	4770      	bx	lr
 800e520:	200001f8 	.word	0x200001f8

0800e524 <_close_r>:
 800e524:	b538      	push	{r3, r4, r5, lr}
 800e526:	4d06      	ldr	r5, [pc, #24]	@ (800e540 <_close_r+0x1c>)
 800e528:	2300      	movs	r3, #0
 800e52a:	4604      	mov	r4, r0
 800e52c:	4608      	mov	r0, r1
 800e52e:	602b      	str	r3, [r5, #0]
 800e530:	f7f5 fc80 	bl	8003e34 <_close>
 800e534:	1c43      	adds	r3, r0, #1
 800e536:	d102      	bne.n	800e53e <_close_r+0x1a>
 800e538:	682b      	ldr	r3, [r5, #0]
 800e53a:	b103      	cbz	r3, 800e53e <_close_r+0x1a>
 800e53c:	6023      	str	r3, [r4, #0]
 800e53e:	bd38      	pop	{r3, r4, r5, pc}
 800e540:	200026b0 	.word	0x200026b0

0800e544 <_lseek_r>:
 800e544:	b538      	push	{r3, r4, r5, lr}
 800e546:	4d07      	ldr	r5, [pc, #28]	@ (800e564 <_lseek_r+0x20>)
 800e548:	4604      	mov	r4, r0
 800e54a:	4608      	mov	r0, r1
 800e54c:	4611      	mov	r1, r2
 800e54e:	2200      	movs	r2, #0
 800e550:	602a      	str	r2, [r5, #0]
 800e552:	461a      	mov	r2, r3
 800e554:	f7f5 fc95 	bl	8003e82 <_lseek>
 800e558:	1c43      	adds	r3, r0, #1
 800e55a:	d102      	bne.n	800e562 <_lseek_r+0x1e>
 800e55c:	682b      	ldr	r3, [r5, #0]
 800e55e:	b103      	cbz	r3, 800e562 <_lseek_r+0x1e>
 800e560:	6023      	str	r3, [r4, #0]
 800e562:	bd38      	pop	{r3, r4, r5, pc}
 800e564:	200026b0 	.word	0x200026b0

0800e568 <_read_r>:
 800e568:	b538      	push	{r3, r4, r5, lr}
 800e56a:	4d07      	ldr	r5, [pc, #28]	@ (800e588 <_read_r+0x20>)
 800e56c:	4604      	mov	r4, r0
 800e56e:	4608      	mov	r0, r1
 800e570:	4611      	mov	r1, r2
 800e572:	2200      	movs	r2, #0
 800e574:	602a      	str	r2, [r5, #0]
 800e576:	461a      	mov	r2, r3
 800e578:	f7f5 fc3f 	bl	8003dfa <_read>
 800e57c:	1c43      	adds	r3, r0, #1
 800e57e:	d102      	bne.n	800e586 <_read_r+0x1e>
 800e580:	682b      	ldr	r3, [r5, #0]
 800e582:	b103      	cbz	r3, 800e586 <_read_r+0x1e>
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	bd38      	pop	{r3, r4, r5, pc}
 800e588:	200026b0 	.word	0x200026b0

0800e58c <_write_r>:
 800e58c:	b538      	push	{r3, r4, r5, lr}
 800e58e:	4d07      	ldr	r5, [pc, #28]	@ (800e5ac <_write_r+0x20>)
 800e590:	4604      	mov	r4, r0
 800e592:	4608      	mov	r0, r1
 800e594:	4611      	mov	r1, r2
 800e596:	2200      	movs	r2, #0
 800e598:	602a      	str	r2, [r5, #0]
 800e59a:	461a      	mov	r2, r3
 800e59c:	f7f5 f9dc 	bl	8003958 <_write>
 800e5a0:	1c43      	adds	r3, r0, #1
 800e5a2:	d102      	bne.n	800e5aa <_write_r+0x1e>
 800e5a4:	682b      	ldr	r3, [r5, #0]
 800e5a6:	b103      	cbz	r3, 800e5aa <_write_r+0x1e>
 800e5a8:	6023      	str	r3, [r4, #0]
 800e5aa:	bd38      	pop	{r3, r4, r5, pc}
 800e5ac:	200026b0 	.word	0x200026b0

0800e5b0 <__errno>:
 800e5b0:	4b01      	ldr	r3, [pc, #4]	@ (800e5b8 <__errno+0x8>)
 800e5b2:	6818      	ldr	r0, [r3, #0]
 800e5b4:	4770      	bx	lr
 800e5b6:	bf00      	nop
 800e5b8:	20000274 	.word	0x20000274

0800e5bc <__libc_init_array>:
 800e5bc:	b570      	push	{r4, r5, r6, lr}
 800e5be:	4d0d      	ldr	r5, [pc, #52]	@ (800e5f4 <__libc_init_array+0x38>)
 800e5c0:	4c0d      	ldr	r4, [pc, #52]	@ (800e5f8 <__libc_init_array+0x3c>)
 800e5c2:	1b64      	subs	r4, r4, r5
 800e5c4:	10a4      	asrs	r4, r4, #2
 800e5c6:	2600      	movs	r6, #0
 800e5c8:	42a6      	cmp	r6, r4
 800e5ca:	d109      	bne.n	800e5e0 <__libc_init_array+0x24>
 800e5cc:	4d0b      	ldr	r5, [pc, #44]	@ (800e5fc <__libc_init_array+0x40>)
 800e5ce:	4c0c      	ldr	r4, [pc, #48]	@ (800e600 <__libc_init_array+0x44>)
 800e5d0:	f002 fffa 	bl	80115c8 <_init>
 800e5d4:	1b64      	subs	r4, r4, r5
 800e5d6:	10a4      	asrs	r4, r4, #2
 800e5d8:	2600      	movs	r6, #0
 800e5da:	42a6      	cmp	r6, r4
 800e5dc:	d105      	bne.n	800e5ea <__libc_init_array+0x2e>
 800e5de:	bd70      	pop	{r4, r5, r6, pc}
 800e5e0:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5e4:	4798      	blx	r3
 800e5e6:	3601      	adds	r6, #1
 800e5e8:	e7ee      	b.n	800e5c8 <__libc_init_array+0xc>
 800e5ea:	f855 3b04 	ldr.w	r3, [r5], #4
 800e5ee:	4798      	blx	r3
 800e5f0:	3601      	adds	r6, #1
 800e5f2:	e7f2      	b.n	800e5da <__libc_init_array+0x1e>
 800e5f4:	08011ff8 	.word	0x08011ff8
 800e5f8:	08011ff8 	.word	0x08011ff8
 800e5fc:	08011ff8 	.word	0x08011ff8
 800e600:	08011ffc 	.word	0x08011ffc

0800e604 <__retarget_lock_init_recursive>:
 800e604:	4770      	bx	lr

0800e606 <__retarget_lock_acquire_recursive>:
 800e606:	4770      	bx	lr

0800e608 <__retarget_lock_release_recursive>:
 800e608:	4770      	bx	lr

0800e60a <memcpy>:
 800e60a:	440a      	add	r2, r1
 800e60c:	4291      	cmp	r1, r2
 800e60e:	f100 33ff 	add.w	r3, r0, #4294967295
 800e612:	d100      	bne.n	800e616 <memcpy+0xc>
 800e614:	4770      	bx	lr
 800e616:	b510      	push	{r4, lr}
 800e618:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e61c:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e620:	4291      	cmp	r1, r2
 800e622:	d1f9      	bne.n	800e618 <memcpy+0xe>
 800e624:	bd10      	pop	{r4, pc}
	...

0800e628 <nan>:
 800e628:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800e630 <nan+0x8>
 800e62c:	4770      	bx	lr
 800e62e:	bf00      	nop
 800e630:	00000000 	.word	0x00000000
 800e634:	7ff80000 	.word	0x7ff80000

0800e638 <quorem>:
 800e638:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e63c:	6903      	ldr	r3, [r0, #16]
 800e63e:	690c      	ldr	r4, [r1, #16]
 800e640:	42a3      	cmp	r3, r4
 800e642:	4607      	mov	r7, r0
 800e644:	db7e      	blt.n	800e744 <quorem+0x10c>
 800e646:	3c01      	subs	r4, #1
 800e648:	f101 0814 	add.w	r8, r1, #20
 800e64c:	00a3      	lsls	r3, r4, #2
 800e64e:	f100 0514 	add.w	r5, r0, #20
 800e652:	9300      	str	r3, [sp, #0]
 800e654:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e658:	9301      	str	r3, [sp, #4]
 800e65a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800e65e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e662:	3301      	adds	r3, #1
 800e664:	429a      	cmp	r2, r3
 800e666:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800e66a:	fbb2 f6f3 	udiv	r6, r2, r3
 800e66e:	d32e      	bcc.n	800e6ce <quorem+0x96>
 800e670:	f04f 0a00 	mov.w	sl, #0
 800e674:	46c4      	mov	ip, r8
 800e676:	46ae      	mov	lr, r5
 800e678:	46d3      	mov	fp, sl
 800e67a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800e67e:	b298      	uxth	r0, r3
 800e680:	fb06 a000 	mla	r0, r6, r0, sl
 800e684:	0c02      	lsrs	r2, r0, #16
 800e686:	0c1b      	lsrs	r3, r3, #16
 800e688:	fb06 2303 	mla	r3, r6, r3, r2
 800e68c:	f8de 2000 	ldr.w	r2, [lr]
 800e690:	b280      	uxth	r0, r0
 800e692:	b292      	uxth	r2, r2
 800e694:	1a12      	subs	r2, r2, r0
 800e696:	445a      	add	r2, fp
 800e698:	f8de 0000 	ldr.w	r0, [lr]
 800e69c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e6a0:	b29b      	uxth	r3, r3
 800e6a2:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800e6a6:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800e6aa:	b292      	uxth	r2, r2
 800e6ac:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800e6b0:	45e1      	cmp	r9, ip
 800e6b2:	f84e 2b04 	str.w	r2, [lr], #4
 800e6b6:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800e6ba:	d2de      	bcs.n	800e67a <quorem+0x42>
 800e6bc:	9b00      	ldr	r3, [sp, #0]
 800e6be:	58eb      	ldr	r3, [r5, r3]
 800e6c0:	b92b      	cbnz	r3, 800e6ce <quorem+0x96>
 800e6c2:	9b01      	ldr	r3, [sp, #4]
 800e6c4:	3b04      	subs	r3, #4
 800e6c6:	429d      	cmp	r5, r3
 800e6c8:	461a      	mov	r2, r3
 800e6ca:	d32f      	bcc.n	800e72c <quorem+0xf4>
 800e6cc:	613c      	str	r4, [r7, #16]
 800e6ce:	4638      	mov	r0, r7
 800e6d0:	f001 fd12 	bl	80100f8 <__mcmp>
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	db25      	blt.n	800e724 <quorem+0xec>
 800e6d8:	4629      	mov	r1, r5
 800e6da:	2000      	movs	r0, #0
 800e6dc:	f858 2b04 	ldr.w	r2, [r8], #4
 800e6e0:	f8d1 c000 	ldr.w	ip, [r1]
 800e6e4:	fa1f fe82 	uxth.w	lr, r2
 800e6e8:	fa1f f38c 	uxth.w	r3, ip
 800e6ec:	eba3 030e 	sub.w	r3, r3, lr
 800e6f0:	4403      	add	r3, r0
 800e6f2:	0c12      	lsrs	r2, r2, #16
 800e6f4:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800e6f8:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e702:	45c1      	cmp	r9, r8
 800e704:	f841 3b04 	str.w	r3, [r1], #4
 800e708:	ea4f 4022 	mov.w	r0, r2, asr #16
 800e70c:	d2e6      	bcs.n	800e6dc <quorem+0xa4>
 800e70e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800e712:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800e716:	b922      	cbnz	r2, 800e722 <quorem+0xea>
 800e718:	3b04      	subs	r3, #4
 800e71a:	429d      	cmp	r5, r3
 800e71c:	461a      	mov	r2, r3
 800e71e:	d30b      	bcc.n	800e738 <quorem+0x100>
 800e720:	613c      	str	r4, [r7, #16]
 800e722:	3601      	adds	r6, #1
 800e724:	4630      	mov	r0, r6
 800e726:	b003      	add	sp, #12
 800e728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e72c:	6812      	ldr	r2, [r2, #0]
 800e72e:	3b04      	subs	r3, #4
 800e730:	2a00      	cmp	r2, #0
 800e732:	d1cb      	bne.n	800e6cc <quorem+0x94>
 800e734:	3c01      	subs	r4, #1
 800e736:	e7c6      	b.n	800e6c6 <quorem+0x8e>
 800e738:	6812      	ldr	r2, [r2, #0]
 800e73a:	3b04      	subs	r3, #4
 800e73c:	2a00      	cmp	r2, #0
 800e73e:	d1ef      	bne.n	800e720 <quorem+0xe8>
 800e740:	3c01      	subs	r4, #1
 800e742:	e7ea      	b.n	800e71a <quorem+0xe2>
 800e744:	2000      	movs	r0, #0
 800e746:	e7ee      	b.n	800e726 <quorem+0xee>

0800e748 <_dtoa_r>:
 800e748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e74c:	69c7      	ldr	r7, [r0, #28]
 800e74e:	b097      	sub	sp, #92	@ 0x5c
 800e750:	ed8d 0b04 	vstr	d0, [sp, #16]
 800e754:	ec55 4b10 	vmov	r4, r5, d0
 800e758:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800e75a:	9107      	str	r1, [sp, #28]
 800e75c:	4681      	mov	r9, r0
 800e75e:	920c      	str	r2, [sp, #48]	@ 0x30
 800e760:	9311      	str	r3, [sp, #68]	@ 0x44
 800e762:	b97f      	cbnz	r7, 800e784 <_dtoa_r+0x3c>
 800e764:	2010      	movs	r0, #16
 800e766:	f001 f943 	bl	800f9f0 <malloc>
 800e76a:	4602      	mov	r2, r0
 800e76c:	f8c9 001c 	str.w	r0, [r9, #28]
 800e770:	b920      	cbnz	r0, 800e77c <_dtoa_r+0x34>
 800e772:	4ba9      	ldr	r3, [pc, #676]	@ (800ea18 <_dtoa_r+0x2d0>)
 800e774:	21ef      	movs	r1, #239	@ 0xef
 800e776:	48a9      	ldr	r0, [pc, #676]	@ (800ea1c <_dtoa_r+0x2d4>)
 800e778:	f002 f93a 	bl	80109f0 <__assert_func>
 800e77c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800e780:	6007      	str	r7, [r0, #0]
 800e782:	60c7      	str	r7, [r0, #12]
 800e784:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e788:	6819      	ldr	r1, [r3, #0]
 800e78a:	b159      	cbz	r1, 800e7a4 <_dtoa_r+0x5c>
 800e78c:	685a      	ldr	r2, [r3, #4]
 800e78e:	604a      	str	r2, [r1, #4]
 800e790:	2301      	movs	r3, #1
 800e792:	4093      	lsls	r3, r2
 800e794:	608b      	str	r3, [r1, #8]
 800e796:	4648      	mov	r0, r9
 800e798:	f001 fa32 	bl	800fc00 <_Bfree>
 800e79c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800e7a0:	2200      	movs	r2, #0
 800e7a2:	601a      	str	r2, [r3, #0]
 800e7a4:	1e2b      	subs	r3, r5, #0
 800e7a6:	bfb9      	ittee	lt
 800e7a8:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800e7ac:	9305      	strlt	r3, [sp, #20]
 800e7ae:	2300      	movge	r3, #0
 800e7b0:	6033      	strge	r3, [r6, #0]
 800e7b2:	9f05      	ldr	r7, [sp, #20]
 800e7b4:	4b9a      	ldr	r3, [pc, #616]	@ (800ea20 <_dtoa_r+0x2d8>)
 800e7b6:	bfbc      	itt	lt
 800e7b8:	2201      	movlt	r2, #1
 800e7ba:	6032      	strlt	r2, [r6, #0]
 800e7bc:	43bb      	bics	r3, r7
 800e7be:	d112      	bne.n	800e7e6 <_dtoa_r+0x9e>
 800e7c0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e7c2:	f242 730f 	movw	r3, #9999	@ 0x270f
 800e7c6:	6013      	str	r3, [r2, #0]
 800e7c8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e7cc:	4323      	orrs	r3, r4
 800e7ce:	f000 855a 	beq.w	800f286 <_dtoa_r+0xb3e>
 800e7d2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e7d4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800ea34 <_dtoa_r+0x2ec>
 800e7d8:	2b00      	cmp	r3, #0
 800e7da:	f000 855c 	beq.w	800f296 <_dtoa_r+0xb4e>
 800e7de:	f10a 0303 	add.w	r3, sl, #3
 800e7e2:	f000 bd56 	b.w	800f292 <_dtoa_r+0xb4a>
 800e7e6:	ed9d 7b04 	vldr	d7, [sp, #16]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	ec51 0b17 	vmov	r0, r1, d7
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800e7f6:	f7f2 f96f 	bl	8000ad8 <__aeabi_dcmpeq>
 800e7fa:	4680      	mov	r8, r0
 800e7fc:	b158      	cbz	r0, 800e816 <_dtoa_r+0xce>
 800e7fe:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800e800:	2301      	movs	r3, #1
 800e802:	6013      	str	r3, [r2, #0]
 800e804:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e806:	b113      	cbz	r3, 800e80e <_dtoa_r+0xc6>
 800e808:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e80a:	4b86      	ldr	r3, [pc, #536]	@ (800ea24 <_dtoa_r+0x2dc>)
 800e80c:	6013      	str	r3, [r2, #0]
 800e80e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800ea38 <_dtoa_r+0x2f0>
 800e812:	f000 bd40 	b.w	800f296 <_dtoa_r+0xb4e>
 800e816:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800e81a:	aa14      	add	r2, sp, #80	@ 0x50
 800e81c:	a915      	add	r1, sp, #84	@ 0x54
 800e81e:	4648      	mov	r0, r9
 800e820:	f001 fd8a 	bl	8010338 <__d2b>
 800e824:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800e828:	9002      	str	r0, [sp, #8]
 800e82a:	2e00      	cmp	r6, #0
 800e82c:	d078      	beq.n	800e920 <_dtoa_r+0x1d8>
 800e82e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e830:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800e834:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e838:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e83c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800e840:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800e844:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800e848:	4619      	mov	r1, r3
 800e84a:	2200      	movs	r2, #0
 800e84c:	4b76      	ldr	r3, [pc, #472]	@ (800ea28 <_dtoa_r+0x2e0>)
 800e84e:	f7f1 fd23 	bl	8000298 <__aeabi_dsub>
 800e852:	a36b      	add	r3, pc, #428	@ (adr r3, 800ea00 <_dtoa_r+0x2b8>)
 800e854:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e858:	f7f1 fed6 	bl	8000608 <__aeabi_dmul>
 800e85c:	a36a      	add	r3, pc, #424	@ (adr r3, 800ea08 <_dtoa_r+0x2c0>)
 800e85e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e862:	f7f1 fd1b 	bl	800029c <__adddf3>
 800e866:	4604      	mov	r4, r0
 800e868:	4630      	mov	r0, r6
 800e86a:	460d      	mov	r5, r1
 800e86c:	f7f1 fe62 	bl	8000534 <__aeabi_i2d>
 800e870:	a367      	add	r3, pc, #412	@ (adr r3, 800ea10 <_dtoa_r+0x2c8>)
 800e872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e876:	f7f1 fec7 	bl	8000608 <__aeabi_dmul>
 800e87a:	4602      	mov	r2, r0
 800e87c:	460b      	mov	r3, r1
 800e87e:	4620      	mov	r0, r4
 800e880:	4629      	mov	r1, r5
 800e882:	f7f1 fd0b 	bl	800029c <__adddf3>
 800e886:	4604      	mov	r4, r0
 800e888:	460d      	mov	r5, r1
 800e88a:	f7f2 f96d 	bl	8000b68 <__aeabi_d2iz>
 800e88e:	2200      	movs	r2, #0
 800e890:	4607      	mov	r7, r0
 800e892:	2300      	movs	r3, #0
 800e894:	4620      	mov	r0, r4
 800e896:	4629      	mov	r1, r5
 800e898:	f7f2 f928 	bl	8000aec <__aeabi_dcmplt>
 800e89c:	b140      	cbz	r0, 800e8b0 <_dtoa_r+0x168>
 800e89e:	4638      	mov	r0, r7
 800e8a0:	f7f1 fe48 	bl	8000534 <__aeabi_i2d>
 800e8a4:	4622      	mov	r2, r4
 800e8a6:	462b      	mov	r3, r5
 800e8a8:	f7f2 f916 	bl	8000ad8 <__aeabi_dcmpeq>
 800e8ac:	b900      	cbnz	r0, 800e8b0 <_dtoa_r+0x168>
 800e8ae:	3f01      	subs	r7, #1
 800e8b0:	2f16      	cmp	r7, #22
 800e8b2:	d852      	bhi.n	800e95a <_dtoa_r+0x212>
 800e8b4:	4b5d      	ldr	r3, [pc, #372]	@ (800ea2c <_dtoa_r+0x2e4>)
 800e8b6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8be:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800e8c2:	f7f2 f913 	bl	8000aec <__aeabi_dcmplt>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d049      	beq.n	800e95e <_dtoa_r+0x216>
 800e8ca:	3f01      	subs	r7, #1
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	9310      	str	r3, [sp, #64]	@ 0x40
 800e8d0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800e8d2:	1b9b      	subs	r3, r3, r6
 800e8d4:	1e5a      	subs	r2, r3, #1
 800e8d6:	bf45      	ittet	mi
 800e8d8:	f1c3 0301 	rsbmi	r3, r3, #1
 800e8dc:	9300      	strmi	r3, [sp, #0]
 800e8de:	2300      	movpl	r3, #0
 800e8e0:	2300      	movmi	r3, #0
 800e8e2:	9206      	str	r2, [sp, #24]
 800e8e4:	bf54      	ite	pl
 800e8e6:	9300      	strpl	r3, [sp, #0]
 800e8e8:	9306      	strmi	r3, [sp, #24]
 800e8ea:	2f00      	cmp	r7, #0
 800e8ec:	db39      	blt.n	800e962 <_dtoa_r+0x21a>
 800e8ee:	9b06      	ldr	r3, [sp, #24]
 800e8f0:	970d      	str	r7, [sp, #52]	@ 0x34
 800e8f2:	443b      	add	r3, r7
 800e8f4:	9306      	str	r3, [sp, #24]
 800e8f6:	2300      	movs	r3, #0
 800e8f8:	9308      	str	r3, [sp, #32]
 800e8fa:	9b07      	ldr	r3, [sp, #28]
 800e8fc:	2b09      	cmp	r3, #9
 800e8fe:	d863      	bhi.n	800e9c8 <_dtoa_r+0x280>
 800e900:	2b05      	cmp	r3, #5
 800e902:	bfc4      	itt	gt
 800e904:	3b04      	subgt	r3, #4
 800e906:	9307      	strgt	r3, [sp, #28]
 800e908:	9b07      	ldr	r3, [sp, #28]
 800e90a:	f1a3 0302 	sub.w	r3, r3, #2
 800e90e:	bfcc      	ite	gt
 800e910:	2400      	movgt	r4, #0
 800e912:	2401      	movle	r4, #1
 800e914:	2b03      	cmp	r3, #3
 800e916:	d863      	bhi.n	800e9e0 <_dtoa_r+0x298>
 800e918:	e8df f003 	tbb	[pc, r3]
 800e91c:	2b375452 	.word	0x2b375452
 800e920:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800e924:	441e      	add	r6, r3
 800e926:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800e92a:	2b20      	cmp	r3, #32
 800e92c:	bfc1      	itttt	gt
 800e92e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800e932:	409f      	lslgt	r7, r3
 800e934:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800e938:	fa24 f303 	lsrgt.w	r3, r4, r3
 800e93c:	bfd6      	itet	le
 800e93e:	f1c3 0320 	rsble	r3, r3, #32
 800e942:	ea47 0003 	orrgt.w	r0, r7, r3
 800e946:	fa04 f003 	lslle.w	r0, r4, r3
 800e94a:	f7f1 fde3 	bl	8000514 <__aeabi_ui2d>
 800e94e:	2201      	movs	r2, #1
 800e950:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800e954:	3e01      	subs	r6, #1
 800e956:	9212      	str	r2, [sp, #72]	@ 0x48
 800e958:	e776      	b.n	800e848 <_dtoa_r+0x100>
 800e95a:	2301      	movs	r3, #1
 800e95c:	e7b7      	b.n	800e8ce <_dtoa_r+0x186>
 800e95e:	9010      	str	r0, [sp, #64]	@ 0x40
 800e960:	e7b6      	b.n	800e8d0 <_dtoa_r+0x188>
 800e962:	9b00      	ldr	r3, [sp, #0]
 800e964:	1bdb      	subs	r3, r3, r7
 800e966:	9300      	str	r3, [sp, #0]
 800e968:	427b      	negs	r3, r7
 800e96a:	9308      	str	r3, [sp, #32]
 800e96c:	2300      	movs	r3, #0
 800e96e:	930d      	str	r3, [sp, #52]	@ 0x34
 800e970:	e7c3      	b.n	800e8fa <_dtoa_r+0x1b2>
 800e972:	2301      	movs	r3, #1
 800e974:	9309      	str	r3, [sp, #36]	@ 0x24
 800e976:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e978:	eb07 0b03 	add.w	fp, r7, r3
 800e97c:	f10b 0301 	add.w	r3, fp, #1
 800e980:	2b01      	cmp	r3, #1
 800e982:	9303      	str	r3, [sp, #12]
 800e984:	bfb8      	it	lt
 800e986:	2301      	movlt	r3, #1
 800e988:	e006      	b.n	800e998 <_dtoa_r+0x250>
 800e98a:	2301      	movs	r3, #1
 800e98c:	9309      	str	r3, [sp, #36]	@ 0x24
 800e98e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e990:	2b00      	cmp	r3, #0
 800e992:	dd28      	ble.n	800e9e6 <_dtoa_r+0x29e>
 800e994:	469b      	mov	fp, r3
 800e996:	9303      	str	r3, [sp, #12]
 800e998:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800e99c:	2100      	movs	r1, #0
 800e99e:	2204      	movs	r2, #4
 800e9a0:	f102 0514 	add.w	r5, r2, #20
 800e9a4:	429d      	cmp	r5, r3
 800e9a6:	d926      	bls.n	800e9f6 <_dtoa_r+0x2ae>
 800e9a8:	6041      	str	r1, [r0, #4]
 800e9aa:	4648      	mov	r0, r9
 800e9ac:	f001 f8e8 	bl	800fb80 <_Balloc>
 800e9b0:	4682      	mov	sl, r0
 800e9b2:	2800      	cmp	r0, #0
 800e9b4:	d142      	bne.n	800ea3c <_dtoa_r+0x2f4>
 800e9b6:	4b1e      	ldr	r3, [pc, #120]	@ (800ea30 <_dtoa_r+0x2e8>)
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	f240 11af 	movw	r1, #431	@ 0x1af
 800e9be:	e6da      	b.n	800e776 <_dtoa_r+0x2e>
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	e7e3      	b.n	800e98c <_dtoa_r+0x244>
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	e7d5      	b.n	800e974 <_dtoa_r+0x22c>
 800e9c8:	2401      	movs	r4, #1
 800e9ca:	2300      	movs	r3, #0
 800e9cc:	9307      	str	r3, [sp, #28]
 800e9ce:	9409      	str	r4, [sp, #36]	@ 0x24
 800e9d0:	f04f 3bff 	mov.w	fp, #4294967295
 800e9d4:	2200      	movs	r2, #0
 800e9d6:	f8cd b00c 	str.w	fp, [sp, #12]
 800e9da:	2312      	movs	r3, #18
 800e9dc:	920c      	str	r2, [sp, #48]	@ 0x30
 800e9de:	e7db      	b.n	800e998 <_dtoa_r+0x250>
 800e9e0:	2301      	movs	r3, #1
 800e9e2:	9309      	str	r3, [sp, #36]	@ 0x24
 800e9e4:	e7f4      	b.n	800e9d0 <_dtoa_r+0x288>
 800e9e6:	f04f 0b01 	mov.w	fp, #1
 800e9ea:	f8cd b00c 	str.w	fp, [sp, #12]
 800e9ee:	465b      	mov	r3, fp
 800e9f0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800e9f4:	e7d0      	b.n	800e998 <_dtoa_r+0x250>
 800e9f6:	3101      	adds	r1, #1
 800e9f8:	0052      	lsls	r2, r2, #1
 800e9fa:	e7d1      	b.n	800e9a0 <_dtoa_r+0x258>
 800e9fc:	f3af 8000 	nop.w
 800ea00:	636f4361 	.word	0x636f4361
 800ea04:	3fd287a7 	.word	0x3fd287a7
 800ea08:	8b60c8b3 	.word	0x8b60c8b3
 800ea0c:	3fc68a28 	.word	0x3fc68a28
 800ea10:	509f79fb 	.word	0x509f79fb
 800ea14:	3fd34413 	.word	0x3fd34413
 800ea18:	08011bc7 	.word	0x08011bc7
 800ea1c:	08011bde 	.word	0x08011bde
 800ea20:	7ff00000 	.word	0x7ff00000
 800ea24:	08011b8f 	.word	0x08011b8f
 800ea28:	3ff80000 	.word	0x3ff80000
 800ea2c:	08011ed8 	.word	0x08011ed8
 800ea30:	08011c36 	.word	0x08011c36
 800ea34:	08011bc3 	.word	0x08011bc3
 800ea38:	08011b8e 	.word	0x08011b8e
 800ea3c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800ea40:	6018      	str	r0, [r3, #0]
 800ea42:	9b03      	ldr	r3, [sp, #12]
 800ea44:	2b0e      	cmp	r3, #14
 800ea46:	f200 80a1 	bhi.w	800eb8c <_dtoa_r+0x444>
 800ea4a:	2c00      	cmp	r4, #0
 800ea4c:	f000 809e 	beq.w	800eb8c <_dtoa_r+0x444>
 800ea50:	2f00      	cmp	r7, #0
 800ea52:	dd33      	ble.n	800eabc <_dtoa_r+0x374>
 800ea54:	4b9c      	ldr	r3, [pc, #624]	@ (800ecc8 <_dtoa_r+0x580>)
 800ea56:	f007 020f 	and.w	r2, r7, #15
 800ea5a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ea5e:	ed93 7b00 	vldr	d7, [r3]
 800ea62:	05f8      	lsls	r0, r7, #23
 800ea64:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800ea68:	ea4f 1427 	mov.w	r4, r7, asr #4
 800ea6c:	d516      	bpl.n	800ea9c <_dtoa_r+0x354>
 800ea6e:	4b97      	ldr	r3, [pc, #604]	@ (800eccc <_dtoa_r+0x584>)
 800ea70:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ea74:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800ea78:	f7f1 fef0 	bl	800085c <__aeabi_ddiv>
 800ea7c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea80:	f004 040f 	and.w	r4, r4, #15
 800ea84:	2603      	movs	r6, #3
 800ea86:	4d91      	ldr	r5, [pc, #580]	@ (800eccc <_dtoa_r+0x584>)
 800ea88:	b954      	cbnz	r4, 800eaa0 <_dtoa_r+0x358>
 800ea8a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ea8e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ea92:	f7f1 fee3 	bl	800085c <__aeabi_ddiv>
 800ea96:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ea9a:	e028      	b.n	800eaee <_dtoa_r+0x3a6>
 800ea9c:	2602      	movs	r6, #2
 800ea9e:	e7f2      	b.n	800ea86 <_dtoa_r+0x33e>
 800eaa0:	07e1      	lsls	r1, r4, #31
 800eaa2:	d508      	bpl.n	800eab6 <_dtoa_r+0x36e>
 800eaa4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eaa8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eaac:	f7f1 fdac 	bl	8000608 <__aeabi_dmul>
 800eab0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800eab4:	3601      	adds	r6, #1
 800eab6:	1064      	asrs	r4, r4, #1
 800eab8:	3508      	adds	r5, #8
 800eaba:	e7e5      	b.n	800ea88 <_dtoa_r+0x340>
 800eabc:	f000 80af 	beq.w	800ec1e <_dtoa_r+0x4d6>
 800eac0:	427c      	negs	r4, r7
 800eac2:	4b81      	ldr	r3, [pc, #516]	@ (800ecc8 <_dtoa_r+0x580>)
 800eac4:	4d81      	ldr	r5, [pc, #516]	@ (800eccc <_dtoa_r+0x584>)
 800eac6:	f004 020f 	and.w	r2, r4, #15
 800eaca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800eace:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ead2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800ead6:	f7f1 fd97 	bl	8000608 <__aeabi_dmul>
 800eada:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eade:	1124      	asrs	r4, r4, #4
 800eae0:	2300      	movs	r3, #0
 800eae2:	2602      	movs	r6, #2
 800eae4:	2c00      	cmp	r4, #0
 800eae6:	f040 808f 	bne.w	800ec08 <_dtoa_r+0x4c0>
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d1d3      	bne.n	800ea96 <_dtoa_r+0x34e>
 800eaee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800eaf0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	f000 8094 	beq.w	800ec22 <_dtoa_r+0x4da>
 800eafa:	4b75      	ldr	r3, [pc, #468]	@ (800ecd0 <_dtoa_r+0x588>)
 800eafc:	2200      	movs	r2, #0
 800eafe:	4620      	mov	r0, r4
 800eb00:	4629      	mov	r1, r5
 800eb02:	f7f1 fff3 	bl	8000aec <__aeabi_dcmplt>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	f000 808b 	beq.w	800ec22 <_dtoa_r+0x4da>
 800eb0c:	9b03      	ldr	r3, [sp, #12]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	f000 8087 	beq.w	800ec22 <_dtoa_r+0x4da>
 800eb14:	f1bb 0f00 	cmp.w	fp, #0
 800eb18:	dd34      	ble.n	800eb84 <_dtoa_r+0x43c>
 800eb1a:	4620      	mov	r0, r4
 800eb1c:	4b6d      	ldr	r3, [pc, #436]	@ (800ecd4 <_dtoa_r+0x58c>)
 800eb1e:	2200      	movs	r2, #0
 800eb20:	4629      	mov	r1, r5
 800eb22:	f7f1 fd71 	bl	8000608 <__aeabi_dmul>
 800eb26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb2a:	f107 38ff 	add.w	r8, r7, #4294967295
 800eb2e:	3601      	adds	r6, #1
 800eb30:	465c      	mov	r4, fp
 800eb32:	4630      	mov	r0, r6
 800eb34:	f7f1 fcfe 	bl	8000534 <__aeabi_i2d>
 800eb38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800eb3c:	f7f1 fd64 	bl	8000608 <__aeabi_dmul>
 800eb40:	4b65      	ldr	r3, [pc, #404]	@ (800ecd8 <_dtoa_r+0x590>)
 800eb42:	2200      	movs	r2, #0
 800eb44:	f7f1 fbaa 	bl	800029c <__adddf3>
 800eb48:	4605      	mov	r5, r0
 800eb4a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800eb4e:	2c00      	cmp	r4, #0
 800eb50:	d16a      	bne.n	800ec28 <_dtoa_r+0x4e0>
 800eb52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb56:	4b61      	ldr	r3, [pc, #388]	@ (800ecdc <_dtoa_r+0x594>)
 800eb58:	2200      	movs	r2, #0
 800eb5a:	f7f1 fb9d 	bl	8000298 <__aeabi_dsub>
 800eb5e:	4602      	mov	r2, r0
 800eb60:	460b      	mov	r3, r1
 800eb62:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800eb66:	462a      	mov	r2, r5
 800eb68:	4633      	mov	r3, r6
 800eb6a:	f7f1 ffdd 	bl	8000b28 <__aeabi_dcmpgt>
 800eb6e:	2800      	cmp	r0, #0
 800eb70:	f040 8298 	bne.w	800f0a4 <_dtoa_r+0x95c>
 800eb74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800eb78:	462a      	mov	r2, r5
 800eb7a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800eb7e:	f7f1 ffb5 	bl	8000aec <__aeabi_dcmplt>
 800eb82:	bb38      	cbnz	r0, 800ebd4 <_dtoa_r+0x48c>
 800eb84:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800eb88:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800eb8c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	f2c0 8157 	blt.w	800ee42 <_dtoa_r+0x6fa>
 800eb94:	2f0e      	cmp	r7, #14
 800eb96:	f300 8154 	bgt.w	800ee42 <_dtoa_r+0x6fa>
 800eb9a:	4b4b      	ldr	r3, [pc, #300]	@ (800ecc8 <_dtoa_r+0x580>)
 800eb9c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800eba0:	ed93 7b00 	vldr	d7, [r3]
 800eba4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800eba6:	2b00      	cmp	r3, #0
 800eba8:	ed8d 7b00 	vstr	d7, [sp]
 800ebac:	f280 80e5 	bge.w	800ed7a <_dtoa_r+0x632>
 800ebb0:	9b03      	ldr	r3, [sp, #12]
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	f300 80e1 	bgt.w	800ed7a <_dtoa_r+0x632>
 800ebb8:	d10c      	bne.n	800ebd4 <_dtoa_r+0x48c>
 800ebba:	4b48      	ldr	r3, [pc, #288]	@ (800ecdc <_dtoa_r+0x594>)
 800ebbc:	2200      	movs	r2, #0
 800ebbe:	ec51 0b17 	vmov	r0, r1, d7
 800ebc2:	f7f1 fd21 	bl	8000608 <__aeabi_dmul>
 800ebc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebca:	f7f1 ffa3 	bl	8000b14 <__aeabi_dcmpge>
 800ebce:	2800      	cmp	r0, #0
 800ebd0:	f000 8266 	beq.w	800f0a0 <_dtoa_r+0x958>
 800ebd4:	2400      	movs	r4, #0
 800ebd6:	4625      	mov	r5, r4
 800ebd8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800ebda:	4656      	mov	r6, sl
 800ebdc:	ea6f 0803 	mvn.w	r8, r3
 800ebe0:	2700      	movs	r7, #0
 800ebe2:	4621      	mov	r1, r4
 800ebe4:	4648      	mov	r0, r9
 800ebe6:	f001 f80b 	bl	800fc00 <_Bfree>
 800ebea:	2d00      	cmp	r5, #0
 800ebec:	f000 80bd 	beq.w	800ed6a <_dtoa_r+0x622>
 800ebf0:	b12f      	cbz	r7, 800ebfe <_dtoa_r+0x4b6>
 800ebf2:	42af      	cmp	r7, r5
 800ebf4:	d003      	beq.n	800ebfe <_dtoa_r+0x4b6>
 800ebf6:	4639      	mov	r1, r7
 800ebf8:	4648      	mov	r0, r9
 800ebfa:	f001 f801 	bl	800fc00 <_Bfree>
 800ebfe:	4629      	mov	r1, r5
 800ec00:	4648      	mov	r0, r9
 800ec02:	f000 fffd 	bl	800fc00 <_Bfree>
 800ec06:	e0b0      	b.n	800ed6a <_dtoa_r+0x622>
 800ec08:	07e2      	lsls	r2, r4, #31
 800ec0a:	d505      	bpl.n	800ec18 <_dtoa_r+0x4d0>
 800ec0c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ec10:	f7f1 fcfa 	bl	8000608 <__aeabi_dmul>
 800ec14:	3601      	adds	r6, #1
 800ec16:	2301      	movs	r3, #1
 800ec18:	1064      	asrs	r4, r4, #1
 800ec1a:	3508      	adds	r5, #8
 800ec1c:	e762      	b.n	800eae4 <_dtoa_r+0x39c>
 800ec1e:	2602      	movs	r6, #2
 800ec20:	e765      	b.n	800eaee <_dtoa_r+0x3a6>
 800ec22:	9c03      	ldr	r4, [sp, #12]
 800ec24:	46b8      	mov	r8, r7
 800ec26:	e784      	b.n	800eb32 <_dtoa_r+0x3ea>
 800ec28:	4b27      	ldr	r3, [pc, #156]	@ (800ecc8 <_dtoa_r+0x580>)
 800ec2a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ec2c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ec30:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ec34:	4454      	add	r4, sl
 800ec36:	2900      	cmp	r1, #0
 800ec38:	d054      	beq.n	800ece4 <_dtoa_r+0x59c>
 800ec3a:	4929      	ldr	r1, [pc, #164]	@ (800ece0 <_dtoa_r+0x598>)
 800ec3c:	2000      	movs	r0, #0
 800ec3e:	f7f1 fe0d 	bl	800085c <__aeabi_ddiv>
 800ec42:	4633      	mov	r3, r6
 800ec44:	462a      	mov	r2, r5
 800ec46:	f7f1 fb27 	bl	8000298 <__aeabi_dsub>
 800ec4a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ec4e:	4656      	mov	r6, sl
 800ec50:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec54:	f7f1 ff88 	bl	8000b68 <__aeabi_d2iz>
 800ec58:	4605      	mov	r5, r0
 800ec5a:	f7f1 fc6b 	bl	8000534 <__aeabi_i2d>
 800ec5e:	4602      	mov	r2, r0
 800ec60:	460b      	mov	r3, r1
 800ec62:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec66:	f7f1 fb17 	bl	8000298 <__aeabi_dsub>
 800ec6a:	3530      	adds	r5, #48	@ 0x30
 800ec6c:	4602      	mov	r2, r0
 800ec6e:	460b      	mov	r3, r1
 800ec70:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ec74:	f806 5b01 	strb.w	r5, [r6], #1
 800ec78:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ec7c:	f7f1 ff36 	bl	8000aec <__aeabi_dcmplt>
 800ec80:	2800      	cmp	r0, #0
 800ec82:	d172      	bne.n	800ed6a <_dtoa_r+0x622>
 800ec84:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ec88:	4911      	ldr	r1, [pc, #68]	@ (800ecd0 <_dtoa_r+0x588>)
 800ec8a:	2000      	movs	r0, #0
 800ec8c:	f7f1 fb04 	bl	8000298 <__aeabi_dsub>
 800ec90:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ec94:	f7f1 ff2a 	bl	8000aec <__aeabi_dcmplt>
 800ec98:	2800      	cmp	r0, #0
 800ec9a:	f040 80b4 	bne.w	800ee06 <_dtoa_r+0x6be>
 800ec9e:	42a6      	cmp	r6, r4
 800eca0:	f43f af70 	beq.w	800eb84 <_dtoa_r+0x43c>
 800eca4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800eca8:	4b0a      	ldr	r3, [pc, #40]	@ (800ecd4 <_dtoa_r+0x58c>)
 800ecaa:	2200      	movs	r2, #0
 800ecac:	f7f1 fcac 	bl	8000608 <__aeabi_dmul>
 800ecb0:	4b08      	ldr	r3, [pc, #32]	@ (800ecd4 <_dtoa_r+0x58c>)
 800ecb2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ecb6:	2200      	movs	r2, #0
 800ecb8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecbc:	f7f1 fca4 	bl	8000608 <__aeabi_dmul>
 800ecc0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ecc4:	e7c4      	b.n	800ec50 <_dtoa_r+0x508>
 800ecc6:	bf00      	nop
 800ecc8:	08011ed8 	.word	0x08011ed8
 800eccc:	08011eb0 	.word	0x08011eb0
 800ecd0:	3ff00000 	.word	0x3ff00000
 800ecd4:	40240000 	.word	0x40240000
 800ecd8:	401c0000 	.word	0x401c0000
 800ecdc:	40140000 	.word	0x40140000
 800ece0:	3fe00000 	.word	0x3fe00000
 800ece4:	4631      	mov	r1, r6
 800ece6:	4628      	mov	r0, r5
 800ece8:	f7f1 fc8e 	bl	8000608 <__aeabi_dmul>
 800ecec:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800ecf0:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ecf2:	4656      	mov	r6, sl
 800ecf4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ecf8:	f7f1 ff36 	bl	8000b68 <__aeabi_d2iz>
 800ecfc:	4605      	mov	r5, r0
 800ecfe:	f7f1 fc19 	bl	8000534 <__aeabi_i2d>
 800ed02:	4602      	mov	r2, r0
 800ed04:	460b      	mov	r3, r1
 800ed06:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed0a:	f7f1 fac5 	bl	8000298 <__aeabi_dsub>
 800ed0e:	3530      	adds	r5, #48	@ 0x30
 800ed10:	f806 5b01 	strb.w	r5, [r6], #1
 800ed14:	4602      	mov	r2, r0
 800ed16:	460b      	mov	r3, r1
 800ed18:	42a6      	cmp	r6, r4
 800ed1a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800ed1e:	f04f 0200 	mov.w	r2, #0
 800ed22:	d124      	bne.n	800ed6e <_dtoa_r+0x626>
 800ed24:	4baf      	ldr	r3, [pc, #700]	@ (800efe4 <_dtoa_r+0x89c>)
 800ed26:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800ed2a:	f7f1 fab7 	bl	800029c <__adddf3>
 800ed2e:	4602      	mov	r2, r0
 800ed30:	460b      	mov	r3, r1
 800ed32:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed36:	f7f1 fef7 	bl	8000b28 <__aeabi_dcmpgt>
 800ed3a:	2800      	cmp	r0, #0
 800ed3c:	d163      	bne.n	800ee06 <_dtoa_r+0x6be>
 800ed3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800ed42:	49a8      	ldr	r1, [pc, #672]	@ (800efe4 <_dtoa_r+0x89c>)
 800ed44:	2000      	movs	r0, #0
 800ed46:	f7f1 faa7 	bl	8000298 <__aeabi_dsub>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed52:	f7f1 fecb 	bl	8000aec <__aeabi_dcmplt>
 800ed56:	2800      	cmp	r0, #0
 800ed58:	f43f af14 	beq.w	800eb84 <_dtoa_r+0x43c>
 800ed5c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800ed5e:	1e73      	subs	r3, r6, #1
 800ed60:	9313      	str	r3, [sp, #76]	@ 0x4c
 800ed62:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ed66:	2b30      	cmp	r3, #48	@ 0x30
 800ed68:	d0f8      	beq.n	800ed5c <_dtoa_r+0x614>
 800ed6a:	4647      	mov	r7, r8
 800ed6c:	e03b      	b.n	800ede6 <_dtoa_r+0x69e>
 800ed6e:	4b9e      	ldr	r3, [pc, #632]	@ (800efe8 <_dtoa_r+0x8a0>)
 800ed70:	f7f1 fc4a 	bl	8000608 <__aeabi_dmul>
 800ed74:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed78:	e7bc      	b.n	800ecf4 <_dtoa_r+0x5ac>
 800ed7a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800ed7e:	4656      	mov	r6, sl
 800ed80:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed84:	4620      	mov	r0, r4
 800ed86:	4629      	mov	r1, r5
 800ed88:	f7f1 fd68 	bl	800085c <__aeabi_ddiv>
 800ed8c:	f7f1 feec 	bl	8000b68 <__aeabi_d2iz>
 800ed90:	4680      	mov	r8, r0
 800ed92:	f7f1 fbcf 	bl	8000534 <__aeabi_i2d>
 800ed96:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed9a:	f7f1 fc35 	bl	8000608 <__aeabi_dmul>
 800ed9e:	4602      	mov	r2, r0
 800eda0:	460b      	mov	r3, r1
 800eda2:	4620      	mov	r0, r4
 800eda4:	4629      	mov	r1, r5
 800eda6:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800edaa:	f7f1 fa75 	bl	8000298 <__aeabi_dsub>
 800edae:	f806 4b01 	strb.w	r4, [r6], #1
 800edb2:	9d03      	ldr	r5, [sp, #12]
 800edb4:	eba6 040a 	sub.w	r4, r6, sl
 800edb8:	42a5      	cmp	r5, r4
 800edba:	4602      	mov	r2, r0
 800edbc:	460b      	mov	r3, r1
 800edbe:	d133      	bne.n	800ee28 <_dtoa_r+0x6e0>
 800edc0:	f7f1 fa6c 	bl	800029c <__adddf3>
 800edc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edc8:	4604      	mov	r4, r0
 800edca:	460d      	mov	r5, r1
 800edcc:	f7f1 feac 	bl	8000b28 <__aeabi_dcmpgt>
 800edd0:	b9c0      	cbnz	r0, 800ee04 <_dtoa_r+0x6bc>
 800edd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edd6:	4620      	mov	r0, r4
 800edd8:	4629      	mov	r1, r5
 800edda:	f7f1 fe7d 	bl	8000ad8 <__aeabi_dcmpeq>
 800edde:	b110      	cbz	r0, 800ede6 <_dtoa_r+0x69e>
 800ede0:	f018 0f01 	tst.w	r8, #1
 800ede4:	d10e      	bne.n	800ee04 <_dtoa_r+0x6bc>
 800ede6:	9902      	ldr	r1, [sp, #8]
 800ede8:	4648      	mov	r0, r9
 800edea:	f000 ff09 	bl	800fc00 <_Bfree>
 800edee:	2300      	movs	r3, #0
 800edf0:	7033      	strb	r3, [r6, #0]
 800edf2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800edf4:	3701      	adds	r7, #1
 800edf6:	601f      	str	r7, [r3, #0]
 800edf8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	f000 824b 	beq.w	800f296 <_dtoa_r+0xb4e>
 800ee00:	601e      	str	r6, [r3, #0]
 800ee02:	e248      	b.n	800f296 <_dtoa_r+0xb4e>
 800ee04:	46b8      	mov	r8, r7
 800ee06:	4633      	mov	r3, r6
 800ee08:	461e      	mov	r6, r3
 800ee0a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ee0e:	2a39      	cmp	r2, #57	@ 0x39
 800ee10:	d106      	bne.n	800ee20 <_dtoa_r+0x6d8>
 800ee12:	459a      	cmp	sl, r3
 800ee14:	d1f8      	bne.n	800ee08 <_dtoa_r+0x6c0>
 800ee16:	2230      	movs	r2, #48	@ 0x30
 800ee18:	f108 0801 	add.w	r8, r8, #1
 800ee1c:	f88a 2000 	strb.w	r2, [sl]
 800ee20:	781a      	ldrb	r2, [r3, #0]
 800ee22:	3201      	adds	r2, #1
 800ee24:	701a      	strb	r2, [r3, #0]
 800ee26:	e7a0      	b.n	800ed6a <_dtoa_r+0x622>
 800ee28:	4b6f      	ldr	r3, [pc, #444]	@ (800efe8 <_dtoa_r+0x8a0>)
 800ee2a:	2200      	movs	r2, #0
 800ee2c:	f7f1 fbec 	bl	8000608 <__aeabi_dmul>
 800ee30:	2200      	movs	r2, #0
 800ee32:	2300      	movs	r3, #0
 800ee34:	4604      	mov	r4, r0
 800ee36:	460d      	mov	r5, r1
 800ee38:	f7f1 fe4e 	bl	8000ad8 <__aeabi_dcmpeq>
 800ee3c:	2800      	cmp	r0, #0
 800ee3e:	d09f      	beq.n	800ed80 <_dtoa_r+0x638>
 800ee40:	e7d1      	b.n	800ede6 <_dtoa_r+0x69e>
 800ee42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee44:	2a00      	cmp	r2, #0
 800ee46:	f000 80ea 	beq.w	800f01e <_dtoa_r+0x8d6>
 800ee4a:	9a07      	ldr	r2, [sp, #28]
 800ee4c:	2a01      	cmp	r2, #1
 800ee4e:	f300 80cd 	bgt.w	800efec <_dtoa_r+0x8a4>
 800ee52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800ee54:	2a00      	cmp	r2, #0
 800ee56:	f000 80c1 	beq.w	800efdc <_dtoa_r+0x894>
 800ee5a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800ee5e:	9c08      	ldr	r4, [sp, #32]
 800ee60:	9e00      	ldr	r6, [sp, #0]
 800ee62:	9a00      	ldr	r2, [sp, #0]
 800ee64:	441a      	add	r2, r3
 800ee66:	9200      	str	r2, [sp, #0]
 800ee68:	9a06      	ldr	r2, [sp, #24]
 800ee6a:	2101      	movs	r1, #1
 800ee6c:	441a      	add	r2, r3
 800ee6e:	4648      	mov	r0, r9
 800ee70:	9206      	str	r2, [sp, #24]
 800ee72:	f000 ffc3 	bl	800fdfc <__i2b>
 800ee76:	4605      	mov	r5, r0
 800ee78:	b166      	cbz	r6, 800ee94 <_dtoa_r+0x74c>
 800ee7a:	9b06      	ldr	r3, [sp, #24]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	dd09      	ble.n	800ee94 <_dtoa_r+0x74c>
 800ee80:	42b3      	cmp	r3, r6
 800ee82:	9a00      	ldr	r2, [sp, #0]
 800ee84:	bfa8      	it	ge
 800ee86:	4633      	movge	r3, r6
 800ee88:	1ad2      	subs	r2, r2, r3
 800ee8a:	9200      	str	r2, [sp, #0]
 800ee8c:	9a06      	ldr	r2, [sp, #24]
 800ee8e:	1af6      	subs	r6, r6, r3
 800ee90:	1ad3      	subs	r3, r2, r3
 800ee92:	9306      	str	r3, [sp, #24]
 800ee94:	9b08      	ldr	r3, [sp, #32]
 800ee96:	b30b      	cbz	r3, 800eedc <_dtoa_r+0x794>
 800ee98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee9a:	2b00      	cmp	r3, #0
 800ee9c:	f000 80c6 	beq.w	800f02c <_dtoa_r+0x8e4>
 800eea0:	2c00      	cmp	r4, #0
 800eea2:	f000 80c0 	beq.w	800f026 <_dtoa_r+0x8de>
 800eea6:	4629      	mov	r1, r5
 800eea8:	4622      	mov	r2, r4
 800eeaa:	4648      	mov	r0, r9
 800eeac:	f001 f85e 	bl	800ff6c <__pow5mult>
 800eeb0:	9a02      	ldr	r2, [sp, #8]
 800eeb2:	4601      	mov	r1, r0
 800eeb4:	4605      	mov	r5, r0
 800eeb6:	4648      	mov	r0, r9
 800eeb8:	f000 ffb6 	bl	800fe28 <__multiply>
 800eebc:	9902      	ldr	r1, [sp, #8]
 800eebe:	4680      	mov	r8, r0
 800eec0:	4648      	mov	r0, r9
 800eec2:	f000 fe9d 	bl	800fc00 <_Bfree>
 800eec6:	9b08      	ldr	r3, [sp, #32]
 800eec8:	1b1b      	subs	r3, r3, r4
 800eeca:	9308      	str	r3, [sp, #32]
 800eecc:	f000 80b1 	beq.w	800f032 <_dtoa_r+0x8ea>
 800eed0:	9a08      	ldr	r2, [sp, #32]
 800eed2:	4641      	mov	r1, r8
 800eed4:	4648      	mov	r0, r9
 800eed6:	f001 f849 	bl	800ff6c <__pow5mult>
 800eeda:	9002      	str	r0, [sp, #8]
 800eedc:	2101      	movs	r1, #1
 800eede:	4648      	mov	r0, r9
 800eee0:	f000 ff8c 	bl	800fdfc <__i2b>
 800eee4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800eee6:	4604      	mov	r4, r0
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	f000 81d8 	beq.w	800f29e <_dtoa_r+0xb56>
 800eeee:	461a      	mov	r2, r3
 800eef0:	4601      	mov	r1, r0
 800eef2:	4648      	mov	r0, r9
 800eef4:	f001 f83a 	bl	800ff6c <__pow5mult>
 800eef8:	9b07      	ldr	r3, [sp, #28]
 800eefa:	2b01      	cmp	r3, #1
 800eefc:	4604      	mov	r4, r0
 800eefe:	f300 809f 	bgt.w	800f040 <_dtoa_r+0x8f8>
 800ef02:	9b04      	ldr	r3, [sp, #16]
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	f040 8097 	bne.w	800f038 <_dtoa_r+0x8f0>
 800ef0a:	9b05      	ldr	r3, [sp, #20]
 800ef0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ef10:	2b00      	cmp	r3, #0
 800ef12:	f040 8093 	bne.w	800f03c <_dtoa_r+0x8f4>
 800ef16:	9b05      	ldr	r3, [sp, #20]
 800ef18:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ef1c:	0d1b      	lsrs	r3, r3, #20
 800ef1e:	051b      	lsls	r3, r3, #20
 800ef20:	b133      	cbz	r3, 800ef30 <_dtoa_r+0x7e8>
 800ef22:	9b00      	ldr	r3, [sp, #0]
 800ef24:	3301      	adds	r3, #1
 800ef26:	9300      	str	r3, [sp, #0]
 800ef28:	9b06      	ldr	r3, [sp, #24]
 800ef2a:	3301      	adds	r3, #1
 800ef2c:	9306      	str	r3, [sp, #24]
 800ef2e:	2301      	movs	r3, #1
 800ef30:	9308      	str	r3, [sp, #32]
 800ef32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800ef34:	2b00      	cmp	r3, #0
 800ef36:	f000 81b8 	beq.w	800f2aa <_dtoa_r+0xb62>
 800ef3a:	6923      	ldr	r3, [r4, #16]
 800ef3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ef40:	6918      	ldr	r0, [r3, #16]
 800ef42:	f000 ff0f 	bl	800fd64 <__hi0bits>
 800ef46:	f1c0 0020 	rsb	r0, r0, #32
 800ef4a:	9b06      	ldr	r3, [sp, #24]
 800ef4c:	4418      	add	r0, r3
 800ef4e:	f010 001f 	ands.w	r0, r0, #31
 800ef52:	f000 8082 	beq.w	800f05a <_dtoa_r+0x912>
 800ef56:	f1c0 0320 	rsb	r3, r0, #32
 800ef5a:	2b04      	cmp	r3, #4
 800ef5c:	dd73      	ble.n	800f046 <_dtoa_r+0x8fe>
 800ef5e:	9b00      	ldr	r3, [sp, #0]
 800ef60:	f1c0 001c 	rsb	r0, r0, #28
 800ef64:	4403      	add	r3, r0
 800ef66:	9300      	str	r3, [sp, #0]
 800ef68:	9b06      	ldr	r3, [sp, #24]
 800ef6a:	4403      	add	r3, r0
 800ef6c:	4406      	add	r6, r0
 800ef6e:	9306      	str	r3, [sp, #24]
 800ef70:	9b00      	ldr	r3, [sp, #0]
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	dd05      	ble.n	800ef82 <_dtoa_r+0x83a>
 800ef76:	9902      	ldr	r1, [sp, #8]
 800ef78:	461a      	mov	r2, r3
 800ef7a:	4648      	mov	r0, r9
 800ef7c:	f001 f850 	bl	8010020 <__lshift>
 800ef80:	9002      	str	r0, [sp, #8]
 800ef82:	9b06      	ldr	r3, [sp, #24]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	dd05      	ble.n	800ef94 <_dtoa_r+0x84c>
 800ef88:	4621      	mov	r1, r4
 800ef8a:	461a      	mov	r2, r3
 800ef8c:	4648      	mov	r0, r9
 800ef8e:	f001 f847 	bl	8010020 <__lshift>
 800ef92:	4604      	mov	r4, r0
 800ef94:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800ef96:	2b00      	cmp	r3, #0
 800ef98:	d061      	beq.n	800f05e <_dtoa_r+0x916>
 800ef9a:	9802      	ldr	r0, [sp, #8]
 800ef9c:	4621      	mov	r1, r4
 800ef9e:	f001 f8ab 	bl	80100f8 <__mcmp>
 800efa2:	2800      	cmp	r0, #0
 800efa4:	da5b      	bge.n	800f05e <_dtoa_r+0x916>
 800efa6:	2300      	movs	r3, #0
 800efa8:	9902      	ldr	r1, [sp, #8]
 800efaa:	220a      	movs	r2, #10
 800efac:	4648      	mov	r0, r9
 800efae:	f000 fe49 	bl	800fc44 <__multadd>
 800efb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800efb4:	9002      	str	r0, [sp, #8]
 800efb6:	f107 38ff 	add.w	r8, r7, #4294967295
 800efba:	2b00      	cmp	r3, #0
 800efbc:	f000 8177 	beq.w	800f2ae <_dtoa_r+0xb66>
 800efc0:	4629      	mov	r1, r5
 800efc2:	2300      	movs	r3, #0
 800efc4:	220a      	movs	r2, #10
 800efc6:	4648      	mov	r0, r9
 800efc8:	f000 fe3c 	bl	800fc44 <__multadd>
 800efcc:	f1bb 0f00 	cmp.w	fp, #0
 800efd0:	4605      	mov	r5, r0
 800efd2:	dc6f      	bgt.n	800f0b4 <_dtoa_r+0x96c>
 800efd4:	9b07      	ldr	r3, [sp, #28]
 800efd6:	2b02      	cmp	r3, #2
 800efd8:	dc49      	bgt.n	800f06e <_dtoa_r+0x926>
 800efda:	e06b      	b.n	800f0b4 <_dtoa_r+0x96c>
 800efdc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800efde:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800efe2:	e73c      	b.n	800ee5e <_dtoa_r+0x716>
 800efe4:	3fe00000 	.word	0x3fe00000
 800efe8:	40240000 	.word	0x40240000
 800efec:	9b03      	ldr	r3, [sp, #12]
 800efee:	1e5c      	subs	r4, r3, #1
 800eff0:	9b08      	ldr	r3, [sp, #32]
 800eff2:	42a3      	cmp	r3, r4
 800eff4:	db09      	blt.n	800f00a <_dtoa_r+0x8c2>
 800eff6:	1b1c      	subs	r4, r3, r4
 800eff8:	9b03      	ldr	r3, [sp, #12]
 800effa:	2b00      	cmp	r3, #0
 800effc:	f6bf af30 	bge.w	800ee60 <_dtoa_r+0x718>
 800f000:	9b00      	ldr	r3, [sp, #0]
 800f002:	9a03      	ldr	r2, [sp, #12]
 800f004:	1a9e      	subs	r6, r3, r2
 800f006:	2300      	movs	r3, #0
 800f008:	e72b      	b.n	800ee62 <_dtoa_r+0x71a>
 800f00a:	9b08      	ldr	r3, [sp, #32]
 800f00c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800f00e:	9408      	str	r4, [sp, #32]
 800f010:	1ae3      	subs	r3, r4, r3
 800f012:	441a      	add	r2, r3
 800f014:	9e00      	ldr	r6, [sp, #0]
 800f016:	9b03      	ldr	r3, [sp, #12]
 800f018:	920d      	str	r2, [sp, #52]	@ 0x34
 800f01a:	2400      	movs	r4, #0
 800f01c:	e721      	b.n	800ee62 <_dtoa_r+0x71a>
 800f01e:	9c08      	ldr	r4, [sp, #32]
 800f020:	9e00      	ldr	r6, [sp, #0]
 800f022:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800f024:	e728      	b.n	800ee78 <_dtoa_r+0x730>
 800f026:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800f02a:	e751      	b.n	800eed0 <_dtoa_r+0x788>
 800f02c:	9a08      	ldr	r2, [sp, #32]
 800f02e:	9902      	ldr	r1, [sp, #8]
 800f030:	e750      	b.n	800eed4 <_dtoa_r+0x78c>
 800f032:	f8cd 8008 	str.w	r8, [sp, #8]
 800f036:	e751      	b.n	800eedc <_dtoa_r+0x794>
 800f038:	2300      	movs	r3, #0
 800f03a:	e779      	b.n	800ef30 <_dtoa_r+0x7e8>
 800f03c:	9b04      	ldr	r3, [sp, #16]
 800f03e:	e777      	b.n	800ef30 <_dtoa_r+0x7e8>
 800f040:	2300      	movs	r3, #0
 800f042:	9308      	str	r3, [sp, #32]
 800f044:	e779      	b.n	800ef3a <_dtoa_r+0x7f2>
 800f046:	d093      	beq.n	800ef70 <_dtoa_r+0x828>
 800f048:	9a00      	ldr	r2, [sp, #0]
 800f04a:	331c      	adds	r3, #28
 800f04c:	441a      	add	r2, r3
 800f04e:	9200      	str	r2, [sp, #0]
 800f050:	9a06      	ldr	r2, [sp, #24]
 800f052:	441a      	add	r2, r3
 800f054:	441e      	add	r6, r3
 800f056:	9206      	str	r2, [sp, #24]
 800f058:	e78a      	b.n	800ef70 <_dtoa_r+0x828>
 800f05a:	4603      	mov	r3, r0
 800f05c:	e7f4      	b.n	800f048 <_dtoa_r+0x900>
 800f05e:	9b03      	ldr	r3, [sp, #12]
 800f060:	2b00      	cmp	r3, #0
 800f062:	46b8      	mov	r8, r7
 800f064:	dc20      	bgt.n	800f0a8 <_dtoa_r+0x960>
 800f066:	469b      	mov	fp, r3
 800f068:	9b07      	ldr	r3, [sp, #28]
 800f06a:	2b02      	cmp	r3, #2
 800f06c:	dd1e      	ble.n	800f0ac <_dtoa_r+0x964>
 800f06e:	f1bb 0f00 	cmp.w	fp, #0
 800f072:	f47f adb1 	bne.w	800ebd8 <_dtoa_r+0x490>
 800f076:	4621      	mov	r1, r4
 800f078:	465b      	mov	r3, fp
 800f07a:	2205      	movs	r2, #5
 800f07c:	4648      	mov	r0, r9
 800f07e:	f000 fde1 	bl	800fc44 <__multadd>
 800f082:	4601      	mov	r1, r0
 800f084:	4604      	mov	r4, r0
 800f086:	9802      	ldr	r0, [sp, #8]
 800f088:	f001 f836 	bl	80100f8 <__mcmp>
 800f08c:	2800      	cmp	r0, #0
 800f08e:	f77f ada3 	ble.w	800ebd8 <_dtoa_r+0x490>
 800f092:	4656      	mov	r6, sl
 800f094:	2331      	movs	r3, #49	@ 0x31
 800f096:	f806 3b01 	strb.w	r3, [r6], #1
 800f09a:	f108 0801 	add.w	r8, r8, #1
 800f09e:	e59f      	b.n	800ebe0 <_dtoa_r+0x498>
 800f0a0:	9c03      	ldr	r4, [sp, #12]
 800f0a2:	46b8      	mov	r8, r7
 800f0a4:	4625      	mov	r5, r4
 800f0a6:	e7f4      	b.n	800f092 <_dtoa_r+0x94a>
 800f0a8:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800f0ac:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	f000 8101 	beq.w	800f2b6 <_dtoa_r+0xb6e>
 800f0b4:	2e00      	cmp	r6, #0
 800f0b6:	dd05      	ble.n	800f0c4 <_dtoa_r+0x97c>
 800f0b8:	4629      	mov	r1, r5
 800f0ba:	4632      	mov	r2, r6
 800f0bc:	4648      	mov	r0, r9
 800f0be:	f000 ffaf 	bl	8010020 <__lshift>
 800f0c2:	4605      	mov	r5, r0
 800f0c4:	9b08      	ldr	r3, [sp, #32]
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d05c      	beq.n	800f184 <_dtoa_r+0xa3c>
 800f0ca:	6869      	ldr	r1, [r5, #4]
 800f0cc:	4648      	mov	r0, r9
 800f0ce:	f000 fd57 	bl	800fb80 <_Balloc>
 800f0d2:	4606      	mov	r6, r0
 800f0d4:	b928      	cbnz	r0, 800f0e2 <_dtoa_r+0x99a>
 800f0d6:	4b82      	ldr	r3, [pc, #520]	@ (800f2e0 <_dtoa_r+0xb98>)
 800f0d8:	4602      	mov	r2, r0
 800f0da:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800f0de:	f7ff bb4a 	b.w	800e776 <_dtoa_r+0x2e>
 800f0e2:	692a      	ldr	r2, [r5, #16]
 800f0e4:	3202      	adds	r2, #2
 800f0e6:	0092      	lsls	r2, r2, #2
 800f0e8:	f105 010c 	add.w	r1, r5, #12
 800f0ec:	300c      	adds	r0, #12
 800f0ee:	f7ff fa8c 	bl	800e60a <memcpy>
 800f0f2:	2201      	movs	r2, #1
 800f0f4:	4631      	mov	r1, r6
 800f0f6:	4648      	mov	r0, r9
 800f0f8:	f000 ff92 	bl	8010020 <__lshift>
 800f0fc:	f10a 0301 	add.w	r3, sl, #1
 800f100:	9300      	str	r3, [sp, #0]
 800f102:	eb0a 030b 	add.w	r3, sl, fp
 800f106:	9308      	str	r3, [sp, #32]
 800f108:	9b04      	ldr	r3, [sp, #16]
 800f10a:	f003 0301 	and.w	r3, r3, #1
 800f10e:	462f      	mov	r7, r5
 800f110:	9306      	str	r3, [sp, #24]
 800f112:	4605      	mov	r5, r0
 800f114:	9b00      	ldr	r3, [sp, #0]
 800f116:	9802      	ldr	r0, [sp, #8]
 800f118:	4621      	mov	r1, r4
 800f11a:	f103 3bff 	add.w	fp, r3, #4294967295
 800f11e:	f7ff fa8b 	bl	800e638 <quorem>
 800f122:	4603      	mov	r3, r0
 800f124:	3330      	adds	r3, #48	@ 0x30
 800f126:	9003      	str	r0, [sp, #12]
 800f128:	4639      	mov	r1, r7
 800f12a:	9802      	ldr	r0, [sp, #8]
 800f12c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f12e:	f000 ffe3 	bl	80100f8 <__mcmp>
 800f132:	462a      	mov	r2, r5
 800f134:	9004      	str	r0, [sp, #16]
 800f136:	4621      	mov	r1, r4
 800f138:	4648      	mov	r0, r9
 800f13a:	f000 fff9 	bl	8010130 <__mdiff>
 800f13e:	68c2      	ldr	r2, [r0, #12]
 800f140:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f142:	4606      	mov	r6, r0
 800f144:	bb02      	cbnz	r2, 800f188 <_dtoa_r+0xa40>
 800f146:	4601      	mov	r1, r0
 800f148:	9802      	ldr	r0, [sp, #8]
 800f14a:	f000 ffd5 	bl	80100f8 <__mcmp>
 800f14e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f150:	4602      	mov	r2, r0
 800f152:	4631      	mov	r1, r6
 800f154:	4648      	mov	r0, r9
 800f156:	920c      	str	r2, [sp, #48]	@ 0x30
 800f158:	9309      	str	r3, [sp, #36]	@ 0x24
 800f15a:	f000 fd51 	bl	800fc00 <_Bfree>
 800f15e:	9b07      	ldr	r3, [sp, #28]
 800f160:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800f162:	9e00      	ldr	r6, [sp, #0]
 800f164:	ea42 0103 	orr.w	r1, r2, r3
 800f168:	9b06      	ldr	r3, [sp, #24]
 800f16a:	4319      	orrs	r1, r3
 800f16c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f16e:	d10d      	bne.n	800f18c <_dtoa_r+0xa44>
 800f170:	2b39      	cmp	r3, #57	@ 0x39
 800f172:	d027      	beq.n	800f1c4 <_dtoa_r+0xa7c>
 800f174:	9a04      	ldr	r2, [sp, #16]
 800f176:	2a00      	cmp	r2, #0
 800f178:	dd01      	ble.n	800f17e <_dtoa_r+0xa36>
 800f17a:	9b03      	ldr	r3, [sp, #12]
 800f17c:	3331      	adds	r3, #49	@ 0x31
 800f17e:	f88b 3000 	strb.w	r3, [fp]
 800f182:	e52e      	b.n	800ebe2 <_dtoa_r+0x49a>
 800f184:	4628      	mov	r0, r5
 800f186:	e7b9      	b.n	800f0fc <_dtoa_r+0x9b4>
 800f188:	2201      	movs	r2, #1
 800f18a:	e7e2      	b.n	800f152 <_dtoa_r+0xa0a>
 800f18c:	9904      	ldr	r1, [sp, #16]
 800f18e:	2900      	cmp	r1, #0
 800f190:	db04      	blt.n	800f19c <_dtoa_r+0xa54>
 800f192:	9807      	ldr	r0, [sp, #28]
 800f194:	4301      	orrs	r1, r0
 800f196:	9806      	ldr	r0, [sp, #24]
 800f198:	4301      	orrs	r1, r0
 800f19a:	d120      	bne.n	800f1de <_dtoa_r+0xa96>
 800f19c:	2a00      	cmp	r2, #0
 800f19e:	ddee      	ble.n	800f17e <_dtoa_r+0xa36>
 800f1a0:	9902      	ldr	r1, [sp, #8]
 800f1a2:	9300      	str	r3, [sp, #0]
 800f1a4:	2201      	movs	r2, #1
 800f1a6:	4648      	mov	r0, r9
 800f1a8:	f000 ff3a 	bl	8010020 <__lshift>
 800f1ac:	4621      	mov	r1, r4
 800f1ae:	9002      	str	r0, [sp, #8]
 800f1b0:	f000 ffa2 	bl	80100f8 <__mcmp>
 800f1b4:	2800      	cmp	r0, #0
 800f1b6:	9b00      	ldr	r3, [sp, #0]
 800f1b8:	dc02      	bgt.n	800f1c0 <_dtoa_r+0xa78>
 800f1ba:	d1e0      	bne.n	800f17e <_dtoa_r+0xa36>
 800f1bc:	07da      	lsls	r2, r3, #31
 800f1be:	d5de      	bpl.n	800f17e <_dtoa_r+0xa36>
 800f1c0:	2b39      	cmp	r3, #57	@ 0x39
 800f1c2:	d1da      	bne.n	800f17a <_dtoa_r+0xa32>
 800f1c4:	2339      	movs	r3, #57	@ 0x39
 800f1c6:	f88b 3000 	strb.w	r3, [fp]
 800f1ca:	4633      	mov	r3, r6
 800f1cc:	461e      	mov	r6, r3
 800f1ce:	3b01      	subs	r3, #1
 800f1d0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800f1d4:	2a39      	cmp	r2, #57	@ 0x39
 800f1d6:	d04e      	beq.n	800f276 <_dtoa_r+0xb2e>
 800f1d8:	3201      	adds	r2, #1
 800f1da:	701a      	strb	r2, [r3, #0]
 800f1dc:	e501      	b.n	800ebe2 <_dtoa_r+0x49a>
 800f1de:	2a00      	cmp	r2, #0
 800f1e0:	dd03      	ble.n	800f1ea <_dtoa_r+0xaa2>
 800f1e2:	2b39      	cmp	r3, #57	@ 0x39
 800f1e4:	d0ee      	beq.n	800f1c4 <_dtoa_r+0xa7c>
 800f1e6:	3301      	adds	r3, #1
 800f1e8:	e7c9      	b.n	800f17e <_dtoa_r+0xa36>
 800f1ea:	9a00      	ldr	r2, [sp, #0]
 800f1ec:	9908      	ldr	r1, [sp, #32]
 800f1ee:	f802 3c01 	strb.w	r3, [r2, #-1]
 800f1f2:	428a      	cmp	r2, r1
 800f1f4:	d028      	beq.n	800f248 <_dtoa_r+0xb00>
 800f1f6:	9902      	ldr	r1, [sp, #8]
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	220a      	movs	r2, #10
 800f1fc:	4648      	mov	r0, r9
 800f1fe:	f000 fd21 	bl	800fc44 <__multadd>
 800f202:	42af      	cmp	r7, r5
 800f204:	9002      	str	r0, [sp, #8]
 800f206:	f04f 0300 	mov.w	r3, #0
 800f20a:	f04f 020a 	mov.w	r2, #10
 800f20e:	4639      	mov	r1, r7
 800f210:	4648      	mov	r0, r9
 800f212:	d107      	bne.n	800f224 <_dtoa_r+0xadc>
 800f214:	f000 fd16 	bl	800fc44 <__multadd>
 800f218:	4607      	mov	r7, r0
 800f21a:	4605      	mov	r5, r0
 800f21c:	9b00      	ldr	r3, [sp, #0]
 800f21e:	3301      	adds	r3, #1
 800f220:	9300      	str	r3, [sp, #0]
 800f222:	e777      	b.n	800f114 <_dtoa_r+0x9cc>
 800f224:	f000 fd0e 	bl	800fc44 <__multadd>
 800f228:	4629      	mov	r1, r5
 800f22a:	4607      	mov	r7, r0
 800f22c:	2300      	movs	r3, #0
 800f22e:	220a      	movs	r2, #10
 800f230:	4648      	mov	r0, r9
 800f232:	f000 fd07 	bl	800fc44 <__multadd>
 800f236:	4605      	mov	r5, r0
 800f238:	e7f0      	b.n	800f21c <_dtoa_r+0xad4>
 800f23a:	f1bb 0f00 	cmp.w	fp, #0
 800f23e:	bfcc      	ite	gt
 800f240:	465e      	movgt	r6, fp
 800f242:	2601      	movle	r6, #1
 800f244:	4456      	add	r6, sl
 800f246:	2700      	movs	r7, #0
 800f248:	9902      	ldr	r1, [sp, #8]
 800f24a:	9300      	str	r3, [sp, #0]
 800f24c:	2201      	movs	r2, #1
 800f24e:	4648      	mov	r0, r9
 800f250:	f000 fee6 	bl	8010020 <__lshift>
 800f254:	4621      	mov	r1, r4
 800f256:	9002      	str	r0, [sp, #8]
 800f258:	f000 ff4e 	bl	80100f8 <__mcmp>
 800f25c:	2800      	cmp	r0, #0
 800f25e:	dcb4      	bgt.n	800f1ca <_dtoa_r+0xa82>
 800f260:	d102      	bne.n	800f268 <_dtoa_r+0xb20>
 800f262:	9b00      	ldr	r3, [sp, #0]
 800f264:	07db      	lsls	r3, r3, #31
 800f266:	d4b0      	bmi.n	800f1ca <_dtoa_r+0xa82>
 800f268:	4633      	mov	r3, r6
 800f26a:	461e      	mov	r6, r3
 800f26c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800f270:	2a30      	cmp	r2, #48	@ 0x30
 800f272:	d0fa      	beq.n	800f26a <_dtoa_r+0xb22>
 800f274:	e4b5      	b.n	800ebe2 <_dtoa_r+0x49a>
 800f276:	459a      	cmp	sl, r3
 800f278:	d1a8      	bne.n	800f1cc <_dtoa_r+0xa84>
 800f27a:	2331      	movs	r3, #49	@ 0x31
 800f27c:	f108 0801 	add.w	r8, r8, #1
 800f280:	f88a 3000 	strb.w	r3, [sl]
 800f284:	e4ad      	b.n	800ebe2 <_dtoa_r+0x49a>
 800f286:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800f288:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800f2e4 <_dtoa_r+0xb9c>
 800f28c:	b11b      	cbz	r3, 800f296 <_dtoa_r+0xb4e>
 800f28e:	f10a 0308 	add.w	r3, sl, #8
 800f292:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800f294:	6013      	str	r3, [r2, #0]
 800f296:	4650      	mov	r0, sl
 800f298:	b017      	add	sp, #92	@ 0x5c
 800f29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f29e:	9b07      	ldr	r3, [sp, #28]
 800f2a0:	2b01      	cmp	r3, #1
 800f2a2:	f77f ae2e 	ble.w	800ef02 <_dtoa_r+0x7ba>
 800f2a6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f2a8:	9308      	str	r3, [sp, #32]
 800f2aa:	2001      	movs	r0, #1
 800f2ac:	e64d      	b.n	800ef4a <_dtoa_r+0x802>
 800f2ae:	f1bb 0f00 	cmp.w	fp, #0
 800f2b2:	f77f aed9 	ble.w	800f068 <_dtoa_r+0x920>
 800f2b6:	4656      	mov	r6, sl
 800f2b8:	9802      	ldr	r0, [sp, #8]
 800f2ba:	4621      	mov	r1, r4
 800f2bc:	f7ff f9bc 	bl	800e638 <quorem>
 800f2c0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800f2c4:	f806 3b01 	strb.w	r3, [r6], #1
 800f2c8:	eba6 020a 	sub.w	r2, r6, sl
 800f2cc:	4593      	cmp	fp, r2
 800f2ce:	ddb4      	ble.n	800f23a <_dtoa_r+0xaf2>
 800f2d0:	9902      	ldr	r1, [sp, #8]
 800f2d2:	2300      	movs	r3, #0
 800f2d4:	220a      	movs	r2, #10
 800f2d6:	4648      	mov	r0, r9
 800f2d8:	f000 fcb4 	bl	800fc44 <__multadd>
 800f2dc:	9002      	str	r0, [sp, #8]
 800f2de:	e7eb      	b.n	800f2b8 <_dtoa_r+0xb70>
 800f2e0:	08011c36 	.word	0x08011c36
 800f2e4:	08011bba 	.word	0x08011bba

0800f2e8 <_free_r>:
 800f2e8:	b538      	push	{r3, r4, r5, lr}
 800f2ea:	4605      	mov	r5, r0
 800f2ec:	2900      	cmp	r1, #0
 800f2ee:	d041      	beq.n	800f374 <_free_r+0x8c>
 800f2f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2f4:	1f0c      	subs	r4, r1, #4
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	bfb8      	it	lt
 800f2fa:	18e4      	addlt	r4, r4, r3
 800f2fc:	f000 fc34 	bl	800fb68 <__malloc_lock>
 800f300:	4a1d      	ldr	r2, [pc, #116]	@ (800f378 <_free_r+0x90>)
 800f302:	6813      	ldr	r3, [r2, #0]
 800f304:	b933      	cbnz	r3, 800f314 <_free_r+0x2c>
 800f306:	6063      	str	r3, [r4, #4]
 800f308:	6014      	str	r4, [r2, #0]
 800f30a:	4628      	mov	r0, r5
 800f30c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f310:	f000 bc30 	b.w	800fb74 <__malloc_unlock>
 800f314:	42a3      	cmp	r3, r4
 800f316:	d908      	bls.n	800f32a <_free_r+0x42>
 800f318:	6820      	ldr	r0, [r4, #0]
 800f31a:	1821      	adds	r1, r4, r0
 800f31c:	428b      	cmp	r3, r1
 800f31e:	bf01      	itttt	eq
 800f320:	6819      	ldreq	r1, [r3, #0]
 800f322:	685b      	ldreq	r3, [r3, #4]
 800f324:	1809      	addeq	r1, r1, r0
 800f326:	6021      	streq	r1, [r4, #0]
 800f328:	e7ed      	b.n	800f306 <_free_r+0x1e>
 800f32a:	461a      	mov	r2, r3
 800f32c:	685b      	ldr	r3, [r3, #4]
 800f32e:	b10b      	cbz	r3, 800f334 <_free_r+0x4c>
 800f330:	42a3      	cmp	r3, r4
 800f332:	d9fa      	bls.n	800f32a <_free_r+0x42>
 800f334:	6811      	ldr	r1, [r2, #0]
 800f336:	1850      	adds	r0, r2, r1
 800f338:	42a0      	cmp	r0, r4
 800f33a:	d10b      	bne.n	800f354 <_free_r+0x6c>
 800f33c:	6820      	ldr	r0, [r4, #0]
 800f33e:	4401      	add	r1, r0
 800f340:	1850      	adds	r0, r2, r1
 800f342:	4283      	cmp	r3, r0
 800f344:	6011      	str	r1, [r2, #0]
 800f346:	d1e0      	bne.n	800f30a <_free_r+0x22>
 800f348:	6818      	ldr	r0, [r3, #0]
 800f34a:	685b      	ldr	r3, [r3, #4]
 800f34c:	6053      	str	r3, [r2, #4]
 800f34e:	4408      	add	r0, r1
 800f350:	6010      	str	r0, [r2, #0]
 800f352:	e7da      	b.n	800f30a <_free_r+0x22>
 800f354:	d902      	bls.n	800f35c <_free_r+0x74>
 800f356:	230c      	movs	r3, #12
 800f358:	602b      	str	r3, [r5, #0]
 800f35a:	e7d6      	b.n	800f30a <_free_r+0x22>
 800f35c:	6820      	ldr	r0, [r4, #0]
 800f35e:	1821      	adds	r1, r4, r0
 800f360:	428b      	cmp	r3, r1
 800f362:	bf04      	itt	eq
 800f364:	6819      	ldreq	r1, [r3, #0]
 800f366:	685b      	ldreq	r3, [r3, #4]
 800f368:	6063      	str	r3, [r4, #4]
 800f36a:	bf04      	itt	eq
 800f36c:	1809      	addeq	r1, r1, r0
 800f36e:	6021      	streq	r1, [r4, #0]
 800f370:	6054      	str	r4, [r2, #4]
 800f372:	e7ca      	b.n	800f30a <_free_r+0x22>
 800f374:	bd38      	pop	{r3, r4, r5, pc}
 800f376:	bf00      	nop
 800f378:	200026bc 	.word	0x200026bc

0800f37c <rshift>:
 800f37c:	6903      	ldr	r3, [r0, #16]
 800f37e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800f382:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f386:	ea4f 1261 	mov.w	r2, r1, asr #5
 800f38a:	f100 0414 	add.w	r4, r0, #20
 800f38e:	dd45      	ble.n	800f41c <rshift+0xa0>
 800f390:	f011 011f 	ands.w	r1, r1, #31
 800f394:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800f398:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800f39c:	d10c      	bne.n	800f3b8 <rshift+0x3c>
 800f39e:	f100 0710 	add.w	r7, r0, #16
 800f3a2:	4629      	mov	r1, r5
 800f3a4:	42b1      	cmp	r1, r6
 800f3a6:	d334      	bcc.n	800f412 <rshift+0x96>
 800f3a8:	1a9b      	subs	r3, r3, r2
 800f3aa:	009b      	lsls	r3, r3, #2
 800f3ac:	1eea      	subs	r2, r5, #3
 800f3ae:	4296      	cmp	r6, r2
 800f3b0:	bf38      	it	cc
 800f3b2:	2300      	movcc	r3, #0
 800f3b4:	4423      	add	r3, r4
 800f3b6:	e015      	b.n	800f3e4 <rshift+0x68>
 800f3b8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800f3bc:	f1c1 0820 	rsb	r8, r1, #32
 800f3c0:	40cf      	lsrs	r7, r1
 800f3c2:	f105 0e04 	add.w	lr, r5, #4
 800f3c6:	46a1      	mov	r9, r4
 800f3c8:	4576      	cmp	r6, lr
 800f3ca:	46f4      	mov	ip, lr
 800f3cc:	d815      	bhi.n	800f3fa <rshift+0x7e>
 800f3ce:	1a9a      	subs	r2, r3, r2
 800f3d0:	0092      	lsls	r2, r2, #2
 800f3d2:	3a04      	subs	r2, #4
 800f3d4:	3501      	adds	r5, #1
 800f3d6:	42ae      	cmp	r6, r5
 800f3d8:	bf38      	it	cc
 800f3da:	2200      	movcc	r2, #0
 800f3dc:	18a3      	adds	r3, r4, r2
 800f3de:	50a7      	str	r7, [r4, r2]
 800f3e0:	b107      	cbz	r7, 800f3e4 <rshift+0x68>
 800f3e2:	3304      	adds	r3, #4
 800f3e4:	1b1a      	subs	r2, r3, r4
 800f3e6:	42a3      	cmp	r3, r4
 800f3e8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f3ec:	bf08      	it	eq
 800f3ee:	2300      	moveq	r3, #0
 800f3f0:	6102      	str	r2, [r0, #16]
 800f3f2:	bf08      	it	eq
 800f3f4:	6143      	streq	r3, [r0, #20]
 800f3f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f3fa:	f8dc c000 	ldr.w	ip, [ip]
 800f3fe:	fa0c fc08 	lsl.w	ip, ip, r8
 800f402:	ea4c 0707 	orr.w	r7, ip, r7
 800f406:	f849 7b04 	str.w	r7, [r9], #4
 800f40a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800f40e:	40cf      	lsrs	r7, r1
 800f410:	e7da      	b.n	800f3c8 <rshift+0x4c>
 800f412:	f851 cb04 	ldr.w	ip, [r1], #4
 800f416:	f847 cf04 	str.w	ip, [r7, #4]!
 800f41a:	e7c3      	b.n	800f3a4 <rshift+0x28>
 800f41c:	4623      	mov	r3, r4
 800f41e:	e7e1      	b.n	800f3e4 <rshift+0x68>

0800f420 <__hexdig_fun>:
 800f420:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800f424:	2b09      	cmp	r3, #9
 800f426:	d802      	bhi.n	800f42e <__hexdig_fun+0xe>
 800f428:	3820      	subs	r0, #32
 800f42a:	b2c0      	uxtb	r0, r0
 800f42c:	4770      	bx	lr
 800f42e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800f432:	2b05      	cmp	r3, #5
 800f434:	d801      	bhi.n	800f43a <__hexdig_fun+0x1a>
 800f436:	3847      	subs	r0, #71	@ 0x47
 800f438:	e7f7      	b.n	800f42a <__hexdig_fun+0xa>
 800f43a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800f43e:	2b05      	cmp	r3, #5
 800f440:	d801      	bhi.n	800f446 <__hexdig_fun+0x26>
 800f442:	3827      	subs	r0, #39	@ 0x27
 800f444:	e7f1      	b.n	800f42a <__hexdig_fun+0xa>
 800f446:	2000      	movs	r0, #0
 800f448:	4770      	bx	lr
	...

0800f44c <__gethex>:
 800f44c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f450:	b085      	sub	sp, #20
 800f452:	468a      	mov	sl, r1
 800f454:	9302      	str	r3, [sp, #8]
 800f456:	680b      	ldr	r3, [r1, #0]
 800f458:	9001      	str	r0, [sp, #4]
 800f45a:	4690      	mov	r8, r2
 800f45c:	1c9c      	adds	r4, r3, #2
 800f45e:	46a1      	mov	r9, r4
 800f460:	f814 0b01 	ldrb.w	r0, [r4], #1
 800f464:	2830      	cmp	r0, #48	@ 0x30
 800f466:	d0fa      	beq.n	800f45e <__gethex+0x12>
 800f468:	eba9 0303 	sub.w	r3, r9, r3
 800f46c:	f1a3 0b02 	sub.w	fp, r3, #2
 800f470:	f7ff ffd6 	bl	800f420 <__hexdig_fun>
 800f474:	4605      	mov	r5, r0
 800f476:	2800      	cmp	r0, #0
 800f478:	d168      	bne.n	800f54c <__gethex+0x100>
 800f47a:	49a0      	ldr	r1, [pc, #640]	@ (800f6fc <__gethex+0x2b0>)
 800f47c:	2201      	movs	r2, #1
 800f47e:	4648      	mov	r0, r9
 800f480:	f7ff f823 	bl	800e4ca <strncmp>
 800f484:	4607      	mov	r7, r0
 800f486:	2800      	cmp	r0, #0
 800f488:	d167      	bne.n	800f55a <__gethex+0x10e>
 800f48a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800f48e:	4626      	mov	r6, r4
 800f490:	f7ff ffc6 	bl	800f420 <__hexdig_fun>
 800f494:	2800      	cmp	r0, #0
 800f496:	d062      	beq.n	800f55e <__gethex+0x112>
 800f498:	4623      	mov	r3, r4
 800f49a:	7818      	ldrb	r0, [r3, #0]
 800f49c:	2830      	cmp	r0, #48	@ 0x30
 800f49e:	4699      	mov	r9, r3
 800f4a0:	f103 0301 	add.w	r3, r3, #1
 800f4a4:	d0f9      	beq.n	800f49a <__gethex+0x4e>
 800f4a6:	f7ff ffbb 	bl	800f420 <__hexdig_fun>
 800f4aa:	fab0 f580 	clz	r5, r0
 800f4ae:	096d      	lsrs	r5, r5, #5
 800f4b0:	f04f 0b01 	mov.w	fp, #1
 800f4b4:	464a      	mov	r2, r9
 800f4b6:	4616      	mov	r6, r2
 800f4b8:	3201      	adds	r2, #1
 800f4ba:	7830      	ldrb	r0, [r6, #0]
 800f4bc:	f7ff ffb0 	bl	800f420 <__hexdig_fun>
 800f4c0:	2800      	cmp	r0, #0
 800f4c2:	d1f8      	bne.n	800f4b6 <__gethex+0x6a>
 800f4c4:	498d      	ldr	r1, [pc, #564]	@ (800f6fc <__gethex+0x2b0>)
 800f4c6:	2201      	movs	r2, #1
 800f4c8:	4630      	mov	r0, r6
 800f4ca:	f7fe fffe 	bl	800e4ca <strncmp>
 800f4ce:	2800      	cmp	r0, #0
 800f4d0:	d13f      	bne.n	800f552 <__gethex+0x106>
 800f4d2:	b944      	cbnz	r4, 800f4e6 <__gethex+0x9a>
 800f4d4:	1c74      	adds	r4, r6, #1
 800f4d6:	4622      	mov	r2, r4
 800f4d8:	4616      	mov	r6, r2
 800f4da:	3201      	adds	r2, #1
 800f4dc:	7830      	ldrb	r0, [r6, #0]
 800f4de:	f7ff ff9f 	bl	800f420 <__hexdig_fun>
 800f4e2:	2800      	cmp	r0, #0
 800f4e4:	d1f8      	bne.n	800f4d8 <__gethex+0x8c>
 800f4e6:	1ba4      	subs	r4, r4, r6
 800f4e8:	00a7      	lsls	r7, r4, #2
 800f4ea:	7833      	ldrb	r3, [r6, #0]
 800f4ec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800f4f0:	2b50      	cmp	r3, #80	@ 0x50
 800f4f2:	d13e      	bne.n	800f572 <__gethex+0x126>
 800f4f4:	7873      	ldrb	r3, [r6, #1]
 800f4f6:	2b2b      	cmp	r3, #43	@ 0x2b
 800f4f8:	d033      	beq.n	800f562 <__gethex+0x116>
 800f4fa:	2b2d      	cmp	r3, #45	@ 0x2d
 800f4fc:	d034      	beq.n	800f568 <__gethex+0x11c>
 800f4fe:	1c71      	adds	r1, r6, #1
 800f500:	2400      	movs	r4, #0
 800f502:	7808      	ldrb	r0, [r1, #0]
 800f504:	f7ff ff8c 	bl	800f420 <__hexdig_fun>
 800f508:	1e43      	subs	r3, r0, #1
 800f50a:	b2db      	uxtb	r3, r3
 800f50c:	2b18      	cmp	r3, #24
 800f50e:	d830      	bhi.n	800f572 <__gethex+0x126>
 800f510:	f1a0 0210 	sub.w	r2, r0, #16
 800f514:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f518:	f7ff ff82 	bl	800f420 <__hexdig_fun>
 800f51c:	f100 3cff 	add.w	ip, r0, #4294967295
 800f520:	fa5f fc8c 	uxtb.w	ip, ip
 800f524:	f1bc 0f18 	cmp.w	ip, #24
 800f528:	f04f 030a 	mov.w	r3, #10
 800f52c:	d91e      	bls.n	800f56c <__gethex+0x120>
 800f52e:	b104      	cbz	r4, 800f532 <__gethex+0xe6>
 800f530:	4252      	negs	r2, r2
 800f532:	4417      	add	r7, r2
 800f534:	f8ca 1000 	str.w	r1, [sl]
 800f538:	b1ed      	cbz	r5, 800f576 <__gethex+0x12a>
 800f53a:	f1bb 0f00 	cmp.w	fp, #0
 800f53e:	bf0c      	ite	eq
 800f540:	2506      	moveq	r5, #6
 800f542:	2500      	movne	r5, #0
 800f544:	4628      	mov	r0, r5
 800f546:	b005      	add	sp, #20
 800f548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f54c:	2500      	movs	r5, #0
 800f54e:	462c      	mov	r4, r5
 800f550:	e7b0      	b.n	800f4b4 <__gethex+0x68>
 800f552:	2c00      	cmp	r4, #0
 800f554:	d1c7      	bne.n	800f4e6 <__gethex+0x9a>
 800f556:	4627      	mov	r7, r4
 800f558:	e7c7      	b.n	800f4ea <__gethex+0x9e>
 800f55a:	464e      	mov	r6, r9
 800f55c:	462f      	mov	r7, r5
 800f55e:	2501      	movs	r5, #1
 800f560:	e7c3      	b.n	800f4ea <__gethex+0x9e>
 800f562:	2400      	movs	r4, #0
 800f564:	1cb1      	adds	r1, r6, #2
 800f566:	e7cc      	b.n	800f502 <__gethex+0xb6>
 800f568:	2401      	movs	r4, #1
 800f56a:	e7fb      	b.n	800f564 <__gethex+0x118>
 800f56c:	fb03 0002 	mla	r0, r3, r2, r0
 800f570:	e7ce      	b.n	800f510 <__gethex+0xc4>
 800f572:	4631      	mov	r1, r6
 800f574:	e7de      	b.n	800f534 <__gethex+0xe8>
 800f576:	eba6 0309 	sub.w	r3, r6, r9
 800f57a:	3b01      	subs	r3, #1
 800f57c:	4629      	mov	r1, r5
 800f57e:	2b07      	cmp	r3, #7
 800f580:	dc0a      	bgt.n	800f598 <__gethex+0x14c>
 800f582:	9801      	ldr	r0, [sp, #4]
 800f584:	f000 fafc 	bl	800fb80 <_Balloc>
 800f588:	4604      	mov	r4, r0
 800f58a:	b940      	cbnz	r0, 800f59e <__gethex+0x152>
 800f58c:	4b5c      	ldr	r3, [pc, #368]	@ (800f700 <__gethex+0x2b4>)
 800f58e:	4602      	mov	r2, r0
 800f590:	21e4      	movs	r1, #228	@ 0xe4
 800f592:	485c      	ldr	r0, [pc, #368]	@ (800f704 <__gethex+0x2b8>)
 800f594:	f001 fa2c 	bl	80109f0 <__assert_func>
 800f598:	3101      	adds	r1, #1
 800f59a:	105b      	asrs	r3, r3, #1
 800f59c:	e7ef      	b.n	800f57e <__gethex+0x132>
 800f59e:	f100 0a14 	add.w	sl, r0, #20
 800f5a2:	2300      	movs	r3, #0
 800f5a4:	4655      	mov	r5, sl
 800f5a6:	469b      	mov	fp, r3
 800f5a8:	45b1      	cmp	r9, r6
 800f5aa:	d337      	bcc.n	800f61c <__gethex+0x1d0>
 800f5ac:	f845 bb04 	str.w	fp, [r5], #4
 800f5b0:	eba5 050a 	sub.w	r5, r5, sl
 800f5b4:	10ad      	asrs	r5, r5, #2
 800f5b6:	6125      	str	r5, [r4, #16]
 800f5b8:	4658      	mov	r0, fp
 800f5ba:	f000 fbd3 	bl	800fd64 <__hi0bits>
 800f5be:	016d      	lsls	r5, r5, #5
 800f5c0:	f8d8 6000 	ldr.w	r6, [r8]
 800f5c4:	1a2d      	subs	r5, r5, r0
 800f5c6:	42b5      	cmp	r5, r6
 800f5c8:	dd54      	ble.n	800f674 <__gethex+0x228>
 800f5ca:	1bad      	subs	r5, r5, r6
 800f5cc:	4629      	mov	r1, r5
 800f5ce:	4620      	mov	r0, r4
 800f5d0:	f000 ff5f 	bl	8010492 <__any_on>
 800f5d4:	4681      	mov	r9, r0
 800f5d6:	b178      	cbz	r0, 800f5f8 <__gethex+0x1ac>
 800f5d8:	1e6b      	subs	r3, r5, #1
 800f5da:	1159      	asrs	r1, r3, #5
 800f5dc:	f003 021f 	and.w	r2, r3, #31
 800f5e0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800f5e4:	f04f 0901 	mov.w	r9, #1
 800f5e8:	fa09 f202 	lsl.w	r2, r9, r2
 800f5ec:	420a      	tst	r2, r1
 800f5ee:	d003      	beq.n	800f5f8 <__gethex+0x1ac>
 800f5f0:	454b      	cmp	r3, r9
 800f5f2:	dc36      	bgt.n	800f662 <__gethex+0x216>
 800f5f4:	f04f 0902 	mov.w	r9, #2
 800f5f8:	4629      	mov	r1, r5
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	f7ff febe 	bl	800f37c <rshift>
 800f600:	442f      	add	r7, r5
 800f602:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f606:	42bb      	cmp	r3, r7
 800f608:	da42      	bge.n	800f690 <__gethex+0x244>
 800f60a:	9801      	ldr	r0, [sp, #4]
 800f60c:	4621      	mov	r1, r4
 800f60e:	f000 faf7 	bl	800fc00 <_Bfree>
 800f612:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f614:	2300      	movs	r3, #0
 800f616:	6013      	str	r3, [r2, #0]
 800f618:	25a3      	movs	r5, #163	@ 0xa3
 800f61a:	e793      	b.n	800f544 <__gethex+0xf8>
 800f61c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800f620:	2a2e      	cmp	r2, #46	@ 0x2e
 800f622:	d012      	beq.n	800f64a <__gethex+0x1fe>
 800f624:	2b20      	cmp	r3, #32
 800f626:	d104      	bne.n	800f632 <__gethex+0x1e6>
 800f628:	f845 bb04 	str.w	fp, [r5], #4
 800f62c:	f04f 0b00 	mov.w	fp, #0
 800f630:	465b      	mov	r3, fp
 800f632:	7830      	ldrb	r0, [r6, #0]
 800f634:	9303      	str	r3, [sp, #12]
 800f636:	f7ff fef3 	bl	800f420 <__hexdig_fun>
 800f63a:	9b03      	ldr	r3, [sp, #12]
 800f63c:	f000 000f 	and.w	r0, r0, #15
 800f640:	4098      	lsls	r0, r3
 800f642:	ea4b 0b00 	orr.w	fp, fp, r0
 800f646:	3304      	adds	r3, #4
 800f648:	e7ae      	b.n	800f5a8 <__gethex+0x15c>
 800f64a:	45b1      	cmp	r9, r6
 800f64c:	d8ea      	bhi.n	800f624 <__gethex+0x1d8>
 800f64e:	492b      	ldr	r1, [pc, #172]	@ (800f6fc <__gethex+0x2b0>)
 800f650:	9303      	str	r3, [sp, #12]
 800f652:	2201      	movs	r2, #1
 800f654:	4630      	mov	r0, r6
 800f656:	f7fe ff38 	bl	800e4ca <strncmp>
 800f65a:	9b03      	ldr	r3, [sp, #12]
 800f65c:	2800      	cmp	r0, #0
 800f65e:	d1e1      	bne.n	800f624 <__gethex+0x1d8>
 800f660:	e7a2      	b.n	800f5a8 <__gethex+0x15c>
 800f662:	1ea9      	subs	r1, r5, #2
 800f664:	4620      	mov	r0, r4
 800f666:	f000 ff14 	bl	8010492 <__any_on>
 800f66a:	2800      	cmp	r0, #0
 800f66c:	d0c2      	beq.n	800f5f4 <__gethex+0x1a8>
 800f66e:	f04f 0903 	mov.w	r9, #3
 800f672:	e7c1      	b.n	800f5f8 <__gethex+0x1ac>
 800f674:	da09      	bge.n	800f68a <__gethex+0x23e>
 800f676:	1b75      	subs	r5, r6, r5
 800f678:	4621      	mov	r1, r4
 800f67a:	9801      	ldr	r0, [sp, #4]
 800f67c:	462a      	mov	r2, r5
 800f67e:	f000 fccf 	bl	8010020 <__lshift>
 800f682:	1b7f      	subs	r7, r7, r5
 800f684:	4604      	mov	r4, r0
 800f686:	f100 0a14 	add.w	sl, r0, #20
 800f68a:	f04f 0900 	mov.w	r9, #0
 800f68e:	e7b8      	b.n	800f602 <__gethex+0x1b6>
 800f690:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800f694:	42bd      	cmp	r5, r7
 800f696:	dd6f      	ble.n	800f778 <__gethex+0x32c>
 800f698:	1bed      	subs	r5, r5, r7
 800f69a:	42ae      	cmp	r6, r5
 800f69c:	dc34      	bgt.n	800f708 <__gethex+0x2bc>
 800f69e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f6a2:	2b02      	cmp	r3, #2
 800f6a4:	d022      	beq.n	800f6ec <__gethex+0x2a0>
 800f6a6:	2b03      	cmp	r3, #3
 800f6a8:	d024      	beq.n	800f6f4 <__gethex+0x2a8>
 800f6aa:	2b01      	cmp	r3, #1
 800f6ac:	d115      	bne.n	800f6da <__gethex+0x28e>
 800f6ae:	42ae      	cmp	r6, r5
 800f6b0:	d113      	bne.n	800f6da <__gethex+0x28e>
 800f6b2:	2e01      	cmp	r6, #1
 800f6b4:	d10b      	bne.n	800f6ce <__gethex+0x282>
 800f6b6:	9a02      	ldr	r2, [sp, #8]
 800f6b8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f6bc:	6013      	str	r3, [r2, #0]
 800f6be:	2301      	movs	r3, #1
 800f6c0:	6123      	str	r3, [r4, #16]
 800f6c2:	f8ca 3000 	str.w	r3, [sl]
 800f6c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f6c8:	2562      	movs	r5, #98	@ 0x62
 800f6ca:	601c      	str	r4, [r3, #0]
 800f6cc:	e73a      	b.n	800f544 <__gethex+0xf8>
 800f6ce:	1e71      	subs	r1, r6, #1
 800f6d0:	4620      	mov	r0, r4
 800f6d2:	f000 fede 	bl	8010492 <__any_on>
 800f6d6:	2800      	cmp	r0, #0
 800f6d8:	d1ed      	bne.n	800f6b6 <__gethex+0x26a>
 800f6da:	9801      	ldr	r0, [sp, #4]
 800f6dc:	4621      	mov	r1, r4
 800f6de:	f000 fa8f 	bl	800fc00 <_Bfree>
 800f6e2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800f6e4:	2300      	movs	r3, #0
 800f6e6:	6013      	str	r3, [r2, #0]
 800f6e8:	2550      	movs	r5, #80	@ 0x50
 800f6ea:	e72b      	b.n	800f544 <__gethex+0xf8>
 800f6ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d1f3      	bne.n	800f6da <__gethex+0x28e>
 800f6f2:	e7e0      	b.n	800f6b6 <__gethex+0x26a>
 800f6f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	d1dd      	bne.n	800f6b6 <__gethex+0x26a>
 800f6fa:	e7ee      	b.n	800f6da <__gethex+0x28e>
 800f6fc:	08011b7c 	.word	0x08011b7c
 800f700:	08011c36 	.word	0x08011c36
 800f704:	08011c47 	.word	0x08011c47
 800f708:	1e6f      	subs	r7, r5, #1
 800f70a:	f1b9 0f00 	cmp.w	r9, #0
 800f70e:	d130      	bne.n	800f772 <__gethex+0x326>
 800f710:	b127      	cbz	r7, 800f71c <__gethex+0x2d0>
 800f712:	4639      	mov	r1, r7
 800f714:	4620      	mov	r0, r4
 800f716:	f000 febc 	bl	8010492 <__any_on>
 800f71a:	4681      	mov	r9, r0
 800f71c:	117a      	asrs	r2, r7, #5
 800f71e:	2301      	movs	r3, #1
 800f720:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800f724:	f007 071f 	and.w	r7, r7, #31
 800f728:	40bb      	lsls	r3, r7
 800f72a:	4213      	tst	r3, r2
 800f72c:	4629      	mov	r1, r5
 800f72e:	4620      	mov	r0, r4
 800f730:	bf18      	it	ne
 800f732:	f049 0902 	orrne.w	r9, r9, #2
 800f736:	f7ff fe21 	bl	800f37c <rshift>
 800f73a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800f73e:	1b76      	subs	r6, r6, r5
 800f740:	2502      	movs	r5, #2
 800f742:	f1b9 0f00 	cmp.w	r9, #0
 800f746:	d047      	beq.n	800f7d8 <__gethex+0x38c>
 800f748:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f74c:	2b02      	cmp	r3, #2
 800f74e:	d015      	beq.n	800f77c <__gethex+0x330>
 800f750:	2b03      	cmp	r3, #3
 800f752:	d017      	beq.n	800f784 <__gethex+0x338>
 800f754:	2b01      	cmp	r3, #1
 800f756:	d109      	bne.n	800f76c <__gethex+0x320>
 800f758:	f019 0f02 	tst.w	r9, #2
 800f75c:	d006      	beq.n	800f76c <__gethex+0x320>
 800f75e:	f8da 3000 	ldr.w	r3, [sl]
 800f762:	ea49 0903 	orr.w	r9, r9, r3
 800f766:	f019 0f01 	tst.w	r9, #1
 800f76a:	d10e      	bne.n	800f78a <__gethex+0x33e>
 800f76c:	f045 0510 	orr.w	r5, r5, #16
 800f770:	e032      	b.n	800f7d8 <__gethex+0x38c>
 800f772:	f04f 0901 	mov.w	r9, #1
 800f776:	e7d1      	b.n	800f71c <__gethex+0x2d0>
 800f778:	2501      	movs	r5, #1
 800f77a:	e7e2      	b.n	800f742 <__gethex+0x2f6>
 800f77c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f77e:	f1c3 0301 	rsb	r3, r3, #1
 800f782:	930f      	str	r3, [sp, #60]	@ 0x3c
 800f784:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800f786:	2b00      	cmp	r3, #0
 800f788:	d0f0      	beq.n	800f76c <__gethex+0x320>
 800f78a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800f78e:	f104 0314 	add.w	r3, r4, #20
 800f792:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800f796:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800f79a:	f04f 0c00 	mov.w	ip, #0
 800f79e:	4618      	mov	r0, r3
 800f7a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800f7a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800f7a8:	d01b      	beq.n	800f7e2 <__gethex+0x396>
 800f7aa:	3201      	adds	r2, #1
 800f7ac:	6002      	str	r2, [r0, #0]
 800f7ae:	2d02      	cmp	r5, #2
 800f7b0:	f104 0314 	add.w	r3, r4, #20
 800f7b4:	d13c      	bne.n	800f830 <__gethex+0x3e4>
 800f7b6:	f8d8 2000 	ldr.w	r2, [r8]
 800f7ba:	3a01      	subs	r2, #1
 800f7bc:	42b2      	cmp	r2, r6
 800f7be:	d109      	bne.n	800f7d4 <__gethex+0x388>
 800f7c0:	1171      	asrs	r1, r6, #5
 800f7c2:	2201      	movs	r2, #1
 800f7c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f7c8:	f006 061f 	and.w	r6, r6, #31
 800f7cc:	fa02 f606 	lsl.w	r6, r2, r6
 800f7d0:	421e      	tst	r6, r3
 800f7d2:	d13a      	bne.n	800f84a <__gethex+0x3fe>
 800f7d4:	f045 0520 	orr.w	r5, r5, #32
 800f7d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800f7da:	601c      	str	r4, [r3, #0]
 800f7dc:	9b02      	ldr	r3, [sp, #8]
 800f7de:	601f      	str	r7, [r3, #0]
 800f7e0:	e6b0      	b.n	800f544 <__gethex+0xf8>
 800f7e2:	4299      	cmp	r1, r3
 800f7e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800f7e8:	d8d9      	bhi.n	800f79e <__gethex+0x352>
 800f7ea:	68a3      	ldr	r3, [r4, #8]
 800f7ec:	459b      	cmp	fp, r3
 800f7ee:	db17      	blt.n	800f820 <__gethex+0x3d4>
 800f7f0:	6861      	ldr	r1, [r4, #4]
 800f7f2:	9801      	ldr	r0, [sp, #4]
 800f7f4:	3101      	adds	r1, #1
 800f7f6:	f000 f9c3 	bl	800fb80 <_Balloc>
 800f7fa:	4681      	mov	r9, r0
 800f7fc:	b918      	cbnz	r0, 800f806 <__gethex+0x3ba>
 800f7fe:	4b1a      	ldr	r3, [pc, #104]	@ (800f868 <__gethex+0x41c>)
 800f800:	4602      	mov	r2, r0
 800f802:	2184      	movs	r1, #132	@ 0x84
 800f804:	e6c5      	b.n	800f592 <__gethex+0x146>
 800f806:	6922      	ldr	r2, [r4, #16]
 800f808:	3202      	adds	r2, #2
 800f80a:	f104 010c 	add.w	r1, r4, #12
 800f80e:	0092      	lsls	r2, r2, #2
 800f810:	300c      	adds	r0, #12
 800f812:	f7fe fefa 	bl	800e60a <memcpy>
 800f816:	4621      	mov	r1, r4
 800f818:	9801      	ldr	r0, [sp, #4]
 800f81a:	f000 f9f1 	bl	800fc00 <_Bfree>
 800f81e:	464c      	mov	r4, r9
 800f820:	6923      	ldr	r3, [r4, #16]
 800f822:	1c5a      	adds	r2, r3, #1
 800f824:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800f828:	6122      	str	r2, [r4, #16]
 800f82a:	2201      	movs	r2, #1
 800f82c:	615a      	str	r2, [r3, #20]
 800f82e:	e7be      	b.n	800f7ae <__gethex+0x362>
 800f830:	6922      	ldr	r2, [r4, #16]
 800f832:	455a      	cmp	r2, fp
 800f834:	dd0b      	ble.n	800f84e <__gethex+0x402>
 800f836:	2101      	movs	r1, #1
 800f838:	4620      	mov	r0, r4
 800f83a:	f7ff fd9f 	bl	800f37c <rshift>
 800f83e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f842:	3701      	adds	r7, #1
 800f844:	42bb      	cmp	r3, r7
 800f846:	f6ff aee0 	blt.w	800f60a <__gethex+0x1be>
 800f84a:	2501      	movs	r5, #1
 800f84c:	e7c2      	b.n	800f7d4 <__gethex+0x388>
 800f84e:	f016 061f 	ands.w	r6, r6, #31
 800f852:	d0fa      	beq.n	800f84a <__gethex+0x3fe>
 800f854:	4453      	add	r3, sl
 800f856:	f1c6 0620 	rsb	r6, r6, #32
 800f85a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800f85e:	f000 fa81 	bl	800fd64 <__hi0bits>
 800f862:	42b0      	cmp	r0, r6
 800f864:	dbe7      	blt.n	800f836 <__gethex+0x3ea>
 800f866:	e7f0      	b.n	800f84a <__gethex+0x3fe>
 800f868:	08011c36 	.word	0x08011c36

0800f86c <L_shift>:
 800f86c:	f1c2 0208 	rsb	r2, r2, #8
 800f870:	0092      	lsls	r2, r2, #2
 800f872:	b570      	push	{r4, r5, r6, lr}
 800f874:	f1c2 0620 	rsb	r6, r2, #32
 800f878:	6843      	ldr	r3, [r0, #4]
 800f87a:	6804      	ldr	r4, [r0, #0]
 800f87c:	fa03 f506 	lsl.w	r5, r3, r6
 800f880:	432c      	orrs	r4, r5
 800f882:	40d3      	lsrs	r3, r2
 800f884:	6004      	str	r4, [r0, #0]
 800f886:	f840 3f04 	str.w	r3, [r0, #4]!
 800f88a:	4288      	cmp	r0, r1
 800f88c:	d3f4      	bcc.n	800f878 <L_shift+0xc>
 800f88e:	bd70      	pop	{r4, r5, r6, pc}

0800f890 <__match>:
 800f890:	b530      	push	{r4, r5, lr}
 800f892:	6803      	ldr	r3, [r0, #0]
 800f894:	3301      	adds	r3, #1
 800f896:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f89a:	b914      	cbnz	r4, 800f8a2 <__match+0x12>
 800f89c:	6003      	str	r3, [r0, #0]
 800f89e:	2001      	movs	r0, #1
 800f8a0:	bd30      	pop	{r4, r5, pc}
 800f8a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f8a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800f8aa:	2d19      	cmp	r5, #25
 800f8ac:	bf98      	it	ls
 800f8ae:	3220      	addls	r2, #32
 800f8b0:	42a2      	cmp	r2, r4
 800f8b2:	d0f0      	beq.n	800f896 <__match+0x6>
 800f8b4:	2000      	movs	r0, #0
 800f8b6:	e7f3      	b.n	800f8a0 <__match+0x10>

0800f8b8 <__hexnan>:
 800f8b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f8bc:	680b      	ldr	r3, [r1, #0]
 800f8be:	6801      	ldr	r1, [r0, #0]
 800f8c0:	115e      	asrs	r6, r3, #5
 800f8c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800f8c6:	f013 031f 	ands.w	r3, r3, #31
 800f8ca:	b087      	sub	sp, #28
 800f8cc:	bf18      	it	ne
 800f8ce:	3604      	addne	r6, #4
 800f8d0:	2500      	movs	r5, #0
 800f8d2:	1f37      	subs	r7, r6, #4
 800f8d4:	4682      	mov	sl, r0
 800f8d6:	4690      	mov	r8, r2
 800f8d8:	9301      	str	r3, [sp, #4]
 800f8da:	f846 5c04 	str.w	r5, [r6, #-4]
 800f8de:	46b9      	mov	r9, r7
 800f8e0:	463c      	mov	r4, r7
 800f8e2:	9502      	str	r5, [sp, #8]
 800f8e4:	46ab      	mov	fp, r5
 800f8e6:	784a      	ldrb	r2, [r1, #1]
 800f8e8:	1c4b      	adds	r3, r1, #1
 800f8ea:	9303      	str	r3, [sp, #12]
 800f8ec:	b342      	cbz	r2, 800f940 <__hexnan+0x88>
 800f8ee:	4610      	mov	r0, r2
 800f8f0:	9105      	str	r1, [sp, #20]
 800f8f2:	9204      	str	r2, [sp, #16]
 800f8f4:	f7ff fd94 	bl	800f420 <__hexdig_fun>
 800f8f8:	2800      	cmp	r0, #0
 800f8fa:	d151      	bne.n	800f9a0 <__hexnan+0xe8>
 800f8fc:	9a04      	ldr	r2, [sp, #16]
 800f8fe:	9905      	ldr	r1, [sp, #20]
 800f900:	2a20      	cmp	r2, #32
 800f902:	d818      	bhi.n	800f936 <__hexnan+0x7e>
 800f904:	9b02      	ldr	r3, [sp, #8]
 800f906:	459b      	cmp	fp, r3
 800f908:	dd13      	ble.n	800f932 <__hexnan+0x7a>
 800f90a:	454c      	cmp	r4, r9
 800f90c:	d206      	bcs.n	800f91c <__hexnan+0x64>
 800f90e:	2d07      	cmp	r5, #7
 800f910:	dc04      	bgt.n	800f91c <__hexnan+0x64>
 800f912:	462a      	mov	r2, r5
 800f914:	4649      	mov	r1, r9
 800f916:	4620      	mov	r0, r4
 800f918:	f7ff ffa8 	bl	800f86c <L_shift>
 800f91c:	4544      	cmp	r4, r8
 800f91e:	d952      	bls.n	800f9c6 <__hexnan+0x10e>
 800f920:	2300      	movs	r3, #0
 800f922:	f1a4 0904 	sub.w	r9, r4, #4
 800f926:	f844 3c04 	str.w	r3, [r4, #-4]
 800f92a:	f8cd b008 	str.w	fp, [sp, #8]
 800f92e:	464c      	mov	r4, r9
 800f930:	461d      	mov	r5, r3
 800f932:	9903      	ldr	r1, [sp, #12]
 800f934:	e7d7      	b.n	800f8e6 <__hexnan+0x2e>
 800f936:	2a29      	cmp	r2, #41	@ 0x29
 800f938:	d157      	bne.n	800f9ea <__hexnan+0x132>
 800f93a:	3102      	adds	r1, #2
 800f93c:	f8ca 1000 	str.w	r1, [sl]
 800f940:	f1bb 0f00 	cmp.w	fp, #0
 800f944:	d051      	beq.n	800f9ea <__hexnan+0x132>
 800f946:	454c      	cmp	r4, r9
 800f948:	d206      	bcs.n	800f958 <__hexnan+0xa0>
 800f94a:	2d07      	cmp	r5, #7
 800f94c:	dc04      	bgt.n	800f958 <__hexnan+0xa0>
 800f94e:	462a      	mov	r2, r5
 800f950:	4649      	mov	r1, r9
 800f952:	4620      	mov	r0, r4
 800f954:	f7ff ff8a 	bl	800f86c <L_shift>
 800f958:	4544      	cmp	r4, r8
 800f95a:	d936      	bls.n	800f9ca <__hexnan+0x112>
 800f95c:	f1a8 0204 	sub.w	r2, r8, #4
 800f960:	4623      	mov	r3, r4
 800f962:	f853 1b04 	ldr.w	r1, [r3], #4
 800f966:	f842 1f04 	str.w	r1, [r2, #4]!
 800f96a:	429f      	cmp	r7, r3
 800f96c:	d2f9      	bcs.n	800f962 <__hexnan+0xaa>
 800f96e:	1b3b      	subs	r3, r7, r4
 800f970:	f023 0303 	bic.w	r3, r3, #3
 800f974:	3304      	adds	r3, #4
 800f976:	3401      	adds	r4, #1
 800f978:	3e03      	subs	r6, #3
 800f97a:	42b4      	cmp	r4, r6
 800f97c:	bf88      	it	hi
 800f97e:	2304      	movhi	r3, #4
 800f980:	4443      	add	r3, r8
 800f982:	2200      	movs	r2, #0
 800f984:	f843 2b04 	str.w	r2, [r3], #4
 800f988:	429f      	cmp	r7, r3
 800f98a:	d2fb      	bcs.n	800f984 <__hexnan+0xcc>
 800f98c:	683b      	ldr	r3, [r7, #0]
 800f98e:	b91b      	cbnz	r3, 800f998 <__hexnan+0xe0>
 800f990:	4547      	cmp	r7, r8
 800f992:	d128      	bne.n	800f9e6 <__hexnan+0x12e>
 800f994:	2301      	movs	r3, #1
 800f996:	603b      	str	r3, [r7, #0]
 800f998:	2005      	movs	r0, #5
 800f99a:	b007      	add	sp, #28
 800f99c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9a0:	3501      	adds	r5, #1
 800f9a2:	2d08      	cmp	r5, #8
 800f9a4:	f10b 0b01 	add.w	fp, fp, #1
 800f9a8:	dd06      	ble.n	800f9b8 <__hexnan+0x100>
 800f9aa:	4544      	cmp	r4, r8
 800f9ac:	d9c1      	bls.n	800f932 <__hexnan+0x7a>
 800f9ae:	2300      	movs	r3, #0
 800f9b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f9b4:	2501      	movs	r5, #1
 800f9b6:	3c04      	subs	r4, #4
 800f9b8:	6822      	ldr	r2, [r4, #0]
 800f9ba:	f000 000f 	and.w	r0, r0, #15
 800f9be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f9c2:	6020      	str	r0, [r4, #0]
 800f9c4:	e7b5      	b.n	800f932 <__hexnan+0x7a>
 800f9c6:	2508      	movs	r5, #8
 800f9c8:	e7b3      	b.n	800f932 <__hexnan+0x7a>
 800f9ca:	9b01      	ldr	r3, [sp, #4]
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d0dd      	beq.n	800f98c <__hexnan+0xd4>
 800f9d0:	f1c3 0320 	rsb	r3, r3, #32
 800f9d4:	f04f 32ff 	mov.w	r2, #4294967295
 800f9d8:	40da      	lsrs	r2, r3
 800f9da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800f9de:	4013      	ands	r3, r2
 800f9e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800f9e4:	e7d2      	b.n	800f98c <__hexnan+0xd4>
 800f9e6:	3f04      	subs	r7, #4
 800f9e8:	e7d0      	b.n	800f98c <__hexnan+0xd4>
 800f9ea:	2004      	movs	r0, #4
 800f9ec:	e7d5      	b.n	800f99a <__hexnan+0xe2>
	...

0800f9f0 <malloc>:
 800f9f0:	4b02      	ldr	r3, [pc, #8]	@ (800f9fc <malloc+0xc>)
 800f9f2:	4601      	mov	r1, r0
 800f9f4:	6818      	ldr	r0, [r3, #0]
 800f9f6:	f000 b825 	b.w	800fa44 <_malloc_r>
 800f9fa:	bf00      	nop
 800f9fc:	20000274 	.word	0x20000274

0800fa00 <sbrk_aligned>:
 800fa00:	b570      	push	{r4, r5, r6, lr}
 800fa02:	4e0f      	ldr	r6, [pc, #60]	@ (800fa40 <sbrk_aligned+0x40>)
 800fa04:	460c      	mov	r4, r1
 800fa06:	6831      	ldr	r1, [r6, #0]
 800fa08:	4605      	mov	r5, r0
 800fa0a:	b911      	cbnz	r1, 800fa12 <sbrk_aligned+0x12>
 800fa0c:	f000 ffe0 	bl	80109d0 <_sbrk_r>
 800fa10:	6030      	str	r0, [r6, #0]
 800fa12:	4621      	mov	r1, r4
 800fa14:	4628      	mov	r0, r5
 800fa16:	f000 ffdb 	bl	80109d0 <_sbrk_r>
 800fa1a:	1c43      	adds	r3, r0, #1
 800fa1c:	d103      	bne.n	800fa26 <sbrk_aligned+0x26>
 800fa1e:	f04f 34ff 	mov.w	r4, #4294967295
 800fa22:	4620      	mov	r0, r4
 800fa24:	bd70      	pop	{r4, r5, r6, pc}
 800fa26:	1cc4      	adds	r4, r0, #3
 800fa28:	f024 0403 	bic.w	r4, r4, #3
 800fa2c:	42a0      	cmp	r0, r4
 800fa2e:	d0f8      	beq.n	800fa22 <sbrk_aligned+0x22>
 800fa30:	1a21      	subs	r1, r4, r0
 800fa32:	4628      	mov	r0, r5
 800fa34:	f000 ffcc 	bl	80109d0 <_sbrk_r>
 800fa38:	3001      	adds	r0, #1
 800fa3a:	d1f2      	bne.n	800fa22 <sbrk_aligned+0x22>
 800fa3c:	e7ef      	b.n	800fa1e <sbrk_aligned+0x1e>
 800fa3e:	bf00      	nop
 800fa40:	200026b8 	.word	0x200026b8

0800fa44 <_malloc_r>:
 800fa44:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa48:	1ccd      	adds	r5, r1, #3
 800fa4a:	f025 0503 	bic.w	r5, r5, #3
 800fa4e:	3508      	adds	r5, #8
 800fa50:	2d0c      	cmp	r5, #12
 800fa52:	bf38      	it	cc
 800fa54:	250c      	movcc	r5, #12
 800fa56:	2d00      	cmp	r5, #0
 800fa58:	4606      	mov	r6, r0
 800fa5a:	db01      	blt.n	800fa60 <_malloc_r+0x1c>
 800fa5c:	42a9      	cmp	r1, r5
 800fa5e:	d904      	bls.n	800fa6a <_malloc_r+0x26>
 800fa60:	230c      	movs	r3, #12
 800fa62:	6033      	str	r3, [r6, #0]
 800fa64:	2000      	movs	r0, #0
 800fa66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa6a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800fb40 <_malloc_r+0xfc>
 800fa6e:	f000 f87b 	bl	800fb68 <__malloc_lock>
 800fa72:	f8d8 3000 	ldr.w	r3, [r8]
 800fa76:	461c      	mov	r4, r3
 800fa78:	bb44      	cbnz	r4, 800facc <_malloc_r+0x88>
 800fa7a:	4629      	mov	r1, r5
 800fa7c:	4630      	mov	r0, r6
 800fa7e:	f7ff ffbf 	bl	800fa00 <sbrk_aligned>
 800fa82:	1c43      	adds	r3, r0, #1
 800fa84:	4604      	mov	r4, r0
 800fa86:	d158      	bne.n	800fb3a <_malloc_r+0xf6>
 800fa88:	f8d8 4000 	ldr.w	r4, [r8]
 800fa8c:	4627      	mov	r7, r4
 800fa8e:	2f00      	cmp	r7, #0
 800fa90:	d143      	bne.n	800fb1a <_malloc_r+0xd6>
 800fa92:	2c00      	cmp	r4, #0
 800fa94:	d04b      	beq.n	800fb2e <_malloc_r+0xea>
 800fa96:	6823      	ldr	r3, [r4, #0]
 800fa98:	4639      	mov	r1, r7
 800fa9a:	4630      	mov	r0, r6
 800fa9c:	eb04 0903 	add.w	r9, r4, r3
 800faa0:	f000 ff96 	bl	80109d0 <_sbrk_r>
 800faa4:	4581      	cmp	r9, r0
 800faa6:	d142      	bne.n	800fb2e <_malloc_r+0xea>
 800faa8:	6821      	ldr	r1, [r4, #0]
 800faaa:	1a6d      	subs	r5, r5, r1
 800faac:	4629      	mov	r1, r5
 800faae:	4630      	mov	r0, r6
 800fab0:	f7ff ffa6 	bl	800fa00 <sbrk_aligned>
 800fab4:	3001      	adds	r0, #1
 800fab6:	d03a      	beq.n	800fb2e <_malloc_r+0xea>
 800fab8:	6823      	ldr	r3, [r4, #0]
 800faba:	442b      	add	r3, r5
 800fabc:	6023      	str	r3, [r4, #0]
 800fabe:	f8d8 3000 	ldr.w	r3, [r8]
 800fac2:	685a      	ldr	r2, [r3, #4]
 800fac4:	bb62      	cbnz	r2, 800fb20 <_malloc_r+0xdc>
 800fac6:	f8c8 7000 	str.w	r7, [r8]
 800faca:	e00f      	b.n	800faec <_malloc_r+0xa8>
 800facc:	6822      	ldr	r2, [r4, #0]
 800face:	1b52      	subs	r2, r2, r5
 800fad0:	d420      	bmi.n	800fb14 <_malloc_r+0xd0>
 800fad2:	2a0b      	cmp	r2, #11
 800fad4:	d917      	bls.n	800fb06 <_malloc_r+0xc2>
 800fad6:	1961      	adds	r1, r4, r5
 800fad8:	42a3      	cmp	r3, r4
 800fada:	6025      	str	r5, [r4, #0]
 800fadc:	bf18      	it	ne
 800fade:	6059      	strne	r1, [r3, #4]
 800fae0:	6863      	ldr	r3, [r4, #4]
 800fae2:	bf08      	it	eq
 800fae4:	f8c8 1000 	streq.w	r1, [r8]
 800fae8:	5162      	str	r2, [r4, r5]
 800faea:	604b      	str	r3, [r1, #4]
 800faec:	4630      	mov	r0, r6
 800faee:	f000 f841 	bl	800fb74 <__malloc_unlock>
 800faf2:	f104 000b 	add.w	r0, r4, #11
 800faf6:	1d23      	adds	r3, r4, #4
 800faf8:	f020 0007 	bic.w	r0, r0, #7
 800fafc:	1ac2      	subs	r2, r0, r3
 800fafe:	bf1c      	itt	ne
 800fb00:	1a1b      	subne	r3, r3, r0
 800fb02:	50a3      	strne	r3, [r4, r2]
 800fb04:	e7af      	b.n	800fa66 <_malloc_r+0x22>
 800fb06:	6862      	ldr	r2, [r4, #4]
 800fb08:	42a3      	cmp	r3, r4
 800fb0a:	bf0c      	ite	eq
 800fb0c:	f8c8 2000 	streq.w	r2, [r8]
 800fb10:	605a      	strne	r2, [r3, #4]
 800fb12:	e7eb      	b.n	800faec <_malloc_r+0xa8>
 800fb14:	4623      	mov	r3, r4
 800fb16:	6864      	ldr	r4, [r4, #4]
 800fb18:	e7ae      	b.n	800fa78 <_malloc_r+0x34>
 800fb1a:	463c      	mov	r4, r7
 800fb1c:	687f      	ldr	r7, [r7, #4]
 800fb1e:	e7b6      	b.n	800fa8e <_malloc_r+0x4a>
 800fb20:	461a      	mov	r2, r3
 800fb22:	685b      	ldr	r3, [r3, #4]
 800fb24:	42a3      	cmp	r3, r4
 800fb26:	d1fb      	bne.n	800fb20 <_malloc_r+0xdc>
 800fb28:	2300      	movs	r3, #0
 800fb2a:	6053      	str	r3, [r2, #4]
 800fb2c:	e7de      	b.n	800faec <_malloc_r+0xa8>
 800fb2e:	230c      	movs	r3, #12
 800fb30:	6033      	str	r3, [r6, #0]
 800fb32:	4630      	mov	r0, r6
 800fb34:	f000 f81e 	bl	800fb74 <__malloc_unlock>
 800fb38:	e794      	b.n	800fa64 <_malloc_r+0x20>
 800fb3a:	6005      	str	r5, [r0, #0]
 800fb3c:	e7d6      	b.n	800faec <_malloc_r+0xa8>
 800fb3e:	bf00      	nop
 800fb40:	200026bc 	.word	0x200026bc

0800fb44 <__ascii_mbtowc>:
 800fb44:	b082      	sub	sp, #8
 800fb46:	b901      	cbnz	r1, 800fb4a <__ascii_mbtowc+0x6>
 800fb48:	a901      	add	r1, sp, #4
 800fb4a:	b142      	cbz	r2, 800fb5e <__ascii_mbtowc+0x1a>
 800fb4c:	b14b      	cbz	r3, 800fb62 <__ascii_mbtowc+0x1e>
 800fb4e:	7813      	ldrb	r3, [r2, #0]
 800fb50:	600b      	str	r3, [r1, #0]
 800fb52:	7812      	ldrb	r2, [r2, #0]
 800fb54:	1e10      	subs	r0, r2, #0
 800fb56:	bf18      	it	ne
 800fb58:	2001      	movne	r0, #1
 800fb5a:	b002      	add	sp, #8
 800fb5c:	4770      	bx	lr
 800fb5e:	4610      	mov	r0, r2
 800fb60:	e7fb      	b.n	800fb5a <__ascii_mbtowc+0x16>
 800fb62:	f06f 0001 	mvn.w	r0, #1
 800fb66:	e7f8      	b.n	800fb5a <__ascii_mbtowc+0x16>

0800fb68 <__malloc_lock>:
 800fb68:	4801      	ldr	r0, [pc, #4]	@ (800fb70 <__malloc_lock+0x8>)
 800fb6a:	f7fe bd4c 	b.w	800e606 <__retarget_lock_acquire_recursive>
 800fb6e:	bf00      	nop
 800fb70:	200026b4 	.word	0x200026b4

0800fb74 <__malloc_unlock>:
 800fb74:	4801      	ldr	r0, [pc, #4]	@ (800fb7c <__malloc_unlock+0x8>)
 800fb76:	f7fe bd47 	b.w	800e608 <__retarget_lock_release_recursive>
 800fb7a:	bf00      	nop
 800fb7c:	200026b4 	.word	0x200026b4

0800fb80 <_Balloc>:
 800fb80:	b570      	push	{r4, r5, r6, lr}
 800fb82:	69c6      	ldr	r6, [r0, #28]
 800fb84:	4604      	mov	r4, r0
 800fb86:	460d      	mov	r5, r1
 800fb88:	b976      	cbnz	r6, 800fba8 <_Balloc+0x28>
 800fb8a:	2010      	movs	r0, #16
 800fb8c:	f7ff ff30 	bl	800f9f0 <malloc>
 800fb90:	4602      	mov	r2, r0
 800fb92:	61e0      	str	r0, [r4, #28]
 800fb94:	b920      	cbnz	r0, 800fba0 <_Balloc+0x20>
 800fb96:	4b18      	ldr	r3, [pc, #96]	@ (800fbf8 <_Balloc+0x78>)
 800fb98:	4818      	ldr	r0, [pc, #96]	@ (800fbfc <_Balloc+0x7c>)
 800fb9a:	216b      	movs	r1, #107	@ 0x6b
 800fb9c:	f000 ff28 	bl	80109f0 <__assert_func>
 800fba0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fba4:	6006      	str	r6, [r0, #0]
 800fba6:	60c6      	str	r6, [r0, #12]
 800fba8:	69e6      	ldr	r6, [r4, #28]
 800fbaa:	68f3      	ldr	r3, [r6, #12]
 800fbac:	b183      	cbz	r3, 800fbd0 <_Balloc+0x50>
 800fbae:	69e3      	ldr	r3, [r4, #28]
 800fbb0:	68db      	ldr	r3, [r3, #12]
 800fbb2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800fbb6:	b9b8      	cbnz	r0, 800fbe8 <_Balloc+0x68>
 800fbb8:	2101      	movs	r1, #1
 800fbba:	fa01 f605 	lsl.w	r6, r1, r5
 800fbbe:	1d72      	adds	r2, r6, #5
 800fbc0:	0092      	lsls	r2, r2, #2
 800fbc2:	4620      	mov	r0, r4
 800fbc4:	f000 ff32 	bl	8010a2c <_calloc_r>
 800fbc8:	b160      	cbz	r0, 800fbe4 <_Balloc+0x64>
 800fbca:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800fbce:	e00e      	b.n	800fbee <_Balloc+0x6e>
 800fbd0:	2221      	movs	r2, #33	@ 0x21
 800fbd2:	2104      	movs	r1, #4
 800fbd4:	4620      	mov	r0, r4
 800fbd6:	f000 ff29 	bl	8010a2c <_calloc_r>
 800fbda:	69e3      	ldr	r3, [r4, #28]
 800fbdc:	60f0      	str	r0, [r6, #12]
 800fbde:	68db      	ldr	r3, [r3, #12]
 800fbe0:	2b00      	cmp	r3, #0
 800fbe2:	d1e4      	bne.n	800fbae <_Balloc+0x2e>
 800fbe4:	2000      	movs	r0, #0
 800fbe6:	bd70      	pop	{r4, r5, r6, pc}
 800fbe8:	6802      	ldr	r2, [r0, #0]
 800fbea:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800fbee:	2300      	movs	r3, #0
 800fbf0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800fbf4:	e7f7      	b.n	800fbe6 <_Balloc+0x66>
 800fbf6:	bf00      	nop
 800fbf8:	08011bc7 	.word	0x08011bc7
 800fbfc:	08011ca7 	.word	0x08011ca7

0800fc00 <_Bfree>:
 800fc00:	b570      	push	{r4, r5, r6, lr}
 800fc02:	69c6      	ldr	r6, [r0, #28]
 800fc04:	4605      	mov	r5, r0
 800fc06:	460c      	mov	r4, r1
 800fc08:	b976      	cbnz	r6, 800fc28 <_Bfree+0x28>
 800fc0a:	2010      	movs	r0, #16
 800fc0c:	f7ff fef0 	bl	800f9f0 <malloc>
 800fc10:	4602      	mov	r2, r0
 800fc12:	61e8      	str	r0, [r5, #28]
 800fc14:	b920      	cbnz	r0, 800fc20 <_Bfree+0x20>
 800fc16:	4b09      	ldr	r3, [pc, #36]	@ (800fc3c <_Bfree+0x3c>)
 800fc18:	4809      	ldr	r0, [pc, #36]	@ (800fc40 <_Bfree+0x40>)
 800fc1a:	218f      	movs	r1, #143	@ 0x8f
 800fc1c:	f000 fee8 	bl	80109f0 <__assert_func>
 800fc20:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800fc24:	6006      	str	r6, [r0, #0]
 800fc26:	60c6      	str	r6, [r0, #12]
 800fc28:	b13c      	cbz	r4, 800fc3a <_Bfree+0x3a>
 800fc2a:	69eb      	ldr	r3, [r5, #28]
 800fc2c:	6862      	ldr	r2, [r4, #4]
 800fc2e:	68db      	ldr	r3, [r3, #12]
 800fc30:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800fc34:	6021      	str	r1, [r4, #0]
 800fc36:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800fc3a:	bd70      	pop	{r4, r5, r6, pc}
 800fc3c:	08011bc7 	.word	0x08011bc7
 800fc40:	08011ca7 	.word	0x08011ca7

0800fc44 <__multadd>:
 800fc44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fc48:	690d      	ldr	r5, [r1, #16]
 800fc4a:	4607      	mov	r7, r0
 800fc4c:	460c      	mov	r4, r1
 800fc4e:	461e      	mov	r6, r3
 800fc50:	f101 0c14 	add.w	ip, r1, #20
 800fc54:	2000      	movs	r0, #0
 800fc56:	f8dc 3000 	ldr.w	r3, [ip]
 800fc5a:	b299      	uxth	r1, r3
 800fc5c:	fb02 6101 	mla	r1, r2, r1, r6
 800fc60:	0c1e      	lsrs	r6, r3, #16
 800fc62:	0c0b      	lsrs	r3, r1, #16
 800fc64:	fb02 3306 	mla	r3, r2, r6, r3
 800fc68:	b289      	uxth	r1, r1
 800fc6a:	3001      	adds	r0, #1
 800fc6c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800fc70:	4285      	cmp	r5, r0
 800fc72:	f84c 1b04 	str.w	r1, [ip], #4
 800fc76:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800fc7a:	dcec      	bgt.n	800fc56 <__multadd+0x12>
 800fc7c:	b30e      	cbz	r6, 800fcc2 <__multadd+0x7e>
 800fc7e:	68a3      	ldr	r3, [r4, #8]
 800fc80:	42ab      	cmp	r3, r5
 800fc82:	dc19      	bgt.n	800fcb8 <__multadd+0x74>
 800fc84:	6861      	ldr	r1, [r4, #4]
 800fc86:	4638      	mov	r0, r7
 800fc88:	3101      	adds	r1, #1
 800fc8a:	f7ff ff79 	bl	800fb80 <_Balloc>
 800fc8e:	4680      	mov	r8, r0
 800fc90:	b928      	cbnz	r0, 800fc9e <__multadd+0x5a>
 800fc92:	4602      	mov	r2, r0
 800fc94:	4b0c      	ldr	r3, [pc, #48]	@ (800fcc8 <__multadd+0x84>)
 800fc96:	480d      	ldr	r0, [pc, #52]	@ (800fccc <__multadd+0x88>)
 800fc98:	21ba      	movs	r1, #186	@ 0xba
 800fc9a:	f000 fea9 	bl	80109f0 <__assert_func>
 800fc9e:	6922      	ldr	r2, [r4, #16]
 800fca0:	3202      	adds	r2, #2
 800fca2:	f104 010c 	add.w	r1, r4, #12
 800fca6:	0092      	lsls	r2, r2, #2
 800fca8:	300c      	adds	r0, #12
 800fcaa:	f7fe fcae 	bl	800e60a <memcpy>
 800fcae:	4621      	mov	r1, r4
 800fcb0:	4638      	mov	r0, r7
 800fcb2:	f7ff ffa5 	bl	800fc00 <_Bfree>
 800fcb6:	4644      	mov	r4, r8
 800fcb8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800fcbc:	3501      	adds	r5, #1
 800fcbe:	615e      	str	r6, [r3, #20]
 800fcc0:	6125      	str	r5, [r4, #16]
 800fcc2:	4620      	mov	r0, r4
 800fcc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fcc8:	08011c36 	.word	0x08011c36
 800fccc:	08011ca7 	.word	0x08011ca7

0800fcd0 <__s2b>:
 800fcd0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fcd4:	460c      	mov	r4, r1
 800fcd6:	4615      	mov	r5, r2
 800fcd8:	461f      	mov	r7, r3
 800fcda:	2209      	movs	r2, #9
 800fcdc:	3308      	adds	r3, #8
 800fcde:	4606      	mov	r6, r0
 800fce0:	fb93 f3f2 	sdiv	r3, r3, r2
 800fce4:	2100      	movs	r1, #0
 800fce6:	2201      	movs	r2, #1
 800fce8:	429a      	cmp	r2, r3
 800fcea:	db09      	blt.n	800fd00 <__s2b+0x30>
 800fcec:	4630      	mov	r0, r6
 800fcee:	f7ff ff47 	bl	800fb80 <_Balloc>
 800fcf2:	b940      	cbnz	r0, 800fd06 <__s2b+0x36>
 800fcf4:	4602      	mov	r2, r0
 800fcf6:	4b19      	ldr	r3, [pc, #100]	@ (800fd5c <__s2b+0x8c>)
 800fcf8:	4819      	ldr	r0, [pc, #100]	@ (800fd60 <__s2b+0x90>)
 800fcfa:	21d3      	movs	r1, #211	@ 0xd3
 800fcfc:	f000 fe78 	bl	80109f0 <__assert_func>
 800fd00:	0052      	lsls	r2, r2, #1
 800fd02:	3101      	adds	r1, #1
 800fd04:	e7f0      	b.n	800fce8 <__s2b+0x18>
 800fd06:	9b08      	ldr	r3, [sp, #32]
 800fd08:	6143      	str	r3, [r0, #20]
 800fd0a:	2d09      	cmp	r5, #9
 800fd0c:	f04f 0301 	mov.w	r3, #1
 800fd10:	6103      	str	r3, [r0, #16]
 800fd12:	dd16      	ble.n	800fd42 <__s2b+0x72>
 800fd14:	f104 0909 	add.w	r9, r4, #9
 800fd18:	46c8      	mov	r8, r9
 800fd1a:	442c      	add	r4, r5
 800fd1c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800fd20:	4601      	mov	r1, r0
 800fd22:	3b30      	subs	r3, #48	@ 0x30
 800fd24:	220a      	movs	r2, #10
 800fd26:	4630      	mov	r0, r6
 800fd28:	f7ff ff8c 	bl	800fc44 <__multadd>
 800fd2c:	45a0      	cmp	r8, r4
 800fd2e:	d1f5      	bne.n	800fd1c <__s2b+0x4c>
 800fd30:	f1a5 0408 	sub.w	r4, r5, #8
 800fd34:	444c      	add	r4, r9
 800fd36:	1b2d      	subs	r5, r5, r4
 800fd38:	1963      	adds	r3, r4, r5
 800fd3a:	42bb      	cmp	r3, r7
 800fd3c:	db04      	blt.n	800fd48 <__s2b+0x78>
 800fd3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fd42:	340a      	adds	r4, #10
 800fd44:	2509      	movs	r5, #9
 800fd46:	e7f6      	b.n	800fd36 <__s2b+0x66>
 800fd48:	f814 3b01 	ldrb.w	r3, [r4], #1
 800fd4c:	4601      	mov	r1, r0
 800fd4e:	3b30      	subs	r3, #48	@ 0x30
 800fd50:	220a      	movs	r2, #10
 800fd52:	4630      	mov	r0, r6
 800fd54:	f7ff ff76 	bl	800fc44 <__multadd>
 800fd58:	e7ee      	b.n	800fd38 <__s2b+0x68>
 800fd5a:	bf00      	nop
 800fd5c:	08011c36 	.word	0x08011c36
 800fd60:	08011ca7 	.word	0x08011ca7

0800fd64 <__hi0bits>:
 800fd64:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800fd68:	4603      	mov	r3, r0
 800fd6a:	bf36      	itet	cc
 800fd6c:	0403      	lslcc	r3, r0, #16
 800fd6e:	2000      	movcs	r0, #0
 800fd70:	2010      	movcc	r0, #16
 800fd72:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800fd76:	bf3c      	itt	cc
 800fd78:	021b      	lslcc	r3, r3, #8
 800fd7a:	3008      	addcc	r0, #8
 800fd7c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800fd80:	bf3c      	itt	cc
 800fd82:	011b      	lslcc	r3, r3, #4
 800fd84:	3004      	addcc	r0, #4
 800fd86:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800fd8a:	bf3c      	itt	cc
 800fd8c:	009b      	lslcc	r3, r3, #2
 800fd8e:	3002      	addcc	r0, #2
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	db05      	blt.n	800fda0 <__hi0bits+0x3c>
 800fd94:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800fd98:	f100 0001 	add.w	r0, r0, #1
 800fd9c:	bf08      	it	eq
 800fd9e:	2020      	moveq	r0, #32
 800fda0:	4770      	bx	lr

0800fda2 <__lo0bits>:
 800fda2:	6803      	ldr	r3, [r0, #0]
 800fda4:	4602      	mov	r2, r0
 800fda6:	f013 0007 	ands.w	r0, r3, #7
 800fdaa:	d00b      	beq.n	800fdc4 <__lo0bits+0x22>
 800fdac:	07d9      	lsls	r1, r3, #31
 800fdae:	d421      	bmi.n	800fdf4 <__lo0bits+0x52>
 800fdb0:	0798      	lsls	r0, r3, #30
 800fdb2:	bf49      	itett	mi
 800fdb4:	085b      	lsrmi	r3, r3, #1
 800fdb6:	089b      	lsrpl	r3, r3, #2
 800fdb8:	2001      	movmi	r0, #1
 800fdba:	6013      	strmi	r3, [r2, #0]
 800fdbc:	bf5c      	itt	pl
 800fdbe:	6013      	strpl	r3, [r2, #0]
 800fdc0:	2002      	movpl	r0, #2
 800fdc2:	4770      	bx	lr
 800fdc4:	b299      	uxth	r1, r3
 800fdc6:	b909      	cbnz	r1, 800fdcc <__lo0bits+0x2a>
 800fdc8:	0c1b      	lsrs	r3, r3, #16
 800fdca:	2010      	movs	r0, #16
 800fdcc:	b2d9      	uxtb	r1, r3
 800fdce:	b909      	cbnz	r1, 800fdd4 <__lo0bits+0x32>
 800fdd0:	3008      	adds	r0, #8
 800fdd2:	0a1b      	lsrs	r3, r3, #8
 800fdd4:	0719      	lsls	r1, r3, #28
 800fdd6:	bf04      	itt	eq
 800fdd8:	091b      	lsreq	r3, r3, #4
 800fdda:	3004      	addeq	r0, #4
 800fddc:	0799      	lsls	r1, r3, #30
 800fdde:	bf04      	itt	eq
 800fde0:	089b      	lsreq	r3, r3, #2
 800fde2:	3002      	addeq	r0, #2
 800fde4:	07d9      	lsls	r1, r3, #31
 800fde6:	d403      	bmi.n	800fdf0 <__lo0bits+0x4e>
 800fde8:	085b      	lsrs	r3, r3, #1
 800fdea:	f100 0001 	add.w	r0, r0, #1
 800fdee:	d003      	beq.n	800fdf8 <__lo0bits+0x56>
 800fdf0:	6013      	str	r3, [r2, #0]
 800fdf2:	4770      	bx	lr
 800fdf4:	2000      	movs	r0, #0
 800fdf6:	4770      	bx	lr
 800fdf8:	2020      	movs	r0, #32
 800fdfa:	4770      	bx	lr

0800fdfc <__i2b>:
 800fdfc:	b510      	push	{r4, lr}
 800fdfe:	460c      	mov	r4, r1
 800fe00:	2101      	movs	r1, #1
 800fe02:	f7ff febd 	bl	800fb80 <_Balloc>
 800fe06:	4602      	mov	r2, r0
 800fe08:	b928      	cbnz	r0, 800fe16 <__i2b+0x1a>
 800fe0a:	4b05      	ldr	r3, [pc, #20]	@ (800fe20 <__i2b+0x24>)
 800fe0c:	4805      	ldr	r0, [pc, #20]	@ (800fe24 <__i2b+0x28>)
 800fe0e:	f240 1145 	movw	r1, #325	@ 0x145
 800fe12:	f000 fded 	bl	80109f0 <__assert_func>
 800fe16:	2301      	movs	r3, #1
 800fe18:	6144      	str	r4, [r0, #20]
 800fe1a:	6103      	str	r3, [r0, #16]
 800fe1c:	bd10      	pop	{r4, pc}
 800fe1e:	bf00      	nop
 800fe20:	08011c36 	.word	0x08011c36
 800fe24:	08011ca7 	.word	0x08011ca7

0800fe28 <__multiply>:
 800fe28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe2c:	4617      	mov	r7, r2
 800fe2e:	690a      	ldr	r2, [r1, #16]
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	429a      	cmp	r2, r3
 800fe34:	bfa8      	it	ge
 800fe36:	463b      	movge	r3, r7
 800fe38:	4689      	mov	r9, r1
 800fe3a:	bfa4      	itt	ge
 800fe3c:	460f      	movge	r7, r1
 800fe3e:	4699      	movge	r9, r3
 800fe40:	693d      	ldr	r5, [r7, #16]
 800fe42:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800fe46:	68bb      	ldr	r3, [r7, #8]
 800fe48:	6879      	ldr	r1, [r7, #4]
 800fe4a:	eb05 060a 	add.w	r6, r5, sl
 800fe4e:	42b3      	cmp	r3, r6
 800fe50:	b085      	sub	sp, #20
 800fe52:	bfb8      	it	lt
 800fe54:	3101      	addlt	r1, #1
 800fe56:	f7ff fe93 	bl	800fb80 <_Balloc>
 800fe5a:	b930      	cbnz	r0, 800fe6a <__multiply+0x42>
 800fe5c:	4602      	mov	r2, r0
 800fe5e:	4b41      	ldr	r3, [pc, #260]	@ (800ff64 <__multiply+0x13c>)
 800fe60:	4841      	ldr	r0, [pc, #260]	@ (800ff68 <__multiply+0x140>)
 800fe62:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800fe66:	f000 fdc3 	bl	80109f0 <__assert_func>
 800fe6a:	f100 0414 	add.w	r4, r0, #20
 800fe6e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800fe72:	4623      	mov	r3, r4
 800fe74:	2200      	movs	r2, #0
 800fe76:	4573      	cmp	r3, lr
 800fe78:	d320      	bcc.n	800febc <__multiply+0x94>
 800fe7a:	f107 0814 	add.w	r8, r7, #20
 800fe7e:	f109 0114 	add.w	r1, r9, #20
 800fe82:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800fe86:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800fe8a:	9302      	str	r3, [sp, #8]
 800fe8c:	1beb      	subs	r3, r5, r7
 800fe8e:	3b15      	subs	r3, #21
 800fe90:	f023 0303 	bic.w	r3, r3, #3
 800fe94:	3304      	adds	r3, #4
 800fe96:	3715      	adds	r7, #21
 800fe98:	42bd      	cmp	r5, r7
 800fe9a:	bf38      	it	cc
 800fe9c:	2304      	movcc	r3, #4
 800fe9e:	9301      	str	r3, [sp, #4]
 800fea0:	9b02      	ldr	r3, [sp, #8]
 800fea2:	9103      	str	r1, [sp, #12]
 800fea4:	428b      	cmp	r3, r1
 800fea6:	d80c      	bhi.n	800fec2 <__multiply+0x9a>
 800fea8:	2e00      	cmp	r6, #0
 800feaa:	dd03      	ble.n	800feb4 <__multiply+0x8c>
 800feac:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800feb0:	2b00      	cmp	r3, #0
 800feb2:	d055      	beq.n	800ff60 <__multiply+0x138>
 800feb4:	6106      	str	r6, [r0, #16]
 800feb6:	b005      	add	sp, #20
 800feb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800febc:	f843 2b04 	str.w	r2, [r3], #4
 800fec0:	e7d9      	b.n	800fe76 <__multiply+0x4e>
 800fec2:	f8b1 a000 	ldrh.w	sl, [r1]
 800fec6:	f1ba 0f00 	cmp.w	sl, #0
 800feca:	d01f      	beq.n	800ff0c <__multiply+0xe4>
 800fecc:	46c4      	mov	ip, r8
 800fece:	46a1      	mov	r9, r4
 800fed0:	2700      	movs	r7, #0
 800fed2:	f85c 2b04 	ldr.w	r2, [ip], #4
 800fed6:	f8d9 3000 	ldr.w	r3, [r9]
 800feda:	fa1f fb82 	uxth.w	fp, r2
 800fede:	b29b      	uxth	r3, r3
 800fee0:	fb0a 330b 	mla	r3, sl, fp, r3
 800fee4:	443b      	add	r3, r7
 800fee6:	f8d9 7000 	ldr.w	r7, [r9]
 800feea:	0c12      	lsrs	r2, r2, #16
 800feec:	0c3f      	lsrs	r7, r7, #16
 800feee:	fb0a 7202 	mla	r2, sl, r2, r7
 800fef2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800fef6:	b29b      	uxth	r3, r3
 800fef8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fefc:	4565      	cmp	r5, ip
 800fefe:	f849 3b04 	str.w	r3, [r9], #4
 800ff02:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800ff06:	d8e4      	bhi.n	800fed2 <__multiply+0xaa>
 800ff08:	9b01      	ldr	r3, [sp, #4]
 800ff0a:	50e7      	str	r7, [r4, r3]
 800ff0c:	9b03      	ldr	r3, [sp, #12]
 800ff0e:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ff12:	3104      	adds	r1, #4
 800ff14:	f1b9 0f00 	cmp.w	r9, #0
 800ff18:	d020      	beq.n	800ff5c <__multiply+0x134>
 800ff1a:	6823      	ldr	r3, [r4, #0]
 800ff1c:	4647      	mov	r7, r8
 800ff1e:	46a4      	mov	ip, r4
 800ff20:	f04f 0a00 	mov.w	sl, #0
 800ff24:	f8b7 b000 	ldrh.w	fp, [r7]
 800ff28:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800ff2c:	fb09 220b 	mla	r2, r9, fp, r2
 800ff30:	4452      	add	r2, sl
 800ff32:	b29b      	uxth	r3, r3
 800ff34:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ff38:	f84c 3b04 	str.w	r3, [ip], #4
 800ff3c:	f857 3b04 	ldr.w	r3, [r7], #4
 800ff40:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff44:	f8bc 3000 	ldrh.w	r3, [ip]
 800ff48:	fb09 330a 	mla	r3, r9, sl, r3
 800ff4c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800ff50:	42bd      	cmp	r5, r7
 800ff52:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ff56:	d8e5      	bhi.n	800ff24 <__multiply+0xfc>
 800ff58:	9a01      	ldr	r2, [sp, #4]
 800ff5a:	50a3      	str	r3, [r4, r2]
 800ff5c:	3404      	adds	r4, #4
 800ff5e:	e79f      	b.n	800fea0 <__multiply+0x78>
 800ff60:	3e01      	subs	r6, #1
 800ff62:	e7a1      	b.n	800fea8 <__multiply+0x80>
 800ff64:	08011c36 	.word	0x08011c36
 800ff68:	08011ca7 	.word	0x08011ca7

0800ff6c <__pow5mult>:
 800ff6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ff70:	4615      	mov	r5, r2
 800ff72:	f012 0203 	ands.w	r2, r2, #3
 800ff76:	4607      	mov	r7, r0
 800ff78:	460e      	mov	r6, r1
 800ff7a:	d007      	beq.n	800ff8c <__pow5mult+0x20>
 800ff7c:	4c25      	ldr	r4, [pc, #148]	@ (8010014 <__pow5mult+0xa8>)
 800ff7e:	3a01      	subs	r2, #1
 800ff80:	2300      	movs	r3, #0
 800ff82:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ff86:	f7ff fe5d 	bl	800fc44 <__multadd>
 800ff8a:	4606      	mov	r6, r0
 800ff8c:	10ad      	asrs	r5, r5, #2
 800ff8e:	d03d      	beq.n	801000c <__pow5mult+0xa0>
 800ff90:	69fc      	ldr	r4, [r7, #28]
 800ff92:	b97c      	cbnz	r4, 800ffb4 <__pow5mult+0x48>
 800ff94:	2010      	movs	r0, #16
 800ff96:	f7ff fd2b 	bl	800f9f0 <malloc>
 800ff9a:	4602      	mov	r2, r0
 800ff9c:	61f8      	str	r0, [r7, #28]
 800ff9e:	b928      	cbnz	r0, 800ffac <__pow5mult+0x40>
 800ffa0:	4b1d      	ldr	r3, [pc, #116]	@ (8010018 <__pow5mult+0xac>)
 800ffa2:	481e      	ldr	r0, [pc, #120]	@ (801001c <__pow5mult+0xb0>)
 800ffa4:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ffa8:	f000 fd22 	bl	80109f0 <__assert_func>
 800ffac:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ffb0:	6004      	str	r4, [r0, #0]
 800ffb2:	60c4      	str	r4, [r0, #12]
 800ffb4:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ffb8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ffbc:	b94c      	cbnz	r4, 800ffd2 <__pow5mult+0x66>
 800ffbe:	f240 2171 	movw	r1, #625	@ 0x271
 800ffc2:	4638      	mov	r0, r7
 800ffc4:	f7ff ff1a 	bl	800fdfc <__i2b>
 800ffc8:	2300      	movs	r3, #0
 800ffca:	f8c8 0008 	str.w	r0, [r8, #8]
 800ffce:	4604      	mov	r4, r0
 800ffd0:	6003      	str	r3, [r0, #0]
 800ffd2:	f04f 0900 	mov.w	r9, #0
 800ffd6:	07eb      	lsls	r3, r5, #31
 800ffd8:	d50a      	bpl.n	800fff0 <__pow5mult+0x84>
 800ffda:	4631      	mov	r1, r6
 800ffdc:	4622      	mov	r2, r4
 800ffde:	4638      	mov	r0, r7
 800ffe0:	f7ff ff22 	bl	800fe28 <__multiply>
 800ffe4:	4631      	mov	r1, r6
 800ffe6:	4680      	mov	r8, r0
 800ffe8:	4638      	mov	r0, r7
 800ffea:	f7ff fe09 	bl	800fc00 <_Bfree>
 800ffee:	4646      	mov	r6, r8
 800fff0:	106d      	asrs	r5, r5, #1
 800fff2:	d00b      	beq.n	801000c <__pow5mult+0xa0>
 800fff4:	6820      	ldr	r0, [r4, #0]
 800fff6:	b938      	cbnz	r0, 8010008 <__pow5mult+0x9c>
 800fff8:	4622      	mov	r2, r4
 800fffa:	4621      	mov	r1, r4
 800fffc:	4638      	mov	r0, r7
 800fffe:	f7ff ff13 	bl	800fe28 <__multiply>
 8010002:	6020      	str	r0, [r4, #0]
 8010004:	f8c0 9000 	str.w	r9, [r0]
 8010008:	4604      	mov	r4, r0
 801000a:	e7e4      	b.n	800ffd6 <__pow5mult+0x6a>
 801000c:	4630      	mov	r0, r6
 801000e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010012:	bf00      	nop
 8010014:	08011ea4 	.word	0x08011ea4
 8010018:	08011bc7 	.word	0x08011bc7
 801001c:	08011ca7 	.word	0x08011ca7

08010020 <__lshift>:
 8010020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010024:	460c      	mov	r4, r1
 8010026:	6849      	ldr	r1, [r1, #4]
 8010028:	6923      	ldr	r3, [r4, #16]
 801002a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801002e:	68a3      	ldr	r3, [r4, #8]
 8010030:	4607      	mov	r7, r0
 8010032:	4691      	mov	r9, r2
 8010034:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010038:	f108 0601 	add.w	r6, r8, #1
 801003c:	42b3      	cmp	r3, r6
 801003e:	db0b      	blt.n	8010058 <__lshift+0x38>
 8010040:	4638      	mov	r0, r7
 8010042:	f7ff fd9d 	bl	800fb80 <_Balloc>
 8010046:	4605      	mov	r5, r0
 8010048:	b948      	cbnz	r0, 801005e <__lshift+0x3e>
 801004a:	4602      	mov	r2, r0
 801004c:	4b28      	ldr	r3, [pc, #160]	@ (80100f0 <__lshift+0xd0>)
 801004e:	4829      	ldr	r0, [pc, #164]	@ (80100f4 <__lshift+0xd4>)
 8010050:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8010054:	f000 fccc 	bl	80109f0 <__assert_func>
 8010058:	3101      	adds	r1, #1
 801005a:	005b      	lsls	r3, r3, #1
 801005c:	e7ee      	b.n	801003c <__lshift+0x1c>
 801005e:	2300      	movs	r3, #0
 8010060:	f100 0114 	add.w	r1, r0, #20
 8010064:	f100 0210 	add.w	r2, r0, #16
 8010068:	4618      	mov	r0, r3
 801006a:	4553      	cmp	r3, sl
 801006c:	db33      	blt.n	80100d6 <__lshift+0xb6>
 801006e:	6920      	ldr	r0, [r4, #16]
 8010070:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8010074:	f104 0314 	add.w	r3, r4, #20
 8010078:	f019 091f 	ands.w	r9, r9, #31
 801007c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8010080:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8010084:	d02b      	beq.n	80100de <__lshift+0xbe>
 8010086:	f1c9 0e20 	rsb	lr, r9, #32
 801008a:	468a      	mov	sl, r1
 801008c:	2200      	movs	r2, #0
 801008e:	6818      	ldr	r0, [r3, #0]
 8010090:	fa00 f009 	lsl.w	r0, r0, r9
 8010094:	4310      	orrs	r0, r2
 8010096:	f84a 0b04 	str.w	r0, [sl], #4
 801009a:	f853 2b04 	ldr.w	r2, [r3], #4
 801009e:	459c      	cmp	ip, r3
 80100a0:	fa22 f20e 	lsr.w	r2, r2, lr
 80100a4:	d8f3      	bhi.n	801008e <__lshift+0x6e>
 80100a6:	ebac 0304 	sub.w	r3, ip, r4
 80100aa:	3b15      	subs	r3, #21
 80100ac:	f023 0303 	bic.w	r3, r3, #3
 80100b0:	3304      	adds	r3, #4
 80100b2:	f104 0015 	add.w	r0, r4, #21
 80100b6:	4560      	cmp	r0, ip
 80100b8:	bf88      	it	hi
 80100ba:	2304      	movhi	r3, #4
 80100bc:	50ca      	str	r2, [r1, r3]
 80100be:	b10a      	cbz	r2, 80100c4 <__lshift+0xa4>
 80100c0:	f108 0602 	add.w	r6, r8, #2
 80100c4:	3e01      	subs	r6, #1
 80100c6:	4638      	mov	r0, r7
 80100c8:	612e      	str	r6, [r5, #16]
 80100ca:	4621      	mov	r1, r4
 80100cc:	f7ff fd98 	bl	800fc00 <_Bfree>
 80100d0:	4628      	mov	r0, r5
 80100d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80100d6:	f842 0f04 	str.w	r0, [r2, #4]!
 80100da:	3301      	adds	r3, #1
 80100dc:	e7c5      	b.n	801006a <__lshift+0x4a>
 80100de:	3904      	subs	r1, #4
 80100e0:	f853 2b04 	ldr.w	r2, [r3], #4
 80100e4:	f841 2f04 	str.w	r2, [r1, #4]!
 80100e8:	459c      	cmp	ip, r3
 80100ea:	d8f9      	bhi.n	80100e0 <__lshift+0xc0>
 80100ec:	e7ea      	b.n	80100c4 <__lshift+0xa4>
 80100ee:	bf00      	nop
 80100f0:	08011c36 	.word	0x08011c36
 80100f4:	08011ca7 	.word	0x08011ca7

080100f8 <__mcmp>:
 80100f8:	690a      	ldr	r2, [r1, #16]
 80100fa:	4603      	mov	r3, r0
 80100fc:	6900      	ldr	r0, [r0, #16]
 80100fe:	1a80      	subs	r0, r0, r2
 8010100:	b530      	push	{r4, r5, lr}
 8010102:	d10e      	bne.n	8010122 <__mcmp+0x2a>
 8010104:	3314      	adds	r3, #20
 8010106:	3114      	adds	r1, #20
 8010108:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 801010c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8010110:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8010114:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8010118:	4295      	cmp	r5, r2
 801011a:	d003      	beq.n	8010124 <__mcmp+0x2c>
 801011c:	d205      	bcs.n	801012a <__mcmp+0x32>
 801011e:	f04f 30ff 	mov.w	r0, #4294967295
 8010122:	bd30      	pop	{r4, r5, pc}
 8010124:	42a3      	cmp	r3, r4
 8010126:	d3f3      	bcc.n	8010110 <__mcmp+0x18>
 8010128:	e7fb      	b.n	8010122 <__mcmp+0x2a>
 801012a:	2001      	movs	r0, #1
 801012c:	e7f9      	b.n	8010122 <__mcmp+0x2a>
	...

08010130 <__mdiff>:
 8010130:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010134:	4689      	mov	r9, r1
 8010136:	4606      	mov	r6, r0
 8010138:	4611      	mov	r1, r2
 801013a:	4648      	mov	r0, r9
 801013c:	4614      	mov	r4, r2
 801013e:	f7ff ffdb 	bl	80100f8 <__mcmp>
 8010142:	1e05      	subs	r5, r0, #0
 8010144:	d112      	bne.n	801016c <__mdiff+0x3c>
 8010146:	4629      	mov	r1, r5
 8010148:	4630      	mov	r0, r6
 801014a:	f7ff fd19 	bl	800fb80 <_Balloc>
 801014e:	4602      	mov	r2, r0
 8010150:	b928      	cbnz	r0, 801015e <__mdiff+0x2e>
 8010152:	4b3f      	ldr	r3, [pc, #252]	@ (8010250 <__mdiff+0x120>)
 8010154:	f240 2137 	movw	r1, #567	@ 0x237
 8010158:	483e      	ldr	r0, [pc, #248]	@ (8010254 <__mdiff+0x124>)
 801015a:	f000 fc49 	bl	80109f0 <__assert_func>
 801015e:	2301      	movs	r3, #1
 8010160:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8010164:	4610      	mov	r0, r2
 8010166:	b003      	add	sp, #12
 8010168:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801016c:	bfbc      	itt	lt
 801016e:	464b      	movlt	r3, r9
 8010170:	46a1      	movlt	r9, r4
 8010172:	4630      	mov	r0, r6
 8010174:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8010178:	bfba      	itte	lt
 801017a:	461c      	movlt	r4, r3
 801017c:	2501      	movlt	r5, #1
 801017e:	2500      	movge	r5, #0
 8010180:	f7ff fcfe 	bl	800fb80 <_Balloc>
 8010184:	4602      	mov	r2, r0
 8010186:	b918      	cbnz	r0, 8010190 <__mdiff+0x60>
 8010188:	4b31      	ldr	r3, [pc, #196]	@ (8010250 <__mdiff+0x120>)
 801018a:	f240 2145 	movw	r1, #581	@ 0x245
 801018e:	e7e3      	b.n	8010158 <__mdiff+0x28>
 8010190:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8010194:	6926      	ldr	r6, [r4, #16]
 8010196:	60c5      	str	r5, [r0, #12]
 8010198:	f109 0310 	add.w	r3, r9, #16
 801019c:	f109 0514 	add.w	r5, r9, #20
 80101a0:	f104 0e14 	add.w	lr, r4, #20
 80101a4:	f100 0b14 	add.w	fp, r0, #20
 80101a8:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80101ac:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80101b0:	9301      	str	r3, [sp, #4]
 80101b2:	46d9      	mov	r9, fp
 80101b4:	f04f 0c00 	mov.w	ip, #0
 80101b8:	9b01      	ldr	r3, [sp, #4]
 80101ba:	f85e 0b04 	ldr.w	r0, [lr], #4
 80101be:	f853 af04 	ldr.w	sl, [r3, #4]!
 80101c2:	9301      	str	r3, [sp, #4]
 80101c4:	fa1f f38a 	uxth.w	r3, sl
 80101c8:	4619      	mov	r1, r3
 80101ca:	b283      	uxth	r3, r0
 80101cc:	1acb      	subs	r3, r1, r3
 80101ce:	0c00      	lsrs	r0, r0, #16
 80101d0:	4463      	add	r3, ip
 80101d2:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80101d6:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80101da:	b29b      	uxth	r3, r3
 80101dc:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80101e0:	4576      	cmp	r6, lr
 80101e2:	f849 3b04 	str.w	r3, [r9], #4
 80101e6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80101ea:	d8e5      	bhi.n	80101b8 <__mdiff+0x88>
 80101ec:	1b33      	subs	r3, r6, r4
 80101ee:	3b15      	subs	r3, #21
 80101f0:	f023 0303 	bic.w	r3, r3, #3
 80101f4:	3415      	adds	r4, #21
 80101f6:	3304      	adds	r3, #4
 80101f8:	42a6      	cmp	r6, r4
 80101fa:	bf38      	it	cc
 80101fc:	2304      	movcc	r3, #4
 80101fe:	441d      	add	r5, r3
 8010200:	445b      	add	r3, fp
 8010202:	461e      	mov	r6, r3
 8010204:	462c      	mov	r4, r5
 8010206:	4544      	cmp	r4, r8
 8010208:	d30e      	bcc.n	8010228 <__mdiff+0xf8>
 801020a:	f108 0103 	add.w	r1, r8, #3
 801020e:	1b49      	subs	r1, r1, r5
 8010210:	f021 0103 	bic.w	r1, r1, #3
 8010214:	3d03      	subs	r5, #3
 8010216:	45a8      	cmp	r8, r5
 8010218:	bf38      	it	cc
 801021a:	2100      	movcc	r1, #0
 801021c:	440b      	add	r3, r1
 801021e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8010222:	b191      	cbz	r1, 801024a <__mdiff+0x11a>
 8010224:	6117      	str	r7, [r2, #16]
 8010226:	e79d      	b.n	8010164 <__mdiff+0x34>
 8010228:	f854 1b04 	ldr.w	r1, [r4], #4
 801022c:	46e6      	mov	lr, ip
 801022e:	0c08      	lsrs	r0, r1, #16
 8010230:	fa1c fc81 	uxtah	ip, ip, r1
 8010234:	4471      	add	r1, lr
 8010236:	eb00 402c 	add.w	r0, r0, ip, asr #16
 801023a:	b289      	uxth	r1, r1
 801023c:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8010240:	f846 1b04 	str.w	r1, [r6], #4
 8010244:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8010248:	e7dd      	b.n	8010206 <__mdiff+0xd6>
 801024a:	3f01      	subs	r7, #1
 801024c:	e7e7      	b.n	801021e <__mdiff+0xee>
 801024e:	bf00      	nop
 8010250:	08011c36 	.word	0x08011c36
 8010254:	08011ca7 	.word	0x08011ca7

08010258 <__ulp>:
 8010258:	b082      	sub	sp, #8
 801025a:	ed8d 0b00 	vstr	d0, [sp]
 801025e:	9a01      	ldr	r2, [sp, #4]
 8010260:	4b0f      	ldr	r3, [pc, #60]	@ (80102a0 <__ulp+0x48>)
 8010262:	4013      	ands	r3, r2
 8010264:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8010268:	2b00      	cmp	r3, #0
 801026a:	dc08      	bgt.n	801027e <__ulp+0x26>
 801026c:	425b      	negs	r3, r3
 801026e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8010272:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010276:	da04      	bge.n	8010282 <__ulp+0x2a>
 8010278:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 801027c:	4113      	asrs	r3, r2
 801027e:	2200      	movs	r2, #0
 8010280:	e008      	b.n	8010294 <__ulp+0x3c>
 8010282:	f1a2 0314 	sub.w	r3, r2, #20
 8010286:	2b1e      	cmp	r3, #30
 8010288:	bfda      	itte	le
 801028a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 801028e:	40da      	lsrle	r2, r3
 8010290:	2201      	movgt	r2, #1
 8010292:	2300      	movs	r3, #0
 8010294:	4619      	mov	r1, r3
 8010296:	4610      	mov	r0, r2
 8010298:	ec41 0b10 	vmov	d0, r0, r1
 801029c:	b002      	add	sp, #8
 801029e:	4770      	bx	lr
 80102a0:	7ff00000 	.word	0x7ff00000

080102a4 <__b2d>:
 80102a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80102a8:	6906      	ldr	r6, [r0, #16]
 80102aa:	f100 0814 	add.w	r8, r0, #20
 80102ae:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 80102b2:	1f37      	subs	r7, r6, #4
 80102b4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80102b8:	4610      	mov	r0, r2
 80102ba:	f7ff fd53 	bl	800fd64 <__hi0bits>
 80102be:	f1c0 0320 	rsb	r3, r0, #32
 80102c2:	280a      	cmp	r0, #10
 80102c4:	600b      	str	r3, [r1, #0]
 80102c6:	491b      	ldr	r1, [pc, #108]	@ (8010334 <__b2d+0x90>)
 80102c8:	dc15      	bgt.n	80102f6 <__b2d+0x52>
 80102ca:	f1c0 0c0b 	rsb	ip, r0, #11
 80102ce:	fa22 f30c 	lsr.w	r3, r2, ip
 80102d2:	45b8      	cmp	r8, r7
 80102d4:	ea43 0501 	orr.w	r5, r3, r1
 80102d8:	bf34      	ite	cc
 80102da:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80102de:	2300      	movcs	r3, #0
 80102e0:	3015      	adds	r0, #21
 80102e2:	fa02 f000 	lsl.w	r0, r2, r0
 80102e6:	fa23 f30c 	lsr.w	r3, r3, ip
 80102ea:	4303      	orrs	r3, r0
 80102ec:	461c      	mov	r4, r3
 80102ee:	ec45 4b10 	vmov	d0, r4, r5
 80102f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80102f6:	45b8      	cmp	r8, r7
 80102f8:	bf3a      	itte	cc
 80102fa:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80102fe:	f1a6 0708 	subcc.w	r7, r6, #8
 8010302:	2300      	movcs	r3, #0
 8010304:	380b      	subs	r0, #11
 8010306:	d012      	beq.n	801032e <__b2d+0x8a>
 8010308:	f1c0 0120 	rsb	r1, r0, #32
 801030c:	fa23 f401 	lsr.w	r4, r3, r1
 8010310:	4082      	lsls	r2, r0
 8010312:	4322      	orrs	r2, r4
 8010314:	4547      	cmp	r7, r8
 8010316:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 801031a:	bf8c      	ite	hi
 801031c:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8010320:	2200      	movls	r2, #0
 8010322:	4083      	lsls	r3, r0
 8010324:	40ca      	lsrs	r2, r1
 8010326:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 801032a:	4313      	orrs	r3, r2
 801032c:	e7de      	b.n	80102ec <__b2d+0x48>
 801032e:	ea42 0501 	orr.w	r5, r2, r1
 8010332:	e7db      	b.n	80102ec <__b2d+0x48>
 8010334:	3ff00000 	.word	0x3ff00000

08010338 <__d2b>:
 8010338:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801033c:	460f      	mov	r7, r1
 801033e:	2101      	movs	r1, #1
 8010340:	ec59 8b10 	vmov	r8, r9, d0
 8010344:	4616      	mov	r6, r2
 8010346:	f7ff fc1b 	bl	800fb80 <_Balloc>
 801034a:	4604      	mov	r4, r0
 801034c:	b930      	cbnz	r0, 801035c <__d2b+0x24>
 801034e:	4602      	mov	r2, r0
 8010350:	4b23      	ldr	r3, [pc, #140]	@ (80103e0 <__d2b+0xa8>)
 8010352:	4824      	ldr	r0, [pc, #144]	@ (80103e4 <__d2b+0xac>)
 8010354:	f240 310f 	movw	r1, #783	@ 0x30f
 8010358:	f000 fb4a 	bl	80109f0 <__assert_func>
 801035c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8010360:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8010364:	b10d      	cbz	r5, 801036a <__d2b+0x32>
 8010366:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801036a:	9301      	str	r3, [sp, #4]
 801036c:	f1b8 0300 	subs.w	r3, r8, #0
 8010370:	d023      	beq.n	80103ba <__d2b+0x82>
 8010372:	4668      	mov	r0, sp
 8010374:	9300      	str	r3, [sp, #0]
 8010376:	f7ff fd14 	bl	800fda2 <__lo0bits>
 801037a:	e9dd 1200 	ldrd	r1, r2, [sp]
 801037e:	b1d0      	cbz	r0, 80103b6 <__d2b+0x7e>
 8010380:	f1c0 0320 	rsb	r3, r0, #32
 8010384:	fa02 f303 	lsl.w	r3, r2, r3
 8010388:	430b      	orrs	r3, r1
 801038a:	40c2      	lsrs	r2, r0
 801038c:	6163      	str	r3, [r4, #20]
 801038e:	9201      	str	r2, [sp, #4]
 8010390:	9b01      	ldr	r3, [sp, #4]
 8010392:	61a3      	str	r3, [r4, #24]
 8010394:	2b00      	cmp	r3, #0
 8010396:	bf0c      	ite	eq
 8010398:	2201      	moveq	r2, #1
 801039a:	2202      	movne	r2, #2
 801039c:	6122      	str	r2, [r4, #16]
 801039e:	b1a5      	cbz	r5, 80103ca <__d2b+0x92>
 80103a0:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80103a4:	4405      	add	r5, r0
 80103a6:	603d      	str	r5, [r7, #0]
 80103a8:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80103ac:	6030      	str	r0, [r6, #0]
 80103ae:	4620      	mov	r0, r4
 80103b0:	b003      	add	sp, #12
 80103b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80103b6:	6161      	str	r1, [r4, #20]
 80103b8:	e7ea      	b.n	8010390 <__d2b+0x58>
 80103ba:	a801      	add	r0, sp, #4
 80103bc:	f7ff fcf1 	bl	800fda2 <__lo0bits>
 80103c0:	9b01      	ldr	r3, [sp, #4]
 80103c2:	6163      	str	r3, [r4, #20]
 80103c4:	3020      	adds	r0, #32
 80103c6:	2201      	movs	r2, #1
 80103c8:	e7e8      	b.n	801039c <__d2b+0x64>
 80103ca:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80103ce:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80103d2:	6038      	str	r0, [r7, #0]
 80103d4:	6918      	ldr	r0, [r3, #16]
 80103d6:	f7ff fcc5 	bl	800fd64 <__hi0bits>
 80103da:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80103de:	e7e5      	b.n	80103ac <__d2b+0x74>
 80103e0:	08011c36 	.word	0x08011c36
 80103e4:	08011ca7 	.word	0x08011ca7

080103e8 <__ratio>:
 80103e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ec:	b085      	sub	sp, #20
 80103ee:	e9cd 1000 	strd	r1, r0, [sp]
 80103f2:	a902      	add	r1, sp, #8
 80103f4:	f7ff ff56 	bl	80102a4 <__b2d>
 80103f8:	9800      	ldr	r0, [sp, #0]
 80103fa:	a903      	add	r1, sp, #12
 80103fc:	ec55 4b10 	vmov	r4, r5, d0
 8010400:	f7ff ff50 	bl	80102a4 <__b2d>
 8010404:	9b01      	ldr	r3, [sp, #4]
 8010406:	6919      	ldr	r1, [r3, #16]
 8010408:	9b00      	ldr	r3, [sp, #0]
 801040a:	691b      	ldr	r3, [r3, #16]
 801040c:	1ac9      	subs	r1, r1, r3
 801040e:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8010412:	1a9b      	subs	r3, r3, r2
 8010414:	ec5b ab10 	vmov	sl, fp, d0
 8010418:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 801041c:	2b00      	cmp	r3, #0
 801041e:	bfce      	itee	gt
 8010420:	462a      	movgt	r2, r5
 8010422:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8010426:	465a      	movle	r2, fp
 8010428:	462f      	mov	r7, r5
 801042a:	46d9      	mov	r9, fp
 801042c:	bfcc      	ite	gt
 801042e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8010432:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8010436:	464b      	mov	r3, r9
 8010438:	4652      	mov	r2, sl
 801043a:	4620      	mov	r0, r4
 801043c:	4639      	mov	r1, r7
 801043e:	f7f0 fa0d 	bl	800085c <__aeabi_ddiv>
 8010442:	ec41 0b10 	vmov	d0, r0, r1
 8010446:	b005      	add	sp, #20
 8010448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801044c <__copybits>:
 801044c:	3901      	subs	r1, #1
 801044e:	b570      	push	{r4, r5, r6, lr}
 8010450:	1149      	asrs	r1, r1, #5
 8010452:	6914      	ldr	r4, [r2, #16]
 8010454:	3101      	adds	r1, #1
 8010456:	f102 0314 	add.w	r3, r2, #20
 801045a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 801045e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8010462:	1f05      	subs	r5, r0, #4
 8010464:	42a3      	cmp	r3, r4
 8010466:	d30c      	bcc.n	8010482 <__copybits+0x36>
 8010468:	1aa3      	subs	r3, r4, r2
 801046a:	3b11      	subs	r3, #17
 801046c:	f023 0303 	bic.w	r3, r3, #3
 8010470:	3211      	adds	r2, #17
 8010472:	42a2      	cmp	r2, r4
 8010474:	bf88      	it	hi
 8010476:	2300      	movhi	r3, #0
 8010478:	4418      	add	r0, r3
 801047a:	2300      	movs	r3, #0
 801047c:	4288      	cmp	r0, r1
 801047e:	d305      	bcc.n	801048c <__copybits+0x40>
 8010480:	bd70      	pop	{r4, r5, r6, pc}
 8010482:	f853 6b04 	ldr.w	r6, [r3], #4
 8010486:	f845 6f04 	str.w	r6, [r5, #4]!
 801048a:	e7eb      	b.n	8010464 <__copybits+0x18>
 801048c:	f840 3b04 	str.w	r3, [r0], #4
 8010490:	e7f4      	b.n	801047c <__copybits+0x30>

08010492 <__any_on>:
 8010492:	f100 0214 	add.w	r2, r0, #20
 8010496:	6900      	ldr	r0, [r0, #16]
 8010498:	114b      	asrs	r3, r1, #5
 801049a:	4298      	cmp	r0, r3
 801049c:	b510      	push	{r4, lr}
 801049e:	db11      	blt.n	80104c4 <__any_on+0x32>
 80104a0:	dd0a      	ble.n	80104b8 <__any_on+0x26>
 80104a2:	f011 011f 	ands.w	r1, r1, #31
 80104a6:	d007      	beq.n	80104b8 <__any_on+0x26>
 80104a8:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80104ac:	fa24 f001 	lsr.w	r0, r4, r1
 80104b0:	fa00 f101 	lsl.w	r1, r0, r1
 80104b4:	428c      	cmp	r4, r1
 80104b6:	d10b      	bne.n	80104d0 <__any_on+0x3e>
 80104b8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80104bc:	4293      	cmp	r3, r2
 80104be:	d803      	bhi.n	80104c8 <__any_on+0x36>
 80104c0:	2000      	movs	r0, #0
 80104c2:	bd10      	pop	{r4, pc}
 80104c4:	4603      	mov	r3, r0
 80104c6:	e7f7      	b.n	80104b8 <__any_on+0x26>
 80104c8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80104cc:	2900      	cmp	r1, #0
 80104ce:	d0f5      	beq.n	80104bc <__any_on+0x2a>
 80104d0:	2001      	movs	r0, #1
 80104d2:	e7f6      	b.n	80104c2 <__any_on+0x30>

080104d4 <__ascii_wctomb>:
 80104d4:	4603      	mov	r3, r0
 80104d6:	4608      	mov	r0, r1
 80104d8:	b141      	cbz	r1, 80104ec <__ascii_wctomb+0x18>
 80104da:	2aff      	cmp	r2, #255	@ 0xff
 80104dc:	d904      	bls.n	80104e8 <__ascii_wctomb+0x14>
 80104de:	228a      	movs	r2, #138	@ 0x8a
 80104e0:	601a      	str	r2, [r3, #0]
 80104e2:	f04f 30ff 	mov.w	r0, #4294967295
 80104e6:	4770      	bx	lr
 80104e8:	700a      	strb	r2, [r1, #0]
 80104ea:	2001      	movs	r0, #1
 80104ec:	4770      	bx	lr

080104ee <__sfputc_r>:
 80104ee:	6893      	ldr	r3, [r2, #8]
 80104f0:	3b01      	subs	r3, #1
 80104f2:	2b00      	cmp	r3, #0
 80104f4:	b410      	push	{r4}
 80104f6:	6093      	str	r3, [r2, #8]
 80104f8:	da08      	bge.n	801050c <__sfputc_r+0x1e>
 80104fa:	6994      	ldr	r4, [r2, #24]
 80104fc:	42a3      	cmp	r3, r4
 80104fe:	db01      	blt.n	8010504 <__sfputc_r+0x16>
 8010500:	290a      	cmp	r1, #10
 8010502:	d103      	bne.n	801050c <__sfputc_r+0x1e>
 8010504:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010508:	f7fd bf35 	b.w	800e376 <__swbuf_r>
 801050c:	6813      	ldr	r3, [r2, #0]
 801050e:	1c58      	adds	r0, r3, #1
 8010510:	6010      	str	r0, [r2, #0]
 8010512:	7019      	strb	r1, [r3, #0]
 8010514:	4608      	mov	r0, r1
 8010516:	f85d 4b04 	ldr.w	r4, [sp], #4
 801051a:	4770      	bx	lr

0801051c <__sfputs_r>:
 801051c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801051e:	4606      	mov	r6, r0
 8010520:	460f      	mov	r7, r1
 8010522:	4614      	mov	r4, r2
 8010524:	18d5      	adds	r5, r2, r3
 8010526:	42ac      	cmp	r4, r5
 8010528:	d101      	bne.n	801052e <__sfputs_r+0x12>
 801052a:	2000      	movs	r0, #0
 801052c:	e007      	b.n	801053e <__sfputs_r+0x22>
 801052e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8010532:	463a      	mov	r2, r7
 8010534:	4630      	mov	r0, r6
 8010536:	f7ff ffda 	bl	80104ee <__sfputc_r>
 801053a:	1c43      	adds	r3, r0, #1
 801053c:	d1f3      	bne.n	8010526 <__sfputs_r+0xa>
 801053e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08010540 <_vfiprintf_r>:
 8010540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010544:	460d      	mov	r5, r1
 8010546:	b09d      	sub	sp, #116	@ 0x74
 8010548:	4614      	mov	r4, r2
 801054a:	4698      	mov	r8, r3
 801054c:	4606      	mov	r6, r0
 801054e:	b118      	cbz	r0, 8010558 <_vfiprintf_r+0x18>
 8010550:	6a03      	ldr	r3, [r0, #32]
 8010552:	b90b      	cbnz	r3, 8010558 <_vfiprintf_r+0x18>
 8010554:	f7fd fe26 	bl	800e1a4 <__sinit>
 8010558:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801055a:	07d9      	lsls	r1, r3, #31
 801055c:	d405      	bmi.n	801056a <_vfiprintf_r+0x2a>
 801055e:	89ab      	ldrh	r3, [r5, #12]
 8010560:	059a      	lsls	r2, r3, #22
 8010562:	d402      	bmi.n	801056a <_vfiprintf_r+0x2a>
 8010564:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010566:	f7fe f84e 	bl	800e606 <__retarget_lock_acquire_recursive>
 801056a:	89ab      	ldrh	r3, [r5, #12]
 801056c:	071b      	lsls	r3, r3, #28
 801056e:	d501      	bpl.n	8010574 <_vfiprintf_r+0x34>
 8010570:	692b      	ldr	r3, [r5, #16]
 8010572:	b99b      	cbnz	r3, 801059c <_vfiprintf_r+0x5c>
 8010574:	4629      	mov	r1, r5
 8010576:	4630      	mov	r0, r6
 8010578:	f7fd ff3c 	bl	800e3f4 <__swsetup_r>
 801057c:	b170      	cbz	r0, 801059c <_vfiprintf_r+0x5c>
 801057e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8010580:	07dc      	lsls	r4, r3, #31
 8010582:	d504      	bpl.n	801058e <_vfiprintf_r+0x4e>
 8010584:	f04f 30ff 	mov.w	r0, #4294967295
 8010588:	b01d      	add	sp, #116	@ 0x74
 801058a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801058e:	89ab      	ldrh	r3, [r5, #12]
 8010590:	0598      	lsls	r0, r3, #22
 8010592:	d4f7      	bmi.n	8010584 <_vfiprintf_r+0x44>
 8010594:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8010596:	f7fe f837 	bl	800e608 <__retarget_lock_release_recursive>
 801059a:	e7f3      	b.n	8010584 <_vfiprintf_r+0x44>
 801059c:	2300      	movs	r3, #0
 801059e:	9309      	str	r3, [sp, #36]	@ 0x24
 80105a0:	2320      	movs	r3, #32
 80105a2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80105a6:	f8cd 800c 	str.w	r8, [sp, #12]
 80105aa:	2330      	movs	r3, #48	@ 0x30
 80105ac:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801075c <_vfiprintf_r+0x21c>
 80105b0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80105b4:	f04f 0901 	mov.w	r9, #1
 80105b8:	4623      	mov	r3, r4
 80105ba:	469a      	mov	sl, r3
 80105bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80105c0:	b10a      	cbz	r2, 80105c6 <_vfiprintf_r+0x86>
 80105c2:	2a25      	cmp	r2, #37	@ 0x25
 80105c4:	d1f9      	bne.n	80105ba <_vfiprintf_r+0x7a>
 80105c6:	ebba 0b04 	subs.w	fp, sl, r4
 80105ca:	d00b      	beq.n	80105e4 <_vfiprintf_r+0xa4>
 80105cc:	465b      	mov	r3, fp
 80105ce:	4622      	mov	r2, r4
 80105d0:	4629      	mov	r1, r5
 80105d2:	4630      	mov	r0, r6
 80105d4:	f7ff ffa2 	bl	801051c <__sfputs_r>
 80105d8:	3001      	adds	r0, #1
 80105da:	f000 80a7 	beq.w	801072c <_vfiprintf_r+0x1ec>
 80105de:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80105e0:	445a      	add	r2, fp
 80105e2:	9209      	str	r2, [sp, #36]	@ 0x24
 80105e4:	f89a 3000 	ldrb.w	r3, [sl]
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	f000 809f 	beq.w	801072c <_vfiprintf_r+0x1ec>
 80105ee:	2300      	movs	r3, #0
 80105f0:	f04f 32ff 	mov.w	r2, #4294967295
 80105f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80105f8:	f10a 0a01 	add.w	sl, sl, #1
 80105fc:	9304      	str	r3, [sp, #16]
 80105fe:	9307      	str	r3, [sp, #28]
 8010600:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8010604:	931a      	str	r3, [sp, #104]	@ 0x68
 8010606:	4654      	mov	r4, sl
 8010608:	2205      	movs	r2, #5
 801060a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801060e:	4853      	ldr	r0, [pc, #332]	@ (801075c <_vfiprintf_r+0x21c>)
 8010610:	f7ef fde6 	bl	80001e0 <memchr>
 8010614:	9a04      	ldr	r2, [sp, #16]
 8010616:	b9d8      	cbnz	r0, 8010650 <_vfiprintf_r+0x110>
 8010618:	06d1      	lsls	r1, r2, #27
 801061a:	bf44      	itt	mi
 801061c:	2320      	movmi	r3, #32
 801061e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8010622:	0713      	lsls	r3, r2, #28
 8010624:	bf44      	itt	mi
 8010626:	232b      	movmi	r3, #43	@ 0x2b
 8010628:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801062c:	f89a 3000 	ldrb.w	r3, [sl]
 8010630:	2b2a      	cmp	r3, #42	@ 0x2a
 8010632:	d015      	beq.n	8010660 <_vfiprintf_r+0x120>
 8010634:	9a07      	ldr	r2, [sp, #28]
 8010636:	4654      	mov	r4, sl
 8010638:	2000      	movs	r0, #0
 801063a:	f04f 0c0a 	mov.w	ip, #10
 801063e:	4621      	mov	r1, r4
 8010640:	f811 3b01 	ldrb.w	r3, [r1], #1
 8010644:	3b30      	subs	r3, #48	@ 0x30
 8010646:	2b09      	cmp	r3, #9
 8010648:	d94b      	bls.n	80106e2 <_vfiprintf_r+0x1a2>
 801064a:	b1b0      	cbz	r0, 801067a <_vfiprintf_r+0x13a>
 801064c:	9207      	str	r2, [sp, #28]
 801064e:	e014      	b.n	801067a <_vfiprintf_r+0x13a>
 8010650:	eba0 0308 	sub.w	r3, r0, r8
 8010654:	fa09 f303 	lsl.w	r3, r9, r3
 8010658:	4313      	orrs	r3, r2
 801065a:	9304      	str	r3, [sp, #16]
 801065c:	46a2      	mov	sl, r4
 801065e:	e7d2      	b.n	8010606 <_vfiprintf_r+0xc6>
 8010660:	9b03      	ldr	r3, [sp, #12]
 8010662:	1d19      	adds	r1, r3, #4
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	9103      	str	r1, [sp, #12]
 8010668:	2b00      	cmp	r3, #0
 801066a:	bfbb      	ittet	lt
 801066c:	425b      	neglt	r3, r3
 801066e:	f042 0202 	orrlt.w	r2, r2, #2
 8010672:	9307      	strge	r3, [sp, #28]
 8010674:	9307      	strlt	r3, [sp, #28]
 8010676:	bfb8      	it	lt
 8010678:	9204      	strlt	r2, [sp, #16]
 801067a:	7823      	ldrb	r3, [r4, #0]
 801067c:	2b2e      	cmp	r3, #46	@ 0x2e
 801067e:	d10a      	bne.n	8010696 <_vfiprintf_r+0x156>
 8010680:	7863      	ldrb	r3, [r4, #1]
 8010682:	2b2a      	cmp	r3, #42	@ 0x2a
 8010684:	d132      	bne.n	80106ec <_vfiprintf_r+0x1ac>
 8010686:	9b03      	ldr	r3, [sp, #12]
 8010688:	1d1a      	adds	r2, r3, #4
 801068a:	681b      	ldr	r3, [r3, #0]
 801068c:	9203      	str	r2, [sp, #12]
 801068e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8010692:	3402      	adds	r4, #2
 8010694:	9305      	str	r3, [sp, #20]
 8010696:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801076c <_vfiprintf_r+0x22c>
 801069a:	7821      	ldrb	r1, [r4, #0]
 801069c:	2203      	movs	r2, #3
 801069e:	4650      	mov	r0, sl
 80106a0:	f7ef fd9e 	bl	80001e0 <memchr>
 80106a4:	b138      	cbz	r0, 80106b6 <_vfiprintf_r+0x176>
 80106a6:	9b04      	ldr	r3, [sp, #16]
 80106a8:	eba0 000a 	sub.w	r0, r0, sl
 80106ac:	2240      	movs	r2, #64	@ 0x40
 80106ae:	4082      	lsls	r2, r0
 80106b0:	4313      	orrs	r3, r2
 80106b2:	3401      	adds	r4, #1
 80106b4:	9304      	str	r3, [sp, #16]
 80106b6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80106ba:	4829      	ldr	r0, [pc, #164]	@ (8010760 <_vfiprintf_r+0x220>)
 80106bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80106c0:	2206      	movs	r2, #6
 80106c2:	f7ef fd8d 	bl	80001e0 <memchr>
 80106c6:	2800      	cmp	r0, #0
 80106c8:	d03f      	beq.n	801074a <_vfiprintf_r+0x20a>
 80106ca:	4b26      	ldr	r3, [pc, #152]	@ (8010764 <_vfiprintf_r+0x224>)
 80106cc:	bb1b      	cbnz	r3, 8010716 <_vfiprintf_r+0x1d6>
 80106ce:	9b03      	ldr	r3, [sp, #12]
 80106d0:	3307      	adds	r3, #7
 80106d2:	f023 0307 	bic.w	r3, r3, #7
 80106d6:	3308      	adds	r3, #8
 80106d8:	9303      	str	r3, [sp, #12]
 80106da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80106dc:	443b      	add	r3, r7
 80106de:	9309      	str	r3, [sp, #36]	@ 0x24
 80106e0:	e76a      	b.n	80105b8 <_vfiprintf_r+0x78>
 80106e2:	fb0c 3202 	mla	r2, ip, r2, r3
 80106e6:	460c      	mov	r4, r1
 80106e8:	2001      	movs	r0, #1
 80106ea:	e7a8      	b.n	801063e <_vfiprintf_r+0xfe>
 80106ec:	2300      	movs	r3, #0
 80106ee:	3401      	adds	r4, #1
 80106f0:	9305      	str	r3, [sp, #20]
 80106f2:	4619      	mov	r1, r3
 80106f4:	f04f 0c0a 	mov.w	ip, #10
 80106f8:	4620      	mov	r0, r4
 80106fa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80106fe:	3a30      	subs	r2, #48	@ 0x30
 8010700:	2a09      	cmp	r2, #9
 8010702:	d903      	bls.n	801070c <_vfiprintf_r+0x1cc>
 8010704:	2b00      	cmp	r3, #0
 8010706:	d0c6      	beq.n	8010696 <_vfiprintf_r+0x156>
 8010708:	9105      	str	r1, [sp, #20]
 801070a:	e7c4      	b.n	8010696 <_vfiprintf_r+0x156>
 801070c:	fb0c 2101 	mla	r1, ip, r1, r2
 8010710:	4604      	mov	r4, r0
 8010712:	2301      	movs	r3, #1
 8010714:	e7f0      	b.n	80106f8 <_vfiprintf_r+0x1b8>
 8010716:	ab03      	add	r3, sp, #12
 8010718:	9300      	str	r3, [sp, #0]
 801071a:	462a      	mov	r2, r5
 801071c:	4b12      	ldr	r3, [pc, #72]	@ (8010768 <_vfiprintf_r+0x228>)
 801071e:	a904      	add	r1, sp, #16
 8010720:	4630      	mov	r0, r6
 8010722:	f7fd f8fd 	bl	800d920 <_printf_float>
 8010726:	4607      	mov	r7, r0
 8010728:	1c78      	adds	r0, r7, #1
 801072a:	d1d6      	bne.n	80106da <_vfiprintf_r+0x19a>
 801072c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801072e:	07d9      	lsls	r1, r3, #31
 8010730:	d405      	bmi.n	801073e <_vfiprintf_r+0x1fe>
 8010732:	89ab      	ldrh	r3, [r5, #12]
 8010734:	059a      	lsls	r2, r3, #22
 8010736:	d402      	bmi.n	801073e <_vfiprintf_r+0x1fe>
 8010738:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801073a:	f7fd ff65 	bl	800e608 <__retarget_lock_release_recursive>
 801073e:	89ab      	ldrh	r3, [r5, #12]
 8010740:	065b      	lsls	r3, r3, #25
 8010742:	f53f af1f 	bmi.w	8010584 <_vfiprintf_r+0x44>
 8010746:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8010748:	e71e      	b.n	8010588 <_vfiprintf_r+0x48>
 801074a:	ab03      	add	r3, sp, #12
 801074c:	9300      	str	r3, [sp, #0]
 801074e:	462a      	mov	r2, r5
 8010750:	4b05      	ldr	r3, [pc, #20]	@ (8010768 <_vfiprintf_r+0x228>)
 8010752:	a904      	add	r1, sp, #16
 8010754:	4630      	mov	r0, r6
 8010756:	f7fd fb7b 	bl	800de50 <_printf_i>
 801075a:	e7e4      	b.n	8010726 <_vfiprintf_r+0x1e6>
 801075c:	08011d00 	.word	0x08011d00
 8010760:	08011d0a 	.word	0x08011d0a
 8010764:	0800d921 	.word	0x0800d921
 8010768:	0801051d 	.word	0x0801051d
 801076c:	08011d06 	.word	0x08011d06

08010770 <__sflush_r>:
 8010770:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8010774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010778:	0716      	lsls	r6, r2, #28
 801077a:	4605      	mov	r5, r0
 801077c:	460c      	mov	r4, r1
 801077e:	d454      	bmi.n	801082a <__sflush_r+0xba>
 8010780:	684b      	ldr	r3, [r1, #4]
 8010782:	2b00      	cmp	r3, #0
 8010784:	dc02      	bgt.n	801078c <__sflush_r+0x1c>
 8010786:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8010788:	2b00      	cmp	r3, #0
 801078a:	dd48      	ble.n	801081e <__sflush_r+0xae>
 801078c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801078e:	2e00      	cmp	r6, #0
 8010790:	d045      	beq.n	801081e <__sflush_r+0xae>
 8010792:	2300      	movs	r3, #0
 8010794:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8010798:	682f      	ldr	r7, [r5, #0]
 801079a:	6a21      	ldr	r1, [r4, #32]
 801079c:	602b      	str	r3, [r5, #0]
 801079e:	d030      	beq.n	8010802 <__sflush_r+0x92>
 80107a0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80107a2:	89a3      	ldrh	r3, [r4, #12]
 80107a4:	0759      	lsls	r1, r3, #29
 80107a6:	d505      	bpl.n	80107b4 <__sflush_r+0x44>
 80107a8:	6863      	ldr	r3, [r4, #4]
 80107aa:	1ad2      	subs	r2, r2, r3
 80107ac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80107ae:	b10b      	cbz	r3, 80107b4 <__sflush_r+0x44>
 80107b0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80107b2:	1ad2      	subs	r2, r2, r3
 80107b4:	2300      	movs	r3, #0
 80107b6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80107b8:	6a21      	ldr	r1, [r4, #32]
 80107ba:	4628      	mov	r0, r5
 80107bc:	47b0      	blx	r6
 80107be:	1c43      	adds	r3, r0, #1
 80107c0:	89a3      	ldrh	r3, [r4, #12]
 80107c2:	d106      	bne.n	80107d2 <__sflush_r+0x62>
 80107c4:	6829      	ldr	r1, [r5, #0]
 80107c6:	291d      	cmp	r1, #29
 80107c8:	d82b      	bhi.n	8010822 <__sflush_r+0xb2>
 80107ca:	4a2a      	ldr	r2, [pc, #168]	@ (8010874 <__sflush_r+0x104>)
 80107cc:	40ca      	lsrs	r2, r1
 80107ce:	07d6      	lsls	r6, r2, #31
 80107d0:	d527      	bpl.n	8010822 <__sflush_r+0xb2>
 80107d2:	2200      	movs	r2, #0
 80107d4:	6062      	str	r2, [r4, #4]
 80107d6:	04d9      	lsls	r1, r3, #19
 80107d8:	6922      	ldr	r2, [r4, #16]
 80107da:	6022      	str	r2, [r4, #0]
 80107dc:	d504      	bpl.n	80107e8 <__sflush_r+0x78>
 80107de:	1c42      	adds	r2, r0, #1
 80107e0:	d101      	bne.n	80107e6 <__sflush_r+0x76>
 80107e2:	682b      	ldr	r3, [r5, #0]
 80107e4:	b903      	cbnz	r3, 80107e8 <__sflush_r+0x78>
 80107e6:	6560      	str	r0, [r4, #84]	@ 0x54
 80107e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80107ea:	602f      	str	r7, [r5, #0]
 80107ec:	b1b9      	cbz	r1, 801081e <__sflush_r+0xae>
 80107ee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80107f2:	4299      	cmp	r1, r3
 80107f4:	d002      	beq.n	80107fc <__sflush_r+0x8c>
 80107f6:	4628      	mov	r0, r5
 80107f8:	f7fe fd76 	bl	800f2e8 <_free_r>
 80107fc:	2300      	movs	r3, #0
 80107fe:	6363      	str	r3, [r4, #52]	@ 0x34
 8010800:	e00d      	b.n	801081e <__sflush_r+0xae>
 8010802:	2301      	movs	r3, #1
 8010804:	4628      	mov	r0, r5
 8010806:	47b0      	blx	r6
 8010808:	4602      	mov	r2, r0
 801080a:	1c50      	adds	r0, r2, #1
 801080c:	d1c9      	bne.n	80107a2 <__sflush_r+0x32>
 801080e:	682b      	ldr	r3, [r5, #0]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d0c6      	beq.n	80107a2 <__sflush_r+0x32>
 8010814:	2b1d      	cmp	r3, #29
 8010816:	d001      	beq.n	801081c <__sflush_r+0xac>
 8010818:	2b16      	cmp	r3, #22
 801081a:	d11e      	bne.n	801085a <__sflush_r+0xea>
 801081c:	602f      	str	r7, [r5, #0]
 801081e:	2000      	movs	r0, #0
 8010820:	e022      	b.n	8010868 <__sflush_r+0xf8>
 8010822:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010826:	b21b      	sxth	r3, r3
 8010828:	e01b      	b.n	8010862 <__sflush_r+0xf2>
 801082a:	690f      	ldr	r7, [r1, #16]
 801082c:	2f00      	cmp	r7, #0
 801082e:	d0f6      	beq.n	801081e <__sflush_r+0xae>
 8010830:	0793      	lsls	r3, r2, #30
 8010832:	680e      	ldr	r6, [r1, #0]
 8010834:	bf08      	it	eq
 8010836:	694b      	ldreq	r3, [r1, #20]
 8010838:	600f      	str	r7, [r1, #0]
 801083a:	bf18      	it	ne
 801083c:	2300      	movne	r3, #0
 801083e:	eba6 0807 	sub.w	r8, r6, r7
 8010842:	608b      	str	r3, [r1, #8]
 8010844:	f1b8 0f00 	cmp.w	r8, #0
 8010848:	dde9      	ble.n	801081e <__sflush_r+0xae>
 801084a:	6a21      	ldr	r1, [r4, #32]
 801084c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801084e:	4643      	mov	r3, r8
 8010850:	463a      	mov	r2, r7
 8010852:	4628      	mov	r0, r5
 8010854:	47b0      	blx	r6
 8010856:	2800      	cmp	r0, #0
 8010858:	dc08      	bgt.n	801086c <__sflush_r+0xfc>
 801085a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801085e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010862:	81a3      	strh	r3, [r4, #12]
 8010864:	f04f 30ff 	mov.w	r0, #4294967295
 8010868:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801086c:	4407      	add	r7, r0
 801086e:	eba8 0800 	sub.w	r8, r8, r0
 8010872:	e7e7      	b.n	8010844 <__sflush_r+0xd4>
 8010874:	20400001 	.word	0x20400001

08010878 <_fflush_r>:
 8010878:	b538      	push	{r3, r4, r5, lr}
 801087a:	690b      	ldr	r3, [r1, #16]
 801087c:	4605      	mov	r5, r0
 801087e:	460c      	mov	r4, r1
 8010880:	b913      	cbnz	r3, 8010888 <_fflush_r+0x10>
 8010882:	2500      	movs	r5, #0
 8010884:	4628      	mov	r0, r5
 8010886:	bd38      	pop	{r3, r4, r5, pc}
 8010888:	b118      	cbz	r0, 8010892 <_fflush_r+0x1a>
 801088a:	6a03      	ldr	r3, [r0, #32]
 801088c:	b90b      	cbnz	r3, 8010892 <_fflush_r+0x1a>
 801088e:	f7fd fc89 	bl	800e1a4 <__sinit>
 8010892:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d0f3      	beq.n	8010882 <_fflush_r+0xa>
 801089a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801089c:	07d0      	lsls	r0, r2, #31
 801089e:	d404      	bmi.n	80108aa <_fflush_r+0x32>
 80108a0:	0599      	lsls	r1, r3, #22
 80108a2:	d402      	bmi.n	80108aa <_fflush_r+0x32>
 80108a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80108a6:	f7fd feae 	bl	800e606 <__retarget_lock_acquire_recursive>
 80108aa:	4628      	mov	r0, r5
 80108ac:	4621      	mov	r1, r4
 80108ae:	f7ff ff5f 	bl	8010770 <__sflush_r>
 80108b2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80108b4:	07da      	lsls	r2, r3, #31
 80108b6:	4605      	mov	r5, r0
 80108b8:	d4e4      	bmi.n	8010884 <_fflush_r+0xc>
 80108ba:	89a3      	ldrh	r3, [r4, #12]
 80108bc:	059b      	lsls	r3, r3, #22
 80108be:	d4e1      	bmi.n	8010884 <_fflush_r+0xc>
 80108c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80108c2:	f7fd fea1 	bl	800e608 <__retarget_lock_release_recursive>
 80108c6:	e7dd      	b.n	8010884 <_fflush_r+0xc>

080108c8 <__swhatbuf_r>:
 80108c8:	b570      	push	{r4, r5, r6, lr}
 80108ca:	460c      	mov	r4, r1
 80108cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80108d0:	2900      	cmp	r1, #0
 80108d2:	b096      	sub	sp, #88	@ 0x58
 80108d4:	4615      	mov	r5, r2
 80108d6:	461e      	mov	r6, r3
 80108d8:	da0d      	bge.n	80108f6 <__swhatbuf_r+0x2e>
 80108da:	89a3      	ldrh	r3, [r4, #12]
 80108dc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80108e0:	f04f 0100 	mov.w	r1, #0
 80108e4:	bf14      	ite	ne
 80108e6:	2340      	movne	r3, #64	@ 0x40
 80108e8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80108ec:	2000      	movs	r0, #0
 80108ee:	6031      	str	r1, [r6, #0]
 80108f0:	602b      	str	r3, [r5, #0]
 80108f2:	b016      	add	sp, #88	@ 0x58
 80108f4:	bd70      	pop	{r4, r5, r6, pc}
 80108f6:	466a      	mov	r2, sp
 80108f8:	f000 f848 	bl	801098c <_fstat_r>
 80108fc:	2800      	cmp	r0, #0
 80108fe:	dbec      	blt.n	80108da <__swhatbuf_r+0x12>
 8010900:	9901      	ldr	r1, [sp, #4]
 8010902:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8010906:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801090a:	4259      	negs	r1, r3
 801090c:	4159      	adcs	r1, r3
 801090e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010912:	e7eb      	b.n	80108ec <__swhatbuf_r+0x24>

08010914 <__smakebuf_r>:
 8010914:	898b      	ldrh	r3, [r1, #12]
 8010916:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010918:	079d      	lsls	r5, r3, #30
 801091a:	4606      	mov	r6, r0
 801091c:	460c      	mov	r4, r1
 801091e:	d507      	bpl.n	8010930 <__smakebuf_r+0x1c>
 8010920:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8010924:	6023      	str	r3, [r4, #0]
 8010926:	6123      	str	r3, [r4, #16]
 8010928:	2301      	movs	r3, #1
 801092a:	6163      	str	r3, [r4, #20]
 801092c:	b003      	add	sp, #12
 801092e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010930:	ab01      	add	r3, sp, #4
 8010932:	466a      	mov	r2, sp
 8010934:	f7ff ffc8 	bl	80108c8 <__swhatbuf_r>
 8010938:	9f00      	ldr	r7, [sp, #0]
 801093a:	4605      	mov	r5, r0
 801093c:	4639      	mov	r1, r7
 801093e:	4630      	mov	r0, r6
 8010940:	f7ff f880 	bl	800fa44 <_malloc_r>
 8010944:	b948      	cbnz	r0, 801095a <__smakebuf_r+0x46>
 8010946:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801094a:	059a      	lsls	r2, r3, #22
 801094c:	d4ee      	bmi.n	801092c <__smakebuf_r+0x18>
 801094e:	f023 0303 	bic.w	r3, r3, #3
 8010952:	f043 0302 	orr.w	r3, r3, #2
 8010956:	81a3      	strh	r3, [r4, #12]
 8010958:	e7e2      	b.n	8010920 <__smakebuf_r+0xc>
 801095a:	89a3      	ldrh	r3, [r4, #12]
 801095c:	6020      	str	r0, [r4, #0]
 801095e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8010962:	81a3      	strh	r3, [r4, #12]
 8010964:	9b01      	ldr	r3, [sp, #4]
 8010966:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801096a:	b15b      	cbz	r3, 8010984 <__smakebuf_r+0x70>
 801096c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8010970:	4630      	mov	r0, r6
 8010972:	f000 f81d 	bl	80109b0 <_isatty_r>
 8010976:	b128      	cbz	r0, 8010984 <__smakebuf_r+0x70>
 8010978:	89a3      	ldrh	r3, [r4, #12]
 801097a:	f023 0303 	bic.w	r3, r3, #3
 801097e:	f043 0301 	orr.w	r3, r3, #1
 8010982:	81a3      	strh	r3, [r4, #12]
 8010984:	89a3      	ldrh	r3, [r4, #12]
 8010986:	431d      	orrs	r5, r3
 8010988:	81a5      	strh	r5, [r4, #12]
 801098a:	e7cf      	b.n	801092c <__smakebuf_r+0x18>

0801098c <_fstat_r>:
 801098c:	b538      	push	{r3, r4, r5, lr}
 801098e:	4d07      	ldr	r5, [pc, #28]	@ (80109ac <_fstat_r+0x20>)
 8010990:	2300      	movs	r3, #0
 8010992:	4604      	mov	r4, r0
 8010994:	4608      	mov	r0, r1
 8010996:	4611      	mov	r1, r2
 8010998:	602b      	str	r3, [r5, #0]
 801099a:	f7f3 fa57 	bl	8003e4c <_fstat>
 801099e:	1c43      	adds	r3, r0, #1
 80109a0:	d102      	bne.n	80109a8 <_fstat_r+0x1c>
 80109a2:	682b      	ldr	r3, [r5, #0]
 80109a4:	b103      	cbz	r3, 80109a8 <_fstat_r+0x1c>
 80109a6:	6023      	str	r3, [r4, #0]
 80109a8:	bd38      	pop	{r3, r4, r5, pc}
 80109aa:	bf00      	nop
 80109ac:	200026b0 	.word	0x200026b0

080109b0 <_isatty_r>:
 80109b0:	b538      	push	{r3, r4, r5, lr}
 80109b2:	4d06      	ldr	r5, [pc, #24]	@ (80109cc <_isatty_r+0x1c>)
 80109b4:	2300      	movs	r3, #0
 80109b6:	4604      	mov	r4, r0
 80109b8:	4608      	mov	r0, r1
 80109ba:	602b      	str	r3, [r5, #0]
 80109bc:	f7f3 fa56 	bl	8003e6c <_isatty>
 80109c0:	1c43      	adds	r3, r0, #1
 80109c2:	d102      	bne.n	80109ca <_isatty_r+0x1a>
 80109c4:	682b      	ldr	r3, [r5, #0]
 80109c6:	b103      	cbz	r3, 80109ca <_isatty_r+0x1a>
 80109c8:	6023      	str	r3, [r4, #0]
 80109ca:	bd38      	pop	{r3, r4, r5, pc}
 80109cc:	200026b0 	.word	0x200026b0

080109d0 <_sbrk_r>:
 80109d0:	b538      	push	{r3, r4, r5, lr}
 80109d2:	4d06      	ldr	r5, [pc, #24]	@ (80109ec <_sbrk_r+0x1c>)
 80109d4:	2300      	movs	r3, #0
 80109d6:	4604      	mov	r4, r0
 80109d8:	4608      	mov	r0, r1
 80109da:	602b      	str	r3, [r5, #0]
 80109dc:	f7f3 fa5e 	bl	8003e9c <_sbrk>
 80109e0:	1c43      	adds	r3, r0, #1
 80109e2:	d102      	bne.n	80109ea <_sbrk_r+0x1a>
 80109e4:	682b      	ldr	r3, [r5, #0]
 80109e6:	b103      	cbz	r3, 80109ea <_sbrk_r+0x1a>
 80109e8:	6023      	str	r3, [r4, #0]
 80109ea:	bd38      	pop	{r3, r4, r5, pc}
 80109ec:	200026b0 	.word	0x200026b0

080109f0 <__assert_func>:
 80109f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80109f2:	4614      	mov	r4, r2
 80109f4:	461a      	mov	r2, r3
 80109f6:	4b09      	ldr	r3, [pc, #36]	@ (8010a1c <__assert_func+0x2c>)
 80109f8:	681b      	ldr	r3, [r3, #0]
 80109fa:	4605      	mov	r5, r0
 80109fc:	68d8      	ldr	r0, [r3, #12]
 80109fe:	b14c      	cbz	r4, 8010a14 <__assert_func+0x24>
 8010a00:	4b07      	ldr	r3, [pc, #28]	@ (8010a20 <__assert_func+0x30>)
 8010a02:	9100      	str	r1, [sp, #0]
 8010a04:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8010a08:	4906      	ldr	r1, [pc, #24]	@ (8010a24 <__assert_func+0x34>)
 8010a0a:	462b      	mov	r3, r5
 8010a0c:	f000 f822 	bl	8010a54 <fiprintf>
 8010a10:	f000 f832 	bl	8010a78 <abort>
 8010a14:	4b04      	ldr	r3, [pc, #16]	@ (8010a28 <__assert_func+0x38>)
 8010a16:	461c      	mov	r4, r3
 8010a18:	e7f3      	b.n	8010a02 <__assert_func+0x12>
 8010a1a:	bf00      	nop
 8010a1c:	20000274 	.word	0x20000274
 8010a20:	08011d11 	.word	0x08011d11
 8010a24:	08011d1e 	.word	0x08011d1e
 8010a28:	08011d4c 	.word	0x08011d4c

08010a2c <_calloc_r>:
 8010a2c:	b570      	push	{r4, r5, r6, lr}
 8010a2e:	fba1 5402 	umull	r5, r4, r1, r2
 8010a32:	b934      	cbnz	r4, 8010a42 <_calloc_r+0x16>
 8010a34:	4629      	mov	r1, r5
 8010a36:	f7ff f805 	bl	800fa44 <_malloc_r>
 8010a3a:	4606      	mov	r6, r0
 8010a3c:	b928      	cbnz	r0, 8010a4a <_calloc_r+0x1e>
 8010a3e:	4630      	mov	r0, r6
 8010a40:	bd70      	pop	{r4, r5, r6, pc}
 8010a42:	220c      	movs	r2, #12
 8010a44:	6002      	str	r2, [r0, #0]
 8010a46:	2600      	movs	r6, #0
 8010a48:	e7f9      	b.n	8010a3e <_calloc_r+0x12>
 8010a4a:	462a      	mov	r2, r5
 8010a4c:	4621      	mov	r1, r4
 8010a4e:	f7fd fd27 	bl	800e4a0 <memset>
 8010a52:	e7f4      	b.n	8010a3e <_calloc_r+0x12>

08010a54 <fiprintf>:
 8010a54:	b40e      	push	{r1, r2, r3}
 8010a56:	b503      	push	{r0, r1, lr}
 8010a58:	4601      	mov	r1, r0
 8010a5a:	ab03      	add	r3, sp, #12
 8010a5c:	4805      	ldr	r0, [pc, #20]	@ (8010a74 <fiprintf+0x20>)
 8010a5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8010a62:	6800      	ldr	r0, [r0, #0]
 8010a64:	9301      	str	r3, [sp, #4]
 8010a66:	f7ff fd6b 	bl	8010540 <_vfiprintf_r>
 8010a6a:	b002      	add	sp, #8
 8010a6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a70:	b003      	add	sp, #12
 8010a72:	4770      	bx	lr
 8010a74:	20000274 	.word	0x20000274

08010a78 <abort>:
 8010a78:	b508      	push	{r3, lr}
 8010a7a:	2006      	movs	r0, #6
 8010a7c:	f000 f82c 	bl	8010ad8 <raise>
 8010a80:	2001      	movs	r0, #1
 8010a82:	f7f3 f9af 	bl	8003de4 <_exit>

08010a86 <_raise_r>:
 8010a86:	291f      	cmp	r1, #31
 8010a88:	b538      	push	{r3, r4, r5, lr}
 8010a8a:	4605      	mov	r5, r0
 8010a8c:	460c      	mov	r4, r1
 8010a8e:	d904      	bls.n	8010a9a <_raise_r+0x14>
 8010a90:	2316      	movs	r3, #22
 8010a92:	6003      	str	r3, [r0, #0]
 8010a94:	f04f 30ff 	mov.w	r0, #4294967295
 8010a98:	bd38      	pop	{r3, r4, r5, pc}
 8010a9a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8010a9c:	b112      	cbz	r2, 8010aa4 <_raise_r+0x1e>
 8010a9e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8010aa2:	b94b      	cbnz	r3, 8010ab8 <_raise_r+0x32>
 8010aa4:	4628      	mov	r0, r5
 8010aa6:	f000 f831 	bl	8010b0c <_getpid_r>
 8010aaa:	4622      	mov	r2, r4
 8010aac:	4601      	mov	r1, r0
 8010aae:	4628      	mov	r0, r5
 8010ab0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8010ab4:	f000 b818 	b.w	8010ae8 <_kill_r>
 8010ab8:	2b01      	cmp	r3, #1
 8010aba:	d00a      	beq.n	8010ad2 <_raise_r+0x4c>
 8010abc:	1c59      	adds	r1, r3, #1
 8010abe:	d103      	bne.n	8010ac8 <_raise_r+0x42>
 8010ac0:	2316      	movs	r3, #22
 8010ac2:	6003      	str	r3, [r0, #0]
 8010ac4:	2001      	movs	r0, #1
 8010ac6:	e7e7      	b.n	8010a98 <_raise_r+0x12>
 8010ac8:	2100      	movs	r1, #0
 8010aca:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8010ace:	4620      	mov	r0, r4
 8010ad0:	4798      	blx	r3
 8010ad2:	2000      	movs	r0, #0
 8010ad4:	e7e0      	b.n	8010a98 <_raise_r+0x12>
	...

08010ad8 <raise>:
 8010ad8:	4b02      	ldr	r3, [pc, #8]	@ (8010ae4 <raise+0xc>)
 8010ada:	4601      	mov	r1, r0
 8010adc:	6818      	ldr	r0, [r3, #0]
 8010ade:	f7ff bfd2 	b.w	8010a86 <_raise_r>
 8010ae2:	bf00      	nop
 8010ae4:	20000274 	.word	0x20000274

08010ae8 <_kill_r>:
 8010ae8:	b538      	push	{r3, r4, r5, lr}
 8010aea:	4d07      	ldr	r5, [pc, #28]	@ (8010b08 <_kill_r+0x20>)
 8010aec:	2300      	movs	r3, #0
 8010aee:	4604      	mov	r4, r0
 8010af0:	4608      	mov	r0, r1
 8010af2:	4611      	mov	r1, r2
 8010af4:	602b      	str	r3, [r5, #0]
 8010af6:	f7f3 f965 	bl	8003dc4 <_kill>
 8010afa:	1c43      	adds	r3, r0, #1
 8010afc:	d102      	bne.n	8010b04 <_kill_r+0x1c>
 8010afe:	682b      	ldr	r3, [r5, #0]
 8010b00:	b103      	cbz	r3, 8010b04 <_kill_r+0x1c>
 8010b02:	6023      	str	r3, [r4, #0]
 8010b04:	bd38      	pop	{r3, r4, r5, pc}
 8010b06:	bf00      	nop
 8010b08:	200026b0 	.word	0x200026b0

08010b0c <_getpid_r>:
 8010b0c:	f7f3 b952 	b.w	8003db4 <_getpid>

08010b10 <atan2f>:
 8010b10:	f000 b884 	b.w	8010c1c <__ieee754_atan2f>

08010b14 <powf>:
 8010b14:	b508      	push	{r3, lr}
 8010b16:	ed2d 8b04 	vpush	{d8-d9}
 8010b1a:	eeb0 8a60 	vmov.f32	s16, s1
 8010b1e:	eeb0 9a40 	vmov.f32	s18, s0
 8010b22:	f000 f91b 	bl	8010d5c <__ieee754_powf>
 8010b26:	eeb4 8a48 	vcmp.f32	s16, s16
 8010b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b2e:	eef0 8a40 	vmov.f32	s17, s0
 8010b32:	d63e      	bvs.n	8010bb2 <powf+0x9e>
 8010b34:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8010b38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b3c:	d112      	bne.n	8010b64 <powf+0x50>
 8010b3e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8010b42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b46:	d039      	beq.n	8010bbc <powf+0xa8>
 8010b48:	eeb0 0a48 	vmov.f32	s0, s16
 8010b4c:	f000 f858 	bl	8010c00 <finitef>
 8010b50:	b378      	cbz	r0, 8010bb2 <powf+0x9e>
 8010b52:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010b56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b5a:	d52a      	bpl.n	8010bb2 <powf+0x9e>
 8010b5c:	f7fd fd28 	bl	800e5b0 <__errno>
 8010b60:	2322      	movs	r3, #34	@ 0x22
 8010b62:	e014      	b.n	8010b8e <powf+0x7a>
 8010b64:	f000 f84c 	bl	8010c00 <finitef>
 8010b68:	b998      	cbnz	r0, 8010b92 <powf+0x7e>
 8010b6a:	eeb0 0a49 	vmov.f32	s0, s18
 8010b6e:	f000 f847 	bl	8010c00 <finitef>
 8010b72:	b170      	cbz	r0, 8010b92 <powf+0x7e>
 8010b74:	eeb0 0a48 	vmov.f32	s0, s16
 8010b78:	f000 f842 	bl	8010c00 <finitef>
 8010b7c:	b148      	cbz	r0, 8010b92 <powf+0x7e>
 8010b7e:	eef4 8a68 	vcmp.f32	s17, s17
 8010b82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b86:	d7e9      	bvc.n	8010b5c <powf+0x48>
 8010b88:	f7fd fd12 	bl	800e5b0 <__errno>
 8010b8c:	2321      	movs	r3, #33	@ 0x21
 8010b8e:	6003      	str	r3, [r0, #0]
 8010b90:	e00f      	b.n	8010bb2 <powf+0x9e>
 8010b92:	eef5 8a40 	vcmp.f32	s17, #0.0
 8010b96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010b9a:	d10a      	bne.n	8010bb2 <powf+0x9e>
 8010b9c:	eeb0 0a49 	vmov.f32	s0, s18
 8010ba0:	f000 f82e 	bl	8010c00 <finitef>
 8010ba4:	b128      	cbz	r0, 8010bb2 <powf+0x9e>
 8010ba6:	eeb0 0a48 	vmov.f32	s0, s16
 8010baa:	f000 f829 	bl	8010c00 <finitef>
 8010bae:	2800      	cmp	r0, #0
 8010bb0:	d1d4      	bne.n	8010b5c <powf+0x48>
 8010bb2:	eeb0 0a68 	vmov.f32	s0, s17
 8010bb6:	ecbd 8b04 	vpop	{d8-d9}
 8010bba:	bd08      	pop	{r3, pc}
 8010bbc:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 8010bc0:	e7f7      	b.n	8010bb2 <powf+0x9e>
	...

08010bc4 <sqrtf>:
 8010bc4:	b508      	push	{r3, lr}
 8010bc6:	ed2d 8b02 	vpush	{d8}
 8010bca:	eeb0 8a40 	vmov.f32	s16, s0
 8010bce:	f000 f821 	bl	8010c14 <__ieee754_sqrtf>
 8010bd2:	eeb4 8a48 	vcmp.f32	s16, s16
 8010bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010bda:	d60c      	bvs.n	8010bf6 <sqrtf+0x32>
 8010bdc:	eddf 8a07 	vldr	s17, [pc, #28]	@ 8010bfc <sqrtf+0x38>
 8010be0:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8010be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010be8:	d505      	bpl.n	8010bf6 <sqrtf+0x32>
 8010bea:	f7fd fce1 	bl	800e5b0 <__errno>
 8010bee:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8010bf2:	2321      	movs	r3, #33	@ 0x21
 8010bf4:	6003      	str	r3, [r0, #0]
 8010bf6:	ecbd 8b02 	vpop	{d8}
 8010bfa:	bd08      	pop	{r3, pc}
 8010bfc:	00000000 	.word	0x00000000

08010c00 <finitef>:
 8010c00:	ee10 3a10 	vmov	r3, s0
 8010c04:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8010c08:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8010c0c:	bfac      	ite	ge
 8010c0e:	2000      	movge	r0, #0
 8010c10:	2001      	movlt	r0, #1
 8010c12:	4770      	bx	lr

08010c14 <__ieee754_sqrtf>:
 8010c14:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8010c18:	4770      	bx	lr
	...

08010c1c <__ieee754_atan2f>:
 8010c1c:	ee10 2a90 	vmov	r2, s1
 8010c20:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8010c24:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010c28:	b510      	push	{r4, lr}
 8010c2a:	eef0 7a40 	vmov.f32	s15, s0
 8010c2e:	d806      	bhi.n	8010c3e <__ieee754_atan2f+0x22>
 8010c30:	ee10 0a10 	vmov	r0, s0
 8010c34:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8010c38:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010c3c:	d904      	bls.n	8010c48 <__ieee754_atan2f+0x2c>
 8010c3e:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8010c42:	eeb0 0a67 	vmov.f32	s0, s15
 8010c46:	bd10      	pop	{r4, pc}
 8010c48:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8010c4c:	d103      	bne.n	8010c56 <__ieee754_atan2f+0x3a>
 8010c4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010c52:	f000 bb51 	b.w	80112f8 <atanf>
 8010c56:	1794      	asrs	r4, r2, #30
 8010c58:	f004 0402 	and.w	r4, r4, #2
 8010c5c:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8010c60:	b943      	cbnz	r3, 8010c74 <__ieee754_atan2f+0x58>
 8010c62:	2c02      	cmp	r4, #2
 8010c64:	d05e      	beq.n	8010d24 <__ieee754_atan2f+0x108>
 8010c66:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010d38 <__ieee754_atan2f+0x11c>
 8010c6a:	2c03      	cmp	r4, #3
 8010c6c:	bf08      	it	eq
 8010c6e:	eef0 7a47 	vmoveq.f32	s15, s14
 8010c72:	e7e6      	b.n	8010c42 <__ieee754_atan2f+0x26>
 8010c74:	b941      	cbnz	r1, 8010c88 <__ieee754_atan2f+0x6c>
 8010c76:	eddf 7a31 	vldr	s15, [pc, #196]	@ 8010d3c <__ieee754_atan2f+0x120>
 8010c7a:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010d40 <__ieee754_atan2f+0x124>
 8010c7e:	2800      	cmp	r0, #0
 8010c80:	bfa8      	it	ge
 8010c82:	eef0 7a47 	vmovge.f32	s15, s14
 8010c86:	e7dc      	b.n	8010c42 <__ieee754_atan2f+0x26>
 8010c88:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8010c8c:	d110      	bne.n	8010cb0 <__ieee754_atan2f+0x94>
 8010c8e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010c92:	f104 34ff 	add.w	r4, r4, #4294967295
 8010c96:	d107      	bne.n	8010ca8 <__ieee754_atan2f+0x8c>
 8010c98:	2c02      	cmp	r4, #2
 8010c9a:	d846      	bhi.n	8010d2a <__ieee754_atan2f+0x10e>
 8010c9c:	4b29      	ldr	r3, [pc, #164]	@ (8010d44 <__ieee754_atan2f+0x128>)
 8010c9e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8010ca2:	edd3 7a00 	vldr	s15, [r3]
 8010ca6:	e7cc      	b.n	8010c42 <__ieee754_atan2f+0x26>
 8010ca8:	2c02      	cmp	r4, #2
 8010caa:	d841      	bhi.n	8010d30 <__ieee754_atan2f+0x114>
 8010cac:	4b26      	ldr	r3, [pc, #152]	@ (8010d48 <__ieee754_atan2f+0x12c>)
 8010cae:	e7f6      	b.n	8010c9e <__ieee754_atan2f+0x82>
 8010cb0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8010cb4:	d0df      	beq.n	8010c76 <__ieee754_atan2f+0x5a>
 8010cb6:	1a5b      	subs	r3, r3, r1
 8010cb8:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 8010cbc:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8010cc0:	da1a      	bge.n	8010cf8 <__ieee754_atan2f+0xdc>
 8010cc2:	2a00      	cmp	r2, #0
 8010cc4:	da01      	bge.n	8010cca <__ieee754_atan2f+0xae>
 8010cc6:	313c      	adds	r1, #60	@ 0x3c
 8010cc8:	db19      	blt.n	8010cfe <__ieee754_atan2f+0xe2>
 8010cca:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 8010cce:	f000 fbe7 	bl	80114a0 <fabsf>
 8010cd2:	f000 fb11 	bl	80112f8 <atanf>
 8010cd6:	eef0 7a40 	vmov.f32	s15, s0
 8010cda:	2c01      	cmp	r4, #1
 8010cdc:	d012      	beq.n	8010d04 <__ieee754_atan2f+0xe8>
 8010cde:	2c02      	cmp	r4, #2
 8010ce0:	d017      	beq.n	8010d12 <__ieee754_atan2f+0xf6>
 8010ce2:	2c00      	cmp	r4, #0
 8010ce4:	d0ad      	beq.n	8010c42 <__ieee754_atan2f+0x26>
 8010ce6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8010d4c <__ieee754_atan2f+0x130>
 8010cea:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010cee:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8010d50 <__ieee754_atan2f+0x134>
 8010cf2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010cf6:	e7a4      	b.n	8010c42 <__ieee754_atan2f+0x26>
 8010cf8:	eddf 7a11 	vldr	s15, [pc, #68]	@ 8010d40 <__ieee754_atan2f+0x124>
 8010cfc:	e7ed      	b.n	8010cda <__ieee754_atan2f+0xbe>
 8010cfe:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8010d54 <__ieee754_atan2f+0x138>
 8010d02:	e7ea      	b.n	8010cda <__ieee754_atan2f+0xbe>
 8010d04:	ee17 3a90 	vmov	r3, s15
 8010d08:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8010d0c:	ee07 3a90 	vmov	s15, r3
 8010d10:	e797      	b.n	8010c42 <__ieee754_atan2f+0x26>
 8010d12:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8010d4c <__ieee754_atan2f+0x130>
 8010d16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010d1a:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8010d50 <__ieee754_atan2f+0x134>
 8010d1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8010d22:	e78e      	b.n	8010c42 <__ieee754_atan2f+0x26>
 8010d24:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8010d50 <__ieee754_atan2f+0x134>
 8010d28:	e78b      	b.n	8010c42 <__ieee754_atan2f+0x26>
 8010d2a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8010d58 <__ieee754_atan2f+0x13c>
 8010d2e:	e788      	b.n	8010c42 <__ieee754_atan2f+0x26>
 8010d30:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8010d54 <__ieee754_atan2f+0x138>
 8010d34:	e785      	b.n	8010c42 <__ieee754_atan2f+0x26>
 8010d36:	bf00      	nop
 8010d38:	c0490fdb 	.word	0xc0490fdb
 8010d3c:	bfc90fdb 	.word	0xbfc90fdb
 8010d40:	3fc90fdb 	.word	0x3fc90fdb
 8010d44:	08011fac 	.word	0x08011fac
 8010d48:	08011fa0 	.word	0x08011fa0
 8010d4c:	33bbbd2e 	.word	0x33bbbd2e
 8010d50:	40490fdb 	.word	0x40490fdb
 8010d54:	00000000 	.word	0x00000000
 8010d58:	3f490fdb 	.word	0x3f490fdb

08010d5c <__ieee754_powf>:
 8010d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010d60:	ee10 4a90 	vmov	r4, s1
 8010d64:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 8010d68:	ed2d 8b02 	vpush	{d8}
 8010d6c:	ee10 6a10 	vmov	r6, s0
 8010d70:	eeb0 8a40 	vmov.f32	s16, s0
 8010d74:	eef0 8a60 	vmov.f32	s17, s1
 8010d78:	d10c      	bne.n	8010d94 <__ieee754_powf+0x38>
 8010d7a:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 8010d7e:	0076      	lsls	r6, r6, #1
 8010d80:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 8010d84:	f240 8274 	bls.w	8011270 <__ieee754_powf+0x514>
 8010d88:	ee38 0a28 	vadd.f32	s0, s16, s17
 8010d8c:	ecbd 8b02 	vpop	{d8}
 8010d90:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d94:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 8010d98:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 8010d9c:	d802      	bhi.n	8010da4 <__ieee754_powf+0x48>
 8010d9e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010da2:	d908      	bls.n	8010db6 <__ieee754_powf+0x5a>
 8010da4:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 8010da8:	d1ee      	bne.n	8010d88 <__ieee754_powf+0x2c>
 8010daa:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 8010dae:	0064      	lsls	r4, r4, #1
 8010db0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8010db4:	e7e6      	b.n	8010d84 <__ieee754_powf+0x28>
 8010db6:	2e00      	cmp	r6, #0
 8010db8:	da1f      	bge.n	8010dfa <__ieee754_powf+0x9e>
 8010dba:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 8010dbe:	f080 8260 	bcs.w	8011282 <__ieee754_powf+0x526>
 8010dc2:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010dc6:	d32f      	bcc.n	8010e28 <__ieee754_powf+0xcc>
 8010dc8:	ea4f 53e9 	mov.w	r3, r9, asr #23
 8010dcc:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8010dd0:	fa49 f503 	asr.w	r5, r9, r3
 8010dd4:	fa05 f303 	lsl.w	r3, r5, r3
 8010dd8:	454b      	cmp	r3, r9
 8010dda:	d123      	bne.n	8010e24 <__ieee754_powf+0xc8>
 8010ddc:	f005 0501 	and.w	r5, r5, #1
 8010de0:	f1c5 0502 	rsb	r5, r5, #2
 8010de4:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 8010de8:	d11f      	bne.n	8010e2a <__ieee754_powf+0xce>
 8010dea:	2c00      	cmp	r4, #0
 8010dec:	f280 8246 	bge.w	801127c <__ieee754_powf+0x520>
 8010df0:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010df4:	ee87 0a88 	vdiv.f32	s0, s15, s16
 8010df8:	e7c8      	b.n	8010d8c <__ieee754_powf+0x30>
 8010dfa:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8010dfe:	d111      	bne.n	8010e24 <__ieee754_powf+0xc8>
 8010e00:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 8010e04:	f000 8234 	beq.w	8011270 <__ieee754_powf+0x514>
 8010e08:	d906      	bls.n	8010e18 <__ieee754_powf+0xbc>
 8010e0a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 8011120 <__ieee754_powf+0x3c4>
 8010e0e:	2c00      	cmp	r4, #0
 8010e10:	bfa8      	it	ge
 8010e12:	eeb0 0a68 	vmovge.f32	s0, s17
 8010e16:	e7b9      	b.n	8010d8c <__ieee754_powf+0x30>
 8010e18:	2c00      	cmp	r4, #0
 8010e1a:	f280 822c 	bge.w	8011276 <__ieee754_powf+0x51a>
 8010e1e:	eeb1 0a68 	vneg.f32	s0, s17
 8010e22:	e7b3      	b.n	8010d8c <__ieee754_powf+0x30>
 8010e24:	2500      	movs	r5, #0
 8010e26:	e7dd      	b.n	8010de4 <__ieee754_powf+0x88>
 8010e28:	2500      	movs	r5, #0
 8010e2a:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 8010e2e:	d102      	bne.n	8010e36 <__ieee754_powf+0xda>
 8010e30:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010e34:	e7aa      	b.n	8010d8c <__ieee754_powf+0x30>
 8010e36:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 8010e3a:	f040 8227 	bne.w	801128c <__ieee754_powf+0x530>
 8010e3e:	2e00      	cmp	r6, #0
 8010e40:	f2c0 8224 	blt.w	801128c <__ieee754_powf+0x530>
 8010e44:	eeb0 0a48 	vmov.f32	s0, s16
 8010e48:	ecbd 8b02 	vpop	{d8}
 8010e4c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e50:	f7ff bee0 	b.w	8010c14 <__ieee754_sqrtf>
 8010e54:	2d01      	cmp	r5, #1
 8010e56:	d199      	bne.n	8010d8c <__ieee754_powf+0x30>
 8010e58:	eeb1 0a40 	vneg.f32	s0, s0
 8010e5c:	e796      	b.n	8010d8c <__ieee754_powf+0x30>
 8010e5e:	0ff0      	lsrs	r0, r6, #31
 8010e60:	3801      	subs	r0, #1
 8010e62:	ea55 0300 	orrs.w	r3, r5, r0
 8010e66:	d104      	bne.n	8010e72 <__ieee754_powf+0x116>
 8010e68:	ee38 8a48 	vsub.f32	s16, s16, s16
 8010e6c:	ee88 0a08 	vdiv.f32	s0, s16, s16
 8010e70:	e78c      	b.n	8010d8c <__ieee754_powf+0x30>
 8010e72:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 8010e76:	d96d      	bls.n	8010f54 <__ieee754_powf+0x1f8>
 8010e78:	4baa      	ldr	r3, [pc, #680]	@ (8011124 <__ieee754_powf+0x3c8>)
 8010e7a:	4598      	cmp	r8, r3
 8010e7c:	d808      	bhi.n	8010e90 <__ieee754_powf+0x134>
 8010e7e:	2c00      	cmp	r4, #0
 8010e80:	da0b      	bge.n	8010e9a <__ieee754_powf+0x13e>
 8010e82:	2000      	movs	r0, #0
 8010e84:	ecbd 8b02 	vpop	{d8}
 8010e88:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010e8c:	f000 bb96 	b.w	80115bc <__math_oflowf>
 8010e90:	4ba5      	ldr	r3, [pc, #660]	@ (8011128 <__ieee754_powf+0x3cc>)
 8010e92:	4598      	cmp	r8, r3
 8010e94:	d908      	bls.n	8010ea8 <__ieee754_powf+0x14c>
 8010e96:	2c00      	cmp	r4, #0
 8010e98:	dcf3      	bgt.n	8010e82 <__ieee754_powf+0x126>
 8010e9a:	2000      	movs	r0, #0
 8010e9c:	ecbd 8b02 	vpop	{d8}
 8010ea0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010ea4:	f000 bb84 	b.w	80115b0 <__math_uflowf>
 8010ea8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8010eac:	ee30 0a67 	vsub.f32	s0, s0, s15
 8010eb0:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 801112c <__ieee754_powf+0x3d0>
 8010eb4:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 8010eb8:	eee0 6a67 	vfms.f32	s13, s0, s15
 8010ebc:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010ec0:	eee6 7ac0 	vfms.f32	s15, s13, s0
 8010ec4:	ee20 7a00 	vmul.f32	s14, s0, s0
 8010ec8:	eddf 6a99 	vldr	s13, [pc, #612]	@ 8011130 <__ieee754_powf+0x3d4>
 8010ecc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8010ed0:	eddf 7a98 	vldr	s15, [pc, #608]	@ 8011134 <__ieee754_powf+0x3d8>
 8010ed4:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8010ed8:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 8011138 <__ieee754_powf+0x3dc>
 8010edc:	eee0 7a07 	vfma.f32	s15, s0, s14
 8010ee0:	eeb0 7a67 	vmov.f32	s14, s15
 8010ee4:	eea0 7a26 	vfma.f32	s14, s0, s13
 8010ee8:	ee17 3a10 	vmov	r3, s14
 8010eec:	f36f 030b 	bfc	r3, #0, #12
 8010ef0:	ee07 3a10 	vmov	s14, r3
 8010ef4:	eeb0 6a47 	vmov.f32	s12, s14
 8010ef8:	eea0 6a66 	vfms.f32	s12, s0, s13
 8010efc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 8010f00:	3d01      	subs	r5, #1
 8010f02:	4305      	orrs	r5, r0
 8010f04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010f08:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 8010f0c:	f36f 040b 	bfc	r4, #0, #12
 8010f10:	bf18      	it	ne
 8010f12:	eeb0 8a66 	vmovne.f32	s16, s13
 8010f16:	ee06 4a90 	vmov	s13, r4
 8010f1a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8010f1e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 8010f22:	ee67 7a26 	vmul.f32	s15, s14, s13
 8010f26:	eee6 0a07 	vfma.f32	s1, s12, s14
 8010f2a:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8010f2e:	ee17 1a10 	vmov	r1, s14
 8010f32:	2900      	cmp	r1, #0
 8010f34:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8010f38:	f340 80dd 	ble.w	80110f6 <__ieee754_powf+0x39a>
 8010f3c:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 8010f40:	f240 80ca 	bls.w	80110d8 <__ieee754_powf+0x37c>
 8010f44:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010f4c:	bf4c      	ite	mi
 8010f4e:	2001      	movmi	r0, #1
 8010f50:	2000      	movpl	r0, #0
 8010f52:	e797      	b.n	8010e84 <__ieee754_powf+0x128>
 8010f54:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 8010f58:	bf01      	itttt	eq
 8010f5a:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 801113c <__ieee754_powf+0x3e0>
 8010f5e:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8010f62:	f06f 0317 	mvneq.w	r3, #23
 8010f66:	ee17 7a90 	vmoveq	r7, s15
 8010f6a:	ea4f 52e7 	mov.w	r2, r7, asr #23
 8010f6e:	bf18      	it	ne
 8010f70:	2300      	movne	r3, #0
 8010f72:	3a7f      	subs	r2, #127	@ 0x7f
 8010f74:	441a      	add	r2, r3
 8010f76:	4b72      	ldr	r3, [pc, #456]	@ (8011140 <__ieee754_powf+0x3e4>)
 8010f78:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8010f7c:	429f      	cmp	r7, r3
 8010f7e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 8010f82:	dd06      	ble.n	8010f92 <__ieee754_powf+0x236>
 8010f84:	4b6f      	ldr	r3, [pc, #444]	@ (8011144 <__ieee754_powf+0x3e8>)
 8010f86:	429f      	cmp	r7, r3
 8010f88:	f340 80a4 	ble.w	80110d4 <__ieee754_powf+0x378>
 8010f8c:	3201      	adds	r2, #1
 8010f8e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 8010f92:	2600      	movs	r6, #0
 8010f94:	4b6c      	ldr	r3, [pc, #432]	@ (8011148 <__ieee754_powf+0x3ec>)
 8010f96:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8010f9a:	ee07 1a10 	vmov	s14, r1
 8010f9e:	edd3 5a00 	vldr	s11, [r3]
 8010fa2:	4b6a      	ldr	r3, [pc, #424]	@ (801114c <__ieee754_powf+0x3f0>)
 8010fa4:	ee75 7a87 	vadd.f32	s15, s11, s14
 8010fa8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010fac:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8010fb0:	1049      	asrs	r1, r1, #1
 8010fb2:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 8010fb6:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 8010fba:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 8010fbe:	ee37 6a65 	vsub.f32	s12, s14, s11
 8010fc2:	ee07 1a90 	vmov	s15, r1
 8010fc6:	ee26 5a24 	vmul.f32	s10, s12, s9
 8010fca:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8010fce:	ee15 7a10 	vmov	r7, s10
 8010fd2:	401f      	ands	r7, r3
 8010fd4:	ee06 7a90 	vmov	s13, r7
 8010fd8:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8010fdc:	ee37 7a65 	vsub.f32	s14, s14, s11
 8010fe0:	ee65 7a05 	vmul.f32	s15, s10, s10
 8010fe4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8010fe8:	eddf 5a59 	vldr	s11, [pc, #356]	@ 8011150 <__ieee754_powf+0x3f4>
 8010fec:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 8011154 <__ieee754_powf+0x3f8>
 8010ff0:	eee7 5a87 	vfma.f32	s11, s15, s14
 8010ff4:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 8011158 <__ieee754_powf+0x3fc>
 8010ff8:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8010ffc:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 801112c <__ieee754_powf+0x3d0>
 8011000:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011004:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 801115c <__ieee754_powf+0x400>
 8011008:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801100c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 8011160 <__ieee754_powf+0x404>
 8011010:	ee26 6a24 	vmul.f32	s12, s12, s9
 8011014:	eee7 5a27 	vfma.f32	s11, s14, s15
 8011018:	ee35 7a26 	vadd.f32	s14, s10, s13
 801101c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8011020:	ee27 7a06 	vmul.f32	s14, s14, s12
 8011024:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 8011028:	eea4 7aa5 	vfma.f32	s14, s9, s11
 801102c:	eef0 5a67 	vmov.f32	s11, s15
 8011030:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8011034:	ee75 5a87 	vadd.f32	s11, s11, s14
 8011038:	ee15 1a90 	vmov	r1, s11
 801103c:	4019      	ands	r1, r3
 801103e:	ee05 1a90 	vmov	s11, r1
 8011042:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8011046:	eee6 7ae6 	vfms.f32	s15, s13, s13
 801104a:	ee77 7a67 	vsub.f32	s15, s14, s15
 801104e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8011052:	eee6 7a25 	vfma.f32	s15, s12, s11
 8011056:	eeb0 6a67 	vmov.f32	s12, s15
 801105a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801105e:	ee16 1a10 	vmov	r1, s12
 8011062:	4019      	ands	r1, r3
 8011064:	ee06 1a10 	vmov	s12, r1
 8011068:	eeb0 7a46 	vmov.f32	s14, s12
 801106c:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8011070:	493c      	ldr	r1, [pc, #240]	@ (8011164 <__ieee754_powf+0x408>)
 8011072:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 8011076:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801107a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 8011168 <__ieee754_powf+0x40c>
 801107e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 801116c <__ieee754_powf+0x410>
 8011082:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011086:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 8011170 <__ieee754_powf+0x414>
 801108a:	eee6 7a07 	vfma.f32	s15, s12, s14
 801108e:	ed91 7a00 	vldr	s14, [r1]
 8011092:	ee77 7a87 	vadd.f32	s15, s15, s14
 8011096:	ee07 2a10 	vmov	s14, r2
 801109a:	4a36      	ldr	r2, [pc, #216]	@ (8011174 <__ieee754_powf+0x418>)
 801109c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80110a0:	eeb0 7a67 	vmov.f32	s14, s15
 80110a4:	eea6 7a25 	vfma.f32	s14, s12, s11
 80110a8:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 80110ac:	ed92 5a00 	vldr	s10, [r2]
 80110b0:	ee37 7a05 	vadd.f32	s14, s14, s10
 80110b4:	ee37 7a26 	vadd.f32	s14, s14, s13
 80110b8:	ee17 2a10 	vmov	r2, s14
 80110bc:	401a      	ands	r2, r3
 80110be:	ee07 2a10 	vmov	s14, r2
 80110c2:	ee77 6a66 	vsub.f32	s13, s14, s13
 80110c6:	ee76 6ac5 	vsub.f32	s13, s13, s10
 80110ca:	eee6 6a65 	vfms.f32	s13, s12, s11
 80110ce:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80110d2:	e715      	b.n	8010f00 <__ieee754_powf+0x1a4>
 80110d4:	2601      	movs	r6, #1
 80110d6:	e75d      	b.n	8010f94 <__ieee754_powf+0x238>
 80110d8:	d152      	bne.n	8011180 <__ieee754_powf+0x424>
 80110da:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8011178 <__ieee754_powf+0x41c>
 80110de:	ee37 7a67 	vsub.f32	s14, s14, s15
 80110e2:	ee70 6aa6 	vadd.f32	s13, s1, s13
 80110e6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80110ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ee:	f73f af29 	bgt.w	8010f44 <__ieee754_powf+0x1e8>
 80110f2:	2386      	movs	r3, #134	@ 0x86
 80110f4:	e048      	b.n	8011188 <__ieee754_powf+0x42c>
 80110f6:	4a21      	ldr	r2, [pc, #132]	@ (801117c <__ieee754_powf+0x420>)
 80110f8:	4293      	cmp	r3, r2
 80110fa:	d907      	bls.n	801110c <__ieee754_powf+0x3b0>
 80110fc:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011104:	bf4c      	ite	mi
 8011106:	2001      	movmi	r0, #1
 8011108:	2000      	movpl	r0, #0
 801110a:	e6c7      	b.n	8010e9c <__ieee754_powf+0x140>
 801110c:	d138      	bne.n	8011180 <__ieee754_powf+0x424>
 801110e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011112:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8011116:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801111a:	dbea      	blt.n	80110f2 <__ieee754_powf+0x396>
 801111c:	e7ee      	b.n	80110fc <__ieee754_powf+0x3a0>
 801111e:	bf00      	nop
 8011120:	00000000 	.word	0x00000000
 8011124:	3f7ffff3 	.word	0x3f7ffff3
 8011128:	3f800007 	.word	0x3f800007
 801112c:	3eaaaaab 	.word	0x3eaaaaab
 8011130:	3fb8aa00 	.word	0x3fb8aa00
 8011134:	3fb8aa3b 	.word	0x3fb8aa3b
 8011138:	36eca570 	.word	0x36eca570
 801113c:	4b800000 	.word	0x4b800000
 8011140:	001cc471 	.word	0x001cc471
 8011144:	005db3d6 	.word	0x005db3d6
 8011148:	08011fc8 	.word	0x08011fc8
 801114c:	fffff000 	.word	0xfffff000
 8011150:	3e6c3255 	.word	0x3e6c3255
 8011154:	3e53f142 	.word	0x3e53f142
 8011158:	3e8ba305 	.word	0x3e8ba305
 801115c:	3edb6db7 	.word	0x3edb6db7
 8011160:	3f19999a 	.word	0x3f19999a
 8011164:	08011fb8 	.word	0x08011fb8
 8011168:	3f76384f 	.word	0x3f76384f
 801116c:	3f763800 	.word	0x3f763800
 8011170:	369dc3a0 	.word	0x369dc3a0
 8011174:	08011fc0 	.word	0x08011fc0
 8011178:	3338aa3c 	.word	0x3338aa3c
 801117c:	43160000 	.word	0x43160000
 8011180:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 8011184:	d96f      	bls.n	8011266 <__ieee754_powf+0x50a>
 8011186:	15db      	asrs	r3, r3, #23
 8011188:	3b7e      	subs	r3, #126	@ 0x7e
 801118a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 801118e:	4118      	asrs	r0, r3
 8011190:	4408      	add	r0, r1
 8011192:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8011196:	4a4e      	ldr	r2, [pc, #312]	@ (80112d0 <__ieee754_powf+0x574>)
 8011198:	3b7f      	subs	r3, #127	@ 0x7f
 801119a:	411a      	asrs	r2, r3
 801119c:	4002      	ands	r2, r0
 801119e:	ee07 2a10 	vmov	s14, r2
 80111a2:	f3c0 0016 	ubfx	r0, r0, #0, #23
 80111a6:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80111aa:	f1c3 0317 	rsb	r3, r3, #23
 80111ae:	4118      	asrs	r0, r3
 80111b0:	2900      	cmp	r1, #0
 80111b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80111b6:	bfb8      	it	lt
 80111b8:	4240      	neglt	r0, r0
 80111ba:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80111be:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 80112d4 <__ieee754_powf+0x578>
 80111c2:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 80112d8 <__ieee754_powf+0x57c>
 80111c6:	ee16 3a90 	vmov	r3, s13
 80111ca:	f36f 030b 	bfc	r3, #0, #12
 80111ce:	ee06 3a90 	vmov	s13, r3
 80111d2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80111d6:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80111da:	ee70 0ae7 	vsub.f32	s1, s1, s15
 80111de:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 80112dc <__ieee754_powf+0x580>
 80111e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80111e6:	eee0 7a87 	vfma.f32	s15, s1, s14
 80111ea:	eeb0 7a67 	vmov.f32	s14, s15
 80111ee:	eea6 7a86 	vfma.f32	s14, s13, s12
 80111f2:	eef0 5a47 	vmov.f32	s11, s14
 80111f6:	eee6 5ac6 	vfms.f32	s11, s13, s12
 80111fa:	ee67 6a07 	vmul.f32	s13, s14, s14
 80111fe:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8011202:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 80112e0 <__ieee754_powf+0x584>
 8011206:	eddf 5a37 	vldr	s11, [pc, #220]	@ 80112e4 <__ieee754_powf+0x588>
 801120a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 801120e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80112e8 <__ieee754_powf+0x58c>
 8011212:	eee6 5a26 	vfma.f32	s11, s12, s13
 8011216:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 80112ec <__ieee754_powf+0x590>
 801121a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 801121e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80112f0 <__ieee754_powf+0x594>
 8011222:	eee6 5a26 	vfma.f32	s11, s12, s13
 8011226:	eeb0 6a47 	vmov.f32	s12, s14
 801122a:	eea5 6ae6 	vfms.f32	s12, s11, s13
 801122e:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 8011232:	ee67 5a06 	vmul.f32	s11, s14, s12
 8011236:	ee36 6a66 	vsub.f32	s12, s12, s13
 801123a:	eee7 7a27 	vfma.f32	s15, s14, s15
 801123e:	eec5 6a86 	vdiv.f32	s13, s11, s12
 8011242:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8011246:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801124a:	ee30 0a67 	vsub.f32	s0, s0, s15
 801124e:	ee10 3a10 	vmov	r3, s0
 8011252:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8011256:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801125a:	da06      	bge.n	801126a <__ieee754_powf+0x50e>
 801125c:	f000 f928 	bl	80114b0 <scalbnf>
 8011260:	ee20 0a08 	vmul.f32	s0, s0, s16
 8011264:	e592      	b.n	8010d8c <__ieee754_powf+0x30>
 8011266:	2000      	movs	r0, #0
 8011268:	e7a7      	b.n	80111ba <__ieee754_powf+0x45e>
 801126a:	ee00 3a10 	vmov	s0, r3
 801126e:	e7f7      	b.n	8011260 <__ieee754_powf+0x504>
 8011270:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8011274:	e58a      	b.n	8010d8c <__ieee754_powf+0x30>
 8011276:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 80112f4 <__ieee754_powf+0x598>
 801127a:	e587      	b.n	8010d8c <__ieee754_powf+0x30>
 801127c:	eeb0 0a48 	vmov.f32	s0, s16
 8011280:	e584      	b.n	8010d8c <__ieee754_powf+0x30>
 8011282:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 8011286:	f43f adbb 	beq.w	8010e00 <__ieee754_powf+0xa4>
 801128a:	2502      	movs	r5, #2
 801128c:	eeb0 0a48 	vmov.f32	s0, s16
 8011290:	f000 f906 	bl	80114a0 <fabsf>
 8011294:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 8011298:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801129c:	4647      	mov	r7, r8
 801129e:	d003      	beq.n	80112a8 <__ieee754_powf+0x54c>
 80112a0:	f1b8 0f00 	cmp.w	r8, #0
 80112a4:	f47f addb 	bne.w	8010e5e <__ieee754_powf+0x102>
 80112a8:	2c00      	cmp	r4, #0
 80112aa:	bfbc      	itt	lt
 80112ac:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 80112b0:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 80112b4:	2e00      	cmp	r6, #0
 80112b6:	f6bf ad69 	bge.w	8010d8c <__ieee754_powf+0x30>
 80112ba:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 80112be:	ea58 0805 	orrs.w	r8, r8, r5
 80112c2:	f47f adc7 	bne.w	8010e54 <__ieee754_powf+0xf8>
 80112c6:	ee70 7a40 	vsub.f32	s15, s0, s0
 80112ca:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 80112ce:	e55d      	b.n	8010d8c <__ieee754_powf+0x30>
 80112d0:	ff800000 	.word	0xff800000
 80112d4:	3f317218 	.word	0x3f317218
 80112d8:	3f317200 	.word	0x3f317200
 80112dc:	35bfbe8c 	.word	0x35bfbe8c
 80112e0:	b5ddea0e 	.word	0xb5ddea0e
 80112e4:	3331bb4c 	.word	0x3331bb4c
 80112e8:	388ab355 	.word	0x388ab355
 80112ec:	bb360b61 	.word	0xbb360b61
 80112f0:	3e2aaaab 	.word	0x3e2aaaab
 80112f4:	00000000 	.word	0x00000000

080112f8 <atanf>:
 80112f8:	b538      	push	{r3, r4, r5, lr}
 80112fa:	ee10 5a10 	vmov	r5, s0
 80112fe:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8011302:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8011306:	eef0 7a40 	vmov.f32	s15, s0
 801130a:	d310      	bcc.n	801132e <atanf+0x36>
 801130c:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8011310:	d904      	bls.n	801131c <atanf+0x24>
 8011312:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011316:	eeb0 0a67 	vmov.f32	s0, s15
 801131a:	bd38      	pop	{r3, r4, r5, pc}
 801131c:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8011454 <atanf+0x15c>
 8011320:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8011458 <atanf+0x160>
 8011324:	2d00      	cmp	r5, #0
 8011326:	bfc8      	it	gt
 8011328:	eef0 7a47 	vmovgt.f32	s15, s14
 801132c:	e7f3      	b.n	8011316 <atanf+0x1e>
 801132e:	4b4b      	ldr	r3, [pc, #300]	@ (801145c <atanf+0x164>)
 8011330:	429c      	cmp	r4, r3
 8011332:	d810      	bhi.n	8011356 <atanf+0x5e>
 8011334:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8011338:	d20a      	bcs.n	8011350 <atanf+0x58>
 801133a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8011460 <atanf+0x168>
 801133e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011342:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8011346:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801134e:	dce2      	bgt.n	8011316 <atanf+0x1e>
 8011350:	f04f 33ff 	mov.w	r3, #4294967295
 8011354:	e013      	b.n	801137e <atanf+0x86>
 8011356:	f000 f8a3 	bl	80114a0 <fabsf>
 801135a:	4b42      	ldr	r3, [pc, #264]	@ (8011464 <atanf+0x16c>)
 801135c:	429c      	cmp	r4, r3
 801135e:	d84f      	bhi.n	8011400 <atanf+0x108>
 8011360:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8011364:	429c      	cmp	r4, r3
 8011366:	d841      	bhi.n	80113ec <atanf+0xf4>
 8011368:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801136c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011370:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011374:	2300      	movs	r3, #0
 8011376:	ee30 0a27 	vadd.f32	s0, s0, s15
 801137a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801137e:	1c5a      	adds	r2, r3, #1
 8011380:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011384:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8011468 <atanf+0x170>
 8011388:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801146c <atanf+0x174>
 801138c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8011470 <atanf+0x178>
 8011390:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011394:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011398:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8011474 <atanf+0x17c>
 801139c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80113a0:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8011478 <atanf+0x180>
 80113a4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80113a8:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801147c <atanf+0x184>
 80113ac:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80113b0:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8011480 <atanf+0x188>
 80113b4:	eee7 5a26 	vfma.f32	s11, s14, s13
 80113b8:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8011484 <atanf+0x18c>
 80113bc:	eea6 5a87 	vfma.f32	s10, s13, s14
 80113c0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8011488 <atanf+0x190>
 80113c4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80113c8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801148c <atanf+0x194>
 80113cc:	eea7 5a26 	vfma.f32	s10, s14, s13
 80113d0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8011490 <atanf+0x198>
 80113d4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80113d8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80113dc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80113e0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80113e4:	d121      	bne.n	801142a <atanf+0x132>
 80113e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80113ea:	e794      	b.n	8011316 <atanf+0x1e>
 80113ec:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80113f0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80113f4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80113f8:	2301      	movs	r3, #1
 80113fa:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80113fe:	e7be      	b.n	801137e <atanf+0x86>
 8011400:	4b24      	ldr	r3, [pc, #144]	@ (8011494 <atanf+0x19c>)
 8011402:	429c      	cmp	r4, r3
 8011404:	d80b      	bhi.n	801141e <atanf+0x126>
 8011406:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 801140a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801140e:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011412:	2302      	movs	r3, #2
 8011414:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011418:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801141c:	e7af      	b.n	801137e <atanf+0x86>
 801141e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8011422:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011426:	2303      	movs	r3, #3
 8011428:	e7a9      	b.n	801137e <atanf+0x86>
 801142a:	4a1b      	ldr	r2, [pc, #108]	@ (8011498 <atanf+0x1a0>)
 801142c:	491b      	ldr	r1, [pc, #108]	@ (801149c <atanf+0x1a4>)
 801142e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011432:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011436:	edd3 6a00 	vldr	s13, [r3]
 801143a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801143e:	2d00      	cmp	r5, #0
 8011440:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011444:	edd2 7a00 	vldr	s15, [r2]
 8011448:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801144c:	bfb8      	it	lt
 801144e:	eef1 7a67 	vneglt.f32	s15, s15
 8011452:	e760      	b.n	8011316 <atanf+0x1e>
 8011454:	bfc90fdb 	.word	0xbfc90fdb
 8011458:	3fc90fdb 	.word	0x3fc90fdb
 801145c:	3edfffff 	.word	0x3edfffff
 8011460:	7149f2ca 	.word	0x7149f2ca
 8011464:	3f97ffff 	.word	0x3f97ffff
 8011468:	3c8569d7 	.word	0x3c8569d7
 801146c:	3d4bda59 	.word	0x3d4bda59
 8011470:	bd6ef16b 	.word	0xbd6ef16b
 8011474:	3d886b35 	.word	0x3d886b35
 8011478:	3dba2e6e 	.word	0x3dba2e6e
 801147c:	3e124925 	.word	0x3e124925
 8011480:	3eaaaaab 	.word	0x3eaaaaab
 8011484:	bd15a221 	.word	0xbd15a221
 8011488:	bd9d8795 	.word	0xbd9d8795
 801148c:	bde38e38 	.word	0xbde38e38
 8011490:	be4ccccd 	.word	0xbe4ccccd
 8011494:	401bffff 	.word	0x401bffff
 8011498:	08011fe0 	.word	0x08011fe0
 801149c:	08011fd0 	.word	0x08011fd0

080114a0 <fabsf>:
 80114a0:	ee10 3a10 	vmov	r3, s0
 80114a4:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80114a8:	ee00 3a10 	vmov	s0, r3
 80114ac:	4770      	bx	lr
	...

080114b0 <scalbnf>:
 80114b0:	ee10 3a10 	vmov	r3, s0
 80114b4:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80114b8:	d02b      	beq.n	8011512 <scalbnf+0x62>
 80114ba:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 80114be:	d302      	bcc.n	80114c6 <scalbnf+0x16>
 80114c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80114c4:	4770      	bx	lr
 80114c6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80114ca:	d123      	bne.n	8011514 <scalbnf+0x64>
 80114cc:	4b24      	ldr	r3, [pc, #144]	@ (8011560 <scalbnf+0xb0>)
 80114ce:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8011564 <scalbnf+0xb4>
 80114d2:	4298      	cmp	r0, r3
 80114d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80114d8:	db17      	blt.n	801150a <scalbnf+0x5a>
 80114da:	ee10 3a10 	vmov	r3, s0
 80114de:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80114e2:	3a19      	subs	r2, #25
 80114e4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80114e8:	4288      	cmp	r0, r1
 80114ea:	dd15      	ble.n	8011518 <scalbnf+0x68>
 80114ec:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8011568 <scalbnf+0xb8>
 80114f0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801156c <scalbnf+0xbc>
 80114f4:	ee10 3a10 	vmov	r3, s0
 80114f8:	eeb0 7a67 	vmov.f32	s14, s15
 80114fc:	2b00      	cmp	r3, #0
 80114fe:	bfb8      	it	lt
 8011500:	eef0 7a66 	vmovlt.f32	s15, s13
 8011504:	ee27 0a87 	vmul.f32	s0, s15, s14
 8011508:	4770      	bx	lr
 801150a:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8011570 <scalbnf+0xc0>
 801150e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8011512:	4770      	bx	lr
 8011514:	0dd2      	lsrs	r2, r2, #23
 8011516:	e7e5      	b.n	80114e4 <scalbnf+0x34>
 8011518:	4410      	add	r0, r2
 801151a:	28fe      	cmp	r0, #254	@ 0xfe
 801151c:	dce6      	bgt.n	80114ec <scalbnf+0x3c>
 801151e:	2800      	cmp	r0, #0
 8011520:	dd06      	ble.n	8011530 <scalbnf+0x80>
 8011522:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011526:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801152a:	ee00 3a10 	vmov	s0, r3
 801152e:	4770      	bx	lr
 8011530:	f110 0f16 	cmn.w	r0, #22
 8011534:	da09      	bge.n	801154a <scalbnf+0x9a>
 8011536:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8011570 <scalbnf+0xc0>
 801153a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8011574 <scalbnf+0xc4>
 801153e:	ee10 3a10 	vmov	r3, s0
 8011542:	eeb0 7a67 	vmov.f32	s14, s15
 8011546:	2b00      	cmp	r3, #0
 8011548:	e7d9      	b.n	80114fe <scalbnf+0x4e>
 801154a:	3019      	adds	r0, #25
 801154c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8011550:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8011554:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8011578 <scalbnf+0xc8>
 8011558:	ee07 3a90 	vmov	s15, r3
 801155c:	e7d7      	b.n	801150e <scalbnf+0x5e>
 801155e:	bf00      	nop
 8011560:	ffff3cb0 	.word	0xffff3cb0
 8011564:	4c000000 	.word	0x4c000000
 8011568:	7149f2ca 	.word	0x7149f2ca
 801156c:	f149f2ca 	.word	0xf149f2ca
 8011570:	0da24260 	.word	0x0da24260
 8011574:	8da24260 	.word	0x8da24260
 8011578:	33000000 	.word	0x33000000

0801157c <with_errnof>:
 801157c:	b510      	push	{r4, lr}
 801157e:	ed2d 8b02 	vpush	{d8}
 8011582:	eeb0 8a40 	vmov.f32	s16, s0
 8011586:	4604      	mov	r4, r0
 8011588:	f7fd f812 	bl	800e5b0 <__errno>
 801158c:	eeb0 0a48 	vmov.f32	s0, s16
 8011590:	ecbd 8b02 	vpop	{d8}
 8011594:	6004      	str	r4, [r0, #0]
 8011596:	bd10      	pop	{r4, pc}

08011598 <xflowf>:
 8011598:	b130      	cbz	r0, 80115a8 <xflowf+0x10>
 801159a:	eef1 7a40 	vneg.f32	s15, s0
 801159e:	ee27 0a80 	vmul.f32	s0, s15, s0
 80115a2:	2022      	movs	r0, #34	@ 0x22
 80115a4:	f7ff bfea 	b.w	801157c <with_errnof>
 80115a8:	eef0 7a40 	vmov.f32	s15, s0
 80115ac:	e7f7      	b.n	801159e <xflowf+0x6>
	...

080115b0 <__math_uflowf>:
 80115b0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80115b8 <__math_uflowf+0x8>
 80115b4:	f7ff bff0 	b.w	8011598 <xflowf>
 80115b8:	10000000 	.word	0x10000000

080115bc <__math_oflowf>:
 80115bc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80115c4 <__math_oflowf+0x8>
 80115c0:	f7ff bfea 	b.w	8011598 <xflowf>
 80115c4:	70000000 	.word	0x70000000

080115c8 <_init>:
 80115c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115ca:	bf00      	nop
 80115cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115ce:	bc08      	pop	{r3}
 80115d0:	469e      	mov	lr, r3
 80115d2:	4770      	bx	lr

080115d4 <_fini>:
 80115d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80115d6:	bf00      	nop
 80115d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80115da:	bc08      	pop	{r3}
 80115dc:	469e      	mov	lr, r3
 80115de:	4770      	bx	lr
