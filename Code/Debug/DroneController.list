
DroneController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000923c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  080093dc  080093dc  0000a3dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800949c  0800949c  0000b158  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800949c  0800949c  0000a49c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080094a4  080094a4  0000b158  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080094a4  080094a4  0000a4a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080094a8  080094a8  0000a4a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000158  20000000  080094ac  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ee8  20000158  08009604  0000b158  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002040  08009604  0000c040  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b158  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014fb4  00000000  00000000  0000b188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037e7  00000000  00000000  0002013c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011f0  00000000  00000000  00023928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d9b  00000000  00000000  00024b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019d64  00000000  00000000  000258b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016b8b  00000000  00000000  0003f617  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f235  00000000  00000000  000561a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000e53d7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000516c  00000000  00000000  000e541c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ea588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000158 	.word	0x20000158
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080093c4 	.word	0x080093c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000015c 	.word	0x2000015c
 80001dc:	080093c4 	.word	0x080093c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b988 	b.w	80005a8 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	468e      	mov	lr, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	4688      	mov	r8, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4617      	mov	r7, r2
 80002c4:	d962      	bls.n	800038c <__udivmoddi4+0xdc>
 80002c6:	fab2 f682 	clz	r6, r2
 80002ca:	b14e      	cbz	r6, 80002e0 <__udivmoddi4+0x30>
 80002cc:	f1c6 0320 	rsb	r3, r6, #32
 80002d0:	fa01 f806 	lsl.w	r8, r1, r6
 80002d4:	fa20 f303 	lsr.w	r3, r0, r3
 80002d8:	40b7      	lsls	r7, r6
 80002da:	ea43 0808 	orr.w	r8, r3, r8
 80002de:	40b4      	lsls	r4, r6
 80002e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002e4:	fa1f fc87 	uxth.w	ip, r7
 80002e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002ec:	0c23      	lsrs	r3, r4, #16
 80002ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80002f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002f6:	fb01 f20c 	mul.w	r2, r1, ip
 80002fa:	429a      	cmp	r2, r3
 80002fc:	d909      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fe:	18fb      	adds	r3, r7, r3
 8000300:	f101 30ff 	add.w	r0, r1, #4294967295
 8000304:	f080 80ea 	bcs.w	80004dc <__udivmoddi4+0x22c>
 8000308:	429a      	cmp	r2, r3
 800030a:	f240 80e7 	bls.w	80004dc <__udivmoddi4+0x22c>
 800030e:	3902      	subs	r1, #2
 8000310:	443b      	add	r3, r7
 8000312:	1a9a      	subs	r2, r3, r2
 8000314:	b2a3      	uxth	r3, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb00 fc0c 	mul.w	ip, r0, ip
 8000326:	459c      	cmp	ip, r3
 8000328:	d909      	bls.n	800033e <__udivmoddi4+0x8e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000330:	f080 80d6 	bcs.w	80004e0 <__udivmoddi4+0x230>
 8000334:	459c      	cmp	ip, r3
 8000336:	f240 80d3 	bls.w	80004e0 <__udivmoddi4+0x230>
 800033a:	443b      	add	r3, r7
 800033c:	3802      	subs	r0, #2
 800033e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000342:	eba3 030c 	sub.w	r3, r3, ip
 8000346:	2100      	movs	r1, #0
 8000348:	b11d      	cbz	r5, 8000352 <__udivmoddi4+0xa2>
 800034a:	40f3      	lsrs	r3, r6
 800034c:	2200      	movs	r2, #0
 800034e:	e9c5 3200 	strd	r3, r2, [r5]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d905      	bls.n	8000366 <__udivmoddi4+0xb6>
 800035a:	b10d      	cbz	r5, 8000360 <__udivmoddi4+0xb0>
 800035c:	e9c5 0100 	strd	r0, r1, [r5]
 8000360:	2100      	movs	r1, #0
 8000362:	4608      	mov	r0, r1
 8000364:	e7f5      	b.n	8000352 <__udivmoddi4+0xa2>
 8000366:	fab3 f183 	clz	r1, r3
 800036a:	2900      	cmp	r1, #0
 800036c:	d146      	bne.n	80003fc <__udivmoddi4+0x14c>
 800036e:	4573      	cmp	r3, lr
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0xc8>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 8105 	bhi.w	8000582 <__udivmoddi4+0x2d2>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb6e 0203 	sbc.w	r2, lr, r3
 800037e:	2001      	movs	r0, #1
 8000380:	4690      	mov	r8, r2
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0e5      	beq.n	8000352 <__udivmoddi4+0xa2>
 8000386:	e9c5 4800 	strd	r4, r8, [r5]
 800038a:	e7e2      	b.n	8000352 <__udivmoddi4+0xa2>
 800038c:	2a00      	cmp	r2, #0
 800038e:	f000 8090 	beq.w	80004b2 <__udivmoddi4+0x202>
 8000392:	fab2 f682 	clz	r6, r2
 8000396:	2e00      	cmp	r6, #0
 8000398:	f040 80a4 	bne.w	80004e4 <__udivmoddi4+0x234>
 800039c:	1a8a      	subs	r2, r1, r2
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a4:	b280      	uxth	r0, r0
 80003a6:	b2bc      	uxth	r4, r7
 80003a8:	2101      	movs	r1, #1
 80003aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80003ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80003b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003b6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ba:	429a      	cmp	r2, r3
 80003bc:	d907      	bls.n	80003ce <__udivmoddi4+0x11e>
 80003be:	18fb      	adds	r3, r7, r3
 80003c0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003c4:	d202      	bcs.n	80003cc <__udivmoddi4+0x11c>
 80003c6:	429a      	cmp	r2, r3
 80003c8:	f200 80e0 	bhi.w	800058c <__udivmoddi4+0x2dc>
 80003cc:	46c4      	mov	ip, r8
 80003ce:	1a9b      	subs	r3, r3, r2
 80003d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003dc:	fb02 f404 	mul.w	r4, r2, r4
 80003e0:	429c      	cmp	r4, r3
 80003e2:	d907      	bls.n	80003f4 <__udivmoddi4+0x144>
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003ea:	d202      	bcs.n	80003f2 <__udivmoddi4+0x142>
 80003ec:	429c      	cmp	r4, r3
 80003ee:	f200 80ca 	bhi.w	8000586 <__udivmoddi4+0x2d6>
 80003f2:	4602      	mov	r2, r0
 80003f4:	1b1b      	subs	r3, r3, r4
 80003f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003fa:	e7a5      	b.n	8000348 <__udivmoddi4+0x98>
 80003fc:	f1c1 0620 	rsb	r6, r1, #32
 8000400:	408b      	lsls	r3, r1
 8000402:	fa22 f706 	lsr.w	r7, r2, r6
 8000406:	431f      	orrs	r7, r3
 8000408:	fa0e f401 	lsl.w	r4, lr, r1
 800040c:	fa20 f306 	lsr.w	r3, r0, r6
 8000410:	fa2e fe06 	lsr.w	lr, lr, r6
 8000414:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000418:	4323      	orrs	r3, r4
 800041a:	fa00 f801 	lsl.w	r8, r0, r1
 800041e:	fa1f fc87 	uxth.w	ip, r7
 8000422:	fbbe f0f9 	udiv	r0, lr, r9
 8000426:	0c1c      	lsrs	r4, r3, #16
 8000428:	fb09 ee10 	mls	lr, r9, r0, lr
 800042c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000430:	fb00 fe0c 	mul.w	lr, r0, ip
 8000434:	45a6      	cmp	lr, r4
 8000436:	fa02 f201 	lsl.w	r2, r2, r1
 800043a:	d909      	bls.n	8000450 <__udivmoddi4+0x1a0>
 800043c:	193c      	adds	r4, r7, r4
 800043e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000442:	f080 809c 	bcs.w	800057e <__udivmoddi4+0x2ce>
 8000446:	45a6      	cmp	lr, r4
 8000448:	f240 8099 	bls.w	800057e <__udivmoddi4+0x2ce>
 800044c:	3802      	subs	r0, #2
 800044e:	443c      	add	r4, r7
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	fa1f fe83 	uxth.w	lr, r3
 8000458:	fbb4 f3f9 	udiv	r3, r4, r9
 800045c:	fb09 4413 	mls	r4, r9, r3, r4
 8000460:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000464:	fb03 fc0c 	mul.w	ip, r3, ip
 8000468:	45a4      	cmp	ip, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x1ce>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000472:	f080 8082 	bcs.w	800057a <__udivmoddi4+0x2ca>
 8000476:	45a4      	cmp	ip, r4
 8000478:	d97f      	bls.n	800057a <__udivmoddi4+0x2ca>
 800047a:	3b02      	subs	r3, #2
 800047c:	443c      	add	r4, r7
 800047e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000482:	eba4 040c 	sub.w	r4, r4, ip
 8000486:	fba0 ec02 	umull	lr, ip, r0, r2
 800048a:	4564      	cmp	r4, ip
 800048c:	4673      	mov	r3, lr
 800048e:	46e1      	mov	r9, ip
 8000490:	d362      	bcc.n	8000558 <__udivmoddi4+0x2a8>
 8000492:	d05f      	beq.n	8000554 <__udivmoddi4+0x2a4>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x1fe>
 8000496:	ebb8 0203 	subs.w	r2, r8, r3
 800049a:	eb64 0409 	sbc.w	r4, r4, r9
 800049e:	fa04 f606 	lsl.w	r6, r4, r6
 80004a2:	fa22 f301 	lsr.w	r3, r2, r1
 80004a6:	431e      	orrs	r6, r3
 80004a8:	40cc      	lsrs	r4, r1
 80004aa:	e9c5 6400 	strd	r6, r4, [r5]
 80004ae:	2100      	movs	r1, #0
 80004b0:	e74f      	b.n	8000352 <__udivmoddi4+0xa2>
 80004b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004b6:	0c01      	lsrs	r1, r0, #16
 80004b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004bc:	b280      	uxth	r0, r0
 80004be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004c2:	463b      	mov	r3, r7
 80004c4:	4638      	mov	r0, r7
 80004c6:	463c      	mov	r4, r7
 80004c8:	46b8      	mov	r8, r7
 80004ca:	46be      	mov	lr, r7
 80004cc:	2620      	movs	r6, #32
 80004ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80004d2:	eba2 0208 	sub.w	r2, r2, r8
 80004d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004da:	e766      	b.n	80003aa <__udivmoddi4+0xfa>
 80004dc:	4601      	mov	r1, r0
 80004de:	e718      	b.n	8000312 <__udivmoddi4+0x62>
 80004e0:	4610      	mov	r0, r2
 80004e2:	e72c      	b.n	800033e <__udivmoddi4+0x8e>
 80004e4:	f1c6 0220 	rsb	r2, r6, #32
 80004e8:	fa2e f302 	lsr.w	r3, lr, r2
 80004ec:	40b7      	lsls	r7, r6
 80004ee:	40b1      	lsls	r1, r6
 80004f0:	fa20 f202 	lsr.w	r2, r0, r2
 80004f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004f8:	430a      	orrs	r2, r1
 80004fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80004fe:	b2bc      	uxth	r4, r7
 8000500:	fb0e 3318 	mls	r3, lr, r8, r3
 8000504:	0c11      	lsrs	r1, r2, #16
 8000506:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800050a:	fb08 f904 	mul.w	r9, r8, r4
 800050e:	40b0      	lsls	r0, r6
 8000510:	4589      	cmp	r9, r1
 8000512:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000516:	b280      	uxth	r0, r0
 8000518:	d93e      	bls.n	8000598 <__udivmoddi4+0x2e8>
 800051a:	1879      	adds	r1, r7, r1
 800051c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000520:	d201      	bcs.n	8000526 <__udivmoddi4+0x276>
 8000522:	4589      	cmp	r9, r1
 8000524:	d81f      	bhi.n	8000566 <__udivmoddi4+0x2b6>
 8000526:	eba1 0109 	sub.w	r1, r1, r9
 800052a:	fbb1 f9fe 	udiv	r9, r1, lr
 800052e:	fb09 f804 	mul.w	r8, r9, r4
 8000532:	fb0e 1119 	mls	r1, lr, r9, r1
 8000536:	b292      	uxth	r2, r2
 8000538:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800053c:	4542      	cmp	r2, r8
 800053e:	d229      	bcs.n	8000594 <__udivmoddi4+0x2e4>
 8000540:	18ba      	adds	r2, r7, r2
 8000542:	f109 31ff 	add.w	r1, r9, #4294967295
 8000546:	d2c4      	bcs.n	80004d2 <__udivmoddi4+0x222>
 8000548:	4542      	cmp	r2, r8
 800054a:	d2c2      	bcs.n	80004d2 <__udivmoddi4+0x222>
 800054c:	f1a9 0102 	sub.w	r1, r9, #2
 8000550:	443a      	add	r2, r7
 8000552:	e7be      	b.n	80004d2 <__udivmoddi4+0x222>
 8000554:	45f0      	cmp	r8, lr
 8000556:	d29d      	bcs.n	8000494 <__udivmoddi4+0x1e4>
 8000558:	ebbe 0302 	subs.w	r3, lr, r2
 800055c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000560:	3801      	subs	r0, #1
 8000562:	46e1      	mov	r9, ip
 8000564:	e796      	b.n	8000494 <__udivmoddi4+0x1e4>
 8000566:	eba7 0909 	sub.w	r9, r7, r9
 800056a:	4449      	add	r1, r9
 800056c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000570:	fbb1 f9fe 	udiv	r9, r1, lr
 8000574:	fb09 f804 	mul.w	r8, r9, r4
 8000578:	e7db      	b.n	8000532 <__udivmoddi4+0x282>
 800057a:	4673      	mov	r3, lr
 800057c:	e77f      	b.n	800047e <__udivmoddi4+0x1ce>
 800057e:	4650      	mov	r0, sl
 8000580:	e766      	b.n	8000450 <__udivmoddi4+0x1a0>
 8000582:	4608      	mov	r0, r1
 8000584:	e6fd      	b.n	8000382 <__udivmoddi4+0xd2>
 8000586:	443b      	add	r3, r7
 8000588:	3a02      	subs	r2, #2
 800058a:	e733      	b.n	80003f4 <__udivmoddi4+0x144>
 800058c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000590:	443b      	add	r3, r7
 8000592:	e71c      	b.n	80003ce <__udivmoddi4+0x11e>
 8000594:	4649      	mov	r1, r9
 8000596:	e79c      	b.n	80004d2 <__udivmoddi4+0x222>
 8000598:	eba1 0109 	sub.w	r1, r1, r9
 800059c:	46c4      	mov	ip, r8
 800059e:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a2:	fb09 f804 	mul.w	r8, r9, r4
 80005a6:	e7c4      	b.n	8000532 <__udivmoddi4+0x282>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <CS_L>:
#include "w25q16v.h"

extern SPI_HandleTypeDef W25_SPI_HANDLE;

static inline void CS_L(void){ HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); }
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
 80005b0:	2200      	movs	r2, #0
 80005b2:	2110      	movs	r1, #16
 80005b4:	4802      	ldr	r0, [pc, #8]	@ (80005c0 <CS_L+0x14>)
 80005b6:	f001 f807 	bl	80015c8 <HAL_GPIO_WritePin>
 80005ba:	bf00      	nop
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	bf00      	nop
 80005c0:	40020000 	.word	0x40020000

080005c4 <CS_H>:
static inline void CS_H(void){ HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET); }
 80005c4:	b580      	push	{r7, lr}
 80005c6:	af00      	add	r7, sp, #0
 80005c8:	2201      	movs	r2, #1
 80005ca:	2110      	movs	r1, #16
 80005cc:	4802      	ldr	r0, [pc, #8]	@ (80005d8 <CS_H+0x14>)
 80005ce:	f000 fffb 	bl	80015c8 <HAL_GPIO_WritePin>
 80005d2:	bf00      	nop
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	bf00      	nop
 80005d8:	40020000 	.word	0x40020000

080005dc <W25_ReadJEDEC>:

HAL_StatusTypeDef W25_ReadJEDEC(uint8_t id[3]){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b088      	sub	sp, #32
 80005e0:	af02      	add	r7, sp, #8
 80005e2:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = { 0x9F, 0,0,0 };  // 0x9F = JEDEC ID
 80005e4:	239f      	movs	r3, #159	@ 0x9f
 80005e6:	613b      	str	r3, [r7, #16]
  uint8_t rx[4] = { 0 };
 80005e8:	2300      	movs	r3, #0
 80005ea:	60fb      	str	r3, [r7, #12]

  CS_L();
 80005ec:	f7ff ffde 	bl	80005ac <CS_L>
  HAL_StatusTypeDef s = HAL_SPI_TransmitReceive(&W25_SPI_HANDLE, tx, rx, sizeof tx, 100);
 80005f0:	f107 020c 	add.w	r2, r7, #12
 80005f4:	f107 0110 	add.w	r1, r7, #16
 80005f8:	2364      	movs	r3, #100	@ 0x64
 80005fa:	9300      	str	r3, [sp, #0]
 80005fc:	2304      	movs	r3, #4
 80005fe:	480e      	ldr	r0, [pc, #56]	@ (8000638 <W25_ReadJEDEC+0x5c>)
 8000600:	f002 ff49 	bl	8003496 <HAL_SPI_TransmitReceive>
 8000604:	4603      	mov	r3, r0
 8000606:	75fb      	strb	r3, [r7, #23]
  CS_H();
 8000608:	f7ff ffdc 	bl	80005c4 <CS_H>

  if (s != HAL_OK) return s;
 800060c:	7dfb      	ldrb	r3, [r7, #23]
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <W25_ReadJEDEC+0x3a>
 8000612:	7dfb      	ldrb	r3, [r7, #23]
 8000614:	e00b      	b.n	800062e <W25_ReadJEDEC+0x52>
  id[0] = rx[1];   // manufacturer (Winbond = 0xEF)
 8000616:	7b7a      	ldrb	r2, [r7, #13]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	701a      	strb	r2, [r3, #0]
  id[1] = rx[2];   // memory type
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	3301      	adds	r3, #1
 8000620:	7bba      	ldrb	r2, [r7, #14]
 8000622:	701a      	strb	r2, [r3, #0]
  id[2] = rx[3];   // capacity code (e.g., 0x15 for 16 Mbit)
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	3302      	adds	r3, #2
 8000628:	7bfa      	ldrb	r2, [r7, #15]
 800062a:	701a      	strb	r2, [r3, #0]
  return HAL_OK;
 800062c:	2300      	movs	r3, #0
}
 800062e:	4618      	mov	r0, r3
 8000630:	3718      	adds	r7, #24
 8000632:	46bd      	mov	sp, r7
 8000634:	bd80      	pop	{r7, pc}
 8000636:	bf00      	nop
 8000638:	20000174 	.word	0x20000174

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	b082      	sub	sp, #8
 8000640:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000642:	f000 fc95 	bl	8000f70 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000646:	f000 f83f 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800064a:	f000 f99d 	bl	8000988 <MX_GPIO_Init>
  MX_SPI1_Init();
 800064e:	f000 f8a3 	bl	8000798 <MX_SPI1_Init>
  MX_SPI2_Init();
 8000652:	f000 f8d7 	bl	8000804 <MX_SPI2_Init>
  MX_SPI3_Init();
 8000656:	f000 f90b 	bl	8000870 <MX_SPI3_Init>
  MX_USART1_Init();
 800065a:	f000 f93f 	bl	80008dc <MX_USART1_Init>
  MX_USART2_UART_Init();
 800065e:	f000 f969 	bl	8000934 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000662:	f007 fa39 	bl	8007ad8 <MX_USB_DEVICE_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint8_t id[3];
 	  if (W25_ReadJEDEC(id) == HAL_OK){
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	4618      	mov	r0, r3
 800066a:	f7ff ffb7 	bl	80005dc <W25_ReadJEDEC>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d11c      	bne.n	80006ae <main+0x72>
 	     printf("JEDEC: %02X %02X %02X\r\n", id[0], id[1], id[2]);
 8000674:	793b      	ldrb	r3, [r7, #4]
 8000676:	4619      	mov	r1, r3
 8000678:	797b      	ldrb	r3, [r7, #5]
 800067a:	461a      	mov	r2, r3
 800067c:	79bb      	ldrb	r3, [r7, #6]
 800067e:	480f      	ldr	r0, [pc, #60]	@ (80006bc <main+0x80>)
 8000680:	f007 ffd6 	bl	8008630 <iprintf>
 	     HAL_GPIO_TogglePin (GPIOA, LED_Pin);
 8000684:	2102      	movs	r1, #2
 8000686:	480e      	ldr	r0, [pc, #56]	@ (80006c0 <main+0x84>)
 8000688:	f000 ffb7 	bl	80015fa <HAL_GPIO_TogglePin>
 	     HAL_Delay(500);
 800068c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000690:	f000 fce0 	bl	8001054 <HAL_Delay>
 	     HAL_GPIO_TogglePin (GPIOA, LED_Pin);
 8000694:	2102      	movs	r1, #2
 8000696:	480a      	ldr	r0, [pc, #40]	@ (80006c0 <main+0x84>)
 8000698:	f000 ffaf 	bl	80015fa <HAL_GPIO_TogglePin>
 	     HAL_Delay(500);
 800069c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80006a0:	f000 fcd8 	bl	8001054 <HAL_Delay>
 	     HAL_GPIO_TogglePin (GPIOA, LED_Pin);
 80006a4:	2102      	movs	r1, #2
 80006a6:	4806      	ldr	r0, [pc, #24]	@ (80006c0 <main+0x84>)
 80006a8:	f000 ffa7 	bl	80015fa <HAL_GPIO_TogglePin>
 80006ac:	e003      	b.n	80006b6 <main+0x7a>
 	    } else {
 	     printf("JEDEC read failed\r\n");
 80006ae:	4805      	ldr	r0, [pc, #20]	@ (80006c4 <main+0x88>)
 80006b0:	f008 f826 	bl	8008700 <puts>
 	    }
  while (1)
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	e7fd      	b.n	80006b6 <main+0x7a>
 80006ba:	bf00      	nop
 80006bc:	080093dc 	.word	0x080093dc
 80006c0:	40020000 	.word	0x40020000
 80006c4:	080093f4 	.word	0x080093f4

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	@ 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f008 f8f2 	bl	80088c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b27      	ldr	r3, [pc, #156]	@ (8000790 <SystemClock_Config+0xc8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	4a26      	ldr	r2, [pc, #152]	@ (8000790 <SystemClock_Config+0xc8>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fc:	4b24      	ldr	r3, [pc, #144]	@ (8000790 <SystemClock_Config+0xc8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b21      	ldr	r3, [pc, #132]	@ (8000794 <SystemClock_Config+0xcc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a20      	ldr	r2, [pc, #128]	@ (8000794 <SystemClock_Config+0xcc>)
 8000712:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1e      	ldr	r3, [pc, #120]	@ (8000794 <SystemClock_Config+0xcc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000724:	2301      	movs	r3, #1
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000728:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800072c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800072e:	2302      	movs	r3, #2
 8000730:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000732:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 8000738:	2306      	movs	r3, #6
 800073a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800073c:	2348      	movs	r3, #72	@ 0x48
 800073e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000740:	2302      	movs	r3, #2
 8000742:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000744:	2303      	movs	r3, #3
 8000746:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000748:	f107 0320 	add.w	r3, r7, #32
 800074c:	4618      	mov	r0, r3
 800074e:	f002 f9c1 	bl	8002ad4 <HAL_RCC_OscConfig>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000758:	f000 f980 	bl	8000a5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800075c:	230f      	movs	r3, #15
 800075e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000760:	2302      	movs	r3, #2
 8000762:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000764:	2300      	movs	r3, #0
 8000766:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000768:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800076c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800076e:	2300      	movs	r3, #0
 8000770:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000772:	f107 030c 	add.w	r3, r7, #12
 8000776:	2102      	movs	r1, #2
 8000778:	4618      	mov	r0, r3
 800077a:	f002 fc23 	bl	8002fc4 <HAL_RCC_ClockConfig>
 800077e:	4603      	mov	r3, r0
 8000780:	2b00      	cmp	r3, #0
 8000782:	d001      	beq.n	8000788 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000784:	f000 f96a 	bl	8000a5c <Error_Handler>
  }
}
 8000788:	bf00      	nop
 800078a:	3750      	adds	r7, #80	@ 0x50
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	40023800 	.word	0x40023800
 8000794:	40007000 	.word	0x40007000

08000798 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <MX_SPI1_Init+0x64>)
 800079e:	4a18      	ldr	r2, [pc, #96]	@ (8000800 <MX_SPI1_Init+0x68>)
 80007a0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80007a2:	4b16      	ldr	r3, [pc, #88]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007a4:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80007a8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80007aa:	4b14      	ldr	r3, [pc, #80]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80007b0:	4b12      	ldr	r3, [pc, #72]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b6:	4b11      	ldr	r3, [pc, #68]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007bc:	4b0f      	ldr	r3, [pc, #60]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007be:	2200      	movs	r2, #0
 80007c0:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80007c2:	4b0e      	ldr	r3, [pc, #56]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80007c8:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80007ca:	4b0c      	ldr	r3, [pc, #48]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007cc:	2220      	movs	r2, #32
 80007ce:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007d0:	4b0a      	ldr	r3, [pc, #40]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007d2:	2200      	movs	r2, #0
 80007d4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d6:	4b09      	ldr	r3, [pc, #36]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007d8:	2200      	movs	r2, #0
 80007da:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007dc:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007de:	2200      	movs	r2, #0
 80007e0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80007e2:	4b06      	ldr	r3, [pc, #24]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007e4:	220a      	movs	r2, #10
 80007e6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80007e8:	4804      	ldr	r0, [pc, #16]	@ (80007fc <MX_SPI1_Init+0x64>)
 80007ea:	f002 fdcb 	bl	8003384 <HAL_SPI_Init>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80007f4:	f000 f932 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}
 80007fc:	20000174 	.word	0x20000174
 8000800:	40013000 	.word	0x40013000

08000804 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000808:	4b17      	ldr	r3, [pc, #92]	@ (8000868 <MX_SPI2_Init+0x64>)
 800080a:	4a18      	ldr	r2, [pc, #96]	@ (800086c <MX_SPI2_Init+0x68>)
 800080c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800080e:	4b16      	ldr	r3, [pc, #88]	@ (8000868 <MX_SPI2_Init+0x64>)
 8000810:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000814:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000816:	4b14      	ldr	r3, [pc, #80]	@ (8000868 <MX_SPI2_Init+0x64>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800081c:	4b12      	ldr	r3, [pc, #72]	@ (8000868 <MX_SPI2_Init+0x64>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000822:	4b11      	ldr	r3, [pc, #68]	@ (8000868 <MX_SPI2_Init+0x64>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000828:	4b0f      	ldr	r3, [pc, #60]	@ (8000868 <MX_SPI2_Init+0x64>)
 800082a:	2200      	movs	r2, #0
 800082c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800082e:	4b0e      	ldr	r3, [pc, #56]	@ (8000868 <MX_SPI2_Init+0x64>)
 8000830:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000834:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000836:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <MX_SPI2_Init+0x64>)
 8000838:	2200      	movs	r2, #0
 800083a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <MX_SPI2_Init+0x64>)
 800083e:	2200      	movs	r2, #0
 8000840:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000842:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <MX_SPI2_Init+0x64>)
 8000844:	2200      	movs	r2, #0
 8000846:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000848:	4b07      	ldr	r3, [pc, #28]	@ (8000868 <MX_SPI2_Init+0x64>)
 800084a:	2200      	movs	r2, #0
 800084c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800084e:	4b06      	ldr	r3, [pc, #24]	@ (8000868 <MX_SPI2_Init+0x64>)
 8000850:	220a      	movs	r2, #10
 8000852:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000854:	4804      	ldr	r0, [pc, #16]	@ (8000868 <MX_SPI2_Init+0x64>)
 8000856:	f002 fd95 	bl	8003384 <HAL_SPI_Init>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d001      	beq.n	8000864 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000860:	f000 f8fc 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000864:	bf00      	nop
 8000866:	bd80      	pop	{r7, pc}
 8000868:	200001cc 	.word	0x200001cc
 800086c:	40003800 	.word	0x40003800

08000870 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000870:	b580      	push	{r7, lr}
 8000872:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000874:	4b17      	ldr	r3, [pc, #92]	@ (80008d4 <MX_SPI3_Init+0x64>)
 8000876:	4a18      	ldr	r2, [pc, #96]	@ (80008d8 <MX_SPI3_Init+0x68>)
 8000878:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800087a:	4b16      	ldr	r3, [pc, #88]	@ (80008d4 <MX_SPI3_Init+0x64>)
 800087c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000880:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000882:	4b14      	ldr	r3, [pc, #80]	@ (80008d4 <MX_SPI3_Init+0x64>)
 8000884:	2200      	movs	r2, #0
 8000886:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8000888:	4b12      	ldr	r3, [pc, #72]	@ (80008d4 <MX_SPI3_Init+0x64>)
 800088a:	2200      	movs	r2, #0
 800088c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800088e:	4b11      	ldr	r3, [pc, #68]	@ (80008d4 <MX_SPI3_Init+0x64>)
 8000890:	2200      	movs	r2, #0
 8000892:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000894:	4b0f      	ldr	r3, [pc, #60]	@ (80008d4 <MX_SPI3_Init+0x64>)
 8000896:	2200      	movs	r2, #0
 8000898:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800089a:	4b0e      	ldr	r3, [pc, #56]	@ (80008d4 <MX_SPI3_Init+0x64>)
 800089c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80008a0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80008a2:	4b0c      	ldr	r3, [pc, #48]	@ (80008d4 <MX_SPI3_Init+0x64>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80008a8:	4b0a      	ldr	r3, [pc, #40]	@ (80008d4 <MX_SPI3_Init+0x64>)
 80008aa:	2200      	movs	r2, #0
 80008ac:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80008ae:	4b09      	ldr	r3, [pc, #36]	@ (80008d4 <MX_SPI3_Init+0x64>)
 80008b0:	2200      	movs	r2, #0
 80008b2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80008b4:	4b07      	ldr	r3, [pc, #28]	@ (80008d4 <MX_SPI3_Init+0x64>)
 80008b6:	2200      	movs	r2, #0
 80008b8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 80008ba:	4b06      	ldr	r3, [pc, #24]	@ (80008d4 <MX_SPI3_Init+0x64>)
 80008bc:	220a      	movs	r2, #10
 80008be:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80008c0:	4804      	ldr	r0, [pc, #16]	@ (80008d4 <MX_SPI3_Init+0x64>)
 80008c2:	f002 fd5f 	bl	8003384 <HAL_SPI_Init>
 80008c6:	4603      	mov	r3, r0
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d001      	beq.n	80008d0 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 80008cc:	f000 f8c6 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80008d0:	bf00      	nop
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000224 	.word	0x20000224
 80008d8:	40003c00 	.word	0x40003c00

080008dc <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 80008e0:	4b12      	ldr	r3, [pc, #72]	@ (800092c <MX_USART1_Init+0x50>)
 80008e2:	4a13      	ldr	r2, [pc, #76]	@ (8000930 <MX_USART1_Init+0x54>)
 80008e4:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 80008e6:	4b11      	ldr	r3, [pc, #68]	@ (800092c <MX_USART1_Init+0x50>)
 80008e8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80008ec:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 80008ee:	4b0f      	ldr	r3, [pc, #60]	@ (800092c <MX_USART1_Init+0x50>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 80008f4:	4b0d      	ldr	r3, [pc, #52]	@ (800092c <MX_USART1_Init+0x50>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 80008fa:	4b0c      	ldr	r3, [pc, #48]	@ (800092c <MX_USART1_Init+0x50>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000900:	4b0a      	ldr	r3, [pc, #40]	@ (800092c <MX_USART1_Init+0x50>)
 8000902:	220c      	movs	r2, #12
 8000904:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000906:	4b09      	ldr	r3, [pc, #36]	@ (800092c <MX_USART1_Init+0x50>)
 8000908:	2200      	movs	r2, #0
 800090a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800090c:	4b07      	ldr	r3, [pc, #28]	@ (800092c <MX_USART1_Init+0x50>)
 800090e:	2200      	movs	r2, #0
 8000910:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000912:	4b06      	ldr	r3, [pc, #24]	@ (800092c <MX_USART1_Init+0x50>)
 8000914:	2200      	movs	r2, #0
 8000916:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000918:	4804      	ldr	r0, [pc, #16]	@ (800092c <MX_USART1_Init+0x50>)
 800091a:	f003 fb05 	bl	8003f28 <HAL_USART_Init>
 800091e:	4603      	mov	r3, r0
 8000920:	2b00      	cmp	r3, #0
 8000922:	d001      	beq.n	8000928 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000924:	f000 f89a 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	2000027c 	.word	0x2000027c
 8000930:	40011000 	.word	0x40011000

08000934 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000938:	4b11      	ldr	r3, [pc, #68]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800093a:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <MX_USART2_UART_Init+0x50>)
 800093c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800093e:	4b10      	ldr	r3, [pc, #64]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000940:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000944:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000946:	4b0e      	ldr	r3, [pc, #56]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000948:	2200      	movs	r2, #0
 800094a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800094c:	4b0c      	ldr	r3, [pc, #48]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800094e:	2200      	movs	r2, #0
 8000950:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000952:	4b0b      	ldr	r3, [pc, #44]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000954:	2200      	movs	r2, #0
 8000956:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000958:	4b09      	ldr	r3, [pc, #36]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800095a:	220c      	movs	r2, #12
 800095c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800095e:	4b08      	ldr	r3, [pc, #32]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000960:	2200      	movs	r2, #0
 8000962:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000964:	4b06      	ldr	r3, [pc, #24]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 8000966:	2200      	movs	r2, #0
 8000968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800096a:	4805      	ldr	r0, [pc, #20]	@ (8000980 <MX_USART2_UART_Init+0x4c>)
 800096c:	f003 f818 	bl	80039a0 <HAL_UART_Init>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000976:	f000 f871 	bl	8000a5c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800097a:	bf00      	nop
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	200002c0 	.word	0x200002c0
 8000984:	40004400 	.word	0x40004400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b2b      	ldr	r3, [pc, #172]	@ (8000a50 <MX_GPIO_Init+0xc8>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009a6:	4a2a      	ldr	r2, [pc, #168]	@ (8000a50 <MX_GPIO_Init+0xc8>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80009ac:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ae:	4b28      	ldr	r3, [pc, #160]	@ (8000a50 <MX_GPIO_Init+0xc8>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b24      	ldr	r3, [pc, #144]	@ (8000a50 <MX_GPIO_Init+0xc8>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009c2:	4a23      	ldr	r2, [pc, #140]	@ (8000a50 <MX_GPIO_Init+0xc8>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80009ca:	4b21      	ldr	r3, [pc, #132]	@ (8000a50 <MX_GPIO_Init+0xc8>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	603b      	str	r3, [r7, #0]
 80009da:	4b1d      	ldr	r3, [pc, #116]	@ (8000a50 <MX_GPIO_Init+0xc8>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009de:	4a1c      	ldr	r2, [pc, #112]	@ (8000a50 <MX_GPIO_Init+0xc8>)
 80009e0:	f043 0302 	orr.w	r3, r3, #2
 80009e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009e6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a50 <MX_GPIO_Init+0xc8>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ea:	f003 0302 	and.w	r3, r3, #2
 80009ee:	603b      	str	r3, [r7, #0]
 80009f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin|GPIO_PIN_4|GPIO_PIN_15, GPIO_PIN_RESET);
 80009f2:	2200      	movs	r2, #0
 80009f4:	f248 0112 	movw	r1, #32786	@ 0x8012
 80009f8:	4816      	ldr	r0, [pc, #88]	@ (8000a54 <MX_GPIO_Init+0xcc>)
 80009fa:	f000 fde5 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000a04:	4814      	ldr	r0, [pc, #80]	@ (8000a58 <MX_GPIO_Init+0xd0>)
 8000a06:	f000 fddf 	bl	80015c8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin PA4 PA15 */
  GPIO_InitStruct.Pin = LED_Pin|GPIO_PIN_4|GPIO_PIN_15;
 8000a0a:	f248 0312 	movw	r3, #32786	@ 0x8012
 8000a0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1c:	f107 030c 	add.w	r3, r7, #12
 8000a20:	4619      	mov	r1, r3
 8000a22:	480c      	ldr	r0, [pc, #48]	@ (8000a54 <MX_GPIO_Init+0xcc>)
 8000a24:	f000 fc4c 	bl	80012c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8000a28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a2c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a2e:	2301      	movs	r3, #1
 8000a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a32:	2300      	movs	r3, #0
 8000a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a36:	2300      	movs	r3, #0
 8000a38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	4619      	mov	r1, r3
 8000a40:	4805      	ldr	r0, [pc, #20]	@ (8000a58 <MX_GPIO_Init+0xd0>)
 8000a42:	f000 fc3d 	bl	80012c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000a46:	bf00      	nop
 8000a48:	3720      	adds	r7, #32
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}
 8000a4e:	bf00      	nop
 8000a50:	40023800 	.word	0x40023800
 8000a54:	40020000 	.word	0x40020000
 8000a58:	40020400 	.word	0x40020400

08000a5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a60:	b672      	cpsid	i
}
 8000a62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a64:	bf00      	nop
 8000a66:	e7fd      	b.n	8000a64 <Error_Handler+0x8>

08000a68 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a6e:	2300      	movs	r3, #0
 8000a70:	607b      	str	r3, [r7, #4]
 8000a72:	4b10      	ldr	r3, [pc, #64]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a76:	4a0f      	ldr	r2, [pc, #60]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a78:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000a7c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000a7e:	4b0d      	ldr	r3, [pc, #52]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000a82:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000a86:	607b      	str	r3, [r7, #4]
 8000a88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	603b      	str	r3, [r7, #0]
 8000a8e:	4b09      	ldr	r3, [pc, #36]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a92:	4a08      	ldr	r2, [pc, #32]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a98:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a9a:	4b06      	ldr	r3, [pc, #24]	@ (8000ab4 <HAL_MspInit+0x4c>)
 8000a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000aa2:	603b      	str	r3, [r7, #0]
 8000aa4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	370c      	adds	r7, #12
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	40023800 	.word	0x40023800

08000ab8 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b08e      	sub	sp, #56	@ 0x38
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	4a4b      	ldr	r2, [pc, #300]	@ (8000c04 <HAL_SPI_MspInit+0x14c>)
 8000ad6:	4293      	cmp	r3, r2
 8000ad8:	d12c      	bne.n	8000b34 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ada:	2300      	movs	r3, #0
 8000adc:	623b      	str	r3, [r7, #32]
 8000ade:	4b4a      	ldr	r3, [pc, #296]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000ae0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ae2:	4a49      	ldr	r2, [pc, #292]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000ae4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ae8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000aea:	4b47      	ldr	r3, [pc, #284]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000aec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000aee:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000af2:	623b      	str	r3, [r7, #32]
 8000af4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000af6:	2300      	movs	r3, #0
 8000af8:	61fb      	str	r3, [r7, #28]
 8000afa:	4b43      	ldr	r3, [pc, #268]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000afc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afe:	4a42      	ldr	r2, [pc, #264]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000b00:	f043 0301 	orr.w	r3, r3, #1
 8000b04:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b06:	4b40      	ldr	r3, [pc, #256]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000b08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b0a:	f003 0301 	and.w	r3, r3, #1
 8000b0e:	61fb      	str	r3, [r7, #28]
 8000b10:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000b12:	23e0      	movs	r3, #224	@ 0xe0
 8000b14:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b16:	2302      	movs	r3, #2
 8000b18:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b1e:	2303      	movs	r3, #3
 8000b20:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b22:	2305      	movs	r3, #5
 8000b24:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	4837      	ldr	r0, [pc, #220]	@ (8000c0c <HAL_SPI_MspInit+0x154>)
 8000b2e:	f000 fbc7 	bl	80012c0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000b32:	e063      	b.n	8000bfc <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	4a35      	ldr	r2, [pc, #212]	@ (8000c10 <HAL_SPI_MspInit+0x158>)
 8000b3a:	4293      	cmp	r3, r2
 8000b3c:	d12d      	bne.n	8000b9a <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61bb      	str	r3, [r7, #24]
 8000b42:	4b31      	ldr	r3, [pc, #196]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b46:	4a30      	ldr	r2, [pc, #192]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000b48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b4e:	4b2e      	ldr	r3, [pc, #184]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000b56:	61bb      	str	r3, [r7, #24]
 8000b58:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
 8000b5e:	4b2a      	ldr	r3, [pc, #168]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000b60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b62:	4a29      	ldr	r2, [pc, #164]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b6a:	4b27      	ldr	r3, [pc, #156]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000b6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	617b      	str	r3, [r7, #20]
 8000b74:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000b76:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8000b7a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b80:	2300      	movs	r3, #0
 8000b82:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b84:	2303      	movs	r3, #3
 8000b86:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b88:	2305      	movs	r3, #5
 8000b8a:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b8c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b90:	4619      	mov	r1, r3
 8000b92:	4820      	ldr	r0, [pc, #128]	@ (8000c14 <HAL_SPI_MspInit+0x15c>)
 8000b94:	f000 fb94 	bl	80012c0 <HAL_GPIO_Init>
}
 8000b98:	e030      	b.n	8000bfc <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI3)
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4a1e      	ldr	r2, [pc, #120]	@ (8000c18 <HAL_SPI_MspInit+0x160>)
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	d12b      	bne.n	8000bfc <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	613b      	str	r3, [r7, #16]
 8000ba8:	4b17      	ldr	r3, [pc, #92]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bac:	4a16      	ldr	r2, [pc, #88]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000bae:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000bb2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bb4:	4b14      	ldr	r3, [pc, #80]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000bbc:	613b      	str	r3, [r7, #16]
 8000bbe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	60fb      	str	r3, [r7, #12]
 8000bc4:	4b10      	ldr	r3, [pc, #64]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000bc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bc8:	4a0f      	ldr	r2, [pc, #60]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	6313      	str	r3, [r2, #48]	@ 0x30
 8000bd0:	4b0d      	ldr	r3, [pc, #52]	@ (8000c08 <HAL_SPI_MspInit+0x150>)
 8000bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd4:	f003 0302 	and.w	r3, r3, #2
 8000bd8:	60fb      	str	r3, [r7, #12]
 8000bda:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000bdc:	2338      	movs	r3, #56	@ 0x38
 8000bde:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be0:	2302      	movs	r3, #2
 8000be2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be8:	2303      	movs	r3, #3
 8000bea:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000bec:	2306      	movs	r3, #6
 8000bee:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000bf0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4807      	ldr	r0, [pc, #28]	@ (8000c14 <HAL_SPI_MspInit+0x15c>)
 8000bf8:	f000 fb62 	bl	80012c0 <HAL_GPIO_Init>
}
 8000bfc:	bf00      	nop
 8000bfe:	3738      	adds	r7, #56	@ 0x38
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}
 8000c04:	40013000 	.word	0x40013000
 8000c08:	40023800 	.word	0x40023800
 8000c0c:	40020000 	.word	0x40020000
 8000c10:	40003800 	.word	0x40003800
 8000c14:	40020400 	.word	0x40020400
 8000c18:	40003c00 	.word	0x40003c00

08000c1c <HAL_USART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param husart: USART handle pointer
  * @retval None
  */
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b08a      	sub	sp, #40	@ 0x28
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	2200      	movs	r2, #0
 8000c2a:	601a      	str	r2, [r3, #0]
 8000c2c:	605a      	str	r2, [r3, #4]
 8000c2e:	609a      	str	r2, [r3, #8]
 8000c30:	60da      	str	r2, [r3, #12]
 8000c32:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	4a19      	ldr	r2, [pc, #100]	@ (8000ca0 <HAL_USART_MspInit+0x84>)
 8000c3a:	4293      	cmp	r3, r2
 8000c3c:	d12c      	bne.n	8000c98 <HAL_USART_MspInit+0x7c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000c3e:	2300      	movs	r3, #0
 8000c40:	613b      	str	r3, [r7, #16]
 8000c42:	4b18      	ldr	r3, [pc, #96]	@ (8000ca4 <HAL_USART_MspInit+0x88>)
 8000c44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c46:	4a17      	ldr	r2, [pc, #92]	@ (8000ca4 <HAL_USART_MspInit+0x88>)
 8000c48:	f043 0310 	orr.w	r3, r3, #16
 8000c4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000c4e:	4b15      	ldr	r3, [pc, #84]	@ (8000ca4 <HAL_USART_MspInit+0x88>)
 8000c50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000c52:	f003 0310 	and.w	r3, r3, #16
 8000c56:	613b      	str	r3, [r7, #16]
 8000c58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	60fb      	str	r3, [r7, #12]
 8000c5e:	4b11      	ldr	r3, [pc, #68]	@ (8000ca4 <HAL_USART_MspInit+0x88>)
 8000c60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c62:	4a10      	ldr	r2, [pc, #64]	@ (8000ca4 <HAL_USART_MspInit+0x88>)
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000c6a:	4b0e      	ldr	r3, [pc, #56]	@ (8000ca4 <HAL_USART_MspInit+0x88>)
 8000c6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	60fb      	str	r3, [r7, #12]
 8000c74:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10;
 8000c76:	f44f 63e0 	mov.w	r3, #1792	@ 0x700
 8000c7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c84:	2303      	movs	r3, #3
 8000c86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000c88:	2307      	movs	r3, #7
 8000c8a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c8c:	f107 0314 	add.w	r3, r7, #20
 8000c90:	4619      	mov	r1, r3
 8000c92:	4805      	ldr	r0, [pc, #20]	@ (8000ca8 <HAL_USART_MspInit+0x8c>)
 8000c94:	f000 fb14 	bl	80012c0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000c98:	bf00      	nop
 8000c9a:	3728      	adds	r7, #40	@ 0x28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	40011000 	.word	0x40011000
 8000ca4:	40023800 	.word	0x40023800
 8000ca8:	40020000 	.word	0x40020000

08000cac <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cac:	b580      	push	{r7, lr}
 8000cae:	b08a      	sub	sp, #40	@ 0x28
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb4:	f107 0314 	add.w	r3, r7, #20
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
 8000cbe:	609a      	str	r2, [r3, #8]
 8000cc0:	60da      	str	r2, [r3, #12]
 8000cc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a19      	ldr	r2, [pc, #100]	@ (8000d30 <HAL_UART_MspInit+0x84>)
 8000cca:	4293      	cmp	r3, r2
 8000ccc:	d12b      	bne.n	8000d26 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cce:	2300      	movs	r3, #0
 8000cd0:	613b      	str	r3, [r7, #16]
 8000cd2:	4b18      	ldr	r3, [pc, #96]	@ (8000d34 <HAL_UART_MspInit+0x88>)
 8000cd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cd6:	4a17      	ldr	r2, [pc, #92]	@ (8000d34 <HAL_UART_MspInit+0x88>)
 8000cd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000cdc:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cde:	4b15      	ldr	r3, [pc, #84]	@ (8000d34 <HAL_UART_MspInit+0x88>)
 8000ce0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000ce6:	613b      	str	r3, [r7, #16]
 8000ce8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	60fb      	str	r3, [r7, #12]
 8000cee:	4b11      	ldr	r3, [pc, #68]	@ (8000d34 <HAL_UART_MspInit+0x88>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cf2:	4a10      	ldr	r2, [pc, #64]	@ (8000d34 <HAL_UART_MspInit+0x88>)
 8000cf4:	f043 0301 	orr.w	r3, r3, #1
 8000cf8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000d34 <HAL_UART_MspInit+0x88>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfe:	f003 0301 	and.w	r3, r3, #1
 8000d02:	60fb      	str	r3, [r7, #12]
 8000d04:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000d06:	230c      	movs	r3, #12
 8000d08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d0a:	2302      	movs	r3, #2
 8000d0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d12:	2303      	movs	r3, #3
 8000d14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d16:	2307      	movs	r3, #7
 8000d18:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d1a:	f107 0314 	add.w	r3, r7, #20
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4805      	ldr	r0, [pc, #20]	@ (8000d38 <HAL_UART_MspInit+0x8c>)
 8000d22:	f000 facd 	bl	80012c0 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000d26:	bf00      	nop
 8000d28:	3728      	adds	r7, #40	@ 0x28
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40004400 	.word	0x40004400
 8000d34:	40023800 	.word	0x40023800
 8000d38:	40020000 	.word	0x40020000

08000d3c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <NMI_Handler+0x4>

08000d44 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <HardFault_Handler+0x4>

08000d4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <MemManage_Handler+0x4>

08000d54 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <BusFault_Handler+0x4>

08000d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d60:	bf00      	nop
 8000d62:	e7fd      	b.n	8000d60 <UsageFault_Handler+0x4>

08000d64 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d76:	bf00      	nop
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr

08000d80 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d84:	bf00      	nop
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d8e:	b580      	push	{r7, lr}
 8000d90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d92:	f000 f93f 	bl	8001014 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
	...

08000d9c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000da0:	4802      	ldr	r0, [pc, #8]	@ (8000dac <OTG_FS_IRQHandler+0x10>)
 8000da2:	f000 fd88 	bl	80018b6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200017f0 	.word	0x200017f0

08000db0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b086      	sub	sp, #24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	60f8      	str	r0, [r7, #12]
 8000db8:	60b9      	str	r1, [r7, #8]
 8000dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	617b      	str	r3, [r7, #20]
 8000dc0:	e00a      	b.n	8000dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000dc2:	f3af 8000 	nop.w
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	1c5a      	adds	r2, r3, #1
 8000dcc:	60ba      	str	r2, [r7, #8]
 8000dce:	b2ca      	uxtb	r2, r1
 8000dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000dd2:	697b      	ldr	r3, [r7, #20]
 8000dd4:	3301      	adds	r3, #1
 8000dd6:	617b      	str	r3, [r7, #20]
 8000dd8:	697a      	ldr	r2, [r7, #20]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	429a      	cmp	r2, r3
 8000dde:	dbf0      	blt.n	8000dc2 <_read+0x12>
  }

  return len;
 8000de0:	687b      	ldr	r3, [r7, #4]
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3718      	adds	r7, #24
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	60f8      	str	r0, [r7, #12]
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	2300      	movs	r3, #0
 8000df8:	617b      	str	r3, [r7, #20]
 8000dfa:	e009      	b.n	8000e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	1c5a      	adds	r2, r3, #1
 8000e00:	60ba      	str	r2, [r7, #8]
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	4618      	mov	r0, r3
 8000e06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	617b      	str	r3, [r7, #20]
 8000e10:	697a      	ldr	r2, [r7, #20]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	dbf1      	blt.n	8000dfc <_write+0x12>
  }
  return len;
 8000e18:	687b      	ldr	r3, [r7, #4]
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <_close>:

int _close(int file)
{
 8000e22:	b480      	push	{r7}
 8000e24:	b083      	sub	sp, #12
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2e:	4618      	mov	r0, r3
 8000e30:	370c      	adds	r7, #12
 8000e32:	46bd      	mov	sp, r7
 8000e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e38:	4770      	bx	lr

08000e3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e3a:	b480      	push	{r7}
 8000e3c:	b083      	sub	sp, #12
 8000e3e:	af00      	add	r7, sp, #0
 8000e40:	6078      	str	r0, [r7, #4]
 8000e42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e44:	683b      	ldr	r3, [r7, #0]
 8000e46:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000e4a:	605a      	str	r2, [r3, #4]
  return 0;
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr

08000e5a <_isatty>:

int _isatty(int file)
{
 8000e5a:	b480      	push	{r7}
 8000e5c:	b083      	sub	sp, #12
 8000e5e:	af00      	add	r7, sp, #0
 8000e60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e62:	2301      	movs	r3, #1
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	370c      	adds	r7, #12
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr

08000e70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3714      	adds	r7, #20
 8000e82:	46bd      	mov	sp, r7
 8000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e88:	4770      	bx	lr
	...

08000e8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b086      	sub	sp, #24
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e94:	4a14      	ldr	r2, [pc, #80]	@ (8000ee8 <_sbrk+0x5c>)
 8000e96:	4b15      	ldr	r3, [pc, #84]	@ (8000eec <_sbrk+0x60>)
 8000e98:	1ad3      	subs	r3, r2, r3
 8000e9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ea0:	4b13      	ldr	r3, [pc, #76]	@ (8000ef0 <_sbrk+0x64>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d102      	bne.n	8000eae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ea8:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <_sbrk+0x64>)
 8000eaa:	4a12      	ldr	r2, [pc, #72]	@ (8000ef4 <_sbrk+0x68>)
 8000eac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000eae:	4b10      	ldr	r3, [pc, #64]	@ (8000ef0 <_sbrk+0x64>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	4413      	add	r3, r2
 8000eb6:	693a      	ldr	r2, [r7, #16]
 8000eb8:	429a      	cmp	r2, r3
 8000eba:	d207      	bcs.n	8000ecc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ebc:	f007 fd4e 	bl	800895c <__errno>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	220c      	movs	r2, #12
 8000ec4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ec6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eca:	e009      	b.n	8000ee0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ecc:	4b08      	ldr	r3, [pc, #32]	@ (8000ef0 <_sbrk+0x64>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ed2:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	4a05      	ldr	r2, [pc, #20]	@ (8000ef0 <_sbrk+0x64>)
 8000edc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3718      	adds	r7, #24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	20020000 	.word	0x20020000
 8000eec:	00000400 	.word	0x00000400
 8000ef0:	20000308 	.word	0x20000308
 8000ef4:	20002040 	.word	0x20002040

08000ef8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <SystemInit+0x20>)
 8000efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000f02:	4a05      	ldr	r2, [pc, #20]	@ (8000f18 <SystemInit+0x20>)
 8000f04:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000f08:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	e000ed00 	.word	0xe000ed00

08000f1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f1c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f54 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f20:	f7ff ffea 	bl	8000ef8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f24:	480c      	ldr	r0, [pc, #48]	@ (8000f58 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f26:	490d      	ldr	r1, [pc, #52]	@ (8000f5c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f28:	4a0d      	ldr	r2, [pc, #52]	@ (8000f60 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f2c:	e002      	b.n	8000f34 <LoopCopyDataInit>

08000f2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f32:	3304      	adds	r3, #4

08000f34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f38:	d3f9      	bcc.n	8000f2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f64 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f68 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f40:	e001      	b.n	8000f46 <LoopFillZerobss>

08000f42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f44:	3204      	adds	r2, #4

08000f46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f48:	d3fb      	bcc.n	8000f42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f4a:	f007 fd0d 	bl	8008968 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f4e:	f7ff fb75 	bl	800063c <main>
  bx  lr    
 8000f52:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000f54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f5c:	20000158 	.word	0x20000158
  ldr r2, =_sidata
 8000f60:	080094ac 	.word	0x080094ac
  ldr r2, =_sbss
 8000f64:	20000158 	.word	0x20000158
  ldr r4, =_ebss
 8000f68:	20002040 	.word	0x20002040

08000f6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f6c:	e7fe      	b.n	8000f6c <ADC_IRQHandler>
	...

08000f70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f74:	4b0e      	ldr	r3, [pc, #56]	@ (8000fb0 <HAL_Init+0x40>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	4a0d      	ldr	r2, [pc, #52]	@ (8000fb0 <HAL_Init+0x40>)
 8000f7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f80:	4b0b      	ldr	r3, [pc, #44]	@ (8000fb0 <HAL_Init+0x40>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	4a0a      	ldr	r2, [pc, #40]	@ (8000fb0 <HAL_Init+0x40>)
 8000f86:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f8c:	4b08      	ldr	r3, [pc, #32]	@ (8000fb0 <HAL_Init+0x40>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a07      	ldr	r2, [pc, #28]	@ (8000fb0 <HAL_Init+0x40>)
 8000f92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f98:	2003      	movs	r0, #3
 8000f9a:	f000 f94f 	bl	800123c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f9e:	200f      	movs	r0, #15
 8000fa0:	f000 f808 	bl	8000fb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fa4:	f7ff fd60 	bl	8000a68 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fa8:	2300      	movs	r3, #0
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	bd80      	pop	{r7, pc}
 8000fae:	bf00      	nop
 8000fb0:	40023c00 	.word	0x40023c00

08000fb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fbc:	4b12      	ldr	r3, [pc, #72]	@ (8001008 <HAL_InitTick+0x54>)
 8000fbe:	681a      	ldr	r2, [r3, #0]
 8000fc0:	4b12      	ldr	r3, [pc, #72]	@ (800100c <HAL_InitTick+0x58>)
 8000fc2:	781b      	ldrb	r3, [r3, #0]
 8000fc4:	4619      	mov	r1, r3
 8000fc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f000 f967 	bl	80012a6 <HAL_SYSTICK_Config>
 8000fd8:	4603      	mov	r3, r0
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d001      	beq.n	8000fe2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e00e      	b.n	8001000 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2b0f      	cmp	r3, #15
 8000fe6:	d80a      	bhi.n	8000ffe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fe8:	2200      	movs	r2, #0
 8000fea:	6879      	ldr	r1, [r7, #4]
 8000fec:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff0:	f000 f92f 	bl	8001252 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ff4:	4a06      	ldr	r2, [pc, #24]	@ (8001010 <HAL_InitTick+0x5c>)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	e000      	b.n	8001000 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
}
 8001000:	4618      	mov	r0, r3
 8001002:	3708      	adds	r7, #8
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	20000000 	.word	0x20000000
 800100c:	20000008 	.word	0x20000008
 8001010:	20000004 	.word	0x20000004

08001014 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <HAL_IncTick+0x20>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	461a      	mov	r2, r3
 800101e:	4b06      	ldr	r3, [pc, #24]	@ (8001038 <HAL_IncTick+0x24>)
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	4413      	add	r3, r2
 8001024:	4a04      	ldr	r2, [pc, #16]	@ (8001038 <HAL_IncTick+0x24>)
 8001026:	6013      	str	r3, [r2, #0]
}
 8001028:	bf00      	nop
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	20000008 	.word	0x20000008
 8001038:	2000030c 	.word	0x2000030c

0800103c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  return uwTick;
 8001040:	4b03      	ldr	r3, [pc, #12]	@ (8001050 <HAL_GetTick+0x14>)
 8001042:	681b      	ldr	r3, [r3, #0]
}
 8001044:	4618      	mov	r0, r3
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop
 8001050:	2000030c 	.word	0x2000030c

08001054 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800105c:	f7ff ffee 	bl	800103c <HAL_GetTick>
 8001060:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	f1b3 3fff 	cmp.w	r3, #4294967295
 800106c:	d005      	beq.n	800107a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800106e:	4b0a      	ldr	r3, [pc, #40]	@ (8001098 <HAL_Delay+0x44>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	461a      	mov	r2, r3
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4413      	add	r3, r2
 8001078:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800107a:	bf00      	nop
 800107c:	f7ff ffde 	bl	800103c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	68bb      	ldr	r3, [r7, #8]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	68fa      	ldr	r2, [r7, #12]
 8001088:	429a      	cmp	r2, r3
 800108a:	d8f7      	bhi.n	800107c <HAL_Delay+0x28>
  {
  }
}
 800108c:	bf00      	nop
 800108e:	bf00      	nop
 8001090:	3710      	adds	r7, #16
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000008 	.word	0x20000008

0800109c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f003 0307 	and.w	r3, r3, #7
 80010aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010ac:	4b0c      	ldr	r3, [pc, #48]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010b2:	68ba      	ldr	r2, [r7, #8]
 80010b4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010b8:	4013      	ands	r3, r2
 80010ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010bc:	68fb      	ldr	r3, [r7, #12]
 80010be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010c4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ce:	4a04      	ldr	r2, [pc, #16]	@ (80010e0 <__NVIC_SetPriorityGrouping+0x44>)
 80010d0:	68bb      	ldr	r3, [r7, #8]
 80010d2:	60d3      	str	r3, [r2, #12]
}
 80010d4:	bf00      	nop
 80010d6:	3714      	adds	r7, #20
 80010d8:	46bd      	mov	sp, r7
 80010da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010de:	4770      	bx	lr
 80010e0:	e000ed00 	.word	0xe000ed00

080010e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010e8:	4b04      	ldr	r3, [pc, #16]	@ (80010fc <__NVIC_GetPriorityGrouping+0x18>)
 80010ea:	68db      	ldr	r3, [r3, #12]
 80010ec:	0a1b      	lsrs	r3, r3, #8
 80010ee:	f003 0307 	and.w	r3, r3, #7
}
 80010f2:	4618      	mov	r0, r3
 80010f4:	46bd      	mov	sp, r7
 80010f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010fa:	4770      	bx	lr
 80010fc:	e000ed00 	.word	0xe000ed00

08001100 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001100:	b480      	push	{r7}
 8001102:	b083      	sub	sp, #12
 8001104:	af00      	add	r7, sp, #0
 8001106:	4603      	mov	r3, r0
 8001108:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800110a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110e:	2b00      	cmp	r3, #0
 8001110:	db0b      	blt.n	800112a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	f003 021f 	and.w	r2, r3, #31
 8001118:	4907      	ldr	r1, [pc, #28]	@ (8001138 <__NVIC_EnableIRQ+0x38>)
 800111a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800111e:	095b      	lsrs	r3, r3, #5
 8001120:	2001      	movs	r0, #1
 8001122:	fa00 f202 	lsl.w	r2, r0, r2
 8001126:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800112a:	bf00      	nop
 800112c:	370c      	adds	r7, #12
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	e000e100 	.word	0xe000e100

0800113c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	4603      	mov	r3, r0
 8001144:	6039      	str	r1, [r7, #0]
 8001146:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001148:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800114c:	2b00      	cmp	r3, #0
 800114e:	db0a      	blt.n	8001166 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001150:	683b      	ldr	r3, [r7, #0]
 8001152:	b2da      	uxtb	r2, r3
 8001154:	490c      	ldr	r1, [pc, #48]	@ (8001188 <__NVIC_SetPriority+0x4c>)
 8001156:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800115a:	0112      	lsls	r2, r2, #4
 800115c:	b2d2      	uxtb	r2, r2
 800115e:	440b      	add	r3, r1
 8001160:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001164:	e00a      	b.n	800117c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	b2da      	uxtb	r2, r3
 800116a:	4908      	ldr	r1, [pc, #32]	@ (800118c <__NVIC_SetPriority+0x50>)
 800116c:	79fb      	ldrb	r3, [r7, #7]
 800116e:	f003 030f 	and.w	r3, r3, #15
 8001172:	3b04      	subs	r3, #4
 8001174:	0112      	lsls	r2, r2, #4
 8001176:	b2d2      	uxtb	r2, r2
 8001178:	440b      	add	r3, r1
 800117a:	761a      	strb	r2, [r3, #24]
}
 800117c:	bf00      	nop
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	e000e100 	.word	0xe000e100
 800118c:	e000ed00 	.word	0xe000ed00

08001190 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001190:	b480      	push	{r7}
 8001192:	b089      	sub	sp, #36	@ 0x24
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011a4:	69fb      	ldr	r3, [r7, #28]
 80011a6:	f1c3 0307 	rsb	r3, r3, #7
 80011aa:	2b04      	cmp	r3, #4
 80011ac:	bf28      	it	cs
 80011ae:	2304      	movcs	r3, #4
 80011b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011b2:	69fb      	ldr	r3, [r7, #28]
 80011b4:	3304      	adds	r3, #4
 80011b6:	2b06      	cmp	r3, #6
 80011b8:	d902      	bls.n	80011c0 <NVIC_EncodePriority+0x30>
 80011ba:	69fb      	ldr	r3, [r7, #28]
 80011bc:	3b03      	subs	r3, #3
 80011be:	e000      	b.n	80011c2 <NVIC_EncodePriority+0x32>
 80011c0:	2300      	movs	r3, #0
 80011c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011c4:	f04f 32ff 	mov.w	r2, #4294967295
 80011c8:	69bb      	ldr	r3, [r7, #24]
 80011ca:	fa02 f303 	lsl.w	r3, r2, r3
 80011ce:	43da      	mvns	r2, r3
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	401a      	ands	r2, r3
 80011d4:	697b      	ldr	r3, [r7, #20]
 80011d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011d8:	f04f 31ff 	mov.w	r1, #4294967295
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	fa01 f303 	lsl.w	r3, r1, r3
 80011e2:	43d9      	mvns	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	4313      	orrs	r3, r2
         );
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
	...

080011f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	3b01      	subs	r3, #1
 8001204:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001208:	d301      	bcc.n	800120e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800120a:	2301      	movs	r3, #1
 800120c:	e00f      	b.n	800122e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800120e:	4a0a      	ldr	r2, [pc, #40]	@ (8001238 <SysTick_Config+0x40>)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3b01      	subs	r3, #1
 8001214:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001216:	210f      	movs	r1, #15
 8001218:	f04f 30ff 	mov.w	r0, #4294967295
 800121c:	f7ff ff8e 	bl	800113c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001220:	4b05      	ldr	r3, [pc, #20]	@ (8001238 <SysTick_Config+0x40>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001226:	4b04      	ldr	r3, [pc, #16]	@ (8001238 <SysTick_Config+0x40>)
 8001228:	2207      	movs	r2, #7
 800122a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800122c:	2300      	movs	r3, #0
}
 800122e:	4618      	mov	r0, r3
 8001230:	3708      	adds	r7, #8
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	e000e010 	.word	0xe000e010

0800123c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
 8001242:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7ff ff29 	bl	800109c <__NVIC_SetPriorityGrouping>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001252:	b580      	push	{r7, lr}
 8001254:	b086      	sub	sp, #24
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	60b9      	str	r1, [r7, #8]
 800125c:	607a      	str	r2, [r7, #4]
 800125e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001260:	2300      	movs	r3, #0
 8001262:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001264:	f7ff ff3e 	bl	80010e4 <__NVIC_GetPriorityGrouping>
 8001268:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	68b9      	ldr	r1, [r7, #8]
 800126e:	6978      	ldr	r0, [r7, #20]
 8001270:	f7ff ff8e 	bl	8001190 <NVIC_EncodePriority>
 8001274:	4602      	mov	r2, r0
 8001276:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800127a:	4611      	mov	r1, r2
 800127c:	4618      	mov	r0, r3
 800127e:	f7ff ff5d 	bl	800113c <__NVIC_SetPriority>
}
 8001282:	bf00      	nop
 8001284:	3718      	adds	r7, #24
 8001286:	46bd      	mov	sp, r7
 8001288:	bd80      	pop	{r7, pc}

0800128a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800128a:	b580      	push	{r7, lr}
 800128c:	b082      	sub	sp, #8
 800128e:	af00      	add	r7, sp, #0
 8001290:	4603      	mov	r3, r0
 8001292:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001294:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001298:	4618      	mov	r0, r3
 800129a:	f7ff ff31 	bl	8001100 <__NVIC_EnableIRQ>
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}

080012a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012a6:	b580      	push	{r7, lr}
 80012a8:	b082      	sub	sp, #8
 80012aa:	af00      	add	r7, sp, #0
 80012ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012ae:	6878      	ldr	r0, [r7, #4]
 80012b0:	f7ff ffa2 	bl	80011f8 <SysTick_Config>
 80012b4:	4603      	mov	r3, r0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
	...

080012c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b089      	sub	sp, #36	@ 0x24
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80012ca:	2300      	movs	r3, #0
 80012cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80012ce:	2300      	movs	r3, #0
 80012d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80012d2:	2300      	movs	r3, #0
 80012d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
 80012da:	e159      	b.n	8001590 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80012dc:	2201      	movs	r2, #1
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	fa02 f303 	lsl.w	r3, r2, r3
 80012e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80012e6:	683b      	ldr	r3, [r7, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	697a      	ldr	r2, [r7, #20]
 80012ec:	4013      	ands	r3, r2
 80012ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	697b      	ldr	r3, [r7, #20]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	f040 8148 	bne.w	800158a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f003 0303 	and.w	r3, r3, #3
 8001302:	2b01      	cmp	r3, #1
 8001304:	d005      	beq.n	8001312 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	685b      	ldr	r3, [r3, #4]
 800130a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800130e:	2b02      	cmp	r3, #2
 8001310:	d130      	bne.n	8001374 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	689b      	ldr	r3, [r3, #8]
 8001316:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001318:	69fb      	ldr	r3, [r7, #28]
 800131a:	005b      	lsls	r3, r3, #1
 800131c:	2203      	movs	r2, #3
 800131e:	fa02 f303 	lsl.w	r3, r2, r3
 8001322:	43db      	mvns	r3, r3
 8001324:	69ba      	ldr	r2, [r7, #24]
 8001326:	4013      	ands	r3, r2
 8001328:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	68da      	ldr	r2, [r3, #12]
 800132e:	69fb      	ldr	r3, [r7, #28]
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	fa02 f303 	lsl.w	r3, r2, r3
 8001336:	69ba      	ldr	r2, [r7, #24]
 8001338:	4313      	orrs	r3, r2
 800133a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69ba      	ldr	r2, [r7, #24]
 8001340:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	685b      	ldr	r3, [r3, #4]
 8001346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001348:	2201      	movs	r2, #1
 800134a:	69fb      	ldr	r3, [r7, #28]
 800134c:	fa02 f303 	lsl.w	r3, r2, r3
 8001350:	43db      	mvns	r3, r3
 8001352:	69ba      	ldr	r2, [r7, #24]
 8001354:	4013      	ands	r3, r2
 8001356:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	685b      	ldr	r3, [r3, #4]
 800135c:	091b      	lsrs	r3, r3, #4
 800135e:	f003 0201 	and.w	r2, r3, #1
 8001362:	69fb      	ldr	r3, [r7, #28]
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4313      	orrs	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	69ba      	ldr	r2, [r7, #24]
 8001372:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001374:	683b      	ldr	r3, [r7, #0]
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	f003 0303 	and.w	r3, r3, #3
 800137c:	2b03      	cmp	r3, #3
 800137e:	d017      	beq.n	80013b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001386:	69fb      	ldr	r3, [r7, #28]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	2203      	movs	r2, #3
 800138c:	fa02 f303 	lsl.w	r3, r2, r3
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	69fb      	ldr	r3, [r7, #28]
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	fa02 f303 	lsl.w	r3, r2, r3
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	4313      	orrs	r3, r2
 80013a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	2b02      	cmp	r3, #2
 80013ba:	d123      	bne.n	8001404 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80013bc:	69fb      	ldr	r3, [r7, #28]
 80013be:	08da      	lsrs	r2, r3, #3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	3208      	adds	r2, #8
 80013c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80013c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80013ca:	69fb      	ldr	r3, [r7, #28]
 80013cc:	f003 0307 	and.w	r3, r3, #7
 80013d0:	009b      	lsls	r3, r3, #2
 80013d2:	220f      	movs	r2, #15
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	691a      	ldr	r2, [r3, #16]
 80013e4:	69fb      	ldr	r3, [r7, #28]
 80013e6:	f003 0307 	and.w	r3, r3, #7
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	08da      	lsrs	r2, r3, #3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	3208      	adds	r2, #8
 80013fe:	69b9      	ldr	r1, [r7, #24]
 8001400:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800140a:	69fb      	ldr	r3, [r7, #28]
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	2203      	movs	r2, #3
 8001410:	fa02 f303 	lsl.w	r3, r2, r3
 8001414:	43db      	mvns	r3, r3
 8001416:	69ba      	ldr	r2, [r7, #24]
 8001418:	4013      	ands	r3, r2
 800141a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	f003 0203 	and.w	r2, r3, #3
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001440:	2b00      	cmp	r3, #0
 8001442:	f000 80a2 	beq.w	800158a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b57      	ldr	r3, [pc, #348]	@ (80015a8 <HAL_GPIO_Init+0x2e8>)
 800144c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800144e:	4a56      	ldr	r2, [pc, #344]	@ (80015a8 <HAL_GPIO_Init+0x2e8>)
 8001450:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001454:	6453      	str	r3, [r2, #68]	@ 0x44
 8001456:	4b54      	ldr	r3, [pc, #336]	@ (80015a8 <HAL_GPIO_Init+0x2e8>)
 8001458:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800145a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001462:	4a52      	ldr	r2, [pc, #328]	@ (80015ac <HAL_GPIO_Init+0x2ec>)
 8001464:	69fb      	ldr	r3, [r7, #28]
 8001466:	089b      	lsrs	r3, r3, #2
 8001468:	3302      	adds	r3, #2
 800146a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800146e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001470:	69fb      	ldr	r3, [r7, #28]
 8001472:	f003 0303 	and.w	r3, r3, #3
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	220f      	movs	r2, #15
 800147a:	fa02 f303 	lsl.w	r3, r2, r3
 800147e:	43db      	mvns	r3, r3
 8001480:	69ba      	ldr	r2, [r7, #24]
 8001482:	4013      	ands	r3, r2
 8001484:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	4a49      	ldr	r2, [pc, #292]	@ (80015b0 <HAL_GPIO_Init+0x2f0>)
 800148a:	4293      	cmp	r3, r2
 800148c:	d019      	beq.n	80014c2 <HAL_GPIO_Init+0x202>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4a48      	ldr	r2, [pc, #288]	@ (80015b4 <HAL_GPIO_Init+0x2f4>)
 8001492:	4293      	cmp	r3, r2
 8001494:	d013      	beq.n	80014be <HAL_GPIO_Init+0x1fe>
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4a47      	ldr	r2, [pc, #284]	@ (80015b8 <HAL_GPIO_Init+0x2f8>)
 800149a:	4293      	cmp	r3, r2
 800149c:	d00d      	beq.n	80014ba <HAL_GPIO_Init+0x1fa>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4a46      	ldr	r2, [pc, #280]	@ (80015bc <HAL_GPIO_Init+0x2fc>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d007      	beq.n	80014b6 <HAL_GPIO_Init+0x1f6>
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	4a45      	ldr	r2, [pc, #276]	@ (80015c0 <HAL_GPIO_Init+0x300>)
 80014aa:	4293      	cmp	r3, r2
 80014ac:	d101      	bne.n	80014b2 <HAL_GPIO_Init+0x1f2>
 80014ae:	2304      	movs	r3, #4
 80014b0:	e008      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014b2:	2307      	movs	r3, #7
 80014b4:	e006      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014b6:	2303      	movs	r3, #3
 80014b8:	e004      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014ba:	2302      	movs	r3, #2
 80014bc:	e002      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014be:	2301      	movs	r3, #1
 80014c0:	e000      	b.n	80014c4 <HAL_GPIO_Init+0x204>
 80014c2:	2300      	movs	r3, #0
 80014c4:	69fa      	ldr	r2, [r7, #28]
 80014c6:	f002 0203 	and.w	r2, r2, #3
 80014ca:	0092      	lsls	r2, r2, #2
 80014cc:	4093      	lsls	r3, r2
 80014ce:	69ba      	ldr	r2, [r7, #24]
 80014d0:	4313      	orrs	r3, r2
 80014d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014d4:	4935      	ldr	r1, [pc, #212]	@ (80015ac <HAL_GPIO_Init+0x2ec>)
 80014d6:	69fb      	ldr	r3, [r7, #28]
 80014d8:	089b      	lsrs	r3, r3, #2
 80014da:	3302      	adds	r3, #2
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014e2:	4b38      	ldr	r3, [pc, #224]	@ (80015c4 <HAL_GPIO_Init+0x304>)
 80014e4:	689b      	ldr	r3, [r3, #8]
 80014e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80014e8:	693b      	ldr	r3, [r7, #16]
 80014ea:	43db      	mvns	r3, r3
 80014ec:	69ba      	ldr	r2, [r7, #24]
 80014ee:	4013      	ands	r3, r2
 80014f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d003      	beq.n	8001506 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80014fe:	69ba      	ldr	r2, [r7, #24]
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001506:	4a2f      	ldr	r2, [pc, #188]	@ (80015c4 <HAL_GPIO_Init+0x304>)
 8001508:	69bb      	ldr	r3, [r7, #24]
 800150a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800150c:	4b2d      	ldr	r3, [pc, #180]	@ (80015c4 <HAL_GPIO_Init+0x304>)
 800150e:	68db      	ldr	r3, [r3, #12]
 8001510:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	43db      	mvns	r3, r3
 8001516:	69ba      	ldr	r2, [r7, #24]
 8001518:	4013      	ands	r3, r2
 800151a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001524:	2b00      	cmp	r3, #0
 8001526:	d003      	beq.n	8001530 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001528:	69ba      	ldr	r2, [r7, #24]
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4313      	orrs	r3, r2
 800152e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001530:	4a24      	ldr	r2, [pc, #144]	@ (80015c4 <HAL_GPIO_Init+0x304>)
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001536:	4b23      	ldr	r3, [pc, #140]	@ (80015c4 <HAL_GPIO_Init+0x304>)
 8001538:	685b      	ldr	r3, [r3, #4]
 800153a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	43db      	mvns	r3, r3
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	4013      	ands	r3, r2
 8001544:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	685b      	ldr	r3, [r3, #4]
 800154a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154e:	2b00      	cmp	r3, #0
 8001550:	d003      	beq.n	800155a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001552:	69ba      	ldr	r2, [r7, #24]
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	4313      	orrs	r3, r2
 8001558:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800155a:	4a1a      	ldr	r2, [pc, #104]	@ (80015c4 <HAL_GPIO_Init+0x304>)
 800155c:	69bb      	ldr	r3, [r7, #24]
 800155e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001560:	4b18      	ldr	r3, [pc, #96]	@ (80015c4 <HAL_GPIO_Init+0x304>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001566:	693b      	ldr	r3, [r7, #16]
 8001568:	43db      	mvns	r3, r3
 800156a:	69ba      	ldr	r2, [r7, #24]
 800156c:	4013      	ands	r3, r2
 800156e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001570:	683b      	ldr	r3, [r7, #0]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001578:	2b00      	cmp	r3, #0
 800157a:	d003      	beq.n	8001584 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800157c:	69ba      	ldr	r2, [r7, #24]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	4313      	orrs	r3, r2
 8001582:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001584:	4a0f      	ldr	r2, [pc, #60]	@ (80015c4 <HAL_GPIO_Init+0x304>)
 8001586:	69bb      	ldr	r3, [r7, #24]
 8001588:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3301      	adds	r3, #1
 800158e:	61fb      	str	r3, [r7, #28]
 8001590:	69fb      	ldr	r3, [r7, #28]
 8001592:	2b0f      	cmp	r3, #15
 8001594:	f67f aea2 	bls.w	80012dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	3724      	adds	r7, #36	@ 0x24
 800159e:	46bd      	mov	sp, r7
 80015a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a4:	4770      	bx	lr
 80015a6:	bf00      	nop
 80015a8:	40023800 	.word	0x40023800
 80015ac:	40013800 	.word	0x40013800
 80015b0:	40020000 	.word	0x40020000
 80015b4:	40020400 	.word	0x40020400
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40020c00 	.word	0x40020c00
 80015c0:	40021000 	.word	0x40021000
 80015c4:	40013c00 	.word	0x40013c00

080015c8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80015c8:	b480      	push	{r7}
 80015ca:	b083      	sub	sp, #12
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
 80015d0:	460b      	mov	r3, r1
 80015d2:	807b      	strh	r3, [r7, #2]
 80015d4:	4613      	mov	r3, r2
 80015d6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80015d8:	787b      	ldrb	r3, [r7, #1]
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80015de:	887a      	ldrh	r2, [r7, #2]
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80015e4:	e003      	b.n	80015ee <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80015e6:	887b      	ldrh	r3, [r7, #2]
 80015e8:	041a      	lsls	r2, r3, #16
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	619a      	str	r2, [r3, #24]
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr

080015fa <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80015fa:	b480      	push	{r7}
 80015fc:	b085      	sub	sp, #20
 80015fe:	af00      	add	r7, sp, #0
 8001600:	6078      	str	r0, [r7, #4]
 8001602:	460b      	mov	r3, r1
 8001604:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800160c:	887a      	ldrh	r2, [r7, #2]
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	4013      	ands	r3, r2
 8001612:	041a      	lsls	r2, r3, #16
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	43d9      	mvns	r1, r3
 8001618:	887b      	ldrh	r3, [r7, #2]
 800161a:	400b      	ands	r3, r1
 800161c:	431a      	orrs	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	619a      	str	r2, [r3, #24]
}
 8001622:	bf00      	nop
 8001624:	3714      	adds	r7, #20
 8001626:	46bd      	mov	sp, r7
 8001628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800162c:	4770      	bx	lr

0800162e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800162e:	b580      	push	{r7, lr}
 8001630:	b086      	sub	sp, #24
 8001632:	af02      	add	r7, sp, #8
 8001634:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800163c:	2301      	movs	r3, #1
 800163e:	e101      	b.n	8001844 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800164c:	b2db      	uxtb	r3, r3
 800164e:	2b00      	cmp	r3, #0
 8001650:	d106      	bne.n	8001660 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2200      	movs	r2, #0
 8001656:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800165a:	6878      	ldr	r0, [r7, #4]
 800165c:	f006 fc1c 	bl	8007e98 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2203      	movs	r2, #3
 8001664:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001668:	68bb      	ldr	r3, [r7, #8]
 800166a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800166e:	d102      	bne.n	8001676 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	2200      	movs	r2, #0
 8001674:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4618      	mov	r0, r3
 800167c:	f003 f845 	bl	800470a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	6818      	ldr	r0, [r3, #0]
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	7c1a      	ldrb	r2, [r3, #16]
 8001688:	f88d 2000 	strb.w	r2, [sp]
 800168c:	3304      	adds	r3, #4
 800168e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001690:	f002 ff24 	bl	80044dc <USB_CoreInit>
 8001694:	4603      	mov	r3, r0
 8001696:	2b00      	cmp	r3, #0
 8001698:	d005      	beq.n	80016a6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2202      	movs	r2, #2
 800169e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e0ce      	b.n	8001844 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2100      	movs	r1, #0
 80016ac:	4618      	mov	r0, r3
 80016ae:	f003 f83d 	bl	800472c <USB_SetCurrentMode>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	2202      	movs	r2, #2
 80016bc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e0bf      	b.n	8001844 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80016c4:	2300      	movs	r3, #0
 80016c6:	73fb      	strb	r3, [r7, #15]
 80016c8:	e04a      	b.n	8001760 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80016ca:	7bfa      	ldrb	r2, [r7, #15]
 80016cc:	6879      	ldr	r1, [r7, #4]
 80016ce:	4613      	mov	r3, r2
 80016d0:	00db      	lsls	r3, r3, #3
 80016d2:	4413      	add	r3, r2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	440b      	add	r3, r1
 80016d8:	3315      	adds	r3, #21
 80016da:	2201      	movs	r2, #1
 80016dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80016de:	7bfa      	ldrb	r2, [r7, #15]
 80016e0:	6879      	ldr	r1, [r7, #4]
 80016e2:	4613      	mov	r3, r2
 80016e4:	00db      	lsls	r3, r3, #3
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	3314      	adds	r3, #20
 80016ee:	7bfa      	ldrb	r2, [r7, #15]
 80016f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80016f2:	7bfa      	ldrb	r2, [r7, #15]
 80016f4:	7bfb      	ldrb	r3, [r7, #15]
 80016f6:	b298      	uxth	r0, r3
 80016f8:	6879      	ldr	r1, [r7, #4]
 80016fa:	4613      	mov	r3, r2
 80016fc:	00db      	lsls	r3, r3, #3
 80016fe:	4413      	add	r3, r2
 8001700:	009b      	lsls	r3, r3, #2
 8001702:	440b      	add	r3, r1
 8001704:	332e      	adds	r3, #46	@ 0x2e
 8001706:	4602      	mov	r2, r0
 8001708:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800170a:	7bfa      	ldrb	r2, [r7, #15]
 800170c:	6879      	ldr	r1, [r7, #4]
 800170e:	4613      	mov	r3, r2
 8001710:	00db      	lsls	r3, r3, #3
 8001712:	4413      	add	r3, r2
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	440b      	add	r3, r1
 8001718:	3318      	adds	r3, #24
 800171a:	2200      	movs	r2, #0
 800171c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	6879      	ldr	r1, [r7, #4]
 8001722:	4613      	mov	r3, r2
 8001724:	00db      	lsls	r3, r3, #3
 8001726:	4413      	add	r3, r2
 8001728:	009b      	lsls	r3, r3, #2
 800172a:	440b      	add	r3, r1
 800172c:	331c      	adds	r3, #28
 800172e:	2200      	movs	r2, #0
 8001730:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001732:	7bfa      	ldrb	r2, [r7, #15]
 8001734:	6879      	ldr	r1, [r7, #4]
 8001736:	4613      	mov	r3, r2
 8001738:	00db      	lsls	r3, r3, #3
 800173a:	4413      	add	r3, r2
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	440b      	add	r3, r1
 8001740:	3320      	adds	r3, #32
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001746:	7bfa      	ldrb	r2, [r7, #15]
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	4613      	mov	r3, r2
 800174c:	00db      	lsls	r3, r3, #3
 800174e:	4413      	add	r3, r2
 8001750:	009b      	lsls	r3, r3, #2
 8001752:	440b      	add	r3, r1
 8001754:	3324      	adds	r3, #36	@ 0x24
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	3301      	adds	r3, #1
 800175e:	73fb      	strb	r3, [r7, #15]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	791b      	ldrb	r3, [r3, #4]
 8001764:	7bfa      	ldrb	r2, [r7, #15]
 8001766:	429a      	cmp	r2, r3
 8001768:	d3af      	bcc.n	80016ca <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800176a:	2300      	movs	r3, #0
 800176c:	73fb      	strb	r3, [r7, #15]
 800176e:	e044      	b.n	80017fa <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001770:	7bfa      	ldrb	r2, [r7, #15]
 8001772:	6879      	ldr	r1, [r7, #4]
 8001774:	4613      	mov	r3, r2
 8001776:	00db      	lsls	r3, r3, #3
 8001778:	4413      	add	r3, r2
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	440b      	add	r3, r1
 800177e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001786:	7bfa      	ldrb	r2, [r7, #15]
 8001788:	6879      	ldr	r1, [r7, #4]
 800178a:	4613      	mov	r3, r2
 800178c:	00db      	lsls	r3, r3, #3
 800178e:	4413      	add	r3, r2
 8001790:	009b      	lsls	r3, r3, #2
 8001792:	440b      	add	r3, r1
 8001794:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8001798:	7bfa      	ldrb	r2, [r7, #15]
 800179a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800179c:	7bfa      	ldrb	r2, [r7, #15]
 800179e:	6879      	ldr	r1, [r7, #4]
 80017a0:	4613      	mov	r3, r2
 80017a2:	00db      	lsls	r3, r3, #3
 80017a4:	4413      	add	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	440b      	add	r3, r1
 80017aa:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80017b2:	7bfa      	ldrb	r2, [r7, #15]
 80017b4:	6879      	ldr	r1, [r7, #4]
 80017b6:	4613      	mov	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 80017c4:	2200      	movs	r2, #0
 80017c6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80017c8:	7bfa      	ldrb	r2, [r7, #15]
 80017ca:	6879      	ldr	r1, [r7, #4]
 80017cc:	4613      	mov	r3, r2
 80017ce:	00db      	lsls	r3, r3, #3
 80017d0:	4413      	add	r3, r2
 80017d2:	009b      	lsls	r3, r3, #2
 80017d4:	440b      	add	r3, r1
 80017d6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80017de:	7bfa      	ldrb	r2, [r7, #15]
 80017e0:	6879      	ldr	r1, [r7, #4]
 80017e2:	4613      	mov	r3, r2
 80017e4:	00db      	lsls	r3, r3, #3
 80017e6:	4413      	add	r3, r2
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	440b      	add	r3, r1
 80017ec:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 80017f0:	2200      	movs	r2, #0
 80017f2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80017f4:	7bfb      	ldrb	r3, [r7, #15]
 80017f6:	3301      	adds	r3, #1
 80017f8:	73fb      	strb	r3, [r7, #15]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	791b      	ldrb	r3, [r3, #4]
 80017fe:	7bfa      	ldrb	r2, [r7, #15]
 8001800:	429a      	cmp	r2, r3
 8001802:	d3b5      	bcc.n	8001770 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6818      	ldr	r0, [r3, #0]
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	7c1a      	ldrb	r2, [r3, #16]
 800180c:	f88d 2000 	strb.w	r2, [sp]
 8001810:	3304      	adds	r3, #4
 8001812:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001814:	f002 ffd6 	bl	80047c4 <USB_DevInit>
 8001818:	4603      	mov	r3, r0
 800181a:	2b00      	cmp	r3, #0
 800181c:	d005      	beq.n	800182a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2202      	movs	r2, #2
 8001822:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001826:	2301      	movs	r3, #1
 8001828:	e00c      	b.n	8001844 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2200      	movs	r2, #0
 800182e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	2201      	movs	r2, #1
 8001834:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	4618      	mov	r0, r3
 800183e:	f004 f820 	bl	8005882 <USB_DevDisconnect>

  return HAL_OK;
 8001842:	2300      	movs	r3, #0
}
 8001844:	4618      	mov	r0, r3
 8001846:	3710      	adds	r7, #16
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8001860:	2b01      	cmp	r3, #1
 8001862:	d101      	bne.n	8001868 <HAL_PCD_Start+0x1c>
 8001864:	2302      	movs	r3, #2
 8001866:	e022      	b.n	80018ae <HAL_PCD_Start+0x62>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	2201      	movs	r2, #1
 800186c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	68db      	ldr	r3, [r3, #12]
 8001874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001878:	2b00      	cmp	r3, #0
 800187a:	d009      	beq.n	8001890 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8001880:	2b01      	cmp	r3, #1
 8001882:	d105      	bne.n	8001890 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001888:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4618      	mov	r0, r3
 8001896:	f002 ff27 	bl	80046e8 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4618      	mov	r0, r3
 80018a0:	f003 ffce 	bl	8005840 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	2200      	movs	r2, #0
 80018a8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 80018ac:	2300      	movs	r3, #0
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3710      	adds	r7, #16
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bd80      	pop	{r7, pc}

080018b6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80018b6:	b590      	push	{r4, r7, lr}
 80018b8:	b08d      	sub	sp, #52	@ 0x34
 80018ba:	af00      	add	r7, sp, #0
 80018bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80018c4:	6a3b      	ldr	r3, [r7, #32]
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f004 f88c 	bl	80059ea <USB_GetMode>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f040 848c 	bne.w	80021f2 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4618      	mov	r0, r3
 80018e0:	f003 fff0 	bl	80058c4 <USB_ReadInterrupts>
 80018e4:	4603      	mov	r3, r0
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	f000 8482 	beq.w	80021f0 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80018ec:	69fb      	ldr	r3, [r7, #28]
 80018ee:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80018f2:	689b      	ldr	r3, [r3, #8]
 80018f4:	0a1b      	lsrs	r3, r3, #8
 80018f6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4618      	mov	r0, r3
 8001906:	f003 ffdd 	bl	80058c4 <USB_ReadInterrupts>
 800190a:	4603      	mov	r3, r0
 800190c:	f003 0302 	and.w	r3, r3, #2
 8001910:	2b02      	cmp	r3, #2
 8001912:	d107      	bne.n	8001924 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	695a      	ldr	r2, [r3, #20]
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f002 0202 	and.w	r2, r2, #2
 8001922:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4618      	mov	r0, r3
 800192a:	f003 ffcb 	bl	80058c4 <USB_ReadInterrupts>
 800192e:	4603      	mov	r3, r0
 8001930:	f003 0310 	and.w	r3, r3, #16
 8001934:	2b10      	cmp	r3, #16
 8001936:	d161      	bne.n	80019fc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	699a      	ldr	r2, [r3, #24]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f022 0210 	bic.w	r2, r2, #16
 8001946:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001948:	6a3b      	ldr	r3, [r7, #32]
 800194a:	6a1b      	ldr	r3, [r3, #32]
 800194c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800194e:	69bb      	ldr	r3, [r7, #24]
 8001950:	f003 020f 	and.w	r2, r3, #15
 8001954:	4613      	mov	r3, r2
 8001956:	00db      	lsls	r3, r3, #3
 8001958:	4413      	add	r3, r2
 800195a:	009b      	lsls	r3, r3, #2
 800195c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001960:	687a      	ldr	r2, [r7, #4]
 8001962:	4413      	add	r3, r2
 8001964:	3304      	adds	r3, #4
 8001966:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001968:	69bb      	ldr	r3, [r7, #24]
 800196a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 800196e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001972:	d124      	bne.n	80019be <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 800197a:	4013      	ands	r3, r2
 800197c:	2b00      	cmp	r3, #0
 800197e:	d035      	beq.n	80019ec <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001980:	697b      	ldr	r3, [r7, #20]
 8001982:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001984:	69bb      	ldr	r3, [r7, #24]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800198a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800198e:	b29b      	uxth	r3, r3
 8001990:	461a      	mov	r2, r3
 8001992:	6a38      	ldr	r0, [r7, #32]
 8001994:	f003 fe02 	bl	800559c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	091b      	lsrs	r3, r3, #4
 80019a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019a4:	441a      	add	r2, r3
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	695a      	ldr	r2, [r3, #20]
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	091b      	lsrs	r3, r3, #4
 80019b2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019b6:	441a      	add	r2, r3
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	615a      	str	r2, [r3, #20]
 80019bc:	e016      	b.n	80019ec <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 80019c4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80019c8:	d110      	bne.n	80019ec <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80019d0:	2208      	movs	r2, #8
 80019d2:	4619      	mov	r1, r3
 80019d4:	6a38      	ldr	r0, [r7, #32]
 80019d6:	f003 fde1 	bl	800559c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	695a      	ldr	r2, [r3, #20]
 80019de:	69bb      	ldr	r3, [r7, #24]
 80019e0:	091b      	lsrs	r3, r3, #4
 80019e2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80019e6:	441a      	add	r2, r3
 80019e8:	697b      	ldr	r3, [r7, #20]
 80019ea:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	699a      	ldr	r2, [r3, #24]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f042 0210 	orr.w	r2, r2, #16
 80019fa:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f003 ff5f 	bl	80058c4 <USB_ReadInterrupts>
 8001a06:	4603      	mov	r3, r0
 8001a08:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001a0c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001a10:	f040 80a7 	bne.w	8001b62 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f003 ff64 	bl	80058ea <USB_ReadDevAllOutEpInterrupt>
 8001a22:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8001a24:	e099      	b.n	8001b5a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001a26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001a28:	f003 0301 	and.w	r3, r3, #1
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	f000 808e 	beq.w	8001b4e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001a38:	b2d2      	uxtb	r2, r2
 8001a3a:	4611      	mov	r1, r2
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f003 ff88 	bl	8005952 <USB_ReadDevOutEPInterrupt>
 8001a42:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d00c      	beq.n	8001a68 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001a4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a50:	015a      	lsls	r2, r3, #5
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	4413      	add	r3, r2
 8001a56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a5a:	461a      	mov	r2, r3
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001a60:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f000 fea4 	bl	80027b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001a68:	693b      	ldr	r3, [r7, #16]
 8001a6a:	f003 0308 	and.w	r3, r3, #8
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d00c      	beq.n	8001a8c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a74:	015a      	lsls	r2, r3, #5
 8001a76:	69fb      	ldr	r3, [r7, #28]
 8001a78:	4413      	add	r3, r2
 8001a7a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001a7e:	461a      	mov	r2, r3
 8001a80:	2308      	movs	r3, #8
 8001a82:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001a84:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f000 ff7a 	bl	8002980 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001a8c:	693b      	ldr	r3, [r7, #16]
 8001a8e:	f003 0310 	and.w	r3, r3, #16
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d008      	beq.n	8001aa8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a98:	015a      	lsls	r2, r3, #5
 8001a9a:	69fb      	ldr	r3, [r7, #28]
 8001a9c:	4413      	add	r3, r2
 8001a9e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	2310      	movs	r3, #16
 8001aa6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	f003 0302 	and.w	r3, r3, #2
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d030      	beq.n	8001b14 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001ab2:	6a3b      	ldr	r3, [r7, #32]
 8001ab4:	695b      	ldr	r3, [r3, #20]
 8001ab6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aba:	2b80      	cmp	r3, #128	@ 0x80
 8001abc:	d109      	bne.n	8001ad2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001abe:	69fb      	ldr	r3, [r7, #28]
 8001ac0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ac4:	685b      	ldr	r3, [r3, #4]
 8001ac6:	69fa      	ldr	r2, [r7, #28]
 8001ac8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001acc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001ad0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ad4:	4613      	mov	r3, r2
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4413      	add	r3, r2
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8001ae0:	687a      	ldr	r2, [r7, #4]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	3304      	adds	r3, #4
 8001ae6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	78db      	ldrb	r3, [r3, #3]
 8001aec:	2b01      	cmp	r3, #1
 8001aee:	d108      	bne.n	8001b02 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	2200      	movs	r2, #0
 8001af4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001af6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	4619      	mov	r1, r3
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f006 fac7 	bl	8008090 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b04:	015a      	lsls	r2, r3, #5
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	4413      	add	r3, r2
 8001b0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b0e:	461a      	mov	r2, r3
 8001b10:	2302      	movs	r3, #2
 8001b12:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	f003 0320 	and.w	r3, r3, #32
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d008      	beq.n	8001b30 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b20:	015a      	lsls	r2, r3, #5
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	4413      	add	r3, r2
 8001b26:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	2320      	movs	r3, #32
 8001b2e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001b30:	693b      	ldr	r3, [r7, #16]
 8001b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d009      	beq.n	8001b4e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001b3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b3c:	015a      	lsls	r2, r3, #5
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	4413      	add	r3, r2
 8001b42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001b46:	461a      	mov	r2, r3
 8001b48:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b4c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b50:	3301      	adds	r3, #1
 8001b52:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001b54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b56:	085b      	lsrs	r3, r3, #1
 8001b58:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001b5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	f47f af62 	bne.w	8001a26 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f003 feac 	bl	80058c4 <USB_ReadInterrupts>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001b72:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001b76:	f040 80db 	bne.w	8001d30 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f003 fecd 	bl	800591e <USB_ReadDevAllInEpInterrupt>
 8001b84:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8001b86:	2300      	movs	r3, #0
 8001b88:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8001b8a:	e0cd      	b.n	8001d28 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001b8e:	f003 0301 	and.w	r3, r3, #1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	f000 80c2 	beq.w	8001d1c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001b9e:	b2d2      	uxtb	r2, r2
 8001ba0:	4611      	mov	r1, r2
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f003 fef3 	bl	800598e <USB_ReadDevInEPInterrupt>
 8001ba8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	f003 0301 	and.w	r3, r3, #1
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d057      	beq.n	8001c64 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001bb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bb6:	f003 030f 	and.w	r3, r3, #15
 8001bba:	2201      	movs	r2, #1
 8001bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001bc2:	69fb      	ldr	r3, [r7, #28]
 8001bc4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001bc8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	69f9      	ldr	r1, [r7, #28]
 8001bd0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001bd8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bda:	015a      	lsls	r2, r3, #5
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	4413      	add	r3, r2
 8001be0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001be4:	461a      	mov	r2, r3
 8001be6:	2301      	movs	r3, #1
 8001be8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	799b      	ldrb	r3, [r3, #6]
 8001bee:	2b01      	cmp	r3, #1
 8001bf0:	d132      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001bf2:	6879      	ldr	r1, [r7, #4]
 8001bf4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001bf6:	4613      	mov	r3, r2
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4413      	add	r3, r2
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	440b      	add	r3, r1
 8001c00:	3320      	adds	r3, #32
 8001c02:	6819      	ldr	r1, [r3, #0]
 8001c04:	6878      	ldr	r0, [r7, #4]
 8001c06:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c08:	4613      	mov	r3, r2
 8001c0a:	00db      	lsls	r3, r3, #3
 8001c0c:	4413      	add	r3, r2
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	4403      	add	r3, r0
 8001c12:	331c      	adds	r3, #28
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4419      	add	r1, r3
 8001c18:	6878      	ldr	r0, [r7, #4]
 8001c1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c1c:	4613      	mov	r3, r2
 8001c1e:	00db      	lsls	r3, r3, #3
 8001c20:	4413      	add	r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	4403      	add	r3, r0
 8001c26:	3320      	adds	r3, #32
 8001c28:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001c2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d113      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x3a2>
 8001c30:	6879      	ldr	r1, [r7, #4]
 8001c32:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001c34:	4613      	mov	r3, r2
 8001c36:	00db      	lsls	r3, r3, #3
 8001c38:	4413      	add	r3, r2
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	3324      	adds	r3, #36	@ 0x24
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d108      	bne.n	8001c58 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6818      	ldr	r0, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8001c50:	461a      	mov	r2, r3
 8001c52:	2101      	movs	r1, #1
 8001c54:	f003 fefa 	bl	8005a4c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001c58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6878      	ldr	r0, [r7, #4]
 8001c60:	f006 f99b 	bl	8007f9a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d008      	beq.n	8001c80 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c70:	015a      	lsls	r2, r3, #5
 8001c72:	69fb      	ldr	r3, [r7, #28]
 8001c74:	4413      	add	r3, r2
 8001c76:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c7a:	461a      	mov	r2, r3
 8001c7c:	2308      	movs	r3, #8
 8001c7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	f003 0310 	and.w	r3, r3, #16
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d008      	beq.n	8001c9c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c8c:	015a      	lsls	r2, r3, #5
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	4413      	add	r3, r2
 8001c92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001c96:	461a      	mov	r2, r3
 8001c98:	2310      	movs	r3, #16
 8001c9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d008      	beq.n	8001cb8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001ca6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ca8:	015a      	lsls	r2, r3, #5
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	4413      	add	r3, r2
 8001cae:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001cb2:	461a      	mov	r2, r3
 8001cb4:	2340      	movs	r3, #64	@ 0x40
 8001cb6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d023      	beq.n	8001d0a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001cc2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001cc4:	6a38      	ldr	r0, [r7, #32]
 8001cc6:	f002 fee1 	bl	8004a8c <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001cca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ccc:	4613      	mov	r3, r2
 8001cce:	00db      	lsls	r3, r3, #3
 8001cd0:	4413      	add	r3, r2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	3310      	adds	r3, #16
 8001cd6:	687a      	ldr	r2, [r7, #4]
 8001cd8:	4413      	add	r3, r2
 8001cda:	3304      	adds	r3, #4
 8001cdc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001cde:	697b      	ldr	r3, [r7, #20]
 8001ce0:	78db      	ldrb	r3, [r3, #3]
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d108      	bne.n	8001cf8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001cec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cee:	b2db      	uxtb	r3, r3
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	6878      	ldr	r0, [r7, #4]
 8001cf4:	f006 f9de 	bl	80080b4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001cf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cfa:	015a      	lsls	r2, r3, #5
 8001cfc:	69fb      	ldr	r3, [r7, #28]
 8001cfe:	4413      	add	r3, r2
 8001d00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001d04:	461a      	mov	r2, r3
 8001d06:	2302      	movs	r3, #2
 8001d08:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001d0a:	693b      	ldr	r3, [r7, #16]
 8001d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d003      	beq.n	8001d1c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001d14:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8001d16:	6878      	ldr	r0, [r7, #4]
 8001d18:	f000 fcbd 	bl	8002696 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d1e:	3301      	adds	r3, #1
 8001d20:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8001d22:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d24:	085b      	lsrs	r3, r3, #1
 8001d26:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8001d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f47f af2e 	bne.w	8001b8c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4618      	mov	r0, r3
 8001d36:	f003 fdc5 	bl	80058c4 <USB_ReadInterrupts>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8001d40:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8001d44:	d122      	bne.n	8001d8c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	69fa      	ldr	r2, [r7, #28]
 8001d50:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001d54:	f023 0301 	bic.w	r3, r3, #1
 8001d58:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8001d60:	2b01      	cmp	r3, #1
 8001d62:	d108      	bne.n	8001d76 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2200      	movs	r2, #0
 8001d68:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	6878      	ldr	r0, [r7, #4]
 8001d70:	f000 fea4 	bl	8002abc <HAL_PCDEx_LPM_Callback>
 8001d74:	e002      	b.n	8001d7c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001d76:	6878      	ldr	r0, [r7, #4]
 8001d78:	f006 f97c 	bl	8008074 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	695a      	ldr	r2, [r3, #20]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 8001d8a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4618      	mov	r0, r3
 8001d92:	f003 fd97 	bl	80058c4 <USB_ReadInterrupts>
 8001d96:	4603      	mov	r3, r0
 8001d98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001d9c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001da0:	d112      	bne.n	8001dc8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001da2:	69fb      	ldr	r3, [r7, #28]
 8001da4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	2b01      	cmp	r3, #1
 8001db0:	d102      	bne.n	8001db8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001db2:	6878      	ldr	r0, [r7, #4]
 8001db4:	f006 f938 	bl	8008028 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 8001dc6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4618      	mov	r0, r3
 8001dce:	f003 fd79 	bl	80058c4 <USB_ReadInterrupts>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001dd8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001ddc:	f040 80b7 	bne.w	8001f4e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001de0:	69fb      	ldr	r3, [r7, #28]
 8001de2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001dee:	f023 0301 	bic.w	r3, r3, #1
 8001df2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	2110      	movs	r1, #16
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f002 fe46 	bl	8004a8c <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e00:	2300      	movs	r3, #0
 8001e02:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e04:	e046      	b.n	8001e94 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001e06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e08:	015a      	lsls	r2, r3, #5
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e12:	461a      	mov	r2, r3
 8001e14:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001e18:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e1c:	015a      	lsls	r2, r3, #5
 8001e1e:	69fb      	ldr	r3, [r7, #28]
 8001e20:	4413      	add	r3, r2
 8001e22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e2a:	0151      	lsls	r1, r2, #5
 8001e2c:	69fa      	ldr	r2, [r7, #28]
 8001e2e:	440a      	add	r2, r1
 8001e30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8001e34:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e38:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e3c:	015a      	lsls	r2, r3, #5
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	4413      	add	r3, r2
 8001e42:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e46:	461a      	mov	r2, r3
 8001e48:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8001e4c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e5e:	0151      	lsls	r1, r2, #5
 8001e60:	69fa      	ldr	r2, [r7, #28]
 8001e62:	440a      	add	r2, r1
 8001e64:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001e68:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8001e6c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8001e6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e70:	015a      	lsls	r2, r3, #5
 8001e72:	69fb      	ldr	r3, [r7, #28]
 8001e74:	4413      	add	r3, r2
 8001e76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001e7e:	0151      	lsls	r1, r2, #5
 8001e80:	69fa      	ldr	r2, [r7, #28]
 8001e82:	440a      	add	r2, r1
 8001e84:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8001e88:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001e8c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001e8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e90:	3301      	adds	r3, #1
 8001e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	791b      	ldrb	r3, [r3, #4]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d3b2      	bcc.n	8001e06 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8001ea0:	69fb      	ldr	r3, [r7, #28]
 8001ea2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ea6:	69db      	ldr	r3, [r3, #28]
 8001ea8:	69fa      	ldr	r2, [r7, #28]
 8001eaa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001eae:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 8001eb2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7bdb      	ldrb	r3, [r3, #15]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d016      	beq.n	8001eea <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8001ebc:	69fb      	ldr	r3, [r7, #28]
 8001ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ec2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8001ec6:	69fa      	ldr	r2, [r7, #28]
 8001ec8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ecc:	f043 030b 	orr.w	r3, r3, #11
 8001ed0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8001ed4:	69fb      	ldr	r3, [r7, #28]
 8001ed6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001eda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001edc:	69fa      	ldr	r2, [r7, #28]
 8001ede:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ee2:	f043 030b 	orr.w	r3, r3, #11
 8001ee6:	6453      	str	r3, [r2, #68]	@ 0x44
 8001ee8:	e015      	b.n	8001f16 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001ef0:	695b      	ldr	r3, [r3, #20]
 8001ef2:	69fa      	ldr	r2, [r7, #28]
 8001ef4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001ef8:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001efc:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8001f00:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f08:	691b      	ldr	r3, [r3, #16]
 8001f0a:	69fa      	ldr	r2, [r7, #28]
 8001f0c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f10:	f043 030b 	orr.w	r3, r3, #11
 8001f14:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8001f16:	69fb      	ldr	r3, [r7, #28]
 8001f18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8001f24:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8001f28:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6818      	ldr	r0, [r3, #0]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f003 fd87 	bl	8005a4c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	695a      	ldr	r2, [r3, #20]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8001f4c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f003 fcb6 	bl	80058c4 <USB_ReadInterrupts>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001f5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f62:	d123      	bne.n	8001fac <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f003 fd4c 	bl	8005a06 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	4618      	mov	r0, r3
 8001f74:	f002 fe03 	bl	8004b7e <USB_GetDevSpeed>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681c      	ldr	r4, [r3, #0]
 8001f84:	f001 f9ca 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8001f88:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8001f8e:	461a      	mov	r2, r3
 8001f90:	4620      	mov	r0, r4
 8001f92:	f002 fb07 	bl	80045a4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f006 f827 	bl	8007fea <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	695a      	ldr	r2, [r3, #20]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 8001faa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f003 fc87 	bl	80058c4 <USB_ReadInterrupts>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	f003 0308 	and.w	r3, r3, #8
 8001fbc:	2b08      	cmp	r3, #8
 8001fbe:	d10a      	bne.n	8001fd6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8001fc0:	6878      	ldr	r0, [r7, #4]
 8001fc2:	f006 f804 	bl	8007fce <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	695a      	ldr	r2, [r3, #20]
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	f002 0208 	and.w	r2, r2, #8
 8001fd4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f003 fc72 	bl	80058c4 <USB_ReadInterrupts>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001fe6:	2b80      	cmp	r3, #128	@ 0x80
 8001fe8:	d123      	bne.n	8002032 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8001fea:	6a3b      	ldr	r3, [r7, #32]
 8001fec:	699b      	ldr	r3, [r3, #24]
 8001fee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8001ff2:	6a3b      	ldr	r3, [r7, #32]
 8001ff4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ffa:	e014      	b.n	8002026 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8001ffc:	6879      	ldr	r1, [r7, #4]
 8001ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002000:	4613      	mov	r3, r2
 8002002:	00db      	lsls	r3, r3, #3
 8002004:	4413      	add	r3, r2
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b01      	cmp	r3, #1
 8002012:	d105      	bne.n	8002020 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002014:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002016:	b2db      	uxtb	r3, r3
 8002018:	4619      	mov	r1, r3
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fb0a 	bl	8002634 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002022:	3301      	adds	r3, #1
 8002024:	627b      	str	r3, [r7, #36]	@ 0x24
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	791b      	ldrb	r3, [r3, #4]
 800202a:	461a      	mov	r2, r3
 800202c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800202e:	4293      	cmp	r3, r2
 8002030:	d3e4      	bcc.n	8001ffc <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4618      	mov	r0, r3
 8002038:	f003 fc44 	bl	80058c4 <USB_ReadInterrupts>
 800203c:	4603      	mov	r3, r0
 800203e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002042:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002046:	d13c      	bne.n	80020c2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002048:	2301      	movs	r3, #1
 800204a:	627b      	str	r3, [r7, #36]	@ 0x24
 800204c:	e02b      	b.n	80020a6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800204e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002050:	015a      	lsls	r2, r3, #5
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	4413      	add	r3, r2
 8002056:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800205e:	6879      	ldr	r1, [r7, #4]
 8002060:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002062:	4613      	mov	r3, r2
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4413      	add	r3, r2
 8002068:	009b      	lsls	r3, r3, #2
 800206a:	440b      	add	r3, r1
 800206c:	3318      	adds	r3, #24
 800206e:	781b      	ldrb	r3, [r3, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d115      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002074:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002076:	2b00      	cmp	r3, #0
 8002078:	da12      	bge.n	80020a0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800207a:	6879      	ldr	r1, [r7, #4]
 800207c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800207e:	4613      	mov	r3, r2
 8002080:	00db      	lsls	r3, r3, #3
 8002082:	4413      	add	r3, r2
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	440b      	add	r3, r1
 8002088:	3317      	adds	r3, #23
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800208e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002096:	b2db      	uxtb	r3, r3
 8002098:	4619      	mov	r1, r3
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 faca 	bl	8002634 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020a2:	3301      	adds	r3, #1
 80020a4:	627b      	str	r3, [r7, #36]	@ 0x24
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	791b      	ldrb	r3, [r3, #4]
 80020aa:	461a      	mov	r2, r3
 80020ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d3cd      	bcc.n	800204e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	695a      	ldr	r2, [r3, #20]
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80020c0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f003 fbfc 	bl	80058c4 <USB_ReadInterrupts>
 80020cc:	4603      	mov	r3, r0
 80020ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020d2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80020d6:	d156      	bne.n	8002186 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80020d8:	2301      	movs	r3, #1
 80020da:	627b      	str	r3, [r7, #36]	@ 0x24
 80020dc:	e045      	b.n	800216a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80020de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020e0:	015a      	lsls	r2, r3, #5
 80020e2:	69fb      	ldr	r3, [r7, #28]
 80020e4:	4413      	add	r3, r2
 80020e6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80020f2:	4613      	mov	r3, r2
 80020f4:	00db      	lsls	r3, r3, #3
 80020f6:	4413      	add	r3, r2
 80020f8:	009b      	lsls	r3, r3, #2
 80020fa:	440b      	add	r3, r1
 80020fc:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8002100:	781b      	ldrb	r3, [r3, #0]
 8002102:	2b01      	cmp	r3, #1
 8002104:	d12e      	bne.n	8002164 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002106:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002108:	2b00      	cmp	r3, #0
 800210a:	da2b      	bge.n	8002164 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800210c:	69bb      	ldr	r3, [r7, #24]
 800210e:	0c1a      	lsrs	r2, r3, #16
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8002116:	4053      	eors	r3, r2
 8002118:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800211c:	2b00      	cmp	r3, #0
 800211e:	d121      	bne.n	8002164 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002120:	6879      	ldr	r1, [r7, #4]
 8002122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002124:	4613      	mov	r3, r2
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	4413      	add	r3, r2
 800212a:	009b      	lsls	r3, r3, #2
 800212c:	440b      	add	r3, r1
 800212e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002136:	6a3b      	ldr	r3, [r7, #32]
 8002138:	699b      	ldr	r3, [r3, #24]
 800213a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800213e:	6a3b      	ldr	r3, [r7, #32]
 8002140:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002142:	6a3b      	ldr	r3, [r7, #32]
 8002144:	695b      	ldr	r3, [r3, #20]
 8002146:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800214a:	2b00      	cmp	r3, #0
 800214c:	d10a      	bne.n	8002164 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002154:	685b      	ldr	r3, [r3, #4]
 8002156:	69fa      	ldr	r2, [r7, #28]
 8002158:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800215c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002160:	6053      	str	r3, [r2, #4]
            break;
 8002162:	e008      	b.n	8002176 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002164:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002166:	3301      	adds	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	@ 0x24
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	791b      	ldrb	r3, [r3, #4]
 800216e:	461a      	mov	r2, r3
 8002170:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002172:	4293      	cmp	r3, r2
 8002174:	d3b3      	bcc.n	80020de <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	695a      	ldr	r2, [r3, #20]
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 8002184:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	4618      	mov	r0, r3
 800218c:	f003 fb9a 	bl	80058c4 <USB_ReadInterrupts>
 8002190:	4603      	mov	r3, r0
 8002192:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8002196:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800219a:	d10a      	bne.n	80021b2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800219c:	6878      	ldr	r0, [r7, #4]
 800219e:	f005 ff9b 	bl	80080d8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695a      	ldr	r2, [r3, #20]
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80021b0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f003 fb84 	bl	80058c4 <USB_ReadInterrupts>
 80021bc:	4603      	mov	r3, r0
 80021be:	f003 0304 	and.w	r3, r3, #4
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d115      	bne.n	80021f2 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	f003 0304 	and.w	r3, r3, #4
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d002      	beq.n	80021de <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f005 ff8b 	bl	80080f4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	6859      	ldr	r1, [r3, #4]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	69ba      	ldr	r2, [r7, #24]
 80021ea:	430a      	orrs	r2, r1
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	e000      	b.n	80021f2 <HAL_PCD_IRQHandler+0x93c>
      return;
 80021f0:	bf00      	nop
    }
  }
}
 80021f2:	3734      	adds	r7, #52	@ 0x34
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd90      	pop	{r4, r7, pc}

080021f8 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	460b      	mov	r3, r1
 8002202:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800220a:	2b01      	cmp	r3, #1
 800220c:	d101      	bne.n	8002212 <HAL_PCD_SetAddress+0x1a>
 800220e:	2302      	movs	r3, #2
 8002210:	e012      	b.n	8002238 <HAL_PCD_SetAddress+0x40>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2201      	movs	r2, #1
 8002216:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	78fa      	ldrb	r2, [r7, #3]
 800221e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	4611      	mov	r1, r2
 8002228:	4618      	mov	r0, r3
 800222a:	f003 fae3 	bl	80057f4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2200      	movs	r2, #0
 8002232:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8002236:	2300      	movs	r3, #0
}
 8002238:	4618      	mov	r0, r3
 800223a:	3708      	adds	r7, #8
 800223c:	46bd      	mov	sp, r7
 800223e:	bd80      	pop	{r7, pc}

08002240 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	4608      	mov	r0, r1
 800224a:	4611      	mov	r1, r2
 800224c:	461a      	mov	r2, r3
 800224e:	4603      	mov	r3, r0
 8002250:	70fb      	strb	r3, [r7, #3]
 8002252:	460b      	mov	r3, r1
 8002254:	803b      	strh	r3, [r7, #0]
 8002256:	4613      	mov	r3, r2
 8002258:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800225a:	2300      	movs	r3, #0
 800225c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800225e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002262:	2b00      	cmp	r3, #0
 8002264:	da0f      	bge.n	8002286 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002266:	78fb      	ldrb	r3, [r7, #3]
 8002268:	f003 020f 	and.w	r2, r3, #15
 800226c:	4613      	mov	r3, r2
 800226e:	00db      	lsls	r3, r3, #3
 8002270:	4413      	add	r3, r2
 8002272:	009b      	lsls	r3, r3, #2
 8002274:	3310      	adds	r3, #16
 8002276:	687a      	ldr	r2, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	3304      	adds	r3, #4
 800227c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	2201      	movs	r2, #1
 8002282:	705a      	strb	r2, [r3, #1]
 8002284:	e00f      	b.n	80022a6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002286:	78fb      	ldrb	r3, [r7, #3]
 8002288:	f003 020f 	and.w	r2, r3, #15
 800228c:	4613      	mov	r3, r2
 800228e:	00db      	lsls	r3, r3, #3
 8002290:	4413      	add	r3, r2
 8002292:	009b      	lsls	r3, r3, #2
 8002294:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002298:	687a      	ldr	r2, [r7, #4]
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	2200      	movs	r2, #0
 80022a4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80022a6:	78fb      	ldrb	r3, [r7, #3]
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	b2da      	uxtb	r2, r3
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80022b2:	883b      	ldrh	r3, [r7, #0]
 80022b4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022b8:	68fb      	ldr	r3, [r7, #12]
 80022ba:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	78ba      	ldrb	r2, [r7, #2]
 80022c0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	785b      	ldrb	r3, [r3, #1]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d004      	beq.n	80022d4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	781b      	ldrb	r3, [r3, #0]
 80022ce:	461a      	mov	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80022d4:	78bb      	ldrb	r3, [r7, #2]
 80022d6:	2b02      	cmp	r3, #2
 80022d8:	d102      	bne.n	80022e0 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	2200      	movs	r2, #0
 80022de:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 80022e6:	2b01      	cmp	r3, #1
 80022e8:	d101      	bne.n	80022ee <HAL_PCD_EP_Open+0xae>
 80022ea:	2302      	movs	r3, #2
 80022ec:	e00e      	b.n	800230c <HAL_PCD_EP_Open+0xcc>
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2201      	movs	r2, #1
 80022f2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68f9      	ldr	r1, [r7, #12]
 80022fc:	4618      	mov	r0, r3
 80022fe:	f002 fc63 	bl	8004bc8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2200      	movs	r2, #0
 8002306:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800230a:	7afb      	ldrb	r3, [r7, #11]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3710      	adds	r7, #16
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b084      	sub	sp, #16
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
 800231c:	460b      	mov	r3, r1
 800231e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002320:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002324:	2b00      	cmp	r3, #0
 8002326:	da0f      	bge.n	8002348 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002328:	78fb      	ldrb	r3, [r7, #3]
 800232a:	f003 020f 	and.w	r2, r3, #15
 800232e:	4613      	mov	r3, r2
 8002330:	00db      	lsls	r3, r3, #3
 8002332:	4413      	add	r3, r2
 8002334:	009b      	lsls	r3, r3, #2
 8002336:	3310      	adds	r3, #16
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	4413      	add	r3, r2
 800233c:	3304      	adds	r3, #4
 800233e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2201      	movs	r2, #1
 8002344:	705a      	strb	r2, [r3, #1]
 8002346:	e00f      	b.n	8002368 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002348:	78fb      	ldrb	r3, [r7, #3]
 800234a:	f003 020f 	and.w	r2, r3, #15
 800234e:	4613      	mov	r3, r2
 8002350:	00db      	lsls	r3, r3, #3
 8002352:	4413      	add	r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800235a:	687a      	ldr	r2, [r7, #4]
 800235c:	4413      	add	r3, r2
 800235e:	3304      	adds	r3, #4
 8002360:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	2200      	movs	r2, #0
 8002366:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8002368:	78fb      	ldrb	r3, [r7, #3]
 800236a:	f003 030f 	and.w	r3, r3, #15
 800236e:	b2da      	uxtb	r2, r3
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800237a:	2b01      	cmp	r3, #1
 800237c:	d101      	bne.n	8002382 <HAL_PCD_EP_Close+0x6e>
 800237e:	2302      	movs	r3, #2
 8002380:	e00e      	b.n	80023a0 <HAL_PCD_EP_Close+0x8c>
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	68f9      	ldr	r1, [r7, #12]
 8002390:	4618      	mov	r0, r3
 8002392:	f002 fca1 	bl	8004cd8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2200      	movs	r2, #0
 800239a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 800239e:	2300      	movs	r3, #0
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	3710      	adds	r7, #16
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd80      	pop	{r7, pc}

080023a8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b086      	sub	sp, #24
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	60f8      	str	r0, [r7, #12]
 80023b0:	607a      	str	r2, [r7, #4]
 80023b2:	603b      	str	r3, [r7, #0]
 80023b4:	460b      	mov	r3, r1
 80023b6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80023b8:	7afb      	ldrb	r3, [r7, #11]
 80023ba:	f003 020f 	and.w	r2, r3, #15
 80023be:	4613      	mov	r3, r2
 80023c0:	00db      	lsls	r3, r3, #3
 80023c2:	4413      	add	r3, r2
 80023c4:	009b      	lsls	r3, r3, #2
 80023c6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80023ca:	68fa      	ldr	r2, [r7, #12]
 80023cc:	4413      	add	r3, r2
 80023ce:	3304      	adds	r3, #4
 80023d0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	687a      	ldr	r2, [r7, #4]
 80023d6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80023d8:	697b      	ldr	r3, [r7, #20]
 80023da:	683a      	ldr	r2, [r7, #0]
 80023dc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2200      	movs	r2, #0
 80023e2:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2200      	movs	r2, #0
 80023e8:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80023ea:	7afb      	ldrb	r3, [r7, #11]
 80023ec:	f003 030f 	and.w	r3, r3, #15
 80023f0:	b2da      	uxtb	r2, r3
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	799b      	ldrb	r3, [r3, #6]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d102      	bne.n	8002404 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80023fe:	687a      	ldr	r2, [r7, #4]
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	6818      	ldr	r0, [r3, #0]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	799b      	ldrb	r3, [r3, #6]
 800240c:	461a      	mov	r2, r3
 800240e:	6979      	ldr	r1, [r7, #20]
 8002410:	f002 fd3e 	bl	8004e90 <USB_EPStartXfer>

  return HAL_OK;
 8002414:	2300      	movs	r3, #0
}
 8002416:	4618      	mov	r0, r3
 8002418:	3718      	adds	r7, #24
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800241e:	b480      	push	{r7}
 8002420:	b083      	sub	sp, #12
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800242a:	78fb      	ldrb	r3, [r7, #3]
 800242c:	f003 020f 	and.w	r2, r3, #15
 8002430:	6879      	ldr	r1, [r7, #4]
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	440b      	add	r3, r1
 800243c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8002440:	681b      	ldr	r3, [r3, #0]
}
 8002442:	4618      	mov	r0, r3
 8002444:	370c      	adds	r7, #12
 8002446:	46bd      	mov	sp, r7
 8002448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244c:	4770      	bx	lr

0800244e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800244e:	b580      	push	{r7, lr}
 8002450:	b086      	sub	sp, #24
 8002452:	af00      	add	r7, sp, #0
 8002454:	60f8      	str	r0, [r7, #12]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
 800245a:	460b      	mov	r3, r1
 800245c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800245e:	7afb      	ldrb	r3, [r7, #11]
 8002460:	f003 020f 	and.w	r2, r3, #15
 8002464:	4613      	mov	r3, r2
 8002466:	00db      	lsls	r3, r3, #3
 8002468:	4413      	add	r3, r2
 800246a:	009b      	lsls	r3, r3, #2
 800246c:	3310      	adds	r3, #16
 800246e:	68fa      	ldr	r2, [r7, #12]
 8002470:	4413      	add	r3, r2
 8002472:	3304      	adds	r3, #4
 8002474:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002476:	697b      	ldr	r3, [r7, #20]
 8002478:	687a      	ldr	r2, [r7, #4]
 800247a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	683a      	ldr	r2, [r7, #0]
 8002480:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 8002482:	697b      	ldr	r3, [r7, #20]
 8002484:	2200      	movs	r2, #0
 8002486:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 8002488:	697b      	ldr	r3, [r7, #20]
 800248a:	2201      	movs	r2, #1
 800248c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800248e:	7afb      	ldrb	r3, [r7, #11]
 8002490:	f003 030f 	and.w	r3, r3, #15
 8002494:	b2da      	uxtb	r2, r3
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	799b      	ldrb	r3, [r3, #6]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d102      	bne.n	80024a8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	697b      	ldr	r3, [r7, #20]
 80024a6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6818      	ldr	r0, [r3, #0]
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	799b      	ldrb	r3, [r3, #6]
 80024b0:	461a      	mov	r2, r3
 80024b2:	6979      	ldr	r1, [r7, #20]
 80024b4:	f002 fcec 	bl	8004e90 <USB_EPStartXfer>

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3718      	adds	r7, #24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024c2:	b580      	push	{r7, lr}
 80024c4:	b084      	sub	sp, #16
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
 80024ca:	460b      	mov	r3, r1
 80024cc:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80024ce:	78fb      	ldrb	r3, [r7, #3]
 80024d0:	f003 030f 	and.w	r3, r3, #15
 80024d4:	687a      	ldr	r2, [r7, #4]
 80024d6:	7912      	ldrb	r2, [r2, #4]
 80024d8:	4293      	cmp	r3, r2
 80024da:	d901      	bls.n	80024e0 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e04f      	b.n	8002580 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80024e0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	da0f      	bge.n	8002508 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024e8:	78fb      	ldrb	r3, [r7, #3]
 80024ea:	f003 020f 	and.w	r2, r3, #15
 80024ee:	4613      	mov	r3, r2
 80024f0:	00db      	lsls	r3, r3, #3
 80024f2:	4413      	add	r3, r2
 80024f4:	009b      	lsls	r3, r3, #2
 80024f6:	3310      	adds	r3, #16
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	4413      	add	r3, r2
 80024fc:	3304      	adds	r3, #4
 80024fe:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	2201      	movs	r2, #1
 8002504:	705a      	strb	r2, [r3, #1]
 8002506:	e00d      	b.n	8002524 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002508:	78fa      	ldrb	r2, [r7, #3]
 800250a:	4613      	mov	r3, r2
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	4413      	add	r3, r2
 8002510:	009b      	lsls	r3, r3, #2
 8002512:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	4413      	add	r3, r2
 800251a:	3304      	adds	r3, #4
 800251c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	2201      	movs	r2, #1
 8002528:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800252a:	78fb      	ldrb	r3, [r7, #3]
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	b2da      	uxtb	r2, r3
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800253c:	2b01      	cmp	r3, #1
 800253e:	d101      	bne.n	8002544 <HAL_PCD_EP_SetStall+0x82>
 8002540:	2302      	movs	r3, #2
 8002542:	e01d      	b.n	8002580 <HAL_PCD_EP_SetStall+0xbe>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	68f9      	ldr	r1, [r7, #12]
 8002552:	4618      	mov	r0, r3
 8002554:	f003 f87a 	bl	800564c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002558:	78fb      	ldrb	r3, [r7, #3]
 800255a:	f003 030f 	and.w	r3, r3, #15
 800255e:	2b00      	cmp	r3, #0
 8002560:	d109      	bne.n	8002576 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	6818      	ldr	r0, [r3, #0]
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	7999      	ldrb	r1, [r3, #6]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002570:	461a      	mov	r2, r3
 8002572:	f003 fa6b 	bl	8005a4c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800257e:	2300      	movs	r3, #0
}
 8002580:	4618      	mov	r0, r3
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	460b      	mov	r3, r1
 8002592:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002594:	78fb      	ldrb	r3, [r7, #3]
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	7912      	ldrb	r2, [r2, #4]
 800259e:	4293      	cmp	r3, r2
 80025a0:	d901      	bls.n	80025a6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	e042      	b.n	800262c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80025a6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	da0f      	bge.n	80025ce <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025ae:	78fb      	ldrb	r3, [r7, #3]
 80025b0:	f003 020f 	and.w	r2, r3, #15
 80025b4:	4613      	mov	r3, r2
 80025b6:	00db      	lsls	r3, r3, #3
 80025b8:	4413      	add	r3, r2
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	3310      	adds	r3, #16
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	4413      	add	r3, r2
 80025c2:	3304      	adds	r3, #4
 80025c4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2201      	movs	r2, #1
 80025ca:	705a      	strb	r2, [r3, #1]
 80025cc:	e00f      	b.n	80025ee <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80025ce:	78fb      	ldrb	r3, [r7, #3]
 80025d0:	f003 020f 	and.w	r2, r3, #15
 80025d4:	4613      	mov	r3, r2
 80025d6:	00db      	lsls	r3, r3, #3
 80025d8:	4413      	add	r3, r2
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80025e0:	687a      	ldr	r2, [r7, #4]
 80025e2:	4413      	add	r3, r2
 80025e4:	3304      	adds	r3, #4
 80025e6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	2200      	movs	r2, #0
 80025ec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2200      	movs	r2, #0
 80025f2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80025f4:	78fb      	ldrb	r3, [r7, #3]
 80025f6:	f003 030f 	and.w	r3, r3, #15
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_PCD_EP_ClrStall+0x86>
 800260a:	2302      	movs	r3, #2
 800260c:	e00e      	b.n	800262c <HAL_PCD_EP_ClrStall+0xa4>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	68f9      	ldr	r1, [r7, #12]
 800261c:	4618      	mov	r0, r3
 800261e:	f003 f883 	bl	8005728 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2200      	movs	r2, #0
 8002626:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800262a:	2300      	movs	r3, #0
}
 800262c:	4618      	mov	r0, r3
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b084      	sub	sp, #16
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
 800263c:	460b      	mov	r3, r1
 800263e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002644:	2b00      	cmp	r3, #0
 8002646:	da0c      	bge.n	8002662 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002648:	78fb      	ldrb	r3, [r7, #3]
 800264a:	f003 020f 	and.w	r2, r3, #15
 800264e:	4613      	mov	r3, r2
 8002650:	00db      	lsls	r3, r3, #3
 8002652:	4413      	add	r3, r2
 8002654:	009b      	lsls	r3, r3, #2
 8002656:	3310      	adds	r3, #16
 8002658:	687a      	ldr	r2, [r7, #4]
 800265a:	4413      	add	r3, r2
 800265c:	3304      	adds	r3, #4
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	e00c      	b.n	800267c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002662:	78fb      	ldrb	r3, [r7, #3]
 8002664:	f003 020f 	and.w	r2, r3, #15
 8002668:	4613      	mov	r3, r2
 800266a:	00db      	lsls	r3, r3, #3
 800266c:	4413      	add	r3, r2
 800266e:	009b      	lsls	r3, r3, #2
 8002670:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	4413      	add	r3, r2
 8002678:	3304      	adds	r3, #4
 800267a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	68f9      	ldr	r1, [r7, #12]
 8002682:	4618      	mov	r0, r3
 8002684:	f002 fea2 	bl	80053cc <USB_EPStopXfer>
 8002688:	4603      	mov	r3, r0
 800268a:	72fb      	strb	r3, [r7, #11]

  return ret;
 800268c:	7afb      	ldrb	r3, [r7, #11]
}
 800268e:	4618      	mov	r0, r3
 8002690:	3710      	adds	r7, #16
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}

08002696 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002696:	b580      	push	{r7, lr}
 8002698:	b08a      	sub	sp, #40	@ 0x28
 800269a:	af02      	add	r7, sp, #8
 800269c:	6078      	str	r0, [r7, #4]
 800269e:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80026aa:	683a      	ldr	r2, [r7, #0]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	3310      	adds	r3, #16
 80026b6:	687a      	ldr	r2, [r7, #4]
 80026b8:	4413      	add	r3, r2
 80026ba:	3304      	adds	r3, #4
 80026bc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	695a      	ldr	r2, [r3, #20]
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	691b      	ldr	r3, [r3, #16]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d901      	bls.n	80026ce <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	e06b      	b.n	80027a6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	691a      	ldr	r2, [r3, #16]
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	695b      	ldr	r3, [r3, #20]
 80026d6:	1ad3      	subs	r3, r2, r3
 80026d8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	69fa      	ldr	r2, [r7, #28]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d902      	bls.n	80026ea <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	3303      	adds	r3, #3
 80026ee:	089b      	lsrs	r3, r3, #2
 80026f0:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80026f2:	e02a      	b.n	800274a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	691a      	ldr	r2, [r3, #16]
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	695b      	ldr	r3, [r3, #20]
 80026fc:	1ad3      	subs	r3, r2, r3
 80026fe:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002700:	68fb      	ldr	r3, [r7, #12]
 8002702:	689b      	ldr	r3, [r3, #8]
 8002704:	69fa      	ldr	r2, [r7, #28]
 8002706:	429a      	cmp	r2, r3
 8002708:	d902      	bls.n	8002710 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	689b      	ldr	r3, [r3, #8]
 800270e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002710:	69fb      	ldr	r3, [r7, #28]
 8002712:	3303      	adds	r3, #3
 8002714:	089b      	lsrs	r3, r3, #2
 8002716:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	68d9      	ldr	r1, [r3, #12]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	b2da      	uxtb	r2, r3
 8002720:	69fb      	ldr	r3, [r7, #28]
 8002722:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002728:	9300      	str	r3, [sp, #0]
 800272a:	4603      	mov	r3, r0
 800272c:	6978      	ldr	r0, [r7, #20]
 800272e:	f002 fef7 	bl	8005520 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	68da      	ldr	r2, [r3, #12]
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	441a      	add	r2, r3
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	695a      	ldr	r2, [r3, #20]
 8002742:	69fb      	ldr	r3, [r7, #28]
 8002744:	441a      	add	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	4413      	add	r3, r2
 8002752:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8002756:	699b      	ldr	r3, [r3, #24]
 8002758:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800275a:	69ba      	ldr	r2, [r7, #24]
 800275c:	429a      	cmp	r2, r3
 800275e:	d809      	bhi.n	8002774 <PCD_WriteEmptyTxFifo+0xde>
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	695a      	ldr	r2, [r3, #20]
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002768:	429a      	cmp	r2, r3
 800276a:	d203      	bcs.n	8002774 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	691b      	ldr	r3, [r3, #16]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d1bf      	bne.n	80026f4 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	695b      	ldr	r3, [r3, #20]
 800277c:	429a      	cmp	r2, r3
 800277e:	d811      	bhi.n	80027a4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	f003 030f 	and.w	r3, r3, #15
 8002786:	2201      	movs	r2, #1
 8002788:	fa02 f303 	lsl.w	r3, r2, r3
 800278c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8002794:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002796:	68bb      	ldr	r3, [r7, #8]
 8002798:	43db      	mvns	r3, r3
 800279a:	6939      	ldr	r1, [r7, #16]
 800279c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80027a0:	4013      	ands	r3, r2
 80027a2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3720      	adds	r7, #32
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
	...

080027b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b088      	sub	sp, #32
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80027c4:	69fb      	ldr	r3, [r7, #28]
 80027c6:	333c      	adds	r3, #60	@ 0x3c
 80027c8:	3304      	adds	r3, #4
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	015a      	lsls	r2, r3, #5
 80027d2:	69bb      	ldr	r3, [r7, #24]
 80027d4:	4413      	add	r3, r2
 80027d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80027da:	689b      	ldr	r3, [r3, #8]
 80027dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	799b      	ldrb	r3, [r3, #6]
 80027e2:	2b01      	cmp	r3, #1
 80027e4:	d17b      	bne.n	80028de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	f003 0308 	and.w	r3, r3, #8
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d015      	beq.n	800281c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	4a61      	ldr	r2, [pc, #388]	@ (8002978 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80027f4:	4293      	cmp	r3, r2
 80027f6:	f240 80b9 	bls.w	800296c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80027fa:	693b      	ldr	r3, [r7, #16]
 80027fc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002800:	2b00      	cmp	r3, #0
 8002802:	f000 80b3 	beq.w	800296c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	015a      	lsls	r2, r3, #5
 800280a:	69bb      	ldr	r3, [r7, #24]
 800280c:	4413      	add	r3, r2
 800280e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002812:	461a      	mov	r2, r3
 8002814:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002818:	6093      	str	r3, [r2, #8]
 800281a:	e0a7      	b.n	800296c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800281c:	693b      	ldr	r3, [r7, #16]
 800281e:	f003 0320 	and.w	r3, r3, #32
 8002822:	2b00      	cmp	r3, #0
 8002824:	d009      	beq.n	800283a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	015a      	lsls	r2, r3, #5
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	4413      	add	r3, r2
 800282e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002832:	461a      	mov	r2, r3
 8002834:	2320      	movs	r3, #32
 8002836:	6093      	str	r3, [r2, #8]
 8002838:	e098      	b.n	800296c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800283a:	693b      	ldr	r3, [r7, #16]
 800283c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8002840:	2b00      	cmp	r3, #0
 8002842:	f040 8093 	bne.w	800296c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002846:	697b      	ldr	r3, [r7, #20]
 8002848:	4a4b      	ldr	r2, [pc, #300]	@ (8002978 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d90f      	bls.n	800286e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800284e:	693b      	ldr	r3, [r7, #16]
 8002850:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002854:	2b00      	cmp	r3, #0
 8002856:	d00a      	beq.n	800286e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	015a      	lsls	r2, r3, #5
 800285c:	69bb      	ldr	r3, [r7, #24]
 800285e:	4413      	add	r3, r2
 8002860:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002864:	461a      	mov	r2, r3
 8002866:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800286a:	6093      	str	r3, [r2, #8]
 800286c:	e07e      	b.n	800296c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800286e:	683a      	ldr	r2, [r7, #0]
 8002870:	4613      	mov	r3, r2
 8002872:	00db      	lsls	r3, r3, #3
 8002874:	4413      	add	r3, r2
 8002876:	009b      	lsls	r3, r3, #2
 8002878:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800287c:	687a      	ldr	r2, [r7, #4]
 800287e:	4413      	add	r3, r2
 8002880:	3304      	adds	r3, #4
 8002882:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	6a1a      	ldr	r2, [r3, #32]
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	0159      	lsls	r1, r3, #5
 800288c:	69bb      	ldr	r3, [r7, #24]
 800288e:	440b      	add	r3, r1
 8002890:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8002894:	691b      	ldr	r3, [r3, #16]
 8002896:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800289a:	1ad2      	subs	r2, r2, r3
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d114      	bne.n	80028d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	691b      	ldr	r3, [r3, #16]
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	6818      	ldr	r0, [r3, #0]
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80028b8:	461a      	mov	r2, r3
 80028ba:	2101      	movs	r1, #1
 80028bc:	f003 f8c6 	bl	8005a4c <USB_EP0_OutStart>
 80028c0:	e006      	b.n	80028d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	68da      	ldr	r2, [r3, #12]
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	441a      	add	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2db      	uxtb	r3, r3
 80028d4:	4619      	mov	r1, r3
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	f005 fb44 	bl	8007f64 <HAL_PCD_DataOutStageCallback>
 80028dc:	e046      	b.n	800296c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	4a26      	ldr	r2, [pc, #152]	@ (800297c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d124      	bne.n	8002930 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d00a      	beq.n	8002906 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	015a      	lsls	r2, r3, #5
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	4413      	add	r3, r2
 80028f8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80028fc:	461a      	mov	r2, r3
 80028fe:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002902:	6093      	str	r3, [r2, #8]
 8002904:	e032      	b.n	800296c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002906:	693b      	ldr	r3, [r7, #16]
 8002908:	f003 0320 	and.w	r3, r3, #32
 800290c:	2b00      	cmp	r3, #0
 800290e:	d008      	beq.n	8002922 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	015a      	lsls	r2, r3, #5
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	4413      	add	r3, r2
 8002918:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800291c:	461a      	mov	r2, r3
 800291e:	2320      	movs	r3, #32
 8002920:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4619      	mov	r1, r3
 8002928:	6878      	ldr	r0, [r7, #4]
 800292a:	f005 fb1b 	bl	8007f64 <HAL_PCD_DataOutStageCallback>
 800292e:	e01d      	b.n	800296c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d114      	bne.n	8002960 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002936:	6879      	ldr	r1, [r7, #4]
 8002938:	683a      	ldr	r2, [r7, #0]
 800293a:	4613      	mov	r3, r2
 800293c:	00db      	lsls	r3, r3, #3
 800293e:	4413      	add	r3, r2
 8002940:	009b      	lsls	r3, r3, #2
 8002942:	440b      	add	r3, r1
 8002944:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d108      	bne.n	8002960 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6818      	ldr	r0, [r3, #0]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8002958:	461a      	mov	r2, r3
 800295a:	2100      	movs	r1, #0
 800295c:	f003 f876 	bl	8005a4c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	b2db      	uxtb	r3, r3
 8002964:	4619      	mov	r1, r3
 8002966:	6878      	ldr	r0, [r7, #4]
 8002968:	f005 fafc 	bl	8007f64 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	4618      	mov	r0, r3
 8002970:	3720      	adds	r7, #32
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	4f54300a 	.word	0x4f54300a
 800297c:	4f54310a 	.word	0x4f54310a

08002980 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b086      	sub	sp, #24
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]
 8002988:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8002994:	697b      	ldr	r3, [r7, #20]
 8002996:	333c      	adds	r3, #60	@ 0x3c
 8002998:	3304      	adds	r3, #4
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	015a      	lsls	r2, r3, #5
 80029a2:	693b      	ldr	r3, [r7, #16]
 80029a4:	4413      	add	r3, r2
 80029a6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029aa:	689b      	ldr	r3, [r3, #8]
 80029ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	4a15      	ldr	r2, [pc, #84]	@ (8002a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d90e      	bls.n	80029d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d009      	beq.n	80029d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029c0:	683b      	ldr	r3, [r7, #0]
 80029c2:	015a      	lsls	r2, r3, #5
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	4413      	add	r3, r2
 80029c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80029cc:	461a      	mov	r2, r3
 80029ce:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80029d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80029d4:	6878      	ldr	r0, [r7, #4]
 80029d6:	f005 fab3 	bl	8007f40 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002a08 <PCD_EP_OutSetupPacket_int+0x88>)
 80029de:	4293      	cmp	r3, r2
 80029e0:	d90c      	bls.n	80029fc <PCD_EP_OutSetupPacket_int+0x7c>
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	799b      	ldrb	r3, [r3, #6]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d108      	bne.n	80029fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6818      	ldr	r0, [r3, #0]
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 80029f4:	461a      	mov	r2, r3
 80029f6:	2101      	movs	r1, #1
 80029f8:	f003 f828 	bl	8005a4c <USB_EP0_OutStart>
  }

  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3718      	adds	r7, #24
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}
 8002a06:	bf00      	nop
 8002a08:	4f54300a 	.word	0x4f54300a

08002a0c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	b085      	sub	sp, #20
 8002a10:	af00      	add	r7, sp, #0
 8002a12:	6078      	str	r0, [r7, #4]
 8002a14:	460b      	mov	r3, r1
 8002a16:	70fb      	strb	r3, [r7, #3]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002a22:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d107      	bne.n	8002a3a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002a2a:	883b      	ldrh	r3, [r7, #0]
 8002a2c:	0419      	lsls	r1, r3, #16
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	68ba      	ldr	r2, [r7, #8]
 8002a34:	430a      	orrs	r2, r1
 8002a36:	629a      	str	r2, [r3, #40]	@ 0x28
 8002a38:	e028      	b.n	8002a8c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	4413      	add	r3, r2
 8002a46:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a48:	2300      	movs	r3, #0
 8002a4a:	73fb      	strb	r3, [r7, #15]
 8002a4c:	e00d      	b.n	8002a6a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681a      	ldr	r2, [r3, #0]
 8002a52:	7bfb      	ldrb	r3, [r7, #15]
 8002a54:	3340      	adds	r3, #64	@ 0x40
 8002a56:	009b      	lsls	r3, r3, #2
 8002a58:	4413      	add	r3, r2
 8002a5a:	685b      	ldr	r3, [r3, #4]
 8002a5c:	0c1b      	lsrs	r3, r3, #16
 8002a5e:	68ba      	ldr	r2, [r7, #8]
 8002a60:	4413      	add	r3, r2
 8002a62:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002a64:	7bfb      	ldrb	r3, [r7, #15]
 8002a66:	3301      	adds	r3, #1
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	7bfa      	ldrb	r2, [r7, #15]
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	3b01      	subs	r3, #1
 8002a70:	429a      	cmp	r2, r3
 8002a72:	d3ec      	bcc.n	8002a4e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002a74:	883b      	ldrh	r3, [r7, #0]
 8002a76:	0418      	lsls	r0, r3, #16
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6819      	ldr	r1, [r3, #0]
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	68ba      	ldr	r2, [r7, #8]
 8002a82:	4302      	orrs	r2, r0
 8002a84:	3340      	adds	r3, #64	@ 0x40
 8002a86:	009b      	lsls	r3, r3, #2
 8002a88:	440b      	add	r3, r1
 8002a8a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002a8c:	2300      	movs	r3, #0
}
 8002a8e:	4618      	mov	r0, r3
 8002a90:	3714      	adds	r7, #20
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	b083      	sub	sp, #12
 8002a9e:	af00      	add	r7, sp, #0
 8002aa0:	6078      	str	r0, [r7, #4]
 8002aa2:	460b      	mov	r3, r1
 8002aa4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	887a      	ldrh	r2, [r7, #2]
 8002aac:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8002aae:	2300      	movs	r3, #0
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
 8002ac4:	460b      	mov	r3, r1
 8002ac6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002ac8:	bf00      	nop
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b086      	sub	sp, #24
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d101      	bne.n	8002ae6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ae2:	2301      	movs	r3, #1
 8002ae4:	e267      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f003 0301 	and.w	r3, r3, #1
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d075      	beq.n	8002bde <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002af2:	4b88      	ldr	r3, [pc, #544]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002af4:	689b      	ldr	r3, [r3, #8]
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d00c      	beq.n	8002b18 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002afe:	4b85      	ldr	r3, [pc, #532]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b06:	2b08      	cmp	r3, #8
 8002b08:	d112      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b0a:	4b82      	ldr	r3, [pc, #520]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b12:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b16:	d10b      	bne.n	8002b30 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b18:	4b7e      	ldr	r3, [pc, #504]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d05b      	beq.n	8002bdc <HAL_RCC_OscConfig+0x108>
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	685b      	ldr	r3, [r3, #4]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d157      	bne.n	8002bdc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	e242      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b38:	d106      	bne.n	8002b48 <HAL_RCC_OscConfig+0x74>
 8002b3a:	4b76      	ldr	r3, [pc, #472]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a75      	ldr	r2, [pc, #468]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b44:	6013      	str	r3, [r2, #0]
 8002b46:	e01d      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b50:	d10c      	bne.n	8002b6c <HAL_RCC_OscConfig+0x98>
 8002b52:	4b70      	ldr	r3, [pc, #448]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a6f      	ldr	r2, [pc, #444]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b5c:	6013      	str	r3, [r2, #0]
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a6c      	ldr	r2, [pc, #432]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b68:	6013      	str	r3, [r2, #0]
 8002b6a:	e00b      	b.n	8002b84 <HAL_RCC_OscConfig+0xb0>
 8002b6c:	4b69      	ldr	r3, [pc, #420]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a68      	ldr	r2, [pc, #416]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b76:	6013      	str	r3, [r2, #0]
 8002b78:	4b66      	ldr	r3, [pc, #408]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a65      	ldr	r2, [pc, #404]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002b7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	685b      	ldr	r3, [r3, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d013      	beq.n	8002bb4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b8c:	f7fe fa56 	bl	800103c <HAL_GetTick>
 8002b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b92:	e008      	b.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002b94:	f7fe fa52 	bl	800103c <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	1ad3      	subs	r3, r2, r3
 8002b9e:	2b64      	cmp	r3, #100	@ 0x64
 8002ba0:	d901      	bls.n	8002ba6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ba2:	2303      	movs	r3, #3
 8002ba4:	e207      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	4b5b      	ldr	r3, [pc, #364]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d0f0      	beq.n	8002b94 <HAL_RCC_OscConfig+0xc0>
 8002bb2:	e014      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bb4:	f7fe fa42 	bl	800103c <HAL_GetTick>
 8002bb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bba:	e008      	b.n	8002bce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bbc:	f7fe fa3e 	bl	800103c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	693b      	ldr	r3, [r7, #16]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b64      	cmp	r3, #100	@ 0x64
 8002bc8:	d901      	bls.n	8002bce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e1f3      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	4b51      	ldr	r3, [pc, #324]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d1f0      	bne.n	8002bbc <HAL_RCC_OscConfig+0xe8>
 8002bda:	e000      	b.n	8002bde <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d063      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bea:	4b4a      	ldr	r3, [pc, #296]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 030c 	and.w	r3, r3, #12
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d00b      	beq.n	8002c0e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002bf6:	4b47      	ldr	r3, [pc, #284]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002bf8:	689b      	ldr	r3, [r3, #8]
 8002bfa:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d11c      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c02:	4b44      	ldr	r3, [pc, #272]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d116      	bne.n	8002c3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c0e:	4b41      	ldr	r3, [pc, #260]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0302 	and.w	r3, r3, #2
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d005      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d001      	beq.n	8002c26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e1c7      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c26:	4b3b      	ldr	r3, [pc, #236]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	691b      	ldr	r3, [r3, #16]
 8002c32:	00db      	lsls	r3, r3, #3
 8002c34:	4937      	ldr	r1, [pc, #220]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c36:	4313      	orrs	r3, r2
 8002c38:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c3a:	e03a      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d020      	beq.n	8002c86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c44:	4b34      	ldr	r3, [pc, #208]	@ (8002d18 <HAL_RCC_OscConfig+0x244>)
 8002c46:	2201      	movs	r2, #1
 8002c48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c4a:	f7fe f9f7 	bl	800103c <HAL_GetTick>
 8002c4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c50:	e008      	b.n	8002c64 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c52:	f7fe f9f3 	bl	800103c <HAL_GetTick>
 8002c56:	4602      	mov	r2, r0
 8002c58:	693b      	ldr	r3, [r7, #16]
 8002c5a:	1ad3      	subs	r3, r2, r3
 8002c5c:	2b02      	cmp	r3, #2
 8002c5e:	d901      	bls.n	8002c64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c60:	2303      	movs	r3, #3
 8002c62:	e1a8      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	4b2b      	ldr	r3, [pc, #172]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0302 	and.w	r3, r3, #2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d0f0      	beq.n	8002c52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c70:	4b28      	ldr	r3, [pc, #160]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	691b      	ldr	r3, [r3, #16]
 8002c7c:	00db      	lsls	r3, r3, #3
 8002c7e:	4925      	ldr	r1, [pc, #148]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002c80:	4313      	orrs	r3, r2
 8002c82:	600b      	str	r3, [r1, #0]
 8002c84:	e015      	b.n	8002cb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c86:	4b24      	ldr	r3, [pc, #144]	@ (8002d18 <HAL_RCC_OscConfig+0x244>)
 8002c88:	2200      	movs	r2, #0
 8002c8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c8c:	f7fe f9d6 	bl	800103c <HAL_GetTick>
 8002c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002c92:	e008      	b.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c94:	f7fe f9d2 	bl	800103c <HAL_GetTick>
 8002c98:	4602      	mov	r2, r0
 8002c9a:	693b      	ldr	r3, [r7, #16]
 8002c9c:	1ad3      	subs	r3, r2, r3
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e187      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	4b1b      	ldr	r3, [pc, #108]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d1f0      	bne.n	8002c94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0308 	and.w	r3, r3, #8
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d036      	beq.n	8002d2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	695b      	ldr	r3, [r3, #20]
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d016      	beq.n	8002cf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cc6:	4b15      	ldr	r3, [pc, #84]	@ (8002d1c <HAL_RCC_OscConfig+0x248>)
 8002cc8:	2201      	movs	r2, #1
 8002cca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ccc:	f7fe f9b6 	bl	800103c <HAL_GetTick>
 8002cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cd2:	e008      	b.n	8002ce6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002cd4:	f7fe f9b2 	bl	800103c <HAL_GetTick>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	1ad3      	subs	r3, r2, r3
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e167      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	4b0b      	ldr	r3, [pc, #44]	@ (8002d14 <HAL_RCC_OscConfig+0x240>)
 8002ce8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cea:	f003 0302 	and.w	r3, r3, #2
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d0f0      	beq.n	8002cd4 <HAL_RCC_OscConfig+0x200>
 8002cf2:	e01b      	b.n	8002d2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002cf4:	4b09      	ldr	r3, [pc, #36]	@ (8002d1c <HAL_RCC_OscConfig+0x248>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cfa:	f7fe f99f 	bl	800103c <HAL_GetTick>
 8002cfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d00:	e00e      	b.n	8002d20 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d02:	f7fe f99b 	bl	800103c <HAL_GetTick>
 8002d06:	4602      	mov	r2, r0
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	1ad3      	subs	r3, r2, r3
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d907      	bls.n	8002d20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d10:	2303      	movs	r3, #3
 8002d12:	e150      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
 8002d14:	40023800 	.word	0x40023800
 8002d18:	42470000 	.word	0x42470000
 8002d1c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d20:	4b88      	ldr	r3, [pc, #544]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d22:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d24:	f003 0302 	and.w	r3, r3, #2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d1ea      	bne.n	8002d02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0304 	and.w	r3, r3, #4
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	f000 8097 	beq.w	8002e68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d3a:	2300      	movs	r3, #0
 8002d3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d3e:	4b81      	ldr	r3, [pc, #516]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d10f      	bne.n	8002d6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60bb      	str	r3, [r7, #8]
 8002d4e:	4b7d      	ldr	r3, [pc, #500]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d52:	4a7c      	ldr	r2, [pc, #496]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d54:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d58:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d5a:	4b7a      	ldr	r3, [pc, #488]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002d5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d5e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d62:	60bb      	str	r3, [r7, #8]
 8002d64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d66:	2301      	movs	r3, #1
 8002d68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d6a:	4b77      	ldr	r3, [pc, #476]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d118      	bne.n	8002da8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d76:	4b74      	ldr	r3, [pc, #464]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	4a73      	ldr	r2, [pc, #460]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d82:	f7fe f95b 	bl	800103c <HAL_GetTick>
 8002d86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d88:	e008      	b.n	8002d9c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d8a:	f7fe f957 	bl	800103c <HAL_GetTick>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	693b      	ldr	r3, [r7, #16]
 8002d92:	1ad3      	subs	r3, r2, r3
 8002d94:	2b02      	cmp	r3, #2
 8002d96:	d901      	bls.n	8002d9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002d98:	2303      	movs	r3, #3
 8002d9a:	e10c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	4b6a      	ldr	r3, [pc, #424]	@ (8002f48 <HAL_RCC_OscConfig+0x474>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d0f0      	beq.n	8002d8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d106      	bne.n	8002dbe <HAL_RCC_OscConfig+0x2ea>
 8002db0:	4b64      	ldr	r3, [pc, #400]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002db2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002db4:	4a63      	ldr	r2, [pc, #396]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002db6:	f043 0301 	orr.w	r3, r3, #1
 8002dba:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dbc:	e01c      	b.n	8002df8 <HAL_RCC_OscConfig+0x324>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	2b05      	cmp	r3, #5
 8002dc4:	d10c      	bne.n	8002de0 <HAL_RCC_OscConfig+0x30c>
 8002dc6:	4b5f      	ldr	r3, [pc, #380]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dca:	4a5e      	ldr	r2, [pc, #376]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dcc:	f043 0304 	orr.w	r3, r3, #4
 8002dd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd2:	4b5c      	ldr	r3, [pc, #368]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dd4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dd6:	4a5b      	ldr	r2, [pc, #364]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dde:	e00b      	b.n	8002df8 <HAL_RCC_OscConfig+0x324>
 8002de0:	4b58      	ldr	r3, [pc, #352]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002de2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002de4:	4a57      	ldr	r2, [pc, #348]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002de6:	f023 0301 	bic.w	r3, r3, #1
 8002dea:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dec:	4b55      	ldr	r3, [pc, #340]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002dee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df0:	4a54      	ldr	r2, [pc, #336]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002df2:	f023 0304 	bic.w	r3, r3, #4
 8002df6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d015      	beq.n	8002e2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e00:	f7fe f91c 	bl	800103c <HAL_GetTick>
 8002e04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e06:	e00a      	b.n	8002e1e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e08:	f7fe f918 	bl	800103c <HAL_GetTick>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	693b      	ldr	r3, [r7, #16]
 8002e10:	1ad3      	subs	r3, r2, r3
 8002e12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d901      	bls.n	8002e1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e0cb      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1e:	4b49      	ldr	r3, [pc, #292]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	f003 0302 	and.w	r3, r3, #2
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d0ee      	beq.n	8002e08 <HAL_RCC_OscConfig+0x334>
 8002e2a:	e014      	b.n	8002e56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e2c:	f7fe f906 	bl	800103c <HAL_GetTick>
 8002e30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e32:	e00a      	b.n	8002e4a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e34:	f7fe f902 	bl	800103c <HAL_GetTick>
 8002e38:	4602      	mov	r2, r0
 8002e3a:	693b      	ldr	r3, [r7, #16]
 8002e3c:	1ad3      	subs	r3, r2, r3
 8002e3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e42:	4293      	cmp	r3, r2
 8002e44:	d901      	bls.n	8002e4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e46:	2303      	movs	r3, #3
 8002e48:	e0b5      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e4a:	4b3e      	ldr	r3, [pc, #248]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d1ee      	bne.n	8002e34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e56:	7dfb      	ldrb	r3, [r7, #23]
 8002e58:	2b01      	cmp	r3, #1
 8002e5a:	d105      	bne.n	8002e68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e5c:	4b39      	ldr	r3, [pc, #228]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e60:	4a38      	ldr	r2, [pc, #224]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e62:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e66:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	699b      	ldr	r3, [r3, #24]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a1 	beq.w	8002fb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e72:	4b34      	ldr	r3, [pc, #208]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b08      	cmp	r3, #8
 8002e7c:	d05c      	beq.n	8002f38 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	699b      	ldr	r3, [r3, #24]
 8002e82:	2b02      	cmp	r3, #2
 8002e84:	d141      	bne.n	8002f0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e86:	4b31      	ldr	r3, [pc, #196]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e8c:	f7fe f8d6 	bl	800103c <HAL_GetTick>
 8002e90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e92:	e008      	b.n	8002ea6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e94:	f7fe f8d2 	bl	800103c <HAL_GetTick>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1ad3      	subs	r3, r2, r3
 8002e9e:	2b02      	cmp	r3, #2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e087      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	4b27      	ldr	r3, [pc, #156]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1f0      	bne.n	8002e94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69da      	ldr	r2, [r3, #28]
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6a1b      	ldr	r3, [r3, #32]
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec0:	019b      	lsls	r3, r3, #6
 8002ec2:	431a      	orrs	r2, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ec8:	085b      	lsrs	r3, r3, #1
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	041b      	lsls	r3, r3, #16
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ed4:	061b      	lsls	r3, r3, #24
 8002ed6:	491b      	ldr	r1, [pc, #108]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002ed8:	4313      	orrs	r3, r2
 8002eda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002edc:	4b1b      	ldr	r3, [pc, #108]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002ede:	2201      	movs	r2, #1
 8002ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ee2:	f7fe f8ab 	bl	800103c <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ee8:	e008      	b.n	8002efc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eea:	f7fe f8a7 	bl	800103c <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d901      	bls.n	8002efc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e05c      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efc:	4b11      	ldr	r3, [pc, #68]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d0f0      	beq.n	8002eea <HAL_RCC_OscConfig+0x416>
 8002f08:	e054      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f0a:	4b10      	ldr	r3, [pc, #64]	@ (8002f4c <HAL_RCC_OscConfig+0x478>)
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f10:	f7fe f894 	bl	800103c <HAL_GetTick>
 8002f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	e008      	b.n	8002f2a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f18:	f7fe f890 	bl	800103c <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d901      	bls.n	8002f2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f26:	2303      	movs	r3, #3
 8002f28:	e045      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	4b06      	ldr	r3, [pc, #24]	@ (8002f44 <HAL_RCC_OscConfig+0x470>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d1f0      	bne.n	8002f18 <HAL_RCC_OscConfig+0x444>
 8002f36:	e03d      	b.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	699b      	ldr	r3, [r3, #24]
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d107      	bne.n	8002f50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e038      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
 8002f44:	40023800 	.word	0x40023800
 8002f48:	40007000 	.word	0x40007000
 8002f4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f50:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc0 <HAL_RCC_OscConfig+0x4ec>)
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	699b      	ldr	r3, [r3, #24]
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d028      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f68:	429a      	cmp	r2, r3
 8002f6a:	d121      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f76:	429a      	cmp	r2, r3
 8002f78:	d11a      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f7a:	68fa      	ldr	r2, [r7, #12]
 8002f7c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f80:	4013      	ands	r3, r2
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d111      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002faa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fac:	429a      	cmp	r2, r3
 8002fae:	d001      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	e000      	b.n	8002fb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3718      	adds	r7, #24
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
 8002fbe:	bf00      	nop
 8002fc0:	40023800 	.word	0x40023800

08002fc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fc4:	b580      	push	{r7, lr}
 8002fc6:	b084      	sub	sp, #16
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	6078      	str	r0, [r7, #4]
 8002fcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d101      	bne.n	8002fd8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	e0cc      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fd8:	4b68      	ldr	r3, [pc, #416]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	f003 0307 	and.w	r3, r3, #7
 8002fe0:	683a      	ldr	r2, [r7, #0]
 8002fe2:	429a      	cmp	r2, r3
 8002fe4:	d90c      	bls.n	8003000 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002fe6:	4b65      	ldr	r3, [pc, #404]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002fe8:	683a      	ldr	r2, [r7, #0]
 8002fea:	b2d2      	uxtb	r2, r2
 8002fec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002fee:	4b63      	ldr	r3, [pc, #396]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f003 0307 	and.w	r3, r3, #7
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	429a      	cmp	r2, r3
 8002ffa:	d001      	beq.n	8003000 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002ffc:	2301      	movs	r3, #1
 8002ffe:	e0b8      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0302 	and.w	r3, r3, #2
 8003008:	2b00      	cmp	r3, #0
 800300a:	d020      	beq.n	800304e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f003 0304 	and.w	r3, r3, #4
 8003014:	2b00      	cmp	r3, #0
 8003016:	d005      	beq.n	8003024 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003018:	4b59      	ldr	r3, [pc, #356]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	4a58      	ldr	r2, [pc, #352]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800301e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003022:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f003 0308 	and.w	r3, r3, #8
 800302c:	2b00      	cmp	r3, #0
 800302e:	d005      	beq.n	800303c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003030:	4b53      	ldr	r3, [pc, #332]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	4a52      	ldr	r2, [pc, #328]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003036:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800303a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800303c:	4b50      	ldr	r3, [pc, #320]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800303e:	689b      	ldr	r3, [r3, #8]
 8003040:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	494d      	ldr	r1, [pc, #308]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	4313      	orrs	r3, r2
 800304c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	f003 0301 	and.w	r3, r3, #1
 8003056:	2b00      	cmp	r3, #0
 8003058:	d044      	beq.n	80030e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d107      	bne.n	8003072 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003062:	4b47      	ldr	r3, [pc, #284]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800306a:	2b00      	cmp	r3, #0
 800306c:	d119      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e07f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	2b02      	cmp	r3, #2
 8003078:	d003      	beq.n	8003082 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800307e:	2b03      	cmp	r3, #3
 8003080:	d107      	bne.n	8003092 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003082:	4b3f      	ldr	r3, [pc, #252]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800308a:	2b00      	cmp	r3, #0
 800308c:	d109      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	e06f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003092:	4b3b      	ldr	r3, [pc, #236]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f003 0302 	and.w	r3, r3, #2
 800309a:	2b00      	cmp	r3, #0
 800309c:	d101      	bne.n	80030a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800309e:	2301      	movs	r3, #1
 80030a0:	e067      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030a2:	4b37      	ldr	r3, [pc, #220]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	f023 0203 	bic.w	r2, r3, #3
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	4934      	ldr	r1, [pc, #208]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030b4:	f7fd ffc2 	bl	800103c <HAL_GetTick>
 80030b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030bc:	f7fd ffbe 	bl	800103c <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e04f      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030d2:	4b2b      	ldr	r3, [pc, #172]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 020c 	and.w	r2, r3, #12
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	009b      	lsls	r3, r3, #2
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d1eb      	bne.n	80030bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030e4:	4b25      	ldr	r3, [pc, #148]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d20c      	bcs.n	800310c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b22      	ldr	r3, [pc, #136]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030f4:	683a      	ldr	r2, [r7, #0]
 80030f6:	b2d2      	uxtb	r2, r2
 80030f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030fa:	4b20      	ldr	r3, [pc, #128]	@ (800317c <HAL_RCC_ClockConfig+0x1b8>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0307 	and.w	r3, r3, #7
 8003102:	683a      	ldr	r2, [r7, #0]
 8003104:	429a      	cmp	r2, r3
 8003106:	d001      	beq.n	800310c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e032      	b.n	8003172 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0304 	and.w	r3, r3, #4
 8003114:	2b00      	cmp	r3, #0
 8003116:	d008      	beq.n	800312a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003118:	4b19      	ldr	r3, [pc, #100]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 800311a:	689b      	ldr	r3, [r3, #8]
 800311c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	68db      	ldr	r3, [r3, #12]
 8003124:	4916      	ldr	r1, [pc, #88]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	4313      	orrs	r3, r2
 8003128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0308 	and.w	r3, r3, #8
 8003132:	2b00      	cmp	r3, #0
 8003134:	d009      	beq.n	800314a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003136:	4b12      	ldr	r3, [pc, #72]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	490e      	ldr	r1, [pc, #56]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003146:	4313      	orrs	r3, r2
 8003148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800314a:	f000 f821 	bl	8003190 <HAL_RCC_GetSysClockFreq>
 800314e:	4602      	mov	r2, r0
 8003150:	4b0b      	ldr	r3, [pc, #44]	@ (8003180 <HAL_RCC_ClockConfig+0x1bc>)
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	091b      	lsrs	r3, r3, #4
 8003156:	f003 030f 	and.w	r3, r3, #15
 800315a:	490a      	ldr	r1, [pc, #40]	@ (8003184 <HAL_RCC_ClockConfig+0x1c0>)
 800315c:	5ccb      	ldrb	r3, [r1, r3]
 800315e:	fa22 f303 	lsr.w	r3, r2, r3
 8003162:	4a09      	ldr	r2, [pc, #36]	@ (8003188 <HAL_RCC_ClockConfig+0x1c4>)
 8003164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003166:	4b09      	ldr	r3, [pc, #36]	@ (800318c <HAL_RCC_ClockConfig+0x1c8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd ff22 	bl	8000fb4 <HAL_InitTick>

  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	4618      	mov	r0, r3
 8003174:	3710      	adds	r7, #16
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	40023c00 	.word	0x40023c00
 8003180:	40023800 	.word	0x40023800
 8003184:	08009450 	.word	0x08009450
 8003188:	20000000 	.word	0x20000000
 800318c:	20000004 	.word	0x20000004

08003190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003190:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003194:	b090      	sub	sp, #64	@ 0x40
 8003196:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003198:	2300      	movs	r3, #0
 800319a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 800319c:	2300      	movs	r3, #0
 800319e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80031a0:	2300      	movs	r3, #0
 80031a2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80031a4:	2300      	movs	r3, #0
 80031a6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031a8:	4b59      	ldr	r3, [pc, #356]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x180>)
 80031aa:	689b      	ldr	r3, [r3, #8]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b08      	cmp	r3, #8
 80031b2:	d00d      	beq.n	80031d0 <HAL_RCC_GetSysClockFreq+0x40>
 80031b4:	2b08      	cmp	r3, #8
 80031b6:	f200 80a1 	bhi.w	80032fc <HAL_RCC_GetSysClockFreq+0x16c>
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d002      	beq.n	80031c4 <HAL_RCC_GetSysClockFreq+0x34>
 80031be:	2b04      	cmp	r3, #4
 80031c0:	d003      	beq.n	80031ca <HAL_RCC_GetSysClockFreq+0x3a>
 80031c2:	e09b      	b.n	80032fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031c4:	4b53      	ldr	r3, [pc, #332]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x184>)
 80031c6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031c8:	e09b      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031ca:	4b53      	ldr	r3, [pc, #332]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x188>)
 80031cc:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80031ce:	e098      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031d0:	4b4f      	ldr	r3, [pc, #316]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x180>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031d8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031da:	4b4d      	ldr	r3, [pc, #308]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x180>)
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d028      	beq.n	8003238 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031e6:	4b4a      	ldr	r3, [pc, #296]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x180>)
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	099b      	lsrs	r3, r3, #6
 80031ec:	2200      	movs	r2, #0
 80031ee:	623b      	str	r3, [r7, #32]
 80031f0:	627a      	str	r2, [r7, #36]	@ 0x24
 80031f2:	6a3b      	ldr	r3, [r7, #32]
 80031f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80031f8:	2100      	movs	r1, #0
 80031fa:	4b47      	ldr	r3, [pc, #284]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x188>)
 80031fc:	fb03 f201 	mul.w	r2, r3, r1
 8003200:	2300      	movs	r3, #0
 8003202:	fb00 f303 	mul.w	r3, r0, r3
 8003206:	4413      	add	r3, r2
 8003208:	4a43      	ldr	r2, [pc, #268]	@ (8003318 <HAL_RCC_GetSysClockFreq+0x188>)
 800320a:	fba0 1202 	umull	r1, r2, r0, r2
 800320e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003210:	460a      	mov	r2, r1
 8003212:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003214:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003216:	4413      	add	r3, r2
 8003218:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800321a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800321c:	2200      	movs	r2, #0
 800321e:	61bb      	str	r3, [r7, #24]
 8003220:	61fa      	str	r2, [r7, #28]
 8003222:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003226:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800322a:	f7fd f829 	bl	8000280 <__aeabi_uldivmod>
 800322e:	4602      	mov	r2, r0
 8003230:	460b      	mov	r3, r1
 8003232:	4613      	mov	r3, r2
 8003234:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003236:	e053      	b.n	80032e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003238:	4b35      	ldr	r3, [pc, #212]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x180>)
 800323a:	685b      	ldr	r3, [r3, #4]
 800323c:	099b      	lsrs	r3, r3, #6
 800323e:	2200      	movs	r2, #0
 8003240:	613b      	str	r3, [r7, #16]
 8003242:	617a      	str	r2, [r7, #20]
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800324a:	f04f 0b00 	mov.w	fp, #0
 800324e:	4652      	mov	r2, sl
 8003250:	465b      	mov	r3, fp
 8003252:	f04f 0000 	mov.w	r0, #0
 8003256:	f04f 0100 	mov.w	r1, #0
 800325a:	0159      	lsls	r1, r3, #5
 800325c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003260:	0150      	lsls	r0, r2, #5
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	ebb2 080a 	subs.w	r8, r2, sl
 800326a:	eb63 090b 	sbc.w	r9, r3, fp
 800326e:	f04f 0200 	mov.w	r2, #0
 8003272:	f04f 0300 	mov.w	r3, #0
 8003276:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800327a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800327e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003282:	ebb2 0408 	subs.w	r4, r2, r8
 8003286:	eb63 0509 	sbc.w	r5, r3, r9
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	00eb      	lsls	r3, r5, #3
 8003294:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003298:	00e2      	lsls	r2, r4, #3
 800329a:	4614      	mov	r4, r2
 800329c:	461d      	mov	r5, r3
 800329e:	eb14 030a 	adds.w	r3, r4, sl
 80032a2:	603b      	str	r3, [r7, #0]
 80032a4:	eb45 030b 	adc.w	r3, r5, fp
 80032a8:	607b      	str	r3, [r7, #4]
 80032aa:	f04f 0200 	mov.w	r2, #0
 80032ae:	f04f 0300 	mov.w	r3, #0
 80032b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80032b6:	4629      	mov	r1, r5
 80032b8:	028b      	lsls	r3, r1, #10
 80032ba:	4621      	mov	r1, r4
 80032bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80032c0:	4621      	mov	r1, r4
 80032c2:	028a      	lsls	r2, r1, #10
 80032c4:	4610      	mov	r0, r2
 80032c6:	4619      	mov	r1, r3
 80032c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80032ca:	2200      	movs	r2, #0
 80032cc:	60bb      	str	r3, [r7, #8]
 80032ce:	60fa      	str	r2, [r7, #12]
 80032d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80032d4:	f7fc ffd4 	bl	8000280 <__aeabi_uldivmod>
 80032d8:	4602      	mov	r2, r0
 80032da:	460b      	mov	r3, r1
 80032dc:	4613      	mov	r3, r2
 80032de:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80032e0:	4b0b      	ldr	r3, [pc, #44]	@ (8003310 <HAL_RCC_GetSysClockFreq+0x180>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	0c1b      	lsrs	r3, r3, #16
 80032e6:	f003 0303 	and.w	r3, r3, #3
 80032ea:	3301      	adds	r3, #1
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 80032f0:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80032f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80032f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80032f8:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80032fa:	e002      	b.n	8003302 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80032fc:	4b05      	ldr	r3, [pc, #20]	@ (8003314 <HAL_RCC_GetSysClockFreq+0x184>)
 80032fe:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003300:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003302:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003304:	4618      	mov	r0, r3
 8003306:	3740      	adds	r7, #64	@ 0x40
 8003308:	46bd      	mov	sp, r7
 800330a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800330e:	bf00      	nop
 8003310:	40023800 	.word	0x40023800
 8003314:	00f42400 	.word	0x00f42400
 8003318:	00b71b00 	.word	0x00b71b00

0800331c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003320:	4b03      	ldr	r3, [pc, #12]	@ (8003330 <HAL_RCC_GetHCLKFreq+0x14>)
 8003322:	681b      	ldr	r3, [r3, #0]
}
 8003324:	4618      	mov	r0, r3
 8003326:	46bd      	mov	sp, r7
 8003328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332c:	4770      	bx	lr
 800332e:	bf00      	nop
 8003330:	20000000 	.word	0x20000000

08003334 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003338:	f7ff fff0 	bl	800331c <HAL_RCC_GetHCLKFreq>
 800333c:	4602      	mov	r2, r0
 800333e:	4b05      	ldr	r3, [pc, #20]	@ (8003354 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	0a9b      	lsrs	r3, r3, #10
 8003344:	f003 0307 	and.w	r3, r3, #7
 8003348:	4903      	ldr	r1, [pc, #12]	@ (8003358 <HAL_RCC_GetPCLK1Freq+0x24>)
 800334a:	5ccb      	ldrb	r3, [r1, r3]
 800334c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003350:	4618      	mov	r0, r3
 8003352:	bd80      	pop	{r7, pc}
 8003354:	40023800 	.word	0x40023800
 8003358:	08009460 	.word	0x08009460

0800335c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003360:	f7ff ffdc 	bl	800331c <HAL_RCC_GetHCLKFreq>
 8003364:	4602      	mov	r2, r0
 8003366:	4b05      	ldr	r3, [pc, #20]	@ (800337c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	0b5b      	lsrs	r3, r3, #13
 800336c:	f003 0307 	and.w	r3, r3, #7
 8003370:	4903      	ldr	r1, [pc, #12]	@ (8003380 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003372:	5ccb      	ldrb	r3, [r1, r3]
 8003374:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003378:	4618      	mov	r0, r3
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40023800 	.word	0x40023800
 8003380:	08009460 	.word	0x08009460

08003384 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d101      	bne.n	8003396 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003392:	2301      	movs	r3, #1
 8003394:	e07b      	b.n	800348e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800339a:	2b00      	cmp	r3, #0
 800339c:	d108      	bne.n	80033b0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033a6:	d009      	beq.n	80033bc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2200      	movs	r2, #0
 80033ac:	61da      	str	r2, [r3, #28]
 80033ae:	e005      	b.n	80033bc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d106      	bne.n	80033dc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2200      	movs	r2, #0
 80033d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f7fd fb6e 	bl	8000ab8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2202      	movs	r2, #2
 80033e0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033f2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003404:	431a      	orrs	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	691b      	ldr	r3, [r3, #16]
 8003414:	f003 0302 	and.w	r3, r3, #2
 8003418:	431a      	orrs	r2, r3
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	695b      	ldr	r3, [r3, #20]
 800341e:	f003 0301 	and.w	r3, r3, #1
 8003422:	431a      	orrs	r2, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	699b      	ldr	r3, [r3, #24]
 8003428:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800342c:	431a      	orrs	r2, r3
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	69db      	ldr	r3, [r3, #28]
 8003432:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003436:	431a      	orrs	r2, r3
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	6a1b      	ldr	r3, [r3, #32]
 800343c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003440:	ea42 0103 	orr.w	r1, r2, r3
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003448:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	699b      	ldr	r3, [r3, #24]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0104 	and.w	r1, r3, #4
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	f003 0210 	and.w	r2, r3, #16
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	69da      	ldr	r2, [r3, #28]
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800347c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2200      	movs	r2, #0
 8003482:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2201      	movs	r2, #1
 8003488:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800348c:	2300      	movs	r3, #0
}
 800348e:	4618      	mov	r0, r3
 8003490:	3708      	adds	r7, #8
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}

08003496 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	b08a      	sub	sp, #40	@ 0x28
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
 80034a2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80034a4:	2301      	movs	r3, #1
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034a8:	f7fd fdc8 	bl	800103c <HAL_GetTick>
 80034ac:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034b4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80034bc:	887b      	ldrh	r3, [r7, #2]
 80034be:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80034c0:	7ffb      	ldrb	r3, [r7, #31]
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d00c      	beq.n	80034e0 <HAL_SPI_TransmitReceive+0x4a>
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80034cc:	d106      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	689b      	ldr	r3, [r3, #8]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d102      	bne.n	80034dc <HAL_SPI_TransmitReceive+0x46>
 80034d6:	7ffb      	ldrb	r3, [r7, #31]
 80034d8:	2b04      	cmp	r3, #4
 80034da:	d001      	beq.n	80034e0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80034dc:	2302      	movs	r3, #2
 80034de:	e17f      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d005      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x5c>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d002      	beq.n	80034f2 <HAL_SPI_TransmitReceive+0x5c>
 80034ec:	887b      	ldrh	r3, [r7, #2]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e174      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d101      	bne.n	8003504 <HAL_SPI_TransmitReceive+0x6e>
 8003500:	2302      	movs	r3, #2
 8003502:	e16d      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x34a>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	2201      	movs	r2, #1
 8003508:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b04      	cmp	r3, #4
 8003516:	d003      	beq.n	8003520 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	2205      	movs	r2, #5
 800351c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	2200      	movs	r2, #0
 8003524:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	687a      	ldr	r2, [r7, #4]
 800352a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	887a      	ldrh	r2, [r7, #2]
 8003530:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	887a      	ldrh	r2, [r7, #2]
 8003536:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	68ba      	ldr	r2, [r7, #8]
 800353c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	887a      	ldrh	r2, [r7, #2]
 8003542:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	887a      	ldrh	r2, [r7, #2]
 8003548:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003560:	2b40      	cmp	r3, #64	@ 0x40
 8003562:	d007      	beq.n	8003574 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681a      	ldr	r2, [r3, #0]
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003572:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800357c:	d17e      	bne.n	800367c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	685b      	ldr	r3, [r3, #4]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d002      	beq.n	800358c <HAL_SPI_TransmitReceive+0xf6>
 8003586:	8afb      	ldrh	r3, [r7, #22]
 8003588:	2b01      	cmp	r3, #1
 800358a:	d16c      	bne.n	8003666 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003590:	881a      	ldrh	r2, [r3, #0]
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359c:	1c9a      	adds	r2, r3, #2
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035a6:	b29b      	uxth	r3, r3
 80035a8:	3b01      	subs	r3, #1
 80035aa:	b29a      	uxth	r2, r3
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80035b0:	e059      	b.n	8003666 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0302 	and.w	r3, r3, #2
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d11b      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x162>
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035c4:	b29b      	uxth	r3, r3
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d016      	beq.n	80035f8 <HAL_SPI_TransmitReceive+0x162>
 80035ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d113      	bne.n	80035f8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	881a      	ldrh	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	1c9a      	adds	r2, r3, #2
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80035f4:	2300      	movs	r3, #0
 80035f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 0301 	and.w	r3, r3, #1
 8003602:	2b01      	cmp	r3, #1
 8003604:	d119      	bne.n	800363a <HAL_SPI_TransmitReceive+0x1a4>
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800360a:	b29b      	uxth	r3, r3
 800360c:	2b00      	cmp	r3, #0
 800360e:	d014      	beq.n	800363a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68da      	ldr	r2, [r3, #12]
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800361a:	b292      	uxth	r2, r2
 800361c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003622:	1c9a      	adds	r2, r3, #2
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800362c:	b29b      	uxth	r3, r3
 800362e:	3b01      	subs	r3, #1
 8003630:	b29a      	uxth	r2, r3
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003636:	2301      	movs	r3, #1
 8003638:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800363a:	f7fd fcff 	bl	800103c <HAL_GetTick>
 800363e:	4602      	mov	r2, r0
 8003640:	6a3b      	ldr	r3, [r7, #32]
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003646:	429a      	cmp	r2, r3
 8003648:	d80d      	bhi.n	8003666 <HAL_SPI_TransmitReceive+0x1d0>
 800364a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800364c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003650:	d009      	beq.n	8003666 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	2201      	movs	r2, #1
 8003656:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003662:	2303      	movs	r3, #3
 8003664:	e0bc      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800366a:	b29b      	uxth	r3, r3
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1a0      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x11c>
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003674:	b29b      	uxth	r3, r3
 8003676:	2b00      	cmp	r3, #0
 8003678:	d19b      	bne.n	80035b2 <HAL_SPI_TransmitReceive+0x11c>
 800367a:	e082      	b.n	8003782 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	685b      	ldr	r3, [r3, #4]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d002      	beq.n	800368a <HAL_SPI_TransmitReceive+0x1f4>
 8003684:	8afb      	ldrh	r3, [r7, #22]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d171      	bne.n	800376e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	330c      	adds	r3, #12
 8003694:	7812      	ldrb	r2, [r2, #0]
 8003696:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800369c:	1c5a      	adds	r2, r3, #1
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036b0:	e05d      	b.n	800376e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	f003 0302 	and.w	r3, r3, #2
 80036bc:	2b02      	cmp	r3, #2
 80036be:	d11c      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x264>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c4:	b29b      	uxth	r3, r3
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d017      	beq.n	80036fa <HAL_SPI_TransmitReceive+0x264>
 80036ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d114      	bne.n	80036fa <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	330c      	adds	r3, #12
 80036da:	7812      	ldrb	r2, [r2, #0]
 80036dc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036e2:	1c5a      	adds	r2, r3, #1
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036ec:	b29b      	uxth	r3, r3
 80036ee:	3b01      	subs	r3, #1
 80036f0:	b29a      	uxth	r2, r3
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036f6:	2300      	movs	r3, #0
 80036f8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f003 0301 	and.w	r3, r3, #1
 8003704:	2b01      	cmp	r3, #1
 8003706:	d119      	bne.n	800373c <HAL_SPI_TransmitReceive+0x2a6>
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800370c:	b29b      	uxth	r3, r3
 800370e:	2b00      	cmp	r3, #0
 8003710:	d014      	beq.n	800373c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	68da      	ldr	r2, [r3, #12]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371c:	b2d2      	uxtb	r2, r2
 800371e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003724:	1c5a      	adds	r2, r3, #1
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800372e:	b29b      	uxth	r3, r3
 8003730:	3b01      	subs	r3, #1
 8003732:	b29a      	uxth	r2, r3
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003738:	2301      	movs	r3, #1
 800373a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800373c:	f7fd fc7e 	bl	800103c <HAL_GetTick>
 8003740:	4602      	mov	r2, r0
 8003742:	6a3b      	ldr	r3, [r7, #32]
 8003744:	1ad3      	subs	r3, r2, r3
 8003746:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003748:	429a      	cmp	r2, r3
 800374a:	d803      	bhi.n	8003754 <HAL_SPI_TransmitReceive+0x2be>
 800374c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800374e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003752:	d102      	bne.n	800375a <HAL_SPI_TransmitReceive+0x2c4>
 8003754:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003756:	2b00      	cmp	r3, #0
 8003758:	d109      	bne.n	800376e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e038      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003772:	b29b      	uxth	r3, r3
 8003774:	2b00      	cmp	r3, #0
 8003776:	d19c      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x21c>
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800377c:	b29b      	uxth	r3, r3
 800377e:	2b00      	cmp	r3, #0
 8003780:	d197      	bne.n	80036b2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003782:	6a3a      	ldr	r2, [r7, #32]
 8003784:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003786:	68f8      	ldr	r0, [r7, #12]
 8003788:	f000 f8b6 	bl	80038f8 <SPI_EndRxTxTransaction>
 800378c:	4603      	mov	r3, r0
 800378e:	2b00      	cmp	r3, #0
 8003790:	d008      	beq.n	80037a4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2220      	movs	r2, #32
 8003796:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	2200      	movs	r2, #0
 800379c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e01d      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d10a      	bne.n	80037c2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80037ac:	2300      	movs	r3, #0
 80037ae:	613b      	str	r3, [r7, #16]
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68db      	ldr	r3, [r3, #12]
 80037b6:	613b      	str	r3, [r7, #16]
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	613b      	str	r3, [r7, #16]
 80037c0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2201      	movs	r2, #1
 80037c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e000      	b.n	80037e0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80037de:	2300      	movs	r3, #0
  }
}
 80037e0:	4618      	mov	r0, r3
 80037e2:	3728      	adds	r7, #40	@ 0x28
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bd80      	pop	{r7, pc}

080037e8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b088      	sub	sp, #32
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	603b      	str	r3, [r7, #0]
 80037f4:	4613      	mov	r3, r2
 80037f6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80037f8:	f7fd fc20 	bl	800103c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003800:	1a9b      	subs	r3, r3, r2
 8003802:	683a      	ldr	r2, [r7, #0]
 8003804:	4413      	add	r3, r2
 8003806:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003808:	f7fd fc18 	bl	800103c <HAL_GetTick>
 800380c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800380e:	4b39      	ldr	r3, [pc, #228]	@ (80038f4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	015b      	lsls	r3, r3, #5
 8003814:	0d1b      	lsrs	r3, r3, #20
 8003816:	69fa      	ldr	r2, [r7, #28]
 8003818:	fb02 f303 	mul.w	r3, r2, r3
 800381c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800381e:	e055      	b.n	80038cc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003826:	d051      	beq.n	80038cc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003828:	f7fd fc08 	bl	800103c <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	69bb      	ldr	r3, [r7, #24]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	69fa      	ldr	r2, [r7, #28]
 8003834:	429a      	cmp	r2, r3
 8003836:	d902      	bls.n	800383e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	2b00      	cmp	r3, #0
 800383c:	d13d      	bne.n	80038ba <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	685a      	ldr	r2, [r3, #4]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800384c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003856:	d111      	bne.n	800387c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003860:	d004      	beq.n	800386c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800386a:	d107      	bne.n	800387c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800387a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003884:	d10f      	bne.n	80038a6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	681a      	ldr	r2, [r3, #0]
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003894:	601a      	str	r2, [r3, #0]
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681a      	ldr	r2, [r3, #0]
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038a4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	2201      	movs	r2, #1
 80038aa:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	2200      	movs	r2, #0
 80038b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80038b6:	2303      	movs	r3, #3
 80038b8:	e018      	b.n	80038ec <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d102      	bne.n	80038c6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	61fb      	str	r3, [r7, #28]
 80038c4:	e002      	b.n	80038cc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	3b01      	subs	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689a      	ldr	r2, [r3, #8]
 80038d2:	68bb      	ldr	r3, [r7, #8]
 80038d4:	4013      	ands	r3, r2
 80038d6:	68ba      	ldr	r2, [r7, #8]
 80038d8:	429a      	cmp	r2, r3
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	461a      	mov	r2, r3
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d19a      	bne.n	8003820 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80038ea:	2300      	movs	r3, #0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3720      	adds	r7, #32
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}
 80038f4:	20000000 	.word	0x20000000

080038f8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	9300      	str	r3, [sp, #0]
 8003908:	68bb      	ldr	r3, [r7, #8]
 800390a:	2201      	movs	r2, #1
 800390c:	2102      	movs	r1, #2
 800390e:	68f8      	ldr	r0, [r7, #12]
 8003910:	f7ff ff6a 	bl	80037e8 <SPI_WaitFlagStateUntilTimeout>
 8003914:	4603      	mov	r3, r0
 8003916:	2b00      	cmp	r3, #0
 8003918:	d007      	beq.n	800392a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800391e:	f043 0220 	orr.w	r2, r3, #32
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e032      	b.n	8003990 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800392a:	4b1b      	ldr	r3, [pc, #108]	@ (8003998 <SPI_EndRxTxTransaction+0xa0>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	4a1b      	ldr	r2, [pc, #108]	@ (800399c <SPI_EndRxTxTransaction+0xa4>)
 8003930:	fba2 2303 	umull	r2, r3, r2, r3
 8003934:	0d5b      	lsrs	r3, r3, #21
 8003936:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800393a:	fb02 f303 	mul.w	r3, r2, r3
 800393e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	685b      	ldr	r3, [r3, #4]
 8003944:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003948:	d112      	bne.n	8003970 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	9300      	str	r3, [sp, #0]
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	2200      	movs	r2, #0
 8003952:	2180      	movs	r1, #128	@ 0x80
 8003954:	68f8      	ldr	r0, [r7, #12]
 8003956:	f7ff ff47 	bl	80037e8 <SPI_WaitFlagStateUntilTimeout>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d016      	beq.n	800398e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003964:	f043 0220 	orr.w	r2, r3, #32
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800396c:	2303      	movs	r3, #3
 800396e:	e00f      	b.n	8003990 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003970:	697b      	ldr	r3, [r7, #20]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d00a      	beq.n	800398c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3b01      	subs	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003986:	2b80      	cmp	r3, #128	@ 0x80
 8003988:	d0f2      	beq.n	8003970 <SPI_EndRxTxTransaction+0x78>
 800398a:	e000      	b.n	800398e <SPI_EndRxTxTransaction+0x96>
        break;
 800398c:	bf00      	nop
  }

  return HAL_OK;
 800398e:	2300      	movs	r3, #0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3718      	adds	r7, #24
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000000 	.word	0x20000000
 800399c:	165e9f81 	.word	0x165e9f81

080039a0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d101      	bne.n	80039b2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80039ae:	2301      	movs	r3, #1
 80039b0:	e042      	b.n	8003a38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d106      	bne.n	80039cc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039c6:	6878      	ldr	r0, [r7, #4]
 80039c8:	f7fd f970 	bl	8000cac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2224      	movs	r2, #36	@ 0x24
 80039d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	68da      	ldr	r2, [r3, #12]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039e2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f000 f82b 	bl	8003a40 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	691a      	ldr	r2, [r3, #16]
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039f8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68da      	ldr	r2, [r3, #12]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003a18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2220      	movs	r2, #32
 8003a24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2220      	movs	r2, #32
 8003a2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2200      	movs	r2, #0
 8003a34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3708      	adds	r7, #8
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}

08003a40 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003a44:	b0c0      	sub	sp, #256	@ 0x100
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	691b      	ldr	r3, [r3, #16]
 8003a54:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a5c:	68d9      	ldr	r1, [r3, #12]
 8003a5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	ea40 0301 	orr.w	r3, r0, r1
 8003a68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a6e:	689a      	ldr	r2, [r3, #8]
 8003a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a74:	691b      	ldr	r3, [r3, #16]
 8003a76:	431a      	orrs	r2, r3
 8003a78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	431a      	orrs	r2, r3
 8003a80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a84:	69db      	ldr	r3, [r3, #28]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003a8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003a98:	f021 010c 	bic.w	r1, r1, #12
 8003a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aa0:	681a      	ldr	r2, [r3, #0]
 8003aa2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003aa6:	430b      	orrs	r3, r1
 8003aa8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003aaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	695b      	ldr	r3, [r3, #20]
 8003ab2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ab6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003aba:	6999      	ldr	r1, [r3, #24]
 8003abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	ea40 0301 	orr.w	r3, r0, r1
 8003ac6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ac8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003acc:	681a      	ldr	r2, [r3, #0]
 8003ace:	4b8f      	ldr	r3, [pc, #572]	@ (8003d0c <UART_SetConfig+0x2cc>)
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d005      	beq.n	8003ae0 <UART_SetConfig+0xa0>
 8003ad4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ad8:	681a      	ldr	r2, [r3, #0]
 8003ada:	4b8d      	ldr	r3, [pc, #564]	@ (8003d10 <UART_SetConfig+0x2d0>)
 8003adc:	429a      	cmp	r2, r3
 8003ade:	d104      	bne.n	8003aea <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003ae0:	f7ff fc3c 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 8003ae4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ae8:	e003      	b.n	8003af2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003aea:	f7ff fc23 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 8003aee:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003af2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003af6:	69db      	ldr	r3, [r3, #28]
 8003af8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003afc:	f040 810c 	bne.w	8003d18 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003b00:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b04:	2200      	movs	r2, #0
 8003b06:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003b0a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003b0e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003b12:	4622      	mov	r2, r4
 8003b14:	462b      	mov	r3, r5
 8003b16:	1891      	adds	r1, r2, r2
 8003b18:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003b1a:	415b      	adcs	r3, r3
 8003b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003b1e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003b22:	4621      	mov	r1, r4
 8003b24:	eb12 0801 	adds.w	r8, r2, r1
 8003b28:	4629      	mov	r1, r5
 8003b2a:	eb43 0901 	adc.w	r9, r3, r1
 8003b2e:	f04f 0200 	mov.w	r2, #0
 8003b32:	f04f 0300 	mov.w	r3, #0
 8003b36:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b3a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b3e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b42:	4690      	mov	r8, r2
 8003b44:	4699      	mov	r9, r3
 8003b46:	4623      	mov	r3, r4
 8003b48:	eb18 0303 	adds.w	r3, r8, r3
 8003b4c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003b50:	462b      	mov	r3, r5
 8003b52:	eb49 0303 	adc.w	r3, r9, r3
 8003b56:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003b5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003b66:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003b6a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003b6e:	460b      	mov	r3, r1
 8003b70:	18db      	adds	r3, r3, r3
 8003b72:	653b      	str	r3, [r7, #80]	@ 0x50
 8003b74:	4613      	mov	r3, r2
 8003b76:	eb42 0303 	adc.w	r3, r2, r3
 8003b7a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003b7c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003b80:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003b84:	f7fc fb7c 	bl	8000280 <__aeabi_uldivmod>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	460b      	mov	r3, r1
 8003b8c:	4b61      	ldr	r3, [pc, #388]	@ (8003d14 <UART_SetConfig+0x2d4>)
 8003b8e:	fba3 2302 	umull	r2, r3, r3, r2
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	011c      	lsls	r4, r3, #4
 8003b96:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003b9a:	2200      	movs	r2, #0
 8003b9c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ba0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003ba4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003ba8:	4642      	mov	r2, r8
 8003baa:	464b      	mov	r3, r9
 8003bac:	1891      	adds	r1, r2, r2
 8003bae:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003bb0:	415b      	adcs	r3, r3
 8003bb2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bb4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003bb8:	4641      	mov	r1, r8
 8003bba:	eb12 0a01 	adds.w	sl, r2, r1
 8003bbe:	4649      	mov	r1, r9
 8003bc0:	eb43 0b01 	adc.w	fp, r3, r1
 8003bc4:	f04f 0200 	mov.w	r2, #0
 8003bc8:	f04f 0300 	mov.w	r3, #0
 8003bcc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003bd0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003bd4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003bd8:	4692      	mov	sl, r2
 8003bda:	469b      	mov	fp, r3
 8003bdc:	4643      	mov	r3, r8
 8003bde:	eb1a 0303 	adds.w	r3, sl, r3
 8003be2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003be6:	464b      	mov	r3, r9
 8003be8:	eb4b 0303 	adc.w	r3, fp, r3
 8003bec:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003bf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003bfc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003c00:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003c04:	460b      	mov	r3, r1
 8003c06:	18db      	adds	r3, r3, r3
 8003c08:	643b      	str	r3, [r7, #64]	@ 0x40
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	eb42 0303 	adc.w	r3, r2, r3
 8003c10:	647b      	str	r3, [r7, #68]	@ 0x44
 8003c12:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003c16:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003c1a:	f7fc fb31 	bl	8000280 <__aeabi_uldivmod>
 8003c1e:	4602      	mov	r2, r0
 8003c20:	460b      	mov	r3, r1
 8003c22:	4611      	mov	r1, r2
 8003c24:	4b3b      	ldr	r3, [pc, #236]	@ (8003d14 <UART_SetConfig+0x2d4>)
 8003c26:	fba3 2301 	umull	r2, r3, r3, r1
 8003c2a:	095b      	lsrs	r3, r3, #5
 8003c2c:	2264      	movs	r2, #100	@ 0x64
 8003c2e:	fb02 f303 	mul.w	r3, r2, r3
 8003c32:	1acb      	subs	r3, r1, r3
 8003c34:	00db      	lsls	r3, r3, #3
 8003c36:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003c3a:	4b36      	ldr	r3, [pc, #216]	@ (8003d14 <UART_SetConfig+0x2d4>)
 8003c3c:	fba3 2302 	umull	r2, r3, r3, r2
 8003c40:	095b      	lsrs	r3, r3, #5
 8003c42:	005b      	lsls	r3, r3, #1
 8003c44:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003c48:	441c      	add	r4, r3
 8003c4a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003c4e:	2200      	movs	r2, #0
 8003c50:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003c54:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003c58:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003c5c:	4642      	mov	r2, r8
 8003c5e:	464b      	mov	r3, r9
 8003c60:	1891      	adds	r1, r2, r2
 8003c62:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003c64:	415b      	adcs	r3, r3
 8003c66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c68:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003c6c:	4641      	mov	r1, r8
 8003c6e:	1851      	adds	r1, r2, r1
 8003c70:	6339      	str	r1, [r7, #48]	@ 0x30
 8003c72:	4649      	mov	r1, r9
 8003c74:	414b      	adcs	r3, r1
 8003c76:	637b      	str	r3, [r7, #52]	@ 0x34
 8003c78:	f04f 0200 	mov.w	r2, #0
 8003c7c:	f04f 0300 	mov.w	r3, #0
 8003c80:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003c84:	4659      	mov	r1, fp
 8003c86:	00cb      	lsls	r3, r1, #3
 8003c88:	4651      	mov	r1, sl
 8003c8a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003c8e:	4651      	mov	r1, sl
 8003c90:	00ca      	lsls	r2, r1, #3
 8003c92:	4610      	mov	r0, r2
 8003c94:	4619      	mov	r1, r3
 8003c96:	4603      	mov	r3, r0
 8003c98:	4642      	mov	r2, r8
 8003c9a:	189b      	adds	r3, r3, r2
 8003c9c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003ca0:	464b      	mov	r3, r9
 8003ca2:	460a      	mov	r2, r1
 8003ca4:	eb42 0303 	adc.w	r3, r2, r3
 8003ca8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb0:	685b      	ldr	r3, [r3, #4]
 8003cb2:	2200      	movs	r2, #0
 8003cb4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003cb8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003cbc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003cc0:	460b      	mov	r3, r1
 8003cc2:	18db      	adds	r3, r3, r3
 8003cc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003cc6:	4613      	mov	r3, r2
 8003cc8:	eb42 0303 	adc.w	r3, r2, r3
 8003ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003cce:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003cd2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003cd6:	f7fc fad3 	bl	8000280 <__aeabi_uldivmod>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	460b      	mov	r3, r1
 8003cde:	4b0d      	ldr	r3, [pc, #52]	@ (8003d14 <UART_SetConfig+0x2d4>)
 8003ce0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	2164      	movs	r1, #100	@ 0x64
 8003ce8:	fb01 f303 	mul.w	r3, r1, r3
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	00db      	lsls	r3, r3, #3
 8003cf0:	3332      	adds	r3, #50	@ 0x32
 8003cf2:	4a08      	ldr	r2, [pc, #32]	@ (8003d14 <UART_SetConfig+0x2d4>)
 8003cf4:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf8:	095b      	lsrs	r3, r3, #5
 8003cfa:	f003 0207 	and.w	r2, r3, #7
 8003cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	4422      	add	r2, r4
 8003d06:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d08:	e106      	b.n	8003f18 <UART_SetConfig+0x4d8>
 8003d0a:	bf00      	nop
 8003d0c:	40011000 	.word	0x40011000
 8003d10:	40011400 	.word	0x40011400
 8003d14:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003d22:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003d26:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003d2a:	4642      	mov	r2, r8
 8003d2c:	464b      	mov	r3, r9
 8003d2e:	1891      	adds	r1, r2, r2
 8003d30:	6239      	str	r1, [r7, #32]
 8003d32:	415b      	adcs	r3, r3
 8003d34:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d36:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d3a:	4641      	mov	r1, r8
 8003d3c:	1854      	adds	r4, r2, r1
 8003d3e:	4649      	mov	r1, r9
 8003d40:	eb43 0501 	adc.w	r5, r3, r1
 8003d44:	f04f 0200 	mov.w	r2, #0
 8003d48:	f04f 0300 	mov.w	r3, #0
 8003d4c:	00eb      	lsls	r3, r5, #3
 8003d4e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d52:	00e2      	lsls	r2, r4, #3
 8003d54:	4614      	mov	r4, r2
 8003d56:	461d      	mov	r5, r3
 8003d58:	4643      	mov	r3, r8
 8003d5a:	18e3      	adds	r3, r4, r3
 8003d5c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003d60:	464b      	mov	r3, r9
 8003d62:	eb45 0303 	adc.w	r3, r5, r3
 8003d66:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003d6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003d76:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d7a:	f04f 0200 	mov.w	r2, #0
 8003d7e:	f04f 0300 	mov.w	r3, #0
 8003d82:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003d86:	4629      	mov	r1, r5
 8003d88:	008b      	lsls	r3, r1, #2
 8003d8a:	4621      	mov	r1, r4
 8003d8c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003d90:	4621      	mov	r1, r4
 8003d92:	008a      	lsls	r2, r1, #2
 8003d94:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003d98:	f7fc fa72 	bl	8000280 <__aeabi_uldivmod>
 8003d9c:	4602      	mov	r2, r0
 8003d9e:	460b      	mov	r3, r1
 8003da0:	4b60      	ldr	r3, [pc, #384]	@ (8003f24 <UART_SetConfig+0x4e4>)
 8003da2:	fba3 2302 	umull	r2, r3, r3, r2
 8003da6:	095b      	lsrs	r3, r3, #5
 8003da8:	011c      	lsls	r4, r3, #4
 8003daa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003db4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003db8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003dbc:	4642      	mov	r2, r8
 8003dbe:	464b      	mov	r3, r9
 8003dc0:	1891      	adds	r1, r2, r2
 8003dc2:	61b9      	str	r1, [r7, #24]
 8003dc4:	415b      	adcs	r3, r3
 8003dc6:	61fb      	str	r3, [r7, #28]
 8003dc8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003dcc:	4641      	mov	r1, r8
 8003dce:	1851      	adds	r1, r2, r1
 8003dd0:	6139      	str	r1, [r7, #16]
 8003dd2:	4649      	mov	r1, r9
 8003dd4:	414b      	adcs	r3, r1
 8003dd6:	617b      	str	r3, [r7, #20]
 8003dd8:	f04f 0200 	mov.w	r2, #0
 8003ddc:	f04f 0300 	mov.w	r3, #0
 8003de0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003de4:	4659      	mov	r1, fp
 8003de6:	00cb      	lsls	r3, r1, #3
 8003de8:	4651      	mov	r1, sl
 8003dea:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003dee:	4651      	mov	r1, sl
 8003df0:	00ca      	lsls	r2, r1, #3
 8003df2:	4610      	mov	r0, r2
 8003df4:	4619      	mov	r1, r3
 8003df6:	4603      	mov	r3, r0
 8003df8:	4642      	mov	r2, r8
 8003dfa:	189b      	adds	r3, r3, r2
 8003dfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003e00:	464b      	mov	r3, r9
 8003e02:	460a      	mov	r2, r1
 8003e04:	eb42 0303 	adc.w	r3, r2, r3
 8003e08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e10:	685b      	ldr	r3, [r3, #4]
 8003e12:	2200      	movs	r2, #0
 8003e14:	67bb      	str	r3, [r7, #120]	@ 0x78
 8003e16:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8003e18:	f04f 0200 	mov.w	r2, #0
 8003e1c:	f04f 0300 	mov.w	r3, #0
 8003e20:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8003e24:	4649      	mov	r1, r9
 8003e26:	008b      	lsls	r3, r1, #2
 8003e28:	4641      	mov	r1, r8
 8003e2a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003e2e:	4641      	mov	r1, r8
 8003e30:	008a      	lsls	r2, r1, #2
 8003e32:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8003e36:	f7fc fa23 	bl	8000280 <__aeabi_uldivmod>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4611      	mov	r1, r2
 8003e40:	4b38      	ldr	r3, [pc, #224]	@ (8003f24 <UART_SetConfig+0x4e4>)
 8003e42:	fba3 2301 	umull	r2, r3, r3, r1
 8003e46:	095b      	lsrs	r3, r3, #5
 8003e48:	2264      	movs	r2, #100	@ 0x64
 8003e4a:	fb02 f303 	mul.w	r3, r2, r3
 8003e4e:	1acb      	subs	r3, r1, r3
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	3332      	adds	r3, #50	@ 0x32
 8003e54:	4a33      	ldr	r2, [pc, #204]	@ (8003f24 <UART_SetConfig+0x4e4>)
 8003e56:	fba2 2303 	umull	r2, r3, r2, r3
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003e60:	441c      	add	r4, r3
 8003e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e66:	2200      	movs	r2, #0
 8003e68:	673b      	str	r3, [r7, #112]	@ 0x70
 8003e6a:	677a      	str	r2, [r7, #116]	@ 0x74
 8003e6c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8003e70:	4642      	mov	r2, r8
 8003e72:	464b      	mov	r3, r9
 8003e74:	1891      	adds	r1, r2, r2
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	415b      	adcs	r3, r3
 8003e7a:	60fb      	str	r3, [r7, #12]
 8003e7c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003e80:	4641      	mov	r1, r8
 8003e82:	1851      	adds	r1, r2, r1
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	4649      	mov	r1, r9
 8003e88:	414b      	adcs	r3, r1
 8003e8a:	607b      	str	r3, [r7, #4]
 8003e8c:	f04f 0200 	mov.w	r2, #0
 8003e90:	f04f 0300 	mov.w	r3, #0
 8003e94:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8003e98:	4659      	mov	r1, fp
 8003e9a:	00cb      	lsls	r3, r1, #3
 8003e9c:	4651      	mov	r1, sl
 8003e9e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea2:	4651      	mov	r1, sl
 8003ea4:	00ca      	lsls	r2, r1, #3
 8003ea6:	4610      	mov	r0, r2
 8003ea8:	4619      	mov	r1, r3
 8003eaa:	4603      	mov	r3, r0
 8003eac:	4642      	mov	r2, r8
 8003eae:	189b      	adds	r3, r3, r2
 8003eb0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003eb2:	464b      	mov	r3, r9
 8003eb4:	460a      	mov	r2, r1
 8003eb6:	eb42 0303 	adc.w	r3, r2, r3
 8003eba:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8003ebc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec0:	685b      	ldr	r3, [r3, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	663b      	str	r3, [r7, #96]	@ 0x60
 8003ec6:	667a      	str	r2, [r7, #100]	@ 0x64
 8003ec8:	f04f 0200 	mov.w	r2, #0
 8003ecc:	f04f 0300 	mov.w	r3, #0
 8003ed0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8003ed4:	4649      	mov	r1, r9
 8003ed6:	008b      	lsls	r3, r1, #2
 8003ed8:	4641      	mov	r1, r8
 8003eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003ede:	4641      	mov	r1, r8
 8003ee0:	008a      	lsls	r2, r1, #2
 8003ee2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8003ee6:	f7fc f9cb 	bl	8000280 <__aeabi_uldivmod>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4b0d      	ldr	r3, [pc, #52]	@ (8003f24 <UART_SetConfig+0x4e4>)
 8003ef0:	fba3 1302 	umull	r1, r3, r3, r2
 8003ef4:	095b      	lsrs	r3, r3, #5
 8003ef6:	2164      	movs	r1, #100	@ 0x64
 8003ef8:	fb01 f303 	mul.w	r3, r1, r3
 8003efc:	1ad3      	subs	r3, r2, r3
 8003efe:	011b      	lsls	r3, r3, #4
 8003f00:	3332      	adds	r3, #50	@ 0x32
 8003f02:	4a08      	ldr	r2, [pc, #32]	@ (8003f24 <UART_SetConfig+0x4e4>)
 8003f04:	fba2 2303 	umull	r2, r3, r2, r3
 8003f08:	095b      	lsrs	r3, r3, #5
 8003f0a:	f003 020f 	and.w	r2, r3, #15
 8003f0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	4422      	add	r2, r4
 8003f16:	609a      	str	r2, [r3, #8]
}
 8003f18:	bf00      	nop
 8003f1a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f24:	51eb851f 	.word	0x51eb851f

08003f28 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b082      	sub	sp, #8
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d101      	bne.n	8003f3a <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	e033      	b.n	8003fa2 <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003f40:	b2db      	uxtb	r3, r3
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d106      	bne.n	8003f54 <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f7fc fe64 	bl	8000c1c <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2202      	movs	r2, #2
 8003f58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 f825 	bl	8003fac <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	691a      	ldr	r2, [r3, #16]
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003f70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	695a      	ldr	r2, [r3, #20]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003f80:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	68da      	ldr	r2, [r3, #12]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003f90:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003fa0:	2300      	movs	r3, #0
}
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}
	...

08003fac <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8003fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003fb0:	b0c6      	sub	sp, #280	@ 0x118
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8003fb8:	2300      	movs	r3, #0
 8003fba:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8003fbe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	68d9      	ldr	r1, [r3, #12]
 8003fc6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	f021 030c 	bic.w	r3, r1, #12
 8003fd0:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8003fd2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	691b      	ldr	r3, [r3, #16]
 8003fda:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8003fde:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8003fe2:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8003fe6:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003fea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003fee:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003ff0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ff4:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8003ff6:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8003ff8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003ffc:	6a1b      	ldr	r3, [r3, #32]
 8003ffe:	431a      	orrs	r2, r3
 8004000:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004004:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8004006:	431a      	orrs	r2, r3
 8004008:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800400c:	4313      	orrs	r3, r2
 800400e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8004012:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8004016:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004020:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8004022:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	68db      	ldr	r3, [r3, #12]
 800402a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 800402e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004032:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8004036:	f023 030c 	bic.w	r3, r3, #12
 800403a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 800403e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004042:	689a      	ldr	r2, [r3, #8]
 8004044:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004048:	691b      	ldr	r3, [r3, #16]
 800404a:	431a      	orrs	r2, r3
 800404c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004050:	695b      	ldr	r3, [r3, #20]
 8004052:	431a      	orrs	r2, r3
 8004054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8004058:	4313      	orrs	r3, r2
 800405a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800405e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8004062:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004066:	681a      	ldr	r2, [r3, #0]
 8004068:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800406c:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 800406e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	6959      	ldr	r1, [r3, #20]
 8004076:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8004080:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8004082:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	4b8b      	ldr	r3, [pc, #556]	@ (80042b8 <USART_SetConfig+0x30c>)
 800408a:	429a      	cmp	r2, r3
 800408c:	d006      	beq.n	800409c <USART_SetConfig+0xf0>
 800408e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004092:	681a      	ldr	r2, [r3, #0]
 8004094:	4b89      	ldr	r3, [pc, #548]	@ (80042bc <USART_SetConfig+0x310>)
 8004096:	429a      	cmp	r2, r3
 8004098:	f040 8114 	bne.w	80042c4 <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800409c:	f7ff f95e 	bl	800335c <HAL_RCC_GetPCLK2Freq>
 80040a0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80040a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80040a8:	2200      	movs	r2, #0
 80040aa:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80040ae:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 80040b2:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 80040b6:	4622      	mov	r2, r4
 80040b8:	462b      	mov	r3, r5
 80040ba:	1891      	adds	r1, r2, r2
 80040bc:	6739      	str	r1, [r7, #112]	@ 0x70
 80040be:	415b      	adcs	r3, r3
 80040c0:	677b      	str	r3, [r7, #116]	@ 0x74
 80040c2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80040c6:	4621      	mov	r1, r4
 80040c8:	eb12 0801 	adds.w	r8, r2, r1
 80040cc:	4629      	mov	r1, r5
 80040ce:	eb43 0901 	adc.w	r9, r3, r1
 80040d2:	f04f 0200 	mov.w	r2, #0
 80040d6:	f04f 0300 	mov.w	r3, #0
 80040da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80040de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80040e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80040e6:	4690      	mov	r8, r2
 80040e8:	4699      	mov	r9, r3
 80040ea:	4623      	mov	r3, r4
 80040ec:	eb18 0303 	adds.w	r3, r8, r3
 80040f0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80040f4:	462b      	mov	r3, r5
 80040f6:	eb49 0303 	adc.w	r3, r9, r3
 80040fa:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80040fe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004102:	685b      	ldr	r3, [r3, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800410a:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800410e:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8004112:	460b      	mov	r3, r1
 8004114:	18db      	adds	r3, r3, r3
 8004116:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004118:	4613      	mov	r3, r2
 800411a:	eb42 0303 	adc.w	r3, r2, r3
 800411e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004120:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8004124:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8004128:	f7fc f8aa 	bl	8000280 <__aeabi_uldivmod>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4b63      	ldr	r3, [pc, #396]	@ (80042c0 <USART_SetConfig+0x314>)
 8004132:	fba3 2302 	umull	r2, r3, r3, r2
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	011c      	lsls	r4, r3, #4
 800413a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800413e:	2200      	movs	r2, #0
 8004140:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004144:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004148:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800414c:	4642      	mov	r2, r8
 800414e:	464b      	mov	r3, r9
 8004150:	1891      	adds	r1, r2, r2
 8004152:	6639      	str	r1, [r7, #96]	@ 0x60
 8004154:	415b      	adcs	r3, r3
 8004156:	667b      	str	r3, [r7, #100]	@ 0x64
 8004158:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 800415c:	4641      	mov	r1, r8
 800415e:	1851      	adds	r1, r2, r1
 8004160:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004162:	4649      	mov	r1, r9
 8004164:	414b      	adcs	r3, r1
 8004166:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004168:	f04f 0200 	mov.w	r2, #0
 800416c:	f04f 0300 	mov.w	r3, #0
 8004170:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8004174:	4659      	mov	r1, fp
 8004176:	00cb      	lsls	r3, r1, #3
 8004178:	4651      	mov	r1, sl
 800417a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800417e:	4651      	mov	r1, sl
 8004180:	00ca      	lsls	r2, r1, #3
 8004182:	4610      	mov	r0, r2
 8004184:	4619      	mov	r1, r3
 8004186:	4603      	mov	r3, r0
 8004188:	4642      	mov	r2, r8
 800418a:	189b      	adds	r3, r3, r2
 800418c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004190:	464b      	mov	r3, r9
 8004192:	460a      	mov	r2, r1
 8004194:	eb42 0303 	adc.w	r3, r2, r3
 8004198:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800419c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	2200      	movs	r2, #0
 80041a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80041a8:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80041ac:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80041b0:	460b      	mov	r3, r1
 80041b2:	18db      	adds	r3, r3, r3
 80041b4:	653b      	str	r3, [r7, #80]	@ 0x50
 80041b6:	4613      	mov	r3, r2
 80041b8:	eb42 0303 	adc.w	r3, r2, r3
 80041bc:	657b      	str	r3, [r7, #84]	@ 0x54
 80041be:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80041c2:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80041c6:	f7fc f85b 	bl	8000280 <__aeabi_uldivmod>
 80041ca:	4602      	mov	r2, r0
 80041cc:	460b      	mov	r3, r1
 80041ce:	4611      	mov	r1, r2
 80041d0:	4b3b      	ldr	r3, [pc, #236]	@ (80042c0 <USART_SetConfig+0x314>)
 80041d2:	fba3 2301 	umull	r2, r3, r3, r1
 80041d6:	095b      	lsrs	r3, r3, #5
 80041d8:	2264      	movs	r2, #100	@ 0x64
 80041da:	fb02 f303 	mul.w	r3, r2, r3
 80041de:	1acb      	subs	r3, r1, r3
 80041e0:	00db      	lsls	r3, r3, #3
 80041e2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80041e6:	4b36      	ldr	r3, [pc, #216]	@ (80042c0 <USART_SetConfig+0x314>)
 80041e8:	fba3 2302 	umull	r2, r3, r3, r2
 80041ec:	095b      	lsrs	r3, r3, #5
 80041ee:	005b      	lsls	r3, r3, #1
 80041f0:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80041f4:	441c      	add	r4, r3
 80041f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80041fa:	2200      	movs	r2, #0
 80041fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004200:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004204:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004208:	4642      	mov	r2, r8
 800420a:	464b      	mov	r3, r9
 800420c:	1891      	adds	r1, r2, r2
 800420e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004210:	415b      	adcs	r3, r3
 8004212:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004214:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004218:	4641      	mov	r1, r8
 800421a:	1851      	adds	r1, r2, r1
 800421c:	6439      	str	r1, [r7, #64]	@ 0x40
 800421e:	4649      	mov	r1, r9
 8004220:	414b      	adcs	r3, r1
 8004222:	647b      	str	r3, [r7, #68]	@ 0x44
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8004230:	4659      	mov	r1, fp
 8004232:	00cb      	lsls	r3, r1, #3
 8004234:	4651      	mov	r1, sl
 8004236:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800423a:	4651      	mov	r1, sl
 800423c:	00ca      	lsls	r2, r1, #3
 800423e:	4610      	mov	r0, r2
 8004240:	4619      	mov	r1, r3
 8004242:	4603      	mov	r3, r0
 8004244:	4642      	mov	r2, r8
 8004246:	189b      	adds	r3, r3, r2
 8004248:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800424c:	464b      	mov	r3, r9
 800424e:	460a      	mov	r2, r1
 8004250:	eb42 0303 	adc.w	r3, r2, r3
 8004254:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004258:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004264:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004268:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800426c:	460b      	mov	r3, r1
 800426e:	18db      	adds	r3, r3, r3
 8004270:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004272:	4613      	mov	r3, r2
 8004274:	eb42 0303 	adc.w	r3, r2, r3
 8004278:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800427a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800427e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004282:	f7fb fffd 	bl	8000280 <__aeabi_uldivmod>
 8004286:	4602      	mov	r2, r0
 8004288:	460b      	mov	r3, r1
 800428a:	4b0d      	ldr	r3, [pc, #52]	@ (80042c0 <USART_SetConfig+0x314>)
 800428c:	fba3 1302 	umull	r1, r3, r3, r2
 8004290:	095b      	lsrs	r3, r3, #5
 8004292:	2164      	movs	r1, #100	@ 0x64
 8004294:	fb01 f303 	mul.w	r3, r1, r3
 8004298:	1ad3      	subs	r3, r2, r3
 800429a:	00db      	lsls	r3, r3, #3
 800429c:	3332      	adds	r3, #50	@ 0x32
 800429e:	4a08      	ldr	r2, [pc, #32]	@ (80042c0 <USART_SetConfig+0x314>)
 80042a0:	fba2 2303 	umull	r2, r3, r2, r3
 80042a4:	095b      	lsrs	r3, r3, #5
 80042a6:	f003 0207 	and.w	r2, r3, #7
 80042aa:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4422      	add	r2, r4
 80042b2:	609a      	str	r2, [r3, #8]
 80042b4:	e109      	b.n	80044ca <USART_SetConfig+0x51e>
 80042b6:	bf00      	nop
 80042b8:	40011000 	.word	0x40011000
 80042bc:	40011400 	.word	0x40011400
 80042c0:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80042c4:	f7ff f836 	bl	8003334 <HAL_RCC_GetPCLK1Freq>
 80042c8:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 80042cc:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80042d0:	2200      	movs	r2, #0
 80042d2:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80042d6:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80042da:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80042de:	4642      	mov	r2, r8
 80042e0:	464b      	mov	r3, r9
 80042e2:	1891      	adds	r1, r2, r2
 80042e4:	6339      	str	r1, [r7, #48]	@ 0x30
 80042e6:	415b      	adcs	r3, r3
 80042e8:	637b      	str	r3, [r7, #52]	@ 0x34
 80042ea:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80042ee:	4641      	mov	r1, r8
 80042f0:	1854      	adds	r4, r2, r1
 80042f2:	4649      	mov	r1, r9
 80042f4:	eb43 0501 	adc.w	r5, r3, r1
 80042f8:	f04f 0200 	mov.w	r2, #0
 80042fc:	f04f 0300 	mov.w	r3, #0
 8004300:	00eb      	lsls	r3, r5, #3
 8004302:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004306:	00e2      	lsls	r2, r4, #3
 8004308:	4614      	mov	r4, r2
 800430a:	461d      	mov	r5, r3
 800430c:	4643      	mov	r3, r8
 800430e:	18e3      	adds	r3, r4, r3
 8004310:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004314:	464b      	mov	r3, r9
 8004316:	eb45 0303 	adc.w	r3, r5, r3
 800431a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800431e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004322:	685b      	ldr	r3, [r3, #4]
 8004324:	2200      	movs	r2, #0
 8004326:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800432a:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800432e:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004332:	460b      	mov	r3, r1
 8004334:	18db      	adds	r3, r3, r3
 8004336:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004338:	4613      	mov	r3, r2
 800433a:	eb42 0303 	adc.w	r3, r2, r3
 800433e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004340:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004344:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004348:	f7fb ff9a 	bl	8000280 <__aeabi_uldivmod>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	4b61      	ldr	r3, [pc, #388]	@ (80044d8 <USART_SetConfig+0x52c>)
 8004352:	fba3 2302 	umull	r2, r3, r3, r2
 8004356:	095b      	lsrs	r3, r3, #5
 8004358:	011c      	lsls	r4, r3, #4
 800435a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800435e:	2200      	movs	r2, #0
 8004360:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004364:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004368:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800436c:	4642      	mov	r2, r8
 800436e:	464b      	mov	r3, r9
 8004370:	1891      	adds	r1, r2, r2
 8004372:	6239      	str	r1, [r7, #32]
 8004374:	415b      	adcs	r3, r3
 8004376:	627b      	str	r3, [r7, #36]	@ 0x24
 8004378:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800437c:	4641      	mov	r1, r8
 800437e:	eb12 0a01 	adds.w	sl, r2, r1
 8004382:	4649      	mov	r1, r9
 8004384:	eb43 0b01 	adc.w	fp, r3, r1
 8004388:	f04f 0200 	mov.w	r2, #0
 800438c:	f04f 0300 	mov.w	r3, #0
 8004390:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004394:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004398:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800439c:	4692      	mov	sl, r2
 800439e:	469b      	mov	fp, r3
 80043a0:	4643      	mov	r3, r8
 80043a2:	eb1a 0303 	adds.w	r3, sl, r3
 80043a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80043aa:	464b      	mov	r3, r9
 80043ac:	eb4b 0303 	adc.w	r3, fp, r3
 80043b0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80043b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80043b8:	685b      	ldr	r3, [r3, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80043c0:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80043c4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80043c8:	460b      	mov	r3, r1
 80043ca:	18db      	adds	r3, r3, r3
 80043cc:	61bb      	str	r3, [r7, #24]
 80043ce:	4613      	mov	r3, r2
 80043d0:	eb42 0303 	adc.w	r3, r2, r3
 80043d4:	61fb      	str	r3, [r7, #28]
 80043d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043da:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80043de:	f7fb ff4f 	bl	8000280 <__aeabi_uldivmod>
 80043e2:	4602      	mov	r2, r0
 80043e4:	460b      	mov	r3, r1
 80043e6:	4611      	mov	r1, r2
 80043e8:	4b3b      	ldr	r3, [pc, #236]	@ (80044d8 <USART_SetConfig+0x52c>)
 80043ea:	fba3 2301 	umull	r2, r3, r3, r1
 80043ee:	095b      	lsrs	r3, r3, #5
 80043f0:	2264      	movs	r2, #100	@ 0x64
 80043f2:	fb02 f303 	mul.w	r3, r2, r3
 80043f6:	1acb      	subs	r3, r1, r3
 80043f8:	00db      	lsls	r3, r3, #3
 80043fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80043fe:	4b36      	ldr	r3, [pc, #216]	@ (80044d8 <USART_SetConfig+0x52c>)
 8004400:	fba3 2302 	umull	r2, r3, r3, r2
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	005b      	lsls	r3, r3, #1
 8004408:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800440c:	441c      	add	r4, r3
 800440e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8004412:	2200      	movs	r2, #0
 8004414:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004418:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800441c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004420:	4642      	mov	r2, r8
 8004422:	464b      	mov	r3, r9
 8004424:	1891      	adds	r1, r2, r2
 8004426:	6139      	str	r1, [r7, #16]
 8004428:	415b      	adcs	r3, r3
 800442a:	617b      	str	r3, [r7, #20]
 800442c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004430:	4641      	mov	r1, r8
 8004432:	1851      	adds	r1, r2, r1
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	4649      	mov	r1, r9
 8004438:	414b      	adcs	r3, r1
 800443a:	60fb      	str	r3, [r7, #12]
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8004448:	4659      	mov	r1, fp
 800444a:	00cb      	lsls	r3, r1, #3
 800444c:	4651      	mov	r1, sl
 800444e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004452:	4651      	mov	r1, sl
 8004454:	00ca      	lsls	r2, r1, #3
 8004456:	4610      	mov	r0, r2
 8004458:	4619      	mov	r1, r3
 800445a:	4603      	mov	r3, r0
 800445c:	4642      	mov	r2, r8
 800445e:	189b      	adds	r3, r3, r2
 8004460:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004464:	464b      	mov	r3, r9
 8004466:	460a      	mov	r2, r1
 8004468:	eb42 0303 	adc.w	r3, r2, r3
 800446c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004470:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8004474:	685b      	ldr	r3, [r3, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	67bb      	str	r3, [r7, #120]	@ 0x78
 800447a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800447c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8004480:	460b      	mov	r3, r1
 8004482:	18db      	adds	r3, r3, r3
 8004484:	603b      	str	r3, [r7, #0]
 8004486:	4613      	mov	r3, r2
 8004488:	eb42 0303 	adc.w	r3, r2, r3
 800448c:	607b      	str	r3, [r7, #4]
 800448e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004492:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004496:	f7fb fef3 	bl	8000280 <__aeabi_uldivmod>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	4b0e      	ldr	r3, [pc, #56]	@ (80044d8 <USART_SetConfig+0x52c>)
 80044a0:	fba3 1302 	umull	r1, r3, r3, r2
 80044a4:	095b      	lsrs	r3, r3, #5
 80044a6:	2164      	movs	r1, #100	@ 0x64
 80044a8:	fb01 f303 	mul.w	r3, r1, r3
 80044ac:	1ad3      	subs	r3, r2, r3
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	3332      	adds	r3, #50	@ 0x32
 80044b2:	4a09      	ldr	r2, [pc, #36]	@ (80044d8 <USART_SetConfig+0x52c>)
 80044b4:	fba2 2303 	umull	r2, r3, r2, r3
 80044b8:	095b      	lsrs	r3, r3, #5
 80044ba:	f003 0207 	and.w	r2, r3, #7
 80044be:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4422      	add	r2, r4
 80044c6:	609a      	str	r2, [r3, #8]
  }
}
 80044c8:	bf00      	nop
 80044ca:	bf00      	nop
 80044cc:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80044d0:	46bd      	mov	sp, r7
 80044d2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044d6:	bf00      	nop
 80044d8:	51eb851f 	.word	0x51eb851f

080044dc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80044dc:	b084      	sub	sp, #16
 80044de:	b580      	push	{r7, lr}
 80044e0:	b084      	sub	sp, #16
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	6078      	str	r0, [r7, #4]
 80044e6:	f107 001c 	add.w	r0, r7, #28
 80044ea:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80044ee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d123      	bne.n	800453e <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044fa:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	68db      	ldr	r3, [r3, #12]
 8004506:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 800450a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800450e:	687a      	ldr	r2, [r7, #4]
 8004510:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800451e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8004522:	2b01      	cmp	r3, #1
 8004524:	d105      	bne.n	8004532 <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	68db      	ldr	r3, [r3, #12]
 800452a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f001 fae8 	bl	8005b08 <USB_CoreReset>
 8004538:	4603      	mov	r3, r0
 800453a:	73fb      	strb	r3, [r7, #15]
 800453c:	e01b      	b.n	8004576 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	68db      	ldr	r3, [r3, #12]
 8004542:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800454a:	6878      	ldr	r0, [r7, #4]
 800454c:	f001 fadc 	bl	8005b08 <USB_CoreReset>
 8004550:	4603      	mov	r3, r0
 8004552:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004554:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004560:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	639a      	str	r2, [r3, #56]	@ 0x38
 8004568:	e005      	b.n	8004576 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800456e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004576:	7fbb      	ldrb	r3, [r7, #30]
 8004578:	2b01      	cmp	r3, #1
 800457a:	d10b      	bne.n	8004594 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f043 0206 	orr.w	r2, r3, #6
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f043 0220 	orr.w	r2, r3, #32
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004594:	7bfb      	ldrb	r3, [r7, #15]
}
 8004596:	4618      	mov	r0, r3
 8004598:	3710      	adds	r7, #16
 800459a:	46bd      	mov	sp, r7
 800459c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045a0:	b004      	add	sp, #16
 80045a2:	4770      	bx	lr

080045a4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	60f8      	str	r0, [r7, #12]
 80045ac:	60b9      	str	r1, [r7, #8]
 80045ae:	4613      	mov	r3, r2
 80045b0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045b2:	79fb      	ldrb	r3, [r7, #7]
 80045b4:	2b02      	cmp	r3, #2
 80045b6:	d165      	bne.n	8004684 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	4a41      	ldr	r2, [pc, #260]	@ (80046c0 <USB_SetTurnaroundTime+0x11c>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d906      	bls.n	80045ce <USB_SetTurnaroundTime+0x2a>
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	4a40      	ldr	r2, [pc, #256]	@ (80046c4 <USB_SetTurnaroundTime+0x120>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d202      	bcs.n	80045ce <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80045c8:	230f      	movs	r3, #15
 80045ca:	617b      	str	r3, [r7, #20]
 80045cc:	e062      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	4a3c      	ldr	r2, [pc, #240]	@ (80046c4 <USB_SetTurnaroundTime+0x120>)
 80045d2:	4293      	cmp	r3, r2
 80045d4:	d306      	bcc.n	80045e4 <USB_SetTurnaroundTime+0x40>
 80045d6:	68bb      	ldr	r3, [r7, #8]
 80045d8:	4a3b      	ldr	r2, [pc, #236]	@ (80046c8 <USB_SetTurnaroundTime+0x124>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d202      	bcs.n	80045e4 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80045de:	230e      	movs	r3, #14
 80045e0:	617b      	str	r3, [r7, #20]
 80045e2:	e057      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	4a38      	ldr	r2, [pc, #224]	@ (80046c8 <USB_SetTurnaroundTime+0x124>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d306      	bcc.n	80045fa <USB_SetTurnaroundTime+0x56>
 80045ec:	68bb      	ldr	r3, [r7, #8]
 80045ee:	4a37      	ldr	r2, [pc, #220]	@ (80046cc <USB_SetTurnaroundTime+0x128>)
 80045f0:	4293      	cmp	r3, r2
 80045f2:	d202      	bcs.n	80045fa <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80045f4:	230d      	movs	r3, #13
 80045f6:	617b      	str	r3, [r7, #20]
 80045f8:	e04c      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4a33      	ldr	r2, [pc, #204]	@ (80046cc <USB_SetTurnaroundTime+0x128>)
 80045fe:	4293      	cmp	r3, r2
 8004600:	d306      	bcc.n	8004610 <USB_SetTurnaroundTime+0x6c>
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	4a32      	ldr	r2, [pc, #200]	@ (80046d0 <USB_SetTurnaroundTime+0x12c>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d802      	bhi.n	8004610 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800460a:	230c      	movs	r3, #12
 800460c:	617b      	str	r3, [r7, #20]
 800460e:	e041      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	4a2f      	ldr	r2, [pc, #188]	@ (80046d0 <USB_SetTurnaroundTime+0x12c>)
 8004614:	4293      	cmp	r3, r2
 8004616:	d906      	bls.n	8004626 <USB_SetTurnaroundTime+0x82>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	4a2e      	ldr	r2, [pc, #184]	@ (80046d4 <USB_SetTurnaroundTime+0x130>)
 800461c:	4293      	cmp	r3, r2
 800461e:	d802      	bhi.n	8004626 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004620:	230b      	movs	r3, #11
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	e036      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004626:	68bb      	ldr	r3, [r7, #8]
 8004628:	4a2a      	ldr	r2, [pc, #168]	@ (80046d4 <USB_SetTurnaroundTime+0x130>)
 800462a:	4293      	cmp	r3, r2
 800462c:	d906      	bls.n	800463c <USB_SetTurnaroundTime+0x98>
 800462e:	68bb      	ldr	r3, [r7, #8]
 8004630:	4a29      	ldr	r2, [pc, #164]	@ (80046d8 <USB_SetTurnaroundTime+0x134>)
 8004632:	4293      	cmp	r3, r2
 8004634:	d802      	bhi.n	800463c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004636:	230a      	movs	r3, #10
 8004638:	617b      	str	r3, [r7, #20]
 800463a:	e02b      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	4a26      	ldr	r2, [pc, #152]	@ (80046d8 <USB_SetTurnaroundTime+0x134>)
 8004640:	4293      	cmp	r3, r2
 8004642:	d906      	bls.n	8004652 <USB_SetTurnaroundTime+0xae>
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4a25      	ldr	r2, [pc, #148]	@ (80046dc <USB_SetTurnaroundTime+0x138>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d202      	bcs.n	8004652 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 800464c:	2309      	movs	r3, #9
 800464e:	617b      	str	r3, [r7, #20]
 8004650:	e020      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004652:	68bb      	ldr	r3, [r7, #8]
 8004654:	4a21      	ldr	r2, [pc, #132]	@ (80046dc <USB_SetTurnaroundTime+0x138>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d306      	bcc.n	8004668 <USB_SetTurnaroundTime+0xc4>
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	4a20      	ldr	r2, [pc, #128]	@ (80046e0 <USB_SetTurnaroundTime+0x13c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d802      	bhi.n	8004668 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8004662:	2308      	movs	r3, #8
 8004664:	617b      	str	r3, [r7, #20]
 8004666:	e015      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4a1d      	ldr	r2, [pc, #116]	@ (80046e0 <USB_SetTurnaroundTime+0x13c>)
 800466c:	4293      	cmp	r3, r2
 800466e:	d906      	bls.n	800467e <USB_SetTurnaroundTime+0xda>
 8004670:	68bb      	ldr	r3, [r7, #8]
 8004672:	4a1c      	ldr	r2, [pc, #112]	@ (80046e4 <USB_SetTurnaroundTime+0x140>)
 8004674:	4293      	cmp	r3, r2
 8004676:	d202      	bcs.n	800467e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004678:	2307      	movs	r3, #7
 800467a:	617b      	str	r3, [r7, #20]
 800467c:	e00a      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800467e:	2306      	movs	r3, #6
 8004680:	617b      	str	r3, [r7, #20]
 8004682:	e007      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004684:	79fb      	ldrb	r3, [r7, #7]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d102      	bne.n	8004690 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 800468a:	2309      	movs	r3, #9
 800468c:	617b      	str	r3, [r7, #20]
 800468e:	e001      	b.n	8004694 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004690:	2309      	movs	r3, #9
 8004692:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	68db      	ldr	r3, [r3, #12]
 8004698:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	68da      	ldr	r2, [r3, #12]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	029b      	lsls	r3, r3, #10
 80046a8:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 80046ac:	431a      	orrs	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046b2:	2300      	movs	r3, #0
}
 80046b4:	4618      	mov	r0, r3
 80046b6:	371c      	adds	r7, #28
 80046b8:	46bd      	mov	sp, r7
 80046ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046be:	4770      	bx	lr
 80046c0:	00d8acbf 	.word	0x00d8acbf
 80046c4:	00e4e1c0 	.word	0x00e4e1c0
 80046c8:	00f42400 	.word	0x00f42400
 80046cc:	01067380 	.word	0x01067380
 80046d0:	011a499f 	.word	0x011a499f
 80046d4:	01312cff 	.word	0x01312cff
 80046d8:	014ca43f 	.word	0x014ca43f
 80046dc:	016e3600 	.word	0x016e3600
 80046e0:	01a6ab1f 	.word	0x01a6ab1f
 80046e4:	01e84800 	.word	0x01e84800

080046e8 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046e8:	b480      	push	{r7}
 80046ea:	b083      	sub	sp, #12
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	f043 0201 	orr.w	r2, r3, #1
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046fc:	2300      	movs	r3, #0
}
 80046fe:	4618      	mov	r0, r3
 8004700:	370c      	adds	r7, #12
 8004702:	46bd      	mov	sp, r7
 8004704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004708:	4770      	bx	lr

0800470a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800470a:	b480      	push	{r7}
 800470c:	b083      	sub	sp, #12
 800470e:	af00      	add	r7, sp, #0
 8004710:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	689b      	ldr	r3, [r3, #8]
 8004716:	f023 0201 	bic.w	r2, r3, #1
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800471e:	2300      	movs	r3, #0
}
 8004720:	4618      	mov	r0, r3
 8004722:	370c      	adds	r7, #12
 8004724:	46bd      	mov	sp, r7
 8004726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800472a:	4770      	bx	lr

0800472c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004738:	2300      	movs	r3, #0
 800473a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004748:	78fb      	ldrb	r3, [r7, #3]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d115      	bne.n	800477a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	68db      	ldr	r3, [r3, #12]
 8004752:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800475a:	200a      	movs	r0, #10
 800475c:	f7fc fc7a 	bl	8001054 <HAL_Delay>
      ms += 10U;
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	330a      	adds	r3, #10
 8004764:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f001 f93f 	bl	80059ea <USB_GetMode>
 800476c:	4603      	mov	r3, r0
 800476e:	2b01      	cmp	r3, #1
 8004770:	d01e      	beq.n	80047b0 <USB_SetCurrentMode+0x84>
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2bc7      	cmp	r3, #199	@ 0xc7
 8004776:	d9f0      	bls.n	800475a <USB_SetCurrentMode+0x2e>
 8004778:	e01a      	b.n	80047b0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800477a:	78fb      	ldrb	r3, [r7, #3]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d115      	bne.n	80047ac <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800478c:	200a      	movs	r0, #10
 800478e:	f7fc fc61 	bl	8001054 <HAL_Delay>
      ms += 10U;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	330a      	adds	r3, #10
 8004796:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f001 f926 	bl	80059ea <USB_GetMode>
 800479e:	4603      	mov	r3, r0
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d005      	beq.n	80047b0 <USB_SetCurrentMode+0x84>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2bc7      	cmp	r3, #199	@ 0xc7
 80047a8:	d9f0      	bls.n	800478c <USB_SetCurrentMode+0x60>
 80047aa:	e001      	b.n	80047b0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047ac:	2301      	movs	r3, #1
 80047ae:	e005      	b.n	80047bc <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	2bc8      	cmp	r3, #200	@ 0xc8
 80047b4:	d101      	bne.n	80047ba <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047b6:	2301      	movs	r3, #1
 80047b8:	e000      	b.n	80047bc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	3710      	adds	r7, #16
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bd80      	pop	{r7, pc}

080047c4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80047c4:	b084      	sub	sp, #16
 80047c6:	b580      	push	{r7, lr}
 80047c8:	b086      	sub	sp, #24
 80047ca:	af00      	add	r7, sp, #0
 80047cc:	6078      	str	r0, [r7, #4]
 80047ce:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80047d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80047d6:	2300      	movs	r3, #0
 80047d8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80047de:	2300      	movs	r3, #0
 80047e0:	613b      	str	r3, [r7, #16]
 80047e2:	e009      	b.n	80047f8 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	693b      	ldr	r3, [r7, #16]
 80047e8:	3340      	adds	r3, #64	@ 0x40
 80047ea:	009b      	lsls	r3, r3, #2
 80047ec:	4413      	add	r3, r2
 80047ee:	2200      	movs	r2, #0
 80047f0:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80047f2:	693b      	ldr	r3, [r7, #16]
 80047f4:	3301      	adds	r3, #1
 80047f6:	613b      	str	r3, [r7, #16]
 80047f8:	693b      	ldr	r3, [r7, #16]
 80047fa:	2b0e      	cmp	r3, #14
 80047fc:	d9f2      	bls.n	80047e4 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80047fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004802:	2b00      	cmp	r3, #0
 8004804:	d11c      	bne.n	8004840 <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004814:	f043 0302 	orr.w	r3, r3, #2
 8004818:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800481e:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800482a:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004836:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	639a      	str	r2, [r3, #56]	@ 0x38
 800483e:	e00b      	b.n	8004858 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004844:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004850:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800485e:	461a      	mov	r2, r3
 8004860:	2300      	movs	r3, #0
 8004862:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004864:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10d      	bne.n	8004888 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800486c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004870:	2b00      	cmp	r3, #0
 8004872:	d104      	bne.n	800487e <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004874:	2100      	movs	r1, #0
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 f968 	bl	8004b4c <USB_SetDevSpeed>
 800487c:	e008      	b.n	8004890 <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800487e:	2101      	movs	r1, #1
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f963 	bl	8004b4c <USB_SetDevSpeed>
 8004886:	e003      	b.n	8004890 <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004888:	2103      	movs	r1, #3
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f95e 	bl	8004b4c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004890:	2110      	movs	r1, #16
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f8fa 	bl	8004a8c <USB_FlushTxFifo>
 8004898:	4603      	mov	r3, r0
 800489a:	2b00      	cmp	r3, #0
 800489c:	d001      	beq.n	80048a2 <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 f924 	bl	8004af0 <USB_FlushRxFifo>
 80048a8:	4603      	mov	r3, r0
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d001      	beq.n	80048b2 <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048b8:	461a      	mov	r2, r3
 80048ba:	2300      	movs	r3, #0
 80048bc:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048c4:	461a      	mov	r2, r3
 80048c6:	2300      	movs	r3, #0
 80048c8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80048d0:	461a      	mov	r2, r3
 80048d2:	2300      	movs	r3, #0
 80048d4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	613b      	str	r3, [r7, #16]
 80048da:	e043      	b.n	8004964 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80048dc:	693b      	ldr	r3, [r7, #16]
 80048de:	015a      	lsls	r2, r3, #5
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	4413      	add	r3, r2
 80048e4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80048ee:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80048f2:	d118      	bne.n	8004926 <USB_DevInit+0x162>
    {
      if (i == 0U)
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d10a      	bne.n	8004910 <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	015a      	lsls	r2, r3, #5
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	4413      	add	r3, r2
 8004902:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004906:	461a      	mov	r2, r3
 8004908:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 800490c:	6013      	str	r3, [r2, #0]
 800490e:	e013      	b.n	8004938 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004910:	693b      	ldr	r3, [r7, #16]
 8004912:	015a      	lsls	r2, r3, #5
 8004914:	68fb      	ldr	r3, [r7, #12]
 8004916:	4413      	add	r3, r2
 8004918:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800491c:	461a      	mov	r2, r3
 800491e:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004922:	6013      	str	r3, [r2, #0]
 8004924:	e008      	b.n	8004938 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004926:	693b      	ldr	r3, [r7, #16]
 8004928:	015a      	lsls	r2, r3, #5
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	4413      	add	r3, r2
 800492e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004932:	461a      	mov	r2, r3
 8004934:	2300      	movs	r3, #0
 8004936:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	015a      	lsls	r2, r3, #5
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4413      	add	r3, r2
 8004940:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004944:	461a      	mov	r2, r3
 8004946:	2300      	movs	r3, #0
 8004948:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800494a:	693b      	ldr	r3, [r7, #16]
 800494c:	015a      	lsls	r2, r3, #5
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	4413      	add	r3, r2
 8004952:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004956:	461a      	mov	r2, r3
 8004958:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800495c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800495e:	693b      	ldr	r3, [r7, #16]
 8004960:	3301      	adds	r3, #1
 8004962:	613b      	str	r3, [r7, #16]
 8004964:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004968:	461a      	mov	r2, r3
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	4293      	cmp	r3, r2
 800496e:	d3b5      	bcc.n	80048dc <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004970:	2300      	movs	r3, #0
 8004972:	613b      	str	r3, [r7, #16]
 8004974:	e043      	b.n	80049fe <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004976:	693b      	ldr	r3, [r7, #16]
 8004978:	015a      	lsls	r2, r3, #5
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	4413      	add	r3, r2
 800497e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004988:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800498c:	d118      	bne.n	80049c0 <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800498e:	693b      	ldr	r3, [r7, #16]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d10a      	bne.n	80049aa <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004994:	693b      	ldr	r3, [r7, #16]
 8004996:	015a      	lsls	r2, r3, #5
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4413      	add	r3, r2
 800499c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049a0:	461a      	mov	r2, r3
 80049a2:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	e013      	b.n	80049d2 <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049b6:	461a      	mov	r2, r3
 80049b8:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80049bc:	6013      	str	r3, [r2, #0]
 80049be:	e008      	b.n	80049d2 <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	015a      	lsls	r2, r3, #5
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	4413      	add	r3, r2
 80049c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049cc:	461a      	mov	r2, r3
 80049ce:	2300      	movs	r3, #0
 80049d0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	015a      	lsls	r2, r3, #5
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	4413      	add	r3, r2
 80049da:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049de:	461a      	mov	r2, r3
 80049e0:	2300      	movs	r3, #0
 80049e2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80049f0:	461a      	mov	r2, r3
 80049f2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80049f6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	3301      	adds	r3, #1
 80049fc:	613b      	str	r3, [r7, #16]
 80049fe:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004a02:	461a      	mov	r2, r3
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d3b5      	bcc.n	8004976 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a10:	691b      	ldr	r3, [r3, #16]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a1c:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004a2a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a2c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d105      	bne.n	8004a40 <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	699b      	ldr	r3, [r3, #24]
 8004a38:	f043 0210 	orr.w	r2, r3, #16
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	699a      	ldr	r2, [r3, #24]
 8004a44:	4b10      	ldr	r3, [pc, #64]	@ (8004a88 <USB_DevInit+0x2c4>)
 8004a46:	4313      	orrs	r3, r2
 8004a48:	687a      	ldr	r2, [r7, #4]
 8004a4a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	699b      	ldr	r3, [r3, #24]
 8004a58:	f043 0208 	orr.w	r2, r3, #8
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004a60:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004a64:	2b01      	cmp	r3, #1
 8004a66:	d107      	bne.n	8004a78 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	699b      	ldr	r3, [r3, #24]
 8004a6c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004a70:	f043 0304 	orr.w	r3, r3, #4
 8004a74:	687a      	ldr	r2, [r7, #4]
 8004a76:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004a78:	7dfb      	ldrb	r3, [r7, #23]
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3718      	adds	r7, #24
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004a84:	b004      	add	sp, #16
 8004a86:	4770      	bx	lr
 8004a88:	803c3800 	.word	0x803c3800

08004a8c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b085      	sub	sp, #20
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
 8004a94:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004a96:	2300      	movs	r3, #0
 8004a98:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004aa6:	d901      	bls.n	8004aac <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004aa8:	2303      	movs	r3, #3
 8004aaa:	e01b      	b.n	8004ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	691b      	ldr	r3, [r3, #16]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	daf2      	bge.n	8004a9a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ab8:	683b      	ldr	r3, [r7, #0]
 8004aba:	019b      	lsls	r3, r3, #6
 8004abc:	f043 0220 	orr.w	r2, r3, #32
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	3301      	adds	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ad0:	d901      	bls.n	8004ad6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e006      	b.n	8004ae4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b20      	cmp	r3, #32
 8004ae0:	d0f0      	beq.n	8004ac4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	3301      	adds	r3, #1
 8004b00:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b08:	d901      	bls.n	8004b0e <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b0a:	2303      	movs	r3, #3
 8004b0c:	e018      	b.n	8004b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	daf2      	bge.n	8004afc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b16:	2300      	movs	r3, #0
 8004b18:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2210      	movs	r2, #16
 8004b1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	3301      	adds	r3, #1
 8004b24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004b2c:	d901      	bls.n	8004b32 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b2e:	2303      	movs	r3, #3
 8004b30:	e006      	b.n	8004b40 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	f003 0310 	and.w	r3, r3, #16
 8004b3a:	2b10      	cmp	r3, #16
 8004b3c:	d0f0      	beq.n	8004b20 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b3e:	2300      	movs	r3, #0
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3714      	adds	r7, #20
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	78fb      	ldrb	r3, [r7, #3]
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004b6c:	4313      	orrs	r3, r2
 8004b6e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004b70:	2300      	movs	r3, #0
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3714      	adds	r7, #20
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b087      	sub	sp, #28
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	f003 0306 	and.w	r3, r3, #6
 8004b96:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d102      	bne.n	8004ba4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	75fb      	strb	r3, [r7, #23]
 8004ba2:	e00a      	b.n	8004bba <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2b02      	cmp	r3, #2
 8004ba8:	d002      	beq.n	8004bb0 <USB_GetDevSpeed+0x32>
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	2b06      	cmp	r3, #6
 8004bae:	d102      	bne.n	8004bb6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	75fb      	strb	r3, [r7, #23]
 8004bb4:	e001      	b.n	8004bba <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004bb6:	230f      	movs	r3, #15
 8004bb8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004bba:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	371c      	adds	r7, #28
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc6:	4770      	bx	lr

08004bc8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b085      	sub	sp, #20
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
 8004bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	781b      	ldrb	r3, [r3, #0]
 8004bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bdc:	683b      	ldr	r3, [r7, #0]
 8004bde:	785b      	ldrb	r3, [r3, #1]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d13a      	bne.n	8004c5a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	781b      	ldrb	r3, [r3, #0]
 8004bf0:	f003 030f 	and.w	r3, r3, #15
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	fa01 f303 	lsl.w	r3, r1, r3
 8004bfa:	b29b      	uxth	r3, r3
 8004bfc:	68f9      	ldr	r1, [r7, #12]
 8004bfe:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c02:	4313      	orrs	r3, r2
 8004c04:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d155      	bne.n	8004cc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	015a      	lsls	r2, r3, #5
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4413      	add	r3, r2
 8004c24:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	689b      	ldr	r3, [r3, #8]
 8004c2e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c32:	683b      	ldr	r3, [r7, #0]
 8004c34:	791b      	ldrb	r3, [r3, #4]
 8004c36:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c38:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	059b      	lsls	r3, r3, #22
 8004c3e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c40:	4313      	orrs	r3, r2
 8004c42:	68ba      	ldr	r2, [r7, #8]
 8004c44:	0151      	lsls	r1, r2, #5
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	440a      	add	r2, r1
 8004c4a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004c4e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004c56:	6013      	str	r3, [r2, #0]
 8004c58:	e036      	b.n	8004cc8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c60:	69da      	ldr	r2, [r3, #28]
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	781b      	ldrb	r3, [r3, #0]
 8004c66:	f003 030f 	and.w	r3, r3, #15
 8004c6a:	2101      	movs	r1, #1
 8004c6c:	fa01 f303 	lsl.w	r3, r1, r3
 8004c70:	041b      	lsls	r3, r3, #16
 8004c72:	68f9      	ldr	r1, [r7, #12]
 8004c74:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004c78:	4313      	orrs	r3, r2
 8004c7a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d11a      	bne.n	8004cc8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004c92:	68bb      	ldr	r3, [r7, #8]
 8004c94:	015a      	lsls	r2, r3, #5
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	4413      	add	r3, r2
 8004c9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004ca8:	683b      	ldr	r3, [r7, #0]
 8004caa:	791b      	ldrb	r3, [r3, #4]
 8004cac:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cae:	430b      	orrs	r3, r1
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	68ba      	ldr	r2, [r7, #8]
 8004cb4:	0151      	lsls	r1, r2, #5
 8004cb6:	68fa      	ldr	r2, [r7, #12]
 8004cb8:	440a      	add	r2, r1
 8004cba:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004cbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004cc2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004cc6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3714      	adds	r7, #20
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd4:	4770      	bx	lr
	...

08004cd8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
 8004ce0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	781b      	ldrb	r3, [r3, #0]
 8004cea:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	785b      	ldrb	r3, [r3, #1]
 8004cf0:	2b01      	cmp	r3, #1
 8004cf2:	d161      	bne.n	8004db8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	015a      	lsls	r2, r3, #5
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004d06:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004d0a:	d11f      	bne.n	8004d4c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	015a      	lsls	r2, r3, #5
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	4413      	add	r3, r2
 8004d14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	68ba      	ldr	r2, [r7, #8]
 8004d1c:	0151      	lsls	r1, r2, #5
 8004d1e:	68fa      	ldr	r2, [r7, #12]
 8004d20:	440a      	add	r2, r1
 8004d22:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d26:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004d2a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	015a      	lsls	r2, r3, #5
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	4413      	add	r3, r2
 8004d34:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68ba      	ldr	r2, [r7, #8]
 8004d3c:	0151      	lsls	r1, r2, #5
 8004d3e:	68fa      	ldr	r2, [r7, #12]
 8004d40:	440a      	add	r2, r1
 8004d42:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004d46:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d52:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	781b      	ldrb	r3, [r3, #0]
 8004d58:	f003 030f 	and.w	r3, r3, #15
 8004d5c:	2101      	movs	r1, #1
 8004d5e:	fa01 f303 	lsl.w	r3, r1, r3
 8004d62:	b29b      	uxth	r3, r3
 8004d64:	43db      	mvns	r3, r3
 8004d66:	68f9      	ldr	r1, [r7, #12]
 8004d68:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d76:	69da      	ldr	r2, [r3, #28]
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	f003 030f 	and.w	r3, r3, #15
 8004d80:	2101      	movs	r1, #1
 8004d82:	fa01 f303 	lsl.w	r3, r1, r3
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	43db      	mvns	r3, r3
 8004d8a:	68f9      	ldr	r1, [r7, #12]
 8004d8c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d90:	4013      	ands	r3, r2
 8004d92:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	015a      	lsls	r2, r3, #5
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	4413      	add	r3, r2
 8004d9c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004da0:	681a      	ldr	r2, [r3, #0]
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	0159      	lsls	r1, r3, #5
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	440b      	add	r3, r1
 8004daa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004dae:	4619      	mov	r1, r3
 8004db0:	4b35      	ldr	r3, [pc, #212]	@ (8004e88 <USB_DeactivateEndpoint+0x1b0>)
 8004db2:	4013      	ands	r3, r2
 8004db4:	600b      	str	r3, [r1, #0]
 8004db6:	e060      	b.n	8004e7a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	015a      	lsls	r2, r3, #5
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4413      	add	r3, r2
 8004dc0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004dca:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004dce:	d11f      	bne.n	8004e10 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004dea:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8004dee:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004df0:	68bb      	ldr	r3, [r7, #8]
 8004df2:	015a      	lsls	r2, r3, #5
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	4413      	add	r3, r2
 8004df8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	68ba      	ldr	r2, [r7, #8]
 8004e00:	0151      	lsls	r1, r2, #5
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	440a      	add	r2, r1
 8004e06:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8004e0a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004e0e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e16:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	781b      	ldrb	r3, [r3, #0]
 8004e1c:	f003 030f 	and.w	r3, r3, #15
 8004e20:	2101      	movs	r1, #1
 8004e22:	fa01 f303 	lsl.w	r3, r1, r3
 8004e26:	041b      	lsls	r3, r3, #16
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	68f9      	ldr	r1, [r7, #12]
 8004e2c:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e30:	4013      	ands	r3, r2
 8004e32:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004e3a:	69da      	ldr	r2, [r3, #28]
 8004e3c:	683b      	ldr	r3, [r7, #0]
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	f003 030f 	and.w	r3, r3, #15
 8004e44:	2101      	movs	r1, #1
 8004e46:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4a:	041b      	lsls	r3, r3, #16
 8004e4c:	43db      	mvns	r3, r3
 8004e4e:	68f9      	ldr	r1, [r7, #12]
 8004e50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004e54:	4013      	ands	r3, r2
 8004e56:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	015a      	lsls	r2, r3, #5
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	4413      	add	r3, r2
 8004e60:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e64:	681a      	ldr	r2, [r3, #0]
 8004e66:	68bb      	ldr	r3, [r7, #8]
 8004e68:	0159      	lsls	r1, r3, #5
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	440b      	add	r3, r1
 8004e6e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e72:	4619      	mov	r1, r3
 8004e74:	4b05      	ldr	r3, [pc, #20]	@ (8004e8c <USB_DeactivateEndpoint+0x1b4>)
 8004e76:	4013      	ands	r3, r2
 8004e78:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004e7a:	2300      	movs	r3, #0
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3714      	adds	r7, #20
 8004e80:	46bd      	mov	sp, r7
 8004e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e86:	4770      	bx	lr
 8004e88:	ec337800 	.word	0xec337800
 8004e8c:	eff37800 	.word	0xeff37800

08004e90 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b08a      	sub	sp, #40	@ 0x28
 8004e94:	af02      	add	r7, sp, #8
 8004e96:	60f8      	str	r0, [r7, #12]
 8004e98:	60b9      	str	r1, [r7, #8]
 8004e9a:	4613      	mov	r3, r2
 8004e9c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004ea2:	68bb      	ldr	r3, [r7, #8]
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ea8:	68bb      	ldr	r3, [r7, #8]
 8004eaa:	785b      	ldrb	r3, [r3, #1]
 8004eac:	2b01      	cmp	r3, #1
 8004eae:	f040 817f 	bne.w	80051b0 <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	691b      	ldr	r3, [r3, #16]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d132      	bne.n	8004f20 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004eba:	69bb      	ldr	r3, [r7, #24]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	69fb      	ldr	r3, [r7, #28]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ec6:	691b      	ldr	r3, [r3, #16]
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	0151      	lsls	r1, r2, #5
 8004ecc:	69fa      	ldr	r2, [r7, #28]
 8004ece:	440a      	add	r2, r1
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ed4:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004ed8:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004edc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	015a      	lsls	r2, r3, #5
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	4413      	add	r3, r2
 8004ee6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004eea:	691b      	ldr	r3, [r3, #16]
 8004eec:	69ba      	ldr	r2, [r7, #24]
 8004eee:	0151      	lsls	r1, r2, #5
 8004ef0:	69fa      	ldr	r2, [r7, #28]
 8004ef2:	440a      	add	r2, r1
 8004ef4:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ef8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004efc:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f0a:	691b      	ldr	r3, [r3, #16]
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	0151      	lsls	r1, r2, #5
 8004f10:	69fa      	ldr	r2, [r7, #28]
 8004f12:	440a      	add	r2, r1
 8004f14:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f18:	0cdb      	lsrs	r3, r3, #19
 8004f1a:	04db      	lsls	r3, r3, #19
 8004f1c:	6113      	str	r3, [r2, #16]
 8004f1e:	e097      	b.n	8005050 <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f20:	69bb      	ldr	r3, [r7, #24]
 8004f22:	015a      	lsls	r2, r3, #5
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	4413      	add	r3, r2
 8004f28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	0151      	lsls	r1, r2, #5
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	440a      	add	r2, r1
 8004f36:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f3a:	0cdb      	lsrs	r3, r3, #19
 8004f3c:	04db      	lsls	r3, r3, #19
 8004f3e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	015a      	lsls	r2, r3, #5
 8004f44:	69fb      	ldr	r3, [r7, #28]
 8004f46:	4413      	add	r3, r2
 8004f48:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	69ba      	ldr	r2, [r7, #24]
 8004f50:	0151      	lsls	r1, r2, #5
 8004f52:	69fa      	ldr	r2, [r7, #28]
 8004f54:	440a      	add	r2, r1
 8004f56:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f5a:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8004f5e:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8004f62:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8004f64:	69bb      	ldr	r3, [r7, #24]
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d11a      	bne.n	8004fa0 <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	691a      	ldr	r2, [r3, #16]
 8004f6e:	68bb      	ldr	r3, [r7, #8]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	d903      	bls.n	8004f7e <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	689a      	ldr	r2, [r3, #8]
 8004f7a:	68bb      	ldr	r3, [r7, #8]
 8004f7c:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f7e:	69bb      	ldr	r3, [r7, #24]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f8a:	691b      	ldr	r3, [r3, #16]
 8004f8c:	69ba      	ldr	r2, [r7, #24]
 8004f8e:	0151      	lsls	r1, r2, #5
 8004f90:	69fa      	ldr	r2, [r7, #28]
 8004f92:	440a      	add	r2, r1
 8004f94:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004f98:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004f9c:	6113      	str	r3, [r2, #16]
 8004f9e:	e044      	b.n	800502a <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	691a      	ldr	r2, [r3, #16]
 8004fa4:	68bb      	ldr	r3, [r7, #8]
 8004fa6:	689b      	ldr	r3, [r3, #8]
 8004fa8:	4413      	add	r3, r2
 8004faa:	1e5a      	subs	r2, r3, #1
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fb4:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	8afb      	ldrh	r3, [r7, #22]
 8004fc6:	04d9      	lsls	r1, r3, #19
 8004fc8:	4ba4      	ldr	r3, [pc, #656]	@ (800525c <USB_EPStartXfer+0x3cc>)
 8004fca:	400b      	ands	r3, r1
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	0148      	lsls	r0, r1, #5
 8004fd0:	69f9      	ldr	r1, [r7, #28]
 8004fd2:	4401      	add	r1, r0
 8004fd4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8004fdc:	68bb      	ldr	r3, [r7, #8]
 8004fde:	791b      	ldrb	r3, [r3, #4]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d122      	bne.n	800502a <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8004ffe:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8005002:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8005004:	69bb      	ldr	r3, [r7, #24]
 8005006:	015a      	lsls	r2, r3, #5
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	4413      	add	r3, r2
 800500c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005010:	691a      	ldr	r2, [r3, #16]
 8005012:	8afb      	ldrh	r3, [r7, #22]
 8005014:	075b      	lsls	r3, r3, #29
 8005016:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 800501a:	69b9      	ldr	r1, [r7, #24]
 800501c:	0148      	lsls	r0, r1, #5
 800501e:	69f9      	ldr	r1, [r7, #28]
 8005020:	4401      	add	r1, r0
 8005022:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8005026:	4313      	orrs	r3, r2
 8005028:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800502a:	69bb      	ldr	r3, [r7, #24]
 800502c:	015a      	lsls	r2, r3, #5
 800502e:	69fb      	ldr	r3, [r7, #28]
 8005030:	4413      	add	r3, r2
 8005032:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005036:	691a      	ldr	r2, [r3, #16]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005040:	69b9      	ldr	r1, [r7, #24]
 8005042:	0148      	lsls	r0, r1, #5
 8005044:	69f9      	ldr	r1, [r7, #28]
 8005046:	4401      	add	r1, r0
 8005048:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 800504c:	4313      	orrs	r3, r2
 800504e:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005050:	79fb      	ldrb	r3, [r7, #7]
 8005052:	2b01      	cmp	r3, #1
 8005054:	d14b      	bne.n	80050ee <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005056:	68bb      	ldr	r3, [r7, #8]
 8005058:	69db      	ldr	r3, [r3, #28]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d009      	beq.n	8005072 <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800505e:	69bb      	ldr	r3, [r7, #24]
 8005060:	015a      	lsls	r2, r3, #5
 8005062:	69fb      	ldr	r3, [r7, #28]
 8005064:	4413      	add	r3, r2
 8005066:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800506a:	461a      	mov	r2, r3
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	69db      	ldr	r3, [r3, #28]
 8005070:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	791b      	ldrb	r3, [r3, #4]
 8005076:	2b01      	cmp	r3, #1
 8005078:	d128      	bne.n	80050cc <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800507a:	69fb      	ldr	r3, [r7, #28]
 800507c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005086:	2b00      	cmp	r3, #0
 8005088:	d110      	bne.n	80050ac <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800508a:	69bb      	ldr	r3, [r7, #24]
 800508c:	015a      	lsls	r2, r3, #5
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	4413      	add	r3, r2
 8005092:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	69ba      	ldr	r2, [r7, #24]
 800509a:	0151      	lsls	r1, r2, #5
 800509c:	69fa      	ldr	r2, [r7, #28]
 800509e:	440a      	add	r2, r1
 80050a0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050a4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80050a8:	6013      	str	r3, [r2, #0]
 80050aa:	e00f      	b.n	80050cc <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	015a      	lsls	r2, r3, #5
 80050b0:	69fb      	ldr	r3, [r7, #28]
 80050b2:	4413      	add	r3, r2
 80050b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69ba      	ldr	r2, [r7, #24]
 80050bc:	0151      	lsls	r1, r2, #5
 80050be:	69fa      	ldr	r2, [r7, #28]
 80050c0:	440a      	add	r2, r1
 80050c2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050c6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050ca:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050cc:	69bb      	ldr	r3, [r7, #24]
 80050ce:	015a      	lsls	r2, r3, #5
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	4413      	add	r3, r2
 80050d4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69ba      	ldr	r2, [r7, #24]
 80050dc:	0151      	lsls	r1, r2, #5
 80050de:	69fa      	ldr	r2, [r7, #28]
 80050e0:	440a      	add	r2, r1
 80050e2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80050e6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	e166      	b.n	80053bc <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050ee:	69bb      	ldr	r3, [r7, #24]
 80050f0:	015a      	lsls	r2, r3, #5
 80050f2:	69fb      	ldr	r3, [r7, #28]
 80050f4:	4413      	add	r3, r2
 80050f6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	69ba      	ldr	r2, [r7, #24]
 80050fe:	0151      	lsls	r1, r2, #5
 8005100:	69fa      	ldr	r2, [r7, #28]
 8005102:	440a      	add	r2, r1
 8005104:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005108:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 800510c:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800510e:	68bb      	ldr	r3, [r7, #8]
 8005110:	791b      	ldrb	r3, [r3, #4]
 8005112:	2b01      	cmp	r3, #1
 8005114:	d015      	beq.n	8005142 <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005116:	68bb      	ldr	r3, [r7, #8]
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	2b00      	cmp	r3, #0
 800511c:	f000 814e 	beq.w	80053bc <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005120:	69fb      	ldr	r3, [r7, #28]
 8005122:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005126:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	781b      	ldrb	r3, [r3, #0]
 800512c:	f003 030f 	and.w	r3, r3, #15
 8005130:	2101      	movs	r1, #1
 8005132:	fa01 f303 	lsl.w	r3, r1, r3
 8005136:	69f9      	ldr	r1, [r7, #28]
 8005138:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800513c:	4313      	orrs	r3, r2
 800513e:	634b      	str	r3, [r1, #52]	@ 0x34
 8005140:	e13c      	b.n	80053bc <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005148:	689b      	ldr	r3, [r3, #8]
 800514a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800514e:	2b00      	cmp	r3, #0
 8005150:	d110      	bne.n	8005174 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005152:	69bb      	ldr	r3, [r7, #24]
 8005154:	015a      	lsls	r2, r3, #5
 8005156:	69fb      	ldr	r3, [r7, #28]
 8005158:	4413      	add	r3, r2
 800515a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	69ba      	ldr	r2, [r7, #24]
 8005162:	0151      	lsls	r1, r2, #5
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	440a      	add	r2, r1
 8005168:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800516c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005170:	6013      	str	r3, [r2, #0]
 8005172:	e00f      	b.n	8005194 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8005174:	69bb      	ldr	r3, [r7, #24]
 8005176:	015a      	lsls	r2, r3, #5
 8005178:	69fb      	ldr	r3, [r7, #28]
 800517a:	4413      	add	r3, r2
 800517c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	69ba      	ldr	r2, [r7, #24]
 8005184:	0151      	lsls	r1, r2, #5
 8005186:	69fa      	ldr	r2, [r7, #28]
 8005188:	440a      	add	r2, r1
 800518a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800518e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005192:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	68d9      	ldr	r1, [r3, #12]
 8005198:	68bb      	ldr	r3, [r7, #8]
 800519a:	781a      	ldrb	r2, [r3, #0]
 800519c:	68bb      	ldr	r3, [r7, #8]
 800519e:	691b      	ldr	r3, [r3, #16]
 80051a0:	b298      	uxth	r0, r3
 80051a2:	79fb      	ldrb	r3, [r7, #7]
 80051a4:	9300      	str	r3, [sp, #0]
 80051a6:	4603      	mov	r3, r0
 80051a8:	68f8      	ldr	r0, [r7, #12]
 80051aa:	f000 f9b9 	bl	8005520 <USB_WritePacket>
 80051ae:	e105      	b.n	80053bc <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051ca:	0cdb      	lsrs	r3, r3, #19
 80051cc:	04db      	lsls	r3, r3, #19
 80051ce:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051d0:	69bb      	ldr	r3, [r7, #24]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80051dc:	691b      	ldr	r3, [r3, #16]
 80051de:	69ba      	ldr	r2, [r7, #24]
 80051e0:	0151      	lsls	r1, r2, #5
 80051e2:	69fa      	ldr	r2, [r7, #28]
 80051e4:	440a      	add	r2, r1
 80051e6:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051ea:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 80051ee:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 80051f2:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 80051f4:	69bb      	ldr	r3, [r7, #24]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d132      	bne.n	8005260 <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d003      	beq.n	800520a <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	689a      	ldr	r2, [r3, #8]
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 800520a:	68bb      	ldr	r3, [r7, #8]
 800520c:	689a      	ldr	r2, [r3, #8]
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	69fb      	ldr	r3, [r7, #28]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800521e:	691a      	ldr	r2, [r3, #16]
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	6a1b      	ldr	r3, [r3, #32]
 8005224:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005228:	69b9      	ldr	r1, [r7, #24]
 800522a:	0148      	lsls	r0, r1, #5
 800522c:	69f9      	ldr	r1, [r7, #28]
 800522e:	4401      	add	r1, r0
 8005230:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8005234:	4313      	orrs	r3, r2
 8005236:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005238:	69bb      	ldr	r3, [r7, #24]
 800523a:	015a      	lsls	r2, r3, #5
 800523c:	69fb      	ldr	r3, [r7, #28]
 800523e:	4413      	add	r3, r2
 8005240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005244:	691b      	ldr	r3, [r3, #16]
 8005246:	69ba      	ldr	r2, [r7, #24]
 8005248:	0151      	lsls	r1, r2, #5
 800524a:	69fa      	ldr	r2, [r7, #28]
 800524c:	440a      	add	r2, r1
 800524e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005252:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005256:	6113      	str	r3, [r2, #16]
 8005258:	e062      	b.n	8005320 <USB_EPStartXfer+0x490>
 800525a:	bf00      	nop
 800525c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8005260:	68bb      	ldr	r3, [r7, #8]
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	2b00      	cmp	r3, #0
 8005266:	d123      	bne.n	80052b0 <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	015a      	lsls	r2, r3, #5
 800526c:	69fb      	ldr	r3, [r7, #28]
 800526e:	4413      	add	r3, r2
 8005270:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005274:	691a      	ldr	r2, [r3, #16]
 8005276:	68bb      	ldr	r3, [r7, #8]
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800527e:	69b9      	ldr	r1, [r7, #24]
 8005280:	0148      	lsls	r0, r1, #5
 8005282:	69f9      	ldr	r1, [r7, #28]
 8005284:	4401      	add	r1, r0
 8005286:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800528a:	4313      	orrs	r3, r2
 800528c:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	015a      	lsls	r2, r3, #5
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4413      	add	r3, r2
 8005296:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800529a:	691b      	ldr	r3, [r3, #16]
 800529c:	69ba      	ldr	r2, [r7, #24]
 800529e:	0151      	lsls	r1, r2, #5
 80052a0:	69fa      	ldr	r2, [r7, #28]
 80052a2:	440a      	add	r2, r1
 80052a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80052a8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80052ac:	6113      	str	r3, [r2, #16]
 80052ae:	e037      	b.n	8005320 <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	691a      	ldr	r2, [r3, #16]
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	4413      	add	r3, r2
 80052ba:	1e5a      	subs	r2, r3, #1
 80052bc:	68bb      	ldr	r3, [r7, #8]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80052c4:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	689b      	ldr	r3, [r3, #8]
 80052ca:	8afa      	ldrh	r2, [r7, #22]
 80052cc:	fb03 f202 	mul.w	r2, r3, r2
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80052d4:	69bb      	ldr	r3, [r7, #24]
 80052d6:	015a      	lsls	r2, r3, #5
 80052d8:	69fb      	ldr	r3, [r7, #28]
 80052da:	4413      	add	r3, r2
 80052dc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80052e0:	691a      	ldr	r2, [r3, #16]
 80052e2:	8afb      	ldrh	r3, [r7, #22]
 80052e4:	04d9      	lsls	r1, r3, #19
 80052e6:	4b38      	ldr	r3, [pc, #224]	@ (80053c8 <USB_EPStartXfer+0x538>)
 80052e8:	400b      	ands	r3, r1
 80052ea:	69b9      	ldr	r1, [r7, #24]
 80052ec:	0148      	lsls	r0, r1, #5
 80052ee:	69f9      	ldr	r1, [r7, #28]
 80052f0:	4401      	add	r1, r0
 80052f2:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80052f6:	4313      	orrs	r3, r2
 80052f8:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005306:	691a      	ldr	r2, [r3, #16]
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	6a1b      	ldr	r3, [r3, #32]
 800530c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005310:	69b9      	ldr	r1, [r7, #24]
 8005312:	0148      	lsls	r0, r1, #5
 8005314:	69f9      	ldr	r1, [r7, #28]
 8005316:	4401      	add	r1, r0
 8005318:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 800531c:	4313      	orrs	r3, r2
 800531e:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 8005320:	79fb      	ldrb	r3, [r7, #7]
 8005322:	2b01      	cmp	r3, #1
 8005324:	d10d      	bne.n	8005342 <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	2b00      	cmp	r3, #0
 800532c:	d009      	beq.n	8005342 <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	68d9      	ldr	r1, [r3, #12]
 8005332:	69bb      	ldr	r3, [r7, #24]
 8005334:	015a      	lsls	r2, r3, #5
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	4413      	add	r3, r2
 800533a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800533e:	460a      	mov	r2, r1
 8005340:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8005342:	68bb      	ldr	r3, [r7, #8]
 8005344:	791b      	ldrb	r3, [r3, #4]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d128      	bne.n	800539c <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800534a:	69fb      	ldr	r3, [r7, #28]
 800534c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d110      	bne.n	800537c <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800535a:	69bb      	ldr	r3, [r7, #24]
 800535c:	015a      	lsls	r2, r3, #5
 800535e:	69fb      	ldr	r3, [r7, #28]
 8005360:	4413      	add	r3, r2
 8005362:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	69ba      	ldr	r2, [r7, #24]
 800536a:	0151      	lsls	r1, r2, #5
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	440a      	add	r2, r1
 8005370:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005374:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8005378:	6013      	str	r3, [r2, #0]
 800537a:	e00f      	b.n	800539c <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800537c:	69bb      	ldr	r3, [r7, #24]
 800537e:	015a      	lsls	r2, r3, #5
 8005380:	69fb      	ldr	r3, [r7, #28]
 8005382:	4413      	add	r3, r2
 8005384:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	69ba      	ldr	r2, [r7, #24]
 800538c:	0151      	lsls	r1, r2, #5
 800538e:	69fa      	ldr	r2, [r7, #28]
 8005390:	440a      	add	r2, r1
 8005392:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005396:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800539a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800539c:	69bb      	ldr	r3, [r7, #24]
 800539e:	015a      	lsls	r2, r3, #5
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	4413      	add	r3, r2
 80053a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69ba      	ldr	r2, [r7, #24]
 80053ac:	0151      	lsls	r1, r2, #5
 80053ae:	69fa      	ldr	r2, [r7, #28]
 80053b0:	440a      	add	r2, r1
 80053b2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80053b6:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 80053ba:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053bc:	2300      	movs	r3, #0
}
 80053be:	4618      	mov	r0, r3
 80053c0:	3720      	adds	r7, #32
 80053c2:	46bd      	mov	sp, r7
 80053c4:	bd80      	pop	{r7, pc}
 80053c6:	bf00      	nop
 80053c8:	1ff80000 	.word	0x1ff80000

080053cc <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b087      	sub	sp, #28
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80053da:	2300      	movs	r3, #0
 80053dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	785b      	ldrb	r3, [r3, #1]
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d14a      	bne.n	8005480 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	781b      	ldrb	r3, [r3, #0]
 80053ee:	015a      	lsls	r2, r3, #5
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	4413      	add	r3, r2
 80053f4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80053fe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005402:	f040 8086 	bne.w	8005512 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	7812      	ldrb	r2, [r2, #0]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005424:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8005428:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005448:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800544c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f242 7210 	movw	r2, #10000	@ 0x2710
 800545a:	4293      	cmp	r3, r2
 800545c:	d902      	bls.n	8005464 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	75fb      	strb	r3, [r7, #23]
          break;
 8005462:	e056      	b.n	8005512 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005478:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800547c:	d0e7      	beq.n	800544e <USB_EPStopXfer+0x82>
 800547e:	e048      	b.n	8005512 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	781b      	ldrb	r3, [r3, #0]
 8005484:	015a      	lsls	r2, r3, #5
 8005486:	693b      	ldr	r3, [r7, #16]
 8005488:	4413      	add	r3, r2
 800548a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005494:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005498:	d13b      	bne.n	8005512 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800549a:	683b      	ldr	r3, [r7, #0]
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	015a      	lsls	r2, r3, #5
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	683a      	ldr	r2, [r7, #0]
 80054ac:	7812      	ldrb	r2, [r2, #0]
 80054ae:	0151      	lsls	r1, r2, #5
 80054b0:	693a      	ldr	r2, [r7, #16]
 80054b2:	440a      	add	r2, r1
 80054b4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054b8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80054bc:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	781b      	ldrb	r3, [r3, #0]
 80054c2:	015a      	lsls	r2, r3, #5
 80054c4:	693b      	ldr	r3, [r7, #16]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	683a      	ldr	r2, [r7, #0]
 80054d0:	7812      	ldrb	r2, [r2, #0]
 80054d2:	0151      	lsls	r1, r2, #5
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	440a      	add	r2, r1
 80054d8:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80054dc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80054e0:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	3301      	adds	r3, #1
 80054e6:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	f242 7210 	movw	r2, #10000	@ 0x2710
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d902      	bls.n	80054f8 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	75fb      	strb	r3, [r7, #23]
          break;
 80054f6:	e00c      	b.n	8005512 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	015a      	lsls	r2, r3, #5
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4413      	add	r3, r2
 8005502:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800550c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005510:	d0e7      	beq.n	80054e2 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005512:	7dfb      	ldrb	r3, [r7, #23]
}
 8005514:	4618      	mov	r0, r3
 8005516:	371c      	adds	r7, #28
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr

08005520 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005520:	b480      	push	{r7}
 8005522:	b089      	sub	sp, #36	@ 0x24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	4611      	mov	r1, r2
 800552c:	461a      	mov	r2, r3
 800552e:	460b      	mov	r3, r1
 8005530:	71fb      	strb	r3, [r7, #7]
 8005532:	4613      	mov	r3, r2
 8005534:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800553e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8005542:	2b00      	cmp	r3, #0
 8005544:	d123      	bne.n	800558e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005546:	88bb      	ldrh	r3, [r7, #4]
 8005548:	3303      	adds	r3, #3
 800554a:	089b      	lsrs	r3, r3, #2
 800554c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800554e:	2300      	movs	r3, #0
 8005550:	61bb      	str	r3, [r7, #24]
 8005552:	e018      	b.n	8005586 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005554:	79fb      	ldrb	r3, [r7, #7]
 8005556:	031a      	lsls	r2, r3, #12
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	4413      	add	r3, r2
 800555c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8005560:	461a      	mov	r2, r3
 8005562:	69fb      	ldr	r3, [r7, #28]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005568:	69fb      	ldr	r3, [r7, #28]
 800556a:	3301      	adds	r3, #1
 800556c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800556e:	69fb      	ldr	r3, [r7, #28]
 8005570:	3301      	adds	r3, #1
 8005572:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005574:	69fb      	ldr	r3, [r7, #28]
 8005576:	3301      	adds	r3, #1
 8005578:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800557a:	69fb      	ldr	r3, [r7, #28]
 800557c:	3301      	adds	r3, #1
 800557e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005580:	69bb      	ldr	r3, [r7, #24]
 8005582:	3301      	adds	r3, #1
 8005584:	61bb      	str	r3, [r7, #24]
 8005586:	69ba      	ldr	r2, [r7, #24]
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	429a      	cmp	r2, r3
 800558c:	d3e2      	bcc.n	8005554 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3724      	adds	r7, #36	@ 0x24
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 800559c:	b480      	push	{r7}
 800559e:	b08b      	sub	sp, #44	@ 0x2c
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	4613      	mov	r3, r2
 80055a8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	089b      	lsrs	r3, r3, #2
 80055b6:	b29b      	uxth	r3, r3
 80055b8:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80055ba:	88fb      	ldrh	r3, [r7, #6]
 80055bc:	f003 0303 	and.w	r3, r3, #3
 80055c0:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80055c2:	2300      	movs	r3, #0
 80055c4:	623b      	str	r3, [r7, #32]
 80055c6:	e014      	b.n	80055f2 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80055c8:	69bb      	ldr	r3, [r7, #24]
 80055ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80055ce:	681a      	ldr	r2, [r3, #0]
 80055d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d2:	601a      	str	r2, [r3, #0]
    pDest++;
 80055d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055d6:	3301      	adds	r3, #1
 80055d8:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055dc:	3301      	adds	r3, #1
 80055de:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e2:	3301      	adds	r3, #1
 80055e4:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80055e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80055e8:	3301      	adds	r3, #1
 80055ea:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 80055ec:	6a3b      	ldr	r3, [r7, #32]
 80055ee:	3301      	adds	r3, #1
 80055f0:	623b      	str	r3, [r7, #32]
 80055f2:	6a3a      	ldr	r2, [r7, #32]
 80055f4:	697b      	ldr	r3, [r7, #20]
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d3e6      	bcc.n	80055c8 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80055fa:	8bfb      	ldrh	r3, [r7, #30]
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d01e      	beq.n	800563e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005600:	2300      	movs	r3, #0
 8005602:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800560a:	461a      	mov	r2, r3
 800560c:	f107 0310 	add.w	r3, r7, #16
 8005610:	6812      	ldr	r2, [r2, #0]
 8005612:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	6a3b      	ldr	r3, [r7, #32]
 8005618:	b2db      	uxtb	r3, r3
 800561a:	00db      	lsls	r3, r3, #3
 800561c:	fa22 f303 	lsr.w	r3, r2, r3
 8005620:	b2da      	uxtb	r2, r3
 8005622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005624:	701a      	strb	r2, [r3, #0]
      i++;
 8005626:	6a3b      	ldr	r3, [r7, #32]
 8005628:	3301      	adds	r3, #1
 800562a:	623b      	str	r3, [r7, #32]
      pDest++;
 800562c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800562e:	3301      	adds	r3, #1
 8005630:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8005632:	8bfb      	ldrh	r3, [r7, #30]
 8005634:	3b01      	subs	r3, #1
 8005636:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005638:	8bfb      	ldrh	r3, [r7, #30]
 800563a:	2b00      	cmp	r3, #0
 800563c:	d1ea      	bne.n	8005614 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800563e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8005640:	4618      	mov	r0, r3
 8005642:	372c      	adds	r7, #44	@ 0x2c
 8005644:	46bd      	mov	sp, r7
 8005646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800564a:	4770      	bx	lr

0800564c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 800564c:	b480      	push	{r7}
 800564e:	b085      	sub	sp, #20
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	781b      	ldrb	r3, [r3, #0]
 800565e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	785b      	ldrb	r3, [r3, #1]
 8005664:	2b01      	cmp	r3, #1
 8005666:	d12c      	bne.n	80056c2 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005668:	68bb      	ldr	r3, [r7, #8]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	2b00      	cmp	r3, #0
 8005678:	db12      	blt.n	80056a0 <USB_EPSetStall+0x54>
 800567a:	68bb      	ldr	r3, [r7, #8]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00f      	beq.n	80056a0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005680:	68bb      	ldr	r3, [r7, #8]
 8005682:	015a      	lsls	r2, r3, #5
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	4413      	add	r3, r2
 8005688:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68ba      	ldr	r2, [r7, #8]
 8005690:	0151      	lsls	r1, r2, #5
 8005692:	68fa      	ldr	r2, [r7, #12]
 8005694:	440a      	add	r2, r1
 8005696:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800569a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800569e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	015a      	lsls	r2, r3, #5
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	4413      	add	r3, r2
 80056a8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	0151      	lsls	r1, r2, #5
 80056b2:	68fa      	ldr	r2, [r7, #12]
 80056b4:	440a      	add	r2, r1
 80056b6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80056ba:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80056be:	6013      	str	r3, [r2, #0]
 80056c0:	e02b      	b.n	800571a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	68fb      	ldr	r3, [r7, #12]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	db12      	blt.n	80056fa <USB_EPSetStall+0xae>
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d00f      	beq.n	80056fa <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	015a      	lsls	r2, r3, #5
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	4413      	add	r3, r2
 80056e2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	68ba      	ldr	r2, [r7, #8]
 80056ea:	0151      	lsls	r1, r2, #5
 80056ec:	68fa      	ldr	r2, [r7, #12]
 80056ee:	440a      	add	r2, r1
 80056f0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80056f4:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80056f8:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	015a      	lsls	r2, r3, #5
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	4413      	add	r3, r2
 8005702:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68ba      	ldr	r2, [r7, #8]
 800570a:	0151      	lsls	r1, r2, #5
 800570c:	68fa      	ldr	r2, [r7, #12]
 800570e:	440a      	add	r2, r1
 8005710:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005714:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8005718:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3714      	adds	r7, #20
 8005720:	46bd      	mov	sp, r7
 8005722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005726:	4770      	bx	lr

08005728 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8005728:	b480      	push	{r7}
 800572a:	b085      	sub	sp, #20
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
 8005730:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005736:	683b      	ldr	r3, [r7, #0]
 8005738:	781b      	ldrb	r3, [r3, #0]
 800573a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	785b      	ldrb	r3, [r3, #1]
 8005740:	2b01      	cmp	r3, #1
 8005742:	d128      	bne.n	8005796 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005744:	68bb      	ldr	r3, [r7, #8]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	68ba      	ldr	r2, [r7, #8]
 8005754:	0151      	lsls	r1, r2, #5
 8005756:	68fa      	ldr	r2, [r7, #12]
 8005758:	440a      	add	r2, r1
 800575a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800575e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005762:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005764:	683b      	ldr	r3, [r7, #0]
 8005766:	791b      	ldrb	r3, [r3, #4]
 8005768:	2b03      	cmp	r3, #3
 800576a:	d003      	beq.n	8005774 <USB_EPClearStall+0x4c>
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	791b      	ldrb	r3, [r3, #4]
 8005770:	2b02      	cmp	r3, #2
 8005772:	d138      	bne.n	80057e6 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	015a      	lsls	r2, r3, #5
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	4413      	add	r3, r2
 800577c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	68ba      	ldr	r2, [r7, #8]
 8005784:	0151      	lsls	r1, r2, #5
 8005786:	68fa      	ldr	r2, [r7, #12]
 8005788:	440a      	add	r2, r1
 800578a:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800578e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005792:	6013      	str	r3, [r2, #0]
 8005794:	e027      	b.n	80057e6 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	015a      	lsls	r2, r3, #5
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	4413      	add	r3, r2
 800579e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	68ba      	ldr	r2, [r7, #8]
 80057a6:	0151      	lsls	r1, r2, #5
 80057a8:	68fa      	ldr	r2, [r7, #12]
 80057aa:	440a      	add	r2, r1
 80057ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057b0:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80057b4:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	791b      	ldrb	r3, [r3, #4]
 80057ba:	2b03      	cmp	r3, #3
 80057bc:	d003      	beq.n	80057c6 <USB_EPClearStall+0x9e>
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	791b      	ldrb	r3, [r3, #4]
 80057c2:	2b02      	cmp	r3, #2
 80057c4:	d10f      	bne.n	80057e6 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	015a      	lsls	r2, r3, #5
 80057ca:	68fb      	ldr	r3, [r7, #12]
 80057cc:	4413      	add	r3, r2
 80057ce:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	68ba      	ldr	r2, [r7, #8]
 80057d6:	0151      	lsls	r1, r2, #5
 80057d8:	68fa      	ldr	r2, [r7, #12]
 80057da:	440a      	add	r2, r1
 80057dc:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80057e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80057e4:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80057e6:	2300      	movs	r3, #0
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 80057f4:	b480      	push	{r7}
 80057f6:	b085      	sub	sp, #20
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	460b      	mov	r3, r1
 80057fe:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	68fa      	ldr	r2, [r7, #12]
 800580e:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005812:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005816:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	78fb      	ldrb	r3, [r7, #3]
 8005822:	011b      	lsls	r3, r3, #4
 8005824:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 8005828:	68f9      	ldr	r1, [r7, #12]
 800582a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800582e:	4313      	orrs	r3, r2
 8005830:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005832:	2300      	movs	r3, #0
}
 8005834:	4618      	mov	r0, r3
 8005836:	3714      	adds	r7, #20
 8005838:	46bd      	mov	sp, r7
 800583a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583e:	4770      	bx	lr

08005840 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005840:	b480      	push	{r7}
 8005842:	b085      	sub	sp, #20
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	68fa      	ldr	r2, [r7, #12]
 8005856:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800585a:	f023 0303 	bic.w	r3, r3, #3
 800585e:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005866:	685b      	ldr	r3, [r3, #4]
 8005868:	68fa      	ldr	r2, [r7, #12]
 800586a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800586e:	f023 0302 	bic.w	r3, r3, #2
 8005872:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3714      	adds	r7, #20
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8005882:	b480      	push	{r7}
 8005884:	b085      	sub	sp, #20
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68fa      	ldr	r2, [r7, #12]
 8005898:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800589c:	f023 0303 	bic.w	r3, r3, #3
 80058a0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	68fa      	ldr	r2, [r7, #12]
 80058ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80058b0:	f043 0302 	orr.w	r3, r3, #2
 80058b4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80058b6:	2300      	movs	r3, #0
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3714      	adds	r7, #20
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 80058c4:	b480      	push	{r7}
 80058c6:	b085      	sub	sp, #20
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	695b      	ldr	r3, [r3, #20]
 80058d0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	699b      	ldr	r3, [r3, #24]
 80058d6:	68fa      	ldr	r2, [r7, #12]
 80058d8:	4013      	ands	r3, r2
 80058da:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 80058dc:	68fb      	ldr	r3, [r7, #12]
}
 80058de:	4618      	mov	r0, r3
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr

080058ea <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b085      	sub	sp, #20
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80058fc:	699b      	ldr	r3, [r3, #24]
 80058fe:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005906:	69db      	ldr	r3, [r3, #28]
 8005908:	68ba      	ldr	r2, [r7, #8]
 800590a:	4013      	ands	r3, r2
 800590c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	0c1b      	lsrs	r3, r3, #16
}
 8005912:	4618      	mov	r0, r3
 8005914:	3714      	adds	r7, #20
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr

0800591e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 800591e:	b480      	push	{r7}
 8005920:	b085      	sub	sp, #20
 8005922:	af00      	add	r7, sp, #0
 8005924:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005930:	699b      	ldr	r3, [r3, #24]
 8005932:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800593a:	69db      	ldr	r3, [r3, #28]
 800593c:	68ba      	ldr	r2, [r7, #8]
 800593e:	4013      	ands	r3, r2
 8005940:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005942:	68bb      	ldr	r3, [r7, #8]
 8005944:	b29b      	uxth	r3, r3
}
 8005946:	4618      	mov	r0, r3
 8005948:	3714      	adds	r7, #20
 800594a:	46bd      	mov	sp, r7
 800594c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005950:	4770      	bx	lr

08005952 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005952:	b480      	push	{r7}
 8005954:	b085      	sub	sp, #20
 8005956:	af00      	add	r7, sp, #0
 8005958:	6078      	str	r0, [r7, #4]
 800595a:	460b      	mov	r3, r1
 800595c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005962:	78fb      	ldrb	r3, [r7, #3]
 8005964:	015a      	lsls	r2, r3, #5
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	4413      	add	r3, r2
 800596a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	68ba      	ldr	r2, [r7, #8]
 800597c:	4013      	ands	r3, r2
 800597e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005980:	68bb      	ldr	r3, [r7, #8]
}
 8005982:	4618      	mov	r0, r3
 8005984:	3714      	adds	r7, #20
 8005986:	46bd      	mov	sp, r7
 8005988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598c:	4770      	bx	lr

0800598e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800598e:	b480      	push	{r7}
 8005990:	b087      	sub	sp, #28
 8005992:	af00      	add	r7, sp, #0
 8005994:	6078      	str	r0, [r7, #4]
 8005996:	460b      	mov	r3, r1
 8005998:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800599e:	697b      	ldr	r3, [r7, #20]
 80059a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059a4:	691b      	ldr	r3, [r3, #16]
 80059a6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80059a8:	697b      	ldr	r3, [r7, #20]
 80059aa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80059ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b0:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80059b2:	78fb      	ldrb	r3, [r7, #3]
 80059b4:	f003 030f 	and.w	r3, r3, #15
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	fa22 f303 	lsr.w	r3, r2, r3
 80059be:	01db      	lsls	r3, r3, #7
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80059c8:	78fb      	ldrb	r3, [r7, #3]
 80059ca:	015a      	lsls	r2, r3, #5
 80059cc:	697b      	ldr	r3, [r7, #20]
 80059ce:	4413      	add	r3, r2
 80059d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80059d4:	689b      	ldr	r3, [r3, #8]
 80059d6:	693a      	ldr	r2, [r7, #16]
 80059d8:	4013      	ands	r3, r2
 80059da:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80059dc:	68bb      	ldr	r3, [r7, #8]
}
 80059de:	4618      	mov	r0, r3
 80059e0:	371c      	adds	r7, #28
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80059ea:	b480      	push	{r7}
 80059ec:	b083      	sub	sp, #12
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	f003 0301 	and.w	r3, r3, #1
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 8005a06:	b480      	push	{r7}
 8005a08:	b085      	sub	sp, #20
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	68fa      	ldr	r2, [r7, #12]
 8005a1c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005a20:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8005a24:	f023 0307 	bic.w	r3, r3, #7
 8005a28:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005a30:	685b      	ldr	r3, [r3, #4]
 8005a32:	68fa      	ldr	r2, [r7, #12]
 8005a34:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005a38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005a3c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005a3e:	2300      	movs	r3, #0
}
 8005a40:	4618      	mov	r0, r3
 8005a42:	3714      	adds	r7, #20
 8005a44:	46bd      	mov	sp, r7
 8005a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4a:	4770      	bx	lr

08005a4c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 8005a4c:	b480      	push	{r7}
 8005a4e:	b087      	sub	sp, #28
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	60f8      	str	r0, [r7, #12]
 8005a54:	460b      	mov	r3, r1
 8005a56:	607a      	str	r2, [r7, #4]
 8005a58:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	333c      	adds	r3, #60	@ 0x3c
 8005a62:	3304      	adds	r3, #4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	4a26      	ldr	r2, [pc, #152]	@ (8005b04 <USB_EP0_OutStart+0xb8>)
 8005a6c:	4293      	cmp	r3, r2
 8005a6e:	d90a      	bls.n	8005a86 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005a70:	697b      	ldr	r3, [r7, #20]
 8005a72:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005a7c:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005a80:	d101      	bne.n	8005a86 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005a82:	2300      	movs	r3, #0
 8005a84:	e037      	b.n	8005af6 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005a86:	697b      	ldr	r3, [r7, #20]
 8005a88:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a8c:	461a      	mov	r2, r3
 8005a8e:	2300      	movs	r3, #0
 8005a90:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005a92:	697b      	ldr	r3, [r7, #20]
 8005a94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005a98:	691b      	ldr	r3, [r3, #16]
 8005a9a:	697a      	ldr	r2, [r7, #20]
 8005a9c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aa0:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8005aa4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005aa6:	697b      	ldr	r3, [r7, #20]
 8005aa8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005aac:	691b      	ldr	r3, [r3, #16]
 8005aae:	697a      	ldr	r2, [r7, #20]
 8005ab0:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ab4:	f043 0318 	orr.w	r3, r3, #24
 8005ab8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ac0:	691b      	ldr	r3, [r3, #16]
 8005ac2:	697a      	ldr	r2, [r7, #20]
 8005ac4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005ac8:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8005acc:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005ace:	7afb      	ldrb	r3, [r7, #11]
 8005ad0:	2b01      	cmp	r3, #1
 8005ad2:	d10f      	bne.n	8005af4 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ada:	461a      	mov	r2, r3
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005ae0:	697b      	ldr	r3, [r7, #20]
 8005ae2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	697a      	ldr	r2, [r7, #20]
 8005aea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005aee:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 8005af2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005af4:	2300      	movs	r3, #0
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	371c      	adds	r7, #28
 8005afa:	46bd      	mov	sp, r7
 8005afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop
 8005b04:	4f54300a 	.word	0x4f54300a

08005b08 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b085      	sub	sp, #20
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005b10:	2300      	movs	r3, #0
 8005b12:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	3301      	adds	r3, #1
 8005b18:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b20:	d901      	bls.n	8005b26 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005b22:	2303      	movs	r3, #3
 8005b24:	e022      	b.n	8005b6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	691b      	ldr	r3, [r3, #16]
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	daf2      	bge.n	8005b14 <USB_CoreReset+0xc>

  count = 10U;
 8005b2e:	230a      	movs	r3, #10
 8005b30:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8005b32:	e002      	b.n	8005b3a <USB_CoreReset+0x32>
  {
    count--;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	3b01      	subs	r3, #1
 8005b38:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d1f9      	bne.n	8005b34 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	691b      	ldr	r3, [r3, #16]
 8005b44:	f043 0201 	orr.w	r2, r3, #1
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8005b58:	d901      	bls.n	8005b5e <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8005b5a:	2303      	movs	r3, #3
 8005b5c:	e006      	b.n	8005b6c <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	691b      	ldr	r3, [r3, #16]
 8005b62:	f003 0301 	and.w	r3, r3, #1
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d0f0      	beq.n	8005b4c <USB_CoreReset+0x44>

  return HAL_OK;
 8005b6a:	2300      	movs	r3, #0
}
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	3714      	adds	r7, #20
 8005b70:	46bd      	mov	sp, r7
 8005b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b76:	4770      	bx	lr

08005b78 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
 8005b80:	460b      	mov	r3, r1
 8005b82:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005b84:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8005b88:	f002 fc4c 	bl	8008424 <USBD_static_malloc>
 8005b8c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d109      	bne.n	8005ba8 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	32b0      	adds	r2, #176	@ 0xb0
 8005b9e:	2100      	movs	r1, #0
 8005ba0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005ba4:	2302      	movs	r3, #2
 8005ba6:	e0d4      	b.n	8005d52 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8005ba8:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8005bac:	2100      	movs	r1, #0
 8005bae:	68f8      	ldr	r0, [r7, #12]
 8005bb0:	f002 fe86 	bl	80088c0 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	32b0      	adds	r2, #176	@ 0xb0
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	32b0      	adds	r2, #176	@ 0xb0
 8005bce:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	7c1b      	ldrb	r3, [r3, #16]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d138      	bne.n	8005c52 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005be0:	4b5e      	ldr	r3, [pc, #376]	@ (8005d5c <USBD_CDC_Init+0x1e4>)
 8005be2:	7819      	ldrb	r1, [r3, #0]
 8005be4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005be8:	2202      	movs	r2, #2
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f002 faf7 	bl	80081de <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005bf0:	4b5a      	ldr	r3, [pc, #360]	@ (8005d5c <USBD_CDC_Init+0x1e4>)
 8005bf2:	781b      	ldrb	r3, [r3, #0]
 8005bf4:	f003 020f 	and.w	r2, r3, #15
 8005bf8:	6879      	ldr	r1, [r7, #4]
 8005bfa:	4613      	mov	r3, r2
 8005bfc:	009b      	lsls	r3, r3, #2
 8005bfe:	4413      	add	r3, r2
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	440b      	add	r3, r1
 8005c04:	3323      	adds	r3, #35	@ 0x23
 8005c06:	2201      	movs	r2, #1
 8005c08:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c0a:	4b55      	ldr	r3, [pc, #340]	@ (8005d60 <USBD_CDC_Init+0x1e8>)
 8005c0c:	7819      	ldrb	r1, [r3, #0]
 8005c0e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005c12:	2202      	movs	r2, #2
 8005c14:	6878      	ldr	r0, [r7, #4]
 8005c16:	f002 fae2 	bl	80081de <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c1a:	4b51      	ldr	r3, [pc, #324]	@ (8005d60 <USBD_CDC_Init+0x1e8>)
 8005c1c:	781b      	ldrb	r3, [r3, #0]
 8005c1e:	f003 020f 	and.w	r2, r3, #15
 8005c22:	6879      	ldr	r1, [r7, #4]
 8005c24:	4613      	mov	r3, r2
 8005c26:	009b      	lsls	r3, r3, #2
 8005c28:	4413      	add	r3, r2
 8005c2a:	009b      	lsls	r3, r3, #2
 8005c2c:	440b      	add	r3, r1
 8005c2e:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005c32:	2201      	movs	r2, #1
 8005c34:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8005c36:	4b4b      	ldr	r3, [pc, #300]	@ (8005d64 <USBD_CDC_Init+0x1ec>)
 8005c38:	781b      	ldrb	r3, [r3, #0]
 8005c3a:	f003 020f 	and.w	r2, r3, #15
 8005c3e:	6879      	ldr	r1, [r7, #4]
 8005c40:	4613      	mov	r3, r2
 8005c42:	009b      	lsls	r3, r3, #2
 8005c44:	4413      	add	r3, r2
 8005c46:	009b      	lsls	r3, r3, #2
 8005c48:	440b      	add	r3, r1
 8005c4a:	331c      	adds	r3, #28
 8005c4c:	2210      	movs	r2, #16
 8005c4e:	601a      	str	r2, [r3, #0]
 8005c50:	e035      	b.n	8005cbe <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8005c52:	4b42      	ldr	r3, [pc, #264]	@ (8005d5c <USBD_CDC_Init+0x1e4>)
 8005c54:	7819      	ldrb	r1, [r3, #0]
 8005c56:	2340      	movs	r3, #64	@ 0x40
 8005c58:	2202      	movs	r2, #2
 8005c5a:	6878      	ldr	r0, [r7, #4]
 8005c5c:	f002 fabf 	bl	80081de <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8005c60:	4b3e      	ldr	r3, [pc, #248]	@ (8005d5c <USBD_CDC_Init+0x1e4>)
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	f003 020f 	and.w	r2, r3, #15
 8005c68:	6879      	ldr	r1, [r7, #4]
 8005c6a:	4613      	mov	r3, r2
 8005c6c:	009b      	lsls	r3, r3, #2
 8005c6e:	4413      	add	r3, r2
 8005c70:	009b      	lsls	r3, r3, #2
 8005c72:	440b      	add	r3, r1
 8005c74:	3323      	adds	r3, #35	@ 0x23
 8005c76:	2201      	movs	r2, #1
 8005c78:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8005c7a:	4b39      	ldr	r3, [pc, #228]	@ (8005d60 <USBD_CDC_Init+0x1e8>)
 8005c7c:	7819      	ldrb	r1, [r3, #0]
 8005c7e:	2340      	movs	r3, #64	@ 0x40
 8005c80:	2202      	movs	r2, #2
 8005c82:	6878      	ldr	r0, [r7, #4]
 8005c84:	f002 faab 	bl	80081de <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8005c88:	4b35      	ldr	r3, [pc, #212]	@ (8005d60 <USBD_CDC_Init+0x1e8>)
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	f003 020f 	and.w	r2, r3, #15
 8005c90:	6879      	ldr	r1, [r7, #4]
 8005c92:	4613      	mov	r3, r2
 8005c94:	009b      	lsls	r3, r3, #2
 8005c96:	4413      	add	r3, r2
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	440b      	add	r3, r1
 8005c9c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8005ca4:	4b2f      	ldr	r3, [pc, #188]	@ (8005d64 <USBD_CDC_Init+0x1ec>)
 8005ca6:	781b      	ldrb	r3, [r3, #0]
 8005ca8:	f003 020f 	and.w	r2, r3, #15
 8005cac:	6879      	ldr	r1, [r7, #4]
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	331c      	adds	r3, #28
 8005cba:	2210      	movs	r2, #16
 8005cbc:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005cbe:	4b29      	ldr	r3, [pc, #164]	@ (8005d64 <USBD_CDC_Init+0x1ec>)
 8005cc0:	7819      	ldrb	r1, [r3, #0]
 8005cc2:	2308      	movs	r3, #8
 8005cc4:	2203      	movs	r2, #3
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f002 fa89 	bl	80081de <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8005ccc:	4b25      	ldr	r3, [pc, #148]	@ (8005d64 <USBD_CDC_Init+0x1ec>)
 8005cce:	781b      	ldrb	r3, [r3, #0]
 8005cd0:	f003 020f 	and.w	r2, r3, #15
 8005cd4:	6879      	ldr	r1, [r7, #4]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	009b      	lsls	r3, r3, #2
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	3323      	adds	r3, #35	@ 0x23
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2200      	movs	r2, #0
 8005cea:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005cf4:	687a      	ldr	r2, [r7, #4]
 8005cf6:	33b0      	adds	r3, #176	@ 0xb0
 8005cf8:	009b      	lsls	r3, r3, #2
 8005cfa:	4413      	add	r3, r2
 8005cfc:	685b      	ldr	r3, [r3, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	2200      	movs	r2, #0
 8005d0e:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d101      	bne.n	8005d20 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8005d1c:	2302      	movs	r3, #2
 8005d1e:	e018      	b.n	8005d52 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	7c1b      	ldrb	r3, [r3, #16]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d10a      	bne.n	8005d3e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d28:	4b0d      	ldr	r3, [pc, #52]	@ (8005d60 <USBD_CDC_Init+0x1e8>)
 8005d2a:	7819      	ldrb	r1, [r3, #0]
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d32:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f002 fb40 	bl	80083bc <USBD_LL_PrepareReceive>
 8005d3c:	e008      	b.n	8005d50 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8005d3e:	4b08      	ldr	r3, [pc, #32]	@ (8005d60 <USBD_CDC_Init+0x1e8>)
 8005d40:	7819      	ldrb	r1, [r3, #0]
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8005d48:	2340      	movs	r3, #64	@ 0x40
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f002 fb36 	bl	80083bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8005d50:	2300      	movs	r3, #0
}
 8005d52:	4618      	mov	r0, r3
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}
 8005d5a:	bf00      	nop
 8005d5c:	20000093 	.word	0x20000093
 8005d60:	20000094 	.word	0x20000094
 8005d64:	20000095 	.word	0x20000095

08005d68 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b082      	sub	sp, #8
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	460b      	mov	r3, r1
 8005d72:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8005d74:	4b3a      	ldr	r3, [pc, #232]	@ (8005e60 <USBD_CDC_DeInit+0xf8>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	4619      	mov	r1, r3
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f002 fa55 	bl	800822a <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8005d80:	4b37      	ldr	r3, [pc, #220]	@ (8005e60 <USBD_CDC_DeInit+0xf8>)
 8005d82:	781b      	ldrb	r3, [r3, #0]
 8005d84:	f003 020f 	and.w	r2, r3, #15
 8005d88:	6879      	ldr	r1, [r7, #4]
 8005d8a:	4613      	mov	r3, r2
 8005d8c:	009b      	lsls	r3, r3, #2
 8005d8e:	4413      	add	r3, r2
 8005d90:	009b      	lsls	r3, r3, #2
 8005d92:	440b      	add	r3, r1
 8005d94:	3323      	adds	r3, #35	@ 0x23
 8005d96:	2200      	movs	r2, #0
 8005d98:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8005d9a:	4b32      	ldr	r3, [pc, #200]	@ (8005e64 <USBD_CDC_DeInit+0xfc>)
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	4619      	mov	r1, r3
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f002 fa42 	bl	800822a <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8005da6:	4b2f      	ldr	r3, [pc, #188]	@ (8005e64 <USBD_CDC_DeInit+0xfc>)
 8005da8:	781b      	ldrb	r3, [r3, #0]
 8005daa:	f003 020f 	and.w	r2, r3, #15
 8005dae:	6879      	ldr	r1, [r7, #4]
 8005db0:	4613      	mov	r3, r2
 8005db2:	009b      	lsls	r3, r3, #2
 8005db4:	4413      	add	r3, r2
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	440b      	add	r3, r1
 8005dba:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8005dbe:	2200      	movs	r2, #0
 8005dc0:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8005dc2:	4b29      	ldr	r3, [pc, #164]	@ (8005e68 <USBD_CDC_DeInit+0x100>)
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f002 fa2e 	bl	800822a <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8005dce:	4b26      	ldr	r3, [pc, #152]	@ (8005e68 <USBD_CDC_DeInit+0x100>)
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	f003 020f 	and.w	r2, r3, #15
 8005dd6:	6879      	ldr	r1, [r7, #4]
 8005dd8:	4613      	mov	r3, r2
 8005dda:	009b      	lsls	r3, r3, #2
 8005ddc:	4413      	add	r3, r2
 8005dde:	009b      	lsls	r3, r3, #2
 8005de0:	440b      	add	r3, r1
 8005de2:	3323      	adds	r3, #35	@ 0x23
 8005de4:	2200      	movs	r2, #0
 8005de6:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8005de8:	4b1f      	ldr	r3, [pc, #124]	@ (8005e68 <USBD_CDC_DeInit+0x100>)
 8005dea:	781b      	ldrb	r3, [r3, #0]
 8005dec:	f003 020f 	and.w	r2, r3, #15
 8005df0:	6879      	ldr	r1, [r7, #4]
 8005df2:	4613      	mov	r3, r2
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	4413      	add	r3, r2
 8005df8:	009b      	lsls	r3, r3, #2
 8005dfa:	440b      	add	r3, r1
 8005dfc:	331c      	adds	r3, #28
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	32b0      	adds	r2, #176	@ 0xb0
 8005e0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d01f      	beq.n	8005e54 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005e1a:	687a      	ldr	r2, [r7, #4]
 8005e1c:	33b0      	adds	r3, #176	@ 0xb0
 8005e1e:	009b      	lsls	r3, r3, #2
 8005e20:	4413      	add	r3, r2
 8005e22:	685b      	ldr	r3, [r3, #4]
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	32b0      	adds	r2, #176	@ 0xb0
 8005e32:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f002 fb02 	bl	8008440 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	32b0      	adds	r2, #176	@ 0xb0
 8005e46:	2100      	movs	r1, #0
 8005e48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3708      	adds	r7, #8
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	20000093 	.word	0x20000093
 8005e64:	20000094 	.word	0x20000094
 8005e68:	20000095 	.word	0x20000095

08005e6c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b086      	sub	sp, #24
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	6078      	str	r0, [r7, #4]
 8005e74:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	32b0      	adds	r2, #176	@ 0xb0
 8005e80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e84:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8005e86:	2300      	movs	r3, #0
 8005e88:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d101      	bne.n	8005e9c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8005e98:	2303      	movs	r3, #3
 8005e9a:	e0bf      	b.n	800601c <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e9c:	683b      	ldr	r3, [r7, #0]
 8005e9e:	781b      	ldrb	r3, [r3, #0]
 8005ea0:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d050      	beq.n	8005f4a <USBD_CDC_Setup+0xde>
 8005ea8:	2b20      	cmp	r3, #32
 8005eaa:	f040 80af 	bne.w	800600c <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	88db      	ldrh	r3, [r3, #6]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d03a      	beq.n	8005f2c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8005eb6:	683b      	ldr	r3, [r7, #0]
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	b25b      	sxtb	r3, r3
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	da1b      	bge.n	8005ef8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	33b0      	adds	r3, #176	@ 0xb0
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	685b      	ldr	r3, [r3, #4]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8005ed6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005ed8:	683a      	ldr	r2, [r7, #0]
 8005eda:	88d2      	ldrh	r2, [r2, #6]
 8005edc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	88db      	ldrh	r3, [r3, #6]
 8005ee2:	2b07      	cmp	r3, #7
 8005ee4:	bf28      	it	cs
 8005ee6:	2307      	movcs	r3, #7
 8005ee8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	89fa      	ldrh	r2, [r7, #14]
 8005eee:	4619      	mov	r1, r3
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f001 fd69 	bl	80079c8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8005ef6:	e090      	b.n	800601a <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	785a      	ldrb	r2, [r3, #1]
 8005efc:	693b      	ldr	r3, [r7, #16]
 8005efe:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	88db      	ldrh	r3, [r3, #6]
 8005f06:	2b3f      	cmp	r3, #63	@ 0x3f
 8005f08:	d803      	bhi.n	8005f12 <USBD_CDC_Setup+0xa6>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	88db      	ldrh	r3, [r3, #6]
 8005f0e:	b2da      	uxtb	r2, r3
 8005f10:	e000      	b.n	8005f14 <USBD_CDC_Setup+0xa8>
 8005f12:	2240      	movs	r2, #64	@ 0x40
 8005f14:	693b      	ldr	r3, [r7, #16]
 8005f16:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8005f1a:	6939      	ldr	r1, [r7, #16]
 8005f1c:	693b      	ldr	r3, [r7, #16]
 8005f1e:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8005f22:	461a      	mov	r2, r3
 8005f24:	6878      	ldr	r0, [r7, #4]
 8005f26:	f001 fd7e 	bl	8007a26 <USBD_CtlPrepareRx>
      break;
 8005f2a:	e076      	b.n	800601a <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8005f32:	687a      	ldr	r2, [r7, #4]
 8005f34:	33b0      	adds	r3, #176	@ 0xb0
 8005f36:	009b      	lsls	r3, r3, #2
 8005f38:	4413      	add	r3, r2
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	689b      	ldr	r3, [r3, #8]
 8005f3e:	683a      	ldr	r2, [r7, #0]
 8005f40:	7850      	ldrb	r0, [r2, #1]
 8005f42:	2200      	movs	r2, #0
 8005f44:	6839      	ldr	r1, [r7, #0]
 8005f46:	4798      	blx	r3
      break;
 8005f48:	e067      	b.n	800601a <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	785b      	ldrb	r3, [r3, #1]
 8005f4e:	2b0b      	cmp	r3, #11
 8005f50:	d851      	bhi.n	8005ff6 <USBD_CDC_Setup+0x18a>
 8005f52:	a201      	add	r2, pc, #4	@ (adr r2, 8005f58 <USBD_CDC_Setup+0xec>)
 8005f54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f58:	08005f89 	.word	0x08005f89
 8005f5c:	08006005 	.word	0x08006005
 8005f60:	08005ff7 	.word	0x08005ff7
 8005f64:	08005ff7 	.word	0x08005ff7
 8005f68:	08005ff7 	.word	0x08005ff7
 8005f6c:	08005ff7 	.word	0x08005ff7
 8005f70:	08005ff7 	.word	0x08005ff7
 8005f74:	08005ff7 	.word	0x08005ff7
 8005f78:	08005ff7 	.word	0x08005ff7
 8005f7c:	08005ff7 	.word	0x08005ff7
 8005f80:	08005fb3 	.word	0x08005fb3
 8005f84:	08005fdd 	.word	0x08005fdd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	2b03      	cmp	r3, #3
 8005f92:	d107      	bne.n	8005fa4 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005f94:	f107 030a 	add.w	r3, r7, #10
 8005f98:	2202      	movs	r2, #2
 8005f9a:	4619      	mov	r1, r3
 8005f9c:	6878      	ldr	r0, [r7, #4]
 8005f9e:	f001 fd13 	bl	80079c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fa2:	e032      	b.n	800600a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005fa4:	6839      	ldr	r1, [r7, #0]
 8005fa6:	6878      	ldr	r0, [r7, #4]
 8005fa8:	f001 fc91 	bl	80078ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005fac:	2303      	movs	r3, #3
 8005fae:	75fb      	strb	r3, [r7, #23]
          break;
 8005fb0:	e02b      	b.n	800600a <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	2b03      	cmp	r3, #3
 8005fbc:	d107      	bne.n	8005fce <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8005fbe:	f107 030d 	add.w	r3, r7, #13
 8005fc2:	2201      	movs	r2, #1
 8005fc4:	4619      	mov	r1, r3
 8005fc6:	6878      	ldr	r0, [r7, #4]
 8005fc8:	f001 fcfe 	bl	80079c8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005fcc:	e01d      	b.n	800600a <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8005fce:	6839      	ldr	r1, [r7, #0]
 8005fd0:	6878      	ldr	r0, [r7, #4]
 8005fd2:	f001 fc7c 	bl	80078ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	75fb      	strb	r3, [r7, #23]
          break;
 8005fda:	e016      	b.n	800600a <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8005fe2:	b2db      	uxtb	r3, r3
 8005fe4:	2b03      	cmp	r3, #3
 8005fe6:	d00f      	beq.n	8006008 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8005fe8:	6839      	ldr	r1, [r7, #0]
 8005fea:	6878      	ldr	r0, [r7, #4]
 8005fec:	f001 fc6f 	bl	80078ce <USBD_CtlError>
            ret = USBD_FAIL;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8005ff4:	e008      	b.n	8006008 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005ff6:	6839      	ldr	r1, [r7, #0]
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 fc68 	bl	80078ce <USBD_CtlError>
          ret = USBD_FAIL;
 8005ffe:	2303      	movs	r3, #3
 8006000:	75fb      	strb	r3, [r7, #23]
          break;
 8006002:	e002      	b.n	800600a <USBD_CDC_Setup+0x19e>
          break;
 8006004:	bf00      	nop
 8006006:	e008      	b.n	800601a <USBD_CDC_Setup+0x1ae>
          break;
 8006008:	bf00      	nop
      }
      break;
 800600a:	e006      	b.n	800601a <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 800600c:	6839      	ldr	r1, [r7, #0]
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f001 fc5d 	bl	80078ce <USBD_CtlError>
      ret = USBD_FAIL;
 8006014:	2303      	movs	r3, #3
 8006016:	75fb      	strb	r3, [r7, #23]
      break;
 8006018:	bf00      	nop
  }

  return (uint8_t)ret;
 800601a:	7dfb      	ldrb	r3, [r7, #23]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3718      	adds	r7, #24
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}

08006024 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006024:	b580      	push	{r7, lr}
 8006026:	b084      	sub	sp, #16
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	460b      	mov	r3, r1
 800602e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8006036:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	32b0      	adds	r2, #176	@ 0xb0
 8006042:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006046:	2b00      	cmp	r3, #0
 8006048:	d101      	bne.n	800604e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800604a:	2303      	movs	r3, #3
 800604c:	e065      	b.n	800611a <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	32b0      	adds	r2, #176	@ 0xb0
 8006058:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800605c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800605e:	78fb      	ldrb	r3, [r7, #3]
 8006060:	f003 020f 	and.w	r2, r3, #15
 8006064:	6879      	ldr	r1, [r7, #4]
 8006066:	4613      	mov	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	4413      	add	r3, r2
 800606c:	009b      	lsls	r3, r3, #2
 800606e:	440b      	add	r3, r1
 8006070:	3314      	adds	r3, #20
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	2b00      	cmp	r3, #0
 8006076:	d02f      	beq.n	80060d8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8006078:	78fb      	ldrb	r3, [r7, #3]
 800607a:	f003 020f 	and.w	r2, r3, #15
 800607e:	6879      	ldr	r1, [r7, #4]
 8006080:	4613      	mov	r3, r2
 8006082:	009b      	lsls	r3, r3, #2
 8006084:	4413      	add	r3, r2
 8006086:	009b      	lsls	r3, r3, #2
 8006088:	440b      	add	r3, r1
 800608a:	3314      	adds	r3, #20
 800608c:	681a      	ldr	r2, [r3, #0]
 800608e:	78fb      	ldrb	r3, [r7, #3]
 8006090:	f003 010f 	and.w	r1, r3, #15
 8006094:	68f8      	ldr	r0, [r7, #12]
 8006096:	460b      	mov	r3, r1
 8006098:	00db      	lsls	r3, r3, #3
 800609a:	440b      	add	r3, r1
 800609c:	009b      	lsls	r3, r3, #2
 800609e:	4403      	add	r3, r0
 80060a0:	331c      	adds	r3, #28
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	fbb2 f1f3 	udiv	r1, r2, r3
 80060a8:	fb01 f303 	mul.w	r3, r1, r3
 80060ac:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d112      	bne.n	80060d8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 80060b2:	78fb      	ldrb	r3, [r7, #3]
 80060b4:	f003 020f 	and.w	r2, r3, #15
 80060b8:	6879      	ldr	r1, [r7, #4]
 80060ba:	4613      	mov	r3, r2
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	4413      	add	r3, r2
 80060c0:	009b      	lsls	r3, r3, #2
 80060c2:	440b      	add	r3, r1
 80060c4:	3314      	adds	r3, #20
 80060c6:	2200      	movs	r2, #0
 80060c8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80060ca:	78f9      	ldrb	r1, [r7, #3]
 80060cc:	2300      	movs	r3, #0
 80060ce:	2200      	movs	r2, #0
 80060d0:	6878      	ldr	r0, [r7, #4]
 80060d2:	f002 f952 	bl	800837a <USBD_LL_Transmit>
 80060d6:	e01f      	b.n	8006118 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	2200      	movs	r2, #0
 80060dc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060e6:	687a      	ldr	r2, [r7, #4]
 80060e8:	33b0      	adds	r3, #176	@ 0xb0
 80060ea:	009b      	lsls	r3, r3, #2
 80060ec:	4413      	add	r3, r2
 80060ee:	685b      	ldr	r3, [r3, #4]
 80060f0:	691b      	ldr	r3, [r3, #16]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d010      	beq.n	8006118 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80060fc:	687a      	ldr	r2, [r7, #4]
 80060fe:	33b0      	adds	r3, #176	@ 0xb0
 8006100:	009b      	lsls	r3, r3, #2
 8006102:	4413      	add	r3, r2
 8006104:	685b      	ldr	r3, [r3, #4]
 8006106:	691b      	ldr	r3, [r3, #16]
 8006108:	68ba      	ldr	r2, [r7, #8]
 800610a:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 800610e:	68ba      	ldr	r2, [r7, #8]
 8006110:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8006114:	78fa      	ldrb	r2, [r7, #3]
 8006116:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3710      	adds	r7, #16
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}

08006122 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b084      	sub	sp, #16
 8006126:	af00      	add	r7, sp, #0
 8006128:	6078      	str	r0, [r7, #4]
 800612a:	460b      	mov	r3, r1
 800612c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	32b0      	adds	r2, #176	@ 0xb0
 8006138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800613c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	32b0      	adds	r2, #176	@ 0xb0
 8006148:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8006150:	2303      	movs	r3, #3
 8006152:	e01a      	b.n	800618a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8006154:	78fb      	ldrb	r3, [r7, #3]
 8006156:	4619      	mov	r1, r3
 8006158:	6878      	ldr	r0, [r7, #4]
 800615a:	f002 f950 	bl	80083fe <USBD_LL_GetRxDataSize>
 800615e:	4602      	mov	r2, r0
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800616c:	687a      	ldr	r2, [r7, #4]
 800616e:	33b0      	adds	r3, #176	@ 0xb0
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4413      	add	r3, r2
 8006174:	685b      	ldr	r3, [r3, #4]
 8006176:	68db      	ldr	r3, [r3, #12]
 8006178:	68fa      	ldr	r2, [r7, #12]
 800617a:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 800617e:	68fa      	ldr	r2, [r7, #12]
 8006180:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8006184:	4611      	mov	r1, r2
 8006186:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8006188:	2300      	movs	r3, #0
}
 800618a:	4618      	mov	r0, r3
 800618c:	3710      	adds	r7, #16
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}

08006192 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8006192:	b580      	push	{r7, lr}
 8006194:	b084      	sub	sp, #16
 8006196:	af00      	add	r7, sp, #0
 8006198:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	32b0      	adds	r2, #176	@ 0xb0
 80061a4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 80061b0:	2303      	movs	r3, #3
 80061b2:	e024      	b.n	80061fe <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	33b0      	adds	r3, #176	@ 0xb0
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	685b      	ldr	r3, [r3, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d019      	beq.n	80061fc <USBD_CDC_EP0_RxReady+0x6a>
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 80061ce:	2bff      	cmp	r3, #255	@ 0xff
 80061d0:	d014      	beq.n	80061fc <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	33b0      	adds	r3, #176	@ 0xb0
 80061dc:	009b      	lsls	r3, r3, #2
 80061de:	4413      	add	r3, r2
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	689b      	ldr	r3, [r3, #8]
 80061e4:	68fa      	ldr	r2, [r7, #12]
 80061e6:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 80061ea:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80061ec:	68fa      	ldr	r2, [r7, #12]
 80061ee:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80061f2:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	22ff      	movs	r2, #255	@ 0xff
 80061f8:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 80061fc:	2300      	movs	r3, #0
}
 80061fe:	4618      	mov	r0, r3
 8006200:	3710      	adds	r7, #16
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006210:	2182      	movs	r1, #130	@ 0x82
 8006212:	4818      	ldr	r0, [pc, #96]	@ (8006274 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006214:	f000 fd22 	bl	8006c5c <USBD_GetEpDesc>
 8006218:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800621a:	2101      	movs	r1, #1
 800621c:	4815      	ldr	r0, [pc, #84]	@ (8006274 <USBD_CDC_GetFSCfgDesc+0x6c>)
 800621e:	f000 fd1d 	bl	8006c5c <USBD_GetEpDesc>
 8006222:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006224:	2181      	movs	r1, #129	@ 0x81
 8006226:	4813      	ldr	r0, [pc, #76]	@ (8006274 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8006228:	f000 fd18 	bl	8006c5c <USBD_GetEpDesc>
 800622c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800622e:	697b      	ldr	r3, [r7, #20]
 8006230:	2b00      	cmp	r3, #0
 8006232:	d002      	beq.n	800623a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	2210      	movs	r2, #16
 8006238:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800623a:	693b      	ldr	r3, [r7, #16]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d006      	beq.n	800624e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006240:	693b      	ldr	r3, [r7, #16]
 8006242:	2200      	movs	r2, #0
 8006244:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006248:	711a      	strb	r2, [r3, #4]
 800624a:	2200      	movs	r2, #0
 800624c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d006      	beq.n	8006262 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2200      	movs	r2, #0
 8006258:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800625c:	711a      	strb	r2, [r3, #4]
 800625e:	2200      	movs	r2, #0
 8006260:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	2243      	movs	r2, #67	@ 0x43
 8006266:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006268:	4b02      	ldr	r3, [pc, #8]	@ (8006274 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800626a:	4618      	mov	r0, r3
 800626c:	3718      	adds	r7, #24
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}
 8006272:	bf00      	nop
 8006274:	20000050 	.word	0x20000050

08006278 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8006280:	2182      	movs	r1, #130	@ 0x82
 8006282:	4818      	ldr	r0, [pc, #96]	@ (80062e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006284:	f000 fcea 	bl	8006c5c <USBD_GetEpDesc>
 8006288:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800628a:	2101      	movs	r1, #1
 800628c:	4815      	ldr	r0, [pc, #84]	@ (80062e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800628e:	f000 fce5 	bl	8006c5c <USBD_GetEpDesc>
 8006292:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006294:	2181      	movs	r1, #129	@ 0x81
 8006296:	4813      	ldr	r0, [pc, #76]	@ (80062e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8006298:	f000 fce0 	bl	8006c5c <USBD_GetEpDesc>
 800629c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d002      	beq.n	80062aa <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 80062a4:	697b      	ldr	r3, [r7, #20]
 80062a6:	2210      	movs	r2, #16
 80062a8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d006      	beq.n	80062be <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80062b0:	693b      	ldr	r3, [r7, #16]
 80062b2:	2200      	movs	r2, #0
 80062b4:	711a      	strb	r2, [r3, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	f042 0202 	orr.w	r2, r2, #2
 80062bc:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d006      	beq.n	80062d2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	2200      	movs	r2, #0
 80062c8:	711a      	strb	r2, [r3, #4]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f042 0202 	orr.w	r2, r2, #2
 80062d0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	2243      	movs	r2, #67	@ 0x43
 80062d6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80062d8:	4b02      	ldr	r3, [pc, #8]	@ (80062e4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000050 	.word	0x20000050

080062e8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b086      	sub	sp, #24
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80062f0:	2182      	movs	r1, #130	@ 0x82
 80062f2:	4818      	ldr	r0, [pc, #96]	@ (8006354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062f4:	f000 fcb2 	bl	8006c5c <USBD_GetEpDesc>
 80062f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80062fa:	2101      	movs	r1, #1
 80062fc:	4815      	ldr	r0, [pc, #84]	@ (8006354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80062fe:	f000 fcad 	bl	8006c5c <USBD_GetEpDesc>
 8006302:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8006304:	2181      	movs	r1, #129	@ 0x81
 8006306:	4813      	ldr	r0, [pc, #76]	@ (8006354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8006308:	f000 fca8 	bl	8006c5c <USBD_GetEpDesc>
 800630c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d002      	beq.n	800631a <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8006314:	697b      	ldr	r3, [r7, #20]
 8006316:	2210      	movs	r2, #16
 8006318:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800631a:	693b      	ldr	r3, [r7, #16]
 800631c:	2b00      	cmp	r3, #0
 800631e:	d006      	beq.n	800632e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006320:	693b      	ldr	r3, [r7, #16]
 8006322:	2200      	movs	r2, #0
 8006324:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006328:	711a      	strb	r2, [r3, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d006      	beq.n	8006342 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	2200      	movs	r2, #0
 8006338:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800633c:	711a      	strb	r2, [r3, #4]
 800633e:	2200      	movs	r2, #0
 8006340:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2243      	movs	r2, #67	@ 0x43
 8006346:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8006348:	4b02      	ldr	r3, [pc, #8]	@ (8006354 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800634a:	4618      	mov	r0, r3
 800634c:	3718      	adds	r7, #24
 800634e:	46bd      	mov	sp, r7
 8006350:	bd80      	pop	{r7, pc}
 8006352:	bf00      	nop
 8006354:	20000050 	.word	0x20000050

08006358 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	220a      	movs	r2, #10
 8006364:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8006366:	4b03      	ldr	r3, [pc, #12]	@ (8006374 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8006368:	4618      	mov	r0, r3
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr
 8006374:	2000000c 	.word	0x2000000c

08006378 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8006382:	683b      	ldr	r3, [r7, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d101      	bne.n	800638c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8006388:	2303      	movs	r3, #3
 800638a:	e009      	b.n	80063a0 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8006392:	687a      	ldr	r2, [r7, #4]
 8006394:	33b0      	adds	r3, #176	@ 0xb0
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	4413      	add	r3, r2
 800639a:	683a      	ldr	r2, [r7, #0]
 800639c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800639e:	2300      	movs	r3, #0
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	60f8      	str	r0, [r7, #12]
 80063b4:	60b9      	str	r1, [r7, #8]
 80063b6:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	32b0      	adds	r2, #176	@ 0xb0
 80063c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c6:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	d101      	bne.n	80063d2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80063ce:	2303      	movs	r3, #3
 80063d0:	e008      	b.n	80063e4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	68ba      	ldr	r2, [r7, #8]
 80063d6:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 80063e2:	2300      	movs	r3, #0
}
 80063e4:	4618      	mov	r0, r3
 80063e6:	371c      	adds	r7, #28
 80063e8:	46bd      	mov	sp, r7
 80063ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ee:	4770      	bx	lr

080063f0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80063f0:	b480      	push	{r7}
 80063f2:	b085      	sub	sp, #20
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	6078      	str	r0, [r7, #4]
 80063f8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	32b0      	adds	r2, #176	@ 0xb0
 8006404:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006408:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	2b00      	cmp	r3, #0
 800640e:	d101      	bne.n	8006414 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8006410:	2303      	movs	r3, #3
 8006412:	e004      	b.n	800641e <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800641c:	2300      	movs	r3, #0
}
 800641e:	4618      	mov	r0, r3
 8006420:	3714      	adds	r7, #20
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr
	...

0800642c <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800642c:	b580      	push	{r7, lr}
 800642e:	b084      	sub	sp, #16
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	32b0      	adds	r2, #176	@ 0xb0
 800643e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006442:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	32b0      	adds	r2, #176	@ 0xb0
 800644e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d101      	bne.n	800645a <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 8006456:	2303      	movs	r3, #3
 8006458:	e018      	b.n	800648c <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	7c1b      	ldrb	r3, [r3, #16]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d10a      	bne.n	8006478 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006462:	4b0c      	ldr	r3, [pc, #48]	@ (8006494 <USBD_CDC_ReceivePacket+0x68>)
 8006464:	7819      	ldrb	r1, [r3, #0]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800646c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f001 ffa3 	bl	80083bc <USBD_LL_PrepareReceive>
 8006476:	e008      	b.n	800648a <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8006478:	4b06      	ldr	r3, [pc, #24]	@ (8006494 <USBD_CDC_ReceivePacket+0x68>)
 800647a:	7819      	ldrb	r1, [r3, #0]
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8006482:	2340      	movs	r3, #64	@ 0x40
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f001 ff99 	bl	80083bc <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800648a:	2300      	movs	r3, #0
}
 800648c:	4618      	mov	r0, r3
 800648e:	3710      	adds	r7, #16
 8006490:	46bd      	mov	sp, r7
 8006492:	bd80      	pop	{r7, pc}
 8006494:	20000094 	.word	0x20000094

08006498 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b086      	sub	sp, #24
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	4613      	mov	r3, r2
 80064a4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b00      	cmp	r3, #0
 80064aa:	d101      	bne.n	80064b0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80064ac:	2303      	movs	r3, #3
 80064ae:	e01f      	b.n	80064f0 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	2200      	movs	r2, #0
 80064b4:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	2200      	movs	r2, #0
 80064bc:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	2200      	movs	r2, #0
 80064c4:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d003      	beq.n	80064d6 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80064ce:	68fb      	ldr	r3, [r7, #12]
 80064d0:	68ba      	ldr	r2, [r7, #8]
 80064d2:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2201      	movs	r2, #1
 80064da:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	79fa      	ldrb	r2, [r7, #7]
 80064e2:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80064e4:	68f8      	ldr	r0, [r7, #12]
 80064e6:	f001 fe13 	bl	8008110 <USBD_LL_Init>
 80064ea:	4603      	mov	r3, r0
 80064ec:	75fb      	strb	r3, [r7, #23]

  return ret;
 80064ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80064f0:	4618      	mov	r0, r3
 80064f2:	3718      	adds	r7, #24
 80064f4:	46bd      	mov	sp, r7
 80064f6:	bd80      	pop	{r7, pc}

080064f8 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b084      	sub	sp, #16
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
 8006500:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006502:	2300      	movs	r3, #0
 8006504:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d101      	bne.n	8006510 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800650c:	2303      	movs	r3, #3
 800650e:	e025      	b.n	800655c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	683a      	ldr	r2, [r7, #0]
 8006514:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	32ae      	adds	r2, #174	@ 0xae
 8006522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006528:	2b00      	cmp	r3, #0
 800652a:	d00f      	beq.n	800654c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	32ae      	adds	r2, #174	@ 0xae
 8006536:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800653a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800653c:	f107 020e 	add.w	r2, r7, #14
 8006540:	4610      	mov	r0, r2
 8006542:	4798      	blx	r3
 8006544:	4602      	mov	r2, r0
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 8006552:	1c5a      	adds	r2, r3, #1
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800655a:	2300      	movs	r3, #0
}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006564:	b580      	push	{r7, lr}
 8006566:	b082      	sub	sp, #8
 8006568:	af00      	add	r7, sp, #0
 800656a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800656c:	6878      	ldr	r0, [r7, #4]
 800656e:	f001 fe1b 	bl	80081a8 <USBD_LL_Start>
 8006572:	4603      	mov	r3, r0
}
 8006574:	4618      	mov	r0, r3
 8006576:	3708      	adds	r7, #8
 8006578:	46bd      	mov	sp, r7
 800657a:	bd80      	pop	{r7, pc}

0800657c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800657c:	b480      	push	{r7}
 800657e:	b083      	sub	sp, #12
 8006580:	af00      	add	r7, sp, #0
 8006582:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006584:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006586:	4618      	mov	r0, r3
 8006588:	370c      	adds	r7, #12
 800658a:	46bd      	mov	sp, r7
 800658c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006590:	4770      	bx	lr

08006592 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b084      	sub	sp, #16
 8006596:	af00      	add	r7, sp, #0
 8006598:	6078      	str	r0, [r7, #4]
 800659a:	460b      	mov	r3, r1
 800659c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800659e:	2300      	movs	r3, #0
 80065a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d009      	beq.n	80065c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	78fa      	ldrb	r2, [r7, #3]
 80065b6:	4611      	mov	r1, r2
 80065b8:	6878      	ldr	r0, [r7, #4]
 80065ba:	4798      	blx	r3
 80065bc:	4603      	mov	r3, r0
 80065be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80065c2:	4618      	mov	r0, r3
 80065c4:	3710      	adds	r7, #16
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	b084      	sub	sp, #16
 80065ce:	af00      	add	r7, sp, #0
 80065d0:	6078      	str	r0, [r7, #4]
 80065d2:	460b      	mov	r3, r1
 80065d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80065e0:	685b      	ldr	r3, [r3, #4]
 80065e2:	78fa      	ldrb	r2, [r7, #3]
 80065e4:	4611      	mov	r1, r2
 80065e6:	6878      	ldr	r0, [r7, #4]
 80065e8:	4798      	blx	r3
 80065ea:	4603      	mov	r3, r0
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d001      	beq.n	80065f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80065f0:	2303      	movs	r3, #3
 80065f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80065f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}

080065fe <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80065fe:	b580      	push	{r7, lr}
 8006600:	b084      	sub	sp, #16
 8006602:	af00      	add	r7, sp, #0
 8006604:	6078      	str	r0, [r7, #4]
 8006606:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f001 f922 	bl	800785a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2201      	movs	r2, #1
 800661a:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 8006624:	461a      	mov	r2, r3
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006632:	f003 031f 	and.w	r3, r3, #31
 8006636:	2b02      	cmp	r3, #2
 8006638:	d01a      	beq.n	8006670 <USBD_LL_SetupStage+0x72>
 800663a:	2b02      	cmp	r3, #2
 800663c:	d822      	bhi.n	8006684 <USBD_LL_SetupStage+0x86>
 800663e:	2b00      	cmp	r3, #0
 8006640:	d002      	beq.n	8006648 <USBD_LL_SetupStage+0x4a>
 8006642:	2b01      	cmp	r3, #1
 8006644:	d00a      	beq.n	800665c <USBD_LL_SetupStage+0x5e>
 8006646:	e01d      	b.n	8006684 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800664e:	4619      	mov	r1, r3
 8006650:	6878      	ldr	r0, [r7, #4]
 8006652:	f000 fb77 	bl	8006d44 <USBD_StdDevReq>
 8006656:	4603      	mov	r3, r0
 8006658:	73fb      	strb	r3, [r7, #15]
      break;
 800665a:	e020      	b.n	800669e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006662:	4619      	mov	r1, r3
 8006664:	6878      	ldr	r0, [r7, #4]
 8006666:	f000 fbdf 	bl	8006e28 <USBD_StdItfReq>
 800666a:	4603      	mov	r3, r0
 800666c:	73fb      	strb	r3, [r7, #15]
      break;
 800666e:	e016      	b.n	800669e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 8006676:	4619      	mov	r1, r3
 8006678:	6878      	ldr	r0, [r7, #4]
 800667a:	f000 fc41 	bl	8006f00 <USBD_StdEPReq>
 800667e:	4603      	mov	r3, r0
 8006680:	73fb      	strb	r3, [r7, #15]
      break;
 8006682:	e00c      	b.n	800669e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800668a:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800668e:	b2db      	uxtb	r3, r3
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f001 fde8 	bl	8008268 <USBD_LL_StallEP>
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]
      break;
 800669c:	bf00      	nop
  }

  return ret;
 800669e:	7bfb      	ldrb	r3, [r7, #15]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b086      	sub	sp, #24
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	60f8      	str	r0, [r7, #12]
 80066b0:	460b      	mov	r3, r1
 80066b2:	607a      	str	r2, [r7, #4]
 80066b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80066b6:	2300      	movs	r3, #0
 80066b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 80066ba:	7afb      	ldrb	r3, [r7, #11]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d177      	bne.n	80067b0 <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 80066c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 80066ce:	2b03      	cmp	r3, #3
 80066d0:	f040 80a1 	bne.w	8006816 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	685b      	ldr	r3, [r3, #4]
 80066d8:	693a      	ldr	r2, [r7, #16]
 80066da:	8992      	ldrh	r2, [r2, #12]
 80066dc:	4293      	cmp	r3, r2
 80066de:	d91c      	bls.n	800671a <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 80066e0:	693b      	ldr	r3, [r7, #16]
 80066e2:	685b      	ldr	r3, [r3, #4]
 80066e4:	693a      	ldr	r2, [r7, #16]
 80066e6:	8992      	ldrh	r2, [r2, #12]
 80066e8:	1a9a      	subs	r2, r3, r2
 80066ea:	693b      	ldr	r3, [r7, #16]
 80066ec:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 80066ee:	693b      	ldr	r3, [r7, #16]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	693a      	ldr	r2, [r7, #16]
 80066f4:	8992      	ldrh	r2, [r2, #12]
 80066f6:	441a      	add	r2, r3
 80066f8:	693b      	ldr	r3, [r7, #16]
 80066fa:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	6919      	ldr	r1, [r3, #16]
 8006700:	693b      	ldr	r3, [r7, #16]
 8006702:	899b      	ldrh	r3, [r3, #12]
 8006704:	461a      	mov	r2, r3
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	685b      	ldr	r3, [r3, #4]
 800670a:	4293      	cmp	r3, r2
 800670c:	bf38      	it	cc
 800670e:	4613      	movcc	r3, r2
 8006710:	461a      	mov	r2, r3
 8006712:	68f8      	ldr	r0, [r7, #12]
 8006714:	f001 f9a8 	bl	8007a68 <USBD_CtlContinueRx>
 8006718:	e07d      	b.n	8006816 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 8006720:	f003 031f 	and.w	r3, r3, #31
 8006724:	2b02      	cmp	r3, #2
 8006726:	d014      	beq.n	8006752 <USBD_LL_DataOutStage+0xaa>
 8006728:	2b02      	cmp	r3, #2
 800672a:	d81d      	bhi.n	8006768 <USBD_LL_DataOutStage+0xc0>
 800672c:	2b00      	cmp	r3, #0
 800672e:	d002      	beq.n	8006736 <USBD_LL_DataOutStage+0x8e>
 8006730:	2b01      	cmp	r3, #1
 8006732:	d003      	beq.n	800673c <USBD_LL_DataOutStage+0x94>
 8006734:	e018      	b.n	8006768 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006736:	2300      	movs	r3, #0
 8006738:	75bb      	strb	r3, [r7, #22]
            break;
 800673a:	e018      	b.n	800676e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006742:	b2db      	uxtb	r3, r3
 8006744:	4619      	mov	r1, r3
 8006746:	68f8      	ldr	r0, [r7, #12]
 8006748:	f000 fa6e 	bl	8006c28 <USBD_CoreFindIF>
 800674c:	4603      	mov	r3, r0
 800674e:	75bb      	strb	r3, [r7, #22]
            break;
 8006750:	e00d      	b.n	800676e <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 8006758:	b2db      	uxtb	r3, r3
 800675a:	4619      	mov	r1, r3
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 fa70 	bl	8006c42 <USBD_CoreFindEP>
 8006762:	4603      	mov	r3, r0
 8006764:	75bb      	strb	r3, [r7, #22]
            break;
 8006766:	e002      	b.n	800676e <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006768:	2300      	movs	r3, #0
 800676a:	75bb      	strb	r3, [r7, #22]
            break;
 800676c:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800676e:	7dbb      	ldrb	r3, [r7, #22]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d119      	bne.n	80067a8 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800677a:	b2db      	uxtb	r3, r3
 800677c:	2b03      	cmp	r3, #3
 800677e:	d113      	bne.n	80067a8 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006780:	7dba      	ldrb	r2, [r7, #22]
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	32ae      	adds	r2, #174	@ 0xae
 8006786:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d00b      	beq.n	80067a8 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 8006790:	7dba      	ldrb	r2, [r7, #22]
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006798:	7dba      	ldrb	r2, [r7, #22]
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	32ae      	adds	r2, #174	@ 0xae
 800679e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067a2:	691b      	ldr	r3, [r3, #16]
 80067a4:	68f8      	ldr	r0, [r7, #12]
 80067a6:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80067a8:	68f8      	ldr	r0, [r7, #12]
 80067aa:	f001 f96e 	bl	8007a8a <USBD_CtlSendStatus>
 80067ae:	e032      	b.n	8006816 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80067b0:	7afb      	ldrb	r3, [r7, #11]
 80067b2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067b6:	b2db      	uxtb	r3, r3
 80067b8:	4619      	mov	r1, r3
 80067ba:	68f8      	ldr	r0, [r7, #12]
 80067bc:	f000 fa41 	bl	8006c42 <USBD_CoreFindEP>
 80067c0:	4603      	mov	r3, r0
 80067c2:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80067c4:	7dbb      	ldrb	r3, [r7, #22]
 80067c6:	2bff      	cmp	r3, #255	@ 0xff
 80067c8:	d025      	beq.n	8006816 <USBD_LL_DataOutStage+0x16e>
 80067ca:	7dbb      	ldrb	r3, [r7, #22]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d122      	bne.n	8006816 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b03      	cmp	r3, #3
 80067da:	d117      	bne.n	800680c <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80067dc:	7dba      	ldrb	r2, [r7, #22]
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	32ae      	adds	r2, #174	@ 0xae
 80067e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e6:	699b      	ldr	r3, [r3, #24]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d00f      	beq.n	800680c <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 80067ec:	7dba      	ldrb	r2, [r7, #22]
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80067f4:	7dba      	ldrb	r2, [r7, #22]
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	32ae      	adds	r2, #174	@ 0xae
 80067fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067fe:	699b      	ldr	r3, [r3, #24]
 8006800:	7afa      	ldrb	r2, [r7, #11]
 8006802:	4611      	mov	r1, r2
 8006804:	68f8      	ldr	r0, [r7, #12]
 8006806:	4798      	blx	r3
 8006808:	4603      	mov	r3, r0
 800680a:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800680c:	7dfb      	ldrb	r3, [r7, #23]
 800680e:	2b00      	cmp	r3, #0
 8006810:	d001      	beq.n	8006816 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 8006812:	7dfb      	ldrb	r3, [r7, #23]
 8006814:	e000      	b.n	8006818 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 8006816:	2300      	movs	r3, #0
}
 8006818:	4618      	mov	r0, r3
 800681a:	3718      	adds	r7, #24
 800681c:	46bd      	mov	sp, r7
 800681e:	bd80      	pop	{r7, pc}

08006820 <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	460b      	mov	r3, r1
 800682a:	607a      	str	r2, [r7, #4]
 800682c:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800682e:	7afb      	ldrb	r3, [r7, #11]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d178      	bne.n	8006926 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	3314      	adds	r3, #20
 8006838:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 8006840:	2b02      	cmp	r3, #2
 8006842:	d163      	bne.n	800690c <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	8992      	ldrh	r2, [r2, #12]
 800684c:	4293      	cmp	r3, r2
 800684e:	d91c      	bls.n	800688a <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 8006850:	693b      	ldr	r3, [r7, #16]
 8006852:	685b      	ldr	r3, [r3, #4]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	8992      	ldrh	r2, [r2, #12]
 8006858:	1a9a      	subs	r2, r3, r2
 800685a:	693b      	ldr	r3, [r7, #16]
 800685c:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	691b      	ldr	r3, [r3, #16]
 8006862:	693a      	ldr	r2, [r7, #16]
 8006864:	8992      	ldrh	r2, [r2, #12]
 8006866:	441a      	add	r2, r3
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800686c:	693b      	ldr	r3, [r7, #16]
 800686e:	6919      	ldr	r1, [r3, #16]
 8006870:	693b      	ldr	r3, [r7, #16]
 8006872:	685b      	ldr	r3, [r3, #4]
 8006874:	461a      	mov	r2, r3
 8006876:	68f8      	ldr	r0, [r7, #12]
 8006878:	f001 f8c4 	bl	8007a04 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800687c:	2300      	movs	r3, #0
 800687e:	2200      	movs	r2, #0
 8006880:	2100      	movs	r1, #0
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f001 fd9a 	bl	80083bc <USBD_LL_PrepareReceive>
 8006888:	e040      	b.n	800690c <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800688a:	693b      	ldr	r3, [r7, #16]
 800688c:	899b      	ldrh	r3, [r3, #12]
 800688e:	461a      	mov	r2, r3
 8006890:	693b      	ldr	r3, [r7, #16]
 8006892:	685b      	ldr	r3, [r3, #4]
 8006894:	429a      	cmp	r2, r3
 8006896:	d11c      	bne.n	80068d2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 8006898:	693b      	ldr	r3, [r7, #16]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	693a      	ldr	r2, [r7, #16]
 800689e:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80068a0:	4293      	cmp	r3, r2
 80068a2:	d316      	bcc.n	80068d2 <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 80068ae:	429a      	cmp	r2, r3
 80068b0:	d20f      	bcs.n	80068d2 <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80068b2:	2200      	movs	r2, #0
 80068b4:	2100      	movs	r1, #0
 80068b6:	68f8      	ldr	r0, [r7, #12]
 80068b8:	f001 f8a4 	bl	8007a04 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2200      	movs	r2, #0
 80068c0:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80068c4:	2300      	movs	r3, #0
 80068c6:	2200      	movs	r2, #0
 80068c8:	2100      	movs	r1, #0
 80068ca:	68f8      	ldr	r0, [r7, #12]
 80068cc:	f001 fd76 	bl	80083bc <USBD_LL_PrepareReceive>
 80068d0:	e01c      	b.n	800690c <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80068d8:	b2db      	uxtb	r3, r3
 80068da:	2b03      	cmp	r3, #3
 80068dc:	d10f      	bne.n	80068fe <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068e4:	68db      	ldr	r3, [r3, #12]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d009      	beq.n	80068fe <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	2200      	movs	r2, #0
 80068ee:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80068f8:	68db      	ldr	r3, [r3, #12]
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80068fe:	2180      	movs	r1, #128	@ 0x80
 8006900:	68f8      	ldr	r0, [r7, #12]
 8006902:	f001 fcb1 	bl	8008268 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f001 f8d2 	bl	8007ab0 <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 8006912:	2b00      	cmp	r3, #0
 8006914:	d03a      	beq.n	800698c <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 8006916:	68f8      	ldr	r0, [r7, #12]
 8006918:	f7ff fe30 	bl	800657c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2200      	movs	r2, #0
 8006920:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 8006924:	e032      	b.n	800698c <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006926:	7afb      	ldrb	r3, [r7, #11]
 8006928:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800692c:	b2db      	uxtb	r3, r3
 800692e:	4619      	mov	r1, r3
 8006930:	68f8      	ldr	r0, [r7, #12]
 8006932:	f000 f986 	bl	8006c42 <USBD_CoreFindEP>
 8006936:	4603      	mov	r3, r0
 8006938:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800693a:	7dfb      	ldrb	r3, [r7, #23]
 800693c:	2bff      	cmp	r3, #255	@ 0xff
 800693e:	d025      	beq.n	800698c <USBD_LL_DataInStage+0x16c>
 8006940:	7dfb      	ldrb	r3, [r7, #23]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d122      	bne.n	800698c <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800694c:	b2db      	uxtb	r3, r3
 800694e:	2b03      	cmp	r3, #3
 8006950:	d11c      	bne.n	800698c <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006952:	7dfa      	ldrb	r2, [r7, #23]
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	32ae      	adds	r2, #174	@ 0xae
 8006958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800695c:	695b      	ldr	r3, [r3, #20]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d014      	beq.n	800698c <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 8006962:	7dfa      	ldrb	r2, [r7, #23]
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800696a:	7dfa      	ldrb	r2, [r7, #23]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	32ae      	adds	r2, #174	@ 0xae
 8006970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006974:	695b      	ldr	r3, [r3, #20]
 8006976:	7afa      	ldrb	r2, [r7, #11]
 8006978:	4611      	mov	r1, r2
 800697a:	68f8      	ldr	r0, [r7, #12]
 800697c:	4798      	blx	r3
 800697e:	4603      	mov	r3, r0
 8006980:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006982:	7dbb      	ldrb	r3, [r7, #22]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d001      	beq.n	800698c <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 8006988:	7dbb      	ldrb	r3, [r7, #22]
 800698a:	e000      	b.n	800698e <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3718      	adds	r7, #24
 8006992:	46bd      	mov	sp, r7
 8006994:	bd80      	pop	{r7, pc}

08006996 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006996:	b580      	push	{r7, lr}
 8006998:	b084      	sub	sp, #16
 800699a:	af00      	add	r7, sp, #0
 800699c:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800699e:	2300      	movs	r3, #0
 80069a0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	2201      	movs	r2, #1
 80069a6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	2200      	movs	r2, #0
 80069ae:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	2200      	movs	r2, #0
 80069b6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d014      	beq.n	80069fc <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069d8:	685b      	ldr	r3, [r3, #4]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d00e      	beq.n	80069fc <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80069e4:	685b      	ldr	r3, [r3, #4]
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	6852      	ldr	r2, [r2, #4]
 80069ea:	b2d2      	uxtb	r2, r2
 80069ec:	4611      	mov	r1, r2
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	4798      	blx	r3
 80069f2:	4603      	mov	r3, r0
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d001      	beq.n	80069fc <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80069f8:	2303      	movs	r3, #3
 80069fa:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80069fc:	2340      	movs	r3, #64	@ 0x40
 80069fe:	2200      	movs	r2, #0
 8006a00:	2100      	movs	r1, #0
 8006a02:	6878      	ldr	r0, [r7, #4]
 8006a04:	f001 fbeb 	bl	80081de <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2201      	movs	r2, #1
 8006a0c:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	2240      	movs	r2, #64	@ 0x40
 8006a14:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006a18:	2340      	movs	r3, #64	@ 0x40
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	2180      	movs	r1, #128	@ 0x80
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f001 fbdd 	bl	80081de <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	2240      	movs	r2, #64	@ 0x40
 8006a30:	841a      	strh	r2, [r3, #32]

  return ret;
 8006a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a34:	4618      	mov	r0, r3
 8006a36:	3710      	adds	r7, #16
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	bd80      	pop	{r7, pc}

08006a3c <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b083      	sub	sp, #12
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	6078      	str	r0, [r7, #4]
 8006a44:	460b      	mov	r3, r1
 8006a46:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	78fa      	ldrb	r2, [r7, #3]
 8006a4c:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006a4e:	2300      	movs	r3, #0
}
 8006a50:	4618      	mov	r0, r3
 8006a52:	370c      	adds	r7, #12
 8006a54:	46bd      	mov	sp, r7
 8006a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5a:	4770      	bx	lr

08006a5c <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b083      	sub	sp, #12
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a6a:	b2db      	uxtb	r3, r3
 8006a6c:	2b04      	cmp	r3, #4
 8006a6e:	d006      	beq.n	8006a7e <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2204      	movs	r2, #4
 8006a82:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 8006a86:	2300      	movs	r3, #0
}
 8006a88:	4618      	mov	r0, r3
 8006a8a:	370c      	adds	r7, #12
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr

08006a94 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006a94:	b480      	push	{r7}
 8006a96:	b083      	sub	sp, #12
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006aa2:	b2db      	uxtb	r3, r3
 8006aa4:	2b04      	cmp	r3, #4
 8006aa6:	d106      	bne.n	8006ab6 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 8006aae:	b2da      	uxtb	r2, r3
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 8006ab6:	2300      	movs	r3, #0
}
 8006ab8:	4618      	mov	r0, r3
 8006aba:	370c      	adds	r7, #12
 8006abc:	46bd      	mov	sp, r7
 8006abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac2:	4770      	bx	lr

08006ac4 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006ad2:	b2db      	uxtb	r3, r3
 8006ad4:	2b03      	cmp	r3, #3
 8006ad6:	d110      	bne.n	8006afa <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d00b      	beq.n	8006afa <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006ae8:	69db      	ldr	r3, [r3, #28]
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d005      	beq.n	8006afa <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006af4:	69db      	ldr	r3, [r3, #28]
 8006af6:	6878      	ldr	r0, [r7, #4]
 8006af8:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006afa:	2300      	movs	r3, #0
}
 8006afc:	4618      	mov	r0, r3
 8006afe:	3708      	adds	r7, #8
 8006b00:	46bd      	mov	sp, r7
 8006b02:	bd80      	pop	{r7, pc}

08006b04 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b082      	sub	sp, #8
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
 8006b0c:	460b      	mov	r3, r1
 8006b0e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	32ae      	adds	r2, #174	@ 0xae
 8006b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d101      	bne.n	8006b26 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b22:	2303      	movs	r3, #3
 8006b24:	e01c      	b.n	8006b60 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	d115      	bne.n	8006b5e <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	32ae      	adds	r2, #174	@ 0xae
 8006b3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b40:	6a1b      	ldr	r3, [r3, #32]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d00b      	beq.n	8006b5e <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	32ae      	adds	r2, #174	@ 0xae
 8006b50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b54:	6a1b      	ldr	r3, [r3, #32]
 8006b56:	78fa      	ldrb	r2, [r7, #3]
 8006b58:	4611      	mov	r1, r2
 8006b5a:	6878      	ldr	r0, [r7, #4]
 8006b5c:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006b5e:	2300      	movs	r3, #0
}
 8006b60:	4618      	mov	r0, r3
 8006b62:	3708      	adds	r7, #8
 8006b64:	46bd      	mov	sp, r7
 8006b66:	bd80      	pop	{r7, pc}

08006b68 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b082      	sub	sp, #8
 8006b6c:	af00      	add	r7, sp, #0
 8006b6e:	6078      	str	r0, [r7, #4]
 8006b70:	460b      	mov	r3, r1
 8006b72:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	32ae      	adds	r2, #174	@ 0xae
 8006b7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d101      	bne.n	8006b8a <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006b86:	2303      	movs	r3, #3
 8006b88:	e01c      	b.n	8006bc4 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006b90:	b2db      	uxtb	r3, r3
 8006b92:	2b03      	cmp	r3, #3
 8006b94:	d115      	bne.n	8006bc2 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	32ae      	adds	r2, #174	@ 0xae
 8006ba0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ba4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d00b      	beq.n	8006bc2 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	32ae      	adds	r2, #174	@ 0xae
 8006bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bba:	78fa      	ldrb	r2, [r7, #3]
 8006bbc:	4611      	mov	r1, r2
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006bc2:	2300      	movs	r3, #0
}
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	3708      	adds	r7, #8
 8006bc8:	46bd      	mov	sp, r7
 8006bca:	bd80      	pop	{r7, pc}

08006bcc <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006bcc:	b480      	push	{r7}
 8006bce:	b083      	sub	sp, #12
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006bd4:	2300      	movs	r3, #0
}
 8006bd6:	4618      	mov	r0, r3
 8006bd8:	370c      	adds	r7, #12
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be0:	4770      	bx	lr

08006be2 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006be2:	b580      	push	{r7, lr}
 8006be4:	b084      	sub	sp, #16
 8006be6:	af00      	add	r7, sp, #0
 8006be8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006bea:	2300      	movs	r3, #0
 8006bec:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2201      	movs	r2, #1
 8006bf2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d00e      	beq.n	8006c1e <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8006c06:	685b      	ldr	r3, [r3, #4]
 8006c08:	687a      	ldr	r2, [r7, #4]
 8006c0a:	6852      	ldr	r2, [r2, #4]
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	4611      	mov	r1, r2
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	4798      	blx	r3
 8006c14:	4603      	mov	r3, r0
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d001      	beq.n	8006c1e <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006c1a:	2303      	movs	r3, #3
 8006c1c:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c20:	4618      	mov	r0, r3
 8006c22:	3710      	adds	r7, #16
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}

08006c28 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006c28:	b480      	push	{r7}
 8006c2a:	b083      	sub	sp, #12
 8006c2c:	af00      	add	r7, sp, #0
 8006c2e:	6078      	str	r0, [r7, #4]
 8006c30:	460b      	mov	r3, r1
 8006c32:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c34:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c36:	4618      	mov	r0, r3
 8006c38:	370c      	adds	r7, #12
 8006c3a:	46bd      	mov	sp, r7
 8006c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c40:	4770      	bx	lr

08006c42 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006c42:	b480      	push	{r7}
 8006c44:	b083      	sub	sp, #12
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006c4e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b086      	sub	sp, #24
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006c70:	2300      	movs	r3, #0
 8006c72:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	885b      	ldrh	r3, [r3, #2]
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	7812      	ldrb	r2, [r2, #0]
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	d91f      	bls.n	8006cc2 <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	781b      	ldrb	r3, [r3, #0]
 8006c86:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006c88:	e013      	b.n	8006cb2 <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006c8a:	f107 030a 	add.w	r3, r7, #10
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6978      	ldr	r0, [r7, #20]
 8006c92:	f000 f81b 	bl	8006ccc <USBD_GetNextDesc>
 8006c96:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006c98:	697b      	ldr	r3, [r7, #20]
 8006c9a:	785b      	ldrb	r3, [r3, #1]
 8006c9c:	2b05      	cmp	r3, #5
 8006c9e:	d108      	bne.n	8006cb2 <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	789b      	ldrb	r3, [r3, #2]
 8006ca8:	78fa      	ldrb	r2, [r7, #3]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d008      	beq.n	8006cc0 <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	885b      	ldrh	r3, [r3, #2]
 8006cb6:	b29a      	uxth	r2, r3
 8006cb8:	897b      	ldrh	r3, [r7, #10]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d8e5      	bhi.n	8006c8a <USBD_GetEpDesc+0x2e>
 8006cbe:	e000      	b.n	8006cc2 <USBD_GetEpDesc+0x66>
          break;
 8006cc0:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006cc2:	693b      	ldr	r3, [r7, #16]
}
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	3718      	adds	r7, #24
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}

08006ccc <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ccc:	b480      	push	{r7}
 8006cce:	b085      	sub	sp, #20
 8006cd0:	af00      	add	r7, sp, #0
 8006cd2:	6078      	str	r0, [r7, #4]
 8006cd4:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	881b      	ldrh	r3, [r3, #0]
 8006cde:	68fa      	ldr	r2, [r7, #12]
 8006ce0:	7812      	ldrb	r2, [r2, #0]
 8006ce2:	4413      	add	r3, r2
 8006ce4:	b29a      	uxth	r2, r3
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	781b      	ldrb	r3, [r3, #0]
 8006cee:	461a      	mov	r2, r3
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4413      	add	r3, r2
 8006cf4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
}
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	3714      	adds	r7, #20
 8006cfc:	46bd      	mov	sp, r7
 8006cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d02:	4770      	bx	lr

08006d04 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006d04:	b480      	push	{r7}
 8006d06:	b087      	sub	sp, #28
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	781b      	ldrb	r3, [r3, #0]
 8006d14:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006d16:	697b      	ldr	r3, [r7, #20]
 8006d18:	3301      	adds	r3, #1
 8006d1a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	781b      	ldrb	r3, [r3, #0]
 8006d20:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006d22:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 8006d26:	021b      	lsls	r3, r3, #8
 8006d28:	b21a      	sxth	r2, r3
 8006d2a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	b21b      	sxth	r3, r3
 8006d32:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006d34:	89fb      	ldrh	r3, [r7, #14]
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	371c      	adds	r7, #28
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr
	...

08006d44 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b084      	sub	sp, #16
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
 8006d4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006d4e:	2300      	movs	r3, #0
 8006d50:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d52:	683b      	ldr	r3, [r7, #0]
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006d5a:	2b40      	cmp	r3, #64	@ 0x40
 8006d5c:	d005      	beq.n	8006d6a <USBD_StdDevReq+0x26>
 8006d5e:	2b40      	cmp	r3, #64	@ 0x40
 8006d60:	d857      	bhi.n	8006e12 <USBD_StdDevReq+0xce>
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d00f      	beq.n	8006d86 <USBD_StdDevReq+0x42>
 8006d66:	2b20      	cmp	r3, #32
 8006d68:	d153      	bne.n	8006e12 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	32ae      	adds	r2, #174	@ 0xae
 8006d74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	4798      	blx	r3
 8006d80:	4603      	mov	r3, r0
 8006d82:	73fb      	strb	r3, [r7, #15]
      break;
 8006d84:	e04a      	b.n	8006e1c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d86:	683b      	ldr	r3, [r7, #0]
 8006d88:	785b      	ldrb	r3, [r3, #1]
 8006d8a:	2b09      	cmp	r3, #9
 8006d8c:	d83b      	bhi.n	8006e06 <USBD_StdDevReq+0xc2>
 8006d8e:	a201      	add	r2, pc, #4	@ (adr r2, 8006d94 <USBD_StdDevReq+0x50>)
 8006d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d94:	08006de9 	.word	0x08006de9
 8006d98:	08006dfd 	.word	0x08006dfd
 8006d9c:	08006e07 	.word	0x08006e07
 8006da0:	08006df3 	.word	0x08006df3
 8006da4:	08006e07 	.word	0x08006e07
 8006da8:	08006dc7 	.word	0x08006dc7
 8006dac:	08006dbd 	.word	0x08006dbd
 8006db0:	08006e07 	.word	0x08006e07
 8006db4:	08006ddf 	.word	0x08006ddf
 8006db8:	08006dd1 	.word	0x08006dd1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fa3e 	bl	8007240 <USBD_GetDescriptor>
          break;
 8006dc4:	e024      	b.n	8006e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006dc6:	6839      	ldr	r1, [r7, #0]
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f000 fba3 	bl	8007514 <USBD_SetAddress>
          break;
 8006dce:	e01f      	b.n	8006e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006dd0:	6839      	ldr	r1, [r7, #0]
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 fbe2 	bl	800759c <USBD_SetConfig>
 8006dd8:	4603      	mov	r3, r0
 8006dda:	73fb      	strb	r3, [r7, #15]
          break;
 8006ddc:	e018      	b.n	8006e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006dde:	6839      	ldr	r1, [r7, #0]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 fc85 	bl	80076f0 <USBD_GetConfig>
          break;
 8006de6:	e013      	b.n	8006e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006de8:	6839      	ldr	r1, [r7, #0]
 8006dea:	6878      	ldr	r0, [r7, #4]
 8006dec:	f000 fcb6 	bl	800775c <USBD_GetStatus>
          break;
 8006df0:	e00e      	b.n	8006e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fce5 	bl	80077c4 <USBD_SetFeature>
          break;
 8006dfa:	e009      	b.n	8006e10 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fd09 	bl	8007816 <USBD_ClrFeature>
          break;
 8006e04:	e004      	b.n	8006e10 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006e06:	6839      	ldr	r1, [r7, #0]
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 fd60 	bl	80078ce <USBD_CtlError>
          break;
 8006e0e:	bf00      	nop
      }
      break;
 8006e10:	e004      	b.n	8006e1c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006e12:	6839      	ldr	r1, [r7, #0]
 8006e14:	6878      	ldr	r0, [r7, #4]
 8006e16:	f000 fd5a 	bl	80078ce <USBD_CtlError>
      break;
 8006e1a:	bf00      	nop
  }

  return ret;
 8006e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e1e:	4618      	mov	r0, r3
 8006e20:	3710      	adds	r7, #16
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}
 8006e26:	bf00      	nop

08006e28 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006e32:	2300      	movs	r3, #0
 8006e34:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006e3e:	2b40      	cmp	r3, #64	@ 0x40
 8006e40:	d005      	beq.n	8006e4e <USBD_StdItfReq+0x26>
 8006e42:	2b40      	cmp	r3, #64	@ 0x40
 8006e44:	d852      	bhi.n	8006eec <USBD_StdItfReq+0xc4>
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d001      	beq.n	8006e4e <USBD_StdItfReq+0x26>
 8006e4a:	2b20      	cmp	r3, #32
 8006e4c:	d14e      	bne.n	8006eec <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	3b01      	subs	r3, #1
 8006e58:	2b02      	cmp	r3, #2
 8006e5a:	d840      	bhi.n	8006ede <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006e5c:	683b      	ldr	r3, [r7, #0]
 8006e5e:	889b      	ldrh	r3, [r3, #4]
 8006e60:	b2db      	uxtb	r3, r3
 8006e62:	2b01      	cmp	r3, #1
 8006e64:	d836      	bhi.n	8006ed4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006e66:	683b      	ldr	r3, [r7, #0]
 8006e68:	889b      	ldrh	r3, [r3, #4]
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	4619      	mov	r1, r3
 8006e6e:	6878      	ldr	r0, [r7, #4]
 8006e70:	f7ff feda 	bl	8006c28 <USBD_CoreFindIF>
 8006e74:	4603      	mov	r3, r0
 8006e76:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e78:	7bbb      	ldrb	r3, [r7, #14]
 8006e7a:	2bff      	cmp	r3, #255	@ 0xff
 8006e7c:	d01d      	beq.n	8006eba <USBD_StdItfReq+0x92>
 8006e7e:	7bbb      	ldrb	r3, [r7, #14]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d11a      	bne.n	8006eba <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006e84:	7bba      	ldrb	r2, [r7, #14]
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	32ae      	adds	r2, #174	@ 0xae
 8006e8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	d00f      	beq.n	8006eb4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006e94:	7bba      	ldrb	r2, [r7, #14]
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e9c:	7bba      	ldrb	r2, [r7, #14]
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	32ae      	adds	r2, #174	@ 0xae
 8006ea2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea6:	689b      	ldr	r3, [r3, #8]
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	4798      	blx	r3
 8006eae:	4603      	mov	r3, r0
 8006eb0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006eb2:	e004      	b.n	8006ebe <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006eb4:	2303      	movs	r3, #3
 8006eb6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006eb8:	e001      	b.n	8006ebe <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006ebe:	683b      	ldr	r3, [r7, #0]
 8006ec0:	88db      	ldrh	r3, [r3, #6]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d110      	bne.n	8006ee8 <USBD_StdItfReq+0xc0>
 8006ec6:	7bfb      	ldrb	r3, [r7, #15]
 8006ec8:	2b00      	cmp	r3, #0
 8006eca:	d10d      	bne.n	8006ee8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fddc 	bl	8007a8a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006ed2:	e009      	b.n	8006ee8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006ed4:	6839      	ldr	r1, [r7, #0]
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f000 fcf9 	bl	80078ce <USBD_CtlError>
          break;
 8006edc:	e004      	b.n	8006ee8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006ede:	6839      	ldr	r1, [r7, #0]
 8006ee0:	6878      	ldr	r0, [r7, #4]
 8006ee2:	f000 fcf4 	bl	80078ce <USBD_CtlError>
          break;
 8006ee6:	e000      	b.n	8006eea <USBD_StdItfReq+0xc2>
          break;
 8006ee8:	bf00      	nop
      }
      break;
 8006eea:	e004      	b.n	8006ef6 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fced 	bl	80078ce <USBD_CtlError>
      break;
 8006ef4:	bf00      	nop
  }

  return ret;
 8006ef6:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3710      	adds	r7, #16
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}

08006f00 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f00:	b580      	push	{r7, lr}
 8006f02:	b084      	sub	sp, #16
 8006f04:	af00      	add	r7, sp, #0
 8006f06:	6078      	str	r0, [r7, #4]
 8006f08:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006f0a:	2300      	movs	r3, #0
 8006f0c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	889b      	ldrh	r3, [r3, #4]
 8006f12:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	781b      	ldrb	r3, [r3, #0]
 8006f18:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8006f1c:	2b40      	cmp	r3, #64	@ 0x40
 8006f1e:	d007      	beq.n	8006f30 <USBD_StdEPReq+0x30>
 8006f20:	2b40      	cmp	r3, #64	@ 0x40
 8006f22:	f200 8181 	bhi.w	8007228 <USBD_StdEPReq+0x328>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d02a      	beq.n	8006f80 <USBD_StdEPReq+0x80>
 8006f2a:	2b20      	cmp	r3, #32
 8006f2c:	f040 817c 	bne.w	8007228 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006f30:	7bbb      	ldrb	r3, [r7, #14]
 8006f32:	4619      	mov	r1, r3
 8006f34:	6878      	ldr	r0, [r7, #4]
 8006f36:	f7ff fe84 	bl	8006c42 <USBD_CoreFindEP>
 8006f3a:	4603      	mov	r3, r0
 8006f3c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006f3e:	7b7b      	ldrb	r3, [r7, #13]
 8006f40:	2bff      	cmp	r3, #255	@ 0xff
 8006f42:	f000 8176 	beq.w	8007232 <USBD_StdEPReq+0x332>
 8006f46:	7b7b      	ldrb	r3, [r7, #13]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f040 8172 	bne.w	8007232 <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 8006f4e:	7b7a      	ldrb	r2, [r7, #13]
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006f56:	7b7a      	ldrb	r2, [r7, #13]
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	32ae      	adds	r2, #174	@ 0xae
 8006f5c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	f000 8165 	beq.w	8007232 <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006f68:	7b7a      	ldrb	r2, [r7, #13]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	32ae      	adds	r2, #174	@ 0xae
 8006f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006f72:	689b      	ldr	r3, [r3, #8]
 8006f74:	6839      	ldr	r1, [r7, #0]
 8006f76:	6878      	ldr	r0, [r7, #4]
 8006f78:	4798      	blx	r3
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006f7e:	e158      	b.n	8007232 <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006f80:	683b      	ldr	r3, [r7, #0]
 8006f82:	785b      	ldrb	r3, [r3, #1]
 8006f84:	2b03      	cmp	r3, #3
 8006f86:	d008      	beq.n	8006f9a <USBD_StdEPReq+0x9a>
 8006f88:	2b03      	cmp	r3, #3
 8006f8a:	f300 8147 	bgt.w	800721c <USBD_StdEPReq+0x31c>
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	f000 809b 	beq.w	80070ca <USBD_StdEPReq+0x1ca>
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d03c      	beq.n	8007012 <USBD_StdEPReq+0x112>
 8006f98:	e140      	b.n	800721c <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b02      	cmp	r3, #2
 8006fa4:	d002      	beq.n	8006fac <USBD_StdEPReq+0xac>
 8006fa6:	2b03      	cmp	r3, #3
 8006fa8:	d016      	beq.n	8006fd8 <USBD_StdEPReq+0xd8>
 8006faa:	e02c      	b.n	8007006 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006fac:	7bbb      	ldrb	r3, [r7, #14]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d00d      	beq.n	8006fce <USBD_StdEPReq+0xce>
 8006fb2:	7bbb      	ldrb	r3, [r7, #14]
 8006fb4:	2b80      	cmp	r3, #128	@ 0x80
 8006fb6:	d00a      	beq.n	8006fce <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006fb8:	7bbb      	ldrb	r3, [r7, #14]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f001 f953 	bl	8008268 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006fc2:	2180      	movs	r1, #128	@ 0x80
 8006fc4:	6878      	ldr	r0, [r7, #4]
 8006fc6:	f001 f94f 	bl	8008268 <USBD_LL_StallEP>
 8006fca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006fcc:	e020      	b.n	8007010 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006fce:	6839      	ldr	r1, [r7, #0]
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fc7c 	bl	80078ce <USBD_CtlError>
              break;
 8006fd6:	e01b      	b.n	8007010 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006fd8:	683b      	ldr	r3, [r7, #0]
 8006fda:	885b      	ldrh	r3, [r3, #2]
 8006fdc:	2b00      	cmp	r3, #0
 8006fde:	d10e      	bne.n	8006ffe <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006fe0:	7bbb      	ldrb	r3, [r7, #14]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00b      	beq.n	8006ffe <USBD_StdEPReq+0xfe>
 8006fe6:	7bbb      	ldrb	r3, [r7, #14]
 8006fe8:	2b80      	cmp	r3, #128	@ 0x80
 8006fea:	d008      	beq.n	8006ffe <USBD_StdEPReq+0xfe>
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	88db      	ldrh	r3, [r3, #6]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d104      	bne.n	8006ffe <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ff4:	7bbb      	ldrb	r3, [r7, #14]
 8006ff6:	4619      	mov	r1, r3
 8006ff8:	6878      	ldr	r0, [r7, #4]
 8006ffa:	f001 f935 	bl	8008268 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fd43 	bl	8007a8a <USBD_CtlSendStatus>

              break;
 8007004:	e004      	b.n	8007010 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8007006:	6839      	ldr	r1, [r7, #0]
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fc60 	bl	80078ce <USBD_CtlError>
              break;
 800700e:	bf00      	nop
          }
          break;
 8007010:	e109      	b.n	8007226 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007018:	b2db      	uxtb	r3, r3
 800701a:	2b02      	cmp	r3, #2
 800701c:	d002      	beq.n	8007024 <USBD_StdEPReq+0x124>
 800701e:	2b03      	cmp	r3, #3
 8007020:	d016      	beq.n	8007050 <USBD_StdEPReq+0x150>
 8007022:	e04b      	b.n	80070bc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8007024:	7bbb      	ldrb	r3, [r7, #14]
 8007026:	2b00      	cmp	r3, #0
 8007028:	d00d      	beq.n	8007046 <USBD_StdEPReq+0x146>
 800702a:	7bbb      	ldrb	r3, [r7, #14]
 800702c:	2b80      	cmp	r3, #128	@ 0x80
 800702e:	d00a      	beq.n	8007046 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8007030:	7bbb      	ldrb	r3, [r7, #14]
 8007032:	4619      	mov	r1, r3
 8007034:	6878      	ldr	r0, [r7, #4]
 8007036:	f001 f917 	bl	8008268 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800703a:	2180      	movs	r1, #128	@ 0x80
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f001 f913 	bl	8008268 <USBD_LL_StallEP>
 8007042:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8007044:	e040      	b.n	80070c8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8007046:	6839      	ldr	r1, [r7, #0]
 8007048:	6878      	ldr	r0, [r7, #4]
 800704a:	f000 fc40 	bl	80078ce <USBD_CtlError>
              break;
 800704e:	e03b      	b.n	80070c8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	885b      	ldrh	r3, [r3, #2]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d136      	bne.n	80070c6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8007058:	7bbb      	ldrb	r3, [r7, #14]
 800705a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800705e:	2b00      	cmp	r3, #0
 8007060:	d004      	beq.n	800706c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8007062:	7bbb      	ldrb	r3, [r7, #14]
 8007064:	4619      	mov	r1, r3
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f001 f91d 	bl	80082a6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fd0c 	bl	8007a8a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8007072:	7bbb      	ldrb	r3, [r7, #14]
 8007074:	4619      	mov	r1, r3
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f7ff fde3 	bl	8006c42 <USBD_CoreFindEP>
 800707c:	4603      	mov	r3, r0
 800707e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007080:	7b7b      	ldrb	r3, [r7, #13]
 8007082:	2bff      	cmp	r3, #255	@ 0xff
 8007084:	d01f      	beq.n	80070c6 <USBD_StdEPReq+0x1c6>
 8007086:	7b7b      	ldrb	r3, [r7, #13]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d11c      	bne.n	80070c6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800708c:	7b7a      	ldrb	r2, [r7, #13]
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8007094:	7b7a      	ldrb	r2, [r7, #13]
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	32ae      	adds	r2, #174	@ 0xae
 800709a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800709e:	689b      	ldr	r3, [r3, #8]
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d010      	beq.n	80070c6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80070a4:	7b7a      	ldrb	r2, [r7, #13]
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	32ae      	adds	r2, #174	@ 0xae
 80070aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80070ae:	689b      	ldr	r3, [r3, #8]
 80070b0:	6839      	ldr	r1, [r7, #0]
 80070b2:	6878      	ldr	r0, [r7, #4]
 80070b4:	4798      	blx	r3
 80070b6:	4603      	mov	r3, r0
 80070b8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80070ba:	e004      	b.n	80070c6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80070bc:	6839      	ldr	r1, [r7, #0]
 80070be:	6878      	ldr	r0, [r7, #4]
 80070c0:	f000 fc05 	bl	80078ce <USBD_CtlError>
              break;
 80070c4:	e000      	b.n	80070c8 <USBD_StdEPReq+0x1c8>
              break;
 80070c6:	bf00      	nop
          }
          break;
 80070c8:	e0ad      	b.n	8007226 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	2b02      	cmp	r3, #2
 80070d4:	d002      	beq.n	80070dc <USBD_StdEPReq+0x1dc>
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d033      	beq.n	8007142 <USBD_StdEPReq+0x242>
 80070da:	e099      	b.n	8007210 <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80070dc:	7bbb      	ldrb	r3, [r7, #14]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d007      	beq.n	80070f2 <USBD_StdEPReq+0x1f2>
 80070e2:	7bbb      	ldrb	r3, [r7, #14]
 80070e4:	2b80      	cmp	r3, #128	@ 0x80
 80070e6:	d004      	beq.n	80070f2 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80070e8:	6839      	ldr	r1, [r7, #0]
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fbef 	bl	80078ce <USBD_CtlError>
                break;
 80070f0:	e093      	b.n	800721a <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80070f2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	da0b      	bge.n	8007112 <USBD_StdEPReq+0x212>
 80070fa:	7bbb      	ldrb	r3, [r7, #14]
 80070fc:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8007100:	4613      	mov	r3, r2
 8007102:	009b      	lsls	r3, r3, #2
 8007104:	4413      	add	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	3310      	adds	r3, #16
 800710a:	687a      	ldr	r2, [r7, #4]
 800710c:	4413      	add	r3, r2
 800710e:	3304      	adds	r3, #4
 8007110:	e00b      	b.n	800712a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8007112:	7bbb      	ldrb	r3, [r7, #14]
 8007114:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007118:	4613      	mov	r3, r2
 800711a:	009b      	lsls	r3, r3, #2
 800711c:	4413      	add	r3, r2
 800711e:	009b      	lsls	r3, r3, #2
 8007120:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 8007124:	687a      	ldr	r2, [r7, #4]
 8007126:	4413      	add	r3, r2
 8007128:	3304      	adds	r3, #4
 800712a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800712c:	68bb      	ldr	r3, [r7, #8]
 800712e:	2200      	movs	r2, #0
 8007130:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007132:	68bb      	ldr	r3, [r7, #8]
 8007134:	330e      	adds	r3, #14
 8007136:	2202      	movs	r2, #2
 8007138:	4619      	mov	r1, r3
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f000 fc44 	bl	80079c8 <USBD_CtlSendData>
              break;
 8007140:	e06b      	b.n	800721a <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8007142:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007146:	2b00      	cmp	r3, #0
 8007148:	da11      	bge.n	800716e <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800714a:	7bbb      	ldrb	r3, [r7, #14]
 800714c:	f003 020f 	and.w	r2, r3, #15
 8007150:	6879      	ldr	r1, [r7, #4]
 8007152:	4613      	mov	r3, r2
 8007154:	009b      	lsls	r3, r3, #2
 8007156:	4413      	add	r3, r2
 8007158:	009b      	lsls	r3, r3, #2
 800715a:	440b      	add	r3, r1
 800715c:	3323      	adds	r3, #35	@ 0x23
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2b00      	cmp	r3, #0
 8007162:	d117      	bne.n	8007194 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fbb1 	bl	80078ce <USBD_CtlError>
                  break;
 800716c:	e055      	b.n	800721a <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800716e:	7bbb      	ldrb	r3, [r7, #14]
 8007170:	f003 020f 	and.w	r2, r3, #15
 8007174:	6879      	ldr	r1, [r7, #4]
 8007176:	4613      	mov	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	4413      	add	r3, r2
 800717c:	009b      	lsls	r3, r3, #2
 800717e:	440b      	add	r3, r1
 8007180:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2b00      	cmp	r3, #0
 8007188:	d104      	bne.n	8007194 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800718a:	6839      	ldr	r1, [r7, #0]
 800718c:	6878      	ldr	r0, [r7, #4]
 800718e:	f000 fb9e 	bl	80078ce <USBD_CtlError>
                  break;
 8007192:	e042      	b.n	800721a <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8007194:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8007198:	2b00      	cmp	r3, #0
 800719a:	da0b      	bge.n	80071b4 <USBD_StdEPReq+0x2b4>
 800719c:	7bbb      	ldrb	r3, [r7, #14]
 800719e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 80071a2:	4613      	mov	r3, r2
 80071a4:	009b      	lsls	r3, r3, #2
 80071a6:	4413      	add	r3, r2
 80071a8:	009b      	lsls	r3, r3, #2
 80071aa:	3310      	adds	r3, #16
 80071ac:	687a      	ldr	r2, [r7, #4]
 80071ae:	4413      	add	r3, r2
 80071b0:	3304      	adds	r3, #4
 80071b2:	e00b      	b.n	80071cc <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80071b4:	7bbb      	ldrb	r3, [r7, #14]
 80071b6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80071ba:	4613      	mov	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	4413      	add	r3, r2
 80071c0:	009b      	lsls	r3, r3, #2
 80071c2:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 80071c6:	687a      	ldr	r2, [r7, #4]
 80071c8:	4413      	add	r3, r2
 80071ca:	3304      	adds	r3, #4
 80071cc:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80071ce:	7bbb      	ldrb	r3, [r7, #14]
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d002      	beq.n	80071da <USBD_StdEPReq+0x2da>
 80071d4:	7bbb      	ldrb	r3, [r7, #14]
 80071d6:	2b80      	cmp	r3, #128	@ 0x80
 80071d8:	d103      	bne.n	80071e2 <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 80071da:	68bb      	ldr	r3, [r7, #8]
 80071dc:	2200      	movs	r2, #0
 80071de:	739a      	strb	r2, [r3, #14]
 80071e0:	e00e      	b.n	8007200 <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80071e2:	7bbb      	ldrb	r3, [r7, #14]
 80071e4:	4619      	mov	r1, r3
 80071e6:	6878      	ldr	r0, [r7, #4]
 80071e8:	f001 f87c 	bl	80082e4 <USBD_LL_IsStallEP>
 80071ec:	4603      	mov	r3, r0
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d003      	beq.n	80071fa <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 80071f2:	68bb      	ldr	r3, [r7, #8]
 80071f4:	2201      	movs	r2, #1
 80071f6:	739a      	strb	r2, [r3, #14]
 80071f8:	e002      	b.n	8007200 <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 80071fa:	68bb      	ldr	r3, [r7, #8]
 80071fc:	2200      	movs	r2, #0
 80071fe:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007200:	68bb      	ldr	r3, [r7, #8]
 8007202:	330e      	adds	r3, #14
 8007204:	2202      	movs	r2, #2
 8007206:	4619      	mov	r1, r3
 8007208:	6878      	ldr	r0, [r7, #4]
 800720a:	f000 fbdd 	bl	80079c8 <USBD_CtlSendData>
              break;
 800720e:	e004      	b.n	800721a <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 8007210:	6839      	ldr	r1, [r7, #0]
 8007212:	6878      	ldr	r0, [r7, #4]
 8007214:	f000 fb5b 	bl	80078ce <USBD_CtlError>
              break;
 8007218:	bf00      	nop
          }
          break;
 800721a:	e004      	b.n	8007226 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800721c:	6839      	ldr	r1, [r7, #0]
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 fb55 	bl	80078ce <USBD_CtlError>
          break;
 8007224:	bf00      	nop
      }
      break;
 8007226:	e005      	b.n	8007234 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 8007228:	6839      	ldr	r1, [r7, #0]
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f000 fb4f 	bl	80078ce <USBD_CtlError>
      break;
 8007230:	e000      	b.n	8007234 <USBD_StdEPReq+0x334>
      break;
 8007232:	bf00      	nop
  }

  return ret;
 8007234:	7bfb      	ldrb	r3, [r7, #15]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800724a:	2300      	movs	r3, #0
 800724c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800724e:	2300      	movs	r3, #0
 8007250:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007252:	2300      	movs	r3, #0
 8007254:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007256:	683b      	ldr	r3, [r7, #0]
 8007258:	885b      	ldrh	r3, [r3, #2]
 800725a:	0a1b      	lsrs	r3, r3, #8
 800725c:	b29b      	uxth	r3, r3
 800725e:	3b01      	subs	r3, #1
 8007260:	2b06      	cmp	r3, #6
 8007262:	f200 8128 	bhi.w	80074b6 <USBD_GetDescriptor+0x276>
 8007266:	a201      	add	r2, pc, #4	@ (adr r2, 800726c <USBD_GetDescriptor+0x2c>)
 8007268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800726c:	08007289 	.word	0x08007289
 8007270:	080072a1 	.word	0x080072a1
 8007274:	080072e1 	.word	0x080072e1
 8007278:	080074b7 	.word	0x080074b7
 800727c:	080074b7 	.word	0x080074b7
 8007280:	08007457 	.word	0x08007457
 8007284:	08007483 	.word	0x08007483
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	687a      	ldr	r2, [r7, #4]
 8007292:	7c12      	ldrb	r2, [r2, #16]
 8007294:	f107 0108 	add.w	r1, r7, #8
 8007298:	4610      	mov	r0, r2
 800729a:	4798      	blx	r3
 800729c:	60f8      	str	r0, [r7, #12]
      break;
 800729e:	e112      	b.n	80074c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	7c1b      	ldrb	r3, [r3, #16]
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d10d      	bne.n	80072c4 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80072b0:	f107 0208 	add.w	r2, r7, #8
 80072b4:	4610      	mov	r0, r2
 80072b6:	4798      	blx	r3
 80072b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	3301      	adds	r3, #1
 80072be:	2202      	movs	r2, #2
 80072c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80072c2:	e100      	b.n	80074c6 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 80072ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072cc:	f107 0208 	add.w	r2, r7, #8
 80072d0:	4610      	mov	r0, r2
 80072d2:	4798      	blx	r3
 80072d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3301      	adds	r3, #1
 80072da:	2202      	movs	r2, #2
 80072dc:	701a      	strb	r2, [r3, #0]
      break;
 80072de:	e0f2      	b.n	80074c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	885b      	ldrh	r3, [r3, #2]
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b05      	cmp	r3, #5
 80072e8:	f200 80ac 	bhi.w	8007444 <USBD_GetDescriptor+0x204>
 80072ec:	a201      	add	r2, pc, #4	@ (adr r2, 80072f4 <USBD_GetDescriptor+0xb4>)
 80072ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072f2:	bf00      	nop
 80072f4:	0800730d 	.word	0x0800730d
 80072f8:	08007341 	.word	0x08007341
 80072fc:	08007375 	.word	0x08007375
 8007300:	080073a9 	.word	0x080073a9
 8007304:	080073dd 	.word	0x080073dd
 8007308:	08007411 	.word	0x08007411
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007312:	685b      	ldr	r3, [r3, #4]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d00b      	beq.n	8007330 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800731e:	685b      	ldr	r3, [r3, #4]
 8007320:	687a      	ldr	r2, [r7, #4]
 8007322:	7c12      	ldrb	r2, [r2, #16]
 8007324:	f107 0108 	add.w	r1, r7, #8
 8007328:	4610      	mov	r0, r2
 800732a:	4798      	blx	r3
 800732c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800732e:	e091      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 facb 	bl	80078ce <USBD_CtlError>
            err++;
 8007338:	7afb      	ldrb	r3, [r7, #11]
 800733a:	3301      	adds	r3, #1
 800733c:	72fb      	strb	r3, [r7, #11]
          break;
 800733e:	e089      	b.n	8007454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007346:	689b      	ldr	r3, [r3, #8]
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00b      	beq.n	8007364 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007352:	689b      	ldr	r3, [r3, #8]
 8007354:	687a      	ldr	r2, [r7, #4]
 8007356:	7c12      	ldrb	r2, [r2, #16]
 8007358:	f107 0108 	add.w	r1, r7, #8
 800735c:	4610      	mov	r0, r2
 800735e:	4798      	blx	r3
 8007360:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007362:	e077      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 fab1 	bl	80078ce <USBD_CtlError>
            err++;
 800736c:	7afb      	ldrb	r3, [r7, #11]
 800736e:	3301      	adds	r3, #1
 8007370:	72fb      	strb	r3, [r7, #11]
          break;
 8007372:	e06f      	b.n	8007454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	2b00      	cmp	r3, #0
 800737e:	d00b      	beq.n	8007398 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007386:	68db      	ldr	r3, [r3, #12]
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7c12      	ldrb	r2, [r2, #16]
 800738c:	f107 0108 	add.w	r1, r7, #8
 8007390:	4610      	mov	r0, r2
 8007392:	4798      	blx	r3
 8007394:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007396:	e05d      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007398:	6839      	ldr	r1, [r7, #0]
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 fa97 	bl	80078ce <USBD_CtlError>
            err++;
 80073a0:	7afb      	ldrb	r3, [r7, #11]
 80073a2:	3301      	adds	r3, #1
 80073a4:	72fb      	strb	r3, [r7, #11]
          break;
 80073a6:	e055      	b.n	8007454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ae:	691b      	ldr	r3, [r3, #16]
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ba:	691b      	ldr	r3, [r3, #16]
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	7c12      	ldrb	r2, [r2, #16]
 80073c0:	f107 0108 	add.w	r1, r7, #8
 80073c4:	4610      	mov	r0, r2
 80073c6:	4798      	blx	r3
 80073c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073ca:	e043      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80073cc:	6839      	ldr	r1, [r7, #0]
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fa7d 	bl	80078ce <USBD_CtlError>
            err++;
 80073d4:	7afb      	ldrb	r3, [r7, #11]
 80073d6:	3301      	adds	r3, #1
 80073d8:	72fb      	strb	r3, [r7, #11]
          break;
 80073da:	e03b      	b.n	8007454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073e2:	695b      	ldr	r3, [r3, #20]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d00b      	beq.n	8007400 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 80073ee:	695b      	ldr	r3, [r3, #20]
 80073f0:	687a      	ldr	r2, [r7, #4]
 80073f2:	7c12      	ldrb	r2, [r2, #16]
 80073f4:	f107 0108 	add.w	r1, r7, #8
 80073f8:	4610      	mov	r0, r2
 80073fa:	4798      	blx	r3
 80073fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80073fe:	e029      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007400:	6839      	ldr	r1, [r7, #0]
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 fa63 	bl	80078ce <USBD_CtlError>
            err++;
 8007408:	7afb      	ldrb	r3, [r7, #11]
 800740a:	3301      	adds	r3, #1
 800740c:	72fb      	strb	r3, [r7, #11]
          break;
 800740e:	e021      	b.n	8007454 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007416:	699b      	ldr	r3, [r3, #24]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d00b      	beq.n	8007434 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 8007422:	699b      	ldr	r3, [r3, #24]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	7c12      	ldrb	r2, [r2, #16]
 8007428:	f107 0108 	add.w	r1, r7, #8
 800742c:	4610      	mov	r0, r2
 800742e:	4798      	blx	r3
 8007430:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007432:	e00f      	b.n	8007454 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007434:	6839      	ldr	r1, [r7, #0]
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fa49 	bl	80078ce <USBD_CtlError>
            err++;
 800743c:	7afb      	ldrb	r3, [r7, #11]
 800743e:	3301      	adds	r3, #1
 8007440:	72fb      	strb	r3, [r7, #11]
          break;
 8007442:	e007      	b.n	8007454 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007444:	6839      	ldr	r1, [r7, #0]
 8007446:	6878      	ldr	r0, [r7, #4]
 8007448:	f000 fa41 	bl	80078ce <USBD_CtlError>
          err++;
 800744c:	7afb      	ldrb	r3, [r7, #11]
 800744e:	3301      	adds	r3, #1
 8007450:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007452:	bf00      	nop
      }
      break;
 8007454:	e037      	b.n	80074c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	7c1b      	ldrb	r3, [r3, #16]
 800745a:	2b00      	cmp	r3, #0
 800745c:	d109      	bne.n	8007472 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007464:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007466:	f107 0208 	add.w	r2, r7, #8
 800746a:	4610      	mov	r0, r2
 800746c:	4798      	blx	r3
 800746e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007470:	e029      	b.n	80074c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007472:	6839      	ldr	r1, [r7, #0]
 8007474:	6878      	ldr	r0, [r7, #4]
 8007476:	f000 fa2a 	bl	80078ce <USBD_CtlError>
        err++;
 800747a:	7afb      	ldrb	r3, [r7, #11]
 800747c:	3301      	adds	r3, #1
 800747e:	72fb      	strb	r3, [r7, #11]
      break;
 8007480:	e021      	b.n	80074c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	7c1b      	ldrb	r3, [r3, #16]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10d      	bne.n	80074a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 8007490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007492:	f107 0208 	add.w	r2, r7, #8
 8007496:	4610      	mov	r0, r2
 8007498:	4798      	blx	r3
 800749a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	3301      	adds	r3, #1
 80074a0:	2207      	movs	r2, #7
 80074a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80074a4:	e00f      	b.n	80074c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80074a6:	6839      	ldr	r1, [r7, #0]
 80074a8:	6878      	ldr	r0, [r7, #4]
 80074aa:	f000 fa10 	bl	80078ce <USBD_CtlError>
        err++;
 80074ae:	7afb      	ldrb	r3, [r7, #11]
 80074b0:	3301      	adds	r3, #1
 80074b2:	72fb      	strb	r3, [r7, #11]
      break;
 80074b4:	e007      	b.n	80074c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80074b6:	6839      	ldr	r1, [r7, #0]
 80074b8:	6878      	ldr	r0, [r7, #4]
 80074ba:	f000 fa08 	bl	80078ce <USBD_CtlError>
      err++;
 80074be:	7afb      	ldrb	r3, [r7, #11]
 80074c0:	3301      	adds	r3, #1
 80074c2:	72fb      	strb	r3, [r7, #11]
      break;
 80074c4:	bf00      	nop
  }

  if (err != 0U)
 80074c6:	7afb      	ldrb	r3, [r7, #11]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d11e      	bne.n	800750a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	88db      	ldrh	r3, [r3, #6]
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d016      	beq.n	8007502 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80074d4:	893b      	ldrh	r3, [r7, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d00e      	beq.n	80074f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80074da:	683b      	ldr	r3, [r7, #0]
 80074dc:	88da      	ldrh	r2, [r3, #6]
 80074de:	893b      	ldrh	r3, [r7, #8]
 80074e0:	4293      	cmp	r3, r2
 80074e2:	bf28      	it	cs
 80074e4:	4613      	movcs	r3, r2
 80074e6:	b29b      	uxth	r3, r3
 80074e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80074ea:	893b      	ldrh	r3, [r7, #8]
 80074ec:	461a      	mov	r2, r3
 80074ee:	68f9      	ldr	r1, [r7, #12]
 80074f0:	6878      	ldr	r0, [r7, #4]
 80074f2:	f000 fa69 	bl	80079c8 <USBD_CtlSendData>
 80074f6:	e009      	b.n	800750c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80074f8:	6839      	ldr	r1, [r7, #0]
 80074fa:	6878      	ldr	r0, [r7, #4]
 80074fc:	f000 f9e7 	bl	80078ce <USBD_CtlError>
 8007500:	e004      	b.n	800750c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007502:	6878      	ldr	r0, [r7, #4]
 8007504:	f000 fac1 	bl	8007a8a <USBD_CtlSendStatus>
 8007508:	e000      	b.n	800750c <USBD_GetDescriptor+0x2cc>
    return;
 800750a:	bf00      	nop
  }
}
 800750c:	3710      	adds	r7, #16
 800750e:	46bd      	mov	sp, r7
 8007510:	bd80      	pop	{r7, pc}
 8007512:	bf00      	nop

08007514 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b084      	sub	sp, #16
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
 800751c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800751e:	683b      	ldr	r3, [r7, #0]
 8007520:	889b      	ldrh	r3, [r3, #4]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d131      	bne.n	800758a <USBD_SetAddress+0x76>
 8007526:	683b      	ldr	r3, [r7, #0]
 8007528:	88db      	ldrh	r3, [r3, #6]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d12d      	bne.n	800758a <USBD_SetAddress+0x76>
 800752e:	683b      	ldr	r3, [r7, #0]
 8007530:	885b      	ldrh	r3, [r3, #2]
 8007532:	2b7f      	cmp	r3, #127	@ 0x7f
 8007534:	d829      	bhi.n	800758a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	885b      	ldrh	r3, [r3, #2]
 800753a:	b2db      	uxtb	r3, r3
 800753c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007540:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b03      	cmp	r3, #3
 800754c:	d104      	bne.n	8007558 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800754e:	6839      	ldr	r1, [r7, #0]
 8007550:	6878      	ldr	r0, [r7, #4]
 8007552:	f000 f9bc 	bl	80078ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007556:	e01d      	b.n	8007594 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	7bfa      	ldrb	r2, [r7, #15]
 800755c:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007560:	7bfb      	ldrb	r3, [r7, #15]
 8007562:	4619      	mov	r1, r3
 8007564:	6878      	ldr	r0, [r7, #4]
 8007566:	f000 fee9 	bl	800833c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 fa8d 	bl	8007a8a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007570:	7bfb      	ldrb	r3, [r7, #15]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d004      	beq.n	8007580 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2202      	movs	r2, #2
 800757a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800757e:	e009      	b.n	8007594 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2201      	movs	r2, #1
 8007584:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007588:	e004      	b.n	8007594 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800758a:	6839      	ldr	r1, [r7, #0]
 800758c:	6878      	ldr	r0, [r7, #4]
 800758e:	f000 f99e 	bl	80078ce <USBD_CtlError>
  }
}
 8007592:	bf00      	nop
 8007594:	bf00      	nop
 8007596:	3710      	adds	r7, #16
 8007598:	46bd      	mov	sp, r7
 800759a:	bd80      	pop	{r7, pc}

0800759c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b084      	sub	sp, #16
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	6078      	str	r0, [r7, #4]
 80075a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80075a6:	2300      	movs	r3, #0
 80075a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80075aa:	683b      	ldr	r3, [r7, #0]
 80075ac:	885b      	ldrh	r3, [r3, #2]
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	4b4e      	ldr	r3, [pc, #312]	@ (80076ec <USBD_SetConfig+0x150>)
 80075b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80075b4:	4b4d      	ldr	r3, [pc, #308]	@ (80076ec <USBD_SetConfig+0x150>)
 80075b6:	781b      	ldrb	r3, [r3, #0]
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d905      	bls.n	80075c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80075bc:	6839      	ldr	r1, [r7, #0]
 80075be:	6878      	ldr	r0, [r7, #4]
 80075c0:	f000 f985 	bl	80078ce <USBD_CtlError>
    return USBD_FAIL;
 80075c4:	2303      	movs	r3, #3
 80075c6:	e08c      	b.n	80076e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	2b02      	cmp	r3, #2
 80075d2:	d002      	beq.n	80075da <USBD_SetConfig+0x3e>
 80075d4:	2b03      	cmp	r3, #3
 80075d6:	d029      	beq.n	800762c <USBD_SetConfig+0x90>
 80075d8:	e075      	b.n	80076c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80075da:	4b44      	ldr	r3, [pc, #272]	@ (80076ec <USBD_SetConfig+0x150>)
 80075dc:	781b      	ldrb	r3, [r3, #0]
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d020      	beq.n	8007624 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80075e2:	4b42      	ldr	r3, [pc, #264]	@ (80076ec <USBD_SetConfig+0x150>)
 80075e4:	781b      	ldrb	r3, [r3, #0]
 80075e6:	461a      	mov	r2, r3
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80075ec:	4b3f      	ldr	r3, [pc, #252]	@ (80076ec <USBD_SetConfig+0x150>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	4619      	mov	r1, r3
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7fe ffcd 	bl	8006592 <USBD_SetClassConfig>
 80075f8:	4603      	mov	r3, r0
 80075fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80075fc:	7bfb      	ldrb	r3, [r7, #15]
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d008      	beq.n	8007614 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007602:	6839      	ldr	r1, [r7, #0]
 8007604:	6878      	ldr	r0, [r7, #4]
 8007606:	f000 f962 	bl	80078ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	2202      	movs	r2, #2
 800760e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007612:	e065      	b.n	80076e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007614:	6878      	ldr	r0, [r7, #4]
 8007616:	f000 fa38 	bl	8007a8a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	2203      	movs	r2, #3
 800761e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 8007622:	e05d      	b.n	80076e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 fa30 	bl	8007a8a <USBD_CtlSendStatus>
      break;
 800762a:	e059      	b.n	80076e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800762c:	4b2f      	ldr	r3, [pc, #188]	@ (80076ec <USBD_SetConfig+0x150>)
 800762e:	781b      	ldrb	r3, [r3, #0]
 8007630:	2b00      	cmp	r3, #0
 8007632:	d112      	bne.n	800765a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800763c:	4b2b      	ldr	r3, [pc, #172]	@ (80076ec <USBD_SetConfig+0x150>)
 800763e:	781b      	ldrb	r3, [r3, #0]
 8007640:	461a      	mov	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007646:	4b29      	ldr	r3, [pc, #164]	@ (80076ec <USBD_SetConfig+0x150>)
 8007648:	781b      	ldrb	r3, [r3, #0]
 800764a:	4619      	mov	r1, r3
 800764c:	6878      	ldr	r0, [r7, #4]
 800764e:	f7fe ffbc 	bl	80065ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007652:	6878      	ldr	r0, [r7, #4]
 8007654:	f000 fa19 	bl	8007a8a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007658:	e042      	b.n	80076e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800765a:	4b24      	ldr	r3, [pc, #144]	@ (80076ec <USBD_SetConfig+0x150>)
 800765c:	781b      	ldrb	r3, [r3, #0]
 800765e:	461a      	mov	r2, r3
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	429a      	cmp	r2, r3
 8007666:	d02a      	beq.n	80076be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	685b      	ldr	r3, [r3, #4]
 800766c:	b2db      	uxtb	r3, r3
 800766e:	4619      	mov	r1, r3
 8007670:	6878      	ldr	r0, [r7, #4]
 8007672:	f7fe ffaa 	bl	80065ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007676:	4b1d      	ldr	r3, [pc, #116]	@ (80076ec <USBD_SetConfig+0x150>)
 8007678:	781b      	ldrb	r3, [r3, #0]
 800767a:	461a      	mov	r2, r3
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007680:	4b1a      	ldr	r3, [pc, #104]	@ (80076ec <USBD_SetConfig+0x150>)
 8007682:	781b      	ldrb	r3, [r3, #0]
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7fe ff83 	bl	8006592 <USBD_SetClassConfig>
 800768c:	4603      	mov	r3, r0
 800768e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007690:	7bfb      	ldrb	r3, [r7, #15]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d00f      	beq.n	80076b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007696:	6839      	ldr	r1, [r7, #0]
 8007698:	6878      	ldr	r0, [r7, #4]
 800769a:	f000 f918 	bl	80078ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	685b      	ldr	r3, [r3, #4]
 80076a2:	b2db      	uxtb	r3, r3
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f7fe ff8f 	bl	80065ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	2202      	movs	r2, #2
 80076b0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 80076b4:	e014      	b.n	80076e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 f9e7 	bl	8007a8a <USBD_CtlSendStatus>
      break;
 80076bc:	e010      	b.n	80076e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80076be:	6878      	ldr	r0, [r7, #4]
 80076c0:	f000 f9e3 	bl	8007a8a <USBD_CtlSendStatus>
      break;
 80076c4:	e00c      	b.n	80076e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80076c6:	6839      	ldr	r1, [r7, #0]
 80076c8:	6878      	ldr	r0, [r7, #4]
 80076ca:	f000 f900 	bl	80078ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80076ce:	4b07      	ldr	r3, [pc, #28]	@ (80076ec <USBD_SetConfig+0x150>)
 80076d0:	781b      	ldrb	r3, [r3, #0]
 80076d2:	4619      	mov	r1, r3
 80076d4:	6878      	ldr	r0, [r7, #4]
 80076d6:	f7fe ff78 	bl	80065ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80076da:	2303      	movs	r3, #3
 80076dc:	73fb      	strb	r3, [r7, #15]
      break;
 80076de:	bf00      	nop
  }

  return ret;
 80076e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80076e2:	4618      	mov	r0, r3
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}
 80076ea:	bf00      	nop
 80076ec:	20000310 	.word	0x20000310

080076f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b082      	sub	sp, #8
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	6078      	str	r0, [r7, #4]
 80076f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80076fa:	683b      	ldr	r3, [r7, #0]
 80076fc:	88db      	ldrh	r3, [r3, #6]
 80076fe:	2b01      	cmp	r3, #1
 8007700:	d004      	beq.n	800770c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007702:	6839      	ldr	r1, [r7, #0]
 8007704:	6878      	ldr	r0, [r7, #4]
 8007706:	f000 f8e2 	bl	80078ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800770a:	e023      	b.n	8007754 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	dc02      	bgt.n	800771e <USBD_GetConfig+0x2e>
 8007718:	2b00      	cmp	r3, #0
 800771a:	dc03      	bgt.n	8007724 <USBD_GetConfig+0x34>
 800771c:	e015      	b.n	800774a <USBD_GetConfig+0x5a>
 800771e:	2b03      	cmp	r3, #3
 8007720:	d00b      	beq.n	800773a <USBD_GetConfig+0x4a>
 8007722:	e012      	b.n	800774a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	2200      	movs	r2, #0
 8007728:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	3308      	adds	r3, #8
 800772e:	2201      	movs	r2, #1
 8007730:	4619      	mov	r1, r3
 8007732:	6878      	ldr	r0, [r7, #4]
 8007734:	f000 f948 	bl	80079c8 <USBD_CtlSendData>
        break;
 8007738:	e00c      	b.n	8007754 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	3304      	adds	r3, #4
 800773e:	2201      	movs	r2, #1
 8007740:	4619      	mov	r1, r3
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f000 f940 	bl	80079c8 <USBD_CtlSendData>
        break;
 8007748:	e004      	b.n	8007754 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800774a:	6839      	ldr	r1, [r7, #0]
 800774c:	6878      	ldr	r0, [r7, #4]
 800774e:	f000 f8be 	bl	80078ce <USBD_CtlError>
        break;
 8007752:	bf00      	nop
}
 8007754:	bf00      	nop
 8007756:	3708      	adds	r7, #8
 8007758:	46bd      	mov	sp, r7
 800775a:	bd80      	pop	{r7, pc}

0800775c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b082      	sub	sp, #8
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800776c:	b2db      	uxtb	r3, r3
 800776e:	3b01      	subs	r3, #1
 8007770:	2b02      	cmp	r3, #2
 8007772:	d81e      	bhi.n	80077b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007774:	683b      	ldr	r3, [r7, #0]
 8007776:	88db      	ldrh	r3, [r3, #6]
 8007778:	2b02      	cmp	r3, #2
 800777a:	d004      	beq.n	8007786 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800777c:	6839      	ldr	r1, [r7, #0]
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f8a5 	bl	80078ce <USBD_CtlError>
        break;
 8007784:	e01a      	b.n	80077bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	2201      	movs	r2, #1
 800778a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 8007792:	2b00      	cmp	r3, #0
 8007794:	d005      	beq.n	80077a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	68db      	ldr	r3, [r3, #12]
 800779a:	f043 0202 	orr.w	r2, r3, #2
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	330c      	adds	r3, #12
 80077a6:	2202      	movs	r2, #2
 80077a8:	4619      	mov	r1, r3
 80077aa:	6878      	ldr	r0, [r7, #4]
 80077ac:	f000 f90c 	bl	80079c8 <USBD_CtlSendData>
      break;
 80077b0:	e004      	b.n	80077bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80077b2:	6839      	ldr	r1, [r7, #0]
 80077b4:	6878      	ldr	r0, [r7, #4]
 80077b6:	f000 f88a 	bl	80078ce <USBD_CtlError>
      break;
 80077ba:	bf00      	nop
  }
}
 80077bc:	bf00      	nop
 80077be:	3708      	adds	r7, #8
 80077c0:	46bd      	mov	sp, r7
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
 80077cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80077ce:	683b      	ldr	r3, [r7, #0]
 80077d0:	885b      	ldrh	r3, [r3, #2]
 80077d2:	2b01      	cmp	r3, #1
 80077d4:	d107      	bne.n	80077e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2201      	movs	r2, #1
 80077da:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f000 f953 	bl	8007a8a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80077e4:	e013      	b.n	800780e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80077e6:	683b      	ldr	r3, [r7, #0]
 80077e8:	885b      	ldrh	r3, [r3, #2]
 80077ea:	2b02      	cmp	r3, #2
 80077ec:	d10b      	bne.n	8007806 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	889b      	ldrh	r3, [r3, #4]
 80077f2:	0a1b      	lsrs	r3, r3, #8
 80077f4:	b29b      	uxth	r3, r3
 80077f6:	b2da      	uxtb	r2, r3
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 f943 	bl	8007a8a <USBD_CtlSendStatus>
}
 8007804:	e003      	b.n	800780e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007806:	6839      	ldr	r1, [r7, #0]
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f860 	bl	80078ce <USBD_CtlError>
}
 800780e:	bf00      	nop
 8007810:	3708      	adds	r7, #8
 8007812:	46bd      	mov	sp, r7
 8007814:	bd80      	pop	{r7, pc}

08007816 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007816:	b580      	push	{r7, lr}
 8007818:	b082      	sub	sp, #8
 800781a:	af00      	add	r7, sp, #0
 800781c:	6078      	str	r0, [r7, #4]
 800781e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8007826:	b2db      	uxtb	r3, r3
 8007828:	3b01      	subs	r3, #1
 800782a:	2b02      	cmp	r3, #2
 800782c:	d80b      	bhi.n	8007846 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800782e:	683b      	ldr	r3, [r7, #0]
 8007830:	885b      	ldrh	r3, [r3, #2]
 8007832:	2b01      	cmp	r3, #1
 8007834:	d10c      	bne.n	8007850 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	2200      	movs	r2, #0
 800783a:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800783e:	6878      	ldr	r0, [r7, #4]
 8007840:	f000 f923 	bl	8007a8a <USBD_CtlSendStatus>
      }
      break;
 8007844:	e004      	b.n	8007850 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007846:	6839      	ldr	r1, [r7, #0]
 8007848:	6878      	ldr	r0, [r7, #4]
 800784a:	f000 f840 	bl	80078ce <USBD_CtlError>
      break;
 800784e:	e000      	b.n	8007852 <USBD_ClrFeature+0x3c>
      break;
 8007850:	bf00      	nop
  }
}
 8007852:	bf00      	nop
 8007854:	3708      	adds	r7, #8
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
 8007862:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	781a      	ldrb	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007870:	68fb      	ldr	r3, [r7, #12]
 8007872:	3301      	adds	r3, #1
 8007874:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	781a      	ldrb	r2, [r3, #0]
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3301      	adds	r3, #1
 8007882:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007884:	68f8      	ldr	r0, [r7, #12]
 8007886:	f7ff fa3d 	bl	8006d04 <SWAPBYTE>
 800788a:	4603      	mov	r3, r0
 800788c:	461a      	mov	r2, r3
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	3301      	adds	r3, #1
 8007896:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	3301      	adds	r3, #1
 800789c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7ff fa30 	bl	8006d04 <SWAPBYTE>
 80078a4:	4603      	mov	r3, r0
 80078a6:	461a      	mov	r2, r3
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3301      	adds	r3, #1
 80078b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	3301      	adds	r3, #1
 80078b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80078b8:	68f8      	ldr	r0, [r7, #12]
 80078ba:	f7ff fa23 	bl	8006d04 <SWAPBYTE>
 80078be:	4603      	mov	r3, r0
 80078c0:	461a      	mov	r2, r3
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	80da      	strh	r2, [r3, #6]
}
 80078c6:	bf00      	nop
 80078c8:	3710      	adds	r7, #16
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}

080078ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80078ce:	b580      	push	{r7, lr}
 80078d0:	b082      	sub	sp, #8
 80078d2:	af00      	add	r7, sp, #0
 80078d4:	6078      	str	r0, [r7, #4]
 80078d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80078d8:	2180      	movs	r1, #128	@ 0x80
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fcc4 	bl	8008268 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80078e0:	2100      	movs	r1, #0
 80078e2:	6878      	ldr	r0, [r7, #4]
 80078e4:	f000 fcc0 	bl	8008268 <USBD_LL_StallEP>
}
 80078e8:	bf00      	nop
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b086      	sub	sp, #24
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	60f8      	str	r0, [r7, #12]
 80078f8:	60b9      	str	r1, [r7, #8]
 80078fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80078fc:	2300      	movs	r3, #0
 80078fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d042      	beq.n	800798c <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800790a:	6938      	ldr	r0, [r7, #16]
 800790c:	f000 f842 	bl	8007994 <USBD_GetLen>
 8007910:	4603      	mov	r3, r0
 8007912:	3301      	adds	r3, #1
 8007914:	005b      	lsls	r3, r3, #1
 8007916:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800791a:	d808      	bhi.n	800792e <USBD_GetString+0x3e>
 800791c:	6938      	ldr	r0, [r7, #16]
 800791e:	f000 f839 	bl	8007994 <USBD_GetLen>
 8007922:	4603      	mov	r3, r0
 8007924:	3301      	adds	r3, #1
 8007926:	b29b      	uxth	r3, r3
 8007928:	005b      	lsls	r3, r3, #1
 800792a:	b29a      	uxth	r2, r3
 800792c:	e001      	b.n	8007932 <USBD_GetString+0x42>
 800792e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007936:	7dfb      	ldrb	r3, [r7, #23]
 8007938:	68ba      	ldr	r2, [r7, #8]
 800793a:	4413      	add	r3, r2
 800793c:	687a      	ldr	r2, [r7, #4]
 800793e:	7812      	ldrb	r2, [r2, #0]
 8007940:	701a      	strb	r2, [r3, #0]
  idx++;
 8007942:	7dfb      	ldrb	r3, [r7, #23]
 8007944:	3301      	adds	r3, #1
 8007946:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007948:	7dfb      	ldrb	r3, [r7, #23]
 800794a:	68ba      	ldr	r2, [r7, #8]
 800794c:	4413      	add	r3, r2
 800794e:	2203      	movs	r2, #3
 8007950:	701a      	strb	r2, [r3, #0]
  idx++;
 8007952:	7dfb      	ldrb	r3, [r7, #23]
 8007954:	3301      	adds	r3, #1
 8007956:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007958:	e013      	b.n	8007982 <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800795a:	7dfb      	ldrb	r3, [r7, #23]
 800795c:	68ba      	ldr	r2, [r7, #8]
 800795e:	4413      	add	r3, r2
 8007960:	693a      	ldr	r2, [r7, #16]
 8007962:	7812      	ldrb	r2, [r2, #0]
 8007964:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	3301      	adds	r3, #1
 800796a:	613b      	str	r3, [r7, #16]
    idx++;
 800796c:	7dfb      	ldrb	r3, [r7, #23]
 800796e:	3301      	adds	r3, #1
 8007970:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007972:	7dfb      	ldrb	r3, [r7, #23]
 8007974:	68ba      	ldr	r2, [r7, #8]
 8007976:	4413      	add	r3, r2
 8007978:	2200      	movs	r2, #0
 800797a:	701a      	strb	r2, [r3, #0]
    idx++;
 800797c:	7dfb      	ldrb	r3, [r7, #23]
 800797e:	3301      	adds	r3, #1
 8007980:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007982:	693b      	ldr	r3, [r7, #16]
 8007984:	781b      	ldrb	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d1e7      	bne.n	800795a <USBD_GetString+0x6a>
 800798a:	e000      	b.n	800798e <USBD_GetString+0x9e>
    return;
 800798c:	bf00      	nop
  }
}
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}

08007994 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007994:	b480      	push	{r7}
 8007996:	b085      	sub	sp, #20
 8007998:	af00      	add	r7, sp, #0
 800799a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800799c:	2300      	movs	r3, #0
 800799e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80079a4:	e005      	b.n	80079b2 <USBD_GetLen+0x1e>
  {
    len++;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
 80079a8:	3301      	adds	r3, #1
 80079aa:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80079ac:	68bb      	ldr	r3, [r7, #8]
 80079ae:	3301      	adds	r3, #1
 80079b0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	781b      	ldrb	r3, [r3, #0]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d1f5      	bne.n	80079a6 <USBD_GetLen+0x12>
  }

  return len;
 80079ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr

080079c8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b084      	sub	sp, #16
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2202      	movs	r2, #2
 80079d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	687a      	ldr	r2, [r7, #4]
 80079e0:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	68ba      	ldr	r2, [r7, #8]
 80079e6:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	687a      	ldr	r2, [r7, #4]
 80079ec:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	68ba      	ldr	r2, [r7, #8]
 80079f2:	2100      	movs	r1, #0
 80079f4:	68f8      	ldr	r0, [r7, #12]
 80079f6:	f000 fcc0 	bl	800837a <USBD_LL_Transmit>

  return USBD_OK;
 80079fa:	2300      	movs	r3, #0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3710      	adds	r7, #16
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b084      	sub	sp, #16
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	68ba      	ldr	r2, [r7, #8]
 8007a14:	2100      	movs	r1, #0
 8007a16:	68f8      	ldr	r0, [r7, #12]
 8007a18:	f000 fcaf 	bl	800837a <USBD_LL_Transmit>

  return USBD_OK;
 8007a1c:	2300      	movs	r3, #0
}
 8007a1e:	4618      	mov	r0, r3
 8007a20:	3710      	adds	r7, #16
 8007a22:	46bd      	mov	sp, r7
 8007a24:	bd80      	pop	{r7, pc}

08007a26 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007a26:	b580      	push	{r7, lr}
 8007a28:	b084      	sub	sp, #16
 8007a2a:	af00      	add	r7, sp, #0
 8007a2c:	60f8      	str	r0, [r7, #12]
 8007a2e:	60b9      	str	r1, [r7, #8]
 8007a30:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	2203      	movs	r2, #3
 8007a36:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	687a      	ldr	r2, [r7, #4]
 8007a3e:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	68ba      	ldr	r2, [r7, #8]
 8007a46:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	687a      	ldr	r2, [r7, #4]
 8007a4e:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	68ba      	ldr	r2, [r7, #8]
 8007a56:	2100      	movs	r1, #0
 8007a58:	68f8      	ldr	r0, [r7, #12]
 8007a5a:	f000 fcaf 	bl	80083bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a5e:	2300      	movs	r3, #0
}
 8007a60:	4618      	mov	r0, r3
 8007a62:	3710      	adds	r7, #16
 8007a64:	46bd      	mov	sp, r7
 8007a66:	bd80      	pop	{r7, pc}

08007a68 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007a68:	b580      	push	{r7, lr}
 8007a6a:	b084      	sub	sp, #16
 8007a6c:	af00      	add	r7, sp, #0
 8007a6e:	60f8      	str	r0, [r7, #12]
 8007a70:	60b9      	str	r1, [r7, #8]
 8007a72:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	68ba      	ldr	r2, [r7, #8]
 8007a78:	2100      	movs	r1, #0
 8007a7a:	68f8      	ldr	r0, [r7, #12]
 8007a7c:	f000 fc9e 	bl	80083bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b082      	sub	sp, #8
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2204      	movs	r2, #4
 8007a96:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	2100      	movs	r1, #0
 8007aa0:	6878      	ldr	r0, [r7, #4]
 8007aa2:	f000 fc6a 	bl	800837a <USBD_LL_Transmit>

  return USBD_OK;
 8007aa6:	2300      	movs	r3, #0
}
 8007aa8:	4618      	mov	r0, r3
 8007aaa:	3708      	adds	r7, #8
 8007aac:	46bd      	mov	sp, r7
 8007aae:	bd80      	pop	{r7, pc}

08007ab0 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007ab0:	b580      	push	{r7, lr}
 8007ab2:	b082      	sub	sp, #8
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	2205      	movs	r2, #5
 8007abc:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	2100      	movs	r1, #0
 8007ac6:	6878      	ldr	r0, [r7, #4]
 8007ac8:	f000 fc78 	bl	80083bc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007acc:	2300      	movs	r3, #0
}
 8007ace:	4618      	mov	r0, r3
 8007ad0:	3708      	adds	r7, #8
 8007ad2:	46bd      	mov	sp, r7
 8007ad4:	bd80      	pop	{r7, pc}
	...

08007ad8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007adc:	2200      	movs	r2, #0
 8007ade:	4912      	ldr	r1, [pc, #72]	@ (8007b28 <MX_USB_DEVICE_Init+0x50>)
 8007ae0:	4812      	ldr	r0, [pc, #72]	@ (8007b2c <MX_USB_DEVICE_Init+0x54>)
 8007ae2:	f7fe fcd9 	bl	8006498 <USBD_Init>
 8007ae6:	4603      	mov	r3, r0
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	d001      	beq.n	8007af0 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007aec:	f7f8 ffb6 	bl	8000a5c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8007af0:	490f      	ldr	r1, [pc, #60]	@ (8007b30 <MX_USB_DEVICE_Init+0x58>)
 8007af2:	480e      	ldr	r0, [pc, #56]	@ (8007b2c <MX_USB_DEVICE_Init+0x54>)
 8007af4:	f7fe fd00 	bl	80064f8 <USBD_RegisterClass>
 8007af8:	4603      	mov	r3, r0
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d001      	beq.n	8007b02 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007afe:	f7f8 ffad 	bl	8000a5c <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8007b02:	490c      	ldr	r1, [pc, #48]	@ (8007b34 <MX_USB_DEVICE_Init+0x5c>)
 8007b04:	4809      	ldr	r0, [pc, #36]	@ (8007b2c <MX_USB_DEVICE_Init+0x54>)
 8007b06:	f7fe fc37 	bl	8006378 <USBD_CDC_RegisterInterface>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d001      	beq.n	8007b14 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8007b10:	f7f8 ffa4 	bl	8000a5c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007b14:	4805      	ldr	r0, [pc, #20]	@ (8007b2c <MX_USB_DEVICE_Init+0x54>)
 8007b16:	f7fe fd25 	bl	8006564 <USBD_Start>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d001      	beq.n	8007b24 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8007b20:	f7f8 ff9c 	bl	8000a5c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007b24:	bf00      	nop
 8007b26:	bd80      	pop	{r7, pc}
 8007b28:	200000ac 	.word	0x200000ac
 8007b2c:	20000314 	.word	0x20000314
 8007b30:	20000018 	.word	0x20000018
 8007b34:	20000098 	.word	0x20000098

08007b38 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8007b38:	b580      	push	{r7, lr}
 8007b3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	4905      	ldr	r1, [pc, #20]	@ (8007b54 <CDC_Init_FS+0x1c>)
 8007b40:	4805      	ldr	r0, [pc, #20]	@ (8007b58 <CDC_Init_FS+0x20>)
 8007b42:	f7fe fc33 	bl	80063ac <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8007b46:	4905      	ldr	r1, [pc, #20]	@ (8007b5c <CDC_Init_FS+0x24>)
 8007b48:	4803      	ldr	r0, [pc, #12]	@ (8007b58 <CDC_Init_FS+0x20>)
 8007b4a:	f7fe fc51 	bl	80063f0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8007b4e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8007b50:	4618      	mov	r0, r3
 8007b52:	bd80      	pop	{r7, pc}
 8007b54:	20000df0 	.word	0x20000df0
 8007b58:	20000314 	.word	0x20000314
 8007b5c:	200005f0 	.word	0x200005f0

08007b60 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8007b64:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8007b66:	4618      	mov	r0, r3
 8007b68:	46bd      	mov	sp, r7
 8007b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6e:	4770      	bx	lr

08007b70 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8007b70:	b480      	push	{r7}
 8007b72:	b083      	sub	sp, #12
 8007b74:	af00      	add	r7, sp, #0
 8007b76:	4603      	mov	r3, r0
 8007b78:	6039      	str	r1, [r7, #0]
 8007b7a:	71fb      	strb	r3, [r7, #7]
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8007b80:	79fb      	ldrb	r3, [r7, #7]
 8007b82:	2b23      	cmp	r3, #35	@ 0x23
 8007b84:	d84a      	bhi.n	8007c1c <CDC_Control_FS+0xac>
 8007b86:	a201      	add	r2, pc, #4	@ (adr r2, 8007b8c <CDC_Control_FS+0x1c>)
 8007b88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007b8c:	08007c1d 	.word	0x08007c1d
 8007b90:	08007c1d 	.word	0x08007c1d
 8007b94:	08007c1d 	.word	0x08007c1d
 8007b98:	08007c1d 	.word	0x08007c1d
 8007b9c:	08007c1d 	.word	0x08007c1d
 8007ba0:	08007c1d 	.word	0x08007c1d
 8007ba4:	08007c1d 	.word	0x08007c1d
 8007ba8:	08007c1d 	.word	0x08007c1d
 8007bac:	08007c1d 	.word	0x08007c1d
 8007bb0:	08007c1d 	.word	0x08007c1d
 8007bb4:	08007c1d 	.word	0x08007c1d
 8007bb8:	08007c1d 	.word	0x08007c1d
 8007bbc:	08007c1d 	.word	0x08007c1d
 8007bc0:	08007c1d 	.word	0x08007c1d
 8007bc4:	08007c1d 	.word	0x08007c1d
 8007bc8:	08007c1d 	.word	0x08007c1d
 8007bcc:	08007c1d 	.word	0x08007c1d
 8007bd0:	08007c1d 	.word	0x08007c1d
 8007bd4:	08007c1d 	.word	0x08007c1d
 8007bd8:	08007c1d 	.word	0x08007c1d
 8007bdc:	08007c1d 	.word	0x08007c1d
 8007be0:	08007c1d 	.word	0x08007c1d
 8007be4:	08007c1d 	.word	0x08007c1d
 8007be8:	08007c1d 	.word	0x08007c1d
 8007bec:	08007c1d 	.word	0x08007c1d
 8007bf0:	08007c1d 	.word	0x08007c1d
 8007bf4:	08007c1d 	.word	0x08007c1d
 8007bf8:	08007c1d 	.word	0x08007c1d
 8007bfc:	08007c1d 	.word	0x08007c1d
 8007c00:	08007c1d 	.word	0x08007c1d
 8007c04:	08007c1d 	.word	0x08007c1d
 8007c08:	08007c1d 	.word	0x08007c1d
 8007c0c:	08007c1d 	.word	0x08007c1d
 8007c10:	08007c1d 	.word	0x08007c1d
 8007c14:	08007c1d 	.word	0x08007c1d
 8007c18:	08007c1d 	.word	0x08007c1d
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8007c1c:	bf00      	nop
  }

  return (USBD_OK);
 8007c1e:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	370c      	adds	r7, #12
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr

08007c2c <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8007c2c:	b580      	push	{r7, lr}
 8007c2e:	b082      	sub	sp, #8
 8007c30:	af00      	add	r7, sp, #0
 8007c32:	6078      	str	r0, [r7, #4]
 8007c34:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8007c36:	6879      	ldr	r1, [r7, #4]
 8007c38:	4805      	ldr	r0, [pc, #20]	@ (8007c50 <CDC_Receive_FS+0x24>)
 8007c3a:	f7fe fbd9 	bl	80063f0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8007c3e:	4804      	ldr	r0, [pc, #16]	@ (8007c50 <CDC_Receive_FS+0x24>)
 8007c40:	f7fe fbf4 	bl	800642c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8007c44:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3708      	adds	r7, #8
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop
 8007c50:	20000314 	.word	0x20000314

08007c54 <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8007c54:	b480      	push	{r7}
 8007c56:	b087      	sub	sp, #28
 8007c58:	af00      	add	r7, sp, #0
 8007c5a:	60f8      	str	r0, [r7, #12]
 8007c5c:	60b9      	str	r1, [r7, #8]
 8007c5e:	4613      	mov	r3, r2
 8007c60:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8007c62:	2300      	movs	r3, #0
 8007c64:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 8007c66:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8007c6a:	4618      	mov	r0, r3
 8007c6c:	371c      	adds	r7, #28
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
	...

08007c78 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c78:	b480      	push	{r7}
 8007c7a:	b083      	sub	sp, #12
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	4603      	mov	r3, r0
 8007c80:	6039      	str	r1, [r7, #0]
 8007c82:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007c84:	683b      	ldr	r3, [r7, #0]
 8007c86:	2212      	movs	r2, #18
 8007c88:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8007c8a:	4b03      	ldr	r3, [pc, #12]	@ (8007c98 <USBD_FS_DeviceDescriptor+0x20>)
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	200000c8 	.word	0x200000c8

08007c9c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b083      	sub	sp, #12
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	4603      	mov	r3, r0
 8007ca4:	6039      	str	r1, [r7, #0]
 8007ca6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007ca8:	683b      	ldr	r3, [r7, #0]
 8007caa:	2204      	movs	r2, #4
 8007cac:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007cae:	4b03      	ldr	r3, [pc, #12]	@ (8007cbc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007cb0:	4618      	mov	r0, r3
 8007cb2:	370c      	adds	r7, #12
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cba:	4770      	bx	lr
 8007cbc:	200000dc 	.word	0x200000dc

08007cc0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	4603      	mov	r3, r0
 8007cc8:	6039      	str	r1, [r7, #0]
 8007cca:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007ccc:	79fb      	ldrb	r3, [r7, #7]
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d105      	bne.n	8007cde <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cd2:	683a      	ldr	r2, [r7, #0]
 8007cd4:	4907      	ldr	r1, [pc, #28]	@ (8007cf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007cd6:	4808      	ldr	r0, [pc, #32]	@ (8007cf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007cd8:	f7ff fe0a 	bl	80078f0 <USBD_GetString>
 8007cdc:	e004      	b.n	8007ce8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	4904      	ldr	r1, [pc, #16]	@ (8007cf4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007ce2:	4805      	ldr	r0, [pc, #20]	@ (8007cf8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007ce4:	f7ff fe04 	bl	80078f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007ce8:	4b02      	ldr	r3, [pc, #8]	@ (8007cf4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	3708      	adds	r7, #8
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	bd80      	pop	{r7, pc}
 8007cf2:	bf00      	nop
 8007cf4:	200015f0 	.word	0x200015f0
 8007cf8:	08009408 	.word	0x08009408

08007cfc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b082      	sub	sp, #8
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	4603      	mov	r3, r0
 8007d04:	6039      	str	r1, [r7, #0]
 8007d06:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007d08:	683a      	ldr	r2, [r7, #0]
 8007d0a:	4904      	ldr	r1, [pc, #16]	@ (8007d1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007d0c:	4804      	ldr	r0, [pc, #16]	@ (8007d20 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007d0e:	f7ff fdef 	bl	80078f0 <USBD_GetString>
  return USBD_StrDesc;
 8007d12:	4b02      	ldr	r3, [pc, #8]	@ (8007d1c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007d14:	4618      	mov	r0, r3
 8007d16:	3708      	adds	r7, #8
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	200015f0 	.word	0x200015f0
 8007d20:	08009420 	.word	0x08009420

08007d24 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	4603      	mov	r3, r0
 8007d2c:	6039      	str	r1, [r7, #0]
 8007d2e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007d30:	683b      	ldr	r3, [r7, #0]
 8007d32:	221a      	movs	r2, #26
 8007d34:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007d36:	f000 f843 	bl	8007dc0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007d3a:	4b02      	ldr	r3, [pc, #8]	@ (8007d44 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3708      	adds	r7, #8
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	200000e0 	.word	0x200000e0

08007d48 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d48:	b580      	push	{r7, lr}
 8007d4a:	b082      	sub	sp, #8
 8007d4c:	af00      	add	r7, sp, #0
 8007d4e:	4603      	mov	r3, r0
 8007d50:	6039      	str	r1, [r7, #0]
 8007d52:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007d54:	79fb      	ldrb	r3, [r7, #7]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d105      	bne.n	8007d66 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d5a:	683a      	ldr	r2, [r7, #0]
 8007d5c:	4907      	ldr	r1, [pc, #28]	@ (8007d7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d5e:	4808      	ldr	r0, [pc, #32]	@ (8007d80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d60:	f7ff fdc6 	bl	80078f0 <USBD_GetString>
 8007d64:	e004      	b.n	8007d70 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007d66:	683a      	ldr	r2, [r7, #0]
 8007d68:	4904      	ldr	r1, [pc, #16]	@ (8007d7c <USBD_FS_ConfigStrDescriptor+0x34>)
 8007d6a:	4805      	ldr	r0, [pc, #20]	@ (8007d80 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007d6c:	f7ff fdc0 	bl	80078f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007d70:	4b02      	ldr	r3, [pc, #8]	@ (8007d7c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}
 8007d7a:	bf00      	nop
 8007d7c:	200015f0 	.word	0x200015f0
 8007d80:	08009434 	.word	0x08009434

08007d84 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007d84:	b580      	push	{r7, lr}
 8007d86:	b082      	sub	sp, #8
 8007d88:	af00      	add	r7, sp, #0
 8007d8a:	4603      	mov	r3, r0
 8007d8c:	6039      	str	r1, [r7, #0]
 8007d8e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007d90:	79fb      	ldrb	r3, [r7, #7]
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d105      	bne.n	8007da2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007d96:	683a      	ldr	r2, [r7, #0]
 8007d98:	4907      	ldr	r1, [pc, #28]	@ (8007db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007d9a:	4808      	ldr	r0, [pc, #32]	@ (8007dbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007d9c:	f7ff fda8 	bl	80078f0 <USBD_GetString>
 8007da0:	e004      	b.n	8007dac <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007da2:	683a      	ldr	r2, [r7, #0]
 8007da4:	4904      	ldr	r1, [pc, #16]	@ (8007db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007da6:	4805      	ldr	r0, [pc, #20]	@ (8007dbc <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007da8:	f7ff fda2 	bl	80078f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007dac:	4b02      	ldr	r3, [pc, #8]	@ (8007db8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007dae:	4618      	mov	r0, r3
 8007db0:	3708      	adds	r7, #8
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}
 8007db6:	bf00      	nop
 8007db8:	200015f0 	.word	0x200015f0
 8007dbc:	08009440 	.word	0x08009440

08007dc0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007dc0:	b580      	push	{r7, lr}
 8007dc2:	b084      	sub	sp, #16
 8007dc4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007dc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007e04 <Get_SerialNum+0x44>)
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007dcc:	4b0e      	ldr	r3, [pc, #56]	@ (8007e08 <Get_SerialNum+0x48>)
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007dd2:	4b0e      	ldr	r3, [pc, #56]	@ (8007e0c <Get_SerialNum+0x4c>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007dd8:	68fa      	ldr	r2, [r7, #12]
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4413      	add	r3, r2
 8007dde:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d009      	beq.n	8007dfa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007de6:	2208      	movs	r2, #8
 8007de8:	4909      	ldr	r1, [pc, #36]	@ (8007e10 <Get_SerialNum+0x50>)
 8007dea:	68f8      	ldr	r0, [r7, #12]
 8007dec:	f000 f814 	bl	8007e18 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007df0:	2204      	movs	r2, #4
 8007df2:	4908      	ldr	r1, [pc, #32]	@ (8007e14 <Get_SerialNum+0x54>)
 8007df4:	68b8      	ldr	r0, [r7, #8]
 8007df6:	f000 f80f 	bl	8007e18 <IntToUnicode>
  }
}
 8007dfa:	bf00      	nop
 8007dfc:	3710      	adds	r7, #16
 8007dfe:	46bd      	mov	sp, r7
 8007e00:	bd80      	pop	{r7, pc}
 8007e02:	bf00      	nop
 8007e04:	1fff7a10 	.word	0x1fff7a10
 8007e08:	1fff7a14 	.word	0x1fff7a14
 8007e0c:	1fff7a18 	.word	0x1fff7a18
 8007e10:	200000e2 	.word	0x200000e2
 8007e14:	200000f2 	.word	0x200000f2

08007e18 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007e18:	b480      	push	{r7}
 8007e1a:	b087      	sub	sp, #28
 8007e1c:	af00      	add	r7, sp, #0
 8007e1e:	60f8      	str	r0, [r7, #12]
 8007e20:	60b9      	str	r1, [r7, #8]
 8007e22:	4613      	mov	r3, r2
 8007e24:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007e26:	2300      	movs	r3, #0
 8007e28:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	75fb      	strb	r3, [r7, #23]
 8007e2e:	e027      	b.n	8007e80 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007e30:	68fb      	ldr	r3, [r7, #12]
 8007e32:	0f1b      	lsrs	r3, r3, #28
 8007e34:	2b09      	cmp	r3, #9
 8007e36:	d80b      	bhi.n	8007e50 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	0f1b      	lsrs	r3, r3, #28
 8007e3c:	b2da      	uxtb	r2, r3
 8007e3e:	7dfb      	ldrb	r3, [r7, #23]
 8007e40:	005b      	lsls	r3, r3, #1
 8007e42:	4619      	mov	r1, r3
 8007e44:	68bb      	ldr	r3, [r7, #8]
 8007e46:	440b      	add	r3, r1
 8007e48:	3230      	adds	r2, #48	@ 0x30
 8007e4a:	b2d2      	uxtb	r2, r2
 8007e4c:	701a      	strb	r2, [r3, #0]
 8007e4e:	e00a      	b.n	8007e66 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	0f1b      	lsrs	r3, r3, #28
 8007e54:	b2da      	uxtb	r2, r3
 8007e56:	7dfb      	ldrb	r3, [r7, #23]
 8007e58:	005b      	lsls	r3, r3, #1
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	440b      	add	r3, r1
 8007e60:	3237      	adds	r2, #55	@ 0x37
 8007e62:	b2d2      	uxtb	r2, r2
 8007e64:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	011b      	lsls	r3, r3, #4
 8007e6a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007e6c:	7dfb      	ldrb	r3, [r7, #23]
 8007e6e:	005b      	lsls	r3, r3, #1
 8007e70:	3301      	adds	r3, #1
 8007e72:	68ba      	ldr	r2, [r7, #8]
 8007e74:	4413      	add	r3, r2
 8007e76:	2200      	movs	r2, #0
 8007e78:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007e7a:	7dfb      	ldrb	r3, [r7, #23]
 8007e7c:	3301      	adds	r3, #1
 8007e7e:	75fb      	strb	r3, [r7, #23]
 8007e80:	7dfa      	ldrb	r2, [r7, #23]
 8007e82:	79fb      	ldrb	r3, [r7, #7]
 8007e84:	429a      	cmp	r2, r3
 8007e86:	d3d3      	bcc.n	8007e30 <IntToUnicode+0x18>
  }
}
 8007e88:	bf00      	nop
 8007e8a:	bf00      	nop
 8007e8c:	371c      	adds	r7, #28
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e94:	4770      	bx	lr
	...

08007e98 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007e98:	b580      	push	{r7, lr}
 8007e9a:	b08a      	sub	sp, #40	@ 0x28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ea0:	f107 0314 	add.w	r3, r7, #20
 8007ea4:	2200      	movs	r2, #0
 8007ea6:	601a      	str	r2, [r3, #0]
 8007ea8:	605a      	str	r2, [r3, #4]
 8007eaa:	609a      	str	r2, [r3, #8]
 8007eac:	60da      	str	r2, [r3, #12]
 8007eae:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8007eb8:	d13a      	bne.n	8007f30 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007eba:	2300      	movs	r3, #0
 8007ebc:	613b      	str	r3, [r7, #16]
 8007ebe:	4b1e      	ldr	r3, [pc, #120]	@ (8007f38 <HAL_PCD_MspInit+0xa0>)
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ec2:	4a1d      	ldr	r2, [pc, #116]	@ (8007f38 <HAL_PCD_MspInit+0xa0>)
 8007ec4:	f043 0301 	orr.w	r3, r3, #1
 8007ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8007eca:	4b1b      	ldr	r3, [pc, #108]	@ (8007f38 <HAL_PCD_MspInit+0xa0>)
 8007ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ece:	f003 0301 	and.w	r3, r3, #1
 8007ed2:	613b      	str	r3, [r7, #16]
 8007ed4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007ed6:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8007eda:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007edc:	2302      	movs	r3, #2
 8007ede:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ee0:	2300      	movs	r3, #0
 8007ee2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ee4:	2303      	movs	r3, #3
 8007ee6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007ee8:	230a      	movs	r3, #10
 8007eea:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007eec:	f107 0314 	add.w	r3, r7, #20
 8007ef0:	4619      	mov	r1, r3
 8007ef2:	4812      	ldr	r0, [pc, #72]	@ (8007f3c <HAL_PCD_MspInit+0xa4>)
 8007ef4:	f7f9 f9e4 	bl	80012c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8007f38 <HAL_PCD_MspInit+0xa0>)
 8007efa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007efc:	4a0e      	ldr	r2, [pc, #56]	@ (8007f38 <HAL_PCD_MspInit+0xa0>)
 8007efe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007f02:	6353      	str	r3, [r2, #52]	@ 0x34
 8007f04:	2300      	movs	r3, #0
 8007f06:	60fb      	str	r3, [r7, #12]
 8007f08:	4b0b      	ldr	r3, [pc, #44]	@ (8007f38 <HAL_PCD_MspInit+0xa0>)
 8007f0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f0c:	4a0a      	ldr	r2, [pc, #40]	@ (8007f38 <HAL_PCD_MspInit+0xa0>)
 8007f0e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007f12:	6453      	str	r3, [r2, #68]	@ 0x44
 8007f14:	4b08      	ldr	r3, [pc, #32]	@ (8007f38 <HAL_PCD_MspInit+0xa0>)
 8007f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007f18:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8007f1c:	60fb      	str	r3, [r7, #12]
 8007f1e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007f20:	2200      	movs	r2, #0
 8007f22:	2100      	movs	r1, #0
 8007f24:	2043      	movs	r0, #67	@ 0x43
 8007f26:	f7f9 f994 	bl	8001252 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007f2a:	2043      	movs	r0, #67	@ 0x43
 8007f2c:	f7f9 f9ad 	bl	800128a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007f30:	bf00      	nop
 8007f32:	3728      	adds	r7, #40	@ 0x28
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}
 8007f38:	40023800 	.word	0x40023800
 8007f3c:	40020000 	.word	0x40020000

08007f40 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f40:	b580      	push	{r7, lr}
 8007f42:	b082      	sub	sp, #8
 8007f44:	af00      	add	r7, sp, #0
 8007f46:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8007f54:	4619      	mov	r1, r3
 8007f56:	4610      	mov	r0, r2
 8007f58:	f7fe fb51 	bl	80065fe <USBD_LL_SetupStage>
}
 8007f5c:	bf00      	nop
 8007f5e:	3708      	adds	r7, #8
 8007f60:	46bd      	mov	sp, r7
 8007f62:	bd80      	pop	{r7, pc}

08007f64 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f64:	b580      	push	{r7, lr}
 8007f66:	b082      	sub	sp, #8
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
 8007f6c:	460b      	mov	r3, r1
 8007f6e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007f76:	78fa      	ldrb	r2, [r7, #3]
 8007f78:	6879      	ldr	r1, [r7, #4]
 8007f7a:	4613      	mov	r3, r2
 8007f7c:	00db      	lsls	r3, r3, #3
 8007f7e:	4413      	add	r3, r2
 8007f80:	009b      	lsls	r3, r3, #2
 8007f82:	440b      	add	r3, r1
 8007f84:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8007f88:	681a      	ldr	r2, [r3, #0]
 8007f8a:	78fb      	ldrb	r3, [r7, #3]
 8007f8c:	4619      	mov	r1, r3
 8007f8e:	f7fe fb8b 	bl	80066a8 <USBD_LL_DataOutStage>
}
 8007f92:	bf00      	nop
 8007f94:	3708      	adds	r7, #8
 8007f96:	46bd      	mov	sp, r7
 8007f98:	bd80      	pop	{r7, pc}

08007f9a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007f9a:	b580      	push	{r7, lr}
 8007f9c:	b082      	sub	sp, #8
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	6078      	str	r0, [r7, #4]
 8007fa2:	460b      	mov	r3, r1
 8007fa4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 8007fac:	78fa      	ldrb	r2, [r7, #3]
 8007fae:	6879      	ldr	r1, [r7, #4]
 8007fb0:	4613      	mov	r3, r2
 8007fb2:	00db      	lsls	r3, r3, #3
 8007fb4:	4413      	add	r3, r2
 8007fb6:	009b      	lsls	r3, r3, #2
 8007fb8:	440b      	add	r3, r1
 8007fba:	3320      	adds	r3, #32
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	78fb      	ldrb	r3, [r7, #3]
 8007fc0:	4619      	mov	r1, r3
 8007fc2:	f7fe fc2d 	bl	8006820 <USBD_LL_DataInStage>
}
 8007fc6:	bf00      	nop
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}

08007fce <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fce:	b580      	push	{r7, lr}
 8007fd0:	b082      	sub	sp, #8
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8007fdc:	4618      	mov	r0, r3
 8007fde:	f7fe fd71 	bl	8006ac4 <USBD_LL_SOF>
}
 8007fe2:	bf00      	nop
 8007fe4:	3708      	adds	r7, #8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}

08007fea <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007fea:	b580      	push	{r7, lr}
 8007fec:	b084      	sub	sp, #16
 8007fee:	af00      	add	r7, sp, #0
 8007ff0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007ff2:	2301      	movs	r3, #1
 8007ff4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	79db      	ldrb	r3, [r3, #7]
 8007ffa:	2b02      	cmp	r3, #2
 8007ffc:	d001      	beq.n	8008002 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007ffe:	f7f8 fd2d 	bl	8000a5c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008008:	7bfa      	ldrb	r2, [r7, #15]
 800800a:	4611      	mov	r1, r2
 800800c:	4618      	mov	r0, r3
 800800e:	f7fe fd15 	bl	8006a3c <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008018:	4618      	mov	r0, r3
 800801a:	f7fe fcbc 	bl	8006996 <USBD_LL_Reset>
}
 800801e:	bf00      	nop
 8008020:	3710      	adds	r7, #16
 8008022:	46bd      	mov	sp, r7
 8008024:	bd80      	pop	{r7, pc}
	...

08008028 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
 800802e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008036:	4618      	mov	r0, r3
 8008038:	f7fe fd10 	bl	8006a5c <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	687a      	ldr	r2, [r7, #4]
 8008048:	6812      	ldr	r2, [r2, #0]
 800804a:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800804e:	f043 0301 	orr.w	r3, r3, #1
 8008052:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	7adb      	ldrb	r3, [r3, #11]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d005      	beq.n	8008068 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800805c:	4b04      	ldr	r3, [pc, #16]	@ (8008070 <HAL_PCD_SuspendCallback+0x48>)
 800805e:	691b      	ldr	r3, [r3, #16]
 8008060:	4a03      	ldr	r2, [pc, #12]	@ (8008070 <HAL_PCD_SuspendCallback+0x48>)
 8008062:	f043 0306 	orr.w	r3, r3, #6
 8008066:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8008068:	bf00      	nop
 800806a:	3708      	adds	r7, #8
 800806c:	46bd      	mov	sp, r7
 800806e:	bd80      	pop	{r7, pc}
 8008070:	e000ed00 	.word	0xe000ed00

08008074 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008074:	b580      	push	{r7, lr}
 8008076:	b082      	sub	sp, #8
 8008078:	af00      	add	r7, sp, #0
 800807a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008082:	4618      	mov	r0, r3
 8008084:	f7fe fd06 	bl	8006a94 <USBD_LL_Resume>
}
 8008088:	bf00      	nop
 800808a:	3708      	adds	r7, #8
 800808c:	46bd      	mov	sp, r7
 800808e:	bd80      	pop	{r7, pc}

08008090 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8008090:	b580      	push	{r7, lr}
 8008092:	b082      	sub	sp, #8
 8008094:	af00      	add	r7, sp, #0
 8008096:	6078      	str	r0, [r7, #4]
 8008098:	460b      	mov	r3, r1
 800809a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080a2:	78fa      	ldrb	r2, [r7, #3]
 80080a4:	4611      	mov	r1, r2
 80080a6:	4618      	mov	r0, r3
 80080a8:	f7fe fd5e 	bl	8006b68 <USBD_LL_IsoOUTIncomplete>
}
 80080ac:	bf00      	nop
 80080ae:	3708      	adds	r7, #8
 80080b0:	46bd      	mov	sp, r7
 80080b2:	bd80      	pop	{r7, pc}

080080b4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080b4:	b580      	push	{r7, lr}
 80080b6:	b082      	sub	sp, #8
 80080b8:	af00      	add	r7, sp, #0
 80080ba:	6078      	str	r0, [r7, #4]
 80080bc:	460b      	mov	r3, r1
 80080be:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080c6:	78fa      	ldrb	r2, [r7, #3]
 80080c8:	4611      	mov	r1, r2
 80080ca:	4618      	mov	r0, r3
 80080cc:	f7fe fd1a 	bl	8006b04 <USBD_LL_IsoINIncomplete>
}
 80080d0:	bf00      	nop
 80080d2:	3708      	adds	r7, #8
 80080d4:	46bd      	mov	sp, r7
 80080d6:	bd80      	pop	{r7, pc}

080080d8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080d8:	b580      	push	{r7, lr}
 80080da:	b082      	sub	sp, #8
 80080dc:	af00      	add	r7, sp, #0
 80080de:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 80080e6:	4618      	mov	r0, r3
 80080e8:	f7fe fd70 	bl	8006bcc <USBD_LL_DevConnected>
}
 80080ec:	bf00      	nop
 80080ee:	3708      	adds	r7, #8
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80080f4:	b580      	push	{r7, lr}
 80080f6:	b082      	sub	sp, #8
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 8008102:	4618      	mov	r0, r3
 8008104:	f7fe fd6d 	bl	8006be2 <USBD_LL_DevDisconnected>
}
 8008108:	bf00      	nop
 800810a:	3708      	adds	r7, #8
 800810c:	46bd      	mov	sp, r7
 800810e:	bd80      	pop	{r7, pc}

08008110 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8008110:	b580      	push	{r7, lr}
 8008112:	b082      	sub	sp, #8
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	781b      	ldrb	r3, [r3, #0]
 800811c:	2b00      	cmp	r3, #0
 800811e:	d13c      	bne.n	800819a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8008120:	4a20      	ldr	r2, [pc, #128]	@ (80081a4 <USBD_LL_Init+0x94>)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	4a1e      	ldr	r2, [pc, #120]	@ (80081a4 <USBD_LL_Init+0x94>)
 800812c:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8008130:	4b1c      	ldr	r3, [pc, #112]	@ (80081a4 <USBD_LL_Init+0x94>)
 8008132:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8008136:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8008138:	4b1a      	ldr	r3, [pc, #104]	@ (80081a4 <USBD_LL_Init+0x94>)
 800813a:	2204      	movs	r2, #4
 800813c:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800813e:	4b19      	ldr	r3, [pc, #100]	@ (80081a4 <USBD_LL_Init+0x94>)
 8008140:	2202      	movs	r2, #2
 8008142:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8008144:	4b17      	ldr	r3, [pc, #92]	@ (80081a4 <USBD_LL_Init+0x94>)
 8008146:	2200      	movs	r2, #0
 8008148:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800814a:	4b16      	ldr	r3, [pc, #88]	@ (80081a4 <USBD_LL_Init+0x94>)
 800814c:	2202      	movs	r2, #2
 800814e:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008150:	4b14      	ldr	r3, [pc, #80]	@ (80081a4 <USBD_LL_Init+0x94>)
 8008152:	2200      	movs	r2, #0
 8008154:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8008156:	4b13      	ldr	r3, [pc, #76]	@ (80081a4 <USBD_LL_Init+0x94>)
 8008158:	2200      	movs	r2, #0
 800815a:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800815c:	4b11      	ldr	r3, [pc, #68]	@ (80081a4 <USBD_LL_Init+0x94>)
 800815e:	2200      	movs	r2, #0
 8008160:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8008162:	4b10      	ldr	r3, [pc, #64]	@ (80081a4 <USBD_LL_Init+0x94>)
 8008164:	2200      	movs	r2, #0
 8008166:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8008168:	4b0e      	ldr	r3, [pc, #56]	@ (80081a4 <USBD_LL_Init+0x94>)
 800816a:	2200      	movs	r2, #0
 800816c:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800816e:	480d      	ldr	r0, [pc, #52]	@ (80081a4 <USBD_LL_Init+0x94>)
 8008170:	f7f9 fa5d 	bl	800162e <HAL_PCD_Init>
 8008174:	4603      	mov	r3, r0
 8008176:	2b00      	cmp	r3, #0
 8008178:	d001      	beq.n	800817e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800817a:	f7f8 fc6f 	bl	8000a5c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800817e:	2180      	movs	r1, #128	@ 0x80
 8008180:	4808      	ldr	r0, [pc, #32]	@ (80081a4 <USBD_LL_Init+0x94>)
 8008182:	f7fa fc8a 	bl	8002a9a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8008186:	2240      	movs	r2, #64	@ 0x40
 8008188:	2100      	movs	r1, #0
 800818a:	4806      	ldr	r0, [pc, #24]	@ (80081a4 <USBD_LL_Init+0x94>)
 800818c:	f7fa fc3e 	bl	8002a0c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8008190:	2280      	movs	r2, #128	@ 0x80
 8008192:	2101      	movs	r1, #1
 8008194:	4803      	ldr	r0, [pc, #12]	@ (80081a4 <USBD_LL_Init+0x94>)
 8008196:	f7fa fc39 	bl	8002a0c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800819a:	2300      	movs	r3, #0
}
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}
 80081a4:	200017f0 	.word	0x200017f0

080081a8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b084      	sub	sp, #16
 80081ac:	af00      	add	r7, sp, #0
 80081ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081b0:	2300      	movs	r3, #0
 80081b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081b4:	2300      	movs	r3, #0
 80081b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80081be:	4618      	mov	r0, r3
 80081c0:	f7f9 fb44 	bl	800184c <HAL_PCD_Start>
 80081c4:	4603      	mov	r3, r0
 80081c6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80081c8:	7bfb      	ldrb	r3, [r7, #15]
 80081ca:	4618      	mov	r0, r3
 80081cc:	f000 f942 	bl	8008454 <USBD_Get_USB_Status>
 80081d0:	4603      	mov	r3, r0
 80081d2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80081d4:	7bbb      	ldrb	r3, [r7, #14]
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3710      	adds	r7, #16
 80081da:	46bd      	mov	sp, r7
 80081dc:	bd80      	pop	{r7, pc}

080081de <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80081de:	b580      	push	{r7, lr}
 80081e0:	b084      	sub	sp, #16
 80081e2:	af00      	add	r7, sp, #0
 80081e4:	6078      	str	r0, [r7, #4]
 80081e6:	4608      	mov	r0, r1
 80081e8:	4611      	mov	r1, r2
 80081ea:	461a      	mov	r2, r3
 80081ec:	4603      	mov	r3, r0
 80081ee:	70fb      	strb	r3, [r7, #3]
 80081f0:	460b      	mov	r3, r1
 80081f2:	70bb      	strb	r3, [r7, #2]
 80081f4:	4613      	mov	r3, r2
 80081f6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80081f8:	2300      	movs	r3, #0
 80081fa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008206:	78bb      	ldrb	r3, [r7, #2]
 8008208:	883a      	ldrh	r2, [r7, #0]
 800820a:	78f9      	ldrb	r1, [r7, #3]
 800820c:	f7fa f818 	bl	8002240 <HAL_PCD_EP_Open>
 8008210:	4603      	mov	r3, r0
 8008212:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008214:	7bfb      	ldrb	r3, [r7, #15]
 8008216:	4618      	mov	r0, r3
 8008218:	f000 f91c 	bl	8008454 <USBD_Get_USB_Status>
 800821c:	4603      	mov	r3, r0
 800821e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008220:	7bbb      	ldrb	r3, [r7, #14]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3710      	adds	r7, #16
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}

0800822a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800822a:	b580      	push	{r7, lr}
 800822c:	b084      	sub	sp, #16
 800822e:	af00      	add	r7, sp, #0
 8008230:	6078      	str	r0, [r7, #4]
 8008232:	460b      	mov	r3, r1
 8008234:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008236:	2300      	movs	r3, #0
 8008238:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800823a:	2300      	movs	r3, #0
 800823c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008244:	78fa      	ldrb	r2, [r7, #3]
 8008246:	4611      	mov	r1, r2
 8008248:	4618      	mov	r0, r3
 800824a:	f7fa f863 	bl	8002314 <HAL_PCD_EP_Close>
 800824e:	4603      	mov	r3, r0
 8008250:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008252:	7bfb      	ldrb	r3, [r7, #15]
 8008254:	4618      	mov	r0, r3
 8008256:	f000 f8fd 	bl	8008454 <USBD_Get_USB_Status>
 800825a:	4603      	mov	r3, r0
 800825c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800825e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008260:	4618      	mov	r0, r3
 8008262:	3710      	adds	r7, #16
 8008264:	46bd      	mov	sp, r7
 8008266:	bd80      	pop	{r7, pc}

08008268 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8008268:	b580      	push	{r7, lr}
 800826a:	b084      	sub	sp, #16
 800826c:	af00      	add	r7, sp, #0
 800826e:	6078      	str	r0, [r7, #4]
 8008270:	460b      	mov	r3, r1
 8008272:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008278:	2300      	movs	r3, #0
 800827a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008282:	78fa      	ldrb	r2, [r7, #3]
 8008284:	4611      	mov	r1, r2
 8008286:	4618      	mov	r0, r3
 8008288:	f7fa f91b 	bl	80024c2 <HAL_PCD_EP_SetStall>
 800828c:	4603      	mov	r3, r0
 800828e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008290:	7bfb      	ldrb	r3, [r7, #15]
 8008292:	4618      	mov	r0, r3
 8008294:	f000 f8de 	bl	8008454 <USBD_Get_USB_Status>
 8008298:	4603      	mov	r3, r0
 800829a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800829c:	7bbb      	ldrb	r3, [r7, #14]
}
 800829e:	4618      	mov	r0, r3
 80082a0:	3710      	adds	r7, #16
 80082a2:	46bd      	mov	sp, r7
 80082a4:	bd80      	pop	{r7, pc}

080082a6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082a6:	b580      	push	{r7, lr}
 80082a8:	b084      	sub	sp, #16
 80082aa:	af00      	add	r7, sp, #0
 80082ac:	6078      	str	r0, [r7, #4]
 80082ae:	460b      	mov	r3, r1
 80082b0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80082b2:	2300      	movs	r3, #0
 80082b4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80082b6:	2300      	movs	r3, #0
 80082b8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80082c0:	78fa      	ldrb	r2, [r7, #3]
 80082c2:	4611      	mov	r1, r2
 80082c4:	4618      	mov	r0, r3
 80082c6:	f7fa f95f 	bl	8002588 <HAL_PCD_EP_ClrStall>
 80082ca:	4603      	mov	r3, r0
 80082cc:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	4618      	mov	r0, r3
 80082d2:	f000 f8bf 	bl	8008454 <USBD_Get_USB_Status>
 80082d6:	4603      	mov	r3, r0
 80082d8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80082da:	7bbb      	ldrb	r3, [r7, #14]
}
 80082dc:	4618      	mov	r0, r3
 80082de:	3710      	adds	r7, #16
 80082e0:	46bd      	mov	sp, r7
 80082e2:	bd80      	pop	{r7, pc}

080082e4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80082e4:	b480      	push	{r7}
 80082e6:	b085      	sub	sp, #20
 80082e8:	af00      	add	r7, sp, #0
 80082ea:	6078      	str	r0, [r7, #4]
 80082ec:	460b      	mov	r3, r1
 80082ee:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 80082f6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80082f8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	da0b      	bge.n	8008318 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8008300:	78fb      	ldrb	r3, [r7, #3]
 8008302:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8008306:	68f9      	ldr	r1, [r7, #12]
 8008308:	4613      	mov	r3, r2
 800830a:	00db      	lsls	r3, r3, #3
 800830c:	4413      	add	r3, r2
 800830e:	009b      	lsls	r3, r3, #2
 8008310:	440b      	add	r3, r1
 8008312:	3316      	adds	r3, #22
 8008314:	781b      	ldrb	r3, [r3, #0]
 8008316:	e00b      	b.n	8008330 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8008318:	78fb      	ldrb	r3, [r7, #3]
 800831a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800831e:	68f9      	ldr	r1, [r7, #12]
 8008320:	4613      	mov	r3, r2
 8008322:	00db      	lsls	r3, r3, #3
 8008324:	4413      	add	r3, r2
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	440b      	add	r3, r1
 800832a:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800832e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8008330:	4618      	mov	r0, r3
 8008332:	3714      	adds	r7, #20
 8008334:	46bd      	mov	sp, r7
 8008336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833a:	4770      	bx	lr

0800833c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	460b      	mov	r3, r1
 8008346:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008348:	2300      	movs	r3, #0
 800834a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800834c:	2300      	movs	r3, #0
 800834e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008356:	78fa      	ldrb	r2, [r7, #3]
 8008358:	4611      	mov	r1, r2
 800835a:	4618      	mov	r0, r3
 800835c:	f7f9 ff4c 	bl	80021f8 <HAL_PCD_SetAddress>
 8008360:	4603      	mov	r3, r0
 8008362:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008364:	7bfb      	ldrb	r3, [r7, #15]
 8008366:	4618      	mov	r0, r3
 8008368:	f000 f874 	bl	8008454 <USBD_Get_USB_Status>
 800836c:	4603      	mov	r3, r0
 800836e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008370:	7bbb      	ldrb	r3, [r7, #14]
}
 8008372:	4618      	mov	r0, r3
 8008374:	3710      	adds	r7, #16
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b086      	sub	sp, #24
 800837e:	af00      	add	r7, sp, #0
 8008380:	60f8      	str	r0, [r7, #12]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
 8008386:	460b      	mov	r3, r1
 8008388:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800838a:	2300      	movs	r3, #0
 800838c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800838e:	2300      	movs	r3, #0
 8008390:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 8008398:	7af9      	ldrb	r1, [r7, #11]
 800839a:	683b      	ldr	r3, [r7, #0]
 800839c:	687a      	ldr	r2, [r7, #4]
 800839e:	f7fa f856 	bl	800244e <HAL_PCD_EP_Transmit>
 80083a2:	4603      	mov	r3, r0
 80083a4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083a6:	7dfb      	ldrb	r3, [r7, #23]
 80083a8:	4618      	mov	r0, r3
 80083aa:	f000 f853 	bl	8008454 <USBD_Get_USB_Status>
 80083ae:	4603      	mov	r3, r0
 80083b0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083b2:	7dbb      	ldrb	r3, [r7, #22]
}
 80083b4:	4618      	mov	r0, r3
 80083b6:	3718      	adds	r7, #24
 80083b8:	46bd      	mov	sp, r7
 80083ba:	bd80      	pop	{r7, pc}

080083bc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b086      	sub	sp, #24
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	60f8      	str	r0, [r7, #12]
 80083c4:	607a      	str	r2, [r7, #4]
 80083c6:	603b      	str	r3, [r7, #0]
 80083c8:	460b      	mov	r3, r1
 80083ca:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80083cc:	2300      	movs	r3, #0
 80083ce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80083d0:	2300      	movs	r3, #0
 80083d2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80083d4:	68fb      	ldr	r3, [r7, #12]
 80083d6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 80083da:	7af9      	ldrb	r1, [r7, #11]
 80083dc:	683b      	ldr	r3, [r7, #0]
 80083de:	687a      	ldr	r2, [r7, #4]
 80083e0:	f7f9 ffe2 	bl	80023a8 <HAL_PCD_EP_Receive>
 80083e4:	4603      	mov	r3, r0
 80083e6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80083e8:	7dfb      	ldrb	r3, [r7, #23]
 80083ea:	4618      	mov	r0, r3
 80083ec:	f000 f832 	bl	8008454 <USBD_Get_USB_Status>
 80083f0:	4603      	mov	r3, r0
 80083f2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80083f4:	7dbb      	ldrb	r3, [r7, #22]
}
 80083f6:	4618      	mov	r0, r3
 80083f8:	3718      	adds	r7, #24
 80083fa:	46bd      	mov	sp, r7
 80083fc:	bd80      	pop	{r7, pc}

080083fe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80083fe:	b580      	push	{r7, lr}
 8008400:	b082      	sub	sp, #8
 8008402:	af00      	add	r7, sp, #0
 8008404:	6078      	str	r0, [r7, #4]
 8008406:	460b      	mov	r3, r1
 8008408:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8008410:	78fa      	ldrb	r2, [r7, #3]
 8008412:	4611      	mov	r1, r2
 8008414:	4618      	mov	r0, r3
 8008416:	f7fa f802 	bl	800241e <HAL_PCD_EP_GetRxCount>
 800841a:	4603      	mov	r3, r0
}
 800841c:	4618      	mov	r0, r3
 800841e:	3708      	adds	r7, #8
 8008420:	46bd      	mov	sp, r7
 8008422:	bd80      	pop	{r7, pc}

08008424 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8008424:	b480      	push	{r7}
 8008426:	b083      	sub	sp, #12
 8008428:	af00      	add	r7, sp, #0
 800842a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800842c:	4b03      	ldr	r3, [pc, #12]	@ (800843c <USBD_static_malloc+0x18>)
}
 800842e:	4618      	mov	r0, r3
 8008430:	370c      	adds	r7, #12
 8008432:	46bd      	mov	sp, r7
 8008434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008438:	4770      	bx	lr
 800843a:	bf00      	nop
 800843c:	20001cd4 	.word	0x20001cd4

08008440 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008440:	b480      	push	{r7}
 8008442:	b083      	sub	sp, #12
 8008444:	af00      	add	r7, sp, #0
 8008446:	6078      	str	r0, [r7, #4]

}
 8008448:	bf00      	nop
 800844a:	370c      	adds	r7, #12
 800844c:	46bd      	mov	sp, r7
 800844e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008452:	4770      	bx	lr

08008454 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008454:	b480      	push	{r7}
 8008456:	b085      	sub	sp, #20
 8008458:	af00      	add	r7, sp, #0
 800845a:	4603      	mov	r3, r0
 800845c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800845e:	2300      	movs	r3, #0
 8008460:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008462:	79fb      	ldrb	r3, [r7, #7]
 8008464:	2b03      	cmp	r3, #3
 8008466:	d817      	bhi.n	8008498 <USBD_Get_USB_Status+0x44>
 8008468:	a201      	add	r2, pc, #4	@ (adr r2, 8008470 <USBD_Get_USB_Status+0x1c>)
 800846a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800846e:	bf00      	nop
 8008470:	08008481 	.word	0x08008481
 8008474:	08008487 	.word	0x08008487
 8008478:	0800848d 	.word	0x0800848d
 800847c:	08008493 	.word	0x08008493
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008480:	2300      	movs	r3, #0
 8008482:	73fb      	strb	r3, [r7, #15]
    break;
 8008484:	e00b      	b.n	800849e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008486:	2303      	movs	r3, #3
 8008488:	73fb      	strb	r3, [r7, #15]
    break;
 800848a:	e008      	b.n	800849e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800848c:	2301      	movs	r3, #1
 800848e:	73fb      	strb	r3, [r7, #15]
    break;
 8008490:	e005      	b.n	800849e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008492:	2303      	movs	r3, #3
 8008494:	73fb      	strb	r3, [r7, #15]
    break;
 8008496:	e002      	b.n	800849e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008498:	2303      	movs	r3, #3
 800849a:	73fb      	strb	r3, [r7, #15]
    break;
 800849c:	bf00      	nop
  }
  return usb_status;
 800849e:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a0:	4618      	mov	r0, r3
 80084a2:	3714      	adds	r7, #20
 80084a4:	46bd      	mov	sp, r7
 80084a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084aa:	4770      	bx	lr

080084ac <std>:
 80084ac:	2300      	movs	r3, #0
 80084ae:	b510      	push	{r4, lr}
 80084b0:	4604      	mov	r4, r0
 80084b2:	e9c0 3300 	strd	r3, r3, [r0]
 80084b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80084ba:	6083      	str	r3, [r0, #8]
 80084bc:	8181      	strh	r1, [r0, #12]
 80084be:	6643      	str	r3, [r0, #100]	@ 0x64
 80084c0:	81c2      	strh	r2, [r0, #14]
 80084c2:	6183      	str	r3, [r0, #24]
 80084c4:	4619      	mov	r1, r3
 80084c6:	2208      	movs	r2, #8
 80084c8:	305c      	adds	r0, #92	@ 0x5c
 80084ca:	f000 f9f9 	bl	80088c0 <memset>
 80084ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008504 <std+0x58>)
 80084d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80084d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008508 <std+0x5c>)
 80084d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80084d6:	4b0d      	ldr	r3, [pc, #52]	@ (800850c <std+0x60>)
 80084d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80084da:	4b0d      	ldr	r3, [pc, #52]	@ (8008510 <std+0x64>)
 80084dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80084de:	4b0d      	ldr	r3, [pc, #52]	@ (8008514 <std+0x68>)
 80084e0:	6224      	str	r4, [r4, #32]
 80084e2:	429c      	cmp	r4, r3
 80084e4:	d006      	beq.n	80084f4 <std+0x48>
 80084e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80084ea:	4294      	cmp	r4, r2
 80084ec:	d002      	beq.n	80084f4 <std+0x48>
 80084ee:	33d0      	adds	r3, #208	@ 0xd0
 80084f0:	429c      	cmp	r4, r3
 80084f2:	d105      	bne.n	8008500 <std+0x54>
 80084f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80084f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084fc:	f000 ba58 	b.w	80089b0 <__retarget_lock_init_recursive>
 8008500:	bd10      	pop	{r4, pc}
 8008502:	bf00      	nop
 8008504:	08008711 	.word	0x08008711
 8008508:	08008733 	.word	0x08008733
 800850c:	0800876b 	.word	0x0800876b
 8008510:	0800878f 	.word	0x0800878f
 8008514:	20001ef4 	.word	0x20001ef4

08008518 <stdio_exit_handler>:
 8008518:	4a02      	ldr	r2, [pc, #8]	@ (8008524 <stdio_exit_handler+0xc>)
 800851a:	4903      	ldr	r1, [pc, #12]	@ (8008528 <stdio_exit_handler+0x10>)
 800851c:	4803      	ldr	r0, [pc, #12]	@ (800852c <stdio_exit_handler+0x14>)
 800851e:	f000 b869 	b.w	80085f4 <_fwalk_sglue>
 8008522:	bf00      	nop
 8008524:	200000fc 	.word	0x200000fc
 8008528:	0800924d 	.word	0x0800924d
 800852c:	2000010c 	.word	0x2000010c

08008530 <cleanup_stdio>:
 8008530:	6841      	ldr	r1, [r0, #4]
 8008532:	4b0c      	ldr	r3, [pc, #48]	@ (8008564 <cleanup_stdio+0x34>)
 8008534:	4299      	cmp	r1, r3
 8008536:	b510      	push	{r4, lr}
 8008538:	4604      	mov	r4, r0
 800853a:	d001      	beq.n	8008540 <cleanup_stdio+0x10>
 800853c:	f000 fe86 	bl	800924c <_fflush_r>
 8008540:	68a1      	ldr	r1, [r4, #8]
 8008542:	4b09      	ldr	r3, [pc, #36]	@ (8008568 <cleanup_stdio+0x38>)
 8008544:	4299      	cmp	r1, r3
 8008546:	d002      	beq.n	800854e <cleanup_stdio+0x1e>
 8008548:	4620      	mov	r0, r4
 800854a:	f000 fe7f 	bl	800924c <_fflush_r>
 800854e:	68e1      	ldr	r1, [r4, #12]
 8008550:	4b06      	ldr	r3, [pc, #24]	@ (800856c <cleanup_stdio+0x3c>)
 8008552:	4299      	cmp	r1, r3
 8008554:	d004      	beq.n	8008560 <cleanup_stdio+0x30>
 8008556:	4620      	mov	r0, r4
 8008558:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800855c:	f000 be76 	b.w	800924c <_fflush_r>
 8008560:	bd10      	pop	{r4, pc}
 8008562:	bf00      	nop
 8008564:	20001ef4 	.word	0x20001ef4
 8008568:	20001f5c 	.word	0x20001f5c
 800856c:	20001fc4 	.word	0x20001fc4

08008570 <global_stdio_init.part.0>:
 8008570:	b510      	push	{r4, lr}
 8008572:	4b0b      	ldr	r3, [pc, #44]	@ (80085a0 <global_stdio_init.part.0+0x30>)
 8008574:	4c0b      	ldr	r4, [pc, #44]	@ (80085a4 <global_stdio_init.part.0+0x34>)
 8008576:	4a0c      	ldr	r2, [pc, #48]	@ (80085a8 <global_stdio_init.part.0+0x38>)
 8008578:	601a      	str	r2, [r3, #0]
 800857a:	4620      	mov	r0, r4
 800857c:	2200      	movs	r2, #0
 800857e:	2104      	movs	r1, #4
 8008580:	f7ff ff94 	bl	80084ac <std>
 8008584:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008588:	2201      	movs	r2, #1
 800858a:	2109      	movs	r1, #9
 800858c:	f7ff ff8e 	bl	80084ac <std>
 8008590:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008594:	2202      	movs	r2, #2
 8008596:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800859a:	2112      	movs	r1, #18
 800859c:	f7ff bf86 	b.w	80084ac <std>
 80085a0:	2000202c 	.word	0x2000202c
 80085a4:	20001ef4 	.word	0x20001ef4
 80085a8:	08008519 	.word	0x08008519

080085ac <__sfp_lock_acquire>:
 80085ac:	4801      	ldr	r0, [pc, #4]	@ (80085b4 <__sfp_lock_acquire+0x8>)
 80085ae:	f000 ba00 	b.w	80089b2 <__retarget_lock_acquire_recursive>
 80085b2:	bf00      	nop
 80085b4:	20002035 	.word	0x20002035

080085b8 <__sfp_lock_release>:
 80085b8:	4801      	ldr	r0, [pc, #4]	@ (80085c0 <__sfp_lock_release+0x8>)
 80085ba:	f000 b9fb 	b.w	80089b4 <__retarget_lock_release_recursive>
 80085be:	bf00      	nop
 80085c0:	20002035 	.word	0x20002035

080085c4 <__sinit>:
 80085c4:	b510      	push	{r4, lr}
 80085c6:	4604      	mov	r4, r0
 80085c8:	f7ff fff0 	bl	80085ac <__sfp_lock_acquire>
 80085cc:	6a23      	ldr	r3, [r4, #32]
 80085ce:	b11b      	cbz	r3, 80085d8 <__sinit+0x14>
 80085d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80085d4:	f7ff bff0 	b.w	80085b8 <__sfp_lock_release>
 80085d8:	4b04      	ldr	r3, [pc, #16]	@ (80085ec <__sinit+0x28>)
 80085da:	6223      	str	r3, [r4, #32]
 80085dc:	4b04      	ldr	r3, [pc, #16]	@ (80085f0 <__sinit+0x2c>)
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d1f5      	bne.n	80085d0 <__sinit+0xc>
 80085e4:	f7ff ffc4 	bl	8008570 <global_stdio_init.part.0>
 80085e8:	e7f2      	b.n	80085d0 <__sinit+0xc>
 80085ea:	bf00      	nop
 80085ec:	08008531 	.word	0x08008531
 80085f0:	2000202c 	.word	0x2000202c

080085f4 <_fwalk_sglue>:
 80085f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80085f8:	4607      	mov	r7, r0
 80085fa:	4688      	mov	r8, r1
 80085fc:	4614      	mov	r4, r2
 80085fe:	2600      	movs	r6, #0
 8008600:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008604:	f1b9 0901 	subs.w	r9, r9, #1
 8008608:	d505      	bpl.n	8008616 <_fwalk_sglue+0x22>
 800860a:	6824      	ldr	r4, [r4, #0]
 800860c:	2c00      	cmp	r4, #0
 800860e:	d1f7      	bne.n	8008600 <_fwalk_sglue+0xc>
 8008610:	4630      	mov	r0, r6
 8008612:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008616:	89ab      	ldrh	r3, [r5, #12]
 8008618:	2b01      	cmp	r3, #1
 800861a:	d907      	bls.n	800862c <_fwalk_sglue+0x38>
 800861c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008620:	3301      	adds	r3, #1
 8008622:	d003      	beq.n	800862c <_fwalk_sglue+0x38>
 8008624:	4629      	mov	r1, r5
 8008626:	4638      	mov	r0, r7
 8008628:	47c0      	blx	r8
 800862a:	4306      	orrs	r6, r0
 800862c:	3568      	adds	r5, #104	@ 0x68
 800862e:	e7e9      	b.n	8008604 <_fwalk_sglue+0x10>

08008630 <iprintf>:
 8008630:	b40f      	push	{r0, r1, r2, r3}
 8008632:	b507      	push	{r0, r1, r2, lr}
 8008634:	4906      	ldr	r1, [pc, #24]	@ (8008650 <iprintf+0x20>)
 8008636:	ab04      	add	r3, sp, #16
 8008638:	6808      	ldr	r0, [r1, #0]
 800863a:	f853 2b04 	ldr.w	r2, [r3], #4
 800863e:	6881      	ldr	r1, [r0, #8]
 8008640:	9301      	str	r3, [sp, #4]
 8008642:	f000 fadb 	bl	8008bfc <_vfiprintf_r>
 8008646:	b003      	add	sp, #12
 8008648:	f85d eb04 	ldr.w	lr, [sp], #4
 800864c:	b004      	add	sp, #16
 800864e:	4770      	bx	lr
 8008650:	20000108 	.word	0x20000108

08008654 <_puts_r>:
 8008654:	6a03      	ldr	r3, [r0, #32]
 8008656:	b570      	push	{r4, r5, r6, lr}
 8008658:	6884      	ldr	r4, [r0, #8]
 800865a:	4605      	mov	r5, r0
 800865c:	460e      	mov	r6, r1
 800865e:	b90b      	cbnz	r3, 8008664 <_puts_r+0x10>
 8008660:	f7ff ffb0 	bl	80085c4 <__sinit>
 8008664:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008666:	07db      	lsls	r3, r3, #31
 8008668:	d405      	bmi.n	8008676 <_puts_r+0x22>
 800866a:	89a3      	ldrh	r3, [r4, #12]
 800866c:	0598      	lsls	r0, r3, #22
 800866e:	d402      	bmi.n	8008676 <_puts_r+0x22>
 8008670:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008672:	f000 f99e 	bl	80089b2 <__retarget_lock_acquire_recursive>
 8008676:	89a3      	ldrh	r3, [r4, #12]
 8008678:	0719      	lsls	r1, r3, #28
 800867a:	d502      	bpl.n	8008682 <_puts_r+0x2e>
 800867c:	6923      	ldr	r3, [r4, #16]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d135      	bne.n	80086ee <_puts_r+0x9a>
 8008682:	4621      	mov	r1, r4
 8008684:	4628      	mov	r0, r5
 8008686:	f000 f8c5 	bl	8008814 <__swsetup_r>
 800868a:	b380      	cbz	r0, 80086ee <_puts_r+0x9a>
 800868c:	f04f 35ff 	mov.w	r5, #4294967295
 8008690:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008692:	07da      	lsls	r2, r3, #31
 8008694:	d405      	bmi.n	80086a2 <_puts_r+0x4e>
 8008696:	89a3      	ldrh	r3, [r4, #12]
 8008698:	059b      	lsls	r3, r3, #22
 800869a:	d402      	bmi.n	80086a2 <_puts_r+0x4e>
 800869c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800869e:	f000 f989 	bl	80089b4 <__retarget_lock_release_recursive>
 80086a2:	4628      	mov	r0, r5
 80086a4:	bd70      	pop	{r4, r5, r6, pc}
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	da04      	bge.n	80086b4 <_puts_r+0x60>
 80086aa:	69a2      	ldr	r2, [r4, #24]
 80086ac:	429a      	cmp	r2, r3
 80086ae:	dc17      	bgt.n	80086e0 <_puts_r+0x8c>
 80086b0:	290a      	cmp	r1, #10
 80086b2:	d015      	beq.n	80086e0 <_puts_r+0x8c>
 80086b4:	6823      	ldr	r3, [r4, #0]
 80086b6:	1c5a      	adds	r2, r3, #1
 80086b8:	6022      	str	r2, [r4, #0]
 80086ba:	7019      	strb	r1, [r3, #0]
 80086bc:	68a3      	ldr	r3, [r4, #8]
 80086be:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80086c2:	3b01      	subs	r3, #1
 80086c4:	60a3      	str	r3, [r4, #8]
 80086c6:	2900      	cmp	r1, #0
 80086c8:	d1ed      	bne.n	80086a6 <_puts_r+0x52>
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	da11      	bge.n	80086f2 <_puts_r+0x9e>
 80086ce:	4622      	mov	r2, r4
 80086d0:	210a      	movs	r1, #10
 80086d2:	4628      	mov	r0, r5
 80086d4:	f000 f85f 	bl	8008796 <__swbuf_r>
 80086d8:	3001      	adds	r0, #1
 80086da:	d0d7      	beq.n	800868c <_puts_r+0x38>
 80086dc:	250a      	movs	r5, #10
 80086de:	e7d7      	b.n	8008690 <_puts_r+0x3c>
 80086e0:	4622      	mov	r2, r4
 80086e2:	4628      	mov	r0, r5
 80086e4:	f000 f857 	bl	8008796 <__swbuf_r>
 80086e8:	3001      	adds	r0, #1
 80086ea:	d1e7      	bne.n	80086bc <_puts_r+0x68>
 80086ec:	e7ce      	b.n	800868c <_puts_r+0x38>
 80086ee:	3e01      	subs	r6, #1
 80086f0:	e7e4      	b.n	80086bc <_puts_r+0x68>
 80086f2:	6823      	ldr	r3, [r4, #0]
 80086f4:	1c5a      	adds	r2, r3, #1
 80086f6:	6022      	str	r2, [r4, #0]
 80086f8:	220a      	movs	r2, #10
 80086fa:	701a      	strb	r2, [r3, #0]
 80086fc:	e7ee      	b.n	80086dc <_puts_r+0x88>
	...

08008700 <puts>:
 8008700:	4b02      	ldr	r3, [pc, #8]	@ (800870c <puts+0xc>)
 8008702:	4601      	mov	r1, r0
 8008704:	6818      	ldr	r0, [r3, #0]
 8008706:	f7ff bfa5 	b.w	8008654 <_puts_r>
 800870a:	bf00      	nop
 800870c:	20000108 	.word	0x20000108

08008710 <__sread>:
 8008710:	b510      	push	{r4, lr}
 8008712:	460c      	mov	r4, r1
 8008714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008718:	f000 f8fc 	bl	8008914 <_read_r>
 800871c:	2800      	cmp	r0, #0
 800871e:	bfab      	itete	ge
 8008720:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008722:	89a3      	ldrhlt	r3, [r4, #12]
 8008724:	181b      	addge	r3, r3, r0
 8008726:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800872a:	bfac      	ite	ge
 800872c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800872e:	81a3      	strhlt	r3, [r4, #12]
 8008730:	bd10      	pop	{r4, pc}

08008732 <__swrite>:
 8008732:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008736:	461f      	mov	r7, r3
 8008738:	898b      	ldrh	r3, [r1, #12]
 800873a:	05db      	lsls	r3, r3, #23
 800873c:	4605      	mov	r5, r0
 800873e:	460c      	mov	r4, r1
 8008740:	4616      	mov	r6, r2
 8008742:	d505      	bpl.n	8008750 <__swrite+0x1e>
 8008744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008748:	2302      	movs	r3, #2
 800874a:	2200      	movs	r2, #0
 800874c:	f000 f8d0 	bl	80088f0 <_lseek_r>
 8008750:	89a3      	ldrh	r3, [r4, #12]
 8008752:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008756:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800875a:	81a3      	strh	r3, [r4, #12]
 800875c:	4632      	mov	r2, r6
 800875e:	463b      	mov	r3, r7
 8008760:	4628      	mov	r0, r5
 8008762:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008766:	f000 b8e7 	b.w	8008938 <_write_r>

0800876a <__sseek>:
 800876a:	b510      	push	{r4, lr}
 800876c:	460c      	mov	r4, r1
 800876e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008772:	f000 f8bd 	bl	80088f0 <_lseek_r>
 8008776:	1c43      	adds	r3, r0, #1
 8008778:	89a3      	ldrh	r3, [r4, #12]
 800877a:	bf15      	itete	ne
 800877c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800877e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008782:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008786:	81a3      	strheq	r3, [r4, #12]
 8008788:	bf18      	it	ne
 800878a:	81a3      	strhne	r3, [r4, #12]
 800878c:	bd10      	pop	{r4, pc}

0800878e <__sclose>:
 800878e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008792:	f000 b89d 	b.w	80088d0 <_close_r>

08008796 <__swbuf_r>:
 8008796:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008798:	460e      	mov	r6, r1
 800879a:	4614      	mov	r4, r2
 800879c:	4605      	mov	r5, r0
 800879e:	b118      	cbz	r0, 80087a8 <__swbuf_r+0x12>
 80087a0:	6a03      	ldr	r3, [r0, #32]
 80087a2:	b90b      	cbnz	r3, 80087a8 <__swbuf_r+0x12>
 80087a4:	f7ff ff0e 	bl	80085c4 <__sinit>
 80087a8:	69a3      	ldr	r3, [r4, #24]
 80087aa:	60a3      	str	r3, [r4, #8]
 80087ac:	89a3      	ldrh	r3, [r4, #12]
 80087ae:	071a      	lsls	r2, r3, #28
 80087b0:	d501      	bpl.n	80087b6 <__swbuf_r+0x20>
 80087b2:	6923      	ldr	r3, [r4, #16]
 80087b4:	b943      	cbnz	r3, 80087c8 <__swbuf_r+0x32>
 80087b6:	4621      	mov	r1, r4
 80087b8:	4628      	mov	r0, r5
 80087ba:	f000 f82b 	bl	8008814 <__swsetup_r>
 80087be:	b118      	cbz	r0, 80087c8 <__swbuf_r+0x32>
 80087c0:	f04f 37ff 	mov.w	r7, #4294967295
 80087c4:	4638      	mov	r0, r7
 80087c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087c8:	6823      	ldr	r3, [r4, #0]
 80087ca:	6922      	ldr	r2, [r4, #16]
 80087cc:	1a98      	subs	r0, r3, r2
 80087ce:	6963      	ldr	r3, [r4, #20]
 80087d0:	b2f6      	uxtb	r6, r6
 80087d2:	4283      	cmp	r3, r0
 80087d4:	4637      	mov	r7, r6
 80087d6:	dc05      	bgt.n	80087e4 <__swbuf_r+0x4e>
 80087d8:	4621      	mov	r1, r4
 80087da:	4628      	mov	r0, r5
 80087dc:	f000 fd36 	bl	800924c <_fflush_r>
 80087e0:	2800      	cmp	r0, #0
 80087e2:	d1ed      	bne.n	80087c0 <__swbuf_r+0x2a>
 80087e4:	68a3      	ldr	r3, [r4, #8]
 80087e6:	3b01      	subs	r3, #1
 80087e8:	60a3      	str	r3, [r4, #8]
 80087ea:	6823      	ldr	r3, [r4, #0]
 80087ec:	1c5a      	adds	r2, r3, #1
 80087ee:	6022      	str	r2, [r4, #0]
 80087f0:	701e      	strb	r6, [r3, #0]
 80087f2:	6962      	ldr	r2, [r4, #20]
 80087f4:	1c43      	adds	r3, r0, #1
 80087f6:	429a      	cmp	r2, r3
 80087f8:	d004      	beq.n	8008804 <__swbuf_r+0x6e>
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	07db      	lsls	r3, r3, #31
 80087fe:	d5e1      	bpl.n	80087c4 <__swbuf_r+0x2e>
 8008800:	2e0a      	cmp	r6, #10
 8008802:	d1df      	bne.n	80087c4 <__swbuf_r+0x2e>
 8008804:	4621      	mov	r1, r4
 8008806:	4628      	mov	r0, r5
 8008808:	f000 fd20 	bl	800924c <_fflush_r>
 800880c:	2800      	cmp	r0, #0
 800880e:	d0d9      	beq.n	80087c4 <__swbuf_r+0x2e>
 8008810:	e7d6      	b.n	80087c0 <__swbuf_r+0x2a>
	...

08008814 <__swsetup_r>:
 8008814:	b538      	push	{r3, r4, r5, lr}
 8008816:	4b29      	ldr	r3, [pc, #164]	@ (80088bc <__swsetup_r+0xa8>)
 8008818:	4605      	mov	r5, r0
 800881a:	6818      	ldr	r0, [r3, #0]
 800881c:	460c      	mov	r4, r1
 800881e:	b118      	cbz	r0, 8008828 <__swsetup_r+0x14>
 8008820:	6a03      	ldr	r3, [r0, #32]
 8008822:	b90b      	cbnz	r3, 8008828 <__swsetup_r+0x14>
 8008824:	f7ff fece 	bl	80085c4 <__sinit>
 8008828:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800882c:	0719      	lsls	r1, r3, #28
 800882e:	d422      	bmi.n	8008876 <__swsetup_r+0x62>
 8008830:	06da      	lsls	r2, r3, #27
 8008832:	d407      	bmi.n	8008844 <__swsetup_r+0x30>
 8008834:	2209      	movs	r2, #9
 8008836:	602a      	str	r2, [r5, #0]
 8008838:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800883c:	81a3      	strh	r3, [r4, #12]
 800883e:	f04f 30ff 	mov.w	r0, #4294967295
 8008842:	e033      	b.n	80088ac <__swsetup_r+0x98>
 8008844:	0758      	lsls	r0, r3, #29
 8008846:	d512      	bpl.n	800886e <__swsetup_r+0x5a>
 8008848:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800884a:	b141      	cbz	r1, 800885e <__swsetup_r+0x4a>
 800884c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008850:	4299      	cmp	r1, r3
 8008852:	d002      	beq.n	800885a <__swsetup_r+0x46>
 8008854:	4628      	mov	r0, r5
 8008856:	f000 f8af 	bl	80089b8 <_free_r>
 800885a:	2300      	movs	r3, #0
 800885c:	6363      	str	r3, [r4, #52]	@ 0x34
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	2300      	movs	r3, #0
 8008868:	6063      	str	r3, [r4, #4]
 800886a:	6923      	ldr	r3, [r4, #16]
 800886c:	6023      	str	r3, [r4, #0]
 800886e:	89a3      	ldrh	r3, [r4, #12]
 8008870:	f043 0308 	orr.w	r3, r3, #8
 8008874:	81a3      	strh	r3, [r4, #12]
 8008876:	6923      	ldr	r3, [r4, #16]
 8008878:	b94b      	cbnz	r3, 800888e <__swsetup_r+0x7a>
 800887a:	89a3      	ldrh	r3, [r4, #12]
 800887c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008880:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008884:	d003      	beq.n	800888e <__swsetup_r+0x7a>
 8008886:	4621      	mov	r1, r4
 8008888:	4628      	mov	r0, r5
 800888a:	f000 fd2d 	bl	80092e8 <__smakebuf_r>
 800888e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008892:	f013 0201 	ands.w	r2, r3, #1
 8008896:	d00a      	beq.n	80088ae <__swsetup_r+0x9a>
 8008898:	2200      	movs	r2, #0
 800889a:	60a2      	str	r2, [r4, #8]
 800889c:	6962      	ldr	r2, [r4, #20]
 800889e:	4252      	negs	r2, r2
 80088a0:	61a2      	str	r2, [r4, #24]
 80088a2:	6922      	ldr	r2, [r4, #16]
 80088a4:	b942      	cbnz	r2, 80088b8 <__swsetup_r+0xa4>
 80088a6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80088aa:	d1c5      	bne.n	8008838 <__swsetup_r+0x24>
 80088ac:	bd38      	pop	{r3, r4, r5, pc}
 80088ae:	0799      	lsls	r1, r3, #30
 80088b0:	bf58      	it	pl
 80088b2:	6962      	ldrpl	r2, [r4, #20]
 80088b4:	60a2      	str	r2, [r4, #8]
 80088b6:	e7f4      	b.n	80088a2 <__swsetup_r+0x8e>
 80088b8:	2000      	movs	r0, #0
 80088ba:	e7f7      	b.n	80088ac <__swsetup_r+0x98>
 80088bc:	20000108 	.word	0x20000108

080088c0 <memset>:
 80088c0:	4402      	add	r2, r0
 80088c2:	4603      	mov	r3, r0
 80088c4:	4293      	cmp	r3, r2
 80088c6:	d100      	bne.n	80088ca <memset+0xa>
 80088c8:	4770      	bx	lr
 80088ca:	f803 1b01 	strb.w	r1, [r3], #1
 80088ce:	e7f9      	b.n	80088c4 <memset+0x4>

080088d0 <_close_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	4d06      	ldr	r5, [pc, #24]	@ (80088ec <_close_r+0x1c>)
 80088d4:	2300      	movs	r3, #0
 80088d6:	4604      	mov	r4, r0
 80088d8:	4608      	mov	r0, r1
 80088da:	602b      	str	r3, [r5, #0]
 80088dc:	f7f8 faa1 	bl	8000e22 <_close>
 80088e0:	1c43      	adds	r3, r0, #1
 80088e2:	d102      	bne.n	80088ea <_close_r+0x1a>
 80088e4:	682b      	ldr	r3, [r5, #0]
 80088e6:	b103      	cbz	r3, 80088ea <_close_r+0x1a>
 80088e8:	6023      	str	r3, [r4, #0]
 80088ea:	bd38      	pop	{r3, r4, r5, pc}
 80088ec:	20002030 	.word	0x20002030

080088f0 <_lseek_r>:
 80088f0:	b538      	push	{r3, r4, r5, lr}
 80088f2:	4d07      	ldr	r5, [pc, #28]	@ (8008910 <_lseek_r+0x20>)
 80088f4:	4604      	mov	r4, r0
 80088f6:	4608      	mov	r0, r1
 80088f8:	4611      	mov	r1, r2
 80088fa:	2200      	movs	r2, #0
 80088fc:	602a      	str	r2, [r5, #0]
 80088fe:	461a      	mov	r2, r3
 8008900:	f7f8 fab6 	bl	8000e70 <_lseek>
 8008904:	1c43      	adds	r3, r0, #1
 8008906:	d102      	bne.n	800890e <_lseek_r+0x1e>
 8008908:	682b      	ldr	r3, [r5, #0]
 800890a:	b103      	cbz	r3, 800890e <_lseek_r+0x1e>
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	bd38      	pop	{r3, r4, r5, pc}
 8008910:	20002030 	.word	0x20002030

08008914 <_read_r>:
 8008914:	b538      	push	{r3, r4, r5, lr}
 8008916:	4d07      	ldr	r5, [pc, #28]	@ (8008934 <_read_r+0x20>)
 8008918:	4604      	mov	r4, r0
 800891a:	4608      	mov	r0, r1
 800891c:	4611      	mov	r1, r2
 800891e:	2200      	movs	r2, #0
 8008920:	602a      	str	r2, [r5, #0]
 8008922:	461a      	mov	r2, r3
 8008924:	f7f8 fa44 	bl	8000db0 <_read>
 8008928:	1c43      	adds	r3, r0, #1
 800892a:	d102      	bne.n	8008932 <_read_r+0x1e>
 800892c:	682b      	ldr	r3, [r5, #0]
 800892e:	b103      	cbz	r3, 8008932 <_read_r+0x1e>
 8008930:	6023      	str	r3, [r4, #0]
 8008932:	bd38      	pop	{r3, r4, r5, pc}
 8008934:	20002030 	.word	0x20002030

08008938 <_write_r>:
 8008938:	b538      	push	{r3, r4, r5, lr}
 800893a:	4d07      	ldr	r5, [pc, #28]	@ (8008958 <_write_r+0x20>)
 800893c:	4604      	mov	r4, r0
 800893e:	4608      	mov	r0, r1
 8008940:	4611      	mov	r1, r2
 8008942:	2200      	movs	r2, #0
 8008944:	602a      	str	r2, [r5, #0]
 8008946:	461a      	mov	r2, r3
 8008948:	f7f8 fa4f 	bl	8000dea <_write>
 800894c:	1c43      	adds	r3, r0, #1
 800894e:	d102      	bne.n	8008956 <_write_r+0x1e>
 8008950:	682b      	ldr	r3, [r5, #0]
 8008952:	b103      	cbz	r3, 8008956 <_write_r+0x1e>
 8008954:	6023      	str	r3, [r4, #0]
 8008956:	bd38      	pop	{r3, r4, r5, pc}
 8008958:	20002030 	.word	0x20002030

0800895c <__errno>:
 800895c:	4b01      	ldr	r3, [pc, #4]	@ (8008964 <__errno+0x8>)
 800895e:	6818      	ldr	r0, [r3, #0]
 8008960:	4770      	bx	lr
 8008962:	bf00      	nop
 8008964:	20000108 	.word	0x20000108

08008968 <__libc_init_array>:
 8008968:	b570      	push	{r4, r5, r6, lr}
 800896a:	4d0d      	ldr	r5, [pc, #52]	@ (80089a0 <__libc_init_array+0x38>)
 800896c:	4c0d      	ldr	r4, [pc, #52]	@ (80089a4 <__libc_init_array+0x3c>)
 800896e:	1b64      	subs	r4, r4, r5
 8008970:	10a4      	asrs	r4, r4, #2
 8008972:	2600      	movs	r6, #0
 8008974:	42a6      	cmp	r6, r4
 8008976:	d109      	bne.n	800898c <__libc_init_array+0x24>
 8008978:	4d0b      	ldr	r5, [pc, #44]	@ (80089a8 <__libc_init_array+0x40>)
 800897a:	4c0c      	ldr	r4, [pc, #48]	@ (80089ac <__libc_init_array+0x44>)
 800897c:	f000 fd22 	bl	80093c4 <_init>
 8008980:	1b64      	subs	r4, r4, r5
 8008982:	10a4      	asrs	r4, r4, #2
 8008984:	2600      	movs	r6, #0
 8008986:	42a6      	cmp	r6, r4
 8008988:	d105      	bne.n	8008996 <__libc_init_array+0x2e>
 800898a:	bd70      	pop	{r4, r5, r6, pc}
 800898c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008990:	4798      	blx	r3
 8008992:	3601      	adds	r6, #1
 8008994:	e7ee      	b.n	8008974 <__libc_init_array+0xc>
 8008996:	f855 3b04 	ldr.w	r3, [r5], #4
 800899a:	4798      	blx	r3
 800899c:	3601      	adds	r6, #1
 800899e:	e7f2      	b.n	8008986 <__libc_init_array+0x1e>
 80089a0:	080094a4 	.word	0x080094a4
 80089a4:	080094a4 	.word	0x080094a4
 80089a8:	080094a4 	.word	0x080094a4
 80089ac:	080094a8 	.word	0x080094a8

080089b0 <__retarget_lock_init_recursive>:
 80089b0:	4770      	bx	lr

080089b2 <__retarget_lock_acquire_recursive>:
 80089b2:	4770      	bx	lr

080089b4 <__retarget_lock_release_recursive>:
 80089b4:	4770      	bx	lr
	...

080089b8 <_free_r>:
 80089b8:	b538      	push	{r3, r4, r5, lr}
 80089ba:	4605      	mov	r5, r0
 80089bc:	2900      	cmp	r1, #0
 80089be:	d041      	beq.n	8008a44 <_free_r+0x8c>
 80089c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089c4:	1f0c      	subs	r4, r1, #4
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bfb8      	it	lt
 80089ca:	18e4      	addlt	r4, r4, r3
 80089cc:	f000 f8e0 	bl	8008b90 <__malloc_lock>
 80089d0:	4a1d      	ldr	r2, [pc, #116]	@ (8008a48 <_free_r+0x90>)
 80089d2:	6813      	ldr	r3, [r2, #0]
 80089d4:	b933      	cbnz	r3, 80089e4 <_free_r+0x2c>
 80089d6:	6063      	str	r3, [r4, #4]
 80089d8:	6014      	str	r4, [r2, #0]
 80089da:	4628      	mov	r0, r5
 80089dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089e0:	f000 b8dc 	b.w	8008b9c <__malloc_unlock>
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	d908      	bls.n	80089fa <_free_r+0x42>
 80089e8:	6820      	ldr	r0, [r4, #0]
 80089ea:	1821      	adds	r1, r4, r0
 80089ec:	428b      	cmp	r3, r1
 80089ee:	bf01      	itttt	eq
 80089f0:	6819      	ldreq	r1, [r3, #0]
 80089f2:	685b      	ldreq	r3, [r3, #4]
 80089f4:	1809      	addeq	r1, r1, r0
 80089f6:	6021      	streq	r1, [r4, #0]
 80089f8:	e7ed      	b.n	80089d6 <_free_r+0x1e>
 80089fa:	461a      	mov	r2, r3
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	b10b      	cbz	r3, 8008a04 <_free_r+0x4c>
 8008a00:	42a3      	cmp	r3, r4
 8008a02:	d9fa      	bls.n	80089fa <_free_r+0x42>
 8008a04:	6811      	ldr	r1, [r2, #0]
 8008a06:	1850      	adds	r0, r2, r1
 8008a08:	42a0      	cmp	r0, r4
 8008a0a:	d10b      	bne.n	8008a24 <_free_r+0x6c>
 8008a0c:	6820      	ldr	r0, [r4, #0]
 8008a0e:	4401      	add	r1, r0
 8008a10:	1850      	adds	r0, r2, r1
 8008a12:	4283      	cmp	r3, r0
 8008a14:	6011      	str	r1, [r2, #0]
 8008a16:	d1e0      	bne.n	80089da <_free_r+0x22>
 8008a18:	6818      	ldr	r0, [r3, #0]
 8008a1a:	685b      	ldr	r3, [r3, #4]
 8008a1c:	6053      	str	r3, [r2, #4]
 8008a1e:	4408      	add	r0, r1
 8008a20:	6010      	str	r0, [r2, #0]
 8008a22:	e7da      	b.n	80089da <_free_r+0x22>
 8008a24:	d902      	bls.n	8008a2c <_free_r+0x74>
 8008a26:	230c      	movs	r3, #12
 8008a28:	602b      	str	r3, [r5, #0]
 8008a2a:	e7d6      	b.n	80089da <_free_r+0x22>
 8008a2c:	6820      	ldr	r0, [r4, #0]
 8008a2e:	1821      	adds	r1, r4, r0
 8008a30:	428b      	cmp	r3, r1
 8008a32:	bf04      	itt	eq
 8008a34:	6819      	ldreq	r1, [r3, #0]
 8008a36:	685b      	ldreq	r3, [r3, #4]
 8008a38:	6063      	str	r3, [r4, #4]
 8008a3a:	bf04      	itt	eq
 8008a3c:	1809      	addeq	r1, r1, r0
 8008a3e:	6021      	streq	r1, [r4, #0]
 8008a40:	6054      	str	r4, [r2, #4]
 8008a42:	e7ca      	b.n	80089da <_free_r+0x22>
 8008a44:	bd38      	pop	{r3, r4, r5, pc}
 8008a46:	bf00      	nop
 8008a48:	2000203c 	.word	0x2000203c

08008a4c <sbrk_aligned>:
 8008a4c:	b570      	push	{r4, r5, r6, lr}
 8008a4e:	4e0f      	ldr	r6, [pc, #60]	@ (8008a8c <sbrk_aligned+0x40>)
 8008a50:	460c      	mov	r4, r1
 8008a52:	6831      	ldr	r1, [r6, #0]
 8008a54:	4605      	mov	r5, r0
 8008a56:	b911      	cbnz	r1, 8008a5e <sbrk_aligned+0x12>
 8008a58:	f000 fca4 	bl	80093a4 <_sbrk_r>
 8008a5c:	6030      	str	r0, [r6, #0]
 8008a5e:	4621      	mov	r1, r4
 8008a60:	4628      	mov	r0, r5
 8008a62:	f000 fc9f 	bl	80093a4 <_sbrk_r>
 8008a66:	1c43      	adds	r3, r0, #1
 8008a68:	d103      	bne.n	8008a72 <sbrk_aligned+0x26>
 8008a6a:	f04f 34ff 	mov.w	r4, #4294967295
 8008a6e:	4620      	mov	r0, r4
 8008a70:	bd70      	pop	{r4, r5, r6, pc}
 8008a72:	1cc4      	adds	r4, r0, #3
 8008a74:	f024 0403 	bic.w	r4, r4, #3
 8008a78:	42a0      	cmp	r0, r4
 8008a7a:	d0f8      	beq.n	8008a6e <sbrk_aligned+0x22>
 8008a7c:	1a21      	subs	r1, r4, r0
 8008a7e:	4628      	mov	r0, r5
 8008a80:	f000 fc90 	bl	80093a4 <_sbrk_r>
 8008a84:	3001      	adds	r0, #1
 8008a86:	d1f2      	bne.n	8008a6e <sbrk_aligned+0x22>
 8008a88:	e7ef      	b.n	8008a6a <sbrk_aligned+0x1e>
 8008a8a:	bf00      	nop
 8008a8c:	20002038 	.word	0x20002038

08008a90 <_malloc_r>:
 8008a90:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a94:	1ccd      	adds	r5, r1, #3
 8008a96:	f025 0503 	bic.w	r5, r5, #3
 8008a9a:	3508      	adds	r5, #8
 8008a9c:	2d0c      	cmp	r5, #12
 8008a9e:	bf38      	it	cc
 8008aa0:	250c      	movcc	r5, #12
 8008aa2:	2d00      	cmp	r5, #0
 8008aa4:	4606      	mov	r6, r0
 8008aa6:	db01      	blt.n	8008aac <_malloc_r+0x1c>
 8008aa8:	42a9      	cmp	r1, r5
 8008aaa:	d904      	bls.n	8008ab6 <_malloc_r+0x26>
 8008aac:	230c      	movs	r3, #12
 8008aae:	6033      	str	r3, [r6, #0]
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ab6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b8c <_malloc_r+0xfc>
 8008aba:	f000 f869 	bl	8008b90 <__malloc_lock>
 8008abe:	f8d8 3000 	ldr.w	r3, [r8]
 8008ac2:	461c      	mov	r4, r3
 8008ac4:	bb44      	cbnz	r4, 8008b18 <_malloc_r+0x88>
 8008ac6:	4629      	mov	r1, r5
 8008ac8:	4630      	mov	r0, r6
 8008aca:	f7ff ffbf 	bl	8008a4c <sbrk_aligned>
 8008ace:	1c43      	adds	r3, r0, #1
 8008ad0:	4604      	mov	r4, r0
 8008ad2:	d158      	bne.n	8008b86 <_malloc_r+0xf6>
 8008ad4:	f8d8 4000 	ldr.w	r4, [r8]
 8008ad8:	4627      	mov	r7, r4
 8008ada:	2f00      	cmp	r7, #0
 8008adc:	d143      	bne.n	8008b66 <_malloc_r+0xd6>
 8008ade:	2c00      	cmp	r4, #0
 8008ae0:	d04b      	beq.n	8008b7a <_malloc_r+0xea>
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	4639      	mov	r1, r7
 8008ae6:	4630      	mov	r0, r6
 8008ae8:	eb04 0903 	add.w	r9, r4, r3
 8008aec:	f000 fc5a 	bl	80093a4 <_sbrk_r>
 8008af0:	4581      	cmp	r9, r0
 8008af2:	d142      	bne.n	8008b7a <_malloc_r+0xea>
 8008af4:	6821      	ldr	r1, [r4, #0]
 8008af6:	1a6d      	subs	r5, r5, r1
 8008af8:	4629      	mov	r1, r5
 8008afa:	4630      	mov	r0, r6
 8008afc:	f7ff ffa6 	bl	8008a4c <sbrk_aligned>
 8008b00:	3001      	adds	r0, #1
 8008b02:	d03a      	beq.n	8008b7a <_malloc_r+0xea>
 8008b04:	6823      	ldr	r3, [r4, #0]
 8008b06:	442b      	add	r3, r5
 8008b08:	6023      	str	r3, [r4, #0]
 8008b0a:	f8d8 3000 	ldr.w	r3, [r8]
 8008b0e:	685a      	ldr	r2, [r3, #4]
 8008b10:	bb62      	cbnz	r2, 8008b6c <_malloc_r+0xdc>
 8008b12:	f8c8 7000 	str.w	r7, [r8]
 8008b16:	e00f      	b.n	8008b38 <_malloc_r+0xa8>
 8008b18:	6822      	ldr	r2, [r4, #0]
 8008b1a:	1b52      	subs	r2, r2, r5
 8008b1c:	d420      	bmi.n	8008b60 <_malloc_r+0xd0>
 8008b1e:	2a0b      	cmp	r2, #11
 8008b20:	d917      	bls.n	8008b52 <_malloc_r+0xc2>
 8008b22:	1961      	adds	r1, r4, r5
 8008b24:	42a3      	cmp	r3, r4
 8008b26:	6025      	str	r5, [r4, #0]
 8008b28:	bf18      	it	ne
 8008b2a:	6059      	strne	r1, [r3, #4]
 8008b2c:	6863      	ldr	r3, [r4, #4]
 8008b2e:	bf08      	it	eq
 8008b30:	f8c8 1000 	streq.w	r1, [r8]
 8008b34:	5162      	str	r2, [r4, r5]
 8008b36:	604b      	str	r3, [r1, #4]
 8008b38:	4630      	mov	r0, r6
 8008b3a:	f000 f82f 	bl	8008b9c <__malloc_unlock>
 8008b3e:	f104 000b 	add.w	r0, r4, #11
 8008b42:	1d23      	adds	r3, r4, #4
 8008b44:	f020 0007 	bic.w	r0, r0, #7
 8008b48:	1ac2      	subs	r2, r0, r3
 8008b4a:	bf1c      	itt	ne
 8008b4c:	1a1b      	subne	r3, r3, r0
 8008b4e:	50a3      	strne	r3, [r4, r2]
 8008b50:	e7af      	b.n	8008ab2 <_malloc_r+0x22>
 8008b52:	6862      	ldr	r2, [r4, #4]
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	bf0c      	ite	eq
 8008b58:	f8c8 2000 	streq.w	r2, [r8]
 8008b5c:	605a      	strne	r2, [r3, #4]
 8008b5e:	e7eb      	b.n	8008b38 <_malloc_r+0xa8>
 8008b60:	4623      	mov	r3, r4
 8008b62:	6864      	ldr	r4, [r4, #4]
 8008b64:	e7ae      	b.n	8008ac4 <_malloc_r+0x34>
 8008b66:	463c      	mov	r4, r7
 8008b68:	687f      	ldr	r7, [r7, #4]
 8008b6a:	e7b6      	b.n	8008ada <_malloc_r+0x4a>
 8008b6c:	461a      	mov	r2, r3
 8008b6e:	685b      	ldr	r3, [r3, #4]
 8008b70:	42a3      	cmp	r3, r4
 8008b72:	d1fb      	bne.n	8008b6c <_malloc_r+0xdc>
 8008b74:	2300      	movs	r3, #0
 8008b76:	6053      	str	r3, [r2, #4]
 8008b78:	e7de      	b.n	8008b38 <_malloc_r+0xa8>
 8008b7a:	230c      	movs	r3, #12
 8008b7c:	6033      	str	r3, [r6, #0]
 8008b7e:	4630      	mov	r0, r6
 8008b80:	f000 f80c 	bl	8008b9c <__malloc_unlock>
 8008b84:	e794      	b.n	8008ab0 <_malloc_r+0x20>
 8008b86:	6005      	str	r5, [r0, #0]
 8008b88:	e7d6      	b.n	8008b38 <_malloc_r+0xa8>
 8008b8a:	bf00      	nop
 8008b8c:	2000203c 	.word	0x2000203c

08008b90 <__malloc_lock>:
 8008b90:	4801      	ldr	r0, [pc, #4]	@ (8008b98 <__malloc_lock+0x8>)
 8008b92:	f7ff bf0e 	b.w	80089b2 <__retarget_lock_acquire_recursive>
 8008b96:	bf00      	nop
 8008b98:	20002034 	.word	0x20002034

08008b9c <__malloc_unlock>:
 8008b9c:	4801      	ldr	r0, [pc, #4]	@ (8008ba4 <__malloc_unlock+0x8>)
 8008b9e:	f7ff bf09 	b.w	80089b4 <__retarget_lock_release_recursive>
 8008ba2:	bf00      	nop
 8008ba4:	20002034 	.word	0x20002034

08008ba8 <__sfputc_r>:
 8008ba8:	6893      	ldr	r3, [r2, #8]
 8008baa:	3b01      	subs	r3, #1
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	b410      	push	{r4}
 8008bb0:	6093      	str	r3, [r2, #8]
 8008bb2:	da08      	bge.n	8008bc6 <__sfputc_r+0x1e>
 8008bb4:	6994      	ldr	r4, [r2, #24]
 8008bb6:	42a3      	cmp	r3, r4
 8008bb8:	db01      	blt.n	8008bbe <__sfputc_r+0x16>
 8008bba:	290a      	cmp	r1, #10
 8008bbc:	d103      	bne.n	8008bc6 <__sfputc_r+0x1e>
 8008bbe:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bc2:	f7ff bde8 	b.w	8008796 <__swbuf_r>
 8008bc6:	6813      	ldr	r3, [r2, #0]
 8008bc8:	1c58      	adds	r0, r3, #1
 8008bca:	6010      	str	r0, [r2, #0]
 8008bcc:	7019      	strb	r1, [r3, #0]
 8008bce:	4608      	mov	r0, r1
 8008bd0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bd4:	4770      	bx	lr

08008bd6 <__sfputs_r>:
 8008bd6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bd8:	4606      	mov	r6, r0
 8008bda:	460f      	mov	r7, r1
 8008bdc:	4614      	mov	r4, r2
 8008bde:	18d5      	adds	r5, r2, r3
 8008be0:	42ac      	cmp	r4, r5
 8008be2:	d101      	bne.n	8008be8 <__sfputs_r+0x12>
 8008be4:	2000      	movs	r0, #0
 8008be6:	e007      	b.n	8008bf8 <__sfputs_r+0x22>
 8008be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bec:	463a      	mov	r2, r7
 8008bee:	4630      	mov	r0, r6
 8008bf0:	f7ff ffda 	bl	8008ba8 <__sfputc_r>
 8008bf4:	1c43      	adds	r3, r0, #1
 8008bf6:	d1f3      	bne.n	8008be0 <__sfputs_r+0xa>
 8008bf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008bfc <_vfiprintf_r>:
 8008bfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c00:	460d      	mov	r5, r1
 8008c02:	b09d      	sub	sp, #116	@ 0x74
 8008c04:	4614      	mov	r4, r2
 8008c06:	4698      	mov	r8, r3
 8008c08:	4606      	mov	r6, r0
 8008c0a:	b118      	cbz	r0, 8008c14 <_vfiprintf_r+0x18>
 8008c0c:	6a03      	ldr	r3, [r0, #32]
 8008c0e:	b90b      	cbnz	r3, 8008c14 <_vfiprintf_r+0x18>
 8008c10:	f7ff fcd8 	bl	80085c4 <__sinit>
 8008c14:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c16:	07d9      	lsls	r1, r3, #31
 8008c18:	d405      	bmi.n	8008c26 <_vfiprintf_r+0x2a>
 8008c1a:	89ab      	ldrh	r3, [r5, #12]
 8008c1c:	059a      	lsls	r2, r3, #22
 8008c1e:	d402      	bmi.n	8008c26 <_vfiprintf_r+0x2a>
 8008c20:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c22:	f7ff fec6 	bl	80089b2 <__retarget_lock_acquire_recursive>
 8008c26:	89ab      	ldrh	r3, [r5, #12]
 8008c28:	071b      	lsls	r3, r3, #28
 8008c2a:	d501      	bpl.n	8008c30 <_vfiprintf_r+0x34>
 8008c2c:	692b      	ldr	r3, [r5, #16]
 8008c2e:	b99b      	cbnz	r3, 8008c58 <_vfiprintf_r+0x5c>
 8008c30:	4629      	mov	r1, r5
 8008c32:	4630      	mov	r0, r6
 8008c34:	f7ff fdee 	bl	8008814 <__swsetup_r>
 8008c38:	b170      	cbz	r0, 8008c58 <_vfiprintf_r+0x5c>
 8008c3a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c3c:	07dc      	lsls	r4, r3, #31
 8008c3e:	d504      	bpl.n	8008c4a <_vfiprintf_r+0x4e>
 8008c40:	f04f 30ff 	mov.w	r0, #4294967295
 8008c44:	b01d      	add	sp, #116	@ 0x74
 8008c46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c4a:	89ab      	ldrh	r3, [r5, #12]
 8008c4c:	0598      	lsls	r0, r3, #22
 8008c4e:	d4f7      	bmi.n	8008c40 <_vfiprintf_r+0x44>
 8008c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c52:	f7ff feaf 	bl	80089b4 <__retarget_lock_release_recursive>
 8008c56:	e7f3      	b.n	8008c40 <_vfiprintf_r+0x44>
 8008c58:	2300      	movs	r3, #0
 8008c5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c5c:	2320      	movs	r3, #32
 8008c5e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c66:	2330      	movs	r3, #48	@ 0x30
 8008c68:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e18 <_vfiprintf_r+0x21c>
 8008c6c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c70:	f04f 0901 	mov.w	r9, #1
 8008c74:	4623      	mov	r3, r4
 8008c76:	469a      	mov	sl, r3
 8008c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c7c:	b10a      	cbz	r2, 8008c82 <_vfiprintf_r+0x86>
 8008c7e:	2a25      	cmp	r2, #37	@ 0x25
 8008c80:	d1f9      	bne.n	8008c76 <_vfiprintf_r+0x7a>
 8008c82:	ebba 0b04 	subs.w	fp, sl, r4
 8008c86:	d00b      	beq.n	8008ca0 <_vfiprintf_r+0xa4>
 8008c88:	465b      	mov	r3, fp
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	4629      	mov	r1, r5
 8008c8e:	4630      	mov	r0, r6
 8008c90:	f7ff ffa1 	bl	8008bd6 <__sfputs_r>
 8008c94:	3001      	adds	r0, #1
 8008c96:	f000 80a7 	beq.w	8008de8 <_vfiprintf_r+0x1ec>
 8008c9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c9c:	445a      	add	r2, fp
 8008c9e:	9209      	str	r2, [sp, #36]	@ 0x24
 8008ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	f000 809f 	beq.w	8008de8 <_vfiprintf_r+0x1ec>
 8008caa:	2300      	movs	r3, #0
 8008cac:	f04f 32ff 	mov.w	r2, #4294967295
 8008cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008cb4:	f10a 0a01 	add.w	sl, sl, #1
 8008cb8:	9304      	str	r3, [sp, #16]
 8008cba:	9307      	str	r3, [sp, #28]
 8008cbc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008cc0:	931a      	str	r3, [sp, #104]	@ 0x68
 8008cc2:	4654      	mov	r4, sl
 8008cc4:	2205      	movs	r2, #5
 8008cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cca:	4853      	ldr	r0, [pc, #332]	@ (8008e18 <_vfiprintf_r+0x21c>)
 8008ccc:	f7f7 fa88 	bl	80001e0 <memchr>
 8008cd0:	9a04      	ldr	r2, [sp, #16]
 8008cd2:	b9d8      	cbnz	r0, 8008d0c <_vfiprintf_r+0x110>
 8008cd4:	06d1      	lsls	r1, r2, #27
 8008cd6:	bf44      	itt	mi
 8008cd8:	2320      	movmi	r3, #32
 8008cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cde:	0713      	lsls	r3, r2, #28
 8008ce0:	bf44      	itt	mi
 8008ce2:	232b      	movmi	r3, #43	@ 0x2b
 8008ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8008cec:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cee:	d015      	beq.n	8008d1c <_vfiprintf_r+0x120>
 8008cf0:	9a07      	ldr	r2, [sp, #28]
 8008cf2:	4654      	mov	r4, sl
 8008cf4:	2000      	movs	r0, #0
 8008cf6:	f04f 0c0a 	mov.w	ip, #10
 8008cfa:	4621      	mov	r1, r4
 8008cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d00:	3b30      	subs	r3, #48	@ 0x30
 8008d02:	2b09      	cmp	r3, #9
 8008d04:	d94b      	bls.n	8008d9e <_vfiprintf_r+0x1a2>
 8008d06:	b1b0      	cbz	r0, 8008d36 <_vfiprintf_r+0x13a>
 8008d08:	9207      	str	r2, [sp, #28]
 8008d0a:	e014      	b.n	8008d36 <_vfiprintf_r+0x13a>
 8008d0c:	eba0 0308 	sub.w	r3, r0, r8
 8008d10:	fa09 f303 	lsl.w	r3, r9, r3
 8008d14:	4313      	orrs	r3, r2
 8008d16:	9304      	str	r3, [sp, #16]
 8008d18:	46a2      	mov	sl, r4
 8008d1a:	e7d2      	b.n	8008cc2 <_vfiprintf_r+0xc6>
 8008d1c:	9b03      	ldr	r3, [sp, #12]
 8008d1e:	1d19      	adds	r1, r3, #4
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	9103      	str	r1, [sp, #12]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	bfbb      	ittet	lt
 8008d28:	425b      	neglt	r3, r3
 8008d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8008d2e:	9307      	strge	r3, [sp, #28]
 8008d30:	9307      	strlt	r3, [sp, #28]
 8008d32:	bfb8      	it	lt
 8008d34:	9204      	strlt	r2, [sp, #16]
 8008d36:	7823      	ldrb	r3, [r4, #0]
 8008d38:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d3a:	d10a      	bne.n	8008d52 <_vfiprintf_r+0x156>
 8008d3c:	7863      	ldrb	r3, [r4, #1]
 8008d3e:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d40:	d132      	bne.n	8008da8 <_vfiprintf_r+0x1ac>
 8008d42:	9b03      	ldr	r3, [sp, #12]
 8008d44:	1d1a      	adds	r2, r3, #4
 8008d46:	681b      	ldr	r3, [r3, #0]
 8008d48:	9203      	str	r2, [sp, #12]
 8008d4a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d4e:	3402      	adds	r4, #2
 8008d50:	9305      	str	r3, [sp, #20]
 8008d52:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e28 <_vfiprintf_r+0x22c>
 8008d56:	7821      	ldrb	r1, [r4, #0]
 8008d58:	2203      	movs	r2, #3
 8008d5a:	4650      	mov	r0, sl
 8008d5c:	f7f7 fa40 	bl	80001e0 <memchr>
 8008d60:	b138      	cbz	r0, 8008d72 <_vfiprintf_r+0x176>
 8008d62:	9b04      	ldr	r3, [sp, #16]
 8008d64:	eba0 000a 	sub.w	r0, r0, sl
 8008d68:	2240      	movs	r2, #64	@ 0x40
 8008d6a:	4082      	lsls	r2, r0
 8008d6c:	4313      	orrs	r3, r2
 8008d6e:	3401      	adds	r4, #1
 8008d70:	9304      	str	r3, [sp, #16]
 8008d72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d76:	4829      	ldr	r0, [pc, #164]	@ (8008e1c <_vfiprintf_r+0x220>)
 8008d78:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d7c:	2206      	movs	r2, #6
 8008d7e:	f7f7 fa2f 	bl	80001e0 <memchr>
 8008d82:	2800      	cmp	r0, #0
 8008d84:	d03f      	beq.n	8008e06 <_vfiprintf_r+0x20a>
 8008d86:	4b26      	ldr	r3, [pc, #152]	@ (8008e20 <_vfiprintf_r+0x224>)
 8008d88:	bb1b      	cbnz	r3, 8008dd2 <_vfiprintf_r+0x1d6>
 8008d8a:	9b03      	ldr	r3, [sp, #12]
 8008d8c:	3307      	adds	r3, #7
 8008d8e:	f023 0307 	bic.w	r3, r3, #7
 8008d92:	3308      	adds	r3, #8
 8008d94:	9303      	str	r3, [sp, #12]
 8008d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d98:	443b      	add	r3, r7
 8008d9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d9c:	e76a      	b.n	8008c74 <_vfiprintf_r+0x78>
 8008d9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8008da2:	460c      	mov	r4, r1
 8008da4:	2001      	movs	r0, #1
 8008da6:	e7a8      	b.n	8008cfa <_vfiprintf_r+0xfe>
 8008da8:	2300      	movs	r3, #0
 8008daa:	3401      	adds	r4, #1
 8008dac:	9305      	str	r3, [sp, #20]
 8008dae:	4619      	mov	r1, r3
 8008db0:	f04f 0c0a 	mov.w	ip, #10
 8008db4:	4620      	mov	r0, r4
 8008db6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008dba:	3a30      	subs	r2, #48	@ 0x30
 8008dbc:	2a09      	cmp	r2, #9
 8008dbe:	d903      	bls.n	8008dc8 <_vfiprintf_r+0x1cc>
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	d0c6      	beq.n	8008d52 <_vfiprintf_r+0x156>
 8008dc4:	9105      	str	r1, [sp, #20]
 8008dc6:	e7c4      	b.n	8008d52 <_vfiprintf_r+0x156>
 8008dc8:	fb0c 2101 	mla	r1, ip, r1, r2
 8008dcc:	4604      	mov	r4, r0
 8008dce:	2301      	movs	r3, #1
 8008dd0:	e7f0      	b.n	8008db4 <_vfiprintf_r+0x1b8>
 8008dd2:	ab03      	add	r3, sp, #12
 8008dd4:	9300      	str	r3, [sp, #0]
 8008dd6:	462a      	mov	r2, r5
 8008dd8:	4b12      	ldr	r3, [pc, #72]	@ (8008e24 <_vfiprintf_r+0x228>)
 8008dda:	a904      	add	r1, sp, #16
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f3af 8000 	nop.w
 8008de2:	4607      	mov	r7, r0
 8008de4:	1c78      	adds	r0, r7, #1
 8008de6:	d1d6      	bne.n	8008d96 <_vfiprintf_r+0x19a>
 8008de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dea:	07d9      	lsls	r1, r3, #31
 8008dec:	d405      	bmi.n	8008dfa <_vfiprintf_r+0x1fe>
 8008dee:	89ab      	ldrh	r3, [r5, #12]
 8008df0:	059a      	lsls	r2, r3, #22
 8008df2:	d402      	bmi.n	8008dfa <_vfiprintf_r+0x1fe>
 8008df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008df6:	f7ff fddd 	bl	80089b4 <__retarget_lock_release_recursive>
 8008dfa:	89ab      	ldrh	r3, [r5, #12]
 8008dfc:	065b      	lsls	r3, r3, #25
 8008dfe:	f53f af1f 	bmi.w	8008c40 <_vfiprintf_r+0x44>
 8008e02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e04:	e71e      	b.n	8008c44 <_vfiprintf_r+0x48>
 8008e06:	ab03      	add	r3, sp, #12
 8008e08:	9300      	str	r3, [sp, #0]
 8008e0a:	462a      	mov	r2, r5
 8008e0c:	4b05      	ldr	r3, [pc, #20]	@ (8008e24 <_vfiprintf_r+0x228>)
 8008e0e:	a904      	add	r1, sp, #16
 8008e10:	4630      	mov	r0, r6
 8008e12:	f000 f879 	bl	8008f08 <_printf_i>
 8008e16:	e7e4      	b.n	8008de2 <_vfiprintf_r+0x1e6>
 8008e18:	08009468 	.word	0x08009468
 8008e1c:	08009472 	.word	0x08009472
 8008e20:	00000000 	.word	0x00000000
 8008e24:	08008bd7 	.word	0x08008bd7
 8008e28:	0800946e 	.word	0x0800946e

08008e2c <_printf_common>:
 8008e2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e30:	4616      	mov	r6, r2
 8008e32:	4698      	mov	r8, r3
 8008e34:	688a      	ldr	r2, [r1, #8]
 8008e36:	690b      	ldr	r3, [r1, #16]
 8008e38:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e3c:	4293      	cmp	r3, r2
 8008e3e:	bfb8      	it	lt
 8008e40:	4613      	movlt	r3, r2
 8008e42:	6033      	str	r3, [r6, #0]
 8008e44:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e48:	4607      	mov	r7, r0
 8008e4a:	460c      	mov	r4, r1
 8008e4c:	b10a      	cbz	r2, 8008e52 <_printf_common+0x26>
 8008e4e:	3301      	adds	r3, #1
 8008e50:	6033      	str	r3, [r6, #0]
 8008e52:	6823      	ldr	r3, [r4, #0]
 8008e54:	0699      	lsls	r1, r3, #26
 8008e56:	bf42      	ittt	mi
 8008e58:	6833      	ldrmi	r3, [r6, #0]
 8008e5a:	3302      	addmi	r3, #2
 8008e5c:	6033      	strmi	r3, [r6, #0]
 8008e5e:	6825      	ldr	r5, [r4, #0]
 8008e60:	f015 0506 	ands.w	r5, r5, #6
 8008e64:	d106      	bne.n	8008e74 <_printf_common+0x48>
 8008e66:	f104 0a19 	add.w	sl, r4, #25
 8008e6a:	68e3      	ldr	r3, [r4, #12]
 8008e6c:	6832      	ldr	r2, [r6, #0]
 8008e6e:	1a9b      	subs	r3, r3, r2
 8008e70:	42ab      	cmp	r3, r5
 8008e72:	dc26      	bgt.n	8008ec2 <_printf_common+0x96>
 8008e74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e78:	6822      	ldr	r2, [r4, #0]
 8008e7a:	3b00      	subs	r3, #0
 8008e7c:	bf18      	it	ne
 8008e7e:	2301      	movne	r3, #1
 8008e80:	0692      	lsls	r2, r2, #26
 8008e82:	d42b      	bmi.n	8008edc <_printf_common+0xb0>
 8008e84:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e88:	4641      	mov	r1, r8
 8008e8a:	4638      	mov	r0, r7
 8008e8c:	47c8      	blx	r9
 8008e8e:	3001      	adds	r0, #1
 8008e90:	d01e      	beq.n	8008ed0 <_printf_common+0xa4>
 8008e92:	6823      	ldr	r3, [r4, #0]
 8008e94:	6922      	ldr	r2, [r4, #16]
 8008e96:	f003 0306 	and.w	r3, r3, #6
 8008e9a:	2b04      	cmp	r3, #4
 8008e9c:	bf02      	ittt	eq
 8008e9e:	68e5      	ldreq	r5, [r4, #12]
 8008ea0:	6833      	ldreq	r3, [r6, #0]
 8008ea2:	1aed      	subeq	r5, r5, r3
 8008ea4:	68a3      	ldr	r3, [r4, #8]
 8008ea6:	bf0c      	ite	eq
 8008ea8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008eac:	2500      	movne	r5, #0
 8008eae:	4293      	cmp	r3, r2
 8008eb0:	bfc4      	itt	gt
 8008eb2:	1a9b      	subgt	r3, r3, r2
 8008eb4:	18ed      	addgt	r5, r5, r3
 8008eb6:	2600      	movs	r6, #0
 8008eb8:	341a      	adds	r4, #26
 8008eba:	42b5      	cmp	r5, r6
 8008ebc:	d11a      	bne.n	8008ef4 <_printf_common+0xc8>
 8008ebe:	2000      	movs	r0, #0
 8008ec0:	e008      	b.n	8008ed4 <_printf_common+0xa8>
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	4652      	mov	r2, sl
 8008ec6:	4641      	mov	r1, r8
 8008ec8:	4638      	mov	r0, r7
 8008eca:	47c8      	blx	r9
 8008ecc:	3001      	adds	r0, #1
 8008ece:	d103      	bne.n	8008ed8 <_printf_common+0xac>
 8008ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ed4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ed8:	3501      	adds	r5, #1
 8008eda:	e7c6      	b.n	8008e6a <_printf_common+0x3e>
 8008edc:	18e1      	adds	r1, r4, r3
 8008ede:	1c5a      	adds	r2, r3, #1
 8008ee0:	2030      	movs	r0, #48	@ 0x30
 8008ee2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008ee6:	4422      	add	r2, r4
 8008ee8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008eec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ef0:	3302      	adds	r3, #2
 8008ef2:	e7c7      	b.n	8008e84 <_printf_common+0x58>
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	4622      	mov	r2, r4
 8008ef8:	4641      	mov	r1, r8
 8008efa:	4638      	mov	r0, r7
 8008efc:	47c8      	blx	r9
 8008efe:	3001      	adds	r0, #1
 8008f00:	d0e6      	beq.n	8008ed0 <_printf_common+0xa4>
 8008f02:	3601      	adds	r6, #1
 8008f04:	e7d9      	b.n	8008eba <_printf_common+0x8e>
	...

08008f08 <_printf_i>:
 8008f08:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f0c:	7e0f      	ldrb	r7, [r1, #24]
 8008f0e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008f10:	2f78      	cmp	r7, #120	@ 0x78
 8008f12:	4691      	mov	r9, r2
 8008f14:	4680      	mov	r8, r0
 8008f16:	460c      	mov	r4, r1
 8008f18:	469a      	mov	sl, r3
 8008f1a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f1e:	d807      	bhi.n	8008f30 <_printf_i+0x28>
 8008f20:	2f62      	cmp	r7, #98	@ 0x62
 8008f22:	d80a      	bhi.n	8008f3a <_printf_i+0x32>
 8008f24:	2f00      	cmp	r7, #0
 8008f26:	f000 80d1 	beq.w	80090cc <_printf_i+0x1c4>
 8008f2a:	2f58      	cmp	r7, #88	@ 0x58
 8008f2c:	f000 80b8 	beq.w	80090a0 <_printf_i+0x198>
 8008f30:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f34:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f38:	e03a      	b.n	8008fb0 <_printf_i+0xa8>
 8008f3a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f3e:	2b15      	cmp	r3, #21
 8008f40:	d8f6      	bhi.n	8008f30 <_printf_i+0x28>
 8008f42:	a101      	add	r1, pc, #4	@ (adr r1, 8008f48 <_printf_i+0x40>)
 8008f44:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f48:	08008fa1 	.word	0x08008fa1
 8008f4c:	08008fb5 	.word	0x08008fb5
 8008f50:	08008f31 	.word	0x08008f31
 8008f54:	08008f31 	.word	0x08008f31
 8008f58:	08008f31 	.word	0x08008f31
 8008f5c:	08008f31 	.word	0x08008f31
 8008f60:	08008fb5 	.word	0x08008fb5
 8008f64:	08008f31 	.word	0x08008f31
 8008f68:	08008f31 	.word	0x08008f31
 8008f6c:	08008f31 	.word	0x08008f31
 8008f70:	08008f31 	.word	0x08008f31
 8008f74:	080090b3 	.word	0x080090b3
 8008f78:	08008fdf 	.word	0x08008fdf
 8008f7c:	0800906d 	.word	0x0800906d
 8008f80:	08008f31 	.word	0x08008f31
 8008f84:	08008f31 	.word	0x08008f31
 8008f88:	080090d5 	.word	0x080090d5
 8008f8c:	08008f31 	.word	0x08008f31
 8008f90:	08008fdf 	.word	0x08008fdf
 8008f94:	08008f31 	.word	0x08008f31
 8008f98:	08008f31 	.word	0x08008f31
 8008f9c:	08009075 	.word	0x08009075
 8008fa0:	6833      	ldr	r3, [r6, #0]
 8008fa2:	1d1a      	adds	r2, r3, #4
 8008fa4:	681b      	ldr	r3, [r3, #0]
 8008fa6:	6032      	str	r2, [r6, #0]
 8008fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008fac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	e09c      	b.n	80090ee <_printf_i+0x1e6>
 8008fb4:	6833      	ldr	r3, [r6, #0]
 8008fb6:	6820      	ldr	r0, [r4, #0]
 8008fb8:	1d19      	adds	r1, r3, #4
 8008fba:	6031      	str	r1, [r6, #0]
 8008fbc:	0606      	lsls	r6, r0, #24
 8008fbe:	d501      	bpl.n	8008fc4 <_printf_i+0xbc>
 8008fc0:	681d      	ldr	r5, [r3, #0]
 8008fc2:	e003      	b.n	8008fcc <_printf_i+0xc4>
 8008fc4:	0645      	lsls	r5, r0, #25
 8008fc6:	d5fb      	bpl.n	8008fc0 <_printf_i+0xb8>
 8008fc8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fcc:	2d00      	cmp	r5, #0
 8008fce:	da03      	bge.n	8008fd8 <_printf_i+0xd0>
 8008fd0:	232d      	movs	r3, #45	@ 0x2d
 8008fd2:	426d      	negs	r5, r5
 8008fd4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fd8:	4858      	ldr	r0, [pc, #352]	@ (800913c <_printf_i+0x234>)
 8008fda:	230a      	movs	r3, #10
 8008fdc:	e011      	b.n	8009002 <_printf_i+0xfa>
 8008fde:	6821      	ldr	r1, [r4, #0]
 8008fe0:	6833      	ldr	r3, [r6, #0]
 8008fe2:	0608      	lsls	r0, r1, #24
 8008fe4:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fe8:	d402      	bmi.n	8008ff0 <_printf_i+0xe8>
 8008fea:	0649      	lsls	r1, r1, #25
 8008fec:	bf48      	it	mi
 8008fee:	b2ad      	uxthmi	r5, r5
 8008ff0:	2f6f      	cmp	r7, #111	@ 0x6f
 8008ff2:	4852      	ldr	r0, [pc, #328]	@ (800913c <_printf_i+0x234>)
 8008ff4:	6033      	str	r3, [r6, #0]
 8008ff6:	bf14      	ite	ne
 8008ff8:	230a      	movne	r3, #10
 8008ffa:	2308      	moveq	r3, #8
 8008ffc:	2100      	movs	r1, #0
 8008ffe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009002:	6866      	ldr	r6, [r4, #4]
 8009004:	60a6      	str	r6, [r4, #8]
 8009006:	2e00      	cmp	r6, #0
 8009008:	db05      	blt.n	8009016 <_printf_i+0x10e>
 800900a:	6821      	ldr	r1, [r4, #0]
 800900c:	432e      	orrs	r6, r5
 800900e:	f021 0104 	bic.w	r1, r1, #4
 8009012:	6021      	str	r1, [r4, #0]
 8009014:	d04b      	beq.n	80090ae <_printf_i+0x1a6>
 8009016:	4616      	mov	r6, r2
 8009018:	fbb5 f1f3 	udiv	r1, r5, r3
 800901c:	fb03 5711 	mls	r7, r3, r1, r5
 8009020:	5dc7      	ldrb	r7, [r0, r7]
 8009022:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009026:	462f      	mov	r7, r5
 8009028:	42bb      	cmp	r3, r7
 800902a:	460d      	mov	r5, r1
 800902c:	d9f4      	bls.n	8009018 <_printf_i+0x110>
 800902e:	2b08      	cmp	r3, #8
 8009030:	d10b      	bne.n	800904a <_printf_i+0x142>
 8009032:	6823      	ldr	r3, [r4, #0]
 8009034:	07df      	lsls	r7, r3, #31
 8009036:	d508      	bpl.n	800904a <_printf_i+0x142>
 8009038:	6923      	ldr	r3, [r4, #16]
 800903a:	6861      	ldr	r1, [r4, #4]
 800903c:	4299      	cmp	r1, r3
 800903e:	bfde      	ittt	le
 8009040:	2330      	movle	r3, #48	@ 0x30
 8009042:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009046:	f106 36ff 	addle.w	r6, r6, #4294967295
 800904a:	1b92      	subs	r2, r2, r6
 800904c:	6122      	str	r2, [r4, #16]
 800904e:	f8cd a000 	str.w	sl, [sp]
 8009052:	464b      	mov	r3, r9
 8009054:	aa03      	add	r2, sp, #12
 8009056:	4621      	mov	r1, r4
 8009058:	4640      	mov	r0, r8
 800905a:	f7ff fee7 	bl	8008e2c <_printf_common>
 800905e:	3001      	adds	r0, #1
 8009060:	d14a      	bne.n	80090f8 <_printf_i+0x1f0>
 8009062:	f04f 30ff 	mov.w	r0, #4294967295
 8009066:	b004      	add	sp, #16
 8009068:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800906c:	6823      	ldr	r3, [r4, #0]
 800906e:	f043 0320 	orr.w	r3, r3, #32
 8009072:	6023      	str	r3, [r4, #0]
 8009074:	4832      	ldr	r0, [pc, #200]	@ (8009140 <_printf_i+0x238>)
 8009076:	2778      	movs	r7, #120	@ 0x78
 8009078:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800907c:	6823      	ldr	r3, [r4, #0]
 800907e:	6831      	ldr	r1, [r6, #0]
 8009080:	061f      	lsls	r7, r3, #24
 8009082:	f851 5b04 	ldr.w	r5, [r1], #4
 8009086:	d402      	bmi.n	800908e <_printf_i+0x186>
 8009088:	065f      	lsls	r7, r3, #25
 800908a:	bf48      	it	mi
 800908c:	b2ad      	uxthmi	r5, r5
 800908e:	6031      	str	r1, [r6, #0]
 8009090:	07d9      	lsls	r1, r3, #31
 8009092:	bf44      	itt	mi
 8009094:	f043 0320 	orrmi.w	r3, r3, #32
 8009098:	6023      	strmi	r3, [r4, #0]
 800909a:	b11d      	cbz	r5, 80090a4 <_printf_i+0x19c>
 800909c:	2310      	movs	r3, #16
 800909e:	e7ad      	b.n	8008ffc <_printf_i+0xf4>
 80090a0:	4826      	ldr	r0, [pc, #152]	@ (800913c <_printf_i+0x234>)
 80090a2:	e7e9      	b.n	8009078 <_printf_i+0x170>
 80090a4:	6823      	ldr	r3, [r4, #0]
 80090a6:	f023 0320 	bic.w	r3, r3, #32
 80090aa:	6023      	str	r3, [r4, #0]
 80090ac:	e7f6      	b.n	800909c <_printf_i+0x194>
 80090ae:	4616      	mov	r6, r2
 80090b0:	e7bd      	b.n	800902e <_printf_i+0x126>
 80090b2:	6833      	ldr	r3, [r6, #0]
 80090b4:	6825      	ldr	r5, [r4, #0]
 80090b6:	6961      	ldr	r1, [r4, #20]
 80090b8:	1d18      	adds	r0, r3, #4
 80090ba:	6030      	str	r0, [r6, #0]
 80090bc:	062e      	lsls	r6, r5, #24
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	d501      	bpl.n	80090c6 <_printf_i+0x1be>
 80090c2:	6019      	str	r1, [r3, #0]
 80090c4:	e002      	b.n	80090cc <_printf_i+0x1c4>
 80090c6:	0668      	lsls	r0, r5, #25
 80090c8:	d5fb      	bpl.n	80090c2 <_printf_i+0x1ba>
 80090ca:	8019      	strh	r1, [r3, #0]
 80090cc:	2300      	movs	r3, #0
 80090ce:	6123      	str	r3, [r4, #16]
 80090d0:	4616      	mov	r6, r2
 80090d2:	e7bc      	b.n	800904e <_printf_i+0x146>
 80090d4:	6833      	ldr	r3, [r6, #0]
 80090d6:	1d1a      	adds	r2, r3, #4
 80090d8:	6032      	str	r2, [r6, #0]
 80090da:	681e      	ldr	r6, [r3, #0]
 80090dc:	6862      	ldr	r2, [r4, #4]
 80090de:	2100      	movs	r1, #0
 80090e0:	4630      	mov	r0, r6
 80090e2:	f7f7 f87d 	bl	80001e0 <memchr>
 80090e6:	b108      	cbz	r0, 80090ec <_printf_i+0x1e4>
 80090e8:	1b80      	subs	r0, r0, r6
 80090ea:	6060      	str	r0, [r4, #4]
 80090ec:	6863      	ldr	r3, [r4, #4]
 80090ee:	6123      	str	r3, [r4, #16]
 80090f0:	2300      	movs	r3, #0
 80090f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090f6:	e7aa      	b.n	800904e <_printf_i+0x146>
 80090f8:	6923      	ldr	r3, [r4, #16]
 80090fa:	4632      	mov	r2, r6
 80090fc:	4649      	mov	r1, r9
 80090fe:	4640      	mov	r0, r8
 8009100:	47d0      	blx	sl
 8009102:	3001      	adds	r0, #1
 8009104:	d0ad      	beq.n	8009062 <_printf_i+0x15a>
 8009106:	6823      	ldr	r3, [r4, #0]
 8009108:	079b      	lsls	r3, r3, #30
 800910a:	d413      	bmi.n	8009134 <_printf_i+0x22c>
 800910c:	68e0      	ldr	r0, [r4, #12]
 800910e:	9b03      	ldr	r3, [sp, #12]
 8009110:	4298      	cmp	r0, r3
 8009112:	bfb8      	it	lt
 8009114:	4618      	movlt	r0, r3
 8009116:	e7a6      	b.n	8009066 <_printf_i+0x15e>
 8009118:	2301      	movs	r3, #1
 800911a:	4632      	mov	r2, r6
 800911c:	4649      	mov	r1, r9
 800911e:	4640      	mov	r0, r8
 8009120:	47d0      	blx	sl
 8009122:	3001      	adds	r0, #1
 8009124:	d09d      	beq.n	8009062 <_printf_i+0x15a>
 8009126:	3501      	adds	r5, #1
 8009128:	68e3      	ldr	r3, [r4, #12]
 800912a:	9903      	ldr	r1, [sp, #12]
 800912c:	1a5b      	subs	r3, r3, r1
 800912e:	42ab      	cmp	r3, r5
 8009130:	dcf2      	bgt.n	8009118 <_printf_i+0x210>
 8009132:	e7eb      	b.n	800910c <_printf_i+0x204>
 8009134:	2500      	movs	r5, #0
 8009136:	f104 0619 	add.w	r6, r4, #25
 800913a:	e7f5      	b.n	8009128 <_printf_i+0x220>
 800913c:	08009479 	.word	0x08009479
 8009140:	0800948a 	.word	0x0800948a

08009144 <__sflush_r>:
 8009144:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009148:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800914c:	0716      	lsls	r6, r2, #28
 800914e:	4605      	mov	r5, r0
 8009150:	460c      	mov	r4, r1
 8009152:	d454      	bmi.n	80091fe <__sflush_r+0xba>
 8009154:	684b      	ldr	r3, [r1, #4]
 8009156:	2b00      	cmp	r3, #0
 8009158:	dc02      	bgt.n	8009160 <__sflush_r+0x1c>
 800915a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800915c:	2b00      	cmp	r3, #0
 800915e:	dd48      	ble.n	80091f2 <__sflush_r+0xae>
 8009160:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009162:	2e00      	cmp	r6, #0
 8009164:	d045      	beq.n	80091f2 <__sflush_r+0xae>
 8009166:	2300      	movs	r3, #0
 8009168:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800916c:	682f      	ldr	r7, [r5, #0]
 800916e:	6a21      	ldr	r1, [r4, #32]
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	d030      	beq.n	80091d6 <__sflush_r+0x92>
 8009174:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009176:	89a3      	ldrh	r3, [r4, #12]
 8009178:	0759      	lsls	r1, r3, #29
 800917a:	d505      	bpl.n	8009188 <__sflush_r+0x44>
 800917c:	6863      	ldr	r3, [r4, #4]
 800917e:	1ad2      	subs	r2, r2, r3
 8009180:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009182:	b10b      	cbz	r3, 8009188 <__sflush_r+0x44>
 8009184:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009186:	1ad2      	subs	r2, r2, r3
 8009188:	2300      	movs	r3, #0
 800918a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800918c:	6a21      	ldr	r1, [r4, #32]
 800918e:	4628      	mov	r0, r5
 8009190:	47b0      	blx	r6
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	d106      	bne.n	80091a6 <__sflush_r+0x62>
 8009198:	6829      	ldr	r1, [r5, #0]
 800919a:	291d      	cmp	r1, #29
 800919c:	d82b      	bhi.n	80091f6 <__sflush_r+0xb2>
 800919e:	4a2a      	ldr	r2, [pc, #168]	@ (8009248 <__sflush_r+0x104>)
 80091a0:	40ca      	lsrs	r2, r1
 80091a2:	07d6      	lsls	r6, r2, #31
 80091a4:	d527      	bpl.n	80091f6 <__sflush_r+0xb2>
 80091a6:	2200      	movs	r2, #0
 80091a8:	6062      	str	r2, [r4, #4]
 80091aa:	04d9      	lsls	r1, r3, #19
 80091ac:	6922      	ldr	r2, [r4, #16]
 80091ae:	6022      	str	r2, [r4, #0]
 80091b0:	d504      	bpl.n	80091bc <__sflush_r+0x78>
 80091b2:	1c42      	adds	r2, r0, #1
 80091b4:	d101      	bne.n	80091ba <__sflush_r+0x76>
 80091b6:	682b      	ldr	r3, [r5, #0]
 80091b8:	b903      	cbnz	r3, 80091bc <__sflush_r+0x78>
 80091ba:	6560      	str	r0, [r4, #84]	@ 0x54
 80091bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091be:	602f      	str	r7, [r5, #0]
 80091c0:	b1b9      	cbz	r1, 80091f2 <__sflush_r+0xae>
 80091c2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091c6:	4299      	cmp	r1, r3
 80091c8:	d002      	beq.n	80091d0 <__sflush_r+0x8c>
 80091ca:	4628      	mov	r0, r5
 80091cc:	f7ff fbf4 	bl	80089b8 <_free_r>
 80091d0:	2300      	movs	r3, #0
 80091d2:	6363      	str	r3, [r4, #52]	@ 0x34
 80091d4:	e00d      	b.n	80091f2 <__sflush_r+0xae>
 80091d6:	2301      	movs	r3, #1
 80091d8:	4628      	mov	r0, r5
 80091da:	47b0      	blx	r6
 80091dc:	4602      	mov	r2, r0
 80091de:	1c50      	adds	r0, r2, #1
 80091e0:	d1c9      	bne.n	8009176 <__sflush_r+0x32>
 80091e2:	682b      	ldr	r3, [r5, #0]
 80091e4:	2b00      	cmp	r3, #0
 80091e6:	d0c6      	beq.n	8009176 <__sflush_r+0x32>
 80091e8:	2b1d      	cmp	r3, #29
 80091ea:	d001      	beq.n	80091f0 <__sflush_r+0xac>
 80091ec:	2b16      	cmp	r3, #22
 80091ee:	d11e      	bne.n	800922e <__sflush_r+0xea>
 80091f0:	602f      	str	r7, [r5, #0]
 80091f2:	2000      	movs	r0, #0
 80091f4:	e022      	b.n	800923c <__sflush_r+0xf8>
 80091f6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091fa:	b21b      	sxth	r3, r3
 80091fc:	e01b      	b.n	8009236 <__sflush_r+0xf2>
 80091fe:	690f      	ldr	r7, [r1, #16]
 8009200:	2f00      	cmp	r7, #0
 8009202:	d0f6      	beq.n	80091f2 <__sflush_r+0xae>
 8009204:	0793      	lsls	r3, r2, #30
 8009206:	680e      	ldr	r6, [r1, #0]
 8009208:	bf08      	it	eq
 800920a:	694b      	ldreq	r3, [r1, #20]
 800920c:	600f      	str	r7, [r1, #0]
 800920e:	bf18      	it	ne
 8009210:	2300      	movne	r3, #0
 8009212:	eba6 0807 	sub.w	r8, r6, r7
 8009216:	608b      	str	r3, [r1, #8]
 8009218:	f1b8 0f00 	cmp.w	r8, #0
 800921c:	dde9      	ble.n	80091f2 <__sflush_r+0xae>
 800921e:	6a21      	ldr	r1, [r4, #32]
 8009220:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009222:	4643      	mov	r3, r8
 8009224:	463a      	mov	r2, r7
 8009226:	4628      	mov	r0, r5
 8009228:	47b0      	blx	r6
 800922a:	2800      	cmp	r0, #0
 800922c:	dc08      	bgt.n	8009240 <__sflush_r+0xfc>
 800922e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	f04f 30ff 	mov.w	r0, #4294967295
 800923c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009240:	4407      	add	r7, r0
 8009242:	eba8 0800 	sub.w	r8, r8, r0
 8009246:	e7e7      	b.n	8009218 <__sflush_r+0xd4>
 8009248:	20400001 	.word	0x20400001

0800924c <_fflush_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	690b      	ldr	r3, [r1, #16]
 8009250:	4605      	mov	r5, r0
 8009252:	460c      	mov	r4, r1
 8009254:	b913      	cbnz	r3, 800925c <_fflush_r+0x10>
 8009256:	2500      	movs	r5, #0
 8009258:	4628      	mov	r0, r5
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	b118      	cbz	r0, 8009266 <_fflush_r+0x1a>
 800925e:	6a03      	ldr	r3, [r0, #32]
 8009260:	b90b      	cbnz	r3, 8009266 <_fflush_r+0x1a>
 8009262:	f7ff f9af 	bl	80085c4 <__sinit>
 8009266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d0f3      	beq.n	8009256 <_fflush_r+0xa>
 800926e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009270:	07d0      	lsls	r0, r2, #31
 8009272:	d404      	bmi.n	800927e <_fflush_r+0x32>
 8009274:	0599      	lsls	r1, r3, #22
 8009276:	d402      	bmi.n	800927e <_fflush_r+0x32>
 8009278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800927a:	f7ff fb9a 	bl	80089b2 <__retarget_lock_acquire_recursive>
 800927e:	4628      	mov	r0, r5
 8009280:	4621      	mov	r1, r4
 8009282:	f7ff ff5f 	bl	8009144 <__sflush_r>
 8009286:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009288:	07da      	lsls	r2, r3, #31
 800928a:	4605      	mov	r5, r0
 800928c:	d4e4      	bmi.n	8009258 <_fflush_r+0xc>
 800928e:	89a3      	ldrh	r3, [r4, #12]
 8009290:	059b      	lsls	r3, r3, #22
 8009292:	d4e1      	bmi.n	8009258 <_fflush_r+0xc>
 8009294:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009296:	f7ff fb8d 	bl	80089b4 <__retarget_lock_release_recursive>
 800929a:	e7dd      	b.n	8009258 <_fflush_r+0xc>

0800929c <__swhatbuf_r>:
 800929c:	b570      	push	{r4, r5, r6, lr}
 800929e:	460c      	mov	r4, r1
 80092a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092a4:	2900      	cmp	r1, #0
 80092a6:	b096      	sub	sp, #88	@ 0x58
 80092a8:	4615      	mov	r5, r2
 80092aa:	461e      	mov	r6, r3
 80092ac:	da0d      	bge.n	80092ca <__swhatbuf_r+0x2e>
 80092ae:	89a3      	ldrh	r3, [r4, #12]
 80092b0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80092b4:	f04f 0100 	mov.w	r1, #0
 80092b8:	bf14      	ite	ne
 80092ba:	2340      	movne	r3, #64	@ 0x40
 80092bc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092c0:	2000      	movs	r0, #0
 80092c2:	6031      	str	r1, [r6, #0]
 80092c4:	602b      	str	r3, [r5, #0]
 80092c6:	b016      	add	sp, #88	@ 0x58
 80092c8:	bd70      	pop	{r4, r5, r6, pc}
 80092ca:	466a      	mov	r2, sp
 80092cc:	f000 f848 	bl	8009360 <_fstat_r>
 80092d0:	2800      	cmp	r0, #0
 80092d2:	dbec      	blt.n	80092ae <__swhatbuf_r+0x12>
 80092d4:	9901      	ldr	r1, [sp, #4]
 80092d6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092da:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092de:	4259      	negs	r1, r3
 80092e0:	4159      	adcs	r1, r3
 80092e2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092e6:	e7eb      	b.n	80092c0 <__swhatbuf_r+0x24>

080092e8 <__smakebuf_r>:
 80092e8:	898b      	ldrh	r3, [r1, #12]
 80092ea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092ec:	079d      	lsls	r5, r3, #30
 80092ee:	4606      	mov	r6, r0
 80092f0:	460c      	mov	r4, r1
 80092f2:	d507      	bpl.n	8009304 <__smakebuf_r+0x1c>
 80092f4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092f8:	6023      	str	r3, [r4, #0]
 80092fa:	6123      	str	r3, [r4, #16]
 80092fc:	2301      	movs	r3, #1
 80092fe:	6163      	str	r3, [r4, #20]
 8009300:	b003      	add	sp, #12
 8009302:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009304:	ab01      	add	r3, sp, #4
 8009306:	466a      	mov	r2, sp
 8009308:	f7ff ffc8 	bl	800929c <__swhatbuf_r>
 800930c:	9f00      	ldr	r7, [sp, #0]
 800930e:	4605      	mov	r5, r0
 8009310:	4639      	mov	r1, r7
 8009312:	4630      	mov	r0, r6
 8009314:	f7ff fbbc 	bl	8008a90 <_malloc_r>
 8009318:	b948      	cbnz	r0, 800932e <__smakebuf_r+0x46>
 800931a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800931e:	059a      	lsls	r2, r3, #22
 8009320:	d4ee      	bmi.n	8009300 <__smakebuf_r+0x18>
 8009322:	f023 0303 	bic.w	r3, r3, #3
 8009326:	f043 0302 	orr.w	r3, r3, #2
 800932a:	81a3      	strh	r3, [r4, #12]
 800932c:	e7e2      	b.n	80092f4 <__smakebuf_r+0xc>
 800932e:	89a3      	ldrh	r3, [r4, #12]
 8009330:	6020      	str	r0, [r4, #0]
 8009332:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009336:	81a3      	strh	r3, [r4, #12]
 8009338:	9b01      	ldr	r3, [sp, #4]
 800933a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800933e:	b15b      	cbz	r3, 8009358 <__smakebuf_r+0x70>
 8009340:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009344:	4630      	mov	r0, r6
 8009346:	f000 f81d 	bl	8009384 <_isatty_r>
 800934a:	b128      	cbz	r0, 8009358 <__smakebuf_r+0x70>
 800934c:	89a3      	ldrh	r3, [r4, #12]
 800934e:	f023 0303 	bic.w	r3, r3, #3
 8009352:	f043 0301 	orr.w	r3, r3, #1
 8009356:	81a3      	strh	r3, [r4, #12]
 8009358:	89a3      	ldrh	r3, [r4, #12]
 800935a:	431d      	orrs	r5, r3
 800935c:	81a5      	strh	r5, [r4, #12]
 800935e:	e7cf      	b.n	8009300 <__smakebuf_r+0x18>

08009360 <_fstat_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d07      	ldr	r5, [pc, #28]	@ (8009380 <_fstat_r+0x20>)
 8009364:	2300      	movs	r3, #0
 8009366:	4604      	mov	r4, r0
 8009368:	4608      	mov	r0, r1
 800936a:	4611      	mov	r1, r2
 800936c:	602b      	str	r3, [r5, #0]
 800936e:	f7f7 fd64 	bl	8000e3a <_fstat>
 8009372:	1c43      	adds	r3, r0, #1
 8009374:	d102      	bne.n	800937c <_fstat_r+0x1c>
 8009376:	682b      	ldr	r3, [r5, #0]
 8009378:	b103      	cbz	r3, 800937c <_fstat_r+0x1c>
 800937a:	6023      	str	r3, [r4, #0]
 800937c:	bd38      	pop	{r3, r4, r5, pc}
 800937e:	bf00      	nop
 8009380:	20002030 	.word	0x20002030

08009384 <_isatty_r>:
 8009384:	b538      	push	{r3, r4, r5, lr}
 8009386:	4d06      	ldr	r5, [pc, #24]	@ (80093a0 <_isatty_r+0x1c>)
 8009388:	2300      	movs	r3, #0
 800938a:	4604      	mov	r4, r0
 800938c:	4608      	mov	r0, r1
 800938e:	602b      	str	r3, [r5, #0]
 8009390:	f7f7 fd63 	bl	8000e5a <_isatty>
 8009394:	1c43      	adds	r3, r0, #1
 8009396:	d102      	bne.n	800939e <_isatty_r+0x1a>
 8009398:	682b      	ldr	r3, [r5, #0]
 800939a:	b103      	cbz	r3, 800939e <_isatty_r+0x1a>
 800939c:	6023      	str	r3, [r4, #0]
 800939e:	bd38      	pop	{r3, r4, r5, pc}
 80093a0:	20002030 	.word	0x20002030

080093a4 <_sbrk_r>:
 80093a4:	b538      	push	{r3, r4, r5, lr}
 80093a6:	4d06      	ldr	r5, [pc, #24]	@ (80093c0 <_sbrk_r+0x1c>)
 80093a8:	2300      	movs	r3, #0
 80093aa:	4604      	mov	r4, r0
 80093ac:	4608      	mov	r0, r1
 80093ae:	602b      	str	r3, [r5, #0]
 80093b0:	f7f7 fd6c 	bl	8000e8c <_sbrk>
 80093b4:	1c43      	adds	r3, r0, #1
 80093b6:	d102      	bne.n	80093be <_sbrk_r+0x1a>
 80093b8:	682b      	ldr	r3, [r5, #0]
 80093ba:	b103      	cbz	r3, 80093be <_sbrk_r+0x1a>
 80093bc:	6023      	str	r3, [r4, #0]
 80093be:	bd38      	pop	{r3, r4, r5, pc}
 80093c0:	20002030 	.word	0x20002030

080093c4 <_init>:
 80093c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093c6:	bf00      	nop
 80093c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ca:	bc08      	pop	{r3}
 80093cc:	469e      	mov	lr, r3
 80093ce:	4770      	bx	lr

080093d0 <_fini>:
 80093d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093d2:	bf00      	nop
 80093d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093d6:	bc08      	pop	{r3}
 80093d8:	469e      	mov	lr, r3
 80093da:	4770      	bx	lr
