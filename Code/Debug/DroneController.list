
DroneController.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00010778  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f70  08010918  08010918  00011918  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011888  08011888  000132d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08011888  08011888  00012888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011890  08011890  000132d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011890  08011890  00012890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08011894  08011894  00012894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000002d4  20000000  08011898  00013000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002294  200002d8  08011b6c  000132d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000256c  08011b6c  0001356c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000132d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001961d  00000000  00000000  00013304  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044bd  00000000  00000000  0002c921  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  00030de0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ee8  00000000  00000000  00032180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001afcb  00000000  00000000  00033068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a778  00000000  00000000  0004e033  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008f9ea  00000000  00000000  000687ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f8195  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006768  00000000  00000000  000f81d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000fe940  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200002d8 	.word	0x200002d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08010900 	.word	0x08010900

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200002dc 	.word	0x200002dc
 80001dc:	08010900 	.word	0x08010900

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_frsub>:
 8000c58:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c5c:	e002      	b.n	8000c64 <__addsf3>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_fsub>:
 8000c60:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c64 <__addsf3>:
 8000c64:	0042      	lsls	r2, r0, #1
 8000c66:	bf1f      	itttt	ne
 8000c68:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c6c:	ea92 0f03 	teqne	r2, r3
 8000c70:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c74:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c78:	d06a      	beq.n	8000d50 <__addsf3+0xec>
 8000c7a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c7e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c82:	bfc1      	itttt	gt
 8000c84:	18d2      	addgt	r2, r2, r3
 8000c86:	4041      	eorgt	r1, r0
 8000c88:	4048      	eorgt	r0, r1
 8000c8a:	4041      	eorgt	r1, r0
 8000c8c:	bfb8      	it	lt
 8000c8e:	425b      	neglt	r3, r3
 8000c90:	2b19      	cmp	r3, #25
 8000c92:	bf88      	it	hi
 8000c94:	4770      	bxhi	lr
 8000c96:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c9e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4240      	negne	r0, r0
 8000ca6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000caa:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000cae:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000cb2:	bf18      	it	ne
 8000cb4:	4249      	negne	r1, r1
 8000cb6:	ea92 0f03 	teq	r2, r3
 8000cba:	d03f      	beq.n	8000d3c <__addsf3+0xd8>
 8000cbc:	f1a2 0201 	sub.w	r2, r2, #1
 8000cc0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cc4:	eb10 000c 	adds.w	r0, r0, ip
 8000cc8:	f1c3 0320 	rsb	r3, r3, #32
 8000ccc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cd0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cd4:	d502      	bpl.n	8000cdc <__addsf3+0x78>
 8000cd6:	4249      	negs	r1, r1
 8000cd8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000cdc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000ce0:	d313      	bcc.n	8000d0a <__addsf3+0xa6>
 8000ce2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000ce6:	d306      	bcc.n	8000cf6 <__addsf3+0x92>
 8000ce8:	0840      	lsrs	r0, r0, #1
 8000cea:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cee:	f102 0201 	add.w	r2, r2, #1
 8000cf2:	2afe      	cmp	r2, #254	@ 0xfe
 8000cf4:	d251      	bcs.n	8000d9a <__addsf3+0x136>
 8000cf6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cfa:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cfe:	bf08      	it	eq
 8000d00:	f020 0001 	biceq.w	r0, r0, #1
 8000d04:	ea40 0003 	orr.w	r0, r0, r3
 8000d08:	4770      	bx	lr
 8000d0a:	0049      	lsls	r1, r1, #1
 8000d0c:	eb40 0000 	adc.w	r0, r0, r0
 8000d10:	3a01      	subs	r2, #1
 8000d12:	bf28      	it	cs
 8000d14:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d18:	d2ed      	bcs.n	8000cf6 <__addsf3+0x92>
 8000d1a:	fab0 fc80 	clz	ip, r0
 8000d1e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d22:	ebb2 020c 	subs.w	r2, r2, ip
 8000d26:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d2a:	bfaa      	itet	ge
 8000d2c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d30:	4252      	neglt	r2, r2
 8000d32:	4318      	orrge	r0, r3
 8000d34:	bfbc      	itt	lt
 8000d36:	40d0      	lsrlt	r0, r2
 8000d38:	4318      	orrlt	r0, r3
 8000d3a:	4770      	bx	lr
 8000d3c:	f092 0f00 	teq	r2, #0
 8000d40:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d44:	bf06      	itte	eq
 8000d46:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d4a:	3201      	addeq	r2, #1
 8000d4c:	3b01      	subne	r3, #1
 8000d4e:	e7b5      	b.n	8000cbc <__addsf3+0x58>
 8000d50:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d54:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d58:	bf18      	it	ne
 8000d5a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d5e:	d021      	beq.n	8000da4 <__addsf3+0x140>
 8000d60:	ea92 0f03 	teq	r2, r3
 8000d64:	d004      	beq.n	8000d70 <__addsf3+0x10c>
 8000d66:	f092 0f00 	teq	r2, #0
 8000d6a:	bf08      	it	eq
 8000d6c:	4608      	moveq	r0, r1
 8000d6e:	4770      	bx	lr
 8000d70:	ea90 0f01 	teq	r0, r1
 8000d74:	bf1c      	itt	ne
 8000d76:	2000      	movne	r0, #0
 8000d78:	4770      	bxne	lr
 8000d7a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d7e:	d104      	bne.n	8000d8a <__addsf3+0x126>
 8000d80:	0040      	lsls	r0, r0, #1
 8000d82:	bf28      	it	cs
 8000d84:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d88:	4770      	bx	lr
 8000d8a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d8e:	bf3c      	itt	cc
 8000d90:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d94:	4770      	bxcc	lr
 8000d96:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d9a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d9e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000da2:	4770      	bx	lr
 8000da4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000da8:	bf16      	itet	ne
 8000daa:	4608      	movne	r0, r1
 8000dac:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000db0:	4601      	movne	r1, r0
 8000db2:	0242      	lsls	r2, r0, #9
 8000db4:	bf06      	itte	eq
 8000db6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000dba:	ea90 0f01 	teqeq	r0, r1
 8000dbe:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000dc2:	4770      	bx	lr

08000dc4 <__aeabi_ui2f>:
 8000dc4:	f04f 0300 	mov.w	r3, #0
 8000dc8:	e004      	b.n	8000dd4 <__aeabi_i2f+0x8>
 8000dca:	bf00      	nop

08000dcc <__aeabi_i2f>:
 8000dcc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dd0:	bf48      	it	mi
 8000dd2:	4240      	negmi	r0, r0
 8000dd4:	ea5f 0c00 	movs.w	ip, r0
 8000dd8:	bf08      	it	eq
 8000dda:	4770      	bxeq	lr
 8000ddc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000de0:	4601      	mov	r1, r0
 8000de2:	f04f 0000 	mov.w	r0, #0
 8000de6:	e01c      	b.n	8000e22 <__aeabi_l2f+0x2a>

08000de8 <__aeabi_ul2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f04f 0300 	mov.w	r3, #0
 8000df4:	e00a      	b.n	8000e0c <__aeabi_l2f+0x14>
 8000df6:	bf00      	nop

08000df8 <__aeabi_l2f>:
 8000df8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dfc:	bf08      	it	eq
 8000dfe:	4770      	bxeq	lr
 8000e00:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000e04:	d502      	bpl.n	8000e0c <__aeabi_l2f+0x14>
 8000e06:	4240      	negs	r0, r0
 8000e08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000e0c:	ea5f 0c01 	movs.w	ip, r1
 8000e10:	bf02      	ittt	eq
 8000e12:	4684      	moveq	ip, r0
 8000e14:	4601      	moveq	r1, r0
 8000e16:	2000      	moveq	r0, #0
 8000e18:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e1c:	bf08      	it	eq
 8000e1e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e22:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e26:	fabc f28c 	clz	r2, ip
 8000e2a:	3a08      	subs	r2, #8
 8000e2c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e30:	db10      	blt.n	8000e54 <__aeabi_l2f+0x5c>
 8000e32:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e36:	4463      	add	r3, ip
 8000e38:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e3c:	f1c2 0220 	rsb	r2, r2, #32
 8000e40:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e44:	fa20 f202 	lsr.w	r2, r0, r2
 8000e48:	eb43 0002 	adc.w	r0, r3, r2
 8000e4c:	bf08      	it	eq
 8000e4e:	f020 0001 	biceq.w	r0, r0, #1
 8000e52:	4770      	bx	lr
 8000e54:	f102 0220 	add.w	r2, r2, #32
 8000e58:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e5c:	f1c2 0220 	rsb	r2, r2, #32
 8000e60:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e64:	fa21 f202 	lsr.w	r2, r1, r2
 8000e68:	eb43 0002 	adc.w	r0, r3, r2
 8000e6c:	bf08      	it	eq
 8000e6e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e72:	4770      	bx	lr

08000e74 <__aeabi_ldivmod>:
 8000e74:	b97b      	cbnz	r3, 8000e96 <__aeabi_ldivmod+0x22>
 8000e76:	b972      	cbnz	r2, 8000e96 <__aeabi_ldivmod+0x22>
 8000e78:	2900      	cmp	r1, #0
 8000e7a:	bfbe      	ittt	lt
 8000e7c:	2000      	movlt	r0, #0
 8000e7e:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000e82:	e006      	blt.n	8000e92 <__aeabi_ldivmod+0x1e>
 8000e84:	bf08      	it	eq
 8000e86:	2800      	cmpeq	r0, #0
 8000e88:	bf1c      	itt	ne
 8000e8a:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000e8e:	f04f 30ff 	movne.w	r0, #4294967295
 8000e92:	f000 b9d3 	b.w	800123c <__aeabi_idiv0>
 8000e96:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e9a:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e9e:	2900      	cmp	r1, #0
 8000ea0:	db09      	blt.n	8000eb6 <__aeabi_ldivmod+0x42>
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	db1a      	blt.n	8000edc <__aeabi_ldivmod+0x68>
 8000ea6:	f000 f84d 	bl	8000f44 <__udivmoddi4>
 8000eaa:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eae:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eb2:	b004      	add	sp, #16
 8000eb4:	4770      	bx	lr
 8000eb6:	4240      	negs	r0, r0
 8000eb8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	db1b      	blt.n	8000ef8 <__aeabi_ldivmod+0x84>
 8000ec0:	f000 f840 	bl	8000f44 <__udivmoddi4>
 8000ec4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ec8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ecc:	b004      	add	sp, #16
 8000ece:	4240      	negs	r0, r0
 8000ed0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ed4:	4252      	negs	r2, r2
 8000ed6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000eda:	4770      	bx	lr
 8000edc:	4252      	negs	r2, r2
 8000ede:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ee2:	f000 f82f 	bl	8000f44 <__udivmoddi4>
 8000ee6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000eea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000eee:	b004      	add	sp, #16
 8000ef0:	4240      	negs	r0, r0
 8000ef2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ef6:	4770      	bx	lr
 8000ef8:	4252      	negs	r2, r2
 8000efa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000efe:	f000 f821 	bl	8000f44 <__udivmoddi4>
 8000f02:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f06:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f0a:	b004      	add	sp, #16
 8000f0c:	4252      	negs	r2, r2
 8000f0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000f12:	4770      	bx	lr

08000f14 <__aeabi_uldivmod>:
 8000f14:	b953      	cbnz	r3, 8000f2c <__aeabi_uldivmod+0x18>
 8000f16:	b94a      	cbnz	r2, 8000f2c <__aeabi_uldivmod+0x18>
 8000f18:	2900      	cmp	r1, #0
 8000f1a:	bf08      	it	eq
 8000f1c:	2800      	cmpeq	r0, #0
 8000f1e:	bf1c      	itt	ne
 8000f20:	f04f 31ff 	movne.w	r1, #4294967295
 8000f24:	f04f 30ff 	movne.w	r0, #4294967295
 8000f28:	f000 b988 	b.w	800123c <__aeabi_idiv0>
 8000f2c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000f30:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000f34:	f000 f806 	bl	8000f44 <__udivmoddi4>
 8000f38:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000f3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000f40:	b004      	add	sp, #16
 8000f42:	4770      	bx	lr

08000f44 <__udivmoddi4>:
 8000f44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f48:	9d08      	ldr	r5, [sp, #32]
 8000f4a:	468e      	mov	lr, r1
 8000f4c:	4604      	mov	r4, r0
 8000f4e:	4688      	mov	r8, r1
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d14a      	bne.n	8000fea <__udivmoddi4+0xa6>
 8000f54:	428a      	cmp	r2, r1
 8000f56:	4617      	mov	r7, r2
 8000f58:	d962      	bls.n	8001020 <__udivmoddi4+0xdc>
 8000f5a:	fab2 f682 	clz	r6, r2
 8000f5e:	b14e      	cbz	r6, 8000f74 <__udivmoddi4+0x30>
 8000f60:	f1c6 0320 	rsb	r3, r6, #32
 8000f64:	fa01 f806 	lsl.w	r8, r1, r6
 8000f68:	fa20 f303 	lsr.w	r3, r0, r3
 8000f6c:	40b7      	lsls	r7, r6
 8000f6e:	ea43 0808 	orr.w	r8, r3, r8
 8000f72:	40b4      	lsls	r4, r6
 8000f74:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f78:	fa1f fc87 	uxth.w	ip, r7
 8000f7c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000f80:	0c23      	lsrs	r3, r4, #16
 8000f82:	fb0e 8811 	mls	r8, lr, r1, r8
 8000f86:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f8a:	fb01 f20c 	mul.w	r2, r1, ip
 8000f8e:	429a      	cmp	r2, r3
 8000f90:	d909      	bls.n	8000fa6 <__udivmoddi4+0x62>
 8000f92:	18fb      	adds	r3, r7, r3
 8000f94:	f101 30ff 	add.w	r0, r1, #4294967295
 8000f98:	f080 80ea 	bcs.w	8001170 <__udivmoddi4+0x22c>
 8000f9c:	429a      	cmp	r2, r3
 8000f9e:	f240 80e7 	bls.w	8001170 <__udivmoddi4+0x22c>
 8000fa2:	3902      	subs	r1, #2
 8000fa4:	443b      	add	r3, r7
 8000fa6:	1a9a      	subs	r2, r3, r2
 8000fa8:	b2a3      	uxth	r3, r4
 8000faa:	fbb2 f0fe 	udiv	r0, r2, lr
 8000fae:	fb0e 2210 	mls	r2, lr, r0, r2
 8000fb2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000fb6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000fba:	459c      	cmp	ip, r3
 8000fbc:	d909      	bls.n	8000fd2 <__udivmoddi4+0x8e>
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fc4:	f080 80d6 	bcs.w	8001174 <__udivmoddi4+0x230>
 8000fc8:	459c      	cmp	ip, r3
 8000fca:	f240 80d3 	bls.w	8001174 <__udivmoddi4+0x230>
 8000fce:	443b      	add	r3, r7
 8000fd0:	3802      	subs	r0, #2
 8000fd2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000fd6:	eba3 030c 	sub.w	r3, r3, ip
 8000fda:	2100      	movs	r1, #0
 8000fdc:	b11d      	cbz	r5, 8000fe6 <__udivmoddi4+0xa2>
 8000fde:	40f3      	lsrs	r3, r6
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	e9c5 3200 	strd	r3, r2, [r5]
 8000fe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fea:	428b      	cmp	r3, r1
 8000fec:	d905      	bls.n	8000ffa <__udivmoddi4+0xb6>
 8000fee:	b10d      	cbz	r5, 8000ff4 <__udivmoddi4+0xb0>
 8000ff0:	e9c5 0100 	strd	r0, r1, [r5]
 8000ff4:	2100      	movs	r1, #0
 8000ff6:	4608      	mov	r0, r1
 8000ff8:	e7f5      	b.n	8000fe6 <__udivmoddi4+0xa2>
 8000ffa:	fab3 f183 	clz	r1, r3
 8000ffe:	2900      	cmp	r1, #0
 8001000:	d146      	bne.n	8001090 <__udivmoddi4+0x14c>
 8001002:	4573      	cmp	r3, lr
 8001004:	d302      	bcc.n	800100c <__udivmoddi4+0xc8>
 8001006:	4282      	cmp	r2, r0
 8001008:	f200 8105 	bhi.w	8001216 <__udivmoddi4+0x2d2>
 800100c:	1a84      	subs	r4, r0, r2
 800100e:	eb6e 0203 	sbc.w	r2, lr, r3
 8001012:	2001      	movs	r0, #1
 8001014:	4690      	mov	r8, r2
 8001016:	2d00      	cmp	r5, #0
 8001018:	d0e5      	beq.n	8000fe6 <__udivmoddi4+0xa2>
 800101a:	e9c5 4800 	strd	r4, r8, [r5]
 800101e:	e7e2      	b.n	8000fe6 <__udivmoddi4+0xa2>
 8001020:	2a00      	cmp	r2, #0
 8001022:	f000 8090 	beq.w	8001146 <__udivmoddi4+0x202>
 8001026:	fab2 f682 	clz	r6, r2
 800102a:	2e00      	cmp	r6, #0
 800102c:	f040 80a4 	bne.w	8001178 <__udivmoddi4+0x234>
 8001030:	1a8a      	subs	r2, r1, r2
 8001032:	0c03      	lsrs	r3, r0, #16
 8001034:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001038:	b280      	uxth	r0, r0
 800103a:	b2bc      	uxth	r4, r7
 800103c:	2101      	movs	r1, #1
 800103e:	fbb2 fcfe 	udiv	ip, r2, lr
 8001042:	fb0e 221c 	mls	r2, lr, ip, r2
 8001046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800104a:	fb04 f20c 	mul.w	r2, r4, ip
 800104e:	429a      	cmp	r2, r3
 8001050:	d907      	bls.n	8001062 <__udivmoddi4+0x11e>
 8001052:	18fb      	adds	r3, r7, r3
 8001054:	f10c 38ff 	add.w	r8, ip, #4294967295
 8001058:	d202      	bcs.n	8001060 <__udivmoddi4+0x11c>
 800105a:	429a      	cmp	r2, r3
 800105c:	f200 80e0 	bhi.w	8001220 <__udivmoddi4+0x2dc>
 8001060:	46c4      	mov	ip, r8
 8001062:	1a9b      	subs	r3, r3, r2
 8001064:	fbb3 f2fe 	udiv	r2, r3, lr
 8001068:	fb0e 3312 	mls	r3, lr, r2, r3
 800106c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8001070:	fb02 f404 	mul.w	r4, r2, r4
 8001074:	429c      	cmp	r4, r3
 8001076:	d907      	bls.n	8001088 <__udivmoddi4+0x144>
 8001078:	18fb      	adds	r3, r7, r3
 800107a:	f102 30ff 	add.w	r0, r2, #4294967295
 800107e:	d202      	bcs.n	8001086 <__udivmoddi4+0x142>
 8001080:	429c      	cmp	r4, r3
 8001082:	f200 80ca 	bhi.w	800121a <__udivmoddi4+0x2d6>
 8001086:	4602      	mov	r2, r0
 8001088:	1b1b      	subs	r3, r3, r4
 800108a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800108e:	e7a5      	b.n	8000fdc <__udivmoddi4+0x98>
 8001090:	f1c1 0620 	rsb	r6, r1, #32
 8001094:	408b      	lsls	r3, r1
 8001096:	fa22 f706 	lsr.w	r7, r2, r6
 800109a:	431f      	orrs	r7, r3
 800109c:	fa0e f401 	lsl.w	r4, lr, r1
 80010a0:	fa20 f306 	lsr.w	r3, r0, r6
 80010a4:	fa2e fe06 	lsr.w	lr, lr, r6
 80010a8:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80010ac:	4323      	orrs	r3, r4
 80010ae:	fa00 f801 	lsl.w	r8, r0, r1
 80010b2:	fa1f fc87 	uxth.w	ip, r7
 80010b6:	fbbe f0f9 	udiv	r0, lr, r9
 80010ba:	0c1c      	lsrs	r4, r3, #16
 80010bc:	fb09 ee10 	mls	lr, r9, r0, lr
 80010c0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80010c4:	fb00 fe0c 	mul.w	lr, r0, ip
 80010c8:	45a6      	cmp	lr, r4
 80010ca:	fa02 f201 	lsl.w	r2, r2, r1
 80010ce:	d909      	bls.n	80010e4 <__udivmoddi4+0x1a0>
 80010d0:	193c      	adds	r4, r7, r4
 80010d2:	f100 3aff 	add.w	sl, r0, #4294967295
 80010d6:	f080 809c 	bcs.w	8001212 <__udivmoddi4+0x2ce>
 80010da:	45a6      	cmp	lr, r4
 80010dc:	f240 8099 	bls.w	8001212 <__udivmoddi4+0x2ce>
 80010e0:	3802      	subs	r0, #2
 80010e2:	443c      	add	r4, r7
 80010e4:	eba4 040e 	sub.w	r4, r4, lr
 80010e8:	fa1f fe83 	uxth.w	lr, r3
 80010ec:	fbb4 f3f9 	udiv	r3, r4, r9
 80010f0:	fb09 4413 	mls	r4, r9, r3, r4
 80010f4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80010f8:	fb03 fc0c 	mul.w	ip, r3, ip
 80010fc:	45a4      	cmp	ip, r4
 80010fe:	d908      	bls.n	8001112 <__udivmoddi4+0x1ce>
 8001100:	193c      	adds	r4, r7, r4
 8001102:	f103 3eff 	add.w	lr, r3, #4294967295
 8001106:	f080 8082 	bcs.w	800120e <__udivmoddi4+0x2ca>
 800110a:	45a4      	cmp	ip, r4
 800110c:	d97f      	bls.n	800120e <__udivmoddi4+0x2ca>
 800110e:	3b02      	subs	r3, #2
 8001110:	443c      	add	r4, r7
 8001112:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001116:	eba4 040c 	sub.w	r4, r4, ip
 800111a:	fba0 ec02 	umull	lr, ip, r0, r2
 800111e:	4564      	cmp	r4, ip
 8001120:	4673      	mov	r3, lr
 8001122:	46e1      	mov	r9, ip
 8001124:	d362      	bcc.n	80011ec <__udivmoddi4+0x2a8>
 8001126:	d05f      	beq.n	80011e8 <__udivmoddi4+0x2a4>
 8001128:	b15d      	cbz	r5, 8001142 <__udivmoddi4+0x1fe>
 800112a:	ebb8 0203 	subs.w	r2, r8, r3
 800112e:	eb64 0409 	sbc.w	r4, r4, r9
 8001132:	fa04 f606 	lsl.w	r6, r4, r6
 8001136:	fa22 f301 	lsr.w	r3, r2, r1
 800113a:	431e      	orrs	r6, r3
 800113c:	40cc      	lsrs	r4, r1
 800113e:	e9c5 6400 	strd	r6, r4, [r5]
 8001142:	2100      	movs	r1, #0
 8001144:	e74f      	b.n	8000fe6 <__udivmoddi4+0xa2>
 8001146:	fbb1 fcf2 	udiv	ip, r1, r2
 800114a:	0c01      	lsrs	r1, r0, #16
 800114c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001150:	b280      	uxth	r0, r0
 8001152:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8001156:	463b      	mov	r3, r7
 8001158:	4638      	mov	r0, r7
 800115a:	463c      	mov	r4, r7
 800115c:	46b8      	mov	r8, r7
 800115e:	46be      	mov	lr, r7
 8001160:	2620      	movs	r6, #32
 8001162:	fbb1 f1f7 	udiv	r1, r1, r7
 8001166:	eba2 0208 	sub.w	r2, r2, r8
 800116a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800116e:	e766      	b.n	800103e <__udivmoddi4+0xfa>
 8001170:	4601      	mov	r1, r0
 8001172:	e718      	b.n	8000fa6 <__udivmoddi4+0x62>
 8001174:	4610      	mov	r0, r2
 8001176:	e72c      	b.n	8000fd2 <__udivmoddi4+0x8e>
 8001178:	f1c6 0220 	rsb	r2, r6, #32
 800117c:	fa2e f302 	lsr.w	r3, lr, r2
 8001180:	40b7      	lsls	r7, r6
 8001182:	40b1      	lsls	r1, r6
 8001184:	fa20 f202 	lsr.w	r2, r0, r2
 8001188:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800118c:	430a      	orrs	r2, r1
 800118e:	fbb3 f8fe 	udiv	r8, r3, lr
 8001192:	b2bc      	uxth	r4, r7
 8001194:	fb0e 3318 	mls	r3, lr, r8, r3
 8001198:	0c11      	lsrs	r1, r2, #16
 800119a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800119e:	fb08 f904 	mul.w	r9, r8, r4
 80011a2:	40b0      	lsls	r0, r6
 80011a4:	4589      	cmp	r9, r1
 80011a6:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80011aa:	b280      	uxth	r0, r0
 80011ac:	d93e      	bls.n	800122c <__udivmoddi4+0x2e8>
 80011ae:	1879      	adds	r1, r7, r1
 80011b0:	f108 3cff 	add.w	ip, r8, #4294967295
 80011b4:	d201      	bcs.n	80011ba <__udivmoddi4+0x276>
 80011b6:	4589      	cmp	r9, r1
 80011b8:	d81f      	bhi.n	80011fa <__udivmoddi4+0x2b6>
 80011ba:	eba1 0109 	sub.w	r1, r1, r9
 80011be:	fbb1 f9fe 	udiv	r9, r1, lr
 80011c2:	fb09 f804 	mul.w	r8, r9, r4
 80011c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80011ca:	b292      	uxth	r2, r2
 80011cc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80011d0:	4542      	cmp	r2, r8
 80011d2:	d229      	bcs.n	8001228 <__udivmoddi4+0x2e4>
 80011d4:	18ba      	adds	r2, r7, r2
 80011d6:	f109 31ff 	add.w	r1, r9, #4294967295
 80011da:	d2c4      	bcs.n	8001166 <__udivmoddi4+0x222>
 80011dc:	4542      	cmp	r2, r8
 80011de:	d2c2      	bcs.n	8001166 <__udivmoddi4+0x222>
 80011e0:	f1a9 0102 	sub.w	r1, r9, #2
 80011e4:	443a      	add	r2, r7
 80011e6:	e7be      	b.n	8001166 <__udivmoddi4+0x222>
 80011e8:	45f0      	cmp	r8, lr
 80011ea:	d29d      	bcs.n	8001128 <__udivmoddi4+0x1e4>
 80011ec:	ebbe 0302 	subs.w	r3, lr, r2
 80011f0:	eb6c 0c07 	sbc.w	ip, ip, r7
 80011f4:	3801      	subs	r0, #1
 80011f6:	46e1      	mov	r9, ip
 80011f8:	e796      	b.n	8001128 <__udivmoddi4+0x1e4>
 80011fa:	eba7 0909 	sub.w	r9, r7, r9
 80011fe:	4449      	add	r1, r9
 8001200:	f1a8 0c02 	sub.w	ip, r8, #2
 8001204:	fbb1 f9fe 	udiv	r9, r1, lr
 8001208:	fb09 f804 	mul.w	r8, r9, r4
 800120c:	e7db      	b.n	80011c6 <__udivmoddi4+0x282>
 800120e:	4673      	mov	r3, lr
 8001210:	e77f      	b.n	8001112 <__udivmoddi4+0x1ce>
 8001212:	4650      	mov	r0, sl
 8001214:	e766      	b.n	80010e4 <__udivmoddi4+0x1a0>
 8001216:	4608      	mov	r0, r1
 8001218:	e6fd      	b.n	8001016 <__udivmoddi4+0xd2>
 800121a:	443b      	add	r3, r7
 800121c:	3a02      	subs	r2, #2
 800121e:	e733      	b.n	8001088 <__udivmoddi4+0x144>
 8001220:	f1ac 0c02 	sub.w	ip, ip, #2
 8001224:	443b      	add	r3, r7
 8001226:	e71c      	b.n	8001062 <__udivmoddi4+0x11e>
 8001228:	4649      	mov	r1, r9
 800122a:	e79c      	b.n	8001166 <__udivmoddi4+0x222>
 800122c:	eba1 0109 	sub.w	r1, r1, r9
 8001230:	46c4      	mov	ip, r8
 8001232:	fbb1 f9fe 	udiv	r9, r1, lr
 8001236:	fb09 f804 	mul.w	r8, r9, r4
 800123a:	e7c4      	b.n	80011c6 <__udivmoddi4+0x282>

0800123c <__aeabi_idiv0>:
 800123c:	4770      	bx	lr
 800123e:	bf00      	nop

08001240 <CS_L>:
#include "bmp280.h"
#include <string.h>
#include <math.h>

/* ---- local helpers ---- */
static inline void CS_L(BMP280_HandleTypeDef *dev) { HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_RESET); }
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6858      	ldr	r0, [r3, #4]
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	891b      	ldrh	r3, [r3, #8]
 8001250:	2200      	movs	r2, #0
 8001252:	4619      	mov	r1, r3
 8001254:	f003 fb48 	bl	80048e8 <HAL_GPIO_WritePin>
 8001258:	bf00      	nop
 800125a:	3708      	adds	r7, #8
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}

08001260 <CS_H>:
static inline void CS_H(BMP280_HandleTypeDef *dev) { HAL_GPIO_WritePin(dev->cs_port, dev->cs_pin, GPIO_PIN_SET); }
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	6858      	ldr	r0, [r3, #4]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	891b      	ldrh	r3, [r3, #8]
 8001270:	2201      	movs	r2, #1
 8001272:	4619      	mov	r1, r3
 8001274:	f003 fb38 	bl	80048e8 <HAL_GPIO_WritePin>
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <bmp280_write_reg>:

/* SPI: in BMP280, MSB of address is replaced by R/W bit: 1=read, 0=write */
static HAL_StatusTypeDef bmp280_write_reg(BMP280_HandleTypeDef *dev, uint8_t reg, uint8_t val) {
 8001280:	b580      	push	{r7, lr}
 8001282:	b084      	sub	sp, #16
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	460b      	mov	r3, r1
 800128a:	70fb      	strb	r3, [r7, #3]
 800128c:	4613      	mov	r3, r2
 800128e:	70bb      	strb	r3, [r7, #2]
  uint8_t tx[2];
  tx[0] = (reg & 0x7F); // RW=0
 8001290:	78fb      	ldrb	r3, [r7, #3]
 8001292:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001296:	b2db      	uxtb	r3, r3
 8001298:	733b      	strb	r3, [r7, #12]
  tx[1] = val;
 800129a:	78bb      	ldrb	r3, [r7, #2]
 800129c:	737b      	strb	r3, [r7, #13]
  CS_L(dev);
 800129e:	6878      	ldr	r0, [r7, #4]
 80012a0:	f7ff ffce 	bl	8001240 <CS_L>
  HAL_StatusTypeDef st = HAL_SPI_Transmit(dev->hspi, tx, sizeof(tx), HAL_MAX_DELAY);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6818      	ldr	r0, [r3, #0]
 80012a8:	f107 010c 	add.w	r1, r7, #12
 80012ac:	f04f 33ff 	mov.w	r3, #4294967295
 80012b0:	2202      	movs	r2, #2
 80012b2:	f005 fa80 	bl	80067b6 <HAL_SPI_Transmit>
 80012b6:	4603      	mov	r3, r0
 80012b8:	73fb      	strb	r3, [r7, #15]
  CS_H(dev);
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f7ff ffd0 	bl	8001260 <CS_H>
  return st;
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}

080012ca <bmp280_read_regs>:

static HAL_StatusTypeDef bmp280_read_regs(BMP280_HandleTypeDef *dev, uint8_t start_reg, uint8_t *dst, uint16_t len) {
 80012ca:	b580      	push	{r7, lr}
 80012cc:	b086      	sub	sp, #24
 80012ce:	af00      	add	r7, sp, #0
 80012d0:	60f8      	str	r0, [r7, #12]
 80012d2:	607a      	str	r2, [r7, #4]
 80012d4:	461a      	mov	r2, r3
 80012d6:	460b      	mov	r3, r1
 80012d8:	72fb      	strb	r3, [r7, #11]
 80012da:	4613      	mov	r3, r2
 80012dc:	813b      	strh	r3, [r7, #8]
  uint8_t cmd = (start_reg | 0x80); // RW=1
 80012de:	7afb      	ldrb	r3, [r7, #11]
 80012e0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	75bb      	strb	r3, [r7, #22]
  CS_L(dev);
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f7ff ffa9 	bl	8001240 <CS_L>
  HAL_StatusTypeDef st = HAL_SPI_Transmit(dev->hspi, &cmd, 1, HAL_MAX_DELAY);
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	6818      	ldr	r0, [r3, #0]
 80012f2:	f107 0116 	add.w	r1, r7, #22
 80012f6:	f04f 33ff 	mov.w	r3, #4294967295
 80012fa:	2201      	movs	r2, #1
 80012fc:	f005 fa5b 	bl	80067b6 <HAL_SPI_Transmit>
 8001300:	4603      	mov	r3, r0
 8001302:	75fb      	strb	r3, [r7, #23]
  if (st == HAL_OK) {
 8001304:	7dfb      	ldrb	r3, [r7, #23]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d109      	bne.n	800131e <bmp280_read_regs+0x54>
    st = HAL_SPI_Receive(dev->hspi, dst, len, HAL_MAX_DELAY); // auto-increments
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	6818      	ldr	r0, [r3, #0]
 800130e:	893a      	ldrh	r2, [r7, #8]
 8001310:	f04f 33ff 	mov.w	r3, #4294967295
 8001314:	6879      	ldr	r1, [r7, #4]
 8001316:	f005 fb92 	bl	8006a3e <HAL_SPI_Receive>
 800131a:	4603      	mov	r3, r0
 800131c:	75fb      	strb	r3, [r7, #23]
  }
  CS_H(dev);
 800131e:	68f8      	ldr	r0, [r7, #12]
 8001320:	f7ff ff9e 	bl	8001260 <CS_H>
  return st;
 8001324:	7dfb      	ldrb	r3, [r7, #23]
}
 8001326:	4618      	mov	r0, r3
 8001328:	3718      	adds	r7, #24
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <bmp280_init_spi>:

/* ---- public API ---- */
HAL_StatusTypeDef bmp280_init_spi(BMP280_HandleTypeDef *dev,
                                  SPI_HandleTypeDef *hspi,
                                  GPIO_TypeDef *cs_port, uint16_t cs_pin)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b086      	sub	sp, #24
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
 800133a:	807b      	strh	r3, [r7, #2]
  memset(dev, 0, sizeof(*dev));
 800133c:	2228      	movs	r2, #40	@ 0x28
 800133e:	2100      	movs	r1, #0
 8001340:	68f8      	ldr	r0, [r7, #12]
 8001342:	f00b ff97 	bl	800d274 <memset>
  dev->hspi = hspi;
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	68ba      	ldr	r2, [r7, #8]
 800134a:	601a      	str	r2, [r3, #0]
  dev->cs_port = cs_port;
 800134c:	68fb      	ldr	r3, [r7, #12]
 800134e:	687a      	ldr	r2, [r7, #4]
 8001350:	605a      	str	r2, [r3, #4]
  dev->cs_pin = cs_pin;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	887a      	ldrh	r2, [r7, #2]
 8001356:	811a      	strh	r2, [r3, #8]

  /* optional: pull CS high */
  HAL_GPIO_WritePin(cs_port, cs_pin, GPIO_PIN_SET);
 8001358:	887b      	ldrh	r3, [r7, #2]
 800135a:	2201      	movs	r2, #1
 800135c:	4619      	mov	r1, r3
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f003 fac2 	bl	80048e8 <HAL_GPIO_WritePin>

  uint8_t id = 0;
 8001364:	2300      	movs	r3, #0
 8001366:	75bb      	strb	r3, [r7, #22]
  HAL_StatusTypeDef st = bmp280_read_id(dev, &id);
 8001368:	f107 0316 	add.w	r3, r7, #22
 800136c:	4619      	mov	r1, r3
 800136e:	68f8      	ldr	r0, [r7, #12]
 8001370:	f000 f857 	bl	8001422 <bmp280_read_id>
 8001374:	4603      	mov	r3, r0
 8001376:	75fb      	strb	r3, [r7, #23]
  if (st != HAL_OK) return st;
 8001378:	7dfb      	ldrb	r3, [r7, #23]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <bmp280_init_spi+0x54>
 800137e:	7dfb      	ldrb	r3, [r7, #23]
 8001380:	e012      	b.n	80013a8 <bmp280_init_spi+0x7a>
  if (id != BMP280_CHIP_ID) return HAL_ERROR;
 8001382:	7dbb      	ldrb	r3, [r7, #22]
 8001384:	2b58      	cmp	r3, #88	@ 0x58
 8001386:	d001      	beq.n	800138c <bmp280_init_spi+0x5e>
 8001388:	2301      	movs	r3, #1
 800138a:	e00d      	b.n	80013a8 <bmp280_init_spi+0x7a>

  /* soft reset and wait for NVM copy to finish */
  st = bmp280_soft_reset(dev);
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f000 f80f 	bl	80013b0 <bmp280_soft_reset>
 8001392:	4603      	mov	r3, r0
 8001394:	75fb      	strb	r3, [r7, #23]
  if (st != HAL_OK) return st;
 8001396:	7dfb      	ldrb	r3, [r7, #23]
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <bmp280_init_spi+0x72>
 800139c:	7dfb      	ldrb	r3, [r7, #23]
 800139e:	e003      	b.n	80013a8 <bmp280_init_spi+0x7a>

  /* read factory calibration */
  return bmp280_read_calibration(dev);
 80013a0:	68f8      	ldr	r0, [r7, #12]
 80013a2:	f000 f84e 	bl	8001442 <bmp280_read_calibration>
 80013a6:	4603      	mov	r3, r0
}
 80013a8:	4618      	mov	r0, r3
 80013aa:	3718      	adds	r7, #24
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}

080013b0 <bmp280_soft_reset>:

HAL_StatusTypeDef bmp280_soft_reset(BMP280_HandleTypeDef *dev) {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b086      	sub	sp, #24
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef st = bmp280_write_reg(dev, BMP280_REG_RESET, BMP280_RESET_VALUE);
 80013b8:	22b6      	movs	r2, #182	@ 0xb6
 80013ba:	21e0      	movs	r1, #224	@ 0xe0
 80013bc:	6878      	ldr	r0, [r7, #4]
 80013be:	f7ff ff5f 	bl	8001280 <bmp280_write_reg>
 80013c2:	4603      	mov	r3, r0
 80013c4:	75fb      	strb	r3, [r7, #23]
  if (st != HAL_OK) return st;
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <bmp280_soft_reset+0x20>
 80013cc:	7dfb      	ldrb	r3, [r7, #23]
 80013ce:	e024      	b.n	800141a <bmp280_soft_reset+0x6a>
  HAL_Delay(4); // t_startup is small, but give a few ms
 80013d0:	2004      	movs	r0, #4
 80013d2:	f002 ff3d 	bl	8004250 <HAL_Delay>
  /* wait for NVM copy (im_update=1 -> 0) */
  uint32_t t0 = HAL_GetTick();
 80013d6:	f002 ff2f 	bl	8004238 <HAL_GetTick>
 80013da:	6138      	str	r0, [r7, #16]
  for (;;) {
    uint8_t status = 0;
 80013dc:	2300      	movs	r3, #0
 80013de:	73fb      	strb	r3, [r7, #15]
    if (bmp280_read_regs(dev, BMP280_REG_STATUS, &status, 1) != HAL_OK) return HAL_ERROR;
 80013e0:	f107 020f 	add.w	r2, r7, #15
 80013e4:	2301      	movs	r3, #1
 80013e6:	21f3      	movs	r1, #243	@ 0xf3
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f7ff ff6e 	bl	80012ca <bmp280_read_regs>
 80013ee:	4603      	mov	r3, r0
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d001      	beq.n	80013f8 <bmp280_soft_reset+0x48>
 80013f4:	2301      	movs	r3, #1
 80013f6:	e010      	b.n	800141a <bmp280_soft_reset+0x6a>
    if ((status & BMP280_STATUS_IM_UPDATE_Msk) == 0) break;
 80013f8:	7bfb      	ldrb	r3, [r7, #15]
 80013fa:	f003 0301 	and.w	r3, r3, #1
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d007      	beq.n	8001412 <bmp280_soft_reset+0x62>
    if ((HAL_GetTick() - t0) > 20) break; // small guard timeout
 8001402:	f002 ff19 	bl	8004238 <HAL_GetTick>
 8001406:	4602      	mov	r2, r0
 8001408:	693b      	ldr	r3, [r7, #16]
 800140a:	1ad3      	subs	r3, r2, r3
 800140c:	2b14      	cmp	r3, #20
 800140e:	d802      	bhi.n	8001416 <bmp280_soft_reset+0x66>
  for (;;) {
 8001410:	e7e4      	b.n	80013dc <bmp280_soft_reset+0x2c>
    if ((status & BMP280_STATUS_IM_UPDATE_Msk) == 0) break;
 8001412:	bf00      	nop
 8001414:	e000      	b.n	8001418 <bmp280_soft_reset+0x68>
    if ((HAL_GetTick() - t0) > 20) break; // small guard timeout
 8001416:	bf00      	nop
  }
  return HAL_OK;
 8001418:	2300      	movs	r3, #0
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <bmp280_read_id>:

HAL_StatusTypeDef bmp280_read_id(BMP280_HandleTypeDef *dev, uint8_t *id_out) {
 8001422:	b580      	push	{r7, lr}
 8001424:	b082      	sub	sp, #8
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
 800142a:	6039      	str	r1, [r7, #0]
  return bmp280_read_regs(dev, BMP280_REG_ID, id_out, 1);
 800142c:	2301      	movs	r3, #1
 800142e:	683a      	ldr	r2, [r7, #0]
 8001430:	21d0      	movs	r1, #208	@ 0xd0
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f7ff ff49 	bl	80012ca <bmp280_read_regs>
 8001438:	4603      	mov	r3, r0
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bd80      	pop	{r7, pc}

08001442 <bmp280_read_calibration>:

HAL_StatusTypeDef bmp280_read_calibration(BMP280_HandleTypeDef *dev) {
 8001442:	b580      	push	{r7, lr}
 8001444:	b08a      	sub	sp, #40	@ 0x28
 8001446:	af00      	add	r7, sp, #0
 8001448:	6078      	str	r0, [r7, #4]
  /* dig_T1..dig_P9 occupy 0x88..0x9F (24 bytes) */
  uint8_t buf[24];
  HAL_StatusTypeDef st = bmp280_read_regs(dev, 0x88, buf, sizeof(buf));
 800144a:	f107 020c 	add.w	r2, r7, #12
 800144e:	2318      	movs	r3, #24
 8001450:	2188      	movs	r1, #136	@ 0x88
 8001452:	6878      	ldr	r0, [r7, #4]
 8001454:	f7ff ff39 	bl	80012ca <bmp280_read_regs>
 8001458:	4603      	mov	r3, r0
 800145a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (st != HAL_OK) return st;
 800145e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001462:	2b00      	cmp	r3, #0
 8001464:	d002      	beq.n	800146c <bmp280_read_calibration+0x2a>
 8001466:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800146a:	e07e      	b.n	800156a <bmp280_read_calibration+0x128>

  dev->dig_T1 = (uint16_t)(buf[1] << 8 | buf[0]);
 800146c:	7b7b      	ldrb	r3, [r7, #13]
 800146e:	b21b      	sxth	r3, r3
 8001470:	021b      	lsls	r3, r3, #8
 8001472:	b21a      	sxth	r2, r3
 8001474:	7b3b      	ldrb	r3, [r7, #12]
 8001476:	b21b      	sxth	r3, r3
 8001478:	4313      	orrs	r3, r2
 800147a:	b21b      	sxth	r3, r3
 800147c:	b29a      	uxth	r2, r3
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	815a      	strh	r2, [r3, #10]
  dev->dig_T2 = (int16_t) (buf[3] << 8 | buf[2]);
 8001482:	7bfb      	ldrb	r3, [r7, #15]
 8001484:	b21b      	sxth	r3, r3
 8001486:	021b      	lsls	r3, r3, #8
 8001488:	b21a      	sxth	r2, r3
 800148a:	7bbb      	ldrb	r3, [r7, #14]
 800148c:	b21b      	sxth	r3, r3
 800148e:	4313      	orrs	r3, r2
 8001490:	b21a      	sxth	r2, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	819a      	strh	r2, [r3, #12]
  dev->dig_T3 = (int16_t) (buf[5] << 8 | buf[4]);
 8001496:	7c7b      	ldrb	r3, [r7, #17]
 8001498:	b21b      	sxth	r3, r3
 800149a:	021b      	lsls	r3, r3, #8
 800149c:	b21a      	sxth	r2, r3
 800149e:	7c3b      	ldrb	r3, [r7, #16]
 80014a0:	b21b      	sxth	r3, r3
 80014a2:	4313      	orrs	r3, r2
 80014a4:	b21a      	sxth	r2, r3
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	81da      	strh	r2, [r3, #14]

  dev->dig_P1 = (uint16_t)(buf[7] << 8 | buf[6]);
 80014aa:	7cfb      	ldrb	r3, [r7, #19]
 80014ac:	b21b      	sxth	r3, r3
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	b21a      	sxth	r2, r3
 80014b2:	7cbb      	ldrb	r3, [r7, #18]
 80014b4:	b21b      	sxth	r3, r3
 80014b6:	4313      	orrs	r3, r2
 80014b8:	b21b      	sxth	r3, r3
 80014ba:	b29a      	uxth	r2, r3
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	821a      	strh	r2, [r3, #16]
  dev->dig_P2 = (int16_t) (buf[9] << 8 | buf[8]);
 80014c0:	7d7b      	ldrb	r3, [r7, #21]
 80014c2:	b21b      	sxth	r3, r3
 80014c4:	021b      	lsls	r3, r3, #8
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	7d3b      	ldrb	r3, [r7, #20]
 80014ca:	b21b      	sxth	r3, r3
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21a      	sxth	r2, r3
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	825a      	strh	r2, [r3, #18]
  dev->dig_P3 = (int16_t) (buf[11] << 8 | buf[10]);
 80014d4:	7dfb      	ldrb	r3, [r7, #23]
 80014d6:	b21b      	sxth	r3, r3
 80014d8:	021b      	lsls	r3, r3, #8
 80014da:	b21a      	sxth	r2, r3
 80014dc:	7dbb      	ldrb	r3, [r7, #22]
 80014de:	b21b      	sxth	r3, r3
 80014e0:	4313      	orrs	r3, r2
 80014e2:	b21a      	sxth	r2, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	829a      	strh	r2, [r3, #20]
  dev->dig_P4 = (int16_t) (buf[13] << 8 | buf[12]);
 80014e8:	7e7b      	ldrb	r3, [r7, #25]
 80014ea:	b21b      	sxth	r3, r3
 80014ec:	021b      	lsls	r3, r3, #8
 80014ee:	b21a      	sxth	r2, r3
 80014f0:	7e3b      	ldrb	r3, [r7, #24]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b21a      	sxth	r2, r3
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	82da      	strh	r2, [r3, #22]
  dev->dig_P5 = (int16_t) (buf[15] << 8 | buf[14]);
 80014fc:	7efb      	ldrb	r3, [r7, #27]
 80014fe:	b21b      	sxth	r3, r3
 8001500:	021b      	lsls	r3, r3, #8
 8001502:	b21a      	sxth	r2, r3
 8001504:	7ebb      	ldrb	r3, [r7, #26]
 8001506:	b21b      	sxth	r3, r3
 8001508:	4313      	orrs	r3, r2
 800150a:	b21a      	sxth	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	831a      	strh	r2, [r3, #24]
  dev->dig_P6 = (int16_t) (buf[17] << 8 | buf[16]);
 8001510:	7f7b      	ldrb	r3, [r7, #29]
 8001512:	b21b      	sxth	r3, r3
 8001514:	021b      	lsls	r3, r3, #8
 8001516:	b21a      	sxth	r2, r3
 8001518:	7f3b      	ldrb	r3, [r7, #28]
 800151a:	b21b      	sxth	r3, r3
 800151c:	4313      	orrs	r3, r2
 800151e:	b21a      	sxth	r2, r3
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	835a      	strh	r2, [r3, #26]
  dev->dig_P7 = (int16_t) (buf[19] << 8 | buf[18]);
 8001524:	7ffb      	ldrb	r3, [r7, #31]
 8001526:	b21b      	sxth	r3, r3
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	b21a      	sxth	r2, r3
 800152c:	7fbb      	ldrb	r3, [r7, #30]
 800152e:	b21b      	sxth	r3, r3
 8001530:	4313      	orrs	r3, r2
 8001532:	b21a      	sxth	r2, r3
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	839a      	strh	r2, [r3, #28]
  dev->dig_P8 = (int16_t) (buf[21] << 8 | buf[20]);
 8001538:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800153c:	b21b      	sxth	r3, r3
 800153e:	021b      	lsls	r3, r3, #8
 8001540:	b21a      	sxth	r2, r3
 8001542:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001546:	b21b      	sxth	r3, r3
 8001548:	4313      	orrs	r3, r2
 800154a:	b21a      	sxth	r2, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	83da      	strh	r2, [r3, #30]
  dev->dig_P9 = (int16_t) (buf[23] << 8 | buf[22]);
 8001550:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8001554:	b21b      	sxth	r3, r3
 8001556:	021b      	lsls	r3, r3, #8
 8001558:	b21a      	sxth	r2, r3
 800155a:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 800155e:	b21b      	sxth	r3, r3
 8001560:	4313      	orrs	r3, r2
 8001562:	b21a      	sxth	r2, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	841a      	strh	r2, [r3, #32]

  return HAL_OK;
 8001568:	2300      	movs	r3, #0
}
 800156a:	4618      	mov	r0, r3
 800156c:	3728      	adds	r7, #40	@ 0x28
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}

08001572 <bmp280_set_config>:

HAL_StatusTypeDef bmp280_set_config(BMP280_HandleTypeDef *dev,
                                    bmp280_tstandby_t t_sb,
                                    bmp280_filter_t filter,
                                    bool spi3w_enable)
{
 8001572:	b580      	push	{r7, lr}
 8001574:	b084      	sub	sp, #16
 8001576:	af00      	add	r7, sp, #0
 8001578:	6078      	str	r0, [r7, #4]
 800157a:	4608      	mov	r0, r1
 800157c:	4611      	mov	r1, r2
 800157e:	461a      	mov	r2, r3
 8001580:	4603      	mov	r3, r0
 8001582:	70fb      	strb	r3, [r7, #3]
 8001584:	460b      	mov	r3, r1
 8001586:	70bb      	strb	r3, [r7, #2]
 8001588:	4613      	mov	r3, r2
 800158a:	707b      	strb	r3, [r7, #1]
  uint8_t cfg = ((uint8_t)t_sb & 0x7) << 5
              | ((uint8_t)filter & 0x7) << 2
 800158c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001590:	015b      	lsls	r3, r3, #5
 8001592:	b25a      	sxtb	r2, r3
 8001594:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	b25b      	sxtb	r3, r3
 800159c:	f003 031c 	and.w	r3, r3, #28
 80015a0:	b25b      	sxtb	r3, r3
 80015a2:	4313      	orrs	r3, r2
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	b2db      	uxtb	r3, r3
              | (spi3w_enable ? 1U : 0U);
 80015a8:	787a      	ldrb	r2, [r7, #1]
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	d001      	beq.n	80015b2 <bmp280_set_config+0x40>
 80015ae:	2201      	movs	r2, #1
 80015b0:	e000      	b.n	80015b4 <bmp280_set_config+0x42>
 80015b2:	2200      	movs	r2, #0
  uint8_t cfg = ((uint8_t)t_sb & 0x7) << 5
 80015b4:	4313      	orrs	r3, r2
 80015b6:	73fb      	strb	r3, [r7, #15]
  return bmp280_write_reg(dev, BMP280_REG_CONFIG, cfg);
 80015b8:	7bfb      	ldrb	r3, [r7, #15]
 80015ba:	461a      	mov	r2, r3
 80015bc:	21f5      	movs	r1, #245	@ 0xf5
 80015be:	6878      	ldr	r0, [r7, #4]
 80015c0:	f7ff fe5e 	bl	8001280 <bmp280_write_reg>
 80015c4:	4603      	mov	r3, r0
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3710      	adds	r7, #16
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}

080015ce <bmp280_set_ctrl_meas>:

HAL_StatusTypeDef bmp280_set_ctrl_meas(BMP280_HandleTypeDef *dev,
                                       bmp280_osrs_t osrs_t,
                                       bmp280_osrs_t osrs_p,
                                       bmp280_mode_t mode)
{
 80015ce:	b580      	push	{r7, lr}
 80015d0:	b084      	sub	sp, #16
 80015d2:	af00      	add	r7, sp, #0
 80015d4:	6078      	str	r0, [r7, #4]
 80015d6:	4608      	mov	r0, r1
 80015d8:	4611      	mov	r1, r2
 80015da:	461a      	mov	r2, r3
 80015dc:	4603      	mov	r3, r0
 80015de:	70fb      	strb	r3, [r7, #3]
 80015e0:	460b      	mov	r3, r1
 80015e2:	70bb      	strb	r3, [r7, #2]
 80015e4:	4613      	mov	r3, r2
 80015e6:	707b      	strb	r3, [r7, #1]
  uint8_t v = ((uint8_t)osrs_t & 0x7) << 5
            | ((uint8_t)osrs_p & 0x7) << 2
 80015e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80015ec:	015b      	lsls	r3, r3, #5
 80015ee:	b25a      	sxtb	r2, r3
 80015f0:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80015f4:	009b      	lsls	r3, r3, #2
 80015f6:	b25b      	sxtb	r3, r3
 80015f8:	f003 031c 	and.w	r3, r3, #28
 80015fc:	b25b      	sxtb	r3, r3
 80015fe:	4313      	orrs	r3, r2
 8001600:	b25a      	sxtb	r2, r3
            | ((uint8_t)mode    & 0x3);
 8001602:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	b25b      	sxtb	r3, r3
 800160c:	4313      	orrs	r3, r2
 800160e:	b25b      	sxtb	r3, r3
  uint8_t v = ((uint8_t)osrs_t & 0x7) << 5
 8001610:	73fb      	strb	r3, [r7, #15]
  return bmp280_write_reg(dev, BMP280_REG_CTRL_MEAS, v);
 8001612:	7bfb      	ldrb	r3, [r7, #15]
 8001614:	461a      	mov	r2, r3
 8001616:	21f4      	movs	r1, #244	@ 0xf4
 8001618:	6878      	ldr	r0, [r7, #4]
 800161a:	f7ff fe31 	bl	8001280 <bmp280_write_reg>
 800161e:	4603      	mov	r3, r0
}
 8001620:	4618      	mov	r0, r3
 8001622:	3710      	adds	r7, #16
 8001624:	46bd      	mov	sp, r7
 8001626:	bd80      	pop	{r7, pc}

08001628 <bmp280_read_raw>:
    if ((HAL_GetTick() - t0) > timeout_ms) return HAL_TIMEOUT;
  }
  return HAL_OK;
}

HAL_StatusTypeDef bmp280_read_raw(BMP280_HandleTypeDef *dev, int32_t *adc_T, int32_t *adc_P) {
 8001628:	b580      	push	{r7, lr}
 800162a:	b08a      	sub	sp, #40	@ 0x28
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  uint8_t buf[6];
  HAL_StatusTypeDef st = bmp280_read_regs(dev, BMP280_REG_PRESS_MSB, buf, sizeof(buf));
 8001634:	f107 0214 	add.w	r2, r7, #20
 8001638:	2306      	movs	r3, #6
 800163a:	21f7      	movs	r1, #247	@ 0xf7
 800163c:	68f8      	ldr	r0, [r7, #12]
 800163e:	f7ff fe44 	bl	80012ca <bmp280_read_regs>
 8001642:	4603      	mov	r3, r0
 8001644:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  if (st != HAL_OK) return st;
 8001648:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800164c:	2b00      	cmp	r3, #0
 800164e:	d002      	beq.n	8001656 <bmp280_read_raw+0x2e>
 8001650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001654:	e024      	b.n	80016a0 <bmp280_read_raw+0x78>

  int32_t up = ((int32_t)buf[0] << 12) | ((int32_t)buf[1] << 4) | ((buf[2] >> 4) & 0x0F);
 8001656:	7d3b      	ldrb	r3, [r7, #20]
 8001658:	031a      	lsls	r2, r3, #12
 800165a:	7d7b      	ldrb	r3, [r7, #21]
 800165c:	011b      	lsls	r3, r3, #4
 800165e:	431a      	orrs	r2, r3
 8001660:	7dbb      	ldrb	r3, [r7, #22]
 8001662:	091b      	lsrs	r3, r3, #4
 8001664:	b2db      	uxtb	r3, r3
 8001666:	f003 030f 	and.w	r3, r3, #15
 800166a:	4313      	orrs	r3, r2
 800166c:	623b      	str	r3, [r7, #32]
  int32_t ut = ((int32_t)buf[3] << 12) | ((int32_t)buf[4] << 4) | ((buf[5] >> 4) & 0x0F);
 800166e:	7dfb      	ldrb	r3, [r7, #23]
 8001670:	031a      	lsls	r2, r3, #12
 8001672:	7e3b      	ldrb	r3, [r7, #24]
 8001674:	011b      	lsls	r3, r3, #4
 8001676:	431a      	orrs	r2, r3
 8001678:	7e7b      	ldrb	r3, [r7, #25]
 800167a:	091b      	lsrs	r3, r3, #4
 800167c:	b2db      	uxtb	r3, r3
 800167e:	f003 030f 	and.w	r3, r3, #15
 8001682:	4313      	orrs	r3, r2
 8001684:	61fb      	str	r3, [r7, #28]

  if (adc_P) *adc_P = up;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d002      	beq.n	8001692 <bmp280_read_raw+0x6a>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	6a3a      	ldr	r2, [r7, #32]
 8001690:	601a      	str	r2, [r3, #0]
  if (adc_T) *adc_T = ut;
 8001692:	68bb      	ldr	r3, [r7, #8]
 8001694:	2b00      	cmp	r3, #0
 8001696:	d002      	beq.n	800169e <bmp280_read_raw+0x76>
 8001698:	68bb      	ldr	r3, [r7, #8]
 800169a:	69fa      	ldr	r2, [r7, #28]
 800169c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800169e:	2300      	movs	r3, #0
}
 80016a0:	4618      	mov	r0, r3
 80016a2:	3728      	adds	r7, #40	@ 0x28
 80016a4:	46bd      	mov	sp, r7
 80016a6:	bd80      	pop	{r7, pc}

080016a8 <bmp280_compensate_T_int32>:

/* ---- Bosch fixed-point compensation (exactly as in datasheet) ---- */

int32_t bmp280_compensate_T_int32(BMP280_HandleTypeDef *dev, int32_t adc_T) {
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
 80016b0:	6039      	str	r1, [r7, #0]
  int32_t var1, var2, T;
  var1 = ((((adc_T >> 3) - ((int32_t)dev->dig_T1 << 1))) * ((int32_t)dev->dig_T2)) >> 11;
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	10da      	asrs	r2, r3, #3
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	895b      	ldrh	r3, [r3, #10]
 80016ba:	005b      	lsls	r3, r3, #1
 80016bc:	1ad3      	subs	r3, r2, r3
 80016be:	687a      	ldr	r2, [r7, #4]
 80016c0:	f9b2 200c 	ldrsh.w	r2, [r2, #12]
 80016c4:	fb02 f303 	mul.w	r3, r2, r3
 80016c8:	12db      	asrs	r3, r3, #11
 80016ca:	617b      	str	r3, [r7, #20]
  var2 = (((((adc_T >> 4) - ((int32_t)dev->dig_T1)) *
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	111b      	asrs	r3, r3, #4
 80016d0:	687a      	ldr	r2, [r7, #4]
 80016d2:	8952      	ldrh	r2, [r2, #10]
 80016d4:	1a9b      	subs	r3, r3, r2
            ((adc_T >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	1112      	asrs	r2, r2, #4
 80016da:	6879      	ldr	r1, [r7, #4]
 80016dc:	8949      	ldrh	r1, [r1, #10]
 80016de:	1a52      	subs	r2, r2, r1
  var2 = (((((adc_T >> 4) - ((int32_t)dev->dig_T1)) *
 80016e0:	fb02 f303 	mul.w	r3, r2, r3
            ((adc_T >> 4) - ((int32_t)dev->dig_T1))) >> 12) * ((int32_t)dev->dig_T3)) >> 14;
 80016e4:	131b      	asrs	r3, r3, #12
 80016e6:	687a      	ldr	r2, [r7, #4]
 80016e8:	f9b2 200e 	ldrsh.w	r2, [r2, #14]
 80016ec:	fb02 f303 	mul.w	r3, r2, r3
  var2 = (((((adc_T >> 4) - ((int32_t)dev->dig_T1)) *
 80016f0:	139b      	asrs	r3, r3, #14
 80016f2:	613b      	str	r3, [r7, #16]
  dev->t_fine = var1 + var2;
 80016f4:	697a      	ldr	r2, [r7, #20]
 80016f6:	693b      	ldr	r3, [r7, #16]
 80016f8:	441a      	add	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	625a      	str	r2, [r3, #36]	@ 0x24
  T = (dev->t_fine * 5 + 128) >> 8;  // 0.01 °C
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001702:	4613      	mov	r3, r2
 8001704:	009b      	lsls	r3, r3, #2
 8001706:	4413      	add	r3, r2
 8001708:	3380      	adds	r3, #128	@ 0x80
 800170a:	121b      	asrs	r3, r3, #8
 800170c:	60fb      	str	r3, [r7, #12]
  return T;
 800170e:	68fb      	ldr	r3, [r7, #12]
}
 8001710:	4618      	mov	r0, r3
 8001712:	371c      	adds	r7, #28
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <bmp280_compensate_P_int64>:

uint32_t bmp280_compensate_P_int64(BMP280_HandleTypeDef *dev, int32_t adc_P) {
 800171c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001720:	b0ca      	sub	sp, #296	@ 0x128
 8001722:	af00      	add	r7, sp, #0
 8001724:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 8001728:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
  int64_t var1, var2, p;
  var1 = ((int64_t)dev->t_fine) - 128000;
 800172c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001732:	17da      	asrs	r2, r3, #31
 8001734:	461c      	mov	r4, r3
 8001736:	4615      	mov	r5, r2
 8001738:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800173c:	f145 3bff 	adc.w	fp, r5, #4294967295
 8001740:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
  var2 = var1 * var1 * (int64_t)dev->dig_P6;
 8001744:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001748:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800174c:	fb03 f102 	mul.w	r1, r3, r2
 8001750:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001754:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001758:	fb02 f303 	mul.w	r3, r2, r3
 800175c:	18ca      	adds	r2, r1, r3
 800175e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001762:	fba3 8903 	umull	r8, r9, r3, r3
 8001766:	eb02 0309 	add.w	r3, r2, r9
 800176a:	4699      	mov	r9, r3
 800176c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001770:	f9b3 301a 	ldrsh.w	r3, [r3, #26]
 8001774:	b21b      	sxth	r3, r3
 8001776:	17da      	asrs	r2, r3, #31
 8001778:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800177c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001780:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001784:	4603      	mov	r3, r0
 8001786:	fb03 f209 	mul.w	r2, r3, r9
 800178a:	460b      	mov	r3, r1
 800178c:	fb08 f303 	mul.w	r3, r8, r3
 8001790:	4413      	add	r3, r2
 8001792:	4602      	mov	r2, r0
 8001794:	fba8 1202 	umull	r1, r2, r8, r2
 8001798:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800179c:	460a      	mov	r2, r1
 800179e:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80017a2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80017a6:	4413      	add	r3, r2
 80017a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80017ac:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80017b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80017b4:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
  var2 = var2 + ((var1 * (int64_t)dev->dig_P5) << 17);
 80017b8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80017bc:	f9b3 3018 	ldrsh.w	r3, [r3, #24]
 80017c0:	b21b      	sxth	r3, r3
 80017c2:	17da      	asrs	r2, r3, #31
 80017c4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80017c8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80017cc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017d0:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80017d4:	462a      	mov	r2, r5
 80017d6:	fb02 f203 	mul.w	r2, r2, r3
 80017da:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80017de:	4621      	mov	r1, r4
 80017e0:	fb01 f303 	mul.w	r3, r1, r3
 80017e4:	441a      	add	r2, r3
 80017e6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80017ea:	4621      	mov	r1, r4
 80017ec:	fba3 1301 	umull	r1, r3, r3, r1
 80017f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80017f4:	460b      	mov	r3, r1
 80017f6:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80017fa:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 80017fe:	18d3      	adds	r3, r2, r3
 8001800:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001804:	f04f 0000 	mov.w	r0, #0
 8001808:	f04f 0100 	mov.w	r1, #0
 800180c:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001810:	462b      	mov	r3, r5
 8001812:	0459      	lsls	r1, r3, #17
 8001814:	4623      	mov	r3, r4
 8001816:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800181a:	4623      	mov	r3, r4
 800181c:	0458      	lsls	r0, r3, #17
 800181e:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001822:	1814      	adds	r4, r2, r0
 8001824:	643c      	str	r4, [r7, #64]	@ 0x40
 8001826:	414b      	adcs	r3, r1
 8001828:	647b      	str	r3, [r7, #68]	@ 0x44
 800182a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 800182e:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
  var2 = var2 + (((int64_t)dev->dig_P4) << 35);
 8001832:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001836:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800183a:	b21b      	sxth	r3, r3
 800183c:	17da      	asrs	r2, r3, #31
 800183e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001842:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001846:	f04f 0000 	mov.w	r0, #0
 800184a:	f04f 0100 	mov.w	r1, #0
 800184e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001852:	00d9      	lsls	r1, r3, #3
 8001854:	2000      	movs	r0, #0
 8001856:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800185a:	1814      	adds	r4, r2, r0
 800185c:	63bc      	str	r4, [r7, #56]	@ 0x38
 800185e:	414b      	adcs	r3, r1
 8001860:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001862:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001866:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
  var1 = (((var1 * var1 * (int64_t)dev->dig_P3) >> 8) + ((var1 * (int64_t)dev->dig_P2) << 12));
 800186a:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800186e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001872:	fb03 f102 	mul.w	r1, r3, r2
 8001876:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800187a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800187e:	fb02 f303 	mul.w	r3, r2, r3
 8001882:	18ca      	adds	r2, r1, r3
 8001884:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001888:	fba3 1303 	umull	r1, r3, r3, r3
 800188c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001890:	460b      	mov	r3, r1
 8001892:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800189a:	18d3      	adds	r3, r2, r3
 800189c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80018a0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80018a4:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80018a8:	b21b      	sxth	r3, r3
 80018aa:	17da      	asrs	r2, r3, #31
 80018ac:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80018b0:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80018b4:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80018b8:	462b      	mov	r3, r5
 80018ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80018be:	4642      	mov	r2, r8
 80018c0:	fb02 f203 	mul.w	r2, r2, r3
 80018c4:	464b      	mov	r3, r9
 80018c6:	4621      	mov	r1, r4
 80018c8:	fb01 f303 	mul.w	r3, r1, r3
 80018cc:	4413      	add	r3, r2
 80018ce:	4622      	mov	r2, r4
 80018d0:	4641      	mov	r1, r8
 80018d2:	fba2 1201 	umull	r1, r2, r2, r1
 80018d6:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80018da:	460a      	mov	r2, r1
 80018dc:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 80018e0:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 80018e4:	4413      	add	r3, r2
 80018e6:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 80018ea:	f04f 0000 	mov.w	r0, #0
 80018ee:	f04f 0100 	mov.w	r1, #0
 80018f2:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 80018f6:	4623      	mov	r3, r4
 80018f8:	0a18      	lsrs	r0, r3, #8
 80018fa:	462b      	mov	r3, r5
 80018fc:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001900:	462b      	mov	r3, r5
 8001902:	1219      	asrs	r1, r3, #8
 8001904:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001908:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800190c:	b21b      	sxth	r3, r3
 800190e:	17da      	asrs	r2, r3, #31
 8001910:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001914:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8001918:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800191c:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001920:	464a      	mov	r2, r9
 8001922:	fb02 f203 	mul.w	r2, r2, r3
 8001926:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800192a:	4644      	mov	r4, r8
 800192c:	fb04 f303 	mul.w	r3, r4, r3
 8001930:	441a      	add	r2, r3
 8001932:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001936:	4644      	mov	r4, r8
 8001938:	fba3 4304 	umull	r4, r3, r3, r4
 800193c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001940:	4623      	mov	r3, r4
 8001942:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001946:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800194a:	18d3      	adds	r3, r2, r3
 800194c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001950:	f04f 0200 	mov.w	r2, #0
 8001954:	f04f 0300 	mov.w	r3, #0
 8001958:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800195c:	464c      	mov	r4, r9
 800195e:	0323      	lsls	r3, r4, #12
 8001960:	4644      	mov	r4, r8
 8001962:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001966:	4644      	mov	r4, r8
 8001968:	0322      	lsls	r2, r4, #12
 800196a:	1884      	adds	r4, r0, r2
 800196c:	633c      	str	r4, [r7, #48]	@ 0x30
 800196e:	eb41 0303 	adc.w	r3, r1, r3
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34
 8001974:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8001978:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
  var1 = (((((int64_t)1) << 47) + var1) * (int64_t)dev->dig_P1) >> 33;
 800197c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001980:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001984:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 8001988:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800198c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001990:	8a1b      	ldrh	r3, [r3, #16]
 8001992:	b29b      	uxth	r3, r3
 8001994:	2200      	movs	r2, #0
 8001996:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800199a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800199e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80019a2:	462b      	mov	r3, r5
 80019a4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80019a8:	4642      	mov	r2, r8
 80019aa:	fb02 f203 	mul.w	r2, r2, r3
 80019ae:	464b      	mov	r3, r9
 80019b0:	4621      	mov	r1, r4
 80019b2:	fb01 f303 	mul.w	r3, r1, r3
 80019b6:	4413      	add	r3, r2
 80019b8:	4622      	mov	r2, r4
 80019ba:	4641      	mov	r1, r8
 80019bc:	fba2 1201 	umull	r1, r2, r2, r1
 80019c0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80019c4:	460a      	mov	r2, r1
 80019c6:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80019ca:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80019ce:	4413      	add	r3, r2
 80019d0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80019d4:	f04f 0200 	mov.w	r2, #0
 80019d8:	f04f 0300 	mov.w	r3, #0
 80019dc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 80019e0:	4629      	mov	r1, r5
 80019e2:	104a      	asrs	r2, r1, #1
 80019e4:	4629      	mov	r1, r5
 80019e6:	17cb      	asrs	r3, r1, #31
 80019e8:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  if (var1 == 0) return 0;  // avoid div by zero
 80019ec:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80019f0:	4313      	orrs	r3, r2
 80019f2:	d101      	bne.n	80019f8 <bmp280_compensate_P_int64+0x2dc>
 80019f4:	2300      	movs	r3, #0
 80019f6:	e148      	b.n	8001c8a <bmp280_compensate_P_int64+0x56e>
  p = 1048576 - adc_P;
 80019f8:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 80019fc:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001a00:	17da      	asrs	r2, r3, #31
 8001a02:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001a04:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001a06:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8001a0a:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
  p = (((p << 31) - var2) * 3125) / var1;
 8001a0e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a12:	105b      	asrs	r3, r3, #1
 8001a14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8001a18:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001a1c:	07db      	lsls	r3, r3, #31
 8001a1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a22:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001a26:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8001a2a:	4621      	mov	r1, r4
 8001a2c:	1a89      	subs	r1, r1, r2
 8001a2e:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001a30:	4629      	mov	r1, r5
 8001a32:	eb61 0303 	sbc.w	r3, r1, r3
 8001a36:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a38:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a3c:	4622      	mov	r2, r4
 8001a3e:	462b      	mov	r3, r5
 8001a40:	1891      	adds	r1, r2, r2
 8001a42:	6239      	str	r1, [r7, #32]
 8001a44:	415b      	adcs	r3, r3
 8001a46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001a48:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8001a4c:	4621      	mov	r1, r4
 8001a4e:	1851      	adds	r1, r2, r1
 8001a50:	61b9      	str	r1, [r7, #24]
 8001a52:	4629      	mov	r1, r5
 8001a54:	414b      	adcs	r3, r1
 8001a56:	61fb      	str	r3, [r7, #28]
 8001a58:	f04f 0200 	mov.w	r2, #0
 8001a5c:	f04f 0300 	mov.w	r3, #0
 8001a60:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001a64:	4649      	mov	r1, r9
 8001a66:	018b      	lsls	r3, r1, #6
 8001a68:	4641      	mov	r1, r8
 8001a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001a6e:	4641      	mov	r1, r8
 8001a70:	018a      	lsls	r2, r1, #6
 8001a72:	4641      	mov	r1, r8
 8001a74:	1889      	adds	r1, r1, r2
 8001a76:	6139      	str	r1, [r7, #16]
 8001a78:	4649      	mov	r1, r9
 8001a7a:	eb43 0101 	adc.w	r1, r3, r1
 8001a7e:	6179      	str	r1, [r7, #20]
 8001a80:	f04f 0200 	mov.w	r2, #0
 8001a84:	f04f 0300 	mov.w	r3, #0
 8001a88:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8001a8c:	4649      	mov	r1, r9
 8001a8e:	008b      	lsls	r3, r1, #2
 8001a90:	4641      	mov	r1, r8
 8001a92:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001a96:	4641      	mov	r1, r8
 8001a98:	008a      	lsls	r2, r1, #2
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	4622      	mov	r2, r4
 8001aa2:	189b      	adds	r3, r3, r2
 8001aa4:	60bb      	str	r3, [r7, #8]
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	462a      	mov	r2, r5
 8001aaa:	eb42 0303 	adc.w	r3, r2, r3
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	f04f 0200 	mov.w	r2, #0
 8001ab4:	f04f 0300 	mov.w	r3, #0
 8001ab8:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8001abc:	4649      	mov	r1, r9
 8001abe:	008b      	lsls	r3, r1, #2
 8001ac0:	4641      	mov	r1, r8
 8001ac2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001ac6:	4641      	mov	r1, r8
 8001ac8:	008a      	lsls	r2, r1, #2
 8001aca:	4610      	mov	r0, r2
 8001acc:	4619      	mov	r1, r3
 8001ace:	4603      	mov	r3, r0
 8001ad0:	4622      	mov	r2, r4
 8001ad2:	189b      	adds	r3, r3, r2
 8001ad4:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ad6:	462b      	mov	r3, r5
 8001ad8:	460a      	mov	r2, r1
 8001ada:	eb42 0303 	adc.w	r3, r2, r3
 8001ade:	677b      	str	r3, [r7, #116]	@ 0x74
 8001ae0:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001ae4:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8001ae8:	f7ff f9c4 	bl	8000e74 <__aeabi_ldivmod>
 8001aec:	4602      	mov	r2, r0
 8001aee:	460b      	mov	r3, r1
 8001af0:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
  var1 = ((int64_t)dev->dig_P9 * (p >> 13) * (p >> 13)) >> 25;
 8001af4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001af8:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001afc:	b21b      	sxth	r3, r3
 8001afe:	17da      	asrs	r2, r3, #31
 8001b00:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b02:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b04:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001b08:	f04f 0000 	mov.w	r0, #0
 8001b0c:	f04f 0100 	mov.w	r1, #0
 8001b10:	0b50      	lsrs	r0, r2, #13
 8001b12:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b16:	1359      	asrs	r1, r3, #13
 8001b18:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 8001b1c:	462b      	mov	r3, r5
 8001b1e:	fb00 f203 	mul.w	r2, r0, r3
 8001b22:	4623      	mov	r3, r4
 8001b24:	fb03 f301 	mul.w	r3, r3, r1
 8001b28:	4413      	add	r3, r2
 8001b2a:	4622      	mov	r2, r4
 8001b2c:	fba2 1200 	umull	r1, r2, r2, r0
 8001b30:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001b34:	460a      	mov	r2, r1
 8001b36:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 8001b3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001b3e:	4413      	add	r3, r2
 8001b40:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001b44:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8001b48:	f04f 0000 	mov.w	r0, #0
 8001b4c:	f04f 0100 	mov.w	r1, #0
 8001b50:	0b50      	lsrs	r0, r2, #13
 8001b52:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001b56:	1359      	asrs	r1, r3, #13
 8001b58:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 8001b5c:	462b      	mov	r3, r5
 8001b5e:	fb00 f203 	mul.w	r2, r0, r3
 8001b62:	4623      	mov	r3, r4
 8001b64:	fb03 f301 	mul.w	r3, r3, r1
 8001b68:	4413      	add	r3, r2
 8001b6a:	4622      	mov	r2, r4
 8001b6c:	fba2 1200 	umull	r1, r2, r2, r0
 8001b70:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001b74:	460a      	mov	r2, r1
 8001b76:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8001b7a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001b7e:	4413      	add	r3, r2
 8001b80:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001b84:	f04f 0200 	mov.w	r2, #0
 8001b88:	f04f 0300 	mov.w	r3, #0
 8001b8c:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001b90:	4621      	mov	r1, r4
 8001b92:	0e4a      	lsrs	r2, r1, #25
 8001b94:	4629      	mov	r1, r5
 8001b96:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	164b      	asrs	r3, r1, #25
 8001b9e:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
  var2 = ((int64_t)dev->dig_P8 * p) >> 19;
 8001ba2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001ba6:	f9b3 301e 	ldrsh.w	r3, [r3, #30]
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	17da      	asrs	r2, r3, #31
 8001bae:	663b      	str	r3, [r7, #96]	@ 0x60
 8001bb0:	667a      	str	r2, [r7, #100]	@ 0x64
 8001bb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001bb6:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001bba:	462a      	mov	r2, r5
 8001bbc:	fb02 f203 	mul.w	r2, r2, r3
 8001bc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	fb01 f303 	mul.w	r3, r1, r3
 8001bca:	4413      	add	r3, r2
 8001bcc:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001bd0:	4621      	mov	r1, r4
 8001bd2:	fba2 1201 	umull	r1, r2, r2, r1
 8001bd6:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8001bda:	460a      	mov	r2, r1
 8001bdc:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001be0:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001be4:	4413      	add	r3, r2
 8001be6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	f04f 0300 	mov.w	r3, #0
 8001bf2:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001bf6:	4621      	mov	r1, r4
 8001bf8:	0cca      	lsrs	r2, r1, #19
 8001bfa:	4629      	mov	r1, r5
 8001bfc:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001c00:	4629      	mov	r1, r5
 8001c02:	14cb      	asrs	r3, r1, #19
 8001c04:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
  p = ((p + var1 + var2) >> 8) + (((int64_t)dev->dig_P7) << 4);
 8001c08:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8001c0c:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001c10:	1884      	adds	r4, r0, r2
 8001c12:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001c14:	eb41 0303 	adc.w	r3, r1, r3
 8001c18:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001c1a:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001c1e:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001c22:	4621      	mov	r1, r4
 8001c24:	1889      	adds	r1, r1, r2
 8001c26:	6539      	str	r1, [r7, #80]	@ 0x50
 8001c28:	4629      	mov	r1, r5
 8001c2a:	eb43 0101 	adc.w	r1, r3, r1
 8001c2e:	6579      	str	r1, [r7, #84]	@ 0x54
 8001c30:	f04f 0000 	mov.w	r0, #0
 8001c34:	f04f 0100 	mov.w	r1, #0
 8001c38:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8001c3c:	4623      	mov	r3, r4
 8001c3e:	0a18      	lsrs	r0, r3, #8
 8001c40:	462b      	mov	r3, r5
 8001c42:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001c46:	462b      	mov	r3, r5
 8001c48:	1219      	asrs	r1, r3, #8
 8001c4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001c4e:	f9b3 301c 	ldrsh.w	r3, [r3, #28]
 8001c52:	b21b      	sxth	r3, r3
 8001c54:	17da      	asrs	r2, r3, #31
 8001c56:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001c58:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001c5a:	f04f 0200 	mov.w	r2, #0
 8001c5e:	f04f 0300 	mov.w	r3, #0
 8001c62:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001c66:	464c      	mov	r4, r9
 8001c68:	0123      	lsls	r3, r4, #4
 8001c6a:	4644      	mov	r4, r8
 8001c6c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001c70:	4644      	mov	r4, r8
 8001c72:	0122      	lsls	r2, r4, #4
 8001c74:	1884      	adds	r4, r0, r2
 8001c76:	603c      	str	r4, [r7, #0]
 8001c78:	eb41 0303 	adc.w	r3, r1, r3
 8001c7c:	607b      	str	r3, [r7, #4]
 8001c7e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001c82:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
  return (uint32_t)p; // Q24.8 (Pa)
 8001c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001c90:	46bd      	mov	sp, r7
 8001c92:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
	...

08001c98 <bmp280_read_temp_press>:
  uint32_t p_q24_8 = bmp280_compensate_P_int64(dev, adc_P);
  if (press_pa) *press_pa = ((float)p_q24_8) / 256.0f;
  return HAL_OK;
}

HAL_StatusTypeDef bmp280_read_temp_press(BMP280_HandleTypeDef *dev, float *temp_c, float *press_pa) {
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	60f8      	str	r0, [r7, #12]
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
  int32_t adc_T, adc_P;
  if (bmp280_read_raw(dev, &adc_T, &adc_P) != HAL_OK) return HAL_ERROR;
 8001ca4:	f107 0210 	add.w	r2, r7, #16
 8001ca8:	f107 0314 	add.w	r3, r7, #20
 8001cac:	4619      	mov	r1, r3
 8001cae:	68f8      	ldr	r0, [r7, #12]
 8001cb0:	f7ff fcba 	bl	8001628 <bmp280_read_raw>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <bmp280_read_temp_press+0x26>
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e02a      	b.n	8001d14 <bmp280_read_temp_press+0x7c>
  int32_t T_01deg = bmp280_compensate_T_int32(dev, adc_T);
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	4619      	mov	r1, r3
 8001cc2:	68f8      	ldr	r0, [r7, #12]
 8001cc4:	f7ff fcf0 	bl	80016a8 <bmp280_compensate_T_int32>
 8001cc8:	61f8      	str	r0, [r7, #28]
  uint32_t p_q24_8 = bmp280_compensate_P_int64(dev, adc_P);
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	68f8      	ldr	r0, [r7, #12]
 8001cd0:	f7ff fd24 	bl	800171c <bmp280_compensate_P_int64>
 8001cd4:	61b8      	str	r0, [r7, #24]
  if (temp_c)  *temp_c  = (float)T_01deg / 100.0f;
 8001cd6:	68bb      	ldr	r3, [r7, #8]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d00b      	beq.n	8001cf4 <bmp280_read_temp_press+0x5c>
 8001cdc:	69fb      	ldr	r3, [r7, #28]
 8001cde:	ee07 3a90 	vmov	s15, r3
 8001ce2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ce6:	eddf 6a0d 	vldr	s13, [pc, #52]	@ 8001d1c <bmp280_read_temp_press+0x84>
 8001cea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cee:	68bb      	ldr	r3, [r7, #8]
 8001cf0:	edc3 7a00 	vstr	s15, [r3]
  if (press_pa) *press_pa = (float)p_q24_8 / 256.0f;
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00b      	beq.n	8001d12 <bmp280_read_temp_press+0x7a>
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	ee07 3a90 	vmov	s15, r3
 8001d00:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001d04:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001d20 <bmp280_read_temp_press+0x88>
 8001d08:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	edc3 7a00 	vstr	s15, [r3]
  return HAL_OK;
 8001d12:	2300      	movs	r3, #0
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3720      	adds	r7, #32
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	42c80000 	.word	0x42c80000
 8001d20:	43800000 	.word	0x43800000

08001d24 <GPS_Init>:
/**
 * @brief Initialize GPS module
 * @retval HAL_OK if successful
 */
HAL_StatusTypeDef GPS_Init(void)
{
 8001d24:	b580      	push	{r7, lr}
 8001d26:	af00      	add	r7, sp, #0
    // Clear GPS state
    memset(&gps_state, 0, sizeof(gps_state));
 8001d28:	f44f 722a 	mov.w	r2, #680	@ 0x2a8
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	481a      	ldr	r0, [pc, #104]	@ (8001d98 <GPS_Init+0x74>)
 8001d30:	f00b faa0 	bl	800d274 <memset>

    printf("[GPS] Initializing...\r\n");
 8001d34:	4819      	ldr	r0, [pc, #100]	@ (8001d9c <GPS_Init+0x78>)
 8001d36:	f00b f8ab 	bl	800ce90 <puts>

    // Enable default NMEA sentences (RMC, VTG, GGA, GSA, GSV, GLL, and GPTXT)
    GPS_SendCommand("PMTK314,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0");
 8001d3a:	4819      	ldr	r0, [pc, #100]	@ (8001da0 <GPS_Init+0x7c>)
 8001d3c:	f000 f8d0 	bl	8001ee0 <GPS_SendCommand>
    HAL_Delay(100);
 8001d40:	2064      	movs	r0, #100	@ 0x64
 8001d42:	f002 fa85 	bl	8004250 <HAL_Delay>

    // Set update rate to 1Hz
    GPS_SendCommand("PMTK220,1000");
 8001d46:	4817      	ldr	r0, [pc, #92]	@ (8001da4 <GPS_Init+0x80>)
 8001d48:	f000 f8ca 	bl	8001ee0 <GPS_SendCommand>
    HAL_Delay(100);
 8001d4c:	2064      	movs	r0, #100	@ 0x64
 8001d4e:	f002 fa7f 	bl	8004250 <HAL_Delay>

    // Enable AIC (Active Interference Cancellation)
    GPS_SendCommand("PMTK286,1");
 8001d52:	4815      	ldr	r0, [pc, #84]	@ (8001da8 <GPS_Init+0x84>)
 8001d54:	f000 f8c4 	bl	8001ee0 <GPS_SendCommand>
    HAL_Delay(100);
 8001d58:	2064      	movs	r0, #100	@ 0x64
 8001d5a:	f002 fa79 	bl	8004250 <HAL_Delay>

    // Enable EASY (default on)
    GPS_SendCommand("PMTK869,1,1");
 8001d5e:	4813      	ldr	r0, [pc, #76]	@ (8001dac <GPS_Init+0x88>)
 8001d60:	f000 f8be 	bl	8001ee0 <GPS_SendCommand>
    HAL_Delay(100);
 8001d64:	2064      	movs	r0, #100	@ 0x64
 8001d66:	f002 fa73 	bl	8004250 <HAL_Delay>

    // Enable UART interrupt for receiving data
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2105      	movs	r1, #5
 8001d6e:	2025      	movs	r0, #37	@ 0x25
 8001d70:	f002 fb6d 	bl	800444e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001d74:	2025      	movs	r0, #37	@ 0x25
 8001d76:	f002 fb86 	bl	8004486 <HAL_NVIC_EnableIRQ>
    __HAL_UART_ENABLE_IT(&GPS_UART_HANDLE, UART_IT_RXNE);
 8001d7a:	4b0d      	ldr	r3, [pc, #52]	@ (8001db0 <GPS_Init+0x8c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	68da      	ldr	r2, [r3, #12]
 8001d80:	4b0b      	ldr	r3, [pc, #44]	@ (8001db0 <GPS_Init+0x8c>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f042 0220 	orr.w	r2, r2, #32
 8001d88:	60da      	str	r2, [r3, #12]

    printf("[GPS] Initialized successfully\r\n");
 8001d8a:	480a      	ldr	r0, [pc, #40]	@ (8001db4 <GPS_Init+0x90>)
 8001d8c:	f00b f880 	bl	800ce90 <puts>
    return HAL_OK;
 8001d90:	2300      	movs	r3, #0
}
 8001d92:	4618      	mov	r0, r3
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	200002f8 	.word	0x200002f8
 8001d9c:	08010918 	.word	0x08010918
 8001da0:	08010930 	.word	0x08010930
 8001da4:	08010960 	.word	0x08010960
 8001da8:	08010970 	.word	0x08010970
 8001dac:	0801097c 	.word	0x0801097c
 8001db0:	200006e0 	.word	0x200006e0
 8001db4:	08010988 	.word	0x08010988

08001db8 <GPS_IRQHandler>:

/**
 * @brief GPS UART interrupt handler - call this from USART1_IRQHandler
 */
void GPS_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	b082      	sub	sp, #8
 8001dbc:	af00      	add	r7, sp, #0
    if (__HAL_UART_GET_FLAG(&GPS_UART_HANDLE, UART_FLAG_RXNE))
 8001dbe:	4b43      	ldr	r3, [pc, #268]	@ (8001ecc <GPS_IRQHandler+0x114>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 0320 	and.w	r3, r3, #32
 8001dc8:	2b20      	cmp	r3, #32
 8001dca:	d169      	bne.n	8001ea0 <GPS_IRQHandler+0xe8>
    {
        gps_irq_events++;
 8001dcc:	4b40      	ldr	r3, [pc, #256]	@ (8001ed0 <GPS_IRQHandler+0x118>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	4a3f      	ldr	r2, [pc, #252]	@ (8001ed0 <GPS_IRQHandler+0x118>)
 8001dd4:	6013      	str	r3, [r2, #0]

        // Read the received byte
        uint8_t received_byte = (uint8_t)(GPS_UART_HANDLE.Instance->DR & 0xFF);
 8001dd6:	4b3d      	ldr	r3, [pc, #244]	@ (8001ecc <GPS_IRQHandler+0x114>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	71fb      	strb	r3, [r7, #7]
        gps_rx_total++;
 8001dde:	4b3d      	ldr	r3, [pc, #244]	@ (8001ed4 <GPS_IRQHandler+0x11c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	3301      	adds	r3, #1
 8001de4:	4a3b      	ldr	r2, [pc, #236]	@ (8001ed4 <GPS_IRQHandler+0x11c>)
 8001de6:	6013      	str	r3, [r2, #0]

        // Handle received byte
        if (received_byte == '$')
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	2b24      	cmp	r3, #36	@ 0x24
 8001dec:	d110      	bne.n	8001e10 <GPS_IRQHandler+0x58>
        {
            // Start of new NMEA sentence
            gps_state.rx_index = 0;
 8001dee:	4b3a      	ldr	r3, [pc, #232]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
            gps_state.rx_buffer[gps_state.rx_index++] = received_byte;
 8001df6:	4b38      	ldr	r3, [pc, #224]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001df8:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8001dfc:	1c5a      	adds	r2, r3, #1
 8001dfe:	b291      	uxth	r1, r2
 8001e00:	4a35      	ldr	r2, [pc, #212]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e02:	f8a2 1200 	strh.w	r1, [r2, #512]	@ 0x200
 8001e06:	4619      	mov	r1, r3
 8001e08:	4a33      	ldr	r2, [pc, #204]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	5453      	strb	r3, [r2, r1]
 8001e0e:	e042      	b.n	8001e96 <GPS_IRQHandler+0xde>
        }
        else if (received_byte == '\n')
 8001e10:	79fb      	ldrb	r3, [r7, #7]
 8001e12:	2b0a      	cmp	r3, #10
 8001e14:	d12a      	bne.n	8001e6c <GPS_IRQHandler+0xb4>
        {
            // End of NMEA sentence
            if (gps_state.rx_index > 0 && gps_state.rx_index < GPS_RX_BUFFER_SIZE - 1)
 8001e16:	4b30      	ldr	r3, [pc, #192]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e18:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d020      	beq.n	8001e62 <GPS_IRQHandler+0xaa>
 8001e20:	4b2d      	ldr	r3, [pc, #180]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e22:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8001e26:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8001e2a:	d81a      	bhi.n	8001e62 <GPS_IRQHandler+0xaa>
            {
                gps_state.rx_buffer[gps_state.rx_index] = '\0';
 8001e2c:	4b2a      	ldr	r3, [pc, #168]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e2e:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8001e32:	461a      	mov	r2, r3
 8001e34:	4b28      	ldr	r3, [pc, #160]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e36:	2100      	movs	r1, #0
 8001e38:	5499      	strb	r1, [r3, r2]

                // Copy to current sentence buffer
                if (gps_state.rx_index < GPS_MAX_SENTENCE_LEN - 1)
 8001e3a:	4b27      	ldr	r3, [pc, #156]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e3c:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8001e40:	2b62      	cmp	r3, #98	@ 0x62
 8001e42:	d80e      	bhi.n	8001e62 <GPS_IRQHandler+0xaa>
                {
                    strcpy(gps_state.current_sentence, (char*)gps_state.rx_buffer);
 8001e44:	4924      	ldr	r1, [pc, #144]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e46:	4825      	ldr	r0, [pc, #148]	@ (8001edc <GPS_IRQHandler+0x124>)
 8001e48:	f00b fa93 	bl	800d372 <strcpy>
                    gps_state.sentence_ready = true;
 8001e4c:	4b22      	ldr	r3, [pc, #136]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e4e:	2201      	movs	r2, #1
 8001e50:	f883 2202 	strb.w	r2, [r3, #514]	@ 0x202
                    gps_state.sentences_received++;
 8001e54:	4b20      	ldr	r3, [pc, #128]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e56:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
 8001e5a:	3301      	adds	r3, #1
 8001e5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e5e:	f8c2 3298 	str.w	r3, [r2, #664]	@ 0x298
                }
            }
            gps_state.rx_index = 0;
 8001e62:	4b1d      	ldr	r3, [pc, #116]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	f8a3 2200 	strh.w	r2, [r3, #512]	@ 0x200
 8001e6a:	e014      	b.n	8001e96 <GPS_IRQHandler+0xde>
        }
        else if (received_byte != '\r')
 8001e6c:	79fb      	ldrb	r3, [r7, #7]
 8001e6e:	2b0d      	cmp	r3, #13
 8001e70:	d011      	beq.n	8001e96 <GPS_IRQHandler+0xde>
        {
            // Add to buffer (ignore carriage return)
            if (gps_state.rx_index < GPS_RX_BUFFER_SIZE - 1)
 8001e72:	4b19      	ldr	r3, [pc, #100]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e74:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8001e78:	f5b3 7fff 	cmp.w	r3, #510	@ 0x1fe
 8001e7c:	d80b      	bhi.n	8001e96 <GPS_IRQHandler+0xde>
            {
                gps_state.rx_buffer[gps_state.rx_index++] = received_byte;
 8001e7e:	4b16      	ldr	r3, [pc, #88]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e80:	f8b3 3200 	ldrh.w	r3, [r3, #512]	@ 0x200
 8001e84:	1c5a      	adds	r2, r3, #1
 8001e86:	b291      	uxth	r1, r2
 8001e88:	4a13      	ldr	r2, [pc, #76]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e8a:	f8a2 1200 	strh.w	r1, [r2, #512]	@ 0x200
 8001e8e:	4619      	mov	r1, r3
 8001e90:	4a11      	ldr	r2, [pc, #68]	@ (8001ed8 <GPS_IRQHandler+0x120>)
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	5453      	strb	r3, [r2, r1]
            }
        }

        // Clear the interrupt flag
        __HAL_UART_CLEAR_FLAG(&GPS_UART_HANDLE, UART_FLAG_RXNE);
 8001e96:	4b0d      	ldr	r3, [pc, #52]	@ (8001ecc <GPS_IRQHandler+0x114>)
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f06f 0220 	mvn.w	r2, #32
 8001e9e:	601a      	str	r2, [r3, #0]
    }

    // Handle overrun error
    if (__HAL_UART_GET_FLAG(&GPS_UART_HANDLE, UART_FLAG_ORE))
 8001ea0:	4b0a      	ldr	r3, [pc, #40]	@ (8001ecc <GPS_IRQHandler+0x114>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	f003 0308 	and.w	r3, r3, #8
 8001eaa:	2b08      	cmp	r3, #8
 8001eac:	d10a      	bne.n	8001ec4 <GPS_IRQHandler+0x10c>
    {
        __HAL_UART_CLEAR_OREFLAG(&GPS_UART_HANDLE);
 8001eae:	2300      	movs	r3, #0
 8001eb0:	603b      	str	r3, [r7, #0]
 8001eb2:	4b06      	ldr	r3, [pc, #24]	@ (8001ecc <GPS_IRQHandler+0x114>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	603b      	str	r3, [r7, #0]
 8001eba:	4b04      	ldr	r3, [pc, #16]	@ (8001ecc <GPS_IRQHandler+0x114>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	603b      	str	r3, [r7, #0]
 8001ec2:	683b      	ldr	r3, [r7, #0]
    }
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	200006e0 	.word	0x200006e0
 8001ed0:	200005a0 	.word	0x200005a0
 8001ed4:	200005a4 	.word	0x200005a4
 8001ed8:	200002f8 	.word	0x200002f8
 8001edc:	200004fb 	.word	0x200004fb

08001ee0 <GPS_SendCommand>:
 * @brief Send command to GPS module
 * @param command Command string (without $ and checksum)
 * @retval HAL_OK if successful
 */
HAL_StatusTypeDef GPS_SendCommand(const char* command)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b09e      	sub	sp, #120	@ 0x78
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
    char full_command[100];
    uint8_t checksum = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77

    // Calculate checksum
    for (int i = 0; command[i] != '\0'; i++)
 8001eee:	2300      	movs	r3, #0
 8001ef0:	673b      	str	r3, [r7, #112]	@ 0x70
 8001ef2:	e00b      	b.n	8001f0c <GPS_SendCommand+0x2c>
    {
        checksum ^= command[i];
 8001ef4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	4413      	add	r3, r2
 8001efa:	781a      	ldrb	r2, [r3, #0]
 8001efc:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001f00:	4053      	eors	r3, r2
 8001f02:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    for (int i = 0; command[i] != '\0'; i++)
 8001f06:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f08:	3301      	adds	r3, #1
 8001f0a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001f0c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8001f0e:	687a      	ldr	r2, [r7, #4]
 8001f10:	4413      	add	r3, r2
 8001f12:	781b      	ldrb	r3, [r3, #0]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d1ed      	bne.n	8001ef4 <GPS_SendCommand+0x14>
    }

    // Format complete command
    sprintf(full_command, "$%s*%02X\r\n", command, checksum);
 8001f18:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8001f1c:	f107 000c 	add.w	r0, r7, #12
 8001f20:	687a      	ldr	r2, [r7, #4]
 8001f22:	490e      	ldr	r1, [pc, #56]	@ (8001f5c <GPS_SendCommand+0x7c>)
 8001f24:	f00b f870 	bl	800d008 <siprintf>

    // Send command
    printf("[GPS CMD] %s", full_command);  // Debug output
 8001f28:	f107 030c 	add.w	r3, r7, #12
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	480c      	ldr	r0, [pc, #48]	@ (8001f60 <GPS_SendCommand+0x80>)
 8001f30:	f00a ff46 	bl	800cdc0 <iprintf>
    return HAL_UART_Transmit(&GPS_UART_HANDLE, (uint8_t*)full_command,
                            strlen(full_command), 1000);
 8001f34:	f107 030c 	add.w	r3, r7, #12
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f7fe f9a1 	bl	8000280 <strlen>
 8001f3e:	4603      	mov	r3, r0
    return HAL_UART_Transmit(&GPS_UART_HANDLE, (uint8_t*)full_command,
 8001f40:	b29a      	uxth	r2, r3
 8001f42:	f107 010c 	add.w	r1, r7, #12
 8001f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001f4a:	4806      	ldr	r0, [pc, #24]	@ (8001f64 <GPS_SendCommand+0x84>)
 8001f4c:	f005 f9cc 	bl	80072e8 <HAL_UART_Transmit>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3778      	adds	r7, #120	@ 0x78
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	08010a48 	.word	0x08010a48
 8001f60:	08010a54 	.word	0x08010a54
 8001f64:	200006e0 	.word	0x200006e0

08001f68 <CS_L>:
#include "ICM-42605.h"

static inline void CS_L(void){ HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_RESET); }
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f72:	4802      	ldr	r0, [pc, #8]	@ (8001f7c <CS_L+0x14>)
 8001f74:	f002 fcb8 	bl	80048e8 <HAL_GPIO_WritePin>
 8001f78:	bf00      	nop
 8001f7a:	bd80      	pop	{r7, pc}
 8001f7c:	40020400 	.word	0x40020400

08001f80 <CS_H>:
static inline void CS_H(void){ HAL_GPIO_WritePin(GPIOB, GPIO_PIN_12, GPIO_PIN_SET); }
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	2201      	movs	r2, #1
 8001f86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001f8a:	4802      	ldr	r0, [pc, #8]	@ (8001f94 <CS_H+0x14>)
 8001f8c:	f002 fcac 	bl	80048e8 <HAL_GPIO_WritePin>
 8001f90:	bf00      	nop
 8001f92:	bd80      	pop	{r7, pc}
 8001f94:	40020400 	.word	0x40020400

08001f98 <be16>:
// Combines two bytes into a signed values
static inline int16_t be16(const uint8_t *p) { return (int16_t)((p[0] << 8) | p[1]); }
 8001f98:	b480      	push	{r7}
 8001f9a:	b083      	sub	sp, #12
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	b21b      	sxth	r3, r3
 8001fa6:	021b      	lsls	r3, r3, #8
 8001fa8:	b21a      	sxth	r2, r3
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	3301      	adds	r3, #1
 8001fae:	781b      	ldrb	r3, [r3, #0]
 8001fb0:	b21b      	sxth	r3, r3
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	b21b      	sxth	r3, r3
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	370c      	adds	r7, #12
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc0:	4770      	bx	lr
	...

08001fc4 <icm42605_bank_select>:

//send address first, then change value
// 1) SPI primitives
HAL_StatusTypeDef icm42605_bank_select(uint8_t bankval)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	4603      	mov	r3, r0
 8001fcc:	71fb      	strb	r3, [r7, #7]
	HAL_StatusTypeDef st;
	 uint8_t bank_code;
	switch (bankval) {
 8001fce:	79fb      	ldrb	r3, [r7, #7]
 8001fd0:	2b04      	cmp	r3, #4
 8001fd2:	d819      	bhi.n	8002008 <icm42605_bank_select+0x44>
 8001fd4:	a201      	add	r2, pc, #4	@ (adr r2, 8001fdc <icm42605_bank_select+0x18>)
 8001fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fda:	bf00      	nop
 8001fdc:	08001ff1 	.word	0x08001ff1
 8001fe0:	08001ff7 	.word	0x08001ff7
 8001fe4:	08001ffd 	.word	0x08001ffd
 8001fe8:	08002009 	.word	0x08002009
 8001fec:	08002003 	.word	0x08002003
	        case 0:
	            bank_code = BANK0;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	73bb      	strb	r3, [r7, #14]
	            break;
 8001ff4:	e00a      	b.n	800200c <icm42605_bank_select+0x48>
	        case 1:
	            bank_code = BANK1;
 8001ff6:	2310      	movs	r3, #16
 8001ff8:	73bb      	strb	r3, [r7, #14]
	            break;
 8001ffa:	e007      	b.n	800200c <icm42605_bank_select+0x48>
	        case 2:
	            bank_code = BANK2;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	73bb      	strb	r3, [r7, #14]
	            break;
 8002000:	e004      	b.n	800200c <icm42605_bank_select+0x48>
	        case 4:
	            bank_code = BANK4;
 8002002:	2340      	movs	r3, #64	@ 0x40
 8002004:	73bb      	strb	r3, [r7, #14]
	            break;
 8002006:	e001      	b.n	800200c <icm42605_bank_select+0x48>
	        default:
	            return HAL_ERROR; // invalid bank number
 8002008:	2301      	movs	r3, #1
 800200a:	e01b      	b.n	8002044 <icm42605_bank_select+0x80>
	    }

	uint8_t addr= 0x76 & 0x7F;
 800200c:	2376      	movs	r3, #118	@ 0x76
 800200e:	737b      	strb	r3, [r7, #13]
	CS_L();
 8002010:	f7ff ffaa 	bl	8001f68 <CS_L>
	st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &addr, 1, 50);
 8002014:	f107 010d 	add.w	r1, r7, #13
 8002018:	2332      	movs	r3, #50	@ 0x32
 800201a:	2201      	movs	r2, #1
 800201c:	480b      	ldr	r0, [pc, #44]	@ (800204c <icm42605_bank_select+0x88>)
 800201e:	f004 fbca 	bl	80067b6 <HAL_SPI_Transmit>
 8002022:	4603      	mov	r3, r0
 8002024:	73fb      	strb	r3, [r7, #15]
	if (st == HAL_OK) {
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d108      	bne.n	800203e <icm42605_bank_select+0x7a>
	st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &bank_code, 1, 50);
 800202c:	f107 010e 	add.w	r1, r7, #14
 8002030:	2332      	movs	r3, #50	@ 0x32
 8002032:	2201      	movs	r2, #1
 8002034:	4805      	ldr	r0, [pc, #20]	@ (800204c <icm42605_bank_select+0x88>)
 8002036:	f004 fbbe 	bl	80067b6 <HAL_SPI_Transmit>
 800203a:	4603      	mov	r3, r0
 800203c:	73fb      	strb	r3, [r7, #15]
		}
	CS_H();
 800203e:	f7ff ff9f 	bl	8001f80 <CS_H>
	return st;
 8002042:	7bfb      	ldrb	r3, [r7, #15]
}
 8002044:	4618      	mov	r0, r3
 8002046:	3710      	adds	r7, #16
 8002048:	46bd      	mov	sp, r7
 800204a:	bd80      	pop	{r7, pc}
 800204c:	20000630 	.word	0x20000630

08002050 <icm42605_write_reg>:

HAL_StatusTypeDef icm42605_write_reg(uint8_t bank, uint8_t reg, uint8_t val)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	b084      	sub	sp, #16
 8002054:	af00      	add	r7, sp, #0
 8002056:	4603      	mov	r3, r0
 8002058:	71fb      	strb	r3, [r7, #7]
 800205a:	460b      	mov	r3, r1
 800205c:	71bb      	strb	r3, [r7, #6]
 800205e:	4613      	mov	r3, r2
 8002060:	717b      	strb	r3, [r7, #5]
	// select bank
		HAL_StatusTypeDef st;
		    // 1) select bank
		    st = icm42605_bank_select(bank);
 8002062:	79fb      	ldrb	r3, [r7, #7]
 8002064:	4618      	mov	r0, r3
 8002066:	f7ff ffad 	bl	8001fc4 <icm42605_bank_select>
 800206a:	4603      	mov	r3, r0
 800206c:	73fb      	strb	r3, [r7, #15]
		    if (st != HAL_OK) return st;
 800206e:	7bfb      	ldrb	r3, [r7, #15]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d001      	beq.n	8002078 <icm42605_write_reg+0x28>
 8002074:	7bfb      	ldrb	r3, [r7, #15]
 8002076:	e01d      	b.n	80020b4 <icm42605_write_reg+0x64>
	// selects 7 bit address from register

	uint8_t addr = reg & 0x7F; // MSB = 0 so write
 8002078:	79bb      	ldrb	r3, [r7, #6]
 800207a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800207e:	b2db      	uxtb	r3, r3
 8002080:	73bb      	strb	r3, [r7, #14]
	CS_L();
 8002082:	f7ff ff71 	bl	8001f68 <CS_L>
	// send address
	st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &addr, 1, 50);
 8002086:	f107 010e 	add.w	r1, r7, #14
 800208a:	2332      	movs	r3, #50	@ 0x32
 800208c:	2201      	movs	r2, #1
 800208e:	480b      	ldr	r0, [pc, #44]	@ (80020bc <icm42605_write_reg+0x6c>)
 8002090:	f004 fb91 	bl	80067b6 <HAL_SPI_Transmit>
 8002094:	4603      	mov	r3, r0
 8002096:	73fb      	strb	r3, [r7, #15]
	// write new value
	if (st == HAL_OK) {
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d107      	bne.n	80020ae <icm42605_write_reg+0x5e>
		st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &val, 1, 50);
 800209e:	1d79      	adds	r1, r7, #5
 80020a0:	2332      	movs	r3, #50	@ 0x32
 80020a2:	2201      	movs	r2, #1
 80020a4:	4805      	ldr	r0, [pc, #20]	@ (80020bc <icm42605_write_reg+0x6c>)
 80020a6:	f004 fb86 	bl	80067b6 <HAL_SPI_Transmit>
 80020aa:	4603      	mov	r3, r0
 80020ac:	73fb      	strb	r3, [r7, #15]
	}
	CS_H();
 80020ae:	f7ff ff67 	bl	8001f80 <CS_H>
	return st;
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	20000630 	.word	0x20000630

080020c0 <icm42605_read_reg>:
HAL_StatusTypeDef icm42605_read_reg (uint8_t bank, uint8_t reg, uint8_t *val)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	4603      	mov	r3, r0
 80020c8:	603a      	str	r2, [r7, #0]
 80020ca:	71fb      	strb	r3, [r7, #7]
 80020cc:	460b      	mov	r3, r1
 80020ce:	71bb      	strb	r3, [r7, #6]
	HAL_StatusTypeDef st;
	    // 1) select bank
	    st = icm42605_bank_select(bank);
 80020d0:	79fb      	ldrb	r3, [r7, #7]
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff ff76 	bl	8001fc4 <icm42605_bank_select>
 80020d8:	4603      	mov	r3, r0
 80020da:	73fb      	strb	r3, [r7, #15]
	    if (st != HAL_OK) return st;
 80020dc:	7bfb      	ldrb	r3, [r7, #15]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <icm42605_read_reg+0x26>
 80020e2:	7bfb      	ldrb	r3, [r7, #15]
 80020e4:	e01d      	b.n	8002122 <icm42605_read_reg+0x62>
	uint8_t addr = reg | 0x80;
 80020e6:	79bb      	ldrb	r3, [r7, #6]
 80020e8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	73bb      	strb	r3, [r7, #14]
	CS_L();
 80020f0:	f7ff ff3a 	bl	8001f68 <CS_L>
		// send address
		st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &addr, 1, 50);
 80020f4:	f107 010e 	add.w	r1, r7, #14
 80020f8:	2332      	movs	r3, #50	@ 0x32
 80020fa:	2201      	movs	r2, #1
 80020fc:	480b      	ldr	r0, [pc, #44]	@ (800212c <icm42605_read_reg+0x6c>)
 80020fe:	f004 fb5a 	bl	80067b6 <HAL_SPI_Transmit>
 8002102:	4603      	mov	r3, r0
 8002104:	73fb      	strb	r3, [r7, #15]
		// read/reassign value
		if (st == (HAL_OK)) {
 8002106:	7bfb      	ldrb	r3, [r7, #15]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d107      	bne.n	800211c <icm42605_read_reg+0x5c>
			st = HAL_SPI_Receive(&ICM_SPI_HANDLE, val, 1, 50);
 800210c:	2332      	movs	r3, #50	@ 0x32
 800210e:	2201      	movs	r2, #1
 8002110:	6839      	ldr	r1, [r7, #0]
 8002112:	4806      	ldr	r0, [pc, #24]	@ (800212c <icm42605_read_reg+0x6c>)
 8002114:	f004 fc93 	bl	8006a3e <HAL_SPI_Receive>
 8002118:	4603      	mov	r3, r0
 800211a:	73fb      	strb	r3, [r7, #15]
		}
	CS_H();
 800211c:	f7ff ff30 	bl	8001f80 <CS_H>
	return st;
 8002120:	7bfb      	ldrb	r3, [r7, #15]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3710      	adds	r7, #16
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000630 	.word	0x20000630

08002130 <icm42605_read_multi>:


HAL_StatusTypeDef icm42605_read_multi(uint8_t bank, uint8_t start_reg, uint8_t *buf, size_t n)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b086      	sub	sp, #24
 8002134:	af00      	add	r7, sp, #0
 8002136:	60ba      	str	r2, [r7, #8]
 8002138:	607b      	str	r3, [r7, #4]
 800213a:	4603      	mov	r3, r0
 800213c:	73fb      	strb	r3, [r7, #15]
 800213e:	460b      	mov	r3, r1
 8002140:	73bb      	strb	r3, [r7, #14]
    if (n == 0 || buf == NULL) return HAL_OK;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d002      	beq.n	800214e <icm42605_read_multi+0x1e>
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b00      	cmp	r3, #0
 800214c:	d101      	bne.n	8002152 <icm42605_read_multi+0x22>
 800214e:	2300      	movs	r3, #0
 8002150:	e029      	b.n	80021a6 <icm42605_read_multi+0x76>

    HAL_StatusTypeDef st = icm42605_bank_select(bank);
 8002152:	7bfb      	ldrb	r3, [r7, #15]
 8002154:	4618      	mov	r0, r3
 8002156:	f7ff ff35 	bl	8001fc4 <icm42605_bank_select>
 800215a:	4603      	mov	r3, r0
 800215c:	75fb      	strb	r3, [r7, #23]
    if (st != HAL_OK) return st;
 800215e:	7dfb      	ldrb	r3, [r7, #23]
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <icm42605_read_multi+0x38>
 8002164:	7dfb      	ldrb	r3, [r7, #23]
 8002166:	e01e      	b.n	80021a6 <icm42605_read_multi+0x76>

    uint8_t cmd = (uint8_t)(start_reg | 0x80); // MSB=1 → read
 8002168:	7bbb      	ldrb	r3, [r7, #14]
 800216a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800216e:	b2db      	uxtb	r3, r3
 8002170:	75bb      	strb	r3, [r7, #22]
    CS_L();
 8002172:	f7ff fef9 	bl	8001f68 <CS_L>
    st = HAL_SPI_Transmit(&ICM_SPI_HANDLE, &cmd, 1, 50);
 8002176:	f107 0116 	add.w	r1, r7, #22
 800217a:	2332      	movs	r3, #50	@ 0x32
 800217c:	2201      	movs	r2, #1
 800217e:	480c      	ldr	r0, [pc, #48]	@ (80021b0 <icm42605_read_multi+0x80>)
 8002180:	f004 fb19 	bl	80067b6 <HAL_SPI_Transmit>
 8002184:	4603      	mov	r3, r0
 8002186:	75fb      	strb	r3, [r7, #23]
    if (st == HAL_OK) {
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d108      	bne.n	80021a0 <icm42605_read_multi+0x70>
        st = HAL_SPI_Receive(&ICM_SPI_HANDLE, buf, (uint16_t)n, 50);
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	b29a      	uxth	r2, r3
 8002192:	2332      	movs	r3, #50	@ 0x32
 8002194:	68b9      	ldr	r1, [r7, #8]
 8002196:	4806      	ldr	r0, [pc, #24]	@ (80021b0 <icm42605_read_multi+0x80>)
 8002198:	f004 fc51 	bl	8006a3e <HAL_SPI_Receive>
 800219c:	4603      	mov	r3, r0
 800219e:	75fb      	strb	r3, [r7, #23]
    }
    CS_H();
 80021a0:	f7ff feee 	bl	8001f80 <CS_H>
    return st;
 80021a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80021a6:	4618      	mov	r0, r3
 80021a8:	3718      	adds	r7, #24
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}
 80021ae:	bf00      	nop
 80021b0:	20000630 	.word	0x20000630

080021b4 <icm42605_reset>:


// 2. Core Functions
HAL_StatusTypeDef icm42605_reset(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef st;

    // Write reset command
    CS_L();
 80021ba:	f7ff fed5 	bl	8001f68 <CS_L>
    st = icm42605_write_reg(0, REG_DEVICE_CONFIG, DEVICE_CONFIG_RESET);
 80021be:	2201      	movs	r2, #1
 80021c0:	2111      	movs	r1, #17
 80021c2:	2000      	movs	r0, #0
 80021c4:	f7ff ff44 	bl	8002050 <icm42605_write_reg>
 80021c8:	4603      	mov	r3, r0
 80021ca:	71fb      	strb	r3, [r7, #7]
    if (st != HAL_OK) return st;
 80021cc:	79fb      	ldrb	r3, [r7, #7]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <icm42605_reset+0x22>
 80021d2:	79fb      	ldrb	r3, [r7, #7]
 80021d4:	e005      	b.n	80021e2 <icm42605_reset+0x2e>

    // Wait for reset to complete (datasheet recommends ~10ms)
    HAL_Delay(10);
 80021d6:	200a      	movs	r0, #10
 80021d8:	f002 f83a 	bl	8004250 <HAL_Delay>
    CS_H();
 80021dc:	f7ff fed0 	bl	8001f80 <CS_H>
    return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3708      	adds	r7, #8
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}

080021ea <icm42605_config_accel>:

// 3. Sensor Config/setup
HAL_StatusTypeDef icm42605_config_accel(uint8_t fs_sel, uint8_t odr_sel)
{
 80021ea:	b580      	push	{r7, lr}
 80021ec:	b084      	sub	sp, #16
 80021ee:	af00      	add	r7, sp, #0
 80021f0:	4603      	mov	r3, r0
 80021f2:	460a      	mov	r2, r1
 80021f4:	71fb      	strb	r3, [r7, #7]
 80021f6:	4613      	mov	r3, r2
 80021f8:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef st;
    uint8_t v;

    // 1) Set FS + ODR (ACCEL_CONFIG0: FS [7:5], ODR [3:0])
    v = (uint8_t)((fs_sel << ACCEL_FS_SHIFT) | (odr_sel & ACCEL_ODR_MASK));
 80021fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021fe:	015b      	lsls	r3, r3, #5
 8002200:	b25a      	sxtb	r2, r3
 8002202:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002206:	f003 030f 	and.w	r3, r3, #15
 800220a:	b25b      	sxtb	r3, r3
 800220c:	4313      	orrs	r3, r2
 800220e:	b25b      	sxtb	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_ACCEL_CONFIG0, v);
 8002214:	7bbb      	ldrb	r3, [r7, #14]
 8002216:	461a      	mov	r2, r3
 8002218:	2150      	movs	r1, #80	@ 0x50
 800221a:	2000      	movs	r0, #0
 800221c:	f7ff ff18 	bl	8002050 <icm42605_write_reg>
 8002220:	4603      	mov	r3, r0
 8002222:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;   // ACCEL_CONFIG0 @ 0x50. :contentReference[oaicite:3]{index=3}
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d001      	beq.n	800222e <icm42605_config_accel+0x44>
 800222a:	7bfb      	ldrb	r3, [r7, #15]
 800222c:	e070      	b.n	8002310 <icm42605_config_accel+0x126>

    // 2) Power accel ON in PWR_MGMT0 → Low-Noise (LN)
    st = icm42605_read_reg(0, REG_PWR_MGMT0, &v); if (st != HAL_OK) return st;
 800222e:	f107 030e 	add.w	r3, r7, #14
 8002232:	461a      	mov	r2, r3
 8002234:	214e      	movs	r1, #78	@ 0x4e
 8002236:	2000      	movs	r0, #0
 8002238:	f7ff ff42 	bl	80020c0 <icm42605_read_reg>
 800223c:	4603      	mov	r3, r0
 800223e:	73fb      	strb	r3, [r7, #15]
 8002240:	7bfb      	ldrb	r3, [r7, #15]
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <icm42605_config_accel+0x60>
 8002246:	7bfb      	ldrb	r3, [r7, #15]
 8002248:	e062      	b.n	8002310 <icm42605_config_accel+0x126>
    v = (uint8_t)((v & ~PWRM_ACCEL_MODE_MASK) | PWRM_ACCEL_MODE_LN);
 800224a:	7bbb      	ldrb	r3, [r7, #14]
 800224c:	b25b      	sxtb	r3, r3
 800224e:	f043 0303 	orr.w	r3, r3, #3
 8002252:	b25b      	sxtb	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_PWR_MGMT0, v); if (st != HAL_OK) return st;
 8002258:	7bbb      	ldrb	r3, [r7, #14]
 800225a:	461a      	mov	r2, r3
 800225c:	214e      	movs	r1, #78	@ 0x4e
 800225e:	2000      	movs	r0, #0
 8002260:	f7ff fef6 	bl	8002050 <icm42605_write_reg>
 8002264:	4603      	mov	r3, r0
 8002266:	73fb      	strb	r3, [r7, #15]
 8002268:	7bfb      	ldrb	r3, [r7, #15]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d001      	beq.n	8002272 <icm42605_config_accel+0x88>
 800226e:	7bfb      	ldrb	r3, [r7, #15]
 8002270:	e04e      	b.n	8002310 <icm42605_config_accel+0x126>

    // Datasheet: after OFF→other modes, avoid register writes for ~200 µs.
    HAL_Delay(1);  // 1 ms > 200 µs, safe. :contentReference[oaicite:4]{index=4}
 8002272:	2001      	movs	r0, #1
 8002274:	f001 ffec 	bl	8004250 <HAL_Delay>

    // 3) Set ACCEL UI filter ORDER = 2nd (ACCEL_CONFIG1, bits [4:3] = 01)
    st = icm42605_read_reg(0, REG_ACCEL_CONFIG1, &v); if (st != HAL_OK) return st;
 8002278:	f107 030e 	add.w	r3, r7, #14
 800227c:	461a      	mov	r2, r3
 800227e:	2153      	movs	r1, #83	@ 0x53
 8002280:	2000      	movs	r0, #0
 8002282:	f7ff ff1d 	bl	80020c0 <icm42605_read_reg>
 8002286:	4603      	mov	r3, r0
 8002288:	73fb      	strb	r3, [r7, #15]
 800228a:	7bfb      	ldrb	r3, [r7, #15]
 800228c:	2b00      	cmp	r3, #0
 800228e:	d001      	beq.n	8002294 <icm42605_config_accel+0xaa>
 8002290:	7bfb      	ldrb	r3, [r7, #15]
 8002292:	e03d      	b.n	8002310 <icm42605_config_accel+0x126>
    v = (uint8_t)((v & ~(0b11 << 3)) | (1u << 3));  // 01 = 2nd order
 8002294:	7bbb      	ldrb	r3, [r7, #14]
 8002296:	f023 0318 	bic.w	r3, r3, #24
 800229a:	b2db      	uxtb	r3, r3
 800229c:	f043 0308 	orr.w	r3, r3, #8
 80022a0:	b2db      	uxtb	r3, r3
 80022a2:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_ACCEL_CONFIG1, v); if (st != HAL_OK) return st;
 80022a4:	7bbb      	ldrb	r3, [r7, #14]
 80022a6:	461a      	mov	r2, r3
 80022a8:	2153      	movs	r1, #83	@ 0x53
 80022aa:	2000      	movs	r0, #0
 80022ac:	f7ff fed0 	bl	8002050 <icm42605_write_reg>
 80022b0:	4603      	mov	r3, r0
 80022b2:	73fb      	strb	r3, [r7, #15]
 80022b4:	7bfb      	ldrb	r3, [r7, #15]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <icm42605_config_accel+0xd4>
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
 80022bc:	e028      	b.n	8002310 <icm42605_config_accel+0x126>
    // (ACCEL_CONFIG1 @ 0x53; “00=1st, 01=2nd, 10=3rd”). :contentReference[oaicite:5]{index=5}

    // 4) Set LPF bandwidths (GYRO_ACCEL_CONFIG0 @ 0x52)
    //    Put accel BW code in [7:4] and (optionally) leave gyro BW as-is.
    st = icm42605_read_reg(0, REG_GYRO_ACCEL_CONFIG0, &v); if (st != HAL_OK) return st;
 80022be:	f107 030e 	add.w	r3, r7, #14
 80022c2:	461a      	mov	r2, r3
 80022c4:	2152      	movs	r1, #82	@ 0x52
 80022c6:	2000      	movs	r0, #0
 80022c8:	f7ff fefa 	bl	80020c0 <icm42605_read_reg>
 80022cc:	4603      	mov	r3, r0
 80022ce:	73fb      	strb	r3, [r7, #15]
 80022d0:	7bfb      	ldrb	r3, [r7, #15]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d001      	beq.n	80022da <icm42605_config_accel+0xf0>
 80022d6:	7bfb      	ldrb	r3, [r7, #15]
 80022d8:	e01a      	b.n	8002310 <icm42605_config_accel+0x126>
    v = (uint8_t)((v & 0x0F) | (uint8_t)(6u << 4));    // accel BW code = 6 → ODR/20
 80022da:	7bbb      	ldrb	r3, [r7, #14]
 80022dc:	b25b      	sxtb	r3, r3
 80022de:	f003 030f 	and.w	r3, r3, #15
 80022e2:	b25b      	sxtb	r3, r3
 80022e4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80022e8:	b25b      	sxtb	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_GYRO_ACCEL_CONFIG0, v); if (st != HAL_OK) return st;
 80022ee:	7bbb      	ldrb	r3, [r7, #14]
 80022f0:	461a      	mov	r2, r3
 80022f2:	2152      	movs	r1, #82	@ 0x52
 80022f4:	2000      	movs	r0, #0
 80022f6:	f7ff feab 	bl	8002050 <icm42605_write_reg>
 80022fa:	4603      	mov	r3, r0
 80022fc:	73fb      	strb	r3, [r7, #15]
 80022fe:	7bfb      	ldrb	r3, [r7, #15]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <icm42605_config_accel+0x11e>
 8002304:	7bfb      	ldrb	r3, [r7, #15]
 8002306:	e003      	b.n	8002310 <icm42605_config_accel+0x126>
    // (BW code 6 gives ≈ ODR/20 in LN mode; at 1 kHz → ~50 Hz cutoff). :contentReference[oaicite:6]{index=6}

    // small settle (optional)
    HAL_Delay(5);
 8002308:	2005      	movs	r0, #5
 800230a:	f001 ffa1 	bl	8004250 <HAL_Delay>

    return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <icm42605_config_gyro>:

HAL_StatusTypeDef icm42605_config_gyro(uint8_t fs_sel, uint8_t odr_sel)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	b084      	sub	sp, #16
 800231c:	af00      	add	r7, sp, #0
 800231e:	4603      	mov	r3, r0
 8002320:	460a      	mov	r2, r1
 8002322:	71fb      	strb	r3, [r7, #7]
 8002324:	4613      	mov	r3, r2
 8002326:	71bb      	strb	r3, [r7, #6]
    HAL_StatusTypeDef st;
    uint8_t v;

    // 1) Set FS + ODR (GYRO_CONFIG0: FS[7:5], ODR[3:0])
    v = (uint8_t)((fs_sel << GYRO_FS_SHIFT) | (odr_sel & GYRO_ODR_MASK));
 8002328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800232c:	015b      	lsls	r3, r3, #5
 800232e:	b25a      	sxtb	r2, r3
 8002330:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002334:	f003 030f 	and.w	r3, r3, #15
 8002338:	b25b      	sxtb	r3, r3
 800233a:	4313      	orrs	r3, r2
 800233c:	b25b      	sxtb	r3, r3
 800233e:	b2db      	uxtb	r3, r3
 8002340:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_GYRO_CONFIG0, v);
 8002342:	7bbb      	ldrb	r3, [r7, #14]
 8002344:	461a      	mov	r2, r3
 8002346:	214f      	movs	r1, #79	@ 0x4f
 8002348:	2000      	movs	r0, #0
 800234a:	f7ff fe81 	bl	8002050 <icm42605_write_reg>
 800234e:	4603      	mov	r3, r0
 8002350:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002352:	7bfb      	ldrb	r3, [r7, #15]
 8002354:	2b00      	cmp	r3, #0
 8002356:	d001      	beq.n	800235c <icm42605_config_gyro+0x44>
 8002358:	7bfb      	ldrb	r3, [r7, #15]
 800235a:	e06e      	b.n	800243a <icm42605_config_gyro+0x122>

    // 2) Power gyro ON in PWR_MGMT0 → Low-Noise (LN)
    st = icm42605_read_reg(0, REG_PWR_MGMT0, &v);
 800235c:	f107 030e 	add.w	r3, r7, #14
 8002360:	461a      	mov	r2, r3
 8002362:	214e      	movs	r1, #78	@ 0x4e
 8002364:	2000      	movs	r0, #0
 8002366:	f7ff feab 	bl	80020c0 <icm42605_read_reg>
 800236a:	4603      	mov	r3, r0
 800236c:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 800236e:	7bfb      	ldrb	r3, [r7, #15]
 8002370:	2b00      	cmp	r3, #0
 8002372:	d001      	beq.n	8002378 <icm42605_config_gyro+0x60>
 8002374:	7bfb      	ldrb	r3, [r7, #15]
 8002376:	e060      	b.n	800243a <icm42605_config_gyro+0x122>
    v = (uint8_t)((v & ~PWRM_GYRO_MODE_MASK) | PWRM_GYRO_MODE_LN);
 8002378:	7bbb      	ldrb	r3, [r7, #14]
 800237a:	b25b      	sxtb	r3, r3
 800237c:	f043 030c 	orr.w	r3, r3, #12
 8002380:	b25b      	sxtb	r3, r3
 8002382:	b2db      	uxtb	r3, r3
 8002384:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_PWR_MGMT0, v);
 8002386:	7bbb      	ldrb	r3, [r7, #14]
 8002388:	461a      	mov	r2, r3
 800238a:	214e      	movs	r1, #78	@ 0x4e
 800238c:	2000      	movs	r0, #0
 800238e:	f7ff fe5f 	bl	8002050 <icm42605_write_reg>
 8002392:	4603      	mov	r3, r0
 8002394:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002396:	7bfb      	ldrb	r3, [r7, #15]
 8002398:	2b00      	cmp	r3, #0
 800239a:	d001      	beq.n	80023a0 <icm42605_config_gyro+0x88>
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	e04c      	b.n	800243a <icm42605_config_gyro+0x122>

    // datasheet: wait at least 200 µs after mode change before writes
    HAL_Delay(1);
 80023a0:	2001      	movs	r0, #1
 80023a2:	f001 ff55 	bl	8004250 <HAL_Delay>

    // 3) Set GYRO filter order = 2nd (GYRO_CONFIG1, bits [3:2] = 01)
    st = icm42605_read_reg(0, REG_GYRO_CONFIG1, &v);
 80023a6:	f107 030e 	add.w	r3, r7, #14
 80023aa:	461a      	mov	r2, r3
 80023ac:	2151      	movs	r1, #81	@ 0x51
 80023ae:	2000      	movs	r0, #0
 80023b0:	f7ff fe86 	bl	80020c0 <icm42605_read_reg>
 80023b4:	4603      	mov	r3, r0
 80023b6:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d001      	beq.n	80023c2 <icm42605_config_gyro+0xaa>
 80023be:	7bfb      	ldrb	r3, [r7, #15]
 80023c0:	e03b      	b.n	800243a <icm42605_config_gyro+0x122>
    v = (uint8_t)((v & ~(0b11 << 2)) | (1u << 2));
 80023c2:	7bbb      	ldrb	r3, [r7, #14]
 80023c4:	f023 030c 	bic.w	r3, r3, #12
 80023c8:	b2db      	uxtb	r3, r3
 80023ca:	f043 0304 	orr.w	r3, r3, #4
 80023ce:	b2db      	uxtb	r3, r3
 80023d0:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_GYRO_CONFIG1, v);
 80023d2:	7bbb      	ldrb	r3, [r7, #14]
 80023d4:	461a      	mov	r2, r3
 80023d6:	2151      	movs	r1, #81	@ 0x51
 80023d8:	2000      	movs	r0, #0
 80023da:	f7ff fe39 	bl	8002050 <icm42605_write_reg>
 80023de:	4603      	mov	r3, r0
 80023e0:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 80023e2:	7bfb      	ldrb	r3, [r7, #15]
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d001      	beq.n	80023ec <icm42605_config_gyro+0xd4>
 80023e8:	7bfb      	ldrb	r3, [r7, #15]
 80023ea:	e026      	b.n	800243a <icm42605_config_gyro+0x122>

    // 4) Set GYRO LPF bandwidth = BW code 6 (~ODR/20)
    st = icm42605_read_reg(0, REG_GYRO_ACCEL_CONFIG0, &v);
 80023ec:	f107 030e 	add.w	r3, r7, #14
 80023f0:	461a      	mov	r2, r3
 80023f2:	2152      	movs	r1, #82	@ 0x52
 80023f4:	2000      	movs	r0, #0
 80023f6:	f7ff fe63 	bl	80020c0 <icm42605_read_reg>
 80023fa:	4603      	mov	r3, r0
 80023fc:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 80023fe:	7bfb      	ldrb	r3, [r7, #15]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d001      	beq.n	8002408 <icm42605_config_gyro+0xf0>
 8002404:	7bfb      	ldrb	r3, [r7, #15]
 8002406:	e018      	b.n	800243a <icm42605_config_gyro+0x122>
    v = (uint8_t)((v & 0xF0) | (6u & 0x0F));   // lower nibble = gyro BW
 8002408:	7bbb      	ldrb	r3, [r7, #14]
 800240a:	f023 030f 	bic.w	r3, r3, #15
 800240e:	b2db      	uxtb	r3, r3
 8002410:	f043 0306 	orr.w	r3, r3, #6
 8002414:	b2db      	uxtb	r3, r3
 8002416:	73bb      	strb	r3, [r7, #14]
    st = icm42605_write_reg(0, REG_GYRO_ACCEL_CONFIG0, v);
 8002418:	7bbb      	ldrb	r3, [r7, #14]
 800241a:	461a      	mov	r2, r3
 800241c:	2152      	movs	r1, #82	@ 0x52
 800241e:	2000      	movs	r0, #0
 8002420:	f7ff fe16 	bl	8002050 <icm42605_write_reg>
 8002424:	4603      	mov	r3, r0
 8002426:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d001      	beq.n	8002432 <icm42605_config_gyro+0x11a>
 800242e:	7bfb      	ldrb	r3, [r7, #15]
 8002430:	e003      	b.n	800243a <icm42605_config_gyro+0x122>

    HAL_Delay(5);
 8002432:	2005      	movs	r0, #5
 8002434:	f001 ff0c 	bl	8004250 <HAL_Delay>

    return HAL_OK;
 8002438:	2300      	movs	r3, #0
}
 800243a:	4618      	mov	r0, r3
 800243c:	3710      	adds	r7, #16
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <icm42605_read_accel>:

// 3) Data

HAL_StatusTypeDef icm42605_read_accel(int16_t xyz[3])
{
 8002442:	b590      	push	{r4, r7, lr}
 8002444:	b085      	sub	sp, #20
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]

    uint8_t raw[6];
    HAL_StatusTypeDef st = icm42605_read_multi(0, REG_ACCEL_DATA_X_H, raw, 6);
 800244a:	f107 0208 	add.w	r2, r7, #8
 800244e:	2306      	movs	r3, #6
 8002450:	211f      	movs	r1, #31
 8002452:	2000      	movs	r0, #0
 8002454:	f7ff fe6c 	bl	8002130 <icm42605_read_multi>
 8002458:	4603      	mov	r3, r0
 800245a:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 800245c:	7bfb      	ldrb	r3, [r7, #15]
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <icm42605_read_accel+0x24>
 8002462:	7bfb      	ldrb	r3, [r7, #15]
 8002464:	e01d      	b.n	80024a2 <icm42605_read_accel+0x60>
    // casts two bytes into one
    xyz[0] = be16(&raw[0]);
 8002466:	f107 0308 	add.w	r3, r7, #8
 800246a:	4618      	mov	r0, r3
 800246c:	f7ff fd94 	bl	8001f98 <be16>
 8002470:	4603      	mov	r3, r0
 8002472:	461a      	mov	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	801a      	strh	r2, [r3, #0]
    xyz[1] = be16(&raw[2]);
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	1c9c      	adds	r4, r3, #2
 800247c:	f107 0308 	add.w	r3, r7, #8
 8002480:	3302      	adds	r3, #2
 8002482:	4618      	mov	r0, r3
 8002484:	f7ff fd88 	bl	8001f98 <be16>
 8002488:	4603      	mov	r3, r0
 800248a:	8023      	strh	r3, [r4, #0]
    xyz[2] = be16(&raw[4]);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	1d1c      	adds	r4, r3, #4
 8002490:	f107 0308 	add.w	r3, r7, #8
 8002494:	3304      	adds	r3, #4
 8002496:	4618      	mov	r0, r3
 8002498:	f7ff fd7e 	bl	8001f98 <be16>
 800249c:	4603      	mov	r3, r0
 800249e:	8023      	strh	r3, [r4, #0]
    return HAL_OK;
 80024a0:	2300      	movs	r3, #0

}
 80024a2:	4618      	mov	r0, r3
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bd90      	pop	{r4, r7, pc}

080024aa <icm42605_read_gyro>:

HAL_StatusTypeDef icm42605_read_gyro (int16_t xyz[3])
{
 80024aa:	b590      	push	{r4, r7, lr}
 80024ac:	b085      	sub	sp, #20
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]

uint8_t raw[6];
    HAL_StatusTypeDef st = icm42605_read_multi(0, REG_GYRO_DATA_X_H, raw, 6);
 80024b2:	f107 0208 	add.w	r2, r7, #8
 80024b6:	2306      	movs	r3, #6
 80024b8:	2125      	movs	r1, #37	@ 0x25
 80024ba:	2000      	movs	r0, #0
 80024bc:	f7ff fe38 	bl	8002130 <icm42605_read_multi>
 80024c0:	4603      	mov	r3, r0
 80024c2:	73fb      	strb	r3, [r7, #15]
    if (st != HAL_OK) return st;
 80024c4:	7bfb      	ldrb	r3, [r7, #15]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d001      	beq.n	80024ce <icm42605_read_gyro+0x24>
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	e01d      	b.n	800250a <icm42605_read_gyro+0x60>
    xyz[0] = be16(&raw[0]);
 80024ce:	f107 0308 	add.w	r3, r7, #8
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff fd60 	bl	8001f98 <be16>
 80024d8:	4603      	mov	r3, r0
 80024da:	461a      	mov	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	801a      	strh	r2, [r3, #0]
    xyz[1] = be16(&raw[2]);
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	1c9c      	adds	r4, r3, #2
 80024e4:	f107 0308 	add.w	r3, r7, #8
 80024e8:	3302      	adds	r3, #2
 80024ea:	4618      	mov	r0, r3
 80024ec:	f7ff fd54 	bl	8001f98 <be16>
 80024f0:	4603      	mov	r3, r0
 80024f2:	8023      	strh	r3, [r4, #0]
    xyz[2] = be16(&raw[4]);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	1d1c      	adds	r4, r3, #4
 80024f8:	f107 0308 	add.w	r3, r7, #8
 80024fc:	3304      	adds	r3, #4
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff fd4a 	bl	8001f98 <be16>
 8002504:	4603      	mov	r3, r0
 8002506:	8023      	strh	r3, [r4, #0]
    return HAL_OK;
 8002508:	2300      	movs	r3, #0

}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	bd90      	pop	{r4, r7, pc}
	...

08002514 <sx_cs_low>:
#define OPMODE_LONG_RANGE  0x80 // bit7
#define OPMODE_MODE_MASK   0x07
#define OPMODE_SLEEP       0x00
#define OPMODE_STDBY       0x01

static inline void sx_cs_low(void){ HAL_GPIO_WritePin(GPIOA, NSS1_Pin, GPIO_PIN_RESET); }
 8002514:	b580      	push	{r7, lr}
 8002516:	af00      	add	r7, sp, #0
 8002518:	2200      	movs	r2, #0
 800251a:	2110      	movs	r1, #16
 800251c:	4802      	ldr	r0, [pc, #8]	@ (8002528 <sx_cs_low+0x14>)
 800251e:	f002 f9e3 	bl	80048e8 <HAL_GPIO_WritePin>
 8002522:	bf00      	nop
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40020000 	.word	0x40020000

0800252c <sx_cs_high>:
static inline void sx_cs_high(void){ HAL_GPIO_WritePin(GPIOA, NSS1_Pin, GPIO_PIN_SET); }
 800252c:	b580      	push	{r7, lr}
 800252e:	af00      	add	r7, sp, #0
 8002530:	2201      	movs	r2, #1
 8002532:	2110      	movs	r1, #16
 8002534:	4802      	ldr	r0, [pc, #8]	@ (8002540 <sx_cs_high+0x14>)
 8002536:	f002 f9d7 	bl	80048e8 <HAL_GPIO_WritePin>
 800253a:	bf00      	nop
 800253c:	bd80      	pop	{r7, pc}
 800253e:	bf00      	nop
 8002540:	40020000 	.word	0x40020000

08002544 <log_init>:
#include <stdio.h>
#include <stdarg.h>

// Unbuffer stdout so prints appear immediately
static void log_init(void){
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
    setvbuf(stdout, NULL, _IONBF, 0);
 8002548:	4b04      	ldr	r3, [pc, #16]	@ (800255c <log_init+0x18>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	6898      	ldr	r0, [r3, #8]
 800254e:	2300      	movs	r3, #0
 8002550:	2202      	movs	r2, #2
 8002552:	2100      	movs	r1, #0
 8002554:	f00a fca4 	bl	800cea0 <setvbuf>
}
 8002558:	bf00      	nop
 800255a:	bd80      	pop	{r7, pc}
 800255c:	20000284 	.word	0x20000284

08002560 <sx_log>:

// Our logger used by sx_*
void sx_log(const char *fmt, ...) {
 8002560:	b40f      	push	{r0, r1, r2, r3}
 8002562:	b580      	push	{r7, lr}
 8002564:	b0aa      	sub	sp, #168	@ 0xa8
 8002566:	af00      	add	r7, sp, #0
    char buf[160];
    va_list ap; va_start(ap, fmt);
 8002568:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 800256c:	603b      	str	r3, [r7, #0]
    int n = vsnprintf(buf, sizeof(buf), fmt, ap);
 800256e:	1d38      	adds	r0, r7, #4
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002576:	21a0      	movs	r1, #160	@ 0xa0
 8002578:	f00a fdda 	bl	800d130 <vsniprintf>
 800257c:	f8c7 00a4 	str.w	r0, [r7, #164]	@ 0xa4
    va_end(ap);
    if (n > 0) _write(1, buf, n);
 8002580:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002584:	2b00      	cmp	r3, #0
 8002586:	dd06      	ble.n	8002596 <sx_log+0x36>
 8002588:	1d3b      	adds	r3, r7, #4
 800258a:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 800258e:	4619      	mov	r1, r3
 8002590:	2001      	movs	r0, #1
 8002592:	f001 fb11 	bl	8003bb8 <_write>
}
 8002596:	bf00      	nop
 8002598:	37a8      	adds	r7, #168	@ 0xa8
 800259a:	46bd      	mov	sp, r7
 800259c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80025a0:	b004      	add	sp, #16
 80025a2:	4770      	bx	lr

080025a4 <sx_read>:

// SPI single register read (wnr=0)
uint8_t sx_read(uint8_t addr){
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af02      	add	r7, sp, #8
 80025aa:	4603      	mov	r3, r0
 80025ac:	71fb      	strb	r3, [r7, #7]
    uint8_t tx[2] = { (uint8_t)(addr & 0x7F), 0x00 };
 80025ae:	79fb      	ldrb	r3, [r7, #7]
 80025b0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	733b      	strb	r3, [r7, #12]
 80025b8:	2300      	movs	r3, #0
 80025ba:	737b      	strb	r3, [r7, #13]
    uint8_t rx[2] = {0};
 80025bc:	2300      	movs	r3, #0
 80025be:	813b      	strh	r3, [r7, #8]
    sx_cs_low();
 80025c0:	f7ff ffa8 	bl	8002514 <sx_cs_low>
    HAL_SPI_TransmitReceive(SX_SPI, tx, rx, 2, HAL_MAX_DELAY);
 80025c4:	f107 0208 	add.w	r2, r7, #8
 80025c8:	f107 010c 	add.w	r1, r7, #12
 80025cc:	f04f 33ff 	mov.w	r3, #4294967295
 80025d0:	9300      	str	r3, [sp, #0]
 80025d2:	2302      	movs	r3, #2
 80025d4:	4804      	ldr	r0, [pc, #16]	@ (80025e8 <sx_read+0x44>)
 80025d6:	f004 fb4b 	bl	8006c70 <HAL_SPI_TransmitReceive>
    sx_cs_high();
 80025da:	f7ff ffa7 	bl	800252c <sx_cs_high>
    return rx[1];
 80025de:	7a7b      	ldrb	r3, [r7, #9]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	3710      	adds	r7, #16
 80025e4:	46bd      	mov	sp, r7
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	200005d8 	.word	0x200005d8

080025ec <sx_write>:

// SPI single register write (wnr=1)
void sx_write(uint8_t addr, uint8_t val){
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	460a      	mov	r2, r1
 80025f6:	71fb      	strb	r3, [r7, #7]
 80025f8:	4613      	mov	r3, r2
 80025fa:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = { (uint8_t)(addr | 0x80), val };
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002602:	b2db      	uxtb	r3, r3
 8002604:	733b      	strb	r3, [r7, #12]
 8002606:	79bb      	ldrb	r3, [r7, #6]
 8002608:	737b      	strb	r3, [r7, #13]
    sx_cs_low();
 800260a:	f7ff ff83 	bl	8002514 <sx_cs_low>
    HAL_SPI_Transmit(SX_SPI, tx, 2, HAL_MAX_DELAY);
 800260e:	f107 010c 	add.w	r1, r7, #12
 8002612:	f04f 33ff 	mov.w	r3, #4294967295
 8002616:	2202      	movs	r2, #2
 8002618:	4804      	ldr	r0, [pc, #16]	@ (800262c <sx_write+0x40>)
 800261a:	f004 f8cc 	bl	80067b6 <HAL_SPI_Transmit>
    sx_cs_high();
 800261e:	f7ff ff85 	bl	800252c <sx_cs_high>
}
 8002622:	bf00      	nop
 8002624:	3710      	adds	r7, #16
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	200005d8 	.word	0x200005d8

08002630 <sx_enter_lora_mode>:
    sx_cs_high();
}

// ---- Small helpers for bring‑up ----
// Put device into LoRa mode correctly: must toggle in SLEEP
void sx_enter_lora_mode(void){
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
    // go to FSK sleep first
    sx_write(REG_OPMODE, OPMODE_SLEEP);
 8002636:	2100      	movs	r1, #0
 8002638:	2001      	movs	r0, #1
 800263a:	f7ff ffd7 	bl	80025ec <sx_write>
    // set LoRa bit while staying in sleep
    sx_write(REG_OPMODE, OPMODE_LONG_RANGE | OPMODE_SLEEP);
 800263e:	2180      	movs	r1, #128	@ 0x80
 8002640:	2001      	movs	r0, #1
 8002642:	f7ff ffd3 	bl	80025ec <sx_write>
    // standby in LoRa
    uint8_t v = sx_read(REG_OPMODE);
 8002646:	2001      	movs	r0, #1
 8002648:	f7ff ffac 	bl	80025a4 <sx_read>
 800264c:	4603      	mov	r3, r0
 800264e:	71fb      	strb	r3, [r7, #7]
    v = (uint8_t)((v & ~OPMODE_MODE_MASK) | OPMODE_STDBY);
 8002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002654:	f023 0307 	bic.w	r3, r3, #7
 8002658:	b25b      	sxtb	r3, r3
 800265a:	f043 0301 	orr.w	r3, r3, #1
 800265e:	b25b      	sxtb	r3, r3
 8002660:	71fb      	strb	r3, [r7, #7]
    sx_write(REG_OPMODE, v);
 8002662:	79fb      	ldrb	r3, [r7, #7]
 8002664:	4619      	mov	r1, r3
 8002666:	2001      	movs	r0, #1
 8002668:	f7ff ffc0 	bl	80025ec <sx_write>
}
 800266c:	bf00      	nop
 800266e:	3708      	adds	r7, #8
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <sx_set_freq_hz>:

// Set RF center frequency using FRF = Freq * 2^19 / 32e6
void sx_set_freq_hz(uint32_t freq_hz){
 8002674:	b5b0      	push	{r4, r5, r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
    uint64_t frf = ((uint64_t)freq_hz << 19) / 32000000UL; // FXOSC=32MHz
 800267c:	6879      	ldr	r1, [r7, #4]
 800267e:	2000      	movs	r0, #0
 8002680:	460a      	mov	r2, r1
 8002682:	4603      	mov	r3, r0
 8002684:	0b55      	lsrs	r5, r2, #13
 8002686:	04d4      	lsls	r4, r2, #19
 8002688:	4a18      	ldr	r2, [pc, #96]	@ (80026ec <sx_set_freq_hz+0x78>)
 800268a:	f04f 0300 	mov.w	r3, #0
 800268e:	4620      	mov	r0, r4
 8002690:	4629      	mov	r1, r5
 8002692:	f7fe fc3f 	bl	8000f14 <__aeabi_uldivmod>
 8002696:	4602      	mov	r2, r0
 8002698:	460b      	mov	r3, r1
 800269a:	e9c7 2302 	strd	r2, r3, [r7, #8]
    sx_write(REG_FRF_MSB, (uint8_t)(frf >> 16));
 800269e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026a2:	f04f 0200 	mov.w	r2, #0
 80026a6:	f04f 0300 	mov.w	r3, #0
 80026aa:	0c02      	lsrs	r2, r0, #16
 80026ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80026b0:	0c0b      	lsrs	r3, r1, #16
 80026b2:	b2d3      	uxtb	r3, r2
 80026b4:	4619      	mov	r1, r3
 80026b6:	2006      	movs	r0, #6
 80026b8:	f7ff ff98 	bl	80025ec <sx_write>
    sx_write(REG_FRF_MID, (uint8_t)(frf >> 8));
 80026bc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026c0:	f04f 0200 	mov.w	r2, #0
 80026c4:	f04f 0300 	mov.w	r3, #0
 80026c8:	0a02      	lsrs	r2, r0, #8
 80026ca:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80026ce:	0a0b      	lsrs	r3, r1, #8
 80026d0:	b2d3      	uxtb	r3, r2
 80026d2:	4619      	mov	r1, r3
 80026d4:	2007      	movs	r0, #7
 80026d6:	f7ff ff89 	bl	80025ec <sx_write>
    sx_write(REG_FRF_LSB, (uint8_t)(frf)); // write LSB last to latch
 80026da:	7a3b      	ldrb	r3, [r7, #8]
 80026dc:	4619      	mov	r1, r3
 80026de:	2008      	movs	r0, #8
 80026e0:	f7ff ff84 	bl	80025ec <sx_write>
}
 80026e4:	bf00      	nop
 80026e6:	3710      	adds	r7, #16
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bdb0      	pop	{r4, r5, r7, pc}
 80026ec:	01e84800 	.word	0x01e84800

080026f0 <sx_dump>:
    uint8_t v = sx_read(REG_VERSION);
    return (v == 0x12);
}


void sx_dump(uint8_t start, uint8_t end){
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b084      	sub	sp, #16
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	4603      	mov	r3, r0
 80026f8:	460a      	mov	r2, r1
 80026fa:	71fb      	strb	r3, [r7, #7]
 80026fc:	4613      	mov	r3, r2
 80026fe:	71bb      	strb	r3, [r7, #6]
    for(uint8_t a = start; a <= end; ++a){
 8002700:	79fb      	ldrb	r3, [r7, #7]
 8002702:	73fb      	strb	r3, [r7, #15]
 8002704:	e00e      	b.n	8002724 <sx_dump+0x34>
        uint8_t v = sx_read(a);
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff4b 	bl	80025a4 <sx_read>
 800270e:	4603      	mov	r3, r0
 8002710:	73bb      	strb	r3, [r7, #14]
        if (sx_log) sx_log("0x%02X : 0x%02X\r\n", a, v);
 8002712:	7bfb      	ldrb	r3, [r7, #15]
 8002714:	7bba      	ldrb	r2, [r7, #14]
 8002716:	4619      	mov	r1, r3
 8002718:	4807      	ldr	r0, [pc, #28]	@ (8002738 <sx_dump+0x48>)
 800271a:	f7ff ff21 	bl	8002560 <sx_log>
    for(uint8_t a = start; a <= end; ++a){
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	3301      	adds	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	79bb      	ldrb	r3, [r7, #6]
 8002728:	429a      	cmp	r2, r3
 800272a:	d9ec      	bls.n	8002706 <sx_dump+0x16>
    }
}
 800272c:	bf00      	nop
 800272e:	bf00      	nop
 8002730:	3710      	adds	r7, #16
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	bf00      	nop
 8002738:	08010af8 	.word	0x08010af8

0800273c <sx1276_min_demo>:

// ---- Minimal demo you can call from main() ----
void sx1276_min_demo(void){
 800273c:	b580      	push	{r7, lr}
 800273e:	b082      	sub	sp, #8
 8002740:	af00      	add	r7, sp, #0
	log_init();
 8002742:	f7ff feff 	bl	8002544 <log_init>
	// Probe with CS forced HIGH (should NOT return 0x12)
	HAL_GPIO_WritePin(SX_NSS_PORT, SX_NSS_PIN, GPIO_PIN_SET);
 8002746:	2201      	movs	r2, #1
 8002748:	2110      	movs	r1, #16
 800274a:	4824      	ldr	r0, [pc, #144]	@ (80027dc <sx1276_min_demo+0xa0>)
 800274c:	f002 f8cc 	bl	80048e8 <HAL_GPIO_WritePin>
	uint8_t v_cs_high = sx_read(REG_VERSION);
 8002750:	2042      	movs	r0, #66	@ 0x42
 8002752:	f7ff ff27 	bl	80025a4 <sx_read>
 8002756:	4603      	mov	r3, r0
 8002758:	71fb      	strb	r3, [r7, #7]
	sx_log("[SX] RegVersion with CS HIGH = 0x%02X (expect junk)\r\n", v_cs_high);
 800275a:	79fb      	ldrb	r3, [r7, #7]
 800275c:	4619      	mov	r1, r3
 800275e:	4820      	ldr	r0, [pc, #128]	@ (80027e0 <sx1276_min_demo+0xa4>)
 8002760:	f7ff fefe 	bl	8002560 <sx_log>

	// Now normal read with CS toggled in sx_read()
	uint8_t v = sx_read(REG_VERSION);
 8002764:	2042      	movs	r0, #66	@ 0x42
 8002766:	f7ff ff1d 	bl	80025a4 <sx_read>
 800276a:	4603      	mov	r3, r0
 800276c:	71bb      	strb	r3, [r7, #6]
	sx_log("[SX] RegVersion with CS toggled = 0x%02X (expect 0x12)\r\n", v);
 800276e:	79bb      	ldrb	r3, [r7, #6]
 8002770:	4619      	mov	r1, r3
 8002772:	481c      	ldr	r0, [pc, #112]	@ (80027e4 <sx1276_min_demo+0xa8>)
 8002774:	f7ff fef4 	bl	8002560 <sx_log>

	// ensure CS idle high before any SPI frames
    HAL_GPIO_WritePin(SX_NSS_PORT, SX_NSS_PIN, GPIO_PIN_SET);
 8002778:	2201      	movs	r2, #1
 800277a:	2110      	movs	r1, #16
 800277c:	4817      	ldr	r0, [pc, #92]	@ (80027dc <sx1276_min_demo+0xa0>)
 800277e:	f002 f8b3 	bl	80048e8 <HAL_GPIO_WritePin>

    // 1) version check
    uint8_t ver = sx_read(REG_VERSION);
 8002782:	2042      	movs	r0, #66	@ 0x42
 8002784:	f7ff ff0e 	bl	80025a4 <sx_read>
 8002788:	4603      	mov	r3, r0
 800278a:	717b      	strb	r3, [r7, #5]
    if (sx_log) sx_log("SX1276 RegVersion=0x%02X (expect 0x12)\r\n", ver);
 800278c:	797b      	ldrb	r3, [r7, #5]
 800278e:	4619      	mov	r1, r3
 8002790:	4815      	ldr	r0, [pc, #84]	@ (80027e8 <sx1276_min_demo+0xac>)
 8002792:	f7ff fee5 	bl	8002560 <sx_log>

    // 2) enter LoRa mode and standby
    sx_enter_lora_mode();
 8002796:	f7ff ff4b 	bl	8002630 <sx_enter_lora_mode>

    // 3) set 915 MHz and read back FRF regs
    sx_set_freq_hz(915000000UL);
 800279a:	4814      	ldr	r0, [pc, #80]	@ (80027ec <sx1276_min_demo+0xb0>)
 800279c:	f7ff ff6a 	bl	8002674 <sx_set_freq_hz>
    uint8_t msb = sx_read(REG_FRF_MSB);
 80027a0:	2006      	movs	r0, #6
 80027a2:	f7ff feff 	bl	80025a4 <sx_read>
 80027a6:	4603      	mov	r3, r0
 80027a8:	713b      	strb	r3, [r7, #4]
    uint8_t mid = sx_read(REG_FRF_MID);
 80027aa:	2007      	movs	r0, #7
 80027ac:	f7ff fefa 	bl	80025a4 <sx_read>
 80027b0:	4603      	mov	r3, r0
 80027b2:	70fb      	strb	r3, [r7, #3]
    uint8_t lsb = sx_read(REG_FRF_LSB);
 80027b4:	2008      	movs	r0, #8
 80027b6:	f7ff fef5 	bl	80025a4 <sx_read>
 80027ba:	4603      	mov	r3, r0
 80027bc:	70bb      	strb	r3, [r7, #2]
    if (sx_log) sx_log("FRF set -> MSB=0x%02X MID=0x%02X LSB=0x%02X\r\n", msb, mid, lsb);
 80027be:	7939      	ldrb	r1, [r7, #4]
 80027c0:	78fa      	ldrb	r2, [r7, #3]
 80027c2:	78bb      	ldrb	r3, [r7, #2]
 80027c4:	480a      	ldr	r0, [pc, #40]	@ (80027f0 <sx1276_min_demo+0xb4>)
 80027c6:	f7ff fecb 	bl	8002560 <sx_log>

    // 4) optional: dump a small window around key regs
    sx_dump(0x01, 0x1F);
 80027ca:	211f      	movs	r1, #31
 80027cc:	2001      	movs	r0, #1
 80027ce:	f7ff ff8f 	bl	80026f0 <sx_dump>
}
 80027d2:	bf00      	nop
 80027d4:	3708      	adds	r7, #8
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}
 80027da:	bf00      	nop
 80027dc:	40020000 	.word	0x40020000
 80027e0:	08010b0c 	.word	0x08010b0c
 80027e4:	08010b44 	.word	0x08010b44
 80027e8:	08010b80 	.word	0x08010b80
 80027ec:	3689cac0 	.word	0x3689cac0
 80027f0:	08010bac 	.word	0x08010bac

080027f4 <CS_L>:
#include "w25q16v.h"

static inline void CS_L(void){ HAL_GPIO_WritePin(GPIOB, NSS5_Pin, GPIO_PIN_RESET); }
 80027f4:	b580      	push	{r7, lr}
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	2200      	movs	r2, #0
 80027fa:	2102      	movs	r1, #2
 80027fc:	4802      	ldr	r0, [pc, #8]	@ (8002808 <CS_L+0x14>)
 80027fe:	f002 f873 	bl	80048e8 <HAL_GPIO_WritePin>
 8002802:	bf00      	nop
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40020400 	.word	0x40020400

0800280c <CS_H>:
static inline void CS_H(void){ HAL_GPIO_WritePin(GPIOB, NSS5_Pin, GPIO_PIN_SET); }
 800280c:	b580      	push	{r7, lr}
 800280e:	af00      	add	r7, sp, #0
 8002810:	2201      	movs	r2, #1
 8002812:	2102      	movs	r1, #2
 8002814:	4802      	ldr	r0, [pc, #8]	@ (8002820 <CS_H+0x14>)
 8002816:	f002 f867 	bl	80048e8 <HAL_GPIO_WritePin>
 800281a:	bf00      	nop
 800281c:	bd80      	pop	{r7, pc}
 800281e:	bf00      	nop
 8002820:	40020400 	.word	0x40020400

08002824 <W25_ReadJEDEC>:

HAL_StatusTypeDef W25_ReadJEDEC(uint8_t id[3]){
 8002824:	b580      	push	{r7, lr}
 8002826:	b088      	sub	sp, #32
 8002828:	af02      	add	r7, sp, #8
 800282a:	6078      	str	r0, [r7, #4]
  uint8_t tx[4] = { 0x9F, 0,0,0 };  // 0x9F = JEDEC ID
 800282c:	239f      	movs	r3, #159	@ 0x9f
 800282e:	613b      	str	r3, [r7, #16]
  uint8_t rx[4] = { 0 };
 8002830:	2300      	movs	r3, #0
 8002832:	60fb      	str	r3, [r7, #12]

  CS_L();
 8002834:	f7ff ffde 	bl	80027f4 <CS_L>
  HAL_StatusTypeDef s = HAL_SPI_TransmitReceive(&W25_SPI_HANDLE, tx, rx, sizeof tx, 100);
 8002838:	f107 020c 	add.w	r2, r7, #12
 800283c:	f107 0110 	add.w	r1, r7, #16
 8002840:	2364      	movs	r3, #100	@ 0x64
 8002842:	9300      	str	r3, [sp, #0]
 8002844:	2304      	movs	r3, #4
 8002846:	480e      	ldr	r0, [pc, #56]	@ (8002880 <W25_ReadJEDEC+0x5c>)
 8002848:	f004 fa12 	bl	8006c70 <HAL_SPI_TransmitReceive>
 800284c:	4603      	mov	r3, r0
 800284e:	75fb      	strb	r3, [r7, #23]
  CS_H();
 8002850:	f7ff ffdc 	bl	800280c <CS_H>

  if (s != HAL_OK) return s;
 8002854:	7dfb      	ldrb	r3, [r7, #23]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d001      	beq.n	800285e <W25_ReadJEDEC+0x3a>
 800285a:	7dfb      	ldrb	r3, [r7, #23]
 800285c:	e00b      	b.n	8002876 <W25_ReadJEDEC+0x52>
  id[0] = rx[1];   // manufacturer (Winbond = 0xEF)
 800285e:	7b7a      	ldrb	r2, [r7, #13]
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	701a      	strb	r2, [r3, #0]
  id[1] = rx[2];   // memory type
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	3301      	adds	r3, #1
 8002868:	7bba      	ldrb	r2, [r7, #14]
 800286a:	701a      	strb	r2, [r3, #0]
  id[2] = rx[3];   // capacity code (e.g., 0x15 for 16 Mbit)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	3302      	adds	r3, #2
 8002870:	7bfa      	ldrb	r2, [r7, #15]
 8002872:	701a      	strb	r2, [r3, #0]
  return HAL_OK;
 8002874:	2300      	movs	r3, #0
}
 8002876:	4618      	mov	r0, r3
 8002878:	3718      	adds	r7, #24
 800287a:	46bd      	mov	sp, r7
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	200005d8 	.word	0x200005d8

08002884 <bmp280_altitude_m_from_pa>:
HAL_StatusTypeDef bmp280_read_temperature_c(BMP280_HandleTypeDef *dev, float *temp_c);
HAL_StatusTypeDef bmp280_read_pressure_pa(BMP280_HandleTypeDef *dev, float *press_pa);
HAL_StatusTypeDef bmp280_read_temp_press(BMP280_HandleTypeDef *dev, float *temp_c, float *press_pa);

/* Altitude helper (simple barometric formula) */
static inline float bmp280_altitude_m_from_pa(float pressure_pa, float sea_level_pa) {
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	ed87 0a01 	vstr	s0, [r7, #4]
 800288e:	edc7 0a00 	vstr	s1, [r7]
  /*  standard atmosphere: h = 44330*(1 - (P/P0)^(1/5.255))  */
  float ratio = pressure_pa / sea_level_pa;
 8002892:	edd7 6a01 	vldr	s13, [r7, #4]
 8002896:	ed97 7a00 	vldr	s14, [r7]
 800289a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800289e:	edc7 7a03 	vstr	s15, [r7, #12]
  /* powf needs <math.h> in your C file */
  extern float powf(float, float);
  return 44330.0f * (1.0f - powf(ratio, 0.1903f));
 80028a2:	eddf 0a0a 	vldr	s1, [pc, #40]	@ 80028cc <bmp280_altitude_m_from_pa+0x48>
 80028a6:	ed97 0a03 	vldr	s0, [r7, #12]
 80028aa:	f00c fd47 	bl	800f33c <powf>
 80028ae:	eef0 7a40 	vmov.f32	s15, s0
 80028b2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80028b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028ba:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 80028d0 <bmp280_altitude_m_from_pa+0x4c>
 80028be:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	3e42de01 	.word	0x3e42de01
 80028d0:	472d2a00 	.word	0x472d2a00

080028d4 <IMU_Calibrate>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
static void IMU_Calibrate(void)
{
 80028d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80028d8:	b0aa      	sub	sp, #168	@ 0xa8
 80028da:	af00      	add	r7, sp, #0
    // Hold the board still, Z+ pointing up
    HAL_Delay(IMU_CAL_SETTLE_MS);
 80028dc:	20c8      	movs	r0, #200	@ 0xc8
 80028de:	f001 fcb7 	bl	8004250 <HAL_Delay>

    int64_t sax = 0, say = 0, saz = 0;
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	f04f 0300 	mov.w	r3, #0
 80028ea:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
 80028ee:	f04f 0200 	mov.w	r2, #0
 80028f2:	f04f 0300 	mov.w	r3, #0
 80028f6:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 80028fa:	f04f 0200 	mov.w	r2, #0
 80028fe:	f04f 0300 	mov.w	r3, #0
 8002902:	e9c7 2324 	strd	r2, r3, [r7, #144]	@ 0x90
    int64_t sgx = 0, sgy = 0, sgz = 0;
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	f04f 0300 	mov.w	r3, #0
 800290e:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	f04f 0300 	mov.w	r3, #0
 8002926:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
    int16_t a[3], g[3];

    for (int i = 0; i < IMU_CAL_SAMPLES; i++) {
 800292a:	2300      	movs	r3, #0
 800292c:	677b      	str	r3, [r7, #116]	@ 0x74
 800292e:	e07d      	b.n	8002a2c <IMU_Calibrate+0x158>
        if (icm42605_read_accel(a) == HAL_OK) {
 8002930:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8002934:	4618      	mov	r0, r3
 8002936:	f7ff fd84 	bl	8002442 <icm42605_read_accel>
 800293a:	4603      	mov	r3, r0
 800293c:	2b00      	cmp	r3, #0
 800293e:	d131      	bne.n	80029a4 <IMU_Calibrate+0xd0>
            sax += a[0]; say += a[1]; saz += a[2];
 8002940:	f9b7 3050 	ldrsh.w	r3, [r7, #80]	@ 0x50
 8002944:	b21b      	sxth	r3, r3
 8002946:	17da      	asrs	r2, r3, #31
 8002948:	643b      	str	r3, [r7, #64]	@ 0x40
 800294a:	647a      	str	r2, [r7, #68]	@ 0x44
 800294c:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	@ 0xa0
 8002950:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002952:	1851      	adds	r1, r2, r1
 8002954:	6239      	str	r1, [r7, #32]
 8002956:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8002958:	414b      	adcs	r3, r1
 800295a:	627b      	str	r3, [r7, #36]	@ 0x24
 800295c:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002960:	e9c7 2328 	strd	r2, r3, [r7, #160]	@ 0xa0
 8002964:	f9b7 3052 	ldrsh.w	r3, [r7, #82]	@ 0x52
 8002968:	b21b      	sxth	r3, r3
 800296a:	17da      	asrs	r2, r3, #31
 800296c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800296e:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002970:	e9d7 2326 	ldrd	r2, r3, [r7, #152]	@ 0x98
 8002974:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8002976:	1851      	adds	r1, r2, r1
 8002978:	61b9      	str	r1, [r7, #24]
 800297a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800297c:	414b      	adcs	r3, r1
 800297e:	61fb      	str	r3, [r7, #28]
 8002980:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002984:	e9c7 2326 	strd	r2, r3, [r7, #152]	@ 0x98
 8002988:	f9b7 3054 	ldrsh.w	r3, [r7, #84]	@ 0x54
 800298c:	b21b      	sxth	r3, r3
 800298e:	17da      	asrs	r2, r3, #31
 8002990:	461c      	mov	r4, r3
 8002992:	4615      	mov	r5, r2
 8002994:	e9d7 2324 	ldrd	r2, r3, [r7, #144]	@ 0x90
 8002998:	eb12 0a04 	adds.w	sl, r2, r4
 800299c:	eb43 0b05 	adc.w	fp, r3, r5
 80029a0:	e9c7 ab24 	strd	sl, fp, [r7, #144]	@ 0x90
        }
        if (icm42605_read_gyro(g) == HAL_OK) {
 80029a4:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80029a8:	4618      	mov	r0, r3
 80029aa:	f7ff fd7e 	bl	80024aa <icm42605_read_gyro>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d135      	bne.n	8002a20 <IMU_Calibrate+0x14c>
            sgx += g[0]; sgy += g[1]; sgz += g[2];
 80029b4:	f9b7 3048 	ldrsh.w	r3, [r7, #72]	@ 0x48
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	17da      	asrs	r2, r3, #31
 80029bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80029be:	637a      	str	r2, [r7, #52]	@ 0x34
 80029c0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 80029c4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80029c6:	1851      	adds	r1, r2, r1
 80029c8:	6139      	str	r1, [r7, #16]
 80029ca:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80029cc:	414b      	adcs	r3, r1
 80029ce:	617b      	str	r3, [r7, #20]
 80029d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80029d4:	e9c7 2322 	strd	r2, r3, [r7, #136]	@ 0x88
 80029d8:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80029dc:	b21b      	sxth	r3, r3
 80029de:	17da      	asrs	r2, r3, #31
 80029e0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80029e2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80029e4:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	@ 0x80
 80029e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80029ea:	1851      	adds	r1, r2, r1
 80029ec:	60b9      	str	r1, [r7, #8]
 80029ee:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80029f0:	414b      	adcs	r3, r1
 80029f2:	60fb      	str	r3, [r7, #12]
 80029f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029f8:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
 80029fc:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8002a00:	b21b      	sxth	r3, r3
 8002a02:	17da      	asrs	r2, r3, #31
 8002a04:	4698      	mov	r8, r3
 8002a06:	4691      	mov	r9, r2
 8002a08:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	@ 0x78
 8002a0c:	eb12 0108 	adds.w	r1, r2, r8
 8002a10:	6039      	str	r1, [r7, #0]
 8002a12:	eb43 0309 	adc.w	r3, r3, r9
 8002a16:	607b      	str	r3, [r7, #4]
 8002a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002a1c:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
        }
        HAL_Delay(2); // ~500 Hz sampling during calibration
 8002a20:	2002      	movs	r0, #2
 8002a22:	f001 fc15 	bl	8004250 <HAL_Delay>
    for (int i = 0; i < IMU_CAL_SAMPLES; i++) {
 8002a26:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a28:	3301      	adds	r3, #1
 8002a2a:	677b      	str	r3, [r7, #116]	@ 0x74
 8002a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002a2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002a32:	f6ff af7d 	blt.w	8002930 <IMU_Calibrate+0x5c>
    }

    const float invN = 1.0f / (float)IMU_CAL_SAMPLES;
 8002a36:	f04f 536c 	mov.w	r3, #989855744	@ 0x3b000000
 8002a3a:	673b      	str	r3, [r7, #112]	@ 0x70
    const float mean_ax = (float)sax * invN;
 8002a3c:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	@ 0xa0
 8002a40:	f7fe f9da 	bl	8000df8 <__aeabi_l2f>
 8002a44:	ee07 0a10 	vmov	s14, r0
 8002a48:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002a4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a50:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
    const float mean_ay = (float)say * invN;
 8002a54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002a58:	f7fe f9ce 	bl	8000df8 <__aeabi_l2f>
 8002a5c:	ee07 0a10 	vmov	s14, r0
 8002a60:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002a64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a68:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
    const float mean_az = (float)saz * invN;
 8002a6c:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	@ 0x90
 8002a70:	f7fe f9c2 	bl	8000df8 <__aeabi_l2f>
 8002a74:	ee07 0a10 	vmov	s14, r0
 8002a78:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002a7c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a80:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
    const float mean_gx = (float)sgx * invN;
 8002a84:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	@ 0x88
 8002a88:	f7fe f9b6 	bl	8000df8 <__aeabi_l2f>
 8002a8c:	ee07 0a10 	vmov	s14, r0
 8002a90:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002a94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002a98:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    const float mean_gy = (float)sgy * invN;
 8002a9c:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002aa0:	f7fe f9aa 	bl	8000df8 <__aeabi_l2f>
 8002aa4:	ee07 0a10 	vmov	s14, r0
 8002aa8:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ab0:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    const float mean_gz = (float)sgz * invN;
 8002ab4:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002ab8:	f7fe f99e 	bl	8000df8 <__aeabi_l2f>
 8002abc:	ee07 0a10 	vmov	s14, r0
 8002ac0:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8002ac4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ac8:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58

    // Accel biases in COUNTS: zero X/Y; make Z read exactly +1g at rest
    acc_bias_counts[0] = mean_ax;
 8002acc:	4a1a      	ldr	r2, [pc, #104]	@ (8002b38 <IMU_Calibrate+0x264>)
 8002ace:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002ad0:	6013      	str	r3, [r2, #0]
    acc_bias_counts[1] = mean_ay;
 8002ad2:	4a19      	ldr	r2, [pc, #100]	@ (8002b38 <IMU_Calibrate+0x264>)
 8002ad4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002ad6:	6053      	str	r3, [r2, #4]
    acc_bias_counts[2] = mean_az - ACCEL_LSB_PER_G;  // assumes Z+ up
 8002ad8:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8002adc:	ed9f 7a17 	vldr	s14, [pc, #92]	@ 8002b3c <IMU_Calibrate+0x268>
 8002ae0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002ae4:	4b14      	ldr	r3, [pc, #80]	@ (8002b38 <IMU_Calibrate+0x264>)
 8002ae6:	edc3 7a02 	vstr	s15, [r3, #8]

    // Gyro biases in COUNTS (should be near 0 at rest)
    gyr_bias_counts[0] = mean_gx;
 8002aea:	4a15      	ldr	r2, [pc, #84]	@ (8002b40 <IMU_Calibrate+0x26c>)
 8002aec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002aee:	6013      	str	r3, [r2, #0]
    gyr_bias_counts[1] = mean_gy;
 8002af0:	4a13      	ldr	r2, [pc, #76]	@ (8002b40 <IMU_Calibrate+0x26c>)
 8002af2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002af4:	6053      	str	r3, [r2, #4]
    gyr_bias_counts[2] = mean_gz;
 8002af6:	4a12      	ldr	r2, [pc, #72]	@ (8002b40 <IMU_Calibrate+0x26c>)
 8002af8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002afa:	6093      	str	r3, [r2, #8]

    // Prime EMAs with first values post-cal
    ax_g_f = 0.0f; ay_g_f = 0.0f; az_g_f = 1.0f;
 8002afc:	4b11      	ldr	r3, [pc, #68]	@ (8002b44 <IMU_Calibrate+0x270>)
 8002afe:	f04f 0200 	mov.w	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	4b10      	ldr	r3, [pc, #64]	@ (8002b48 <IMU_Calibrate+0x274>)
 8002b06:	f04f 0200 	mov.w	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	4b0f      	ldr	r3, [pc, #60]	@ (8002b4c <IMU_Calibrate+0x278>)
 8002b0e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8002b12:	601a      	str	r2, [r3, #0]
    gx_dps_f = gy_dps_f = gz_dps_f = 0.0f;
 8002b14:	4b0e      	ldr	r3, [pc, #56]	@ (8002b50 <IMU_Calibrate+0x27c>)
 8002b16:	f04f 0200 	mov.w	r2, #0
 8002b1a:	601a      	str	r2, [r3, #0]
 8002b1c:	4b0c      	ldr	r3, [pc, #48]	@ (8002b50 <IMU_Calibrate+0x27c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0c      	ldr	r2, [pc, #48]	@ (8002b54 <IMU_Calibrate+0x280>)
 8002b22:	6013      	str	r3, [r2, #0]
 8002b24:	4b0b      	ldr	r3, [pc, #44]	@ (8002b54 <IMU_Calibrate+0x280>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	4a0b      	ldr	r2, [pc, #44]	@ (8002b58 <IMU_Calibrate+0x284>)
 8002b2a:	6013      	str	r3, [r2, #0]
}
 8002b2c:	bf00      	nop
 8002b2e:	37a8      	adds	r7, #168	@ 0xa8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b36:	bf00      	nop
 8002b38:	200005a8 	.word	0x200005a8
 8002b3c:	46800000 	.word	0x46800000
 8002b40:	200005b4 	.word	0x200005b4
 8002b44:	200005c0 	.word	0x200005c0
 8002b48:	200005c4 	.word	0x200005c4
 8002b4c:	200005c8 	.word	0x200005c8
 8002b50:	200005d4 	.word	0x200005d4
 8002b54:	200005d0 	.word	0x200005d0
 8002b58:	200005cc 	.word	0x200005cc
 8002b5c:	00000000 	.word	0x00000000

08002b60 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002b64:	ed2d 8b02 	vpush	{d8}
 8002b68:	b0b9      	sub	sp, #228	@ 0xe4
 8002b6a:	af0c      	add	r7, sp, #48	@ 0x30
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b6c:	f001 fafe 	bl	800416c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b70:	f000 fde8 	bl	8003744 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b74:	f000 ff44 	bl	8003a00 <MX_GPIO_Init>
  MX_SPI1_Init();
 8002b78:	f000 fe4c 	bl	8003814 <MX_SPI1_Init>
  MX_SPI2_Init();
 8002b7c:	f000 fe80 	bl	8003880 <MX_SPI2_Init>
  MX_SPI3_Init();
 8002b80:	f000 feb4 	bl	80038ec <MX_SPI3_Init>
  MX_USART2_UART_Init();
 8002b84:	f000 ff12 	bl	80039ac <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8002b88:	f008 feb4 	bl	800b8f4 <MX_USB_DEVICE_Init>
  MX_USART1_UART_Init();
 8002b8c:	f000 fee4 	bl	8003958 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  printf("Starting GPS and sensor test\r\n");
 8002b90:	487d      	ldr	r0, [pc, #500]	@ (8002d88 <main+0x228>)
 8002b92:	f00a f97d 	bl	800ce90 <puts>
  // Initialize GPS module
    if (GPS_Init() == HAL_OK) {
 8002b96:	f7ff f8c5 	bl	8001d24 <GPS_Init>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d103      	bne.n	8002ba8 <main+0x48>
        printf("GPS module initialized successfully\r\n");
 8002ba0:	487a      	ldr	r0, [pc, #488]	@ (8002d8c <main+0x22c>)
 8002ba2:	f00a f975 	bl	800ce90 <puts>
 8002ba6:	e002      	b.n	8002bae <main+0x4e>
    } else {
        printf("GPS module initialization failed\r\n");
 8002ba8:	4879      	ldr	r0, [pc, #484]	@ (8002d90 <main+0x230>)
 8002baa:	f00a f971 	bl	800ce90 <puts>
    }
  // Make sure BMP280 CS idles HIGH before first SPI transaction
  HAL_GPIO_WritePin(BMP280_CS_GPIO, BMP280_CS_PIN, GPIO_PIN_SET);
 8002bae:	2201      	movs	r2, #1
 8002bb0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8002bb4:	4877      	ldr	r0, [pc, #476]	@ (8002d94 <main+0x234>)
 8002bb6:	f001 fe97 	bl	80048e8 <HAL_GPIO_WritePin>

  // Initialize/configure BMP280
  BMP280_AppInit();
 8002bba:	f000 ff95 	bl	8003ae8 <BMP280_AppInit>

  printf("USB CDC up!\n");
 8002bbe:	4876      	ldr	r0, [pc, #472]	@ (8002d98 <main+0x238>)
 8002bc0:	f00a f966 	bl	800ce90 <puts>

  uint8_t id[3];
  if (W25_ReadJEDEC(id) == HAL_OK){
 8002bc4:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f7ff fe2b 	bl	8002824 <W25_ReadJEDEC>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d117      	bne.n	8002c04 <main+0xa4>
     printf("JEDEC: %02X %02X %02X\r\n", id[0], id[1], id[2]);
 8002bd4:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 8002bd8:	4619      	mov	r1, r3
 8002bda:	f897 3039 	ldrb.w	r3, [r7, #57]	@ 0x39
 8002bde:	461a      	mov	r2, r3
 8002be0:	f897 303a 	ldrb.w	r3, [r7, #58]	@ 0x3a
 8002be4:	486d      	ldr	r0, [pc, #436]	@ (8002d9c <main+0x23c>)
 8002be6:	f00a f8eb 	bl	800cdc0 <iprintf>
     HAL_GPIO_TogglePin (GPIOA, LED_Pin);
 8002bea:	2102      	movs	r1, #2
 8002bec:	4869      	ldr	r0, [pc, #420]	@ (8002d94 <main+0x234>)
 8002bee:	f001 fe94 	bl	800491a <HAL_GPIO_TogglePin>
     HAL_Delay(1000);
 8002bf2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002bf6:	f001 fb2b 	bl	8004250 <HAL_Delay>
     HAL_GPIO_TogglePin (GPIOA, LED_Pin);
 8002bfa:	2102      	movs	r1, #2
 8002bfc:	4865      	ldr	r0, [pc, #404]	@ (8002d94 <main+0x234>)
 8002bfe:	f001 fe8c 	bl	800491a <HAL_GPIO_TogglePin>
 8002c02:	e002      	b.n	8002c0a <main+0xaa>
    } else {
     printf("JEDEC read failed\r\n");
 8002c04:	4866      	ldr	r0, [pc, #408]	@ (8002da0 <main+0x240>)
 8002c06:	f00a f943 	bl	800ce90 <puts>


  uint8_t whoami;
  HAL_StatusTypeDef whoami_test;

  whoami_test = icm42605_read_reg(0,0x75, &whoami);
 8002c0a:	f107 0337 	add.w	r3, r7, #55	@ 0x37
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2175      	movs	r1, #117	@ 0x75
 8002c12:	2000      	movs	r0, #0
 8002c14:	f7ff fa54 	bl	80020c0 <icm42605_read_reg>
 8002c18:	4603      	mov	r3, r0
 8002c1a:	f887 308f 	strb.w	r3, [r7, #143]	@ 0x8f
  if (whoami_test == HAL_OK) {
 8002c1e:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d121      	bne.n	8002c6a <main+0x10a>
      if (whoami == 0x42) {
 8002c26:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c2a:	2b42      	cmp	r3, #66	@ 0x42
 8002c2c:	d116      	bne.n	8002c5c <main+0xfc>
          printf("Confirmed ICM WHOAMI: 0x%02X\r\n", whoami);
 8002c2e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c32:	4619      	mov	r1, r3
 8002c34:	485b      	ldr	r0, [pc, #364]	@ (8002da4 <main+0x244>)
 8002c36:	f00a f8c3 	bl	800cdc0 <iprintf>
          HAL_Delay(500);
 8002c3a:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002c3e:	f001 fb07 	bl	8004250 <HAL_Delay>
          HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 8002c42:	2102      	movs	r1, #2
 8002c44:	4853      	ldr	r0, [pc, #332]	@ (8002d94 <main+0x234>)
 8002c46:	f001 fe68 	bl	800491a <HAL_GPIO_TogglePin>
          HAL_Delay(1000);
 8002c4a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002c4e:	f001 faff 	bl	8004250 <HAL_Delay>
          HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 8002c52:	2102      	movs	r1, #2
 8002c54:	484f      	ldr	r0, [pc, #316]	@ (8002d94 <main+0x234>)
 8002c56:	f001 fe60 	bl	800491a <HAL_GPIO_TogglePin>
 8002c5a:	e00c      	b.n	8002c76 <main+0x116>
      } else {
          printf("ICM WHOAMI mismatch: got 0x%02X (expected 0x42)\r\n", whoami);
 8002c5c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8002c60:	4619      	mov	r1, r3
 8002c62:	4851      	ldr	r0, [pc, #324]	@ (8002da8 <main+0x248>)
 8002c64:	f00a f8ac 	bl	800cdc0 <iprintf>
 8002c68:	e005      	b.n	8002c76 <main+0x116>
      }
  } else {
      printf("Failed to read WHOAMI register (status: %d)\r\n", whoami_test);
 8002c6a:	f897 308f 	ldrb.w	r3, [r7, #143]	@ 0x8f
 8002c6e:	4619      	mov	r1, r3
 8002c70:	484e      	ldr	r0, [pc, #312]	@ (8002dac <main+0x24c>)
 8002c72:	f00a f8a5 	bl	800cdc0 <iprintf>
  }

  // Reset chip
  icm42605_reset();
 8002c76:	f7ff fa9d 	bl	80021b4 <icm42605_reset>

  // Configure accelerometer and gyro
  icm42605_config_accel(ACCEL_FS_2G, ACCEL_ODR_1KHZ);
 8002c7a:	2106      	movs	r1, #6
 8002c7c:	2003      	movs	r0, #3
 8002c7e:	f7ff fab4 	bl	80021ea <icm42605_config_accel>
  icm42605_config_gyro(GYRO_FS_2000DPS, GYRO_ODR_1KHZ);
 8002c82:	2106      	movs	r1, #6
 8002c84:	2000      	movs	r0, #0
 8002c86:	f7ff fb47 	bl	8002318 <icm42605_config_gyro>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("Calibrating IMU... keep board still for ~1s\r\n");
 8002c8a:	4849      	ldr	r0, [pc, #292]	@ (8002db0 <main+0x250>)
 8002c8c:	f00a f900 	bl	800ce90 <puts>
  IMU_Calibrate();
 8002c90:	f7ff fe20 	bl	80028d4 <IMU_Calibrate>
  printf("Accel bias (cts): [%.1f, %.1f, %.1f], Gyro bias (cts): [%.1f, %.1f, %.1f]\r\n",
         acc_bias_counts[0], acc_bias_counts[1], acc_bias_counts[2],
 8002c94:	4b47      	ldr	r3, [pc, #284]	@ (8002db4 <main+0x254>)
 8002c96:	681b      	ldr	r3, [r3, #0]
  printf("Accel bias (cts): [%.1f, %.1f, %.1f], Gyro bias (cts): [%.1f, %.1f, %.1f]\r\n",
 8002c98:	4618      	mov	r0, r3
 8002c9a:	f7fd fc5d 	bl	8000558 <__aeabi_f2d>
 8002c9e:	e9c7 0106 	strd	r0, r1, [r7, #24]
         acc_bias_counts[0], acc_bias_counts[1], acc_bias_counts[2],
 8002ca2:	4b44      	ldr	r3, [pc, #272]	@ (8002db4 <main+0x254>)
 8002ca4:	685b      	ldr	r3, [r3, #4]
  printf("Accel bias (cts): [%.1f, %.1f, %.1f], Gyro bias (cts): [%.1f, %.1f, %.1f]\r\n",
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f7fd fc56 	bl	8000558 <__aeabi_f2d>
 8002cac:	4604      	mov	r4, r0
 8002cae:	460d      	mov	r5, r1
         acc_bias_counts[0], acc_bias_counts[1], acc_bias_counts[2],
 8002cb0:	4b40      	ldr	r3, [pc, #256]	@ (8002db4 <main+0x254>)
 8002cb2:	689b      	ldr	r3, [r3, #8]
  printf("Accel bias (cts): [%.1f, %.1f, %.1f], Gyro bias (cts): [%.1f, %.1f, %.1f]\r\n",
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7fd fc4f 	bl	8000558 <__aeabi_f2d>
 8002cba:	4680      	mov	r8, r0
 8002cbc:	4689      	mov	r9, r1
         gyr_bias_counts[0], gyr_bias_counts[1], gyr_bias_counts[2]);
 8002cbe:	4b3e      	ldr	r3, [pc, #248]	@ (8002db8 <main+0x258>)
 8002cc0:	681b      	ldr	r3, [r3, #0]
  printf("Accel bias (cts): [%.1f, %.1f, %.1f], Gyro bias (cts): [%.1f, %.1f, %.1f]\r\n",
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f7fd fc48 	bl	8000558 <__aeabi_f2d>
 8002cc8:	4682      	mov	sl, r0
 8002cca:	468b      	mov	fp, r1
         gyr_bias_counts[0], gyr_bias_counts[1], gyr_bias_counts[2]);
 8002ccc:	4b3a      	ldr	r3, [pc, #232]	@ (8002db8 <main+0x258>)
 8002cce:	685b      	ldr	r3, [r3, #4]
  printf("Accel bias (cts): [%.1f, %.1f, %.1f], Gyro bias (cts): [%.1f, %.1f, %.1f]\r\n",
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f7fd fc41 	bl	8000558 <__aeabi_f2d>
 8002cd6:	e9c7 0104 	strd	r0, r1, [r7, #16]
         gyr_bias_counts[0], gyr_bias_counts[1], gyr_bias_counts[2]);
 8002cda:	4b37      	ldr	r3, [pc, #220]	@ (8002db8 <main+0x258>)
 8002cdc:	689b      	ldr	r3, [r3, #8]
  printf("Accel bias (cts): [%.1f, %.1f, %.1f], Gyro bias (cts): [%.1f, %.1f, %.1f]\r\n",
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fc3a 	bl	8000558 <__aeabi_f2d>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	460b      	mov	r3, r1
 8002ce8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002cec:	ed97 7b04 	vldr	d7, [r7, #16]
 8002cf0:	ed8d 7b06 	vstr	d7, [sp, #24]
 8002cf4:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8002cf8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002cfc:	e9cd 4500 	strd	r4, r5, [sp]
 8002d00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002d04:	482d      	ldr	r0, [pc, #180]	@ (8002dbc <main+0x25c>)
 8002d06:	f00a f85b 	bl	800cdc0 <iprintf>

  float ax_ms2, ay_ms2, az_ms2;
  float gx_dps, gy_dps, gz_dps;
  float pitch_deg, roll_deg;

  uint32_t next_bmp = HAL_GetTick();   // 5 Hz BMP280
 8002d0a:	f001 fa95 	bl	8004238 <HAL_GetTick>
 8002d0e:	f8c7 0094 	str.w	r0, [r7, #148]	@ 0x94
  uint32_t next_gps = HAL_GetTick();   // 1 Hz GPS
 8002d12:	f001 fa91 	bl	8004238 <HAL_GetTick>
 8002d16:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

  printf("Enter while(1)\r\n");
 8002d1a:	4829      	ldr	r0, [pc, #164]	@ (8002dc0 <main+0x260>)
 8002d1c:	f00a f8b8 	bl	800ce90 <puts>
  extern void sx1276_min_demo(void);
  sx1276_min_demo();
 8002d20:	f7ff fd0c 	bl	800273c <sx1276_min_demo>
  while (1)
   {

	  // Add this code to your main while loop for GPS simulation
	  // GPS Simulation (1 Hz) - replace your existing GPS processing section
	  if ((int32_t)(HAL_GetTick() - next_gps) >= 0) {
 8002d24:	f001 fa88 	bl	8004238 <HAL_GetTick>
 8002d28:	4602      	mov	r2, r0
 8002d2a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f2c0 82ba 	blt.w	80032aa <main+0x74a>
	      next_gps += 1000;
 8002d36:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002d3a:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8002d3e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
	      static uint8_t sim_sats = 8;         // Number of satellites
	      static uint32_t sim_time_s = 0;      // Elapsed seconds for time simulation
	      static bool gps_fixed = false;
	      static uint32_t startup_counter = 0;

	      startup_counter++;
 8002d42:	4b20      	ldr	r3, [pc, #128]	@ (8002dc4 <main+0x264>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	3301      	adds	r3, #1
 8002d48:	4a1e      	ldr	r2, [pc, #120]	@ (8002dc4 <main+0x264>)
 8002d4a:	6013      	str	r3, [r2, #0]

	      // Simulate GPS startup sequence (takes ~10 seconds to get fix)
	      if (startup_counter < 10) {
 8002d4c:	4b1d      	ldr	r3, [pc, #116]	@ (8002dc4 <main+0x264>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	2b09      	cmp	r3, #9
 8002d52:	d80a      	bhi.n	8002d6a <main+0x20a>
	          printf("[GPS] Searching for satellites... (%d/4 satellites)\r\n", startup_counter / 3);
 8002d54:	4b1b      	ldr	r3, [pc, #108]	@ (8002dc4 <main+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a1b      	ldr	r2, [pc, #108]	@ (8002dc8 <main+0x268>)
 8002d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002d5e:	085b      	lsrs	r3, r3, #1
 8002d60:	4619      	mov	r1, r3
 8002d62:	481a      	ldr	r0, [pc, #104]	@ (8002dcc <main+0x26c>)
 8002d64:	f00a f82c 	bl	800cdc0 <iprintf>
 8002d68:	e28a      	b.n	8003280 <main+0x720>
	      } else if (!gps_fixed) {
 8002d6a:	4b19      	ldr	r3, [pc, #100]	@ (8002dd0 <main+0x270>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	f083 0301 	eor.w	r3, r3, #1
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d02f      	beq.n	8002dd8 <main+0x278>
	          gps_fixed = true;
 8002d78:	4b15      	ldr	r3, [pc, #84]	@ (8002dd0 <main+0x270>)
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	701a      	strb	r2, [r3, #0]
	          printf("[GPS] GPS Fix acquired! Starting navigation...\r\n");
 8002d7e:	4815      	ldr	r0, [pc, #84]	@ (8002dd4 <main+0x274>)
 8002d80:	f00a f886 	bl	800ce90 <puts>
 8002d84:	e27c      	b.n	8003280 <main+0x720>
 8002d86:	bf00      	nop
 8002d88:	08010bdc 	.word	0x08010bdc
 8002d8c:	08010bfc 	.word	0x08010bfc
 8002d90:	08010c24 	.word	0x08010c24
 8002d94:	40020000 	.word	0x40020000
 8002d98:	08010c48 	.word	0x08010c48
 8002d9c:	08010c54 	.word	0x08010c54
 8002da0:	08010c6c 	.word	0x08010c6c
 8002da4:	08010c80 	.word	0x08010c80
 8002da8:	08010ca0 	.word	0x08010ca0
 8002dac:	08010cd4 	.word	0x08010cd4
 8002db0:	08010d04 	.word	0x08010d04
 8002db4:	200005a8 	.word	0x200005a8
 8002db8:	200005b4 	.word	0x200005b4
 8002dbc:	08010d34 	.word	0x08010d34
 8002dc0:	08010d80 	.word	0x08010d80
 8002dc4:	20000798 	.word	0x20000798
 8002dc8:	aaaaaaab 	.word	0xaaaaaaab
 8002dcc:	08010d90 	.word	0x08010d90
 8002dd0:	2000079c 	.word	0x2000079c
 8002dd4:	08010dc8 	.word	0x08010dc8
	      } else {
	          // Simulate realistic GPS movement and variations
	          sim_time_s++;
 8002dd8:	4bcf      	ldr	r3, [pc, #828]	@ (8003118 <main+0x5b8>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	3301      	adds	r3, #1
 8002dde:	4ace      	ldr	r2, [pc, #824]	@ (8003118 <main+0x5b8>)
 8002de0:	6013      	str	r3, [r2, #0]

	          // Simulate slow movement (walking pace)
	          static float movement_angle = 0.0;
	          movement_angle += 0.05f;  // Slow rotation
 8002de2:	4bce      	ldr	r3, [pc, #824]	@ (800311c <main+0x5bc>)
 8002de4:	edd3 7a00 	vldr	s15, [r3]
 8002de8:	ed9f 7acd 	vldr	s14, [pc, #820]	@ 8003120 <main+0x5c0>
 8002dec:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002df0:	4bca      	ldr	r3, [pc, #808]	@ (800311c <main+0x5bc>)
 8002df2:	edc3 7a00 	vstr	s15, [r3]

	          // Add small realistic variations to position (GPS drift simulation)
	          sim_lat += (sinf(movement_angle * 0.1f) * 0.000005f);  // ~0.5m variation
 8002df6:	4bc9      	ldr	r3, [pc, #804]	@ (800311c <main+0x5bc>)
 8002df8:	edd3 7a00 	vldr	s15, [r3]
 8002dfc:	ed9f 7ac9 	vldr	s14, [pc, #804]	@ 8003124 <main+0x5c4>
 8002e00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e04:	eeb0 0a67 	vmov.f32	s0, s15
 8002e08:	f00c fb52 	bl	800f4b0 <sinf>
 8002e0c:	eef0 7a40 	vmov.f32	s15, s0
 8002e10:	ed9f 7ac5 	vldr	s14, [pc, #788]	@ 8003128 <main+0x5c8>
 8002e14:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e18:	4bc4      	ldr	r3, [pc, #784]	@ (800312c <main+0x5cc>)
 8002e1a:	edd3 7a00 	vldr	s15, [r3]
 8002e1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e22:	4bc2      	ldr	r3, [pc, #776]	@ (800312c <main+0x5cc>)
 8002e24:	edc3 7a00 	vstr	s15, [r3]
	          sim_lon += (cosf(movement_angle * 0.1f) * 0.000005f);  // ~0.5m variation
 8002e28:	4bbc      	ldr	r3, [pc, #752]	@ (800311c <main+0x5bc>)
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	ed9f 7abd 	vldr	s14, [pc, #756]	@ 8003124 <main+0x5c4>
 8002e32:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e36:	eeb0 0a67 	vmov.f32	s0, s15
 8002e3a:	f00c faf5 	bl	800f428 <cosf>
 8002e3e:	eef0 7a40 	vmov.f32	s15, s0
 8002e42:	ed9f 7ab9 	vldr	s14, [pc, #740]	@ 8003128 <main+0x5c8>
 8002e46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e4a:	4bb9      	ldr	r3, [pc, #740]	@ (8003130 <main+0x5d0>)
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e54:	4bb6      	ldr	r3, [pc, #728]	@ (8003130 <main+0x5d0>)
 8002e56:	edc3 7a00 	vstr	s15, [r3]

	          // Simulate altitude changes (small variations)
	          sim_alt += sinf(movement_angle * 0.02f) * 0.5f + (rand() % 20 - 10) * 0.1f;
 8002e5a:	4bb0      	ldr	r3, [pc, #704]	@ (800311c <main+0x5bc>)
 8002e5c:	edd3 7a00 	vldr	s15, [r3]
 8002e60:	ed9f 7ab4 	vldr	s14, [pc, #720]	@ 8003134 <main+0x5d4>
 8002e64:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002e68:	eeb0 0a67 	vmov.f32	s0, s15
 8002e6c:	f00c fb20 	bl	800f4b0 <sinf>
 8002e70:	eef0 7a40 	vmov.f32	s15, s0
 8002e74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002e78:	ee27 8a87 	vmul.f32	s16, s15, s14
 8002e7c:	f009 fa4a 	bl	800c314 <rand>
 8002e80:	4601      	mov	r1, r0
 8002e82:	4bad      	ldr	r3, [pc, #692]	@ (8003138 <main+0x5d8>)
 8002e84:	fb83 2301 	smull	r2, r3, r3, r1
 8002e88:	10da      	asrs	r2, r3, #3
 8002e8a:	17cb      	asrs	r3, r1, #31
 8002e8c:	1ad2      	subs	r2, r2, r3
 8002e8e:	4613      	mov	r3, r2
 8002e90:	009b      	lsls	r3, r3, #2
 8002e92:	4413      	add	r3, r2
 8002e94:	009b      	lsls	r3, r3, #2
 8002e96:	1aca      	subs	r2, r1, r3
 8002e98:	f1a2 030a 	sub.w	r3, r2, #10
 8002e9c:	ee07 3a90 	vmov	s15, r3
 8002ea0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ea4:	ed9f 7a9f 	vldr	s14, [pc, #636]	@ 8003124 <main+0x5c4>
 8002ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002eac:	ee38 7a27 	vadd.f32	s14, s16, s15
 8002eb0:	4ba2      	ldr	r3, [pc, #648]	@ (800313c <main+0x5dc>)
 8002eb2:	edd3 7a00 	vldr	s15, [r3]
 8002eb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002eba:	4ba0      	ldr	r3, [pc, #640]	@ (800313c <main+0x5dc>)
 8002ebc:	edc3 7a00 	vstr	s15, [r3]
	          if (sim_alt < 0) sim_alt = 0;
 8002ec0:	4b9e      	ldr	r3, [pc, #632]	@ (800313c <main+0x5dc>)
 8002ec2:	edd3 7a00 	vldr	s15, [r3]
 8002ec6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002eca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ece:	d503      	bpl.n	8002ed8 <main+0x378>
 8002ed0:	4b9a      	ldr	r3, [pc, #616]	@ (800313c <main+0x5dc>)
 8002ed2:	f04f 0200 	mov.w	r2, #0
 8002ed6:	601a      	str	r2, [r3, #0]

	          // Simulate speed (walking/stationary with variations)
	          sim_speed = 0.5f + sinf(movement_angle * 0.3f) * 0.3f + (rand() % 10) * 0.05f;
 8002ed8:	4b90      	ldr	r3, [pc, #576]	@ (800311c <main+0x5bc>)
 8002eda:	edd3 7a00 	vldr	s15, [r3]
 8002ede:	ed9f 7a98 	vldr	s14, [pc, #608]	@ 8003140 <main+0x5e0>
 8002ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002ee6:	eeb0 0a67 	vmov.f32	s0, s15
 8002eea:	f00c fae1 	bl	800f4b0 <sinf>
 8002eee:	eef0 7a40 	vmov.f32	s15, s0
 8002ef2:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8003140 <main+0x5e0>
 8002ef6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002efa:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002efe:	ee37 8a87 	vadd.f32	s16, s15, s14
 8002f02:	f009 fa07 	bl	800c314 <rand>
 8002f06:	4602      	mov	r2, r0
 8002f08:	4b8b      	ldr	r3, [pc, #556]	@ (8003138 <main+0x5d8>)
 8002f0a:	fb83 1302 	smull	r1, r3, r3, r2
 8002f0e:	1099      	asrs	r1, r3, #2
 8002f10:	17d3      	asrs	r3, r2, #31
 8002f12:	1ac9      	subs	r1, r1, r3
 8002f14:	460b      	mov	r3, r1
 8002f16:	009b      	lsls	r3, r3, #2
 8002f18:	440b      	add	r3, r1
 8002f1a:	005b      	lsls	r3, r3, #1
 8002f1c:	1ad1      	subs	r1, r2, r3
 8002f1e:	ee07 1a90 	vmov	s15, r1
 8002f22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f26:	ed9f 7a7e 	vldr	s14, [pc, #504]	@ 8003120 <main+0x5c0>
 8002f2a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002f2e:	ee78 7a27 	vadd.f32	s15, s16, s15
 8002f32:	4b84      	ldr	r3, [pc, #528]	@ (8003144 <main+0x5e4>)
 8002f34:	edc3 7a00 	vstr	s15, [r3]
	          if (sim_speed < 0) sim_speed = 0;
 8002f38:	4b82      	ldr	r3, [pc, #520]	@ (8003144 <main+0x5e4>)
 8002f3a:	edd3 7a00 	vldr	s15, [r3]
 8002f3e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f46:	d503      	bpl.n	8002f50 <main+0x3f0>
 8002f48:	4b7e      	ldr	r3, [pc, #504]	@ (8003144 <main+0x5e4>)
 8002f4a:	f04f 0200 	mov.w	r2, #0
 8002f4e:	601a      	str	r2, [r3, #0]

	          // Simulate course changes
	          sim_course = fmodf(sim_course + (rand() % 10 - 5) * 2.0f, 360.0f);
 8002f50:	f009 f9e0 	bl	800c314 <rand>
 8002f54:	4601      	mov	r1, r0
 8002f56:	4b78      	ldr	r3, [pc, #480]	@ (8003138 <main+0x5d8>)
 8002f58:	fb83 2301 	smull	r2, r3, r3, r1
 8002f5c:	109a      	asrs	r2, r3, #2
 8002f5e:	17cb      	asrs	r3, r1, #31
 8002f60:	1ad2      	subs	r2, r2, r3
 8002f62:	4613      	mov	r3, r2
 8002f64:	009b      	lsls	r3, r3, #2
 8002f66:	4413      	add	r3, r2
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	1aca      	subs	r2, r1, r3
 8002f6c:	1f53      	subs	r3, r2, #5
 8002f6e:	ee07 3a90 	vmov	s15, r3
 8002f72:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f76:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f7a:	4b73      	ldr	r3, [pc, #460]	@ (8003148 <main+0x5e8>)
 8002f7c:	edd3 7a00 	vldr	s15, [r3]
 8002f80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f84:	eddf 0a71 	vldr	s1, [pc, #452]	@ 800314c <main+0x5ec>
 8002f88:	eeb0 0a67 	vmov.f32	s0, s15
 8002f8c:	f00c f9b6 	bl	800f2fc <fmodf>
 8002f90:	eef0 7a40 	vmov.f32	s15, s0
 8002f94:	4b6c      	ldr	r3, [pc, #432]	@ (8003148 <main+0x5e8>)
 8002f96:	edc3 7a00 	vstr	s15, [r3]
	          if (sim_course < 0) sim_course += 360.0f;
 8002f9a:	4b6b      	ldr	r3, [pc, #428]	@ (8003148 <main+0x5e8>)
 8002f9c:	edd3 7a00 	vldr	s15, [r3]
 8002fa0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002fa4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002fa8:	d509      	bpl.n	8002fbe <main+0x45e>
 8002faa:	4b67      	ldr	r3, [pc, #412]	@ (8003148 <main+0x5e8>)
 8002fac:	edd3 7a00 	vldr	s15, [r3]
 8002fb0:	ed9f 7a66 	vldr	s14, [pc, #408]	@ 800314c <main+0x5ec>
 8002fb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002fb8:	4b63      	ldr	r3, [pc, #396]	@ (8003148 <main+0x5e8>)
 8002fba:	edc3 7a00 	vstr	s15, [r3]

	          // Simulate satellite count variations (7-12 satellites)
	          if (sim_time_s % 10 == 0) {
 8002fbe:	4b56      	ldr	r3, [pc, #344]	@ (8003118 <main+0x5b8>)
 8002fc0:	6819      	ldr	r1, [r3, #0]
 8002fc2:	4b63      	ldr	r3, [pc, #396]	@ (8003150 <main+0x5f0>)
 8002fc4:	fba3 2301 	umull	r2, r3, r3, r1
 8002fc8:	08da      	lsrs	r2, r3, #3
 8002fca:	4613      	mov	r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	4413      	add	r3, r2
 8002fd0:	005b      	lsls	r3, r3, #1
 8002fd2:	1aca      	subs	r2, r1, r3
 8002fd4:	2a00      	cmp	r2, #0
 8002fd6:	d111      	bne.n	8002ffc <main+0x49c>
	              sim_sats = 7 + (rand() % 6);
 8002fd8:	f009 f99c 	bl	800c314 <rand>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	4b5d      	ldr	r3, [pc, #372]	@ (8003154 <main+0x5f4>)
 8002fe0:	fb83 3102 	smull	r3, r1, r3, r2
 8002fe4:	17d3      	asrs	r3, r2, #31
 8002fe6:	1ac9      	subs	r1, r1, r3
 8002fe8:	460b      	mov	r3, r1
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	440b      	add	r3, r1
 8002fee:	005b      	lsls	r3, r3, #1
 8002ff0:	1ad1      	subs	r1, r2, r3
 8002ff2:	b2cb      	uxtb	r3, r1
 8002ff4:	3307      	adds	r3, #7
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	4b57      	ldr	r3, [pc, #348]	@ (8003158 <main+0x5f8>)
 8002ffa:	701a      	strb	r2, [r3, #0]
	          }

	          // Calculate time (simulate UTC time)
	          uint8_t hours = (sim_time_s / 3600) % 24;
 8002ffc:	4b46      	ldr	r3, [pc, #280]	@ (8003118 <main+0x5b8>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a56      	ldr	r2, [pc, #344]	@ (800315c <main+0x5fc>)
 8003002:	fba2 2303 	umull	r2, r3, r2, r3
 8003006:	0ad9      	lsrs	r1, r3, #11
 8003008:	4b55      	ldr	r3, [pc, #340]	@ (8003160 <main+0x600>)
 800300a:	fba3 2301 	umull	r2, r3, r3, r1
 800300e:	091a      	lsrs	r2, r3, #4
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1aca      	subs	r2, r1, r3
 800301a:	4613      	mov	r3, r2
 800301c:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
	          uint8_t minutes = (sim_time_s / 60) % 60;
 8003020:	4b3d      	ldr	r3, [pc, #244]	@ (8003118 <main+0x5b8>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a4f      	ldr	r2, [pc, #316]	@ (8003164 <main+0x604>)
 8003026:	fba2 2303 	umull	r2, r3, r2, r3
 800302a:	0959      	lsrs	r1, r3, #5
 800302c:	4b4d      	ldr	r3, [pc, #308]	@ (8003164 <main+0x604>)
 800302e:	fba3 2301 	umull	r2, r3, r3, r1
 8003032:	095a      	lsrs	r2, r3, #5
 8003034:	4613      	mov	r3, r2
 8003036:	011b      	lsls	r3, r3, #4
 8003038:	1a9b      	subs	r3, r3, r2
 800303a:	009b      	lsls	r3, r3, #2
 800303c:	1aca      	subs	r2, r1, r3
 800303e:	4613      	mov	r3, r2
 8003040:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
	          uint8_t seconds = sim_time_s % 60;
 8003044:	4b34      	ldr	r3, [pc, #208]	@ (8003118 <main+0x5b8>)
 8003046:	6819      	ldr	r1, [r3, #0]
 8003048:	4b46      	ldr	r3, [pc, #280]	@ (8003164 <main+0x604>)
 800304a:	fba3 2301 	umull	r2, r3, r3, r1
 800304e:	095a      	lsrs	r2, r3, #5
 8003050:	4613      	mov	r3, r2
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	1a9b      	subs	r3, r3, r2
 8003056:	009b      	lsls	r3, r3, #2
 8003058:	1aca      	subs	r2, r1, r3
 800305a:	4613      	mov	r3, r2
 800305c:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c

	          // Simulate date (fixed date for demo)
	          uint8_t day = 7;
 8003060:	2307      	movs	r3, #7
 8003062:	f887 308b 	strb.w	r3, [r7, #139]	@ 0x8b
	          uint8_t month = 9;
 8003066:	2309      	movs	r3, #9
 8003068:	f887 308a 	strb.w	r3, [r7, #138]	@ 0x8a
	          uint16_t year = 2025;
 800306c:	f240 73e9 	movw	r3, #2025	@ 0x7e9
 8003070:	f8a7 3088 	strh.w	r3, [r7, #136]	@ 0x88

	          // Display GPS information
	          printf("[GPS] Lat: %.6f° Lon: %.6f°\r\n", sim_lat, sim_lon);
 8003074:	4b2d      	ldr	r3, [pc, #180]	@ (800312c <main+0x5cc>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f7fd fa6d 	bl	8000558 <__aeabi_f2d>
 800307e:	4604      	mov	r4, r0
 8003080:	460d      	mov	r5, r1
 8003082:	4b2b      	ldr	r3, [pc, #172]	@ (8003130 <main+0x5d0>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	4618      	mov	r0, r3
 8003088:	f7fd fa66 	bl	8000558 <__aeabi_f2d>
 800308c:	4602      	mov	r2, r0
 800308e:	460b      	mov	r3, r1
 8003090:	e9cd 2300 	strd	r2, r3, [sp]
 8003094:	4622      	mov	r2, r4
 8003096:	462b      	mov	r3, r5
 8003098:	4833      	ldr	r0, [pc, #204]	@ (8003168 <main+0x608>)
 800309a:	f009 fe91 	bl	800cdc0 <iprintf>
	          printf("[GPS] Satellites: %d Quality: DGPS\r\n", sim_sats);
 800309e:	4b2e      	ldr	r3, [pc, #184]	@ (8003158 <main+0x5f8>)
 80030a0:	781b      	ldrb	r3, [r3, #0]
 80030a2:	4619      	mov	r1, r3
 80030a4:	4831      	ldr	r0, [pc, #196]	@ (800316c <main+0x60c>)
 80030a6:	f009 fe8b 	bl	800cdc0 <iprintf>

	          // Simulate some raw NMEA-like output every few seconds
	          if (sim_time_s % 5 == 0) {
 80030aa:	4b1b      	ldr	r3, [pc, #108]	@ (8003118 <main+0x5b8>)
 80030ac:	6819      	ldr	r1, [r3, #0]
 80030ae:	4b28      	ldr	r3, [pc, #160]	@ (8003150 <main+0x5f0>)
 80030b0:	fba3 2301 	umull	r2, r3, r3, r1
 80030b4:	089a      	lsrs	r2, r3, #2
 80030b6:	4613      	mov	r3, r2
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	4413      	add	r3, r2
 80030bc:	1aca      	subs	r2, r1, r3
 80030be:	2a00      	cmp	r2, #0
 80030c0:	d178      	bne.n	80031b4 <main+0x654>
	              printf("[GPS RAW] $GPRMC,%02d%02d%02d.00,A,%.4f,N,%.4f,W,%.1f,%.1f,%02d%02d%02d,,,A*XX\r\n",
 80030c2:	f897 308e 	ldrb.w	r3, [r7, #142]	@ 0x8e
 80030c6:	61bb      	str	r3, [r7, #24]
 80030c8:	f897 208d 	ldrb.w	r2, [r7, #141]	@ 0x8d
 80030cc:	613a      	str	r2, [r7, #16]
 80030ce:	f897 008c 	ldrb.w	r0, [r7, #140]	@ 0x8c
 80030d2:	60f8      	str	r0, [r7, #12]
 80030d4:	4b15      	ldr	r3, [pc, #84]	@ (800312c <main+0x5cc>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4618      	mov	r0, r3
 80030da:	f7fd fa3d 	bl	8000558 <__aeabi_f2d>
 80030de:	4604      	mov	r4, r0
 80030e0:	460d      	mov	r5, r1
	                     hours, minutes, seconds,
	                     sim_lat, -sim_lon, sim_speed, sim_course,
 80030e2:	4b13      	ldr	r3, [pc, #76]	@ (8003130 <main+0x5d0>)
 80030e4:	edd3 7a00 	vldr	s15, [r3]
 80030e8:	eef1 7a67 	vneg.f32	s15, s15
 80030ec:	ee17 3a90 	vmov	r3, s15
	              printf("[GPS RAW] $GPRMC,%02d%02d%02d.00,A,%.4f,N,%.4f,W,%.1f,%.1f,%02d%02d%02d,,,A*XX\r\n",
 80030f0:	4618      	mov	r0, r3
 80030f2:	f7fd fa31 	bl	8000558 <__aeabi_f2d>
 80030f6:	4680      	mov	r8, r0
 80030f8:	4689      	mov	r9, r1
 80030fa:	4b12      	ldr	r3, [pc, #72]	@ (8003144 <main+0x5e4>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4618      	mov	r0, r3
 8003100:	f7fd fa2a 	bl	8000558 <__aeabi_f2d>
 8003104:	4682      	mov	sl, r0
 8003106:	468b      	mov	fp, r1
 8003108:	4b0f      	ldr	r3, [pc, #60]	@ (8003148 <main+0x5e8>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4618      	mov	r0, r3
 800310e:	f7fd fa23 	bl	8000558 <__aeabi_f2d>
 8003112:	e9c7 0100 	strd	r0, r1, [r7]
 8003116:	e02b      	b.n	8003170 <main+0x610>
 8003118:	200007a0 	.word	0x200007a0
 800311c:	200007a4 	.word	0x200007a4
 8003120:	3d4ccccd 	.word	0x3d4ccccd
 8003124:	3dcccccd 	.word	0x3dcccccd
 8003128:	36a7c5ac 	.word	0x36a7c5ac
 800312c:	20000000 	.word	0x20000000
 8003130:	20000004 	.word	0x20000004
 8003134:	3ca3d70a 	.word	0x3ca3d70a
 8003138:	66666667 	.word	0x66666667
 800313c:	20000008 	.word	0x20000008
 8003140:	3e99999a 	.word	0x3e99999a
 8003144:	200007a8 	.word	0x200007a8
 8003148:	200007ac 	.word	0x200007ac
 800314c:	43b40000 	.word	0x43b40000
 8003150:	cccccccd 	.word	0xcccccccd
 8003154:	2aaaaaab 	.word	0x2aaaaaab
 8003158:	2000000c 	.word	0x2000000c
 800315c:	91a2b3c5 	.word	0x91a2b3c5
 8003160:	aaaaaaab 	.word	0xaaaaaaab
 8003164:	88888889 	.word	0x88888889
 8003168:	08010df8 	.word	0x08010df8
 800316c:	08010e18 	.word	0x08010e18
 8003170:	f897 008b 	ldrb.w	r0, [r7, #139]	@ 0x8b
 8003174:	f897 608a 	ldrb.w	r6, [r7, #138]	@ 0x8a
 8003178:	f8b7 1088 	ldrh.w	r1, [r7, #136]	@ 0x88
 800317c:	4b2e      	ldr	r3, [pc, #184]	@ (8003238 <main+0x6d8>)
 800317e:	fba3 2301 	umull	r2, r3, r3, r1
 8003182:	095a      	lsrs	r2, r3, #5
 8003184:	2364      	movs	r3, #100	@ 0x64
 8003186:	fb02 f303 	mul.w	r3, r2, r3
 800318a:	1acb      	subs	r3, r1, r3
 800318c:	b29b      	uxth	r3, r3
 800318e:	930a      	str	r3, [sp, #40]	@ 0x28
 8003190:	9609      	str	r6, [sp, #36]	@ 0x24
 8003192:	9008      	str	r0, [sp, #32]
 8003194:	ed97 7b00 	vldr	d7, [r7]
 8003198:	ed8d 7b06 	vstr	d7, [sp, #24]
 800319c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80031a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80031a4:	e9cd 4500 	strd	r4, r5, [sp]
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	693a      	ldr	r2, [r7, #16]
 80031ac:	69b9      	ldr	r1, [r7, #24]
 80031ae:	4823      	ldr	r0, [pc, #140]	@ (800323c <main+0x6dc>)
 80031b0:	f009 fe06 	bl	800cdc0 <iprintf>
	                     day, month, year % 100);
	          }

	          // Simulate HDOP and signal quality variations
	          if (sim_time_s % 3 == 0) {
 80031b4:	4b22      	ldr	r3, [pc, #136]	@ (8003240 <main+0x6e0>)
 80031b6:	6819      	ldr	r1, [r3, #0]
 80031b8:	4b22      	ldr	r3, [pc, #136]	@ (8003244 <main+0x6e4>)
 80031ba:	fba3 2301 	umull	r2, r3, r3, r1
 80031be:	085a      	lsrs	r2, r3, #1
 80031c0:	4613      	mov	r3, r2
 80031c2:	005b      	lsls	r3, r3, #1
 80031c4:	4413      	add	r3, r2
 80031c6:	1aca      	subs	r2, r1, r3
 80031c8:	2a00      	cmp	r2, #0
 80031ca:	d14a      	bne.n	8003262 <main+0x702>
	              float hdop = 1.0f + (rand() % 50) * 0.02f; // HDOP between 1.0-2.0
 80031cc:	f009 f8a2 	bl	800c314 <rand>
 80031d0:	4603      	mov	r3, r0
 80031d2:	4a19      	ldr	r2, [pc, #100]	@ (8003238 <main+0x6d8>)
 80031d4:	fb82 1203 	smull	r1, r2, r2, r3
 80031d8:	1111      	asrs	r1, r2, #4
 80031da:	17da      	asrs	r2, r3, #31
 80031dc:	1a8a      	subs	r2, r1, r2
 80031de:	2132      	movs	r1, #50	@ 0x32
 80031e0:	fb01 f202 	mul.w	r2, r1, r2
 80031e4:	1a9a      	subs	r2, r3, r2
 80031e6:	ee07 2a90 	vmov	s15, r2
 80031ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031ee:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8003248 <main+0x6e8>
 80031f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80031f6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80031fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80031fe:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
	              printf("[GPS] HDOP: %.2f Signal Quality: %s\r\n",
 8003202:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8003206:	f7fd f9a7 	bl	8000558 <__aeabi_f2d>
 800320a:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800320e:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8003212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321a:	d501      	bpl.n	8003220 <main+0x6c0>
 800321c:	4b0b      	ldr	r3, [pc, #44]	@ (800324c <main+0x6ec>)
 800321e:	e01a      	b.n	8003256 <main+0x6f6>
	                     hdop, (hdop < 1.5f) ? "Excellent" : (hdop < 2.0f) ? "Good" : "Fair");
 8003220:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8003224:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8003228:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003230:	d510      	bpl.n	8003254 <main+0x6f4>
 8003232:	4b07      	ldr	r3, [pc, #28]	@ (8003250 <main+0x6f0>)
 8003234:	e00f      	b.n	8003256 <main+0x6f6>
 8003236:	bf00      	nop
 8003238:	51eb851f 	.word	0x51eb851f
 800323c:	08010e40 	.word	0x08010e40
 8003240:	200007a0 	.word	0x200007a0
 8003244:	aaaaaaab 	.word	0xaaaaaaab
 8003248:	3ca3d70a 	.word	0x3ca3d70a
 800324c:	08010e94 	.word	0x08010e94
 8003250:	08010ea0 	.word	0x08010ea0
 8003254:	4be0      	ldr	r3, [pc, #896]	@ (80035d8 <main+0xa78>)
	              printf("[GPS] HDOP: %.2f Signal Quality: %s\r\n",
 8003256:	9300      	str	r3, [sp, #0]
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	48df      	ldr	r0, [pc, #892]	@ (80035dc <main+0xa7c>)
 800325e:	f009 fdaf 	bl	800cdc0 <iprintf>
	          }

	          // Simulate antenna status occasionally
	          if (sim_time_s % 15 == 0) {
 8003262:	4bdf      	ldr	r3, [pc, #892]	@ (80035e0 <main+0xa80>)
 8003264:	6819      	ldr	r1, [r3, #0]
 8003266:	4bdf      	ldr	r3, [pc, #892]	@ (80035e4 <main+0xa84>)
 8003268:	fba3 2301 	umull	r2, r3, r3, r1
 800326c:	08da      	lsrs	r2, r3, #3
 800326e:	4613      	mov	r3, r2
 8003270:	011b      	lsls	r3, r3, #4
 8003272:	1a9b      	subs	r3, r3, r2
 8003274:	1aca      	subs	r2, r1, r3
 8003276:	2a00      	cmp	r2, #0
 8003278:	d102      	bne.n	8003280 <main+0x720>
	              printf("[GPS] Antenna Status: OK (Internal patch antenna)\r\n");
 800327a:	48db      	ldr	r0, [pc, #876]	@ (80035e8 <main+0xa88>)
 800327c:	f009 fe08 	bl	800ce90 <puts>
	          }
	      }

	      // Debug counter for simulation
	      static uint32_t debug_counter = 0;
	      debug_counter++;
 8003280:	4bda      	ldr	r3, [pc, #872]	@ (80035ec <main+0xa8c>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	3301      	adds	r3, #1
 8003286:	4ad9      	ldr	r2, [pc, #868]	@ (80035ec <main+0xa8c>)
 8003288:	6013      	str	r3, [r2, #0]
	      if (debug_counter >= 30) {  // Every 30 seconds
 800328a:	4bd8      	ldr	r3, [pc, #864]	@ (80035ec <main+0xa8c>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	2b1d      	cmp	r3, #29
 8003290:	d90b      	bls.n	80032aa <main+0x74a>
	          debug_counter = 0;
 8003292:	4bd6      	ldr	r3, [pc, #856]	@ (80035ec <main+0xa8c>)
 8003294:	2200      	movs	r2, #0
 8003296:	601a      	str	r2, [r3, #0]
	          printf("[GPS DEBUG] Simulation running for %lu seconds\r\n", sim_time_s);
 8003298:	4bd1      	ldr	r3, [pc, #836]	@ (80035e0 <main+0xa80>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4619      	mov	r1, r3
 800329e:	48d4      	ldr	r0, [pc, #848]	@ (80035f0 <main+0xa90>)
 80032a0:	f009 fd8e 	bl	800cdc0 <iprintf>
	          printf("[GPS DEBUG] Position accuracy: ±3m, Time accuracy: ±50ms\r\n");
 80032a4:	48d3      	ldr	r0, [pc, #844]	@ (80035f4 <main+0xa94>)
 80032a6:	f009 fdf3 	bl	800ce90 <puts>
	      }
	  }

    // --- Read and convert accelerometer ---
     // --- Read raw accel/gyro ---
     if (icm42605_read_accel(accel) == HAL_OK) {
 80032aa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff f8c7 	bl	8002442 <icm42605_read_accel>
 80032b4:	4603      	mov	r3, r0
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	f040 8090 	bne.w	80033dc <main+0x87c>
         // Bias-correct in COUNTS
         const float ax_c = (float)accel[0] - acc_bias_counts[0];
 80032bc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80032c0:	ee07 3a90 	vmov	s15, r3
 80032c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032c8:	4bcb      	ldr	r3, [pc, #812]	@ (80035f8 <main+0xa98>)
 80032ca:	edd3 7a00 	vldr	s15, [r3]
 80032ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032d2:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         const float ay_c = (float)accel[1] - acc_bias_counts[1];
 80032d6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80032da:	ee07 3a90 	vmov	s15, r3
 80032de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032e2:	4bc5      	ldr	r3, [pc, #788]	@ (80035f8 <main+0xa98>)
 80032e4:	edd3 7a01 	vldr	s15, [r3, #4]
 80032e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032ec:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
         const float az_c = (float)accel[2] - acc_bias_counts[2];
 80032f0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80032f4:	ee07 3a90 	vmov	s15, r3
 80032f8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80032fc:	4bbe      	ldr	r3, [pc, #760]	@ (80035f8 <main+0xa98>)
 80032fe:	edd3 7a02 	vldr	s15, [r3, #8]
 8003302:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003306:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78

         // Convert to g and m/s²
         float ax_g = ax_c / ACCEL_LSB_PER_G;
 800330a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 800330e:	eddf 6abb 	vldr	s13, [pc, #748]	@ 80035fc <main+0xa9c>
 8003312:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003316:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
         float ay_g = ay_c / ACCEL_LSB_PER_G;
 800331a:	ed97 7a1f 	vldr	s14, [r7, #124]	@ 0x7c
 800331e:	eddf 6ab7 	vldr	s13, [pc, #732]	@ 80035fc <main+0xa9c>
 8003322:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003326:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
         float az_g = az_c / ACCEL_LSB_PER_G;
 800332a:	ed97 7a1e 	vldr	s14, [r7, #120]	@ 0x78
 800332e:	eddf 6ab3 	vldr	s13, [pc, #716]	@ 80035fc <main+0xa9c>
 8003332:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003336:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c

         // Optional smoothing for prettier printing
         ax_g_f = EMA_ALPHA*ax_g + (1.0f-EMA_ALPHA)*ax_g_f;
 800333a:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 800333e:	ed9f 7ab0 	vldr	s14, [pc, #704]	@ 8003600 <main+0xaa0>
 8003342:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003346:	4baf      	ldr	r3, [pc, #700]	@ (8003604 <main+0xaa4>)
 8003348:	edd3 7a00 	vldr	s15, [r3]
 800334c:	eddf 6aae 	vldr	s13, [pc, #696]	@ 8003608 <main+0xaa8>
 8003350:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003358:	4baa      	ldr	r3, [pc, #680]	@ (8003604 <main+0xaa4>)
 800335a:	edc3 7a00 	vstr	s15, [r3]
         ay_g_f = EMA_ALPHA*ay_g + (1.0f-EMA_ALPHA)*ay_g_f;
 800335e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8003362:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8003600 <main+0xaa0>
 8003366:	ee27 7a87 	vmul.f32	s14, s15, s14
 800336a:	4ba8      	ldr	r3, [pc, #672]	@ (800360c <main+0xaac>)
 800336c:	edd3 7a00 	vldr	s15, [r3]
 8003370:	eddf 6aa5 	vldr	s13, [pc, #660]	@ 8003608 <main+0xaa8>
 8003374:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003378:	ee77 7a27 	vadd.f32	s15, s14, s15
 800337c:	4ba3      	ldr	r3, [pc, #652]	@ (800360c <main+0xaac>)
 800337e:	edc3 7a00 	vstr	s15, [r3]
         az_g_f = EMA_ALPHA*az_g + (1.0f-EMA_ALPHA)*az_g_f;
 8003382:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8003386:	ed9f 7a9e 	vldr	s14, [pc, #632]	@ 8003600 <main+0xaa0>
 800338a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800338e:	4ba0      	ldr	r3, [pc, #640]	@ (8003610 <main+0xab0>)
 8003390:	edd3 7a00 	vldr	s15, [r3]
 8003394:	eddf 6a9c 	vldr	s13, [pc, #624]	@ 8003608 <main+0xaa8>
 8003398:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800339c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80033a0:	4b9b      	ldr	r3, [pc, #620]	@ (8003610 <main+0xab0>)
 80033a2:	edc3 7a00 	vstr	s15, [r3]

         ax_ms2 = ax_g_f * G_IN_MS2;
 80033a6:	4b97      	ldr	r3, [pc, #604]	@ (8003604 <main+0xaa4>)
 80033a8:	edd3 7a00 	vldr	s15, [r3]
 80033ac:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 8003614 <main+0xab4>
 80033b0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033b4:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         ay_ms2 = ay_g_f * G_IN_MS2;
 80033b8:	4b94      	ldr	r3, [pc, #592]	@ (800360c <main+0xaac>)
 80033ba:	edd3 7a00 	vldr	s15, [r3]
 80033be:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8003614 <main+0xab4>
 80033c2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033c6:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         az_ms2 = az_g_f * G_IN_MS2;
 80033ca:	4b91      	ldr	r3, [pc, #580]	@ (8003610 <main+0xab0>)
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	ed9f 7a90 	vldr	s14, [pc, #576]	@ 8003614 <main+0xab4>
 80033d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80033d8:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
     }

     if (icm42605_read_gyro(gyro) == HAL_OK) {
 80033dc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80033e0:	4618      	mov	r0, r3
 80033e2:	f7ff f862 	bl	80024aa <icm42605_read_gyro>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	f040 8081 	bne.w	80034f0 <main+0x990>
         // Bias-correct in COUNTS, then convert to dps
         const float gx_c = (float)gyro[0] - gyr_bias_counts[0];
 80033ee:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 80033f2:	ee07 3a90 	vmov	s15, r3
 80033f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80033fa:	4b87      	ldr	r3, [pc, #540]	@ (8003618 <main+0xab8>)
 80033fc:	edd3 7a00 	vldr	s15, [r3]
 8003400:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003404:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68
         const float gy_c = (float)gyro[1] - gyr_bias_counts[1];
 8003408:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 800340c:	ee07 3a90 	vmov	s15, r3
 8003410:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003414:	4b80      	ldr	r3, [pc, #512]	@ (8003618 <main+0xab8>)
 8003416:	edd3 7a01 	vldr	s15, [r3, #4]
 800341a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800341e:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64
         const float gz_c = (float)gyro[2] - gyr_bias_counts[2];
 8003422:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8003426:	ee07 3a90 	vmov	s15, r3
 800342a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800342e:	4b7a      	ldr	r3, [pc, #488]	@ (8003618 <main+0xab8>)
 8003430:	edd3 7a02 	vldr	s15, [r3, #8]
 8003434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003438:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60

         const float gx_dps_raw = gx_c / GYRO_LSB_PER_DPS;
 800343c:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8003440:	eddf 6a76 	vldr	s13, [pc, #472]	@ 800361c <main+0xabc>
 8003444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003448:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
         const float gy_dps_raw = gy_c / GYRO_LSB_PER_DPS;
 800344c:	ed97 7a19 	vldr	s14, [r7, #100]	@ 0x64
 8003450:	eddf 6a72 	vldr	s13, [pc, #456]	@ 800361c <main+0xabc>
 8003454:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003458:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
         const float gz_dps_raw = gz_c / GYRO_LSB_PER_DPS;
 800345c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8003460:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800361c <main+0xabc>
 8003464:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003468:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

         // Optional smoothing
         gx_dps_f = EMA_ALPHA*gx_dps_raw + (1.0f-EMA_ALPHA)*gx_dps_f;
 800346c:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8003470:	ed9f 7a63 	vldr	s14, [pc, #396]	@ 8003600 <main+0xaa0>
 8003474:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003478:	4b69      	ldr	r3, [pc, #420]	@ (8003620 <main+0xac0>)
 800347a:	edd3 7a00 	vldr	s15, [r3]
 800347e:	eddf 6a62 	vldr	s13, [pc, #392]	@ 8003608 <main+0xaa8>
 8003482:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800348a:	4b65      	ldr	r3, [pc, #404]	@ (8003620 <main+0xac0>)
 800348c:	edc3 7a00 	vstr	s15, [r3]
         gy_dps_f = EMA_ALPHA*gy_dps_raw + (1.0f-EMA_ALPHA)*gy_dps_f;
 8003490:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8003494:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 8003600 <main+0xaa0>
 8003498:	ee27 7a87 	vmul.f32	s14, s15, s14
 800349c:	4b61      	ldr	r3, [pc, #388]	@ (8003624 <main+0xac4>)
 800349e:	edd3 7a00 	vldr	s15, [r3]
 80034a2:	eddf 6a59 	vldr	s13, [pc, #356]	@ 8003608 <main+0xaa8>
 80034a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034ae:	4b5d      	ldr	r3, [pc, #372]	@ (8003624 <main+0xac4>)
 80034b0:	edc3 7a00 	vstr	s15, [r3]
         gz_dps_f = EMA_ALPHA*gz_dps_raw + (1.0f-EMA_ALPHA)*gz_dps_f;
 80034b4:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 80034b8:	ed9f 7a51 	vldr	s14, [pc, #324]	@ 8003600 <main+0xaa0>
 80034bc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80034c0:	4b59      	ldr	r3, [pc, #356]	@ (8003628 <main+0xac8>)
 80034c2:	edd3 7a00 	vldr	s15, [r3]
 80034c6:	eddf 6a50 	vldr	s13, [pc, #320]	@ 8003608 <main+0xaa8>
 80034ca:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80034ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034d2:	4b55      	ldr	r3, [pc, #340]	@ (8003628 <main+0xac8>)
 80034d4:	edc3 7a00 	vstr	s15, [r3]

         gx_dps = gx_dps_f; gy_dps = gy_dps_f; gz_dps = gz_dps_f;
 80034d8:	4b51      	ldr	r3, [pc, #324]	@ (8003620 <main+0xac0>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80034e0:	4b50      	ldr	r3, [pc, #320]	@ (8003624 <main+0xac4>)
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80034e8:	4b4f      	ldr	r3, [pc, #316]	@ (8003628 <main+0xac8>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
     }

     // --- Angles from corrected accel (in g) ---
     float ax_g_use = ax_ms2 / G_IN_MS2;
 80034f0:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80034f4:	eddf 6a47 	vldr	s13, [pc, #284]	@ 8003614 <main+0xab4>
 80034f8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034fc:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
     float ay_g_use = ay_ms2 / G_IN_MS2;
 8003500:	ed97 7a2a 	vldr	s14, [r7, #168]	@ 0xa8
 8003504:	eddf 6a43 	vldr	s13, [pc, #268]	@ 8003614 <main+0xab4>
 8003508:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800350c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
     float az_g_use = az_ms2 / G_IN_MS2;
 8003510:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8003514:	eddf 6a3f 	vldr	s13, [pc, #252]	@ 8003614 <main+0xab4>
 8003518:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800351c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

     pitch_deg = atan2f(-ax_g_use, sqrtf(ay_g_use*ay_g_use + az_g_use*az_g_use)) * (180.0f / M_PI);
 8003520:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8003524:	eeb1 8a67 	vneg.f32	s16, s15
 8003528:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 800352c:	ee27 7aa7 	vmul.f32	s14, s15, s15
 8003530:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8003534:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8003538:	ee77 7a27 	vadd.f32	s15, s14, s15
 800353c:	eeb0 0a67 	vmov.f32	s0, s15
 8003540:	f00b ff54 	bl	800f3ec <sqrtf>
 8003544:	eef0 7a40 	vmov.f32	s15, s0
 8003548:	eef0 0a67 	vmov.f32	s1, s15
 800354c:	eeb0 0a48 	vmov.f32	s0, s16
 8003550:	f00b fed2 	bl	800f2f8 <atan2f>
 8003554:	ee10 3a10 	vmov	r3, s0
 8003558:	4618      	mov	r0, r3
 800355a:	f7fc fffd 	bl	8000558 <__aeabi_f2d>
 800355e:	a31c      	add	r3, pc, #112	@ (adr r3, 80035d0 <main+0xa70>)
 8003560:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003564:	f7fd f850 	bl	8000608 <__aeabi_dmul>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	4610      	mov	r0, r2
 800356e:	4619      	mov	r1, r3
 8003570:	f7fd fb22 	bl	8000bb8 <__aeabi_d2f>
 8003574:	4603      	mov	r3, r0
 8003576:	647b      	str	r3, [r7, #68]	@ 0x44
     roll_deg  = atan2f( ay_g_use, az_g_use ) * (180.0f / M_PI);
 8003578:	edd7 0a12 	vldr	s1, [r7, #72]	@ 0x48
 800357c:	ed97 0a13 	vldr	s0, [r7, #76]	@ 0x4c
 8003580:	f00b feba 	bl	800f2f8 <atan2f>
 8003584:	ee10 3a10 	vmov	r3, s0
 8003588:	4618      	mov	r0, r3
 800358a:	f7fc ffe5 	bl	8000558 <__aeabi_f2d>
 800358e:	a310      	add	r3, pc, #64	@ (adr r3, 80035d0 <main+0xa70>)
 8003590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003594:	f7fd f838 	bl	8000608 <__aeabi_dmul>
 8003598:	4602      	mov	r2, r0
 800359a:	460b      	mov	r3, r1
 800359c:	4610      	mov	r0, r2
 800359e:	4619      	mov	r1, r3
 80035a0:	f7fd fb0a 	bl	8000bb8 <__aeabi_d2f>
 80035a4:	4603      	mov	r3, r0
 80035a6:	643b      	str	r3, [r7, #64]	@ 0x40

     // Print
     printf("[IMU: Accel] (m/s²): X=%.2f Y=%.2f Z=%.2f\r\n", ax_ms2, ay_ms2, az_ms2);
 80035a8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	@ 0xac
 80035ac:	f7fc ffd4 	bl	8000558 <__aeabi_f2d>
 80035b0:	4680      	mov	r8, r0
 80035b2:	4689      	mov	r9, r1
 80035b4:	f8d7 00a8 	ldr.w	r0, [r7, #168]	@ 0xa8
 80035b8:	f7fc ffce 	bl	8000558 <__aeabi_f2d>
 80035bc:	4604      	mov	r4, r0
 80035be:	460d      	mov	r5, r1
 80035c0:	f8d7 00a4 	ldr.w	r0, [r7, #164]	@ 0xa4
 80035c4:	f7fc ffc8 	bl	8000558 <__aeabi_f2d>
 80035c8:	e030      	b.n	800362c <main+0xacc>
 80035ca:	bf00      	nop
 80035cc:	f3af 8000 	nop.w
 80035d0:	1a63c1f8 	.word	0x1a63c1f8
 80035d4:	404ca5dc 	.word	0x404ca5dc
 80035d8:	08010ea8 	.word	0x08010ea8
 80035dc:	08010eb0 	.word	0x08010eb0
 80035e0:	200007a0 	.word	0x200007a0
 80035e4:	88888889 	.word	0x88888889
 80035e8:	08010ed8 	.word	0x08010ed8
 80035ec:	200007b0 	.word	0x200007b0
 80035f0:	08010f0c 	.word	0x08010f0c
 80035f4:	08010f40 	.word	0x08010f40
 80035f8:	200005a8 	.word	0x200005a8
 80035fc:	46800000 	.word	0x46800000
 8003600:	3df5c28f 	.word	0x3df5c28f
 8003604:	200005c0 	.word	0x200005c0
 8003608:	3f6147ae 	.word	0x3f6147ae
 800360c:	200005c4 	.word	0x200005c4
 8003610:	200005c8 	.word	0x200005c8
 8003614:	411ce80a 	.word	0x411ce80a
 8003618:	200005b4 	.word	0x200005b4
 800361c:	41833333 	.word	0x41833333
 8003620:	200005cc 	.word	0x200005cc
 8003624:	200005d0 	.word	0x200005d0
 8003628:	200005d4 	.word	0x200005d4
 800362c:	4602      	mov	r2, r0
 800362e:	460b      	mov	r3, r1
 8003630:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003634:	e9cd 4500 	strd	r4, r5, [sp]
 8003638:	4642      	mov	r2, r8
 800363a:	464b      	mov	r3, r9
 800363c:	483a      	ldr	r0, [pc, #232]	@ (8003728 <main+0xbc8>)
 800363e:	f009 fbbf 	bl	800cdc0 <iprintf>
     printf("[IMU: Gyro]  (°/s):  X=%.2f Y=%.2f Z=%.2f\r\n", gx_dps, gy_dps, gz_dps);
 8003642:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8003646:	f7fc ff87 	bl	8000558 <__aeabi_f2d>
 800364a:	4680      	mov	r8, r0
 800364c:	4689      	mov	r9, r1
 800364e:	f8d7 009c 	ldr.w	r0, [r7, #156]	@ 0x9c
 8003652:	f7fc ff81 	bl	8000558 <__aeabi_f2d>
 8003656:	4604      	mov	r4, r0
 8003658:	460d      	mov	r5, r1
 800365a:	f8d7 0098 	ldr.w	r0, [r7, #152]	@ 0x98
 800365e:	f7fc ff7b 	bl	8000558 <__aeabi_f2d>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800366a:	e9cd 4500 	strd	r4, r5, [sp]
 800366e:	4642      	mov	r2, r8
 8003670:	464b      	mov	r3, r9
 8003672:	482e      	ldr	r0, [pc, #184]	@ (800372c <main+0xbcc>)
 8003674:	f009 fba4 	bl	800cdc0 <iprintf>
     printf("[IMU: Angles] (deg):  Pitch=%.2f Roll=%.2f\r\n",  pitch_deg, roll_deg);
 8003678:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800367a:	f7fc ff6d 	bl	8000558 <__aeabi_f2d>
 800367e:	4604      	mov	r4, r0
 8003680:	460d      	mov	r5, r1
 8003682:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8003684:	f7fc ff68 	bl	8000558 <__aeabi_f2d>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	e9cd 2300 	strd	r2, r3, [sp]
 8003690:	4622      	mov	r2, r4
 8003692:	462b      	mov	r3, r5
 8003694:	4826      	ldr	r0, [pc, #152]	@ (8003730 <main+0xbd0>)
 8003696:	f009 fb93 	bl	800cdc0 <iprintf>

    HAL_GPIO_TogglePin(GPIOA, LED_Pin);
 800369a:	2102      	movs	r1, #2
 800369c:	4825      	ldr	r0, [pc, #148]	@ (8003734 <main+0xbd4>)
 800369e:	f001 f93c 	bl	800491a <HAL_GPIO_TogglePin>
    HAL_Delay(100); // ~1 Hz refresh for readability
 80036a2:	2064      	movs	r0, #100	@ 0x64
 80036a4:	f000 fdd4 	bl	8004250 <HAL_Delay>

    // --- BMP280 read (5 Hz) ---
    if ((int32_t)(HAL_GetTick() - next_bmp) >= 0) {
 80036a8:	f000 fdc6 	bl	8004238 <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036b2:	1ad3      	subs	r3, r2, r3
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	f6ff ab35 	blt.w	8002d24 <main+0x1c4>
        next_bmp += 200;
 80036ba:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80036be:	33c8      	adds	r3, #200	@ 0xc8
 80036c0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

        float t_c, p_pa;
        if (bmp280_read_temp_press(&bmp, &t_c, &p_pa) == HAL_OK) {
 80036c4:	f107 0220 	add.w	r2, r7, #32
 80036c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036cc:	4619      	mov	r1, r3
 80036ce:	481a      	ldr	r0, [pc, #104]	@ (8003738 <main+0xbd8>)
 80036d0:	f7fe fae2 	bl	8001c98 <bmp280_read_temp_press>
 80036d4:	4603      	mov	r3, r0
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	f47f ab24 	bne.w	8002d24 <main+0x1c4>
            float alt_m = bmp280_altitude_m_from_pa(p_pa, SEA_LEVEL_PA);
 80036dc:	edd7 7a08 	vldr	s15, [r7, #32]
 80036e0:	eddf 0a16 	vldr	s1, [pc, #88]	@ 800373c <main+0xbdc>
 80036e4:	eeb0 0a67 	vmov.f32	s0, s15
 80036e8:	f7ff f8cc 	bl	8002884 <bmp280_altitude_m_from_pa>
 80036ec:	ed87 0a0f 	vstr	s0, [r7, #60]	@ 0x3c
            printf("[BMP280] T=%.2f C  P=%.1f Pa  Alt=%.1f m\r\n", t_c, p_pa, alt_m);
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	4618      	mov	r0, r3
 80036f4:	f7fc ff30 	bl	8000558 <__aeabi_f2d>
 80036f8:	4680      	mov	r8, r0
 80036fa:	4689      	mov	r9, r1
 80036fc:	6a3b      	ldr	r3, [r7, #32]
 80036fe:	4618      	mov	r0, r3
 8003700:	f7fc ff2a 	bl	8000558 <__aeabi_f2d>
 8003704:	4604      	mov	r4, r0
 8003706:	460d      	mov	r5, r1
 8003708:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800370a:	f7fc ff25 	bl	8000558 <__aeabi_f2d>
 800370e:	4602      	mov	r2, r0
 8003710:	460b      	mov	r3, r1
 8003712:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003716:	e9cd 4500 	strd	r4, r5, [sp]
 800371a:	4642      	mov	r2, r8
 800371c:	464b      	mov	r3, r9
 800371e:	4808      	ldr	r0, [pc, #32]	@ (8003740 <main+0xbe0>)
 8003720:	f009 fb4e 	bl	800cdc0 <iprintf>
   {
 8003724:	f7ff bafe 	b.w	8002d24 <main+0x1c4>
 8003728:	08010f7c 	.word	0x08010f7c
 800372c:	08010fac 	.word	0x08010fac
 8003730:	08010fdc 	.word	0x08010fdc
 8003734:	40020000 	.word	0x40020000
 8003738:	20000770 	.word	0x20000770
 800373c:	47c5e680 	.word	0x47c5e680
 8003740:	0801100c 	.word	0x0801100c

08003744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	b094      	sub	sp, #80	@ 0x50
 8003748:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800374a:	f107 0320 	add.w	r3, r7, #32
 800374e:	2230      	movs	r2, #48	@ 0x30
 8003750:	2100      	movs	r1, #0
 8003752:	4618      	mov	r0, r3
 8003754:	f009 fd8e 	bl	800d274 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003758:	f107 030c 	add.w	r3, r7, #12
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	605a      	str	r2, [r3, #4]
 8003762:	609a      	str	r2, [r3, #8]
 8003764:	60da      	str	r2, [r3, #12]
 8003766:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003768:	2300      	movs	r3, #0
 800376a:	60bb      	str	r3, [r7, #8]
 800376c:	4b27      	ldr	r3, [pc, #156]	@ (800380c <SystemClock_Config+0xc8>)
 800376e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003770:	4a26      	ldr	r2, [pc, #152]	@ (800380c <SystemClock_Config+0xc8>)
 8003772:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003776:	6413      	str	r3, [r2, #64]	@ 0x40
 8003778:	4b24      	ldr	r3, [pc, #144]	@ (800380c <SystemClock_Config+0xc8>)
 800377a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003780:	60bb      	str	r3, [r7, #8]
 8003782:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003784:	2300      	movs	r3, #0
 8003786:	607b      	str	r3, [r7, #4]
 8003788:	4b21      	ldr	r3, [pc, #132]	@ (8003810 <SystemClock_Config+0xcc>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a20      	ldr	r2, [pc, #128]	@ (8003810 <SystemClock_Config+0xcc>)
 800378e:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003792:	6013      	str	r3, [r2, #0]
 8003794:	4b1e      	ldr	r3, [pc, #120]	@ (8003810 <SystemClock_Config+0xcc>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800379c:	607b      	str	r3, [r7, #4]
 800379e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80037a0:	2301      	movs	r3, #1
 80037a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80037a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80037a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80037aa:	2302      	movs	r3, #2
 80037ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80037ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80037b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 6;
 80037b4:	2306      	movs	r3, #6
 80037b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80037b8:	2348      	movs	r3, #72	@ 0x48
 80037ba:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80037bc:	2302      	movs	r3, #2
 80037be:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80037c0:	2303      	movs	r3, #3
 80037c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80037c4:	f107 0320 	add.w	r3, r7, #32
 80037c8:	4618      	mov	r0, r3
 80037ca:	f002 fb13 	bl	8005df4 <HAL_RCC_OscConfig>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80037d4:	f000 f9c4 	bl	8003b60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80037d8:	230f      	movs	r3, #15
 80037da:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80037dc:	2302      	movs	r3, #2
 80037de:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80037e0:	2300      	movs	r3, #0
 80037e2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80037e4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037e8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80037ea:	2300      	movs	r3, #0
 80037ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80037ee:	f107 030c 	add.w	r3, r7, #12
 80037f2:	2102      	movs	r1, #2
 80037f4:	4618      	mov	r0, r3
 80037f6:	f002 fd75 	bl	80062e4 <HAL_RCC_ClockConfig>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8003800:	f000 f9ae 	bl	8003b60 <Error_Handler>
  }
}
 8003804:	bf00      	nop
 8003806:	3750      	adds	r7, #80	@ 0x50
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	40023800 	.word	0x40023800
 8003810:	40007000 	.word	0x40007000

08003814 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8003818:	4b17      	ldr	r3, [pc, #92]	@ (8003878 <MX_SPI1_Init+0x64>)
 800381a:	4a18      	ldr	r2, [pc, #96]	@ (800387c <MX_SPI1_Init+0x68>)
 800381c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800381e:	4b16      	ldr	r3, [pc, #88]	@ (8003878 <MX_SPI1_Init+0x64>)
 8003820:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003824:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8003826:	4b14      	ldr	r3, [pc, #80]	@ (8003878 <MX_SPI1_Init+0x64>)
 8003828:	2200      	movs	r2, #0
 800382a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800382c:	4b12      	ldr	r3, [pc, #72]	@ (8003878 <MX_SPI1_Init+0x64>)
 800382e:	2200      	movs	r2, #0
 8003830:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003832:	4b11      	ldr	r3, [pc, #68]	@ (8003878 <MX_SPI1_Init+0x64>)
 8003834:	2200      	movs	r2, #0
 8003836:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003838:	4b0f      	ldr	r3, [pc, #60]	@ (8003878 <MX_SPI1_Init+0x64>)
 800383a:	2200      	movs	r2, #0
 800383c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800383e:	4b0e      	ldr	r3, [pc, #56]	@ (8003878 <MX_SPI1_Init+0x64>)
 8003840:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003844:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8003846:	4b0c      	ldr	r3, [pc, #48]	@ (8003878 <MX_SPI1_Init+0x64>)
 8003848:	2210      	movs	r2, #16
 800384a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800384c:	4b0a      	ldr	r3, [pc, #40]	@ (8003878 <MX_SPI1_Init+0x64>)
 800384e:	2200      	movs	r2, #0
 8003850:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003852:	4b09      	ldr	r3, [pc, #36]	@ (8003878 <MX_SPI1_Init+0x64>)
 8003854:	2200      	movs	r2, #0
 8003856:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003858:	4b07      	ldr	r3, [pc, #28]	@ (8003878 <MX_SPI1_Init+0x64>)
 800385a:	2200      	movs	r2, #0
 800385c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800385e:	4b06      	ldr	r3, [pc, #24]	@ (8003878 <MX_SPI1_Init+0x64>)
 8003860:	220a      	movs	r2, #10
 8003862:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003864:	4804      	ldr	r0, [pc, #16]	@ (8003878 <MX_SPI1_Init+0x64>)
 8003866:	f002 ff1d 	bl	80066a4 <HAL_SPI_Init>
 800386a:	4603      	mov	r3, r0
 800386c:	2b00      	cmp	r3, #0
 800386e:	d001      	beq.n	8003874 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8003870:	f000 f976 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8003874:	bf00      	nop
 8003876:	bd80      	pop	{r7, pc}
 8003878:	200005d8 	.word	0x200005d8
 800387c:	40013000 	.word	0x40013000

08003880 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8003884:	4b17      	ldr	r3, [pc, #92]	@ (80038e4 <MX_SPI2_Init+0x64>)
 8003886:	4a18      	ldr	r2, [pc, #96]	@ (80038e8 <MX_SPI2_Init+0x68>)
 8003888:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800388a:	4b16      	ldr	r3, [pc, #88]	@ (80038e4 <MX_SPI2_Init+0x64>)
 800388c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003890:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003892:	4b14      	ldr	r3, [pc, #80]	@ (80038e4 <MX_SPI2_Init+0x64>)
 8003894:	2200      	movs	r2, #0
 8003896:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8003898:	4b12      	ldr	r3, [pc, #72]	@ (80038e4 <MX_SPI2_Init+0x64>)
 800389a:	2200      	movs	r2, #0
 800389c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800389e:	4b11      	ldr	r3, [pc, #68]	@ (80038e4 <MX_SPI2_Init+0x64>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80038a4:	4b0f      	ldr	r3, [pc, #60]	@ (80038e4 <MX_SPI2_Init+0x64>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80038aa:	4b0e      	ldr	r3, [pc, #56]	@ (80038e4 <MX_SPI2_Init+0x64>)
 80038ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80038b0:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038b2:	4b0c      	ldr	r3, [pc, #48]	@ (80038e4 <MX_SPI2_Init+0x64>)
 80038b4:	2200      	movs	r2, #0
 80038b6:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80038b8:	4b0a      	ldr	r3, [pc, #40]	@ (80038e4 <MX_SPI2_Init+0x64>)
 80038ba:	2200      	movs	r2, #0
 80038bc:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80038be:	4b09      	ldr	r3, [pc, #36]	@ (80038e4 <MX_SPI2_Init+0x64>)
 80038c0:	2200      	movs	r2, #0
 80038c2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038c4:	4b07      	ldr	r3, [pc, #28]	@ (80038e4 <MX_SPI2_Init+0x64>)
 80038c6:	2200      	movs	r2, #0
 80038c8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80038ca:	4b06      	ldr	r3, [pc, #24]	@ (80038e4 <MX_SPI2_Init+0x64>)
 80038cc:	220a      	movs	r2, #10
 80038ce:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80038d0:	4804      	ldr	r0, [pc, #16]	@ (80038e4 <MX_SPI2_Init+0x64>)
 80038d2:	f002 fee7 	bl	80066a4 <HAL_SPI_Init>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80038dc:	f000 f940 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80038e0:	bf00      	nop
 80038e2:	bd80      	pop	{r7, pc}
 80038e4:	20000630 	.word	0x20000630
 80038e8:	40003800 	.word	0x40003800

080038ec <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80038f0:	4b17      	ldr	r3, [pc, #92]	@ (8003950 <MX_SPI3_Init+0x64>)
 80038f2:	4a18      	ldr	r2, [pc, #96]	@ (8003954 <MX_SPI3_Init+0x68>)
 80038f4:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80038f6:	4b16      	ldr	r3, [pc, #88]	@ (8003950 <MX_SPI3_Init+0x64>)
 80038f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80038fc:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 80038fe:	4b14      	ldr	r3, [pc, #80]	@ (8003950 <MX_SPI3_Init+0x64>)
 8003900:	2200      	movs	r2, #0
 8003902:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8003904:	4b12      	ldr	r3, [pc, #72]	@ (8003950 <MX_SPI3_Init+0x64>)
 8003906:	2200      	movs	r2, #0
 8003908:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800390a:	4b11      	ldr	r3, [pc, #68]	@ (8003950 <MX_SPI3_Init+0x64>)
 800390c:	2200      	movs	r2, #0
 800390e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003910:	4b0f      	ldr	r3, [pc, #60]	@ (8003950 <MX_SPI3_Init+0x64>)
 8003912:	2200      	movs	r2, #0
 8003914:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8003916:	4b0e      	ldr	r3, [pc, #56]	@ (8003950 <MX_SPI3_Init+0x64>)
 8003918:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800391c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800391e:	4b0c      	ldr	r3, [pc, #48]	@ (8003950 <MX_SPI3_Init+0x64>)
 8003920:	2200      	movs	r2, #0
 8003922:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8003924:	4b0a      	ldr	r3, [pc, #40]	@ (8003950 <MX_SPI3_Init+0x64>)
 8003926:	2200      	movs	r2, #0
 8003928:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800392a:	4b09      	ldr	r3, [pc, #36]	@ (8003950 <MX_SPI3_Init+0x64>)
 800392c:	2200      	movs	r2, #0
 800392e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003930:	4b07      	ldr	r3, [pc, #28]	@ (8003950 <MX_SPI3_Init+0x64>)
 8003932:	2200      	movs	r2, #0
 8003934:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 10;
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <MX_SPI3_Init+0x64>)
 8003938:	220a      	movs	r2, #10
 800393a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800393c:	4804      	ldr	r0, [pc, #16]	@ (8003950 <MX_SPI3_Init+0x64>)
 800393e:	f002 feb1 	bl	80066a4 <HAL_SPI_Init>
 8003942:	4603      	mov	r3, r0
 8003944:	2b00      	cmp	r3, #0
 8003946:	d001      	beq.n	800394c <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 8003948:	f000 f90a 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800394c:	bf00      	nop
 800394e:	bd80      	pop	{r7, pc}
 8003950:	20000688 	.word	0x20000688
 8003954:	40003c00 	.word	0x40003c00

08003958 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003958:	b580      	push	{r7, lr}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800395c:	4b11      	ldr	r3, [pc, #68]	@ (80039a4 <MX_USART1_UART_Init+0x4c>)
 800395e:	4a12      	ldr	r2, [pc, #72]	@ (80039a8 <MX_USART1_UART_Init+0x50>)
 8003960:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8003962:	4b10      	ldr	r3, [pc, #64]	@ (80039a4 <MX_USART1_UART_Init+0x4c>)
 8003964:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8003968:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800396a:	4b0e      	ldr	r3, [pc, #56]	@ (80039a4 <MX_USART1_UART_Init+0x4c>)
 800396c:	2200      	movs	r2, #0
 800396e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003970:	4b0c      	ldr	r3, [pc, #48]	@ (80039a4 <MX_USART1_UART_Init+0x4c>)
 8003972:	2200      	movs	r2, #0
 8003974:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003976:	4b0b      	ldr	r3, [pc, #44]	@ (80039a4 <MX_USART1_UART_Init+0x4c>)
 8003978:	2200      	movs	r2, #0
 800397a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800397c:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <MX_USART1_UART_Init+0x4c>)
 800397e:	220c      	movs	r2, #12
 8003980:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003982:	4b08      	ldr	r3, [pc, #32]	@ (80039a4 <MX_USART1_UART_Init+0x4c>)
 8003984:	2200      	movs	r2, #0
 8003986:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003988:	4b06      	ldr	r3, [pc, #24]	@ (80039a4 <MX_USART1_UART_Init+0x4c>)
 800398a:	2200      	movs	r2, #0
 800398c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800398e:	4805      	ldr	r0, [pc, #20]	@ (80039a4 <MX_USART1_UART_Init+0x4c>)
 8003990:	f003 fc5a 	bl	8007248 <HAL_UART_Init>
 8003994:	4603      	mov	r3, r0
 8003996:	2b00      	cmp	r3, #0
 8003998:	d001      	beq.n	800399e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800399a:	f000 f8e1 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800399e:	bf00      	nop
 80039a0:	bd80      	pop	{r7, pc}
 80039a2:	bf00      	nop
 80039a4:	200006e0 	.word	0x200006e0
 80039a8:	40011000 	.word	0x40011000

080039ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80039b0:	4b11      	ldr	r3, [pc, #68]	@ (80039f8 <MX_USART2_UART_Init+0x4c>)
 80039b2:	4a12      	ldr	r2, [pc, #72]	@ (80039fc <MX_USART2_UART_Init+0x50>)
 80039b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80039b6:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <MX_USART2_UART_Init+0x4c>)
 80039b8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80039bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80039be:	4b0e      	ldr	r3, [pc, #56]	@ (80039f8 <MX_USART2_UART_Init+0x4c>)
 80039c0:	2200      	movs	r2, #0
 80039c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80039c4:	4b0c      	ldr	r3, [pc, #48]	@ (80039f8 <MX_USART2_UART_Init+0x4c>)
 80039c6:	2200      	movs	r2, #0
 80039c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80039ca:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <MX_USART2_UART_Init+0x4c>)
 80039cc:	2200      	movs	r2, #0
 80039ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80039d0:	4b09      	ldr	r3, [pc, #36]	@ (80039f8 <MX_USART2_UART_Init+0x4c>)
 80039d2:	220c      	movs	r2, #12
 80039d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80039d6:	4b08      	ldr	r3, [pc, #32]	@ (80039f8 <MX_USART2_UART_Init+0x4c>)
 80039d8:	2200      	movs	r2, #0
 80039da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80039dc:	4b06      	ldr	r3, [pc, #24]	@ (80039f8 <MX_USART2_UART_Init+0x4c>)
 80039de:	2200      	movs	r2, #0
 80039e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80039e2:	4805      	ldr	r0, [pc, #20]	@ (80039f8 <MX_USART2_UART_Init+0x4c>)
 80039e4:	f003 fc30 	bl	8007248 <HAL_UART_Init>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d001      	beq.n	80039f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80039ee:	f000 f8b7 	bl	8003b60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80039f2:	bf00      	nop
 80039f4:	bd80      	pop	{r7, pc}
 80039f6:	bf00      	nop
 80039f8:	20000728 	.word	0x20000728
 80039fc:	40004400 	.word	0x40004400

08003a00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003a00:	b580      	push	{r7, lr}
 8003a02:	b088      	sub	sp, #32
 8003a04:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a06:	f107 030c 	add.w	r3, r7, #12
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	609a      	str	r2, [r3, #8]
 8003a12:	60da      	str	r2, [r3, #12]
 8003a14:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003a16:	2300      	movs	r3, #0
 8003a18:	60bb      	str	r3, [r7, #8]
 8003a1a:	4b30      	ldr	r3, [pc, #192]	@ (8003adc <MX_GPIO_Init+0xdc>)
 8003a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a1e:	4a2f      	ldr	r2, [pc, #188]	@ (8003adc <MX_GPIO_Init+0xdc>)
 8003a20:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003a24:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a26:	4b2d      	ldr	r3, [pc, #180]	@ (8003adc <MX_GPIO_Init+0xdc>)
 8003a28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a2e:	60bb      	str	r3, [r7, #8]
 8003a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a32:	2300      	movs	r3, #0
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	4b29      	ldr	r3, [pc, #164]	@ (8003adc <MX_GPIO_Init+0xdc>)
 8003a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a3a:	4a28      	ldr	r2, [pc, #160]	@ (8003adc <MX_GPIO_Init+0xdc>)
 8003a3c:	f043 0301 	orr.w	r3, r3, #1
 8003a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a42:	4b26      	ldr	r3, [pc, #152]	@ (8003adc <MX_GPIO_Init+0xdc>)
 8003a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	607b      	str	r3, [r7, #4]
 8003a4c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a4e:	2300      	movs	r3, #0
 8003a50:	603b      	str	r3, [r7, #0]
 8003a52:	4b22      	ldr	r3, [pc, #136]	@ (8003adc <MX_GPIO_Init+0xdc>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a56:	4a21      	ldr	r2, [pc, #132]	@ (8003adc <MX_GPIO_Init+0xdc>)
 8003a58:	f043 0302 	orr.w	r3, r3, #2
 8003a5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003a5e:	4b1f      	ldr	r3, [pc, #124]	@ (8003adc <MX_GPIO_Init+0xdc>)
 8003a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a62:	f003 0302 	and.w	r3, r3, #2
 8003a66:	603b      	str	r3, [r7, #0]
 8003a68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED_Pin, GPIO_PIN_RESET);
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	2102      	movs	r1, #2
 8003a6e:	481c      	ldr	r0, [pc, #112]	@ (8003ae0 <MX_GPIO_Init+0xe0>)
 8003a70:	f000 ff3a 	bl	80048e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, NSS5_Pin|NSS2_Pin, GPIO_PIN_RESET);
 8003a74:	2200      	movs	r2, #0
 8003a76:	f241 0102 	movw	r1, #4098	@ 0x1002
 8003a7a:	481a      	ldr	r0, [pc, #104]	@ (8003ae4 <MX_GPIO_Init+0xe4>)
 8003a7c:	f000 ff34 	bl	80048e8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : LED_Pin NSS1_Pin NSS3_Pin */
  GPIO_InitStruct.Pin = LED_Pin|NSS1_Pin|NSS3_Pin;
 8003a80:	f248 0312 	movw	r3, #32786	@ 0x8012
 8003a84:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a86:	2301      	movs	r3, #1
 8003a88:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a8e:	2300      	movs	r3, #0
 8003a90:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a92:	f107 030c 	add.w	r3, r7, #12
 8003a96:	4619      	mov	r1, r3
 8003a98:	4811      	ldr	r0, [pc, #68]	@ (8003ae0 <MX_GPIO_Init+0xe0>)
 8003a9a:	f000 fda1 	bl	80045e0 <HAL_GPIO_Init>

  /*Configure GPIO pins : NSS5_Pin NSS2_Pin */
  GPIO_InitStruct.Pin = NSS5_Pin|NSS2_Pin;
 8003a9e:	f241 0302 	movw	r3, #4098	@ 0x1002
 8003aa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aac:	2300      	movs	r3, #0
 8003aae:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab0:	f107 030c 	add.w	r3, r7, #12
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	480b      	ldr	r0, [pc, #44]	@ (8003ae4 <MX_GPIO_Init+0xe4>)
 8003ab8:	f000 fd92 	bl	80045e0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  HAL_GPIO_WritePin(GPIOA, NSS1_Pin|NSS3_Pin, GPIO_PIN_SET);
 8003abc:	2201      	movs	r2, #1
 8003abe:	f248 0110 	movw	r1, #32784	@ 0x8010
 8003ac2:	4807      	ldr	r0, [pc, #28]	@ (8003ae0 <MX_GPIO_Init+0xe0>)
 8003ac4:	f000 ff10 	bl	80048e8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, NSS5_Pin|NSS2_Pin, GPIO_PIN_SET);
 8003ac8:	2201      	movs	r2, #1
 8003aca:	f241 0102 	movw	r1, #4098	@ 0x1002
 8003ace:	4805      	ldr	r0, [pc, #20]	@ (8003ae4 <MX_GPIO_Init+0xe4>)
 8003ad0:	f000 ff0a 	bl	80048e8 <HAL_GPIO_WritePin>
  /* USER CODE END MX_GPIO_Init_2 */
}
 8003ad4:	bf00      	nop
 8003ad6:	3720      	adds	r7, #32
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	40020000 	.word	0x40020000
 8003ae4:	40020400 	.word	0x40020400

08003ae8 <BMP280_AppInit>:

/* USER CODE BEGIN 4 */
static void BMP280_AppInit(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
    if (bmp280_init_spi(&bmp, &hspi3, BMP280_CS_GPIO, BMP280_CS_PIN) != HAL_OK) {
 8003aee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003af2:	4a17      	ldr	r2, [pc, #92]	@ (8003b50 <BMP280_AppInit+0x68>)
 8003af4:	4917      	ldr	r1, [pc, #92]	@ (8003b54 <BMP280_AppInit+0x6c>)
 8003af6:	4818      	ldr	r0, [pc, #96]	@ (8003b58 <BMP280_AppInit+0x70>)
 8003af8:	f7fd fc19 	bl	800132e <bmp280_init_spi>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <BMP280_AppInit+0x1e>
        Error_Handler();
 8003b02:	f000 f82d 	bl	8003b60 <Error_Handler>
    }
    // Write CONFIG while device is in sleep (after reset)
    bmp280_set_config(&bmp, BMP280_TSB_125_MS, BMP280_FILTER_4, false);
 8003b06:	2300      	movs	r3, #0
 8003b08:	2202      	movs	r2, #2
 8003b0a:	2102      	movs	r1, #2
 8003b0c:	4812      	ldr	r0, [pc, #72]	@ (8003b58 <BMP280_AppInit+0x70>)
 8003b0e:	f7fd fd30 	bl	8001572 <bmp280_set_config>
    // Start continuous conversions
    bmp280_set_ctrl_meas(&bmp, BMP280_OSRS_X1, BMP280_OSRS_X4, BMP280_MODE_NORMAL);
 8003b12:	2303      	movs	r3, #3
 8003b14:	2203      	movs	r2, #3
 8003b16:	2101      	movs	r1, #1
 8003b18:	480f      	ldr	r0, [pc, #60]	@ (8003b58 <BMP280_AppInit+0x70>)
 8003b1a:	f7fd fd58 	bl	80015ce <bmp280_set_ctrl_meas>

    // Sanity read
    float t, p;
    if (bmp280_read_temp_press(&bmp, &t, &p) == HAL_OK) {
 8003b1e:	1d3a      	adds	r2, r7, #4
 8003b20:	f107 0308 	add.w	r3, r7, #8
 8003b24:	4619      	mov	r1, r3
 8003b26:	480c      	ldr	r0, [pc, #48]	@ (8003b58 <BMP280_AppInit+0x70>)
 8003b28:	f7fe f8b6 	bl	8001c98 <bmp280_read_temp_press>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d109      	bne.n	8003b46 <BMP280_AppInit+0x5e>
        float alt = bmp280_altitude_m_from_pa(p, SEA_LEVEL_PA);
 8003b32:	edd7 7a01 	vldr	s15, [r7, #4]
 8003b36:	eddf 0a09 	vldr	s1, [pc, #36]	@ 8003b5c <BMP280_AppInit+0x74>
 8003b3a:	eeb0 0a67 	vmov.f32	s0, s15
 8003b3e:	f7fe fea1 	bl	8002884 <bmp280_altitude_m_from_pa>
 8003b42:	ed87 0a03 	vstr	s0, [r7, #12]
        (void)alt;
    }
}
 8003b46:	bf00      	nop
 8003b48:	3710      	adds	r7, #16
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	40020000 	.word	0x40020000
 8003b54:	20000688 	.word	0x20000688
 8003b58:	20000770 	.word	0x20000770
 8003b5c:	47c5e680 	.word	0x47c5e680

08003b60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b60:	b480      	push	{r7}
 8003b62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003b64:	b672      	cpsid	i
}
 8003b66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003b68:	bf00      	nop
 8003b6a:	e7fd      	b.n	8003b68 <Error_Handler+0x8>

08003b6c <cdc_write>:
// retarget.c
#include "usbd_cdc_if.h"
#include <string.h>

static int cdc_write(const uint8_t* p, uint16_t n) {
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b084      	sub	sp, #16
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	460b      	mov	r3, r1
 8003b76:	807b      	strh	r3, [r7, #2]
    // send in 64B chunks; wait if the USB stack is busy
    while (n) {
 8003b78:	e015      	b.n	8003ba6 <cdc_write+0x3a>
        uint16_t chunk = (n > 64) ? 64 : n;
 8003b7a:	887b      	ldrh	r3, [r7, #2]
 8003b7c:	2b40      	cmp	r3, #64	@ 0x40
 8003b7e:	bf28      	it	cs
 8003b80:	2340      	movcs	r3, #64	@ 0x40
 8003b82:	81fb      	strh	r3, [r7, #14]
        while (CDC_Transmit_FS((uint8_t*)p, chunk) == USBD_BUSY) { /* spin */ }
 8003b84:	bf00      	nop
 8003b86:	89fb      	ldrh	r3, [r7, #14]
 8003b88:	4619      	mov	r1, r3
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f007 ff70 	bl	800ba70 <CDC_Transmit_FS>
 8003b90:	4603      	mov	r3, r0
 8003b92:	2b01      	cmp	r3, #1
 8003b94:	d0f7      	beq.n	8003b86 <cdc_write+0x1a>
        p += chunk; n -= chunk;
 8003b96:	89fb      	ldrh	r3, [r7, #14]
 8003b98:	687a      	ldr	r2, [r7, #4]
 8003b9a:	4413      	add	r3, r2
 8003b9c:	607b      	str	r3, [r7, #4]
 8003b9e:	887a      	ldrh	r2, [r7, #2]
 8003ba0:	89fb      	ldrh	r3, [r7, #14]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	807b      	strh	r3, [r7, #2]
    while (n) {
 8003ba6:	887b      	ldrh	r3, [r7, #2]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d1e6      	bne.n	8003b7a <cdc_write+0xe>
    }
    return 0;
 8003bac:	2300      	movs	r3, #0
}
 8003bae:	4618      	mov	r0, r3
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
	...

08003bb8 <_write>:

int _write(int file, char *ptr, int len)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	b086      	sub	sp, #24
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
    // turn \n into \r\n for terminals
    static uint8_t buf[128];
    int i = 0;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	617b      	str	r3, [r7, #20]
    for (int j = 0; j < len; ++j) {
 8003bc8:	2300      	movs	r3, #0
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	e02d      	b.n	8003c2a <_write+0x72>
        if (ptr[j] == '\n') {
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	68ba      	ldr	r2, [r7, #8]
 8003bd2:	4413      	add	r3, r2
 8003bd4:	781b      	ldrb	r3, [r3, #0]
 8003bd6:	2b0a      	cmp	r3, #10
 8003bd8:	d110      	bne.n	8003bfc <_write+0x44>
            if (i >= (int)sizeof buf - 2) { cdc_write(buf, i); i = 0; }
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	2b7d      	cmp	r3, #125	@ 0x7d
 8003bde:	dd07      	ble.n	8003bf0 <_write+0x38>
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	b29b      	uxth	r3, r3
 8003be4:	4619      	mov	r1, r3
 8003be6:	481a      	ldr	r0, [pc, #104]	@ (8003c50 <_write+0x98>)
 8003be8:	f7ff ffc0 	bl	8003b6c <cdc_write>
 8003bec:	2300      	movs	r3, #0
 8003bee:	617b      	str	r3, [r7, #20]
            buf[i++] = '\r';
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	1c5a      	adds	r2, r3, #1
 8003bf4:	617a      	str	r2, [r7, #20]
 8003bf6:	4a16      	ldr	r2, [pc, #88]	@ (8003c50 <_write+0x98>)
 8003bf8:	210d      	movs	r1, #13
 8003bfa:	54d1      	strb	r1, [r2, r3]
        }
        if (i >= (int)sizeof buf - 1) { cdc_write(buf, i); i = 0; }
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	2b7e      	cmp	r3, #126	@ 0x7e
 8003c00:	dd07      	ble.n	8003c12 <_write+0x5a>
 8003c02:	697b      	ldr	r3, [r7, #20]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	4619      	mov	r1, r3
 8003c08:	4811      	ldr	r0, [pc, #68]	@ (8003c50 <_write+0x98>)
 8003c0a:	f7ff ffaf 	bl	8003b6c <cdc_write>
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
        buf[i++] = (uint8_t)ptr[j];
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	68ba      	ldr	r2, [r7, #8]
 8003c16:	441a      	add	r2, r3
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1c59      	adds	r1, r3, #1
 8003c1c:	6179      	str	r1, [r7, #20]
 8003c1e:	7811      	ldrb	r1, [r2, #0]
 8003c20:	4a0b      	ldr	r2, [pc, #44]	@ (8003c50 <_write+0x98>)
 8003c22:	54d1      	strb	r1, [r2, r3]
    for (int j = 0; j < len; ++j) {
 8003c24:	693b      	ldr	r3, [r7, #16]
 8003c26:	3301      	adds	r3, #1
 8003c28:	613b      	str	r3, [r7, #16]
 8003c2a:	693a      	ldr	r2, [r7, #16]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	dbcd      	blt.n	8003bce <_write+0x16>
    }
    if (i) cdc_write(buf, i);
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d005      	beq.n	8003c44 <_write+0x8c>
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	b29b      	uxth	r3, r3
 8003c3c:	4619      	mov	r1, r3
 8003c3e:	4804      	ldr	r0, [pc, #16]	@ (8003c50 <_write+0x98>)
 8003c40:	f7ff ff94 	bl	8003b6c <cdc_write>
    return len;
 8003c44:	687b      	ldr	r3, [r7, #4]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	200007b4 	.word	0x200007b4

08003c54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b083      	sub	sp, #12
 8003c58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	607b      	str	r3, [r7, #4]
 8003c5e:	4b10      	ldr	r3, [pc, #64]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c60:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c62:	4a0f      	ldr	r2, [pc, #60]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c64:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c68:	6453      	str	r3, [r2, #68]	@ 0x44
 8003c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003c6e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003c72:	607b      	str	r3, [r7, #4]
 8003c74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003c76:	2300      	movs	r3, #0
 8003c78:	603b      	str	r3, [r7, #0]
 8003c7a:	4b09      	ldr	r3, [pc, #36]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c7e:	4a08      	ldr	r2, [pc, #32]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c80:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003c84:	6413      	str	r3, [r2, #64]	@ 0x40
 8003c86:	4b06      	ldr	r3, [pc, #24]	@ (8003ca0 <HAL_MspInit+0x4c>)
 8003c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c8a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003c8e:	603b      	str	r3, [r7, #0]
 8003c90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr
 8003c9e:	bf00      	nop
 8003ca0:	40023800 	.word	0x40023800

08003ca4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08e      	sub	sp, #56	@ 0x38
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003cac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	601a      	str	r2, [r3, #0]
 8003cb4:	605a      	str	r2, [r3, #4]
 8003cb6:	609a      	str	r2, [r3, #8]
 8003cb8:	60da      	str	r2, [r3, #12]
 8003cba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a4b      	ldr	r2, [pc, #300]	@ (8003df0 <HAL_SPI_MspInit+0x14c>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d12c      	bne.n	8003d20 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	623b      	str	r3, [r7, #32]
 8003cca:	4b4a      	ldr	r3, [pc, #296]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003ccc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cce:	4a49      	ldr	r2, [pc, #292]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003cd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003cd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cd6:	4b47      	ldr	r3, [pc, #284]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003cd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003cde:	623b      	str	r3, [r7, #32]
 8003ce0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ce2:	2300      	movs	r3, #0
 8003ce4:	61fb      	str	r3, [r7, #28]
 8003ce6:	4b43      	ldr	r3, [pc, #268]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cea:	4a42      	ldr	r2, [pc, #264]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003cec:	f043 0301 	orr.w	r3, r3, #1
 8003cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8003cf2:	4b40      	ldr	r3, [pc, #256]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003cf6:	f003 0301 	and.w	r3, r3, #1
 8003cfa:	61fb      	str	r3, [r7, #28]
 8003cfc:	69fb      	ldr	r3, [r7, #28]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8003cfe:	23e0      	movs	r3, #224	@ 0xe0
 8003d00:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d02:	2302      	movs	r3, #2
 8003d04:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d06:	2300      	movs	r3, #0
 8003d08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003d0e:	2305      	movs	r3, #5
 8003d10:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d12:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d16:	4619      	mov	r1, r3
 8003d18:	4837      	ldr	r0, [pc, #220]	@ (8003df8 <HAL_SPI_MspInit+0x154>)
 8003d1a:	f000 fc61 	bl	80045e0 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI3_MspInit 1 */

    /* USER CODE END SPI3_MspInit 1 */
  }

}
 8003d1e:	e063      	b.n	8003de8 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI2)
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4a35      	ldr	r2, [pc, #212]	@ (8003dfc <HAL_SPI_MspInit+0x158>)
 8003d26:	4293      	cmp	r3, r2
 8003d28:	d12d      	bne.n	8003d86 <HAL_SPI_MspInit+0xe2>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003d2a:	2300      	movs	r3, #0
 8003d2c:	61bb      	str	r3, [r7, #24]
 8003d2e:	4b31      	ldr	r3, [pc, #196]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d32:	4a30      	ldr	r2, [pc, #192]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003d34:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d38:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d3a:	4b2e      	ldr	r3, [pc, #184]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003d3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003d42:	61bb      	str	r3, [r7, #24]
 8003d44:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d46:	2300      	movs	r3, #0
 8003d48:	617b      	str	r3, [r7, #20]
 8003d4a:	4b2a      	ldr	r3, [pc, #168]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d4e:	4a29      	ldr	r2, [pc, #164]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003d50:	f043 0302 	orr.w	r3, r3, #2
 8003d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d56:	4b27      	ldr	r3, [pc, #156]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	617b      	str	r3, [r7, #20]
 8003d60:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003d62:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8003d66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d70:	2303      	movs	r3, #3
 8003d72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003d74:	2305      	movs	r3, #5
 8003d76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	4820      	ldr	r0, [pc, #128]	@ (8003e00 <HAL_SPI_MspInit+0x15c>)
 8003d80:	f000 fc2e 	bl	80045e0 <HAL_GPIO_Init>
}
 8003d84:	e030      	b.n	8003de8 <HAL_SPI_MspInit+0x144>
  else if(hspi->Instance==SPI3)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4a1e      	ldr	r2, [pc, #120]	@ (8003e04 <HAL_SPI_MspInit+0x160>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d12b      	bne.n	8003de8 <HAL_SPI_MspInit+0x144>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8003d90:	2300      	movs	r3, #0
 8003d92:	613b      	str	r3, [r7, #16]
 8003d94:	4b17      	ldr	r3, [pc, #92]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d98:	4a16      	ldr	r2, [pc, #88]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003d9a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003d9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8003da0:	4b14      	ldr	r3, [pc, #80]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003da4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dac:	2300      	movs	r3, #0
 8003dae:	60fb      	str	r3, [r7, #12]
 8003db0:	4b10      	ldr	r3, [pc, #64]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003db4:	4a0f      	ldr	r2, [pc, #60]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003db6:	f043 0302 	orr.w	r3, r3, #2
 8003dba:	6313      	str	r3, [r2, #48]	@ 0x30
 8003dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8003df4 <HAL_SPI_MspInit+0x150>)
 8003dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dc0:	f003 0302 	and.w	r3, r3, #2
 8003dc4:	60fb      	str	r3, [r7, #12]
 8003dc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003dc8:	2338      	movs	r3, #56	@ 0x38
 8003dca:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dcc:	2302      	movs	r3, #2
 8003dce:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd4:	2303      	movs	r3, #3
 8003dd6:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8003dd8:	2306      	movs	r3, #6
 8003dda:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ddc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003de0:	4619      	mov	r1, r3
 8003de2:	4807      	ldr	r0, [pc, #28]	@ (8003e00 <HAL_SPI_MspInit+0x15c>)
 8003de4:	f000 fbfc 	bl	80045e0 <HAL_GPIO_Init>
}
 8003de8:	bf00      	nop
 8003dea:	3738      	adds	r7, #56	@ 0x38
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	40013000 	.word	0x40013000
 8003df4:	40023800 	.word	0x40023800
 8003df8:	40020000 	.word	0x40020000
 8003dfc:	40003800 	.word	0x40003800
 8003e00:	40020400 	.word	0x40020400
 8003e04:	40003c00 	.word	0x40003c00

08003e08 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b08c      	sub	sp, #48	@ 0x30
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e10:	f107 031c 	add.w	r3, r7, #28
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	605a      	str	r2, [r3, #4]
 8003e1a:	609a      	str	r2, [r3, #8]
 8003e1c:	60da      	str	r2, [r3, #12]
 8003e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	4a36      	ldr	r2, [pc, #216]	@ (8003f00 <HAL_UART_MspInit+0xf8>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d134      	bne.n	8003e94 <HAL_UART_MspInit+0x8c>
  {
    /* USER CODE BEGIN USART1_MspInit 0 */

    /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61bb      	str	r3, [r7, #24]
 8003e2e:	4b35      	ldr	r3, [pc, #212]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003e30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e32:	4a34      	ldr	r2, [pc, #208]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003e34:	f043 0310 	orr.w	r3, r3, #16
 8003e38:	6453      	str	r3, [r2, #68]	@ 0x44
 8003e3a:	4b32      	ldr	r3, [pc, #200]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003e3e:	f003 0310 	and.w	r3, r3, #16
 8003e42:	61bb      	str	r3, [r7, #24]
 8003e44:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003e46:	2300      	movs	r3, #0
 8003e48:	617b      	str	r3, [r7, #20]
 8003e4a:	4b2e      	ldr	r3, [pc, #184]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e4e:	4a2d      	ldr	r2, [pc, #180]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003e50:	f043 0302 	orr.w	r3, r3, #2
 8003e54:	6313      	str	r3, [r2, #48]	@ 0x30
 8003e56:	4b2b      	ldr	r3, [pc, #172]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	617b      	str	r3, [r7, #20]
 8003e60:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e62:	23c0      	movs	r3, #192	@ 0xc0
 8003e64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e66:	2302      	movs	r3, #2
 8003e68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e6e:	2303      	movs	r3, #3
 8003e70:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e72:	2307      	movs	r3, #7
 8003e74:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e76:	f107 031c 	add.w	r3, r7, #28
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4822      	ldr	r0, [pc, #136]	@ (8003f08 <HAL_UART_MspInit+0x100>)
 8003e7e:	f000 fbaf 	bl	80045e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e82:	2200      	movs	r2, #0
 8003e84:	2100      	movs	r1, #0
 8003e86:	2025      	movs	r0, #37	@ 0x25
 8003e88:	f000 fae1 	bl	800444e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e8c:	2025      	movs	r0, #37	@ 0x25
 8003e8e:	f000 fafa 	bl	8004486 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN USART2_MspInit 1 */

    /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e92:	e030      	b.n	8003ef6 <HAL_UART_MspInit+0xee>
  else if(huart->Instance==USART2)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	4a1c      	ldr	r2, [pc, #112]	@ (8003f0c <HAL_UART_MspInit+0x104>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d12b      	bne.n	8003ef6 <HAL_UART_MspInit+0xee>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e9e:	2300      	movs	r3, #0
 8003ea0:	613b      	str	r3, [r7, #16]
 8003ea2:	4b18      	ldr	r3, [pc, #96]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003ea4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ea6:	4a17      	ldr	r2, [pc, #92]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003ea8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003eac:	6413      	str	r3, [r2, #64]	@ 0x40
 8003eae:	4b15      	ldr	r3, [pc, #84]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003eb6:	613b      	str	r3, [r7, #16]
 8003eb8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003eba:	2300      	movs	r3, #0
 8003ebc:	60fb      	str	r3, [r7, #12]
 8003ebe:	4b11      	ldr	r3, [pc, #68]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003ec0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ec2:	4a10      	ldr	r2, [pc, #64]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003ec4:	f043 0301 	orr.w	r3, r3, #1
 8003ec8:	6313      	str	r3, [r2, #48]	@ 0x30
 8003eca:	4b0e      	ldr	r3, [pc, #56]	@ (8003f04 <HAL_UART_MspInit+0xfc>)
 8003ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	60fb      	str	r3, [r7, #12]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003ed6:	230c      	movs	r3, #12
 8003ed8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003eda:	2302      	movs	r3, #2
 8003edc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ede:	2300      	movs	r3, #0
 8003ee0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ee6:	2307      	movs	r3, #7
 8003ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eea:	f107 031c 	add.w	r3, r7, #28
 8003eee:	4619      	mov	r1, r3
 8003ef0:	4807      	ldr	r0, [pc, #28]	@ (8003f10 <HAL_UART_MspInit+0x108>)
 8003ef2:	f000 fb75 	bl	80045e0 <HAL_GPIO_Init>
}
 8003ef6:	bf00      	nop
 8003ef8:	3730      	adds	r7, #48	@ 0x30
 8003efa:	46bd      	mov	sp, r7
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	40011000 	.word	0x40011000
 8003f04:	40023800 	.word	0x40023800
 8003f08:	40020400 	.word	0x40020400
 8003f0c:	40004400 	.word	0x40004400
 8003f10:	40020000 	.word	0x40020000

08003f14 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003f18:	bf00      	nop
 8003f1a:	e7fd      	b.n	8003f18 <NMI_Handler+0x4>

08003f1c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003f1c:	b480      	push	{r7}
 8003f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003f20:	bf00      	nop
 8003f22:	e7fd      	b.n	8003f20 <HardFault_Handler+0x4>

08003f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003f28:	bf00      	nop
 8003f2a:	e7fd      	b.n	8003f28 <MemManage_Handler+0x4>

08003f2c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003f30:	bf00      	nop
 8003f32:	e7fd      	b.n	8003f30 <BusFault_Handler+0x4>

08003f34 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003f38:	bf00      	nop
 8003f3a:	e7fd      	b.n	8003f38 <UsageFault_Handler+0x4>

08003f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003f40:	bf00      	nop
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003f4e:	bf00      	nop
 8003f50:	46bd      	mov	sp, r7
 8003f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f56:	4770      	bx	lr

08003f58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003f5c:	bf00      	nop
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f64:	4770      	bx	lr

08003f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003f66:	b580      	push	{r7, lr}
 8003f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f6a:	f000 f951 	bl	8004210 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f6e:	bf00      	nop
 8003f70:	bd80      	pop	{r7, pc}
	...

08003f74 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  // Call GPS interrupt handler first
  GPS_IRQHandler();
 8003f78:	f7fd ff1e 	bl	8001db8 <GPS_IRQHandler>
  /* USER CODE END USART1_IRQn 0 */

  HAL_UART_IRQHandler(&huart1);
 8003f7c:	4802      	ldr	r0, [pc, #8]	@ (8003f88 <USART1_IRQHandler+0x14>)
 8003f7e:	f003 fa3f 	bl	8007400 <HAL_UART_IRQHandler>

  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003f82:	bf00      	nop
 8003f84:	bd80      	pop	{r7, pc}
 8003f86:	bf00      	nop
 8003f88:	200006e0 	.word	0x200006e0

08003f8c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8003f90:	4802      	ldr	r0, [pc, #8]	@ (8003f9c <OTG_FS_IRQHandler+0x10>)
 8003f92:	f000 fe20 	bl	8004bd6 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8003f96:	bf00      	nop
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	20001d1c 	.word	0x20001d1c

08003fa0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return 1;
 8003fa4:	2301      	movs	r3, #1
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	46bd      	mov	sp, r7
 8003faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fae:	4770      	bx	lr

08003fb0 <_kill>:

int _kill(int pid, int sig)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b082      	sub	sp, #8
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003fba:	f009 f9ad 	bl	800d318 <__errno>
 8003fbe:	4603      	mov	r3, r0
 8003fc0:	2216      	movs	r2, #22
 8003fc2:	601a      	str	r2, [r3, #0]
  return -1;
 8003fc4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	3708      	adds	r7, #8
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	bd80      	pop	{r7, pc}

08003fd0 <_exit>:

void _exit (int status)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b082      	sub	sp, #8
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8003fdc:	6878      	ldr	r0, [r7, #4]
 8003fde:	f7ff ffe7 	bl	8003fb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003fe2:	bf00      	nop
 8003fe4:	e7fd      	b.n	8003fe2 <_exit+0x12>

08003fe6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003fe6:	b580      	push	{r7, lr}
 8003fe8:	b086      	sub	sp, #24
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	60f8      	str	r0, [r7, #12]
 8003fee:	60b9      	str	r1, [r7, #8]
 8003ff0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	617b      	str	r3, [r7, #20]
 8003ff6:	e00a      	b.n	800400e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ff8:	f3af 8000 	nop.w
 8003ffc:	4601      	mov	r1, r0
 8003ffe:	68bb      	ldr	r3, [r7, #8]
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	60ba      	str	r2, [r7, #8]
 8004004:	b2ca      	uxtb	r2, r1
 8004006:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	3301      	adds	r3, #1
 800400c:	617b      	str	r3, [r7, #20]
 800400e:	697a      	ldr	r2, [r7, #20]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	429a      	cmp	r2, r3
 8004014:	dbf0      	blt.n	8003ff8 <_read+0x12>
  }

  return len;
 8004016:	687b      	ldr	r3, [r7, #4]
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}

08004020 <_close>:
  }
  return len;
}

int _close(int file)
{
 8004020:	b480      	push	{r7}
 8004022:	b083      	sub	sp, #12
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004028:	f04f 33ff 	mov.w	r3, #4294967295
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004038:	b480      	push	{r7}
 800403a:	b083      	sub	sp, #12
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004048:	605a      	str	r2, [r3, #4]
  return 0;
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <_isatty>:

int _isatty(int file)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004060:	2301      	movs	r3, #1
}
 8004062:	4618      	mov	r0, r3
 8004064:	370c      	adds	r7, #12
 8004066:	46bd      	mov	sp, r7
 8004068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800406c:	4770      	bx	lr

0800406e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800406e:	b480      	push	{r7}
 8004070:	b085      	sub	sp, #20
 8004072:	af00      	add	r7, sp, #0
 8004074:	60f8      	str	r0, [r7, #12]
 8004076:	60b9      	str	r1, [r7, #8]
 8004078:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800407a:	2300      	movs	r3, #0
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b086      	sub	sp, #24
 800408c:	af00      	add	r7, sp, #0
 800408e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004090:	4a14      	ldr	r2, [pc, #80]	@ (80040e4 <_sbrk+0x5c>)
 8004092:	4b15      	ldr	r3, [pc, #84]	@ (80040e8 <_sbrk+0x60>)
 8004094:	1ad3      	subs	r3, r2, r3
 8004096:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004098:	697b      	ldr	r3, [r7, #20]
 800409a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800409c:	4b13      	ldr	r3, [pc, #76]	@ (80040ec <_sbrk+0x64>)
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d102      	bne.n	80040aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80040a4:	4b11      	ldr	r3, [pc, #68]	@ (80040ec <_sbrk+0x64>)
 80040a6:	4a12      	ldr	r2, [pc, #72]	@ (80040f0 <_sbrk+0x68>)
 80040a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80040aa:	4b10      	ldr	r3, [pc, #64]	@ (80040ec <_sbrk+0x64>)
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4413      	add	r3, r2
 80040b2:	693a      	ldr	r2, [r7, #16]
 80040b4:	429a      	cmp	r2, r3
 80040b6:	d207      	bcs.n	80040c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80040b8:	f009 f92e 	bl	800d318 <__errno>
 80040bc:	4603      	mov	r3, r0
 80040be:	220c      	movs	r2, #12
 80040c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040c2:	f04f 33ff 	mov.w	r3, #4294967295
 80040c6:	e009      	b.n	80040dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040c8:	4b08      	ldr	r3, [pc, #32]	@ (80040ec <_sbrk+0x64>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040ce:	4b07      	ldr	r3, [pc, #28]	@ (80040ec <_sbrk+0x64>)
 80040d0:	681a      	ldr	r2, [r3, #0]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	4413      	add	r3, r2
 80040d6:	4a05      	ldr	r2, [pc, #20]	@ (80040ec <_sbrk+0x64>)
 80040d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80040da:	68fb      	ldr	r3, [r7, #12]
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3718      	adds	r7, #24
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}
 80040e4:	20020000 	.word	0x20020000
 80040e8:	00000400 	.word	0x00000400
 80040ec:	20000834 	.word	0x20000834
 80040f0:	20002570 	.word	0x20002570

080040f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040f4:	b480      	push	{r7}
 80040f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040f8:	4b06      	ldr	r3, [pc, #24]	@ (8004114 <SystemInit+0x20>)
 80040fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80040fe:	4a05      	ldr	r2, [pc, #20]	@ (8004114 <SystemInit+0x20>)
 8004100:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004104:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004108:	bf00      	nop
 800410a:	46bd      	mov	sp, r7
 800410c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004110:	4770      	bx	lr
 8004112:	bf00      	nop
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8004118:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004150 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800411c:	f7ff ffea 	bl	80040f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004120:	480c      	ldr	r0, [pc, #48]	@ (8004154 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8004122:	490d      	ldr	r1, [pc, #52]	@ (8004158 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8004124:	4a0d      	ldr	r2, [pc, #52]	@ (800415c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8004126:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004128:	e002      	b.n	8004130 <LoopCopyDataInit>

0800412a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800412a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800412c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800412e:	3304      	adds	r3, #4

08004130 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004130:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004132:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004134:	d3f9      	bcc.n	800412a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004136:	4a0a      	ldr	r2, [pc, #40]	@ (8004160 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004138:	4c0a      	ldr	r4, [pc, #40]	@ (8004164 <LoopFillZerobss+0x22>)
  movs r3, #0
 800413a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800413c:	e001      	b.n	8004142 <LoopFillZerobss>

0800413e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800413e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004140:	3204      	adds	r2, #4

08004142 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004142:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004144:	d3fb      	bcc.n	800413e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004146:	f009 f8ed 	bl	800d324 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800414a:	f7fe fd09 	bl	8002b60 <main>
  bx  lr    
 800414e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8004150:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004154:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004158:	200002d4 	.word	0x200002d4
  ldr r2, =_sidata
 800415c:	08011898 	.word	0x08011898
  ldr r2, =_sbss
 8004160:	200002d8 	.word	0x200002d8
  ldr r4, =_ebss
 8004164:	2000256c 	.word	0x2000256c

08004168 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004168:	e7fe      	b.n	8004168 <ADC_IRQHandler>
	...

0800416c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004170:	4b0e      	ldr	r3, [pc, #56]	@ (80041ac <HAL_Init+0x40>)
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	4a0d      	ldr	r2, [pc, #52]	@ (80041ac <HAL_Init+0x40>)
 8004176:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800417a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800417c:	4b0b      	ldr	r3, [pc, #44]	@ (80041ac <HAL_Init+0x40>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4a0a      	ldr	r2, [pc, #40]	@ (80041ac <HAL_Init+0x40>)
 8004182:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004186:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004188:	4b08      	ldr	r3, [pc, #32]	@ (80041ac <HAL_Init+0x40>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	4a07      	ldr	r2, [pc, #28]	@ (80041ac <HAL_Init+0x40>)
 800418e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004192:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004194:	2003      	movs	r0, #3
 8004196:	f000 f94f 	bl	8004438 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800419a:	200f      	movs	r0, #15
 800419c:	f000 f808 	bl	80041b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80041a0:	f7ff fd58 	bl	8003c54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	bd80      	pop	{r7, pc}
 80041aa:	bf00      	nop
 80041ac:	40023c00 	.word	0x40023c00

080041b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b082      	sub	sp, #8
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80041b8:	4b12      	ldr	r3, [pc, #72]	@ (8004204 <HAL_InitTick+0x54>)
 80041ba:	681a      	ldr	r2, [r3, #0]
 80041bc:	4b12      	ldr	r3, [pc, #72]	@ (8004208 <HAL_InitTick+0x58>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	4619      	mov	r1, r3
 80041c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80041c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80041ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80041ce:	4618      	mov	r0, r3
 80041d0:	f000 f967 	bl	80044a2 <HAL_SYSTICK_Config>
 80041d4:	4603      	mov	r3, r0
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80041da:	2301      	movs	r3, #1
 80041dc:	e00e      	b.n	80041fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2b0f      	cmp	r3, #15
 80041e2:	d80a      	bhi.n	80041fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80041e4:	2200      	movs	r2, #0
 80041e6:	6879      	ldr	r1, [r7, #4]
 80041e8:	f04f 30ff 	mov.w	r0, #4294967295
 80041ec:	f000 f92f 	bl	800444e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80041f0:	4a06      	ldr	r2, [pc, #24]	@ (800420c <HAL_InitTick+0x5c>)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
 80041f8:	e000      	b.n	80041fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
}
 80041fc:	4618      	mov	r0, r3
 80041fe:	3708      	adds	r7, #8
 8004200:	46bd      	mov	sp, r7
 8004202:	bd80      	pop	{r7, pc}
 8004204:	20000010 	.word	0x20000010
 8004208:	20000018 	.word	0x20000018
 800420c:	20000014 	.word	0x20000014

08004210 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004210:	b480      	push	{r7}
 8004212:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004214:	4b06      	ldr	r3, [pc, #24]	@ (8004230 <HAL_IncTick+0x20>)
 8004216:	781b      	ldrb	r3, [r3, #0]
 8004218:	461a      	mov	r2, r3
 800421a:	4b06      	ldr	r3, [pc, #24]	@ (8004234 <HAL_IncTick+0x24>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	4413      	add	r3, r2
 8004220:	4a04      	ldr	r2, [pc, #16]	@ (8004234 <HAL_IncTick+0x24>)
 8004222:	6013      	str	r3, [r2, #0]
}
 8004224:	bf00      	nop
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	20000018 	.word	0x20000018
 8004234:	20000838 	.word	0x20000838

08004238 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004238:	b480      	push	{r7}
 800423a:	af00      	add	r7, sp, #0
  return uwTick;
 800423c:	4b03      	ldr	r3, [pc, #12]	@ (800424c <HAL_GetTick+0x14>)
 800423e:	681b      	ldr	r3, [r3, #0]
}
 8004240:	4618      	mov	r0, r3
 8004242:	46bd      	mov	sp, r7
 8004244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	20000838 	.word	0x20000838

08004250 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004250:	b580      	push	{r7, lr}
 8004252:	b084      	sub	sp, #16
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004258:	f7ff ffee 	bl	8004238 <HAL_GetTick>
 800425c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004268:	d005      	beq.n	8004276 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800426a:	4b0a      	ldr	r3, [pc, #40]	@ (8004294 <HAL_Delay+0x44>)
 800426c:	781b      	ldrb	r3, [r3, #0]
 800426e:	461a      	mov	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	4413      	add	r3, r2
 8004274:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004276:	bf00      	nop
 8004278:	f7ff ffde 	bl	8004238 <HAL_GetTick>
 800427c:	4602      	mov	r2, r0
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	1ad3      	subs	r3, r2, r3
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	429a      	cmp	r2, r3
 8004286:	d8f7      	bhi.n	8004278 <HAL_Delay+0x28>
  {
  }
}
 8004288:	bf00      	nop
 800428a:	bf00      	nop
 800428c:	3710      	adds	r7, #16
 800428e:	46bd      	mov	sp, r7
 8004290:	bd80      	pop	{r7, pc}
 8004292:	bf00      	nop
 8004294:	20000018 	.word	0x20000018

08004298 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004298:	b480      	push	{r7}
 800429a:	b085      	sub	sp, #20
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f003 0307 	and.w	r3, r3, #7
 80042a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042a8:	4b0c      	ldr	r3, [pc, #48]	@ (80042dc <__NVIC_SetPriorityGrouping+0x44>)
 80042aa:	68db      	ldr	r3, [r3, #12]
 80042ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042ae:	68ba      	ldr	r2, [r7, #8]
 80042b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80042b4:	4013      	ands	r3, r2
 80042b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80042c0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80042c4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80042c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042ca:	4a04      	ldr	r2, [pc, #16]	@ (80042dc <__NVIC_SetPriorityGrouping+0x44>)
 80042cc:	68bb      	ldr	r3, [r7, #8]
 80042ce:	60d3      	str	r3, [r2, #12]
}
 80042d0:	bf00      	nop
 80042d2:	3714      	adds	r7, #20
 80042d4:	46bd      	mov	sp, r7
 80042d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042da:	4770      	bx	lr
 80042dc:	e000ed00 	.word	0xe000ed00

080042e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80042e0:	b480      	push	{r7}
 80042e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80042e4:	4b04      	ldr	r3, [pc, #16]	@ (80042f8 <__NVIC_GetPriorityGrouping+0x18>)
 80042e6:	68db      	ldr	r3, [r3, #12]
 80042e8:	0a1b      	lsrs	r3, r3, #8
 80042ea:	f003 0307 	and.w	r3, r3, #7
}
 80042ee:	4618      	mov	r0, r3
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr
 80042f8:	e000ed00 	.word	0xe000ed00

080042fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b083      	sub	sp, #12
 8004300:	af00      	add	r7, sp, #0
 8004302:	4603      	mov	r3, r0
 8004304:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004306:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800430a:	2b00      	cmp	r3, #0
 800430c:	db0b      	blt.n	8004326 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800430e:	79fb      	ldrb	r3, [r7, #7]
 8004310:	f003 021f 	and.w	r2, r3, #31
 8004314:	4907      	ldr	r1, [pc, #28]	@ (8004334 <__NVIC_EnableIRQ+0x38>)
 8004316:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800431a:	095b      	lsrs	r3, r3, #5
 800431c:	2001      	movs	r0, #1
 800431e:	fa00 f202 	lsl.w	r2, r0, r2
 8004322:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004326:	bf00      	nop
 8004328:	370c      	adds	r7, #12
 800432a:	46bd      	mov	sp, r7
 800432c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004330:	4770      	bx	lr
 8004332:	bf00      	nop
 8004334:	e000e100 	.word	0xe000e100

08004338 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004338:	b480      	push	{r7}
 800433a:	b083      	sub	sp, #12
 800433c:	af00      	add	r7, sp, #0
 800433e:	4603      	mov	r3, r0
 8004340:	6039      	str	r1, [r7, #0]
 8004342:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004344:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004348:	2b00      	cmp	r3, #0
 800434a:	db0a      	blt.n	8004362 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800434c:	683b      	ldr	r3, [r7, #0]
 800434e:	b2da      	uxtb	r2, r3
 8004350:	490c      	ldr	r1, [pc, #48]	@ (8004384 <__NVIC_SetPriority+0x4c>)
 8004352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004356:	0112      	lsls	r2, r2, #4
 8004358:	b2d2      	uxtb	r2, r2
 800435a:	440b      	add	r3, r1
 800435c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004360:	e00a      	b.n	8004378 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4908      	ldr	r1, [pc, #32]	@ (8004388 <__NVIC_SetPriority+0x50>)
 8004368:	79fb      	ldrb	r3, [r7, #7]
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	3b04      	subs	r3, #4
 8004370:	0112      	lsls	r2, r2, #4
 8004372:	b2d2      	uxtb	r2, r2
 8004374:	440b      	add	r3, r1
 8004376:	761a      	strb	r2, [r3, #24]
}
 8004378:	bf00      	nop
 800437a:	370c      	adds	r7, #12
 800437c:	46bd      	mov	sp, r7
 800437e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004382:	4770      	bx	lr
 8004384:	e000e100 	.word	0xe000e100
 8004388:	e000ed00 	.word	0xe000ed00

0800438c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800438c:	b480      	push	{r7}
 800438e:	b089      	sub	sp, #36	@ 0x24
 8004390:	af00      	add	r7, sp, #0
 8004392:	60f8      	str	r0, [r7, #12]
 8004394:	60b9      	str	r1, [r7, #8]
 8004396:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	f003 0307 	and.w	r3, r3, #7
 800439e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	f1c3 0307 	rsb	r3, r3, #7
 80043a6:	2b04      	cmp	r3, #4
 80043a8:	bf28      	it	cs
 80043aa:	2304      	movcs	r3, #4
 80043ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043ae:	69fb      	ldr	r3, [r7, #28]
 80043b0:	3304      	adds	r3, #4
 80043b2:	2b06      	cmp	r3, #6
 80043b4:	d902      	bls.n	80043bc <NVIC_EncodePriority+0x30>
 80043b6:	69fb      	ldr	r3, [r7, #28]
 80043b8:	3b03      	subs	r3, #3
 80043ba:	e000      	b.n	80043be <NVIC_EncodePriority+0x32>
 80043bc:	2300      	movs	r3, #0
 80043be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043c0:	f04f 32ff 	mov.w	r2, #4294967295
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	fa02 f303 	lsl.w	r3, r2, r3
 80043ca:	43da      	mvns	r2, r3
 80043cc:	68bb      	ldr	r3, [r7, #8]
 80043ce:	401a      	ands	r2, r3
 80043d0:	697b      	ldr	r3, [r7, #20]
 80043d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043d4:	f04f 31ff 	mov.w	r1, #4294967295
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	fa01 f303 	lsl.w	r3, r1, r3
 80043de:	43d9      	mvns	r1, r3
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043e4:	4313      	orrs	r3, r2
         );
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3724      	adds	r7, #36	@ 0x24
 80043ea:	46bd      	mov	sp, r7
 80043ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f0:	4770      	bx	lr
	...

080043f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b082      	sub	sp, #8
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	3b01      	subs	r3, #1
 8004400:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004404:	d301      	bcc.n	800440a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004406:	2301      	movs	r3, #1
 8004408:	e00f      	b.n	800442a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800440a:	4a0a      	ldr	r2, [pc, #40]	@ (8004434 <SysTick_Config+0x40>)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	3b01      	subs	r3, #1
 8004410:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004412:	210f      	movs	r1, #15
 8004414:	f04f 30ff 	mov.w	r0, #4294967295
 8004418:	f7ff ff8e 	bl	8004338 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800441c:	4b05      	ldr	r3, [pc, #20]	@ (8004434 <SysTick_Config+0x40>)
 800441e:	2200      	movs	r2, #0
 8004420:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004422:	4b04      	ldr	r3, [pc, #16]	@ (8004434 <SysTick_Config+0x40>)
 8004424:	2207      	movs	r2, #7
 8004426:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3708      	adds	r7, #8
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	e000e010 	.word	0xe000e010

08004438 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b082      	sub	sp, #8
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f7ff ff29 	bl	8004298 <__NVIC_SetPriorityGrouping>
}
 8004446:	bf00      	nop
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800444e:	b580      	push	{r7, lr}
 8004450:	b086      	sub	sp, #24
 8004452:	af00      	add	r7, sp, #0
 8004454:	4603      	mov	r3, r0
 8004456:	60b9      	str	r1, [r7, #8]
 8004458:	607a      	str	r2, [r7, #4]
 800445a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800445c:	2300      	movs	r3, #0
 800445e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004460:	f7ff ff3e 	bl	80042e0 <__NVIC_GetPriorityGrouping>
 8004464:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004466:	687a      	ldr	r2, [r7, #4]
 8004468:	68b9      	ldr	r1, [r7, #8]
 800446a:	6978      	ldr	r0, [r7, #20]
 800446c:	f7ff ff8e 	bl	800438c <NVIC_EncodePriority>
 8004470:	4602      	mov	r2, r0
 8004472:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004476:	4611      	mov	r1, r2
 8004478:	4618      	mov	r0, r3
 800447a:	f7ff ff5d 	bl	8004338 <__NVIC_SetPriority>
}
 800447e:	bf00      	nop
 8004480:	3718      	adds	r7, #24
 8004482:	46bd      	mov	sp, r7
 8004484:	bd80      	pop	{r7, pc}

08004486 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	4603      	mov	r3, r0
 800448e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff ff31 	bl	80042fc <__NVIC_EnableIRQ>
}
 800449a:	bf00      	nop
 800449c:	3708      	adds	r7, #8
 800449e:	46bd      	mov	sp, r7
 80044a0:	bd80      	pop	{r7, pc}

080044a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044a2:	b580      	push	{r7, lr}
 80044a4:	b082      	sub	sp, #8
 80044a6:	af00      	add	r7, sp, #0
 80044a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f7ff ffa2 	bl	80043f4 <SysTick_Config>
 80044b0:	4603      	mov	r3, r0
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3708      	adds	r7, #8
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}

080044ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044ba:	b580      	push	{r7, lr}
 80044bc:	b084      	sub	sp, #16
 80044be:	af00      	add	r7, sp, #0
 80044c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80044c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044c8:	f7ff feb6 	bl	8004238 <HAL_GetTick>
 80044cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d008      	beq.n	80044ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2280      	movs	r2, #128	@ 0x80
 80044de:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2200      	movs	r2, #0
 80044e4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80044e8:	2301      	movs	r3, #1
 80044ea:	e052      	b.n	8004592 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f022 0216 	bic.w	r2, r2, #22
 80044fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	695a      	ldr	r2, [r3, #20]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800450a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004510:	2b00      	cmp	r3, #0
 8004512:	d103      	bne.n	800451c <HAL_DMA_Abort+0x62>
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004518:	2b00      	cmp	r3, #0
 800451a:	d007      	beq.n	800452c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0208 	bic.w	r2, r2, #8
 800452a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681a      	ldr	r2, [r3, #0]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0201 	bic.w	r2, r2, #1
 800453a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800453c:	e013      	b.n	8004566 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800453e:	f7ff fe7b 	bl	8004238 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b05      	cmp	r3, #5
 800454a:	d90c      	bls.n	8004566 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2220      	movs	r2, #32
 8004550:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2203      	movs	r2, #3
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	2200      	movs	r2, #0
 800455e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8004562:	2303      	movs	r3, #3
 8004564:	e015      	b.n	8004592 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	2b00      	cmp	r3, #0
 8004572:	d1e4      	bne.n	800453e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004578:	223f      	movs	r2, #63	@ 0x3f
 800457a:	409a      	lsls	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	2201      	movs	r2, #1
 8004584:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3710      	adds	r7, #16
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}

0800459a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800459a:	b480      	push	{r7}
 800459c:	b083      	sub	sp, #12
 800459e:	af00      	add	r7, sp, #0
 80045a0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	2b02      	cmp	r3, #2
 80045ac:	d004      	beq.n	80045b8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	2280      	movs	r2, #128	@ 0x80
 80045b2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e00c      	b.n	80045d2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2205      	movs	r2, #5
 80045bc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f022 0201 	bic.w	r2, r2, #1
 80045ce:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	370c      	adds	r7, #12
 80045d6:	46bd      	mov	sp, r7
 80045d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045dc:	4770      	bx	lr
	...

080045e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	@ 0x24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045ee:	2300      	movs	r3, #0
 80045f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045f6:	2300      	movs	r3, #0
 80045f8:	61fb      	str	r3, [r7, #28]
 80045fa:	e159      	b.n	80048b0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045fc:	2201      	movs	r2, #1
 80045fe:	69fb      	ldr	r3, [r7, #28]
 8004600:	fa02 f303 	lsl.w	r3, r2, r3
 8004604:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	697a      	ldr	r2, [r7, #20]
 800460c:	4013      	ands	r3, r2
 800460e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	697b      	ldr	r3, [r7, #20]
 8004614:	429a      	cmp	r2, r3
 8004616:	f040 8148 	bne.w	80048aa <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	f003 0303 	and.w	r3, r3, #3
 8004622:	2b01      	cmp	r3, #1
 8004624:	d005      	beq.n	8004632 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004626:	683b      	ldr	r3, [r7, #0]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800462e:	2b02      	cmp	r3, #2
 8004630:	d130      	bne.n	8004694 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	689b      	ldr	r3, [r3, #8]
 8004636:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004638:	69fb      	ldr	r3, [r7, #28]
 800463a:	005b      	lsls	r3, r3, #1
 800463c:	2203      	movs	r2, #3
 800463e:	fa02 f303 	lsl.w	r3, r2, r3
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68da      	ldr	r2, [r3, #12]
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	005b      	lsls	r3, r3, #1
 8004652:	fa02 f303 	lsl.w	r3, r2, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4313      	orrs	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	69ba      	ldr	r2, [r7, #24]
 8004660:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004668:	2201      	movs	r2, #1
 800466a:	69fb      	ldr	r3, [r7, #28]
 800466c:	fa02 f303 	lsl.w	r3, r2, r3
 8004670:	43db      	mvns	r3, r3
 8004672:	69ba      	ldr	r2, [r7, #24]
 8004674:	4013      	ands	r3, r2
 8004676:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	091b      	lsrs	r3, r3, #4
 800467e:	f003 0201 	and.w	r2, r3, #1
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	fa02 f303 	lsl.w	r3, r2, r3
 8004688:	69ba      	ldr	r2, [r7, #24]
 800468a:	4313      	orrs	r3, r2
 800468c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	69ba      	ldr	r2, [r7, #24]
 8004692:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f003 0303 	and.w	r3, r3, #3
 800469c:	2b03      	cmp	r3, #3
 800469e:	d017      	beq.n	80046d0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80046a6:	69fb      	ldr	r3, [r7, #28]
 80046a8:	005b      	lsls	r3, r3, #1
 80046aa:	2203      	movs	r2, #3
 80046ac:	fa02 f303 	lsl.w	r3, r2, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	69ba      	ldr	r2, [r7, #24]
 80046b4:	4013      	ands	r3, r2
 80046b6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80046b8:	683b      	ldr	r3, [r7, #0]
 80046ba:	689a      	ldr	r2, [r3, #8]
 80046bc:	69fb      	ldr	r3, [r7, #28]
 80046be:	005b      	lsls	r3, r3, #1
 80046c0:	fa02 f303 	lsl.w	r3, r2, r3
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	4313      	orrs	r3, r2
 80046c8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	69ba      	ldr	r2, [r7, #24]
 80046ce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	685b      	ldr	r3, [r3, #4]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	2b02      	cmp	r3, #2
 80046da:	d123      	bne.n	8004724 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046dc:	69fb      	ldr	r3, [r7, #28]
 80046de:	08da      	lsrs	r2, r3, #3
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	3208      	adds	r2, #8
 80046e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046ea:	69fb      	ldr	r3, [r7, #28]
 80046ec:	f003 0307 	and.w	r3, r3, #7
 80046f0:	009b      	lsls	r3, r3, #2
 80046f2:	220f      	movs	r2, #15
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	43db      	mvns	r3, r3
 80046fa:	69ba      	ldr	r2, [r7, #24]
 80046fc:	4013      	ands	r3, r2
 80046fe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	691a      	ldr	r2, [r3, #16]
 8004704:	69fb      	ldr	r3, [r7, #28]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	009b      	lsls	r3, r3, #2
 800470c:	fa02 f303 	lsl.w	r3, r2, r3
 8004710:	69ba      	ldr	r2, [r7, #24]
 8004712:	4313      	orrs	r3, r2
 8004714:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004716:	69fb      	ldr	r3, [r7, #28]
 8004718:	08da      	lsrs	r2, r3, #3
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	3208      	adds	r2, #8
 800471e:	69b9      	ldr	r1, [r7, #24]
 8004720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800472a:	69fb      	ldr	r3, [r7, #28]
 800472c:	005b      	lsls	r3, r3, #1
 800472e:	2203      	movs	r2, #3
 8004730:	fa02 f303 	lsl.w	r3, r2, r3
 8004734:	43db      	mvns	r3, r3
 8004736:	69ba      	ldr	r2, [r7, #24]
 8004738:	4013      	ands	r3, r2
 800473a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	685b      	ldr	r3, [r3, #4]
 8004740:	f003 0203 	and.w	r2, r3, #3
 8004744:	69fb      	ldr	r3, [r7, #28]
 8004746:	005b      	lsls	r3, r3, #1
 8004748:	fa02 f303 	lsl.w	r3, r2, r3
 800474c:	69ba      	ldr	r2, [r7, #24]
 800474e:	4313      	orrs	r3, r2
 8004750:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	69ba      	ldr	r2, [r7, #24]
 8004756:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004760:	2b00      	cmp	r3, #0
 8004762:	f000 80a2 	beq.w	80048aa <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004766:	2300      	movs	r3, #0
 8004768:	60fb      	str	r3, [r7, #12]
 800476a:	4b57      	ldr	r3, [pc, #348]	@ (80048c8 <HAL_GPIO_Init+0x2e8>)
 800476c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476e:	4a56      	ldr	r2, [pc, #344]	@ (80048c8 <HAL_GPIO_Init+0x2e8>)
 8004770:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004774:	6453      	str	r3, [r2, #68]	@ 0x44
 8004776:	4b54      	ldr	r3, [pc, #336]	@ (80048c8 <HAL_GPIO_Init+0x2e8>)
 8004778:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800477a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004782:	4a52      	ldr	r2, [pc, #328]	@ (80048cc <HAL_GPIO_Init+0x2ec>)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	089b      	lsrs	r3, r3, #2
 8004788:	3302      	adds	r3, #2
 800478a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800478e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	f003 0303 	and.w	r3, r3, #3
 8004796:	009b      	lsls	r3, r3, #2
 8004798:	220f      	movs	r2, #15
 800479a:	fa02 f303 	lsl.w	r3, r2, r3
 800479e:	43db      	mvns	r3, r3
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	4013      	ands	r3, r2
 80047a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a49      	ldr	r2, [pc, #292]	@ (80048d0 <HAL_GPIO_Init+0x2f0>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d019      	beq.n	80047e2 <HAL_GPIO_Init+0x202>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a48      	ldr	r2, [pc, #288]	@ (80048d4 <HAL_GPIO_Init+0x2f4>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d013      	beq.n	80047de <HAL_GPIO_Init+0x1fe>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a47      	ldr	r2, [pc, #284]	@ (80048d8 <HAL_GPIO_Init+0x2f8>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d00d      	beq.n	80047da <HAL_GPIO_Init+0x1fa>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a46      	ldr	r2, [pc, #280]	@ (80048dc <HAL_GPIO_Init+0x2fc>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d007      	beq.n	80047d6 <HAL_GPIO_Init+0x1f6>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	4a45      	ldr	r2, [pc, #276]	@ (80048e0 <HAL_GPIO_Init+0x300>)
 80047ca:	4293      	cmp	r3, r2
 80047cc:	d101      	bne.n	80047d2 <HAL_GPIO_Init+0x1f2>
 80047ce:	2304      	movs	r3, #4
 80047d0:	e008      	b.n	80047e4 <HAL_GPIO_Init+0x204>
 80047d2:	2307      	movs	r3, #7
 80047d4:	e006      	b.n	80047e4 <HAL_GPIO_Init+0x204>
 80047d6:	2303      	movs	r3, #3
 80047d8:	e004      	b.n	80047e4 <HAL_GPIO_Init+0x204>
 80047da:	2302      	movs	r3, #2
 80047dc:	e002      	b.n	80047e4 <HAL_GPIO_Init+0x204>
 80047de:	2301      	movs	r3, #1
 80047e0:	e000      	b.n	80047e4 <HAL_GPIO_Init+0x204>
 80047e2:	2300      	movs	r3, #0
 80047e4:	69fa      	ldr	r2, [r7, #28]
 80047e6:	f002 0203 	and.w	r2, r2, #3
 80047ea:	0092      	lsls	r2, r2, #2
 80047ec:	4093      	lsls	r3, r2
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047f4:	4935      	ldr	r1, [pc, #212]	@ (80048cc <HAL_GPIO_Init+0x2ec>)
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	089b      	lsrs	r3, r3, #2
 80047fa:	3302      	adds	r3, #2
 80047fc:	69ba      	ldr	r2, [r7, #24]
 80047fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004802:	4b38      	ldr	r3, [pc, #224]	@ (80048e4 <HAL_GPIO_Init+0x304>)
 8004804:	689b      	ldr	r3, [r3, #8]
 8004806:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004808:	693b      	ldr	r3, [r7, #16]
 800480a:	43db      	mvns	r3, r3
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	4013      	ands	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800481a:	2b00      	cmp	r3, #0
 800481c:	d003      	beq.n	8004826 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800481e:	69ba      	ldr	r2, [r7, #24]
 8004820:	693b      	ldr	r3, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004826:	4a2f      	ldr	r2, [pc, #188]	@ (80048e4 <HAL_GPIO_Init+0x304>)
 8004828:	69bb      	ldr	r3, [r7, #24]
 800482a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800482c:	4b2d      	ldr	r3, [pc, #180]	@ (80048e4 <HAL_GPIO_Init+0x304>)
 800482e:	68db      	ldr	r3, [r3, #12]
 8004830:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004832:	693b      	ldr	r3, [r7, #16]
 8004834:	43db      	mvns	r3, r3
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	4013      	ands	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	685b      	ldr	r3, [r3, #4]
 8004840:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004844:	2b00      	cmp	r3, #0
 8004846:	d003      	beq.n	8004850 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	4313      	orrs	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004850:	4a24      	ldr	r2, [pc, #144]	@ (80048e4 <HAL_GPIO_Init+0x304>)
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004856:	4b23      	ldr	r3, [pc, #140]	@ (80048e4 <HAL_GPIO_Init+0x304>)
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800485c:	693b      	ldr	r3, [r7, #16]
 800485e:	43db      	mvns	r3, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4013      	ands	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	685b      	ldr	r3, [r3, #4]
 800486a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004872:	69ba      	ldr	r2, [r7, #24]
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800487a:	4a1a      	ldr	r2, [pc, #104]	@ (80048e4 <HAL_GPIO_Init+0x304>)
 800487c:	69bb      	ldr	r3, [r7, #24]
 800487e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004880:	4b18      	ldr	r3, [pc, #96]	@ (80048e4 <HAL_GPIO_Init+0x304>)
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004886:	693b      	ldr	r3, [r7, #16]
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	685b      	ldr	r3, [r3, #4]
 8004894:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004898:	2b00      	cmp	r3, #0
 800489a:	d003      	beq.n	80048a4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	4313      	orrs	r3, r2
 80048a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80048a4:	4a0f      	ldr	r2, [pc, #60]	@ (80048e4 <HAL_GPIO_Init+0x304>)
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80048aa:	69fb      	ldr	r3, [r7, #28]
 80048ac:	3301      	adds	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	69fb      	ldr	r3, [r7, #28]
 80048b2:	2b0f      	cmp	r3, #15
 80048b4:	f67f aea2 	bls.w	80045fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048b8:	bf00      	nop
 80048ba:	bf00      	nop
 80048bc:	3724      	adds	r7, #36	@ 0x24
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40013800 	.word	0x40013800
 80048d0:	40020000 	.word	0x40020000
 80048d4:	40020400 	.word	0x40020400
 80048d8:	40020800 	.word	0x40020800
 80048dc:	40020c00 	.word	0x40020c00
 80048e0:	40021000 	.word	0x40021000
 80048e4:	40013c00 	.word	0x40013c00

080048e8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
 80048f0:	460b      	mov	r3, r1
 80048f2:	807b      	strh	r3, [r7, #2]
 80048f4:	4613      	mov	r3, r2
 80048f6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80048f8:	787b      	ldrb	r3, [r7, #1]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d003      	beq.n	8004906 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048fe:	887a      	ldrh	r2, [r7, #2]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004904:	e003      	b.n	800490e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004906:	887b      	ldrh	r3, [r7, #2]
 8004908:	041a      	lsls	r2, r3, #16
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	619a      	str	r2, [r3, #24]
}
 800490e:	bf00      	nop
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004918:	4770      	bx	lr

0800491a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800491a:	b480      	push	{r7}
 800491c:	b085      	sub	sp, #20
 800491e:	af00      	add	r7, sp, #0
 8004920:	6078      	str	r0, [r7, #4]
 8004922:	460b      	mov	r3, r1
 8004924:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	695b      	ldr	r3, [r3, #20]
 800492a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800492c:	887a      	ldrh	r2, [r7, #2]
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	4013      	ands	r3, r2
 8004932:	041a      	lsls	r2, r3, #16
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	43d9      	mvns	r1, r3
 8004938:	887b      	ldrh	r3, [r7, #2]
 800493a:	400b      	ands	r3, r1
 800493c:	431a      	orrs	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	619a      	str	r2, [r3, #24]
}
 8004942:	bf00      	nop
 8004944:	3714      	adds	r7, #20
 8004946:	46bd      	mov	sp, r7
 8004948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494c:	4770      	bx	lr

0800494e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800494e:	b580      	push	{r7, lr}
 8004950:	b086      	sub	sp, #24
 8004952:	af02      	add	r7, sp, #8
 8004954:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e101      	b.n	8004b64 <HAL_PCD_Init+0x216>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 800496c:	b2db      	uxtb	r3, r3
 800496e:	2b00      	cmp	r3, #0
 8004970:	d106      	bne.n	8004980 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2200      	movs	r2, #0
 8004976:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800497a:	6878      	ldr	r0, [r7, #4]
 800497c:	f007 f9c0 	bl	800bd00 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2203      	movs	r2, #3
 8004984:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800498e:	d102      	bne.n	8004996 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	4618      	mov	r0, r3
 800499c:	f003 fd83 	bl	80084a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6818      	ldr	r0, [r3, #0]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	7c1a      	ldrb	r2, [r3, #16]
 80049a8:	f88d 2000 	strb.w	r2, [sp]
 80049ac:	3304      	adds	r3, #4
 80049ae:	cb0e      	ldmia	r3, {r1, r2, r3}
 80049b0:	f003 fc62 	bl	8008278 <USB_CoreInit>
 80049b4:	4603      	mov	r3, r0
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d005      	beq.n	80049c6 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2202      	movs	r2, #2
 80049be:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80049c2:	2301      	movs	r3, #1
 80049c4:	e0ce      	b.n	8004b64 <HAL_PCD_Init+0x216>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	2100      	movs	r1, #0
 80049cc:	4618      	mov	r0, r3
 80049ce:	f003 fd7b 	bl	80084c8 <USB_SetCurrentMode>
 80049d2:	4603      	mov	r3, r0
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d005      	beq.n	80049e4 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	2202      	movs	r2, #2
 80049dc:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	e0bf      	b.n	8004b64 <HAL_PCD_Init+0x216>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80049e4:	2300      	movs	r3, #0
 80049e6:	73fb      	strb	r3, [r7, #15]
 80049e8:	e04a      	b.n	8004a80 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80049ea:	7bfa      	ldrb	r2, [r7, #15]
 80049ec:	6879      	ldr	r1, [r7, #4]
 80049ee:	4613      	mov	r3, r2
 80049f0:	00db      	lsls	r3, r3, #3
 80049f2:	4413      	add	r3, r2
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	440b      	add	r3, r1
 80049f8:	3315      	adds	r3, #21
 80049fa:	2201      	movs	r2, #1
 80049fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80049fe:	7bfa      	ldrb	r2, [r7, #15]
 8004a00:	6879      	ldr	r1, [r7, #4]
 8004a02:	4613      	mov	r3, r2
 8004a04:	00db      	lsls	r3, r3, #3
 8004a06:	4413      	add	r3, r2
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	440b      	add	r3, r1
 8004a0c:	3314      	adds	r3, #20
 8004a0e:	7bfa      	ldrb	r2, [r7, #15]
 8004a10:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004a12:	7bfa      	ldrb	r2, [r7, #15]
 8004a14:	7bfb      	ldrb	r3, [r7, #15]
 8004a16:	b298      	uxth	r0, r3
 8004a18:	6879      	ldr	r1, [r7, #4]
 8004a1a:	4613      	mov	r3, r2
 8004a1c:	00db      	lsls	r3, r3, #3
 8004a1e:	4413      	add	r3, r2
 8004a20:	009b      	lsls	r3, r3, #2
 8004a22:	440b      	add	r3, r1
 8004a24:	332e      	adds	r3, #46	@ 0x2e
 8004a26:	4602      	mov	r2, r0
 8004a28:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004a2a:	7bfa      	ldrb	r2, [r7, #15]
 8004a2c:	6879      	ldr	r1, [r7, #4]
 8004a2e:	4613      	mov	r3, r2
 8004a30:	00db      	lsls	r3, r3, #3
 8004a32:	4413      	add	r3, r2
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	440b      	add	r3, r1
 8004a38:	3318      	adds	r3, #24
 8004a3a:	2200      	movs	r2, #0
 8004a3c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004a3e:	7bfa      	ldrb	r2, [r7, #15]
 8004a40:	6879      	ldr	r1, [r7, #4]
 8004a42:	4613      	mov	r3, r2
 8004a44:	00db      	lsls	r3, r3, #3
 8004a46:	4413      	add	r3, r2
 8004a48:	009b      	lsls	r3, r3, #2
 8004a4a:	440b      	add	r3, r1
 8004a4c:	331c      	adds	r3, #28
 8004a4e:	2200      	movs	r2, #0
 8004a50:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8004a52:	7bfa      	ldrb	r2, [r7, #15]
 8004a54:	6879      	ldr	r1, [r7, #4]
 8004a56:	4613      	mov	r3, r2
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	440b      	add	r3, r1
 8004a60:	3320      	adds	r3, #32
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004a66:	7bfa      	ldrb	r2, [r7, #15]
 8004a68:	6879      	ldr	r1, [r7, #4]
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	00db      	lsls	r3, r3, #3
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	3324      	adds	r3, #36	@ 0x24
 8004a76:	2200      	movs	r2, #0
 8004a78:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a7a:	7bfb      	ldrb	r3, [r7, #15]
 8004a7c:	3301      	adds	r3, #1
 8004a7e:	73fb      	strb	r3, [r7, #15]
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	791b      	ldrb	r3, [r3, #4]
 8004a84:	7bfa      	ldrb	r2, [r7, #15]
 8004a86:	429a      	cmp	r2, r3
 8004a88:	d3af      	bcc.n	80049ea <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
 8004a8e:	e044      	b.n	8004b1a <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8004a90:	7bfa      	ldrb	r2, [r7, #15]
 8004a92:	6879      	ldr	r1, [r7, #4]
 8004a94:	4613      	mov	r3, r2
 8004a96:	00db      	lsls	r3, r3, #3
 8004a98:	4413      	add	r3, r2
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	f203 2355 	addw	r3, r3, #597	@ 0x255
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004aa6:	7bfa      	ldrb	r2, [r7, #15]
 8004aa8:	6879      	ldr	r1, [r7, #4]
 8004aaa:	4613      	mov	r3, r2
 8004aac:	00db      	lsls	r3, r3, #3
 8004aae:	4413      	add	r3, r2
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	440b      	add	r3, r1
 8004ab4:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 8004ab8:	7bfa      	ldrb	r2, [r7, #15]
 8004aba:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8004abc:	7bfa      	ldrb	r2, [r7, #15]
 8004abe:	6879      	ldr	r1, [r7, #4]
 8004ac0:	4613      	mov	r3, r2
 8004ac2:	00db      	lsls	r3, r3, #3
 8004ac4:	4413      	add	r3, r2
 8004ac6:	009b      	lsls	r3, r3, #2
 8004ac8:	440b      	add	r3, r1
 8004aca:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8004ace:	2200      	movs	r2, #0
 8004ad0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004ad2:	7bfa      	ldrb	r2, [r7, #15]
 8004ad4:	6879      	ldr	r1, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	00db      	lsls	r3, r3, #3
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	440b      	add	r3, r1
 8004ae0:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004ae8:	7bfa      	ldrb	r2, [r7, #15]
 8004aea:	6879      	ldr	r1, [r7, #4]
 8004aec:	4613      	mov	r3, r2
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4413      	add	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8004afa:	2200      	movs	r2, #0
 8004afc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004afe:	7bfa      	ldrb	r2, [r7, #15]
 8004b00:	6879      	ldr	r1, [r7, #4]
 8004b02:	4613      	mov	r3, r2
 8004b04:	00db      	lsls	r3, r3, #3
 8004b06:	4413      	add	r3, r2
 8004b08:	009b      	lsls	r3, r3, #2
 8004b0a:	440b      	add	r3, r1
 8004b0c:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8004b10:	2200      	movs	r2, #0
 8004b12:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004b14:	7bfb      	ldrb	r3, [r7, #15]
 8004b16:	3301      	adds	r3, #1
 8004b18:	73fb      	strb	r3, [r7, #15]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	791b      	ldrb	r3, [r3, #4]
 8004b1e:	7bfa      	ldrb	r2, [r7, #15]
 8004b20:	429a      	cmp	r2, r3
 8004b22:	d3b5      	bcc.n	8004a90 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6818      	ldr	r0, [r3, #0]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	7c1a      	ldrb	r2, [r3, #16]
 8004b2c:	f88d 2000 	strb.w	r2, [sp]
 8004b30:	3304      	adds	r3, #4
 8004b32:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004b34:	f003 fd14 	bl	8008560 <USB_DevInit>
 8004b38:	4603      	mov	r3, r0
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d005      	beq.n	8004b4a <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2202      	movs	r2, #2
 8004b42:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8004b46:	2301      	movs	r3, #1
 8004b48:	e00c      	b.n	8004b64 <HAL_PCD_Init+0x216>
  }

  hpcd->USB_Address = 0U;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f004 fd5e 	bl	800961e <USB_DevDisconnect>

  return HAL_OK;
 8004b62:	2300      	movs	r3, #0
}
 8004b64:	4618      	mov	r0, r3
 8004b66:	3710      	adds	r7, #16
 8004b68:	46bd      	mov	sp, r7
 8004b6a:	bd80      	pop	{r7, pc}

08004b6c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	b084      	sub	sp, #16
 8004b70:	af00      	add	r7, sp, #0
 8004b72:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8004b80:	2b01      	cmp	r3, #1
 8004b82:	d101      	bne.n	8004b88 <HAL_PCD_Start+0x1c>
 8004b84:	2302      	movs	r3, #2
 8004b86:	e022      	b.n	8004bce <HAL_PCD_Start+0x62>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2201      	movs	r2, #1
 8004b8c:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d009      	beq.n	8004bb0 <HAL_PCD_Start+0x44>
      (hpcd->Init.battery_charging_enable == 1U))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	7b5b      	ldrb	r3, [r3, #13]
  if (((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) != 0U) &&
 8004ba0:	2b01      	cmp	r3, #1
 8004ba2:	d105      	bne.n	8004bb0 <HAL_PCD_Start+0x44>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ba8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f003 fc65 	bl	8008484 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	f004 fd0c 	bl	80095dc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8004bcc:	2300      	movs	r3, #0
}
 8004bce:	4618      	mov	r0, r3
 8004bd0:	3710      	adds	r7, #16
 8004bd2:	46bd      	mov	sp, r7
 8004bd4:	bd80      	pop	{r7, pc}

08004bd6 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8004bd6:	b590      	push	{r4, r7, lr}
 8004bd8:	b08d      	sub	sp, #52	@ 0x34
 8004bda:	af00      	add	r7, sp, #0
 8004bdc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be4:	6a3b      	ldr	r3, [r7, #32]
 8004be6:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4618      	mov	r0, r3
 8004bee:	f004 fdca 	bl	8009786 <USB_GetMode>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 848c 	bne.w	8005512 <HAL_PCD_IRQHandler+0x93c>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	4618      	mov	r0, r3
 8004c00:	f004 fd2e 	bl	8009660 <USB_ReadInterrupts>
 8004c04:	4603      	mov	r3, r0
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	f000 8482 	beq.w	8005510 <HAL_PCD_IRQHandler+0x93a>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8004c0c:	69fb      	ldr	r3, [r7, #28]
 8004c0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004c12:	689b      	ldr	r3, [r3, #8]
 8004c14:	0a1b      	lsrs	r3, r3, #8
 8004c16:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	f8c3 24d4 	str.w	r2, [r3, #1236]	@ 0x4d4

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	4618      	mov	r0, r3
 8004c26:	f004 fd1b 	bl	8009660 <USB_ReadInterrupts>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	f003 0302 	and.w	r3, r3, #2
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d107      	bne.n	8004c44 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	695a      	ldr	r2, [r3, #20]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f002 0202 	and.w	r2, r2, #2
 8004c42:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4618      	mov	r0, r3
 8004c4a:	f004 fd09 	bl	8009660 <USB_ReadInterrupts>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	f003 0310 	and.w	r3, r3, #16
 8004c54:	2b10      	cmp	r3, #16
 8004c56:	d161      	bne.n	8004d1c <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	699a      	ldr	r2, [r3, #24]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0210 	bic.w	r2, r2, #16
 8004c66:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	6a1b      	ldr	r3, [r3, #32]
 8004c6c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	f003 020f 	and.w	r2, r3, #15
 8004c74:	4613      	mov	r3, r2
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004c80:	687a      	ldr	r2, [r7, #4]
 8004c82:	4413      	add	r3, r2
 8004c84:	3304      	adds	r3, #4
 8004c86:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004c8e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004c92:	d124      	bne.n	8004cde <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8004c94:	69ba      	ldr	r2, [r7, #24]
 8004c96:	f647 73f0 	movw	r3, #32752	@ 0x7ff0
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d035      	beq.n	8004d0c <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	68d9      	ldr	r1, [r3, #12]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8004ca4:	69bb      	ldr	r3, [r7, #24]
 8004ca6:	091b      	lsrs	r3, r3, #4
 8004ca8:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8004caa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cae:	b29b      	uxth	r3, r3
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	6a38      	ldr	r0, [r7, #32]
 8004cb4:	f004 fb40 	bl	8009338 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cb8:	697b      	ldr	r3, [r7, #20]
 8004cba:	68da      	ldr	r2, [r3, #12]
 8004cbc:	69bb      	ldr	r3, [r7, #24]
 8004cbe:	091b      	lsrs	r3, r3, #4
 8004cc0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cc4:	441a      	add	r2, r3
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	60da      	str	r2, [r3, #12]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cca:	697b      	ldr	r3, [r7, #20]
 8004ccc:	695a      	ldr	r2, [r3, #20]
 8004cce:	69bb      	ldr	r3, [r7, #24]
 8004cd0:	091b      	lsrs	r3, r3, #4
 8004cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004cd6:	441a      	add	r2, r3
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	615a      	str	r2, [r3, #20]
 8004cdc:	e016      	b.n	8004d0c <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8004cde:	69bb      	ldr	r3, [r7, #24]
 8004ce0:	f403 13f0 	and.w	r3, r3, #1966080	@ 0x1e0000
 8004ce4:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004ce8:	d110      	bne.n	8004d0c <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	4619      	mov	r1, r3
 8004cf4:	6a38      	ldr	r0, [r7, #32]
 8004cf6:	f004 fb1f 	bl	8009338 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	695a      	ldr	r2, [r3, #20]
 8004cfe:	69bb      	ldr	r3, [r7, #24]
 8004d00:	091b      	lsrs	r3, r3, #4
 8004d02:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8004d06:	441a      	add	r2, r3
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	615a      	str	r2, [r3, #20]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	699a      	ldr	r2, [r3, #24]
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	f042 0210 	orr.w	r2, r2, #16
 8004d1a:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4618      	mov	r0, r3
 8004d22:	f004 fc9d 	bl	8009660 <USB_ReadInterrupts>
 8004d26:	4603      	mov	r3, r0
 8004d28:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004d2c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d30:	f040 80a7 	bne.w	8004e82 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	f004 fca2 	bl	8009686 <USB_ReadDevAllOutEpInterrupt>
 8004d42:	62b8      	str	r0, [r7, #40]	@ 0x28

      while (ep_intr != 0U)
 8004d44:	e099      	b.n	8004e7a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8004d46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004d48:	f003 0301 	and.w	r3, r3, #1
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f000 808e 	beq.w	8004e6e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d58:	b2d2      	uxtb	r2, r2
 8004d5a:	4611      	mov	r1, r2
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	f004 fcc6 	bl	80096ee <USB_ReadDevOutEPInterrupt>
 8004d62:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d00c      	beq.n	8004d88 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8004d6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d70:	015a      	lsls	r2, r3, #5
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	4413      	add	r3, r2
 8004d76:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d7a:	461a      	mov	r2, r3
 8004d7c:	2301      	movs	r3, #1
 8004d7e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8004d80:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fea4 	bl	8005ad0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	f003 0308 	and.w	r3, r3, #8
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d00c      	beq.n	8004dac <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8004d92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d94:	015a      	lsls	r2, r3, #5
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	4413      	add	r3, r2
 8004d9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004d9e:	461a      	mov	r2, r3
 8004da0:	2308      	movs	r3, #8
 8004da2:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8004da4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 ff7a 	bl	8005ca0 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	f003 0310 	and.w	r3, r3, #16
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d008      	beq.n	8004dc8 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8004db6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004db8:	015a      	lsls	r2, r3, #5
 8004dba:	69fb      	ldr	r3, [r7, #28]
 8004dbc:	4413      	add	r3, r2
 8004dbe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004dc2:	461a      	mov	r2, r3
 8004dc4:	2310      	movs	r3, #16
 8004dc6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d030      	beq.n	8004e34 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8004dd2:	6a3b      	ldr	r3, [r7, #32]
 8004dd4:	695b      	ldr	r3, [r3, #20]
 8004dd6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004dda:	2b80      	cmp	r3, #128	@ 0x80
 8004ddc:	d109      	bne.n	8004df2 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8004dde:	69fb      	ldr	r3, [r7, #28]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	69fa      	ldr	r2, [r7, #28]
 8004de8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004dec:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004df0:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8004df2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004df4:	4613      	mov	r3, r2
 8004df6:	00db      	lsls	r3, r3, #3
 8004df8:	4413      	add	r3, r2
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8004e00:	687a      	ldr	r2, [r7, #4]
 8004e02:	4413      	add	r3, r2
 8004e04:	3304      	adds	r3, #4
 8004e06:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004e08:	697b      	ldr	r3, [r7, #20]
 8004e0a:	78db      	ldrb	r3, [r3, #3]
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	d108      	bne.n	8004e22 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2200      	movs	r2, #0
 8004e14:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8004e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	4619      	mov	r1, r3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f007 f86b 	bl	800bef8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8004e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e24:	015a      	lsls	r2, r3, #5
 8004e26:	69fb      	ldr	r3, [r7, #28]
 8004e28:	4413      	add	r3, r2
 8004e2a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e2e:	461a      	mov	r2, r3
 8004e30:	2302      	movs	r3, #2
 8004e32:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8004e34:	693b      	ldr	r3, [r7, #16]
 8004e36:	f003 0320 	and.w	r3, r3, #32
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8004e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e40:	015a      	lsls	r2, r3, #5
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	4413      	add	r3, r2
 8004e46:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e4a:	461a      	mov	r2, r3
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d009      	beq.n	8004e6e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5c:	015a      	lsls	r2, r3, #5
 8004e5e:	69fb      	ldr	r3, [r7, #28]
 8004e60:	4413      	add	r3, r2
 8004e62:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004e66:	461a      	mov	r2, r3
 8004e68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8004e6c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8004e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e70:	3301      	adds	r3, #1
 8004e72:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8004e74:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e76:	085b      	lsrs	r3, r3, #1
 8004e78:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8004e7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	f47f af62 	bne.w	8004d46 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	4618      	mov	r0, r3
 8004e88:	f004 fbea 	bl	8009660 <USB_ReadInterrupts>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004e92:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004e96:	f040 80db 	bne.w	8005050 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	f004 fc0b 	bl	80096ba <USB_ReadDevAllInEpInterrupt>
 8004ea4:	62b8      	str	r0, [r7, #40]	@ 0x28

      epnum = 0U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	627b      	str	r3, [r7, #36]	@ 0x24

      while (ep_intr != 0U)
 8004eaa:	e0cd      	b.n	8005048 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8004eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eae:	f003 0301 	and.w	r3, r3, #1
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 80c2 	beq.w	800503c <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ebe:	b2d2      	uxtb	r2, r2
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	4618      	mov	r0, r3
 8004ec4:	f004 fc31 	bl	800972a <USB_ReadDevInEPInterrupt>
 8004ec8:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d057      	beq.n	8004f84 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	f003 030f 	and.w	r3, r3, #15
 8004eda:	2201      	movs	r2, #1
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8004ee2:	69fb      	ldr	r3, [r7, #28]
 8004ee4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	43db      	mvns	r3, r3
 8004eee:	69f9      	ldr	r1, [r7, #28]
 8004ef0:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004ef4:	4013      	ands	r3, r2
 8004ef6:	634b      	str	r3, [r1, #52]	@ 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8004ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004efa:	015a      	lsls	r2, r3, #5
 8004efc:	69fb      	ldr	r3, [r7, #28]
 8004efe:	4413      	add	r3, r2
 8004f00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f04:	461a      	mov	r2, r3
 8004f06:	2301      	movs	r3, #1
 8004f08:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	799b      	ldrb	r3, [r3, #6]
 8004f0e:	2b01      	cmp	r3, #1
 8004f10:	d132      	bne.n	8004f78 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8004f12:	6879      	ldr	r1, [r7, #4]
 8004f14:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f16:	4613      	mov	r3, r2
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	4413      	add	r3, r2
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	440b      	add	r3, r1
 8004f20:	3320      	adds	r3, #32
 8004f22:	6819      	ldr	r1, [r3, #0]
 8004f24:	6878      	ldr	r0, [r7, #4]
 8004f26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f28:	4613      	mov	r3, r2
 8004f2a:	00db      	lsls	r3, r3, #3
 8004f2c:	4413      	add	r3, r2
 8004f2e:	009b      	lsls	r3, r3, #2
 8004f30:	4403      	add	r3, r0
 8004f32:	331c      	adds	r3, #28
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4419      	add	r1, r3
 8004f38:	6878      	ldr	r0, [r7, #4]
 8004f3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f3c:	4613      	mov	r3, r2
 8004f3e:	00db      	lsls	r3, r3, #3
 8004f40:	4413      	add	r3, r2
 8004f42:	009b      	lsls	r3, r3, #2
 8004f44:	4403      	add	r3, r0
 8004f46:	3320      	adds	r3, #32
 8004f48:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d113      	bne.n	8004f78 <HAL_PCD_IRQHandler+0x3a2>
 8004f50:	6879      	ldr	r1, [r7, #4]
 8004f52:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f54:	4613      	mov	r3, r2
 8004f56:	00db      	lsls	r3, r3, #3
 8004f58:	4413      	add	r3, r2
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	440b      	add	r3, r1
 8004f5e:	3324      	adds	r3, #36	@ 0x24
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d108      	bne.n	8004f78 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6818      	ldr	r0, [r3, #0]
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8004f70:	461a      	mov	r2, r3
 8004f72:	2101      	movs	r1, #1
 8004f74:	f004 fc38 	bl	80097e8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8004f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f006 ff3f 	bl	800be02 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d008      	beq.n	8004fa0 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8004f8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f90:	015a      	lsls	r2, r3, #5
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	4413      	add	r3, r2
 8004f96:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004f9a:	461a      	mov	r2, r3
 8004f9c:	2308      	movs	r3, #8
 8004f9e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8004fa0:	693b      	ldr	r3, [r7, #16]
 8004fa2:	f003 0310 	and.w	r3, r3, #16
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d008      	beq.n	8004fbc <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8004faa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fb6:	461a      	mov	r2, r3
 8004fb8:	2310      	movs	r3, #16
 8004fba:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d008      	beq.n	8004fd8 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8004fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fc8:	015a      	lsls	r2, r3, #5
 8004fca:	69fb      	ldr	r3, [r7, #28]
 8004fcc:	4413      	add	r3, r2
 8004fce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004fd2:	461a      	mov	r2, r3
 8004fd4:	2340      	movs	r3, #64	@ 0x40
 8004fd6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	f003 0302 	and.w	r3, r3, #2
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d023      	beq.n	800502a <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8004fe2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004fe4:	6a38      	ldr	r0, [r7, #32]
 8004fe6:	f003 fc1f 	bl	8008828 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8004fea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fec:	4613      	mov	r3, r2
 8004fee:	00db      	lsls	r3, r3, #3
 8004ff0:	4413      	add	r3, r2
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	3310      	adds	r3, #16
 8004ff6:	687a      	ldr	r2, [r7, #4]
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8004ffe:	697b      	ldr	r3, [r7, #20]
 8005000:	78db      	ldrb	r3, [r3, #3]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d108      	bne.n	8005018 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	2200      	movs	r2, #0
 800500a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800500c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800500e:	b2db      	uxtb	r3, r3
 8005010:	4619      	mov	r1, r3
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f006 ff82 	bl	800bf1c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8005018:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800501a:	015a      	lsls	r2, r3, #5
 800501c:	69fb      	ldr	r3, [r7, #28]
 800501e:	4413      	add	r3, r2
 8005020:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005024:	461a      	mov	r2, r3
 8005026:	2302      	movs	r3, #2
 8005028:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005030:	2b00      	cmp	r3, #0
 8005032:	d003      	beq.n	800503c <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8005034:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005036:	6878      	ldr	r0, [r7, #4]
 8005038:	f000 fcbd 	bl	80059b6 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800503c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800503e:	3301      	adds	r3, #1
 8005040:	627b      	str	r3, [r7, #36]	@ 0x24
        ep_intr >>= 1U;
 8005042:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005044:	085b      	lsrs	r3, r3, #1
 8005046:	62bb      	str	r3, [r7, #40]	@ 0x28
      while (ep_intr != 0U)
 8005048:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800504a:	2b00      	cmp	r3, #0
 800504c:	f47f af2e 	bne.w	8004eac <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	4618      	mov	r0, r3
 8005056:	f004 fb03 	bl	8009660 <USB_ReadInterrupts>
 800505a:	4603      	mov	r3, r0
 800505c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8005060:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8005064:	d122      	bne.n	80050ac <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005066:	69fb      	ldr	r3, [r7, #28]
 8005068:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	69fa      	ldr	r2, [r7, #28]
 8005070:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005074:	f023 0301 	bic.w	r3, r3, #1
 8005078:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f893 34cc 	ldrb.w	r3, [r3, #1228]	@ 0x4cc
 8005080:	2b01      	cmp	r3, #1
 8005082:	d108      	bne.n	8005096 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2200      	movs	r2, #0
 8005088:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800508c:	2100      	movs	r1, #0
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f000 fea4 	bl	8005ddc <HAL_PCDEx_LPM_Callback>
 8005094:	e002      	b.n	800509c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f006 ff20 	bl	800bedc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	695a      	ldr	r2, [r3, #20]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f002 4200 	and.w	r2, r2, #2147483648	@ 0x80000000
 80050aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f004 fad5 	bl	8009660 <USB_ReadInterrupts>
 80050b6:	4603      	mov	r3, r0
 80050b8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80050bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80050c0:	d112      	bne.n	80050e8 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80050c8:	689b      	ldr	r3, [r3, #8]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b01      	cmp	r3, #1
 80050d0:	d102      	bne.n	80050d8 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80050d2:	6878      	ldr	r0, [r7, #4]
 80050d4:	f006 fedc 	bl	800be90 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	695a      	ldr	r2, [r3, #20]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f402 6200 	and.w	r2, r2, #2048	@ 0x800
 80050e6:	615a      	str	r2, [r3, #20]
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4618      	mov	r0, r3
 80050ee:	f004 fab7 	bl	8009660 <USB_ReadInterrupts>
 80050f2:	4603      	mov	r3, r0
 80050f4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80050fc:	f040 80b7 	bne.w	800526e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8005100:	69fb      	ldr	r3, [r7, #28]
 8005102:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	69fa      	ldr	r2, [r7, #28]
 800510a:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800510e:	f023 0301 	bic.w	r3, r3, #1
 8005112:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	2110      	movs	r1, #16
 800511a:	4618      	mov	r0, r3
 800511c:	f003 fb84 	bl	8008828 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005120:	2300      	movs	r3, #0
 8005122:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005124:	e046      	b.n	80051b4 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8005126:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005128:	015a      	lsls	r2, r3, #5
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	4413      	add	r3, r2
 800512e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005132:	461a      	mov	r2, r3
 8005134:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8005138:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800513a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800513c:	015a      	lsls	r2, r3, #5
 800513e:	69fb      	ldr	r3, [r7, #28]
 8005140:	4413      	add	r3, r2
 8005142:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800514a:	0151      	lsls	r1, r2, #5
 800514c:	69fa      	ldr	r2, [r7, #28]
 800514e:	440a      	add	r2, r1
 8005150:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8005154:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005158:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800515a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800515c:	015a      	lsls	r2, r3, #5
 800515e:	69fb      	ldr	r3, [r7, #28]
 8005160:	4413      	add	r3, r2
 8005162:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005166:	461a      	mov	r2, r3
 8005168:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800516c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800516e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005170:	015a      	lsls	r2, r3, #5
 8005172:	69fb      	ldr	r3, [r7, #28]
 8005174:	4413      	add	r3, r2
 8005176:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800517e:	0151      	lsls	r1, r2, #5
 8005180:	69fa      	ldr	r2, [r7, #28]
 8005182:	440a      	add	r2, r1
 8005184:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8005188:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 800518c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800518e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005190:	015a      	lsls	r2, r3, #5
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	4413      	add	r3, r2
 8005196:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800519e:	0151      	lsls	r1, r2, #5
 80051a0:	69fa      	ldr	r2, [r7, #28]
 80051a2:	440a      	add	r2, r1
 80051a4:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80051a8:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80051ac:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80051ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051b0:	3301      	adds	r3, #1
 80051b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	791b      	ldrb	r3, [r3, #4]
 80051b8:	461a      	mov	r2, r3
 80051ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051bc:	4293      	cmp	r3, r2
 80051be:	d3b2      	bcc.n	8005126 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80051c0:	69fb      	ldr	r3, [r7, #28]
 80051c2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051ce:	f043 1301 	orr.w	r3, r3, #65537	@ 0x10001
 80051d2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	7bdb      	ldrb	r3, [r3, #15]
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d016      	beq.n	800520a <HAL_PCD_IRQHandler+0x634>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80051dc:	69fb      	ldr	r3, [r7, #28]
 80051de:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80051e6:	69fa      	ldr	r2, [r7, #28]
 80051e8:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80051ec:	f043 030b 	orr.w	r3, r3, #11
 80051f0:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80051f4:	69fb      	ldr	r3, [r7, #28]
 80051f6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80051fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80051fc:	69fa      	ldr	r2, [r7, #28]
 80051fe:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005202:	f043 030b 	orr.w	r3, r3, #11
 8005206:	6453      	str	r3, [r2, #68]	@ 0x44
 8005208:	e015      	b.n	8005236 <HAL_PCD_IRQHandler+0x660>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005210:	695b      	ldr	r3, [r3, #20]
 8005212:	69fa      	ldr	r2, [r7, #28]
 8005214:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005218:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800521c:	f043 032b 	orr.w	r3, r3, #43	@ 0x2b
 8005220:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8005222:	69fb      	ldr	r3, [r7, #28]
 8005224:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	69fa      	ldr	r2, [r7, #28]
 800522c:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005230:	f043 030b 	orr.w	r3, r3, #11
 8005234:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69fa      	ldr	r2, [r7, #28]
 8005240:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8005244:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 8005248:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	6818      	ldr	r0, [r3, #0]
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	7999      	ldrb	r1, [r3, #6]
                             (uint8_t *)hpcd->Setup);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8005258:	461a      	mov	r2, r3
 800525a:	f004 fac5 	bl	80097e8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	695a      	ldr	r2, [r3, #20]
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	681b      	ldr	r3, [r3, #0]
 8005268:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 800526c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	4618      	mov	r0, r3
 8005274:	f004 f9f4 	bl	8009660 <USB_ReadInterrupts>
 8005278:	4603      	mov	r3, r0
 800527a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800527e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8005282:	d123      	bne.n	80052cc <HAL_PCD_IRQHandler+0x6f6>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4618      	mov	r0, r3
 800528a:	f004 fa8a 	bl	80097a2 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4618      	mov	r0, r3
 8005294:	f003 fb41 	bl	800891a <USB_GetDevSpeed>
 8005298:	4603      	mov	r3, r0
 800529a:	461a      	mov	r2, r3
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	71da      	strb	r2, [r3, #7]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681c      	ldr	r4, [r3, #0]
 80052a4:	f001 f9ca 	bl	800663c <HAL_RCC_GetHCLKFreq>
 80052a8:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	79db      	ldrb	r3, [r3, #7]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80052ae:	461a      	mov	r2, r3
 80052b0:	4620      	mov	r0, r4
 80052b2:	f003 f845 	bl	8008340 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f006 fdcb 	bl	800be52 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	695a      	ldr	r2, [r3, #20]
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f402 5200 	and.w	r2, r2, #8192	@ 0x2000
 80052ca:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	4618      	mov	r0, r3
 80052d2:	f004 f9c5 	bl	8009660 <USB_ReadInterrupts>
 80052d6:	4603      	mov	r3, r0
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b08      	cmp	r3, #8
 80052de:	d10a      	bne.n	80052f6 <HAL_PCD_IRQHandler+0x720>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80052e0:	6878      	ldr	r0, [r7, #4]
 80052e2:	f006 fda8 	bl	800be36 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	695a      	ldr	r2, [r3, #20]
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f002 0208 	and.w	r2, r2, #8
 80052f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	4618      	mov	r0, r3
 80052fc:	f004 f9b0 	bl	8009660 <USB_ReadInterrupts>
 8005300:	4603      	mov	r3, r0
 8005302:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005306:	2b80      	cmp	r3, #128	@ 0x80
 8005308:	d123      	bne.n	8005352 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	699b      	ldr	r3, [r3, #24]
 800530e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005316:	2301      	movs	r3, #1
 8005318:	627b      	str	r3, [r7, #36]	@ 0x24
 800531a:	e014      	b.n	8005346 <HAL_PCD_IRQHandler+0x770>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800531c:	6879      	ldr	r1, [r7, #4]
 800531e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005320:	4613      	mov	r3, r2
 8005322:	00db      	lsls	r3, r3, #3
 8005324:	4413      	add	r3, r2
 8005326:	009b      	lsls	r3, r3, #2
 8005328:	440b      	add	r3, r1
 800532a:	f203 2357 	addw	r3, r3, #599	@ 0x257
 800532e:	781b      	ldrb	r3, [r3, #0]
 8005330:	2b01      	cmp	r3, #1
 8005332:	d105      	bne.n	8005340 <HAL_PCD_IRQHandler+0x76a>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8005334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005336:	b2db      	uxtb	r3, r3
 8005338:	4619      	mov	r1, r3
 800533a:	6878      	ldr	r0, [r7, #4]
 800533c:	f000 fb0a 	bl	8005954 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005340:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005342:	3301      	adds	r3, #1
 8005344:	627b      	str	r3, [r7, #36]	@ 0x24
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	791b      	ldrb	r3, [r3, #4]
 800534a:	461a      	mov	r2, r3
 800534c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800534e:	4293      	cmp	r3, r2
 8005350:	d3e4      	bcc.n	800531c <HAL_PCD_IRQHandler+0x746>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	4618      	mov	r0, r3
 8005358:	f004 f982 	bl	8009660 <USB_ReadInterrupts>
 800535c:	4603      	mov	r3, r0
 800535e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005362:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005366:	d13c      	bne.n	80053e2 <HAL_PCD_IRQHandler+0x80c>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005368:	2301      	movs	r3, #1
 800536a:	627b      	str	r3, [r7, #36]	@ 0x24
 800536c:	e02b      	b.n	80053c6 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800536e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005370:	015a      	lsls	r2, r3, #5
 8005372:	69fb      	ldr	r3, [r7, #28]
 8005374:	4413      	add	r3, r2
 8005376:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800537e:	6879      	ldr	r1, [r7, #4]
 8005380:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005382:	4613      	mov	r3, r2
 8005384:	00db      	lsls	r3, r3, #3
 8005386:	4413      	add	r3, r2
 8005388:	009b      	lsls	r3, r3, #2
 800538a:	440b      	add	r3, r1
 800538c:	3318      	adds	r3, #24
 800538e:	781b      	ldrb	r3, [r3, #0]
 8005390:	2b01      	cmp	r3, #1
 8005392:	d115      	bne.n	80053c0 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8005394:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8005396:	2b00      	cmp	r3, #0
 8005398:	da12      	bge.n	80053c0 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800539a:	6879      	ldr	r1, [r7, #4]
 800539c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800539e:	4613      	mov	r3, r2
 80053a0:	00db      	lsls	r3, r3, #3
 80053a2:	4413      	add	r3, r2
 80053a4:	009b      	lsls	r3, r3, #2
 80053a6:	440b      	add	r3, r1
 80053a8:	3317      	adds	r3, #23
 80053aa:	2201      	movs	r2, #1
 80053ac:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80053ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b0:	b2db      	uxtb	r3, r3
 80053b2:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80053b6:	b2db      	uxtb	r3, r3
 80053b8:	4619      	mov	r1, r3
 80053ba:	6878      	ldr	r0, [r7, #4]
 80053bc:	f000 faca 	bl	8005954 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c2:	3301      	adds	r3, #1
 80053c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	791b      	ldrb	r3, [r3, #4]
 80053ca:	461a      	mov	r2, r3
 80053cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053ce:	4293      	cmp	r3, r2
 80053d0:	d3cd      	bcc.n	800536e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	695a      	ldr	r2, [r3, #20]
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f402 1280 	and.w	r2, r2, #1048576	@ 0x100000
 80053e0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4618      	mov	r0, r3
 80053e8:	f004 f93a 	bl	8009660 <USB_ReadInterrupts>
 80053ec:	4603      	mov	r3, r0
 80053ee:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80053f2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80053f6:	d156      	bne.n	80054a6 <HAL_PCD_IRQHandler+0x8d0>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80053f8:	2301      	movs	r3, #1
 80053fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80053fc:	e045      	b.n	800548a <HAL_PCD_IRQHandler+0x8b4>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80053fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800540e:	6879      	ldr	r1, [r7, #4]
 8005410:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005412:	4613      	mov	r3, r2
 8005414:	00db      	lsls	r3, r3, #3
 8005416:	4413      	add	r3, r2
 8005418:	009b      	lsls	r3, r3, #2
 800541a:	440b      	add	r3, r1
 800541c:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	2b01      	cmp	r3, #1
 8005424:	d12e      	bne.n	8005484 <HAL_PCD_IRQHandler+0x8ae>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8005426:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8005428:	2b00      	cmp	r3, #0
 800542a:	da2b      	bge.n	8005484 <HAL_PCD_IRQHandler+0x8ae>
            (((RegVal & (0x1U << 16)) >> 16U) == (hpcd->FrameNumber & 0x1U)))
 800542c:	69bb      	ldr	r3, [r7, #24]
 800542e:	0c1a      	lsrs	r2, r3, #16
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	f8d3 34d4 	ldr.w	r3, [r3, #1236]	@ 0x4d4
 8005436:	4053      	eors	r3, r2
 8005438:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800543c:	2b00      	cmp	r3, #0
 800543e:	d121      	bne.n	8005484 <HAL_PCD_IRQHandler+0x8ae>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8005440:	6879      	ldr	r1, [r7, #4]
 8005442:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005444:	4613      	mov	r3, r2
 8005446:	00db      	lsls	r3, r3, #3
 8005448:	4413      	add	r3, r2
 800544a:	009b      	lsls	r3, r3, #2
 800544c:	440b      	add	r3, r1
 800544e:	f203 2357 	addw	r3, r3, #599	@ 0x257
 8005452:	2201      	movs	r2, #1
 8005454:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8005456:	6a3b      	ldr	r3, [r7, #32]
 8005458:	699b      	ldr	r3, [r3, #24]
 800545a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 800545e:	6a3b      	ldr	r3, [r7, #32]
 8005460:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8005462:	6a3b      	ldr	r3, [r7, #32]
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800546a:	2b00      	cmp	r3, #0
 800546c:	d10a      	bne.n	8005484 <HAL_PCD_IRQHandler+0x8ae>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800546e:	69fb      	ldr	r3, [r7, #28]
 8005470:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	69fa      	ldr	r2, [r7, #28]
 8005478:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800547c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005480:	6053      	str	r3, [r2, #4]
            break;
 8005482:	e008      	b.n	8005496 <HAL_PCD_IRQHandler+0x8c0>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8005484:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005486:	3301      	adds	r3, #1
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	791b      	ldrb	r3, [r3, #4]
 800548e:	461a      	mov	r2, r3
 8005490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005492:	4293      	cmp	r3, r2
 8005494:	d3b3      	bcc.n	80053fe <HAL_PCD_IRQHandler+0x828>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	695a      	ldr	r2, [r3, #20]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f402 1200 	and.w	r2, r2, #2097152	@ 0x200000
 80054a4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f004 f8d8 	bl	8009660 <USB_ReadInterrupts>
 80054b0:	4603      	mov	r3, r0
 80054b2:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80054b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ba:	d10a      	bne.n	80054d2 <HAL_PCD_IRQHandler+0x8fc>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80054bc:	6878      	ldr	r0, [r7, #4]
 80054be:	f006 fd3f 	bl	800bf40 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	695a      	ldr	r2, [r3, #20]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f002 4280 	and.w	r2, r2, #1073741824	@ 0x40000000
 80054d0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	4618      	mov	r0, r3
 80054d8:	f004 f8c2 	bl	8009660 <USB_ReadInterrupts>
 80054dc:	4603      	mov	r3, r0
 80054de:	f003 0304 	and.w	r3, r3, #4
 80054e2:	2b04      	cmp	r3, #4
 80054e4:	d115      	bne.n	8005512 <HAL_PCD_IRQHandler+0x93c>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	685b      	ldr	r3, [r3, #4]
 80054ec:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80054ee:	69bb      	ldr	r3, [r7, #24]
 80054f0:	f003 0304 	and.w	r3, r3, #4
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_PCD_IRQHandler+0x928>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f006 fd2f 	bl	800bf5c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	6859      	ldr	r1, [r3, #4]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	69ba      	ldr	r2, [r7, #24]
 800550a:	430a      	orrs	r2, r1
 800550c:	605a      	str	r2, [r3, #4]
 800550e:	e000      	b.n	8005512 <HAL_PCD_IRQHandler+0x93c>
      return;
 8005510:	bf00      	nop
    }
  }
}
 8005512:	3734      	adds	r7, #52	@ 0x34
 8005514:	46bd      	mov	sp, r7
 8005516:	bd90      	pop	{r4, r7, pc}

08005518 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8005518:	b580      	push	{r7, lr}
 800551a:	b082      	sub	sp, #8
 800551c:	af00      	add	r7, sp, #0
 800551e:	6078      	str	r0, [r7, #4]
 8005520:	460b      	mov	r3, r1
 8005522:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800552a:	2b01      	cmp	r3, #1
 800552c:	d101      	bne.n	8005532 <HAL_PCD_SetAddress+0x1a>
 800552e:	2302      	movs	r3, #2
 8005530:	e012      	b.n	8005558 <HAL_PCD_SetAddress+0x40>
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	2201      	movs	r2, #1
 8005536:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  hpcd->USB_Address = address;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	78fa      	ldrb	r2, [r7, #3]
 800553e:	745a      	strb	r2, [r3, #17]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	78fa      	ldrb	r2, [r7, #3]
 8005546:	4611      	mov	r1, r2
 8005548:	4618      	mov	r0, r3
 800554a:	f004 f821 	bl	8009590 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2200      	movs	r2, #0
 8005552:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3708      	adds	r7, #8
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}

08005560 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8005560:	b580      	push	{r7, lr}
 8005562:	b084      	sub	sp, #16
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	4608      	mov	r0, r1
 800556a:	4611      	mov	r1, r2
 800556c:	461a      	mov	r2, r3
 800556e:	4603      	mov	r3, r0
 8005570:	70fb      	strb	r3, [r7, #3]
 8005572:	460b      	mov	r3, r1
 8005574:	803b      	strh	r3, [r7, #0]
 8005576:	4613      	mov	r3, r2
 8005578:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef ret = HAL_OK;
 800557a:	2300      	movs	r3, #0
 800557c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800557e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da0f      	bge.n	80055a6 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005586:	78fb      	ldrb	r3, [r7, #3]
 8005588:	f003 020f 	and.w	r2, r3, #15
 800558c:	4613      	mov	r3, r2
 800558e:	00db      	lsls	r3, r3, #3
 8005590:	4413      	add	r3, r2
 8005592:	009b      	lsls	r3, r3, #2
 8005594:	3310      	adds	r3, #16
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	4413      	add	r3, r2
 800559a:	3304      	adds	r3, #4
 800559c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	2201      	movs	r2, #1
 80055a2:	705a      	strb	r2, [r3, #1]
 80055a4:	e00f      	b.n	80055c6 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80055a6:	78fb      	ldrb	r3, [r7, #3]
 80055a8:	f003 020f 	and.w	r2, r3, #15
 80055ac:	4613      	mov	r3, r2
 80055ae:	00db      	lsls	r3, r3, #3
 80055b0:	4413      	add	r3, r2
 80055b2:	009b      	lsls	r3, r3, #2
 80055b4:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80055b8:	687a      	ldr	r2, [r7, #4]
 80055ba:	4413      	add	r3, r2
 80055bc:	3304      	adds	r3, #4
 80055be:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	2200      	movs	r2, #0
 80055c4:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80055c6:	78fb      	ldrb	r3, [r7, #3]
 80055c8:	f003 030f 	and.w	r3, r3, #15
 80055cc:	b2da      	uxtb	r2, r3
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = (uint32_t)ep_mps & 0x7FFU;
 80055d2:	883b      	ldrh	r3, [r7, #0]
 80055d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	609a      	str	r2, [r3, #8]
  ep->type = ep_type;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	78ba      	ldrb	r2, [r7, #2]
 80055e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	785b      	ldrb	r3, [r3, #1]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d004      	beq.n	80055f4 <HAL_PCD_EP_Open+0x94>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	781b      	ldrb	r3, [r3, #0]
 80055ee:	461a      	mov	r2, r3
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	835a      	strh	r2, [r3, #26]
  }

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80055f4:	78bb      	ldrb	r3, [r7, #2]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d102      	bne.n	8005600 <HAL_PCD_EP_Open+0xa0>
  {
    ep->data_pid_start = 0U;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005606:	2b01      	cmp	r3, #1
 8005608:	d101      	bne.n	800560e <HAL_PCD_EP_Open+0xae>
 800560a:	2302      	movs	r3, #2
 800560c:	e00e      	b.n	800562c <HAL_PCD_EP_Open+0xcc>
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2201      	movs	r2, #1
 8005612:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68f9      	ldr	r1, [r7, #12]
 800561c:	4618      	mov	r0, r3
 800561e:	f003 f9a1 	bl	8008964 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return ret;
 800562a:	7afb      	ldrb	r3, [r7, #11]
}
 800562c:	4618      	mov	r0, r3
 800562e:	3710      	adds	r7, #16
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}

08005634 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b084      	sub	sp, #16
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
 800563c:	460b      	mov	r3, r1
 800563e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8005640:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005644:	2b00      	cmp	r3, #0
 8005646:	da0f      	bge.n	8005668 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005648:	78fb      	ldrb	r3, [r7, #3]
 800564a:	f003 020f 	and.w	r2, r3, #15
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	4413      	add	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	3310      	adds	r3, #16
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	4413      	add	r3, r2
 800565c:	3304      	adds	r3, #4
 800565e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2201      	movs	r2, #1
 8005664:	705a      	strb	r2, [r3, #1]
 8005666:	e00f      	b.n	8005688 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005668:	78fb      	ldrb	r3, [r7, #3]
 800566a:	f003 020f 	and.w	r2, r3, #15
 800566e:	4613      	mov	r3, r2
 8005670:	00db      	lsls	r3, r3, #3
 8005672:	4413      	add	r3, r2
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 800567a:	687a      	ldr	r2, [r7, #4]
 800567c:	4413      	add	r3, r2
 800567e:	3304      	adds	r3, #4
 8005680:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	2200      	movs	r2, #0
 8005686:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 8005688:	78fb      	ldrb	r3, [r7, #3]
 800568a:	f003 030f 	and.w	r3, r3, #15
 800568e:	b2da      	uxtb	r2, r3
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <HAL_PCD_EP_Close+0x6e>
 800569e:	2302      	movs	r3, #2
 80056a0:	e00e      	b.n	80056c0 <HAL_PCD_EP_Close+0x8c>
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	2201      	movs	r2, #1
 80056a6:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68f9      	ldr	r1, [r7, #12]
 80056b0:	4618      	mov	r0, r3
 80056b2:	f003 f9df 	bl	8008a74 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  return HAL_OK;
 80056be:	2300      	movs	r3, #0
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b086      	sub	sp, #24
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	60f8      	str	r0, [r7, #12]
 80056d0:	607a      	str	r2, [r7, #4]
 80056d2:	603b      	str	r3, [r7, #0]
 80056d4:	460b      	mov	r3, r1
 80056d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80056d8:	7afb      	ldrb	r3, [r7, #11]
 80056da:	f003 020f 	and.w	r2, r3, #15
 80056de:	4613      	mov	r3, r2
 80056e0:	00db      	lsls	r3, r3, #3
 80056e2:	4413      	add	r3, r2
 80056e4:	009b      	lsls	r3, r3, #2
 80056e6:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 80056ea:	68fa      	ldr	r2, [r7, #12]
 80056ec:	4413      	add	r3, r2
 80056ee:	3304      	adds	r3, #4
 80056f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80056f2:	697b      	ldr	r3, [r7, #20]
 80056f4:	687a      	ldr	r2, [r7, #4]
 80056f6:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	2200      	movs	r2, #0
 8005702:	615a      	str	r2, [r3, #20]
  ep->is_in = 0U;
 8005704:	697b      	ldr	r3, [r7, #20]
 8005706:	2200      	movs	r2, #0
 8005708:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800570a:	7afb      	ldrb	r3, [r7, #11]
 800570c:	f003 030f 	and.w	r3, r3, #15
 8005710:	b2da      	uxtb	r2, r3
 8005712:	697b      	ldr	r3, [r7, #20]
 8005714:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	799b      	ldrb	r3, [r3, #6]
 800571a:	2b01      	cmp	r3, #1
 800571c:	d102      	bne.n	8005724 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800571e:	687a      	ldr	r2, [r7, #4]
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	6818      	ldr	r0, [r3, #0]
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	799b      	ldrb	r3, [r3, #6]
 800572c:	461a      	mov	r2, r3
 800572e:	6979      	ldr	r1, [r7, #20]
 8005730:	f003 fa7c 	bl	8008c2c <USB_EPStartXfer>

  return HAL_OK;
 8005734:	2300      	movs	r3, #0
}
 8005736:	4618      	mov	r0, r3
 8005738:	3718      	adds	r7, #24
 800573a:	46bd      	mov	sp, r7
 800573c:	bd80      	pop	{r7, pc}

0800573e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef const *hpcd, uint8_t ep_addr)
{
 800573e:	b480      	push	{r7}
 8005740:	b083      	sub	sp, #12
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]
 8005746:	460b      	mov	r3, r1
 8005748:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800574a:	78fb      	ldrb	r3, [r7, #3]
 800574c:	f003 020f 	and.w	r2, r3, #15
 8005750:	6879      	ldr	r1, [r7, #4]
 8005752:	4613      	mov	r3, r2
 8005754:	00db      	lsls	r3, r3, #3
 8005756:	4413      	add	r3, r2
 8005758:	009b      	lsls	r3, r3, #2
 800575a:	440b      	add	r3, r1
 800575c:	f503 731a 	add.w	r3, r3, #616	@ 0x268
 8005760:	681b      	ldr	r3, [r3, #0]
}
 8005762:	4618      	mov	r0, r3
 8005764:	370c      	adds	r7, #12
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr

0800576e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800576e:	b580      	push	{r7, lr}
 8005770:	b086      	sub	sp, #24
 8005772:	af00      	add	r7, sp, #0
 8005774:	60f8      	str	r0, [r7, #12]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
 800577a:	460b      	mov	r3, r1
 800577c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800577e:	7afb      	ldrb	r3, [r7, #11]
 8005780:	f003 020f 	and.w	r2, r3, #15
 8005784:	4613      	mov	r3, r2
 8005786:	00db      	lsls	r3, r3, #3
 8005788:	4413      	add	r3, r2
 800578a:	009b      	lsls	r3, r3, #2
 800578c:	3310      	adds	r3, #16
 800578e:	68fa      	ldr	r2, [r7, #12]
 8005790:	4413      	add	r3, r2
 8005792:	3304      	adds	r3, #4
 8005794:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	60da      	str	r2, [r3, #12]
  ep->xfer_len = len;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	683a      	ldr	r2, [r7, #0]
 80057a0:	611a      	str	r2, [r3, #16]
  ep->xfer_count = 0U;
 80057a2:	697b      	ldr	r3, [r7, #20]
 80057a4:	2200      	movs	r2, #0
 80057a6:	615a      	str	r2, [r3, #20]
  ep->is_in = 1U;
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2201      	movs	r2, #1
 80057ac:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80057ae:	7afb      	ldrb	r3, [r7, #11]
 80057b0:	f003 030f 	and.w	r3, r3, #15
 80057b4:	b2da      	uxtb	r2, r3
 80057b6:	697b      	ldr	r3, [r7, #20]
 80057b8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	799b      	ldrb	r3, [r3, #6]
 80057be:	2b01      	cmp	r3, #1
 80057c0:	d102      	bne.n	80057c8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80057c2:	687a      	ldr	r2, [r7, #4]
 80057c4:	697b      	ldr	r3, [r7, #20]
 80057c6:	61da      	str	r2, [r3, #28]
  }

  (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	6818      	ldr	r0, [r3, #0]
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	799b      	ldrb	r3, [r3, #6]
 80057d0:	461a      	mov	r2, r3
 80057d2:	6979      	ldr	r1, [r7, #20]
 80057d4:	f003 fa2a 	bl	8008c2c <USB_EPStartXfer>

  return HAL_OK;
 80057d8:	2300      	movs	r3, #0
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3718      	adds	r7, #24
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b084      	sub	sp, #16
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
 80057ea:	460b      	mov	r3, r1
 80057ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80057ee:	78fb      	ldrb	r3, [r7, #3]
 80057f0:	f003 030f 	and.w	r3, r3, #15
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	7912      	ldrb	r2, [r2, #4]
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80057fc:	2301      	movs	r3, #1
 80057fe:	e04f      	b.n	80058a0 <HAL_PCD_EP_SetStall+0xbe>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8005800:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005804:	2b00      	cmp	r3, #0
 8005806:	da0f      	bge.n	8005828 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005808:	78fb      	ldrb	r3, [r7, #3]
 800580a:	f003 020f 	and.w	r2, r3, #15
 800580e:	4613      	mov	r3, r2
 8005810:	00db      	lsls	r3, r3, #3
 8005812:	4413      	add	r3, r2
 8005814:	009b      	lsls	r3, r3, #2
 8005816:	3310      	adds	r3, #16
 8005818:	687a      	ldr	r2, [r7, #4]
 800581a:	4413      	add	r3, r2
 800581c:	3304      	adds	r3, #4
 800581e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8005820:	68fb      	ldr	r3, [r7, #12]
 8005822:	2201      	movs	r2, #1
 8005824:	705a      	strb	r2, [r3, #1]
 8005826:	e00d      	b.n	8005844 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8005828:	78fa      	ldrb	r2, [r7, #3]
 800582a:	4613      	mov	r3, r2
 800582c:	00db      	lsls	r3, r3, #3
 800582e:	4413      	add	r3, r2
 8005830:	009b      	lsls	r3, r3, #2
 8005832:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005836:	687a      	ldr	r2, [r7, #4]
 8005838:	4413      	add	r3, r2
 800583a:	3304      	adds	r3, #4
 800583c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	2200      	movs	r2, #0
 8005842:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	2201      	movs	r2, #1
 8005848:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800584a:	78fb      	ldrb	r3, [r7, #3]
 800584c:	f003 030f 	and.w	r3, r3, #15
 8005850:	b2da      	uxtb	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_PCD_EP_SetStall+0x82>
 8005860:	2302      	movs	r3, #2
 8005862:	e01d      	b.n	80058a0 <HAL_PCD_EP_SetStall+0xbe>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	68f9      	ldr	r1, [r7, #12]
 8005872:	4618      	mov	r0, r3
 8005874:	f003 fdb8 	bl	80093e8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8005878:	78fb      	ldrb	r3, [r7, #3]
 800587a:	f003 030f 	and.w	r3, r3, #15
 800587e:	2b00      	cmp	r3, #0
 8005880:	d109      	bne.n	8005896 <HAL_PCD_EP_SetStall+0xb4>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	7999      	ldrb	r1, [r3, #6]
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005890:	461a      	mov	r2, r3
 8005892:	f003 ffa9 	bl	80097e8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	2200      	movs	r2, #0
 800589a:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800589e:	2300      	movs	r3, #0
}
 80058a0:	4618      	mov	r0, r3
 80058a2:	3710      	adds	r7, #16
 80058a4:	46bd      	mov	sp, r7
 80058a6:	bd80      	pop	{r7, pc}

080058a8 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80058a8:	b580      	push	{r7, lr}
 80058aa:	b084      	sub	sp, #16
 80058ac:	af00      	add	r7, sp, #0
 80058ae:	6078      	str	r0, [r7, #4]
 80058b0:	460b      	mov	r3, r1
 80058b2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80058b4:	78fb      	ldrb	r3, [r7, #3]
 80058b6:	f003 030f 	and.w	r3, r3, #15
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	7912      	ldrb	r2, [r2, #4]
 80058be:	4293      	cmp	r3, r2
 80058c0:	d901      	bls.n	80058c6 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80058c2:	2301      	movs	r3, #1
 80058c4:	e042      	b.n	800594c <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80058c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	da0f      	bge.n	80058ee <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80058ce:	78fb      	ldrb	r3, [r7, #3]
 80058d0:	f003 020f 	and.w	r2, r3, #15
 80058d4:	4613      	mov	r3, r2
 80058d6:	00db      	lsls	r3, r3, #3
 80058d8:	4413      	add	r3, r2
 80058da:	009b      	lsls	r3, r3, #2
 80058dc:	3310      	adds	r3, #16
 80058de:	687a      	ldr	r2, [r7, #4]
 80058e0:	4413      	add	r3, r2
 80058e2:	3304      	adds	r3, #4
 80058e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2201      	movs	r2, #1
 80058ea:	705a      	strb	r2, [r3, #1]
 80058ec:	e00f      	b.n	800590e <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80058ee:	78fb      	ldrb	r3, [r7, #3]
 80058f0:	f003 020f 	and.w	r2, r3, #15
 80058f4:	4613      	mov	r3, r2
 80058f6:	00db      	lsls	r3, r3, #3
 80058f8:	4413      	add	r3, r2
 80058fa:	009b      	lsls	r3, r3, #2
 80058fc:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005900:	687a      	ldr	r2, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	3304      	adds	r3, #4
 8005906:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	2200      	movs	r2, #0
 800590c:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8005914:	78fb      	ldrb	r3, [r7, #3]
 8005916:	f003 030f 	and.w	r3, r3, #15
 800591a:	b2da      	uxtb	r2, r3
 800591c:	68fb      	ldr	r3, [r7, #12]
 800591e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	f893 3494 	ldrb.w	r3, [r3, #1172]	@ 0x494
 8005926:	2b01      	cmp	r3, #1
 8005928:	d101      	bne.n	800592e <HAL_PCD_EP_ClrStall+0x86>
 800592a:	2302      	movs	r3, #2
 800592c:	e00e      	b.n	800594c <HAL_PCD_EP_ClrStall+0xa4>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	2201      	movs	r2, #1
 8005932:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	68f9      	ldr	r1, [r7, #12]
 800593c:	4618      	mov	r0, r3
 800593e:	f003 fdc1 	bl	80094c4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2200      	movs	r2, #0
 8005946:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3710      	adds	r7, #16
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}

08005954 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b084      	sub	sp, #16
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	460b      	mov	r3, r1
 800595e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8005960:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8005964:	2b00      	cmp	r3, #0
 8005966:	da0c      	bge.n	8005982 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8005968:	78fb      	ldrb	r3, [r7, #3]
 800596a:	f003 020f 	and.w	r2, r3, #15
 800596e:	4613      	mov	r3, r2
 8005970:	00db      	lsls	r3, r3, #3
 8005972:	4413      	add	r3, r2
 8005974:	009b      	lsls	r3, r3, #2
 8005976:	3310      	adds	r3, #16
 8005978:	687a      	ldr	r2, [r7, #4]
 800597a:	4413      	add	r3, r2
 800597c:	3304      	adds	r3, #4
 800597e:	60fb      	str	r3, [r7, #12]
 8005980:	e00c      	b.n	800599c <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8005982:	78fb      	ldrb	r3, [r7, #3]
 8005984:	f003 020f 	and.w	r2, r3, #15
 8005988:	4613      	mov	r3, r2
 800598a:	00db      	lsls	r3, r3, #3
 800598c:	4413      	add	r3, r2
 800598e:	009b      	lsls	r3, r3, #2
 8005990:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005994:	687a      	ldr	r2, [r7, #4]
 8005996:	4413      	add	r3, r2
 8005998:	3304      	adds	r3, #4
 800599a:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	68f9      	ldr	r1, [r7, #12]
 80059a2:	4618      	mov	r0, r3
 80059a4:	f003 fbe0 	bl	8009168 <USB_EPStopXfer>
 80059a8:	4603      	mov	r3, r0
 80059aa:	72fb      	strb	r3, [r7, #11]

  return ret;
 80059ac:	7afb      	ldrb	r3, [r7, #11]
}
 80059ae:	4618      	mov	r0, r3
 80059b0:	3710      	adds	r7, #16
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}

080059b6 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80059b6:	b580      	push	{r7, lr}
 80059b8:	b08a      	sub	sp, #40	@ 0x28
 80059ba:	af02      	add	r7, sp, #8
 80059bc:	6078      	str	r0, [r7, #4]
 80059be:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80059ca:	683a      	ldr	r2, [r7, #0]
 80059cc:	4613      	mov	r3, r2
 80059ce:	00db      	lsls	r3, r3, #3
 80059d0:	4413      	add	r3, r2
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	3310      	adds	r3, #16
 80059d6:	687a      	ldr	r2, [r7, #4]
 80059d8:	4413      	add	r3, r2
 80059da:	3304      	adds	r3, #4
 80059dc:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	695a      	ldr	r2, [r3, #20]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	691b      	ldr	r3, [r3, #16]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d901      	bls.n	80059ee <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e06b      	b.n	8005ac6 <PCD_WriteEmptyTxFifo+0x110>
  }

  len = ep->xfer_len - ep->xfer_count;
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	691a      	ldr	r2, [r3, #16]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	695b      	ldr	r3, [r3, #20]
 80059f6:	1ad3      	subs	r3, r2, r3
 80059f8:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	69fa      	ldr	r2, [r7, #28]
 8005a00:	429a      	cmp	r2, r3
 8005a02:	d902      	bls.n	8005a0a <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8005a0a:	69fb      	ldr	r3, [r7, #28]
 8005a0c:	3303      	adds	r3, #3
 8005a0e:	089b      	lsrs	r3, r3, #2
 8005a10:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a12:	e02a      	b.n	8005a6a <PCD_WriteEmptyTxFifo+0xb4>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	691a      	ldr	r2, [r3, #16]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	695b      	ldr	r3, [r3, #20]
 8005a1c:	1ad3      	subs	r3, r2, r3
 8005a1e:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	69fa      	ldr	r2, [r7, #28]
 8005a26:	429a      	cmp	r2, r3
 8005a28:	d902      	bls.n	8005a30 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	689b      	ldr	r3, [r3, #8]
 8005a2e:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	3303      	adds	r3, #3
 8005a34:	089b      	lsrs	r3, r3, #2
 8005a36:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68d9      	ldr	r1, [r3, #12]
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	b2da      	uxtb	r2, r3
 8005a40:	69fb      	ldr	r3, [r7, #28]
 8005a42:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	799b      	ldrb	r3, [r3, #6]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	4603      	mov	r3, r0
 8005a4c:	6978      	ldr	r0, [r7, #20]
 8005a4e:	f003 fc35 	bl	80092bc <USB_WritePacket>

    ep->xfer_buff  += len;
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	68da      	ldr	r2, [r3, #12]
 8005a56:	69fb      	ldr	r3, [r7, #28]
 8005a58:	441a      	add	r2, r3
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	60da      	str	r2, [r3, #12]
    ep->xfer_count += len;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	695a      	ldr	r2, [r3, #20]
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	441a      	add	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	615a      	str	r2, [r3, #20]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a6a:	683b      	ldr	r3, [r7, #0]
 8005a6c:	015a      	lsls	r2, r3, #5
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	4413      	add	r3, r2
 8005a72:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8005a76:	699b      	ldr	r3, [r3, #24]
 8005a78:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a7a:	69ba      	ldr	r2, [r7, #24]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d809      	bhi.n	8005a94 <PCD_WriteEmptyTxFifo+0xde>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	695a      	ldr	r2, [r3, #20]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	691b      	ldr	r3, [r3, #16]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d203      	bcs.n	8005a94 <PCD_WriteEmptyTxFifo+0xde>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d1bf      	bne.n	8005a14 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	691a      	ldr	r2, [r3, #16]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d811      	bhi.n	8005ac4 <PCD_WriteEmptyTxFifo+0x10e>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8005aa0:	683b      	ldr	r3, [r7, #0]
 8005aa2:	f003 030f 	and.w	r3, r3, #15
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aac:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8005aae:	693b      	ldr	r3, [r7, #16]
 8005ab0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8005ab4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	43db      	mvns	r3, r3
 8005aba:	6939      	ldr	r1, [r7, #16]
 8005abc:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8005ac0:	4013      	ands	r3, r2
 8005ac2:	634b      	str	r3, [r1, #52]	@ 0x34
  }

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3720      	adds	r7, #32
 8005aca:	46bd      	mov	sp, r7
 8005acc:	bd80      	pop	{r7, pc}
	...

08005ad0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b088      	sub	sp, #32
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ae0:	69fb      	ldr	r3, [r7, #28]
 8005ae2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	333c      	adds	r3, #60	@ 0x3c
 8005ae8:	3304      	adds	r3, #4
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005aee:	683b      	ldr	r3, [r7, #0]
 8005af0:	015a      	lsls	r2, r3, #5
 8005af2:	69bb      	ldr	r3, [r7, #24]
 8005af4:	4413      	add	r3, r2
 8005af6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005afa:	689b      	ldr	r3, [r3, #8]
 8005afc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	799b      	ldrb	r3, [r3, #6]
 8005b02:	2b01      	cmp	r3, #1
 8005b04:	d17b      	bne.n	8005bfe <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8005b06:	693b      	ldr	r3, [r7, #16]
 8005b08:	f003 0308 	and.w	r3, r3, #8
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d015      	beq.n	8005b3c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b10:	697b      	ldr	r3, [r7, #20]
 8005b12:	4a61      	ldr	r2, [pc, #388]	@ (8005c98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b14:	4293      	cmp	r3, r2
 8005b16:	f240 80b9 	bls.w	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	f000 80b3 	beq.w	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	015a      	lsls	r2, r3, #5
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	4413      	add	r3, r2
 8005b2e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b32:	461a      	mov	r2, r3
 8005b34:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b38:	6093      	str	r3, [r2, #8]
 8005b3a:	e0a7      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8005b3c:	693b      	ldr	r3, [r7, #16]
 8005b3e:	f003 0320 	and.w	r3, r3, #32
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d009      	beq.n	8005b5a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005b46:	683b      	ldr	r3, [r7, #0]
 8005b48:	015a      	lsls	r2, r3, #5
 8005b4a:	69bb      	ldr	r3, [r7, #24]
 8005b4c:	4413      	add	r3, r2
 8005b4e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b52:	461a      	mov	r2, r3
 8005b54:	2320      	movs	r3, #32
 8005b56:	6093      	str	r3, [r2, #8]
 8005b58:	e098      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8005b5a:	693b      	ldr	r3, [r7, #16]
 8005b5c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	f040 8093 	bne.w	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b66:	697b      	ldr	r3, [r7, #20]
 8005b68:	4a4b      	ldr	r2, [pc, #300]	@ (8005c98 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d90f      	bls.n	8005b8e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005b6e:	693b      	ldr	r3, [r7, #16]
 8005b70:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d00a      	beq.n	8005b8e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005b78:	683b      	ldr	r3, [r7, #0]
 8005b7a:	015a      	lsls	r2, r3, #5
 8005b7c:	69bb      	ldr	r3, [r7, #24]
 8005b7e:	4413      	add	r3, r2
 8005b80:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005b84:	461a      	mov	r2, r3
 8005b86:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005b8a:	6093      	str	r3, [r2, #8]
 8005b8c:	e07e      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8005b8e:	683a      	ldr	r2, [r7, #0]
 8005b90:	4613      	mov	r3, r2
 8005b92:	00db      	lsls	r3, r3, #3
 8005b94:	4413      	add	r3, r2
 8005b96:	009b      	lsls	r3, r3, #2
 8005b98:	f503 7314 	add.w	r3, r3, #592	@ 0x250
 8005b9c:	687a      	ldr	r2, [r7, #4]
 8005b9e:	4413      	add	r3, r2
 8005ba0:	3304      	adds	r3, #4
 8005ba2:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	6a1a      	ldr	r2, [r3, #32]
 8005ba8:	683b      	ldr	r3, [r7, #0]
 8005baa:	0159      	lsls	r1, r3, #5
 8005bac:	69bb      	ldr	r3, [r7, #24]
 8005bae:	440b      	add	r3, r1
 8005bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005bb4:	691b      	ldr	r3, [r3, #16]
 8005bb6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005bba:	1ad2      	subs	r2, r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	615a      	str	r2, [r3, #20]

        if (epnum == 0U)
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d114      	bne.n	8005bf0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d109      	bne.n	8005be2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6818      	ldr	r0, [r3, #0]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005bd8:	461a      	mov	r2, r3
 8005bda:	2101      	movs	r1, #1
 8005bdc:	f003 fe04 	bl	80097e8 <USB_EP0_OutStart>
 8005be0:	e006      	b.n	8005bf0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	68da      	ldr	r2, [r3, #12]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	695b      	ldr	r3, [r3, #20]
 8005bea:	441a      	add	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	60da      	str	r2, [r3, #12]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	4619      	mov	r1, r3
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f006 f8e8 	bl	800bdcc <HAL_PCD_DataOutStageCallback>
 8005bfc:	e046      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8005bfe:	697b      	ldr	r3, [r7, #20]
 8005c00:	4a26      	ldr	r2, [pc, #152]	@ (8005c9c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d124      	bne.n	8005c50 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8005c06:	693b      	ldr	r3, [r7, #16]
 8005c08:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d00a      	beq.n	8005c26 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005c10:	683b      	ldr	r3, [r7, #0]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	69bb      	ldr	r3, [r7, #24]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005c22:	6093      	str	r3, [r2, #8]
 8005c24:	e032      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8005c26:	693b      	ldr	r3, [r7, #16]
 8005c28:	f003 0320 	and.w	r3, r3, #32
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d008      	beq.n	8005c42 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8005c30:	683b      	ldr	r3, [r7, #0]
 8005c32:	015a      	lsls	r2, r3, #5
 8005c34:	69bb      	ldr	r3, [r7, #24]
 8005c36:	4413      	add	r3, r2
 8005c38:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005c3c:	461a      	mov	r2, r3
 8005c3e:	2320      	movs	r3, #32
 8005c40:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	4619      	mov	r1, r3
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f006 f8bf 	bl	800bdcc <HAL_PCD_DataOutStageCallback>
 8005c4e:	e01d      	b.n	8005c8c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d114      	bne.n	8005c80 <PCD_EP_OutXfrComplete_int+0x1b0>
 8005c56:	6879      	ldr	r1, [r7, #4]
 8005c58:	683a      	ldr	r2, [r7, #0]
 8005c5a:	4613      	mov	r3, r2
 8005c5c:	00db      	lsls	r3, r3, #3
 8005c5e:	4413      	add	r3, r2
 8005c60:	009b      	lsls	r3, r3, #2
 8005c62:	440b      	add	r3, r1
 8005c64:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d108      	bne.n	8005c80 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6818      	ldr	r0, [r3, #0]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005c78:	461a      	mov	r2, r3
 8005c7a:	2100      	movs	r1, #0
 8005c7c:	f003 fdb4 	bl	80097e8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	4619      	mov	r1, r3
 8005c86:	6878      	ldr	r0, [r7, #4]
 8005c88:	f006 f8a0 	bl	800bdcc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8005c8c:	2300      	movs	r3, #0
}
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3720      	adds	r7, #32
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}
 8005c96:	bf00      	nop
 8005c98:	4f54300a 	.word	0x4f54300a
 8005c9c:	4f54310a 	.word	0x4f54310a

08005ca0 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b086      	sub	sp, #24
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	6078      	str	r0, [r7, #4]
 8005ca8:	6039      	str	r1, [r7, #0]
  const USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	333c      	adds	r3, #60	@ 0x3c
 8005cb8:	3304      	adds	r3, #4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	015a      	lsls	r2, r3, #5
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4a15      	ldr	r2, [pc, #84]	@ (8005d28 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cd2:	4293      	cmp	r3, r2
 8005cd4:	d90e      	bls.n	8005cf4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d009      	beq.n	8005cf4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	015a      	lsls	r2, r3, #5
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	4413      	add	r3, r2
 8005ce8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8005cec:	461a      	mov	r2, r3
 8005cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8005cf2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8005cf4:	6878      	ldr	r0, [r7, #4]
 8005cf6:	f006 f857 	bl	800bda8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	4a0a      	ldr	r2, [pc, #40]	@ (8005d28 <PCD_EP_OutSetupPacket_int+0x88>)
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	d90c      	bls.n	8005d1c <PCD_EP_OutSetupPacket_int+0x7c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	799b      	ldrb	r3, [r3, #6]
 8005d06:	2b01      	cmp	r3, #1
 8005d08:	d108      	bne.n	8005d1c <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	6818      	ldr	r0, [r3, #0]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 8005d14:	461a      	mov	r2, r3
 8005d16:	2101      	movs	r1, #1
 8005d18:	f003 fd66 	bl	80097e8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8005d1c:	2300      	movs	r3, #0
}
 8005d1e:	4618      	mov	r0, r3
 8005d20:	3718      	adds	r7, #24
 8005d22:	46bd      	mov	sp, r7
 8005d24:	bd80      	pop	{r7, pc}
 8005d26:	bf00      	nop
 8005d28:	4f54300a 	.word	0x4f54300a

08005d2c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b085      	sub	sp, #20
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
 8005d34:	460b      	mov	r3, r1
 8005d36:	70fb      	strb	r3, [r7, #3]
 8005d38:	4613      	mov	r3, r2
 8005d3a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d42:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8005d44:	78fb      	ldrb	r3, [r7, #3]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d107      	bne.n	8005d5a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8005d4a:	883b      	ldrh	r3, [r7, #0]
 8005d4c:	0419      	lsls	r1, r3, #16
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68ba      	ldr	r2, [r7, #8]
 8005d54:	430a      	orrs	r2, r1
 8005d56:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d58:	e028      	b.n	8005dac <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d60:	0c1b      	lsrs	r3, r3, #16
 8005d62:	68ba      	ldr	r2, [r7, #8]
 8005d64:	4413      	add	r3, r2
 8005d66:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d68:	2300      	movs	r3, #0
 8005d6a:	73fb      	strb	r3, [r7, #15]
 8005d6c:	e00d      	b.n	8005d8a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681a      	ldr	r2, [r3, #0]
 8005d72:	7bfb      	ldrb	r3, [r7, #15]
 8005d74:	3340      	adds	r3, #64	@ 0x40
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	685b      	ldr	r3, [r3, #4]
 8005d7c:	0c1b      	lsrs	r3, r3, #16
 8005d7e:	68ba      	ldr	r2, [r7, #8]
 8005d80:	4413      	add	r3, r2
 8005d82:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8005d84:	7bfb      	ldrb	r3, [r7, #15]
 8005d86:	3301      	adds	r3, #1
 8005d88:	73fb      	strb	r3, [r7, #15]
 8005d8a:	7bfa      	ldrb	r2, [r7, #15]
 8005d8c:	78fb      	ldrb	r3, [r7, #3]
 8005d8e:	3b01      	subs	r3, #1
 8005d90:	429a      	cmp	r2, r3
 8005d92:	d3ec      	bcc.n	8005d6e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8005d94:	883b      	ldrh	r3, [r7, #0]
 8005d96:	0418      	lsls	r0, r3, #16
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6819      	ldr	r1, [r3, #0]
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	3b01      	subs	r3, #1
 8005da0:	68ba      	ldr	r2, [r7, #8]
 8005da2:	4302      	orrs	r2, r0
 8005da4:	3340      	adds	r3, #64	@ 0x40
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	440b      	add	r3, r1
 8005daa:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr

08005dba <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8005dba:	b480      	push	{r7}
 8005dbc:	b083      	sub	sp, #12
 8005dbe:	af00      	add	r7, sp, #0
 8005dc0:	6078      	str	r0, [r7, #4]
 8005dc2:	460b      	mov	r3, r1
 8005dc4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	887a      	ldrh	r2, [r7, #2]
 8005dcc:	625a      	str	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 8005dce:	2300      	movs	r3, #0
}
 8005dd0:	4618      	mov	r0, r3
 8005dd2:	370c      	adds	r7, #12
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dda:	4770      	bx	lr

08005ddc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8005ddc:	b480      	push	{r7}
 8005dde:	b083      	sub	sp, #12
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
 8005de4:	460b      	mov	r3, r1
 8005de6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8005de8:	bf00      	nop
 8005dea:	370c      	adds	r7, #12
 8005dec:	46bd      	mov	sp, r7
 8005dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df2:	4770      	bx	lr

08005df4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b086      	sub	sp, #24
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d101      	bne.n	8005e06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005e02:	2301      	movs	r3, #1
 8005e04:	e267      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d075      	beq.n	8005efe <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e12:	4b88      	ldr	r3, [pc, #544]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	f003 030c 	and.w	r3, r3, #12
 8005e1a:	2b04      	cmp	r3, #4
 8005e1c:	d00c      	beq.n	8005e38 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e1e:	4b85      	ldr	r3, [pc, #532]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005e26:	2b08      	cmp	r3, #8
 8005e28:	d112      	bne.n	8005e50 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005e2a:	4b82      	ldr	r3, [pc, #520]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e2c:	685b      	ldr	r3, [r3, #4]
 8005e2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005e32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005e36:	d10b      	bne.n	8005e50 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e38:	4b7e      	ldr	r3, [pc, #504]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d05b      	beq.n	8005efc <HAL_RCC_OscConfig+0x108>
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	685b      	ldr	r3, [r3, #4]
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d157      	bne.n	8005efc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e242      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	685b      	ldr	r3, [r3, #4]
 8005e54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005e58:	d106      	bne.n	8005e68 <HAL_RCC_OscConfig+0x74>
 8005e5a:	4b76      	ldr	r3, [pc, #472]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	4a75      	ldr	r2, [pc, #468]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e64:	6013      	str	r3, [r2, #0]
 8005e66:	e01d      	b.n	8005ea4 <HAL_RCC_OscConfig+0xb0>
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005e70:	d10c      	bne.n	8005e8c <HAL_RCC_OscConfig+0x98>
 8005e72:	4b70      	ldr	r3, [pc, #448]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	4a6f      	ldr	r2, [pc, #444]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	4b6d      	ldr	r3, [pc, #436]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a6c      	ldr	r2, [pc, #432]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005e88:	6013      	str	r3, [r2, #0]
 8005e8a:	e00b      	b.n	8005ea4 <HAL_RCC_OscConfig+0xb0>
 8005e8c:	4b69      	ldr	r3, [pc, #420]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4a68      	ldr	r2, [pc, #416]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005e96:	6013      	str	r3, [r2, #0]
 8005e98:	4b66      	ldr	r3, [pc, #408]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	4a65      	ldr	r2, [pc, #404]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005e9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005ea2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d013      	beq.n	8005ed4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005eac:	f7fe f9c4 	bl	8004238 <HAL_GetTick>
 8005eb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005eb2:	e008      	b.n	8005ec6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005eb4:	f7fe f9c0 	bl	8004238 <HAL_GetTick>
 8005eb8:	4602      	mov	r2, r0
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	1ad3      	subs	r3, r2, r3
 8005ebe:	2b64      	cmp	r3, #100	@ 0x64
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e207      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005ec6:	4b5b      	ldr	r3, [pc, #364]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d0f0      	beq.n	8005eb4 <HAL_RCC_OscConfig+0xc0>
 8005ed2:	e014      	b.n	8005efe <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005ed4:	f7fe f9b0 	bl	8004238 <HAL_GetTick>
 8005ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eda:	e008      	b.n	8005eee <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005edc:	f7fe f9ac 	bl	8004238 <HAL_GetTick>
 8005ee0:	4602      	mov	r2, r0
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	1ad3      	subs	r3, r2, r3
 8005ee6:	2b64      	cmp	r3, #100	@ 0x64
 8005ee8:	d901      	bls.n	8005eee <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e1f3      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005eee:	4b51      	ldr	r3, [pc, #324]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d1f0      	bne.n	8005edc <HAL_RCC_OscConfig+0xe8>
 8005efa:	e000      	b.n	8005efe <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005efc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f003 0302 	and.w	r3, r3, #2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d063      	beq.n	8005fd2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f0a:	4b4a      	ldr	r3, [pc, #296]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f0c:	689b      	ldr	r3, [r3, #8]
 8005f0e:	f003 030c 	and.w	r3, r3, #12
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d00b      	beq.n	8005f2e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f16:	4b47      	ldr	r3, [pc, #284]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f18:	689b      	ldr	r3, [r3, #8]
 8005f1a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8005f1e:	2b08      	cmp	r3, #8
 8005f20:	d11c      	bne.n	8005f5c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005f22:	4b44      	ldr	r3, [pc, #272]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f24:	685b      	ldr	r3, [r3, #4]
 8005f26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d116      	bne.n	8005f5c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f2e:	4b41      	ldr	r3, [pc, #260]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0302 	and.w	r3, r3, #2
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d005      	beq.n	8005f46 <HAL_RCC_OscConfig+0x152>
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	68db      	ldr	r3, [r3, #12]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d001      	beq.n	8005f46 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e1c7      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f46:	4b3b      	ldr	r3, [pc, #236]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	00db      	lsls	r3, r3, #3
 8005f54:	4937      	ldr	r1, [pc, #220]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f56:	4313      	orrs	r3, r2
 8005f58:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005f5a:	e03a      	b.n	8005fd2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	68db      	ldr	r3, [r3, #12]
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d020      	beq.n	8005fa6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005f64:	4b34      	ldr	r3, [pc, #208]	@ (8006038 <HAL_RCC_OscConfig+0x244>)
 8005f66:	2201      	movs	r2, #1
 8005f68:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005f6a:	f7fe f965 	bl	8004238 <HAL_GetTick>
 8005f6e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f70:	e008      	b.n	8005f84 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005f72:	f7fe f961 	bl	8004238 <HAL_GetTick>
 8005f76:	4602      	mov	r2, r0
 8005f78:	693b      	ldr	r3, [r7, #16]
 8005f7a:	1ad3      	subs	r3, r2, r3
 8005f7c:	2b02      	cmp	r3, #2
 8005f7e:	d901      	bls.n	8005f84 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005f80:	2303      	movs	r3, #3
 8005f82:	e1a8      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005f84:	4b2b      	ldr	r3, [pc, #172]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f003 0302 	and.w	r3, r3, #2
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d0f0      	beq.n	8005f72 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005f90:	4b28      	ldr	r3, [pc, #160]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	691b      	ldr	r3, [r3, #16]
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	4925      	ldr	r1, [pc, #148]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	600b      	str	r3, [r1, #0]
 8005fa4:	e015      	b.n	8005fd2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005fa6:	4b24      	ldr	r3, [pc, #144]	@ (8006038 <HAL_RCC_OscConfig+0x244>)
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fac:	f7fe f944 	bl	8004238 <HAL_GetTick>
 8005fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fb2:	e008      	b.n	8005fc6 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005fb4:	f7fe f940 	bl	8004238 <HAL_GetTick>
 8005fb8:	4602      	mov	r2, r0
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	1ad3      	subs	r3, r2, r3
 8005fbe:	2b02      	cmp	r3, #2
 8005fc0:	d901      	bls.n	8005fc6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e187      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005fc6:	4b1b      	ldr	r3, [pc, #108]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f003 0302 	and.w	r3, r3, #2
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d1f0      	bne.n	8005fb4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	f003 0308 	and.w	r3, r3, #8
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d036      	beq.n	800604c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	695b      	ldr	r3, [r3, #20]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d016      	beq.n	8006014 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005fe6:	4b15      	ldr	r3, [pc, #84]	@ (800603c <HAL_RCC_OscConfig+0x248>)
 8005fe8:	2201      	movs	r2, #1
 8005fea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fec:	f7fe f924 	bl	8004238 <HAL_GetTick>
 8005ff0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ff2:	e008      	b.n	8006006 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005ff4:	f7fe f920 	bl	8004238 <HAL_GetTick>
 8005ff8:	4602      	mov	r2, r0
 8005ffa:	693b      	ldr	r3, [r7, #16]
 8005ffc:	1ad3      	subs	r3, r2, r3
 8005ffe:	2b02      	cmp	r3, #2
 8006000:	d901      	bls.n	8006006 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006002:	2303      	movs	r3, #3
 8006004:	e167      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006006:	4b0b      	ldr	r3, [pc, #44]	@ (8006034 <HAL_RCC_OscConfig+0x240>)
 8006008:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800600a:	f003 0302 	and.w	r3, r3, #2
 800600e:	2b00      	cmp	r3, #0
 8006010:	d0f0      	beq.n	8005ff4 <HAL_RCC_OscConfig+0x200>
 8006012:	e01b      	b.n	800604c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006014:	4b09      	ldr	r3, [pc, #36]	@ (800603c <HAL_RCC_OscConfig+0x248>)
 8006016:	2200      	movs	r2, #0
 8006018:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800601a:	f7fe f90d 	bl	8004238 <HAL_GetTick>
 800601e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006020:	e00e      	b.n	8006040 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006022:	f7fe f909 	bl	8004238 <HAL_GetTick>
 8006026:	4602      	mov	r2, r0
 8006028:	693b      	ldr	r3, [r7, #16]
 800602a:	1ad3      	subs	r3, r2, r3
 800602c:	2b02      	cmp	r3, #2
 800602e:	d907      	bls.n	8006040 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006030:	2303      	movs	r3, #3
 8006032:	e150      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
 8006034:	40023800 	.word	0x40023800
 8006038:	42470000 	.word	0x42470000
 800603c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006040:	4b88      	ldr	r3, [pc, #544]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006042:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006044:	f003 0302 	and.w	r3, r3, #2
 8006048:	2b00      	cmp	r3, #0
 800604a:	d1ea      	bne.n	8006022 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0304 	and.w	r3, r3, #4
 8006054:	2b00      	cmp	r3, #0
 8006056:	f000 8097 	beq.w	8006188 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800605a:	2300      	movs	r3, #0
 800605c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800605e:	4b81      	ldr	r3, [pc, #516]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006062:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006066:	2b00      	cmp	r3, #0
 8006068:	d10f      	bne.n	800608a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800606a:	2300      	movs	r3, #0
 800606c:	60bb      	str	r3, [r7, #8]
 800606e:	4b7d      	ldr	r3, [pc, #500]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	4a7c      	ldr	r2, [pc, #496]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006074:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006078:	6413      	str	r3, [r2, #64]	@ 0x40
 800607a:	4b7a      	ldr	r3, [pc, #488]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800607c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800607e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006082:	60bb      	str	r3, [r7, #8]
 8006084:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006086:	2301      	movs	r3, #1
 8006088:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800608a:	4b77      	ldr	r3, [pc, #476]	@ (8006268 <HAL_RCC_OscConfig+0x474>)
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006092:	2b00      	cmp	r3, #0
 8006094:	d118      	bne.n	80060c8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006096:	4b74      	ldr	r3, [pc, #464]	@ (8006268 <HAL_RCC_OscConfig+0x474>)
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	4a73      	ldr	r2, [pc, #460]	@ (8006268 <HAL_RCC_OscConfig+0x474>)
 800609c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80060a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80060a2:	f7fe f8c9 	bl	8004238 <HAL_GetTick>
 80060a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060a8:	e008      	b.n	80060bc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80060aa:	f7fe f8c5 	bl	8004238 <HAL_GetTick>
 80060ae:	4602      	mov	r2, r0
 80060b0:	693b      	ldr	r3, [r7, #16]
 80060b2:	1ad3      	subs	r3, r2, r3
 80060b4:	2b02      	cmp	r3, #2
 80060b6:	d901      	bls.n	80060bc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e10c      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80060bc:	4b6a      	ldr	r3, [pc, #424]	@ (8006268 <HAL_RCC_OscConfig+0x474>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d0f0      	beq.n	80060aa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	689b      	ldr	r3, [r3, #8]
 80060cc:	2b01      	cmp	r3, #1
 80060ce:	d106      	bne.n	80060de <HAL_RCC_OscConfig+0x2ea>
 80060d0:	4b64      	ldr	r3, [pc, #400]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060d4:	4a63      	ldr	r2, [pc, #396]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060d6:	f043 0301 	orr.w	r3, r3, #1
 80060da:	6713      	str	r3, [r2, #112]	@ 0x70
 80060dc:	e01c      	b.n	8006118 <HAL_RCC_OscConfig+0x324>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	689b      	ldr	r3, [r3, #8]
 80060e2:	2b05      	cmp	r3, #5
 80060e4:	d10c      	bne.n	8006100 <HAL_RCC_OscConfig+0x30c>
 80060e6:	4b5f      	ldr	r3, [pc, #380]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060ea:	4a5e      	ldr	r2, [pc, #376]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060ec:	f043 0304 	orr.w	r3, r3, #4
 80060f0:	6713      	str	r3, [r2, #112]	@ 0x70
 80060f2:	4b5c      	ldr	r3, [pc, #368]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80060f6:	4a5b      	ldr	r2, [pc, #364]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80060f8:	f043 0301 	orr.w	r3, r3, #1
 80060fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80060fe:	e00b      	b.n	8006118 <HAL_RCC_OscConfig+0x324>
 8006100:	4b58      	ldr	r3, [pc, #352]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006102:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006104:	4a57      	ldr	r2, [pc, #348]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006106:	f023 0301 	bic.w	r3, r3, #1
 800610a:	6713      	str	r3, [r2, #112]	@ 0x70
 800610c:	4b55      	ldr	r3, [pc, #340]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800610e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006110:	4a54      	ldr	r2, [pc, #336]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006112:	f023 0304 	bic.w	r3, r3, #4
 8006116:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	689b      	ldr	r3, [r3, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d015      	beq.n	800614c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006120:	f7fe f88a 	bl	8004238 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006126:	e00a      	b.n	800613e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006128:	f7fe f886 	bl	8004238 <HAL_GetTick>
 800612c:	4602      	mov	r2, r0
 800612e:	693b      	ldr	r3, [r7, #16]
 8006130:	1ad3      	subs	r3, r2, r3
 8006132:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006136:	4293      	cmp	r3, r2
 8006138:	d901      	bls.n	800613e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	e0cb      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800613e:	4b49      	ldr	r3, [pc, #292]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006140:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006142:	f003 0302 	and.w	r3, r3, #2
 8006146:	2b00      	cmp	r3, #0
 8006148:	d0ee      	beq.n	8006128 <HAL_RCC_OscConfig+0x334>
 800614a:	e014      	b.n	8006176 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800614c:	f7fe f874 	bl	8004238 <HAL_GetTick>
 8006150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006152:	e00a      	b.n	800616a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006154:	f7fe f870 	bl	8004238 <HAL_GetTick>
 8006158:	4602      	mov	r2, r0
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006162:	4293      	cmp	r3, r2
 8006164:	d901      	bls.n	800616a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006166:	2303      	movs	r3, #3
 8006168:	e0b5      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800616a:	4b3e      	ldr	r3, [pc, #248]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800616c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800616e:	f003 0302 	and.w	r3, r3, #2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d1ee      	bne.n	8006154 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006176:	7dfb      	ldrb	r3, [r7, #23]
 8006178:	2b01      	cmp	r3, #1
 800617a:	d105      	bne.n	8006188 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800617c:	4b39      	ldr	r3, [pc, #228]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800617e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006180:	4a38      	ldr	r2, [pc, #224]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006182:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006186:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	f000 80a1 	beq.w	80062d4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006192:	4b34      	ldr	r3, [pc, #208]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	f003 030c 	and.w	r3, r3, #12
 800619a:	2b08      	cmp	r3, #8
 800619c:	d05c      	beq.n	8006258 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	699b      	ldr	r3, [r3, #24]
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d141      	bne.n	800622a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80061a6:	4b31      	ldr	r3, [pc, #196]	@ (800626c <HAL_RCC_OscConfig+0x478>)
 80061a8:	2200      	movs	r2, #0
 80061aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80061ac:	f7fe f844 	bl	8004238 <HAL_GetTick>
 80061b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061b2:	e008      	b.n	80061c6 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061b4:	f7fe f840 	bl	8004238 <HAL_GetTick>
 80061b8:	4602      	mov	r2, r0
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	1ad3      	subs	r3, r2, r3
 80061be:	2b02      	cmp	r3, #2
 80061c0:	d901      	bls.n	80061c6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80061c2:	2303      	movs	r3, #3
 80061c4:	e087      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80061c6:	4b27      	ldr	r3, [pc, #156]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d1f0      	bne.n	80061b4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	69da      	ldr	r2, [r3, #28]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	6a1b      	ldr	r3, [r3, #32]
 80061da:	431a      	orrs	r2, r3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061e0:	019b      	lsls	r3, r3, #6
 80061e2:	431a      	orrs	r2, r3
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e8:	085b      	lsrs	r3, r3, #1
 80061ea:	3b01      	subs	r3, #1
 80061ec:	041b      	lsls	r3, r3, #16
 80061ee:	431a      	orrs	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061f4:	061b      	lsls	r3, r3, #24
 80061f6:	491b      	ldr	r1, [pc, #108]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 80061f8:	4313      	orrs	r3, r2
 80061fa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80061fc:	4b1b      	ldr	r3, [pc, #108]	@ (800626c <HAL_RCC_OscConfig+0x478>)
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006202:	f7fe f819 	bl	8004238 <HAL_GetTick>
 8006206:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006208:	e008      	b.n	800621c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800620a:	f7fe f815 	bl	8004238 <HAL_GetTick>
 800620e:	4602      	mov	r2, r0
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	1ad3      	subs	r3, r2, r3
 8006214:	2b02      	cmp	r3, #2
 8006216:	d901      	bls.n	800621c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006218:	2303      	movs	r3, #3
 800621a:	e05c      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800621c:	4b11      	ldr	r3, [pc, #68]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006224:	2b00      	cmp	r3, #0
 8006226:	d0f0      	beq.n	800620a <HAL_RCC_OscConfig+0x416>
 8006228:	e054      	b.n	80062d4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800622a:	4b10      	ldr	r3, [pc, #64]	@ (800626c <HAL_RCC_OscConfig+0x478>)
 800622c:	2200      	movs	r2, #0
 800622e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006230:	f7fe f802 	bl	8004238 <HAL_GetTick>
 8006234:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006236:	e008      	b.n	800624a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006238:	f7fd fffe 	bl	8004238 <HAL_GetTick>
 800623c:	4602      	mov	r2, r0
 800623e:	693b      	ldr	r3, [r7, #16]
 8006240:	1ad3      	subs	r3, r2, r3
 8006242:	2b02      	cmp	r3, #2
 8006244:	d901      	bls.n	800624a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006246:	2303      	movs	r3, #3
 8006248:	e045      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800624a:	4b06      	ldr	r3, [pc, #24]	@ (8006264 <HAL_RCC_OscConfig+0x470>)
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d1f0      	bne.n	8006238 <HAL_RCC_OscConfig+0x444>
 8006256:	e03d      	b.n	80062d4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	699b      	ldr	r3, [r3, #24]
 800625c:	2b01      	cmp	r3, #1
 800625e:	d107      	bne.n	8006270 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006260:	2301      	movs	r3, #1
 8006262:	e038      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
 8006264:	40023800 	.word	0x40023800
 8006268:	40007000 	.word	0x40007000
 800626c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006270:	4b1b      	ldr	r3, [pc, #108]	@ (80062e0 <HAL_RCC_OscConfig+0x4ec>)
 8006272:	685b      	ldr	r3, [r3, #4]
 8006274:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	2b01      	cmp	r3, #1
 800627c:	d028      	beq.n	80062d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006288:	429a      	cmp	r2, r3
 800628a:	d121      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006296:	429a      	cmp	r2, r3
 8006298:	d11a      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800629a:	68fa      	ldr	r2, [r7, #12]
 800629c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80062a0:	4013      	ands	r3, r2
 80062a2:	687a      	ldr	r2, [r7, #4]
 80062a4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80062a6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d111      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80062b6:	085b      	lsrs	r3, r3, #1
 80062b8:	3b01      	subs	r3, #1
 80062ba:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80062bc:	429a      	cmp	r2, r3
 80062be:	d107      	bne.n	80062d0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ca:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d001      	beq.n	80062d4 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	e000      	b.n	80062d6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80062d4:	2300      	movs	r3, #0
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	3718      	adds	r7, #24
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}
 80062de:	bf00      	nop
 80062e0:	40023800 	.word	0x40023800

080062e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b084      	sub	sp, #16
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e0cc      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80062f8:	4b68      	ldr	r3, [pc, #416]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	f003 0307 	and.w	r3, r3, #7
 8006300:	683a      	ldr	r2, [r7, #0]
 8006302:	429a      	cmp	r2, r3
 8006304:	d90c      	bls.n	8006320 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006306:	4b65      	ldr	r3, [pc, #404]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 8006308:	683a      	ldr	r2, [r7, #0]
 800630a:	b2d2      	uxtb	r2, r2
 800630c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800630e:	4b63      	ldr	r3, [pc, #396]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	f003 0307 	and.w	r3, r3, #7
 8006316:	683a      	ldr	r2, [r7, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	d001      	beq.n	8006320 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800631c:	2301      	movs	r3, #1
 800631e:	e0b8      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	f003 0302 	and.w	r3, r3, #2
 8006328:	2b00      	cmp	r3, #0
 800632a:	d020      	beq.n	800636e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	f003 0304 	and.w	r3, r3, #4
 8006334:	2b00      	cmp	r3, #0
 8006336:	d005      	beq.n	8006344 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006338:	4b59      	ldr	r3, [pc, #356]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	4a58      	ldr	r2, [pc, #352]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 800633e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006342:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	f003 0308 	and.w	r3, r3, #8
 800634c:	2b00      	cmp	r3, #0
 800634e:	d005      	beq.n	800635c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006350:	4b53      	ldr	r3, [pc, #332]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	4a52      	ldr	r2, [pc, #328]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006356:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800635a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800635c:	4b50      	ldr	r3, [pc, #320]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	494d      	ldr	r1, [pc, #308]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 800636a:	4313      	orrs	r3, r2
 800636c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f003 0301 	and.w	r3, r3, #1
 8006376:	2b00      	cmp	r3, #0
 8006378:	d044      	beq.n	8006404 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	685b      	ldr	r3, [r3, #4]
 800637e:	2b01      	cmp	r3, #1
 8006380:	d107      	bne.n	8006392 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006382:	4b47      	ldr	r3, [pc, #284]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800638a:	2b00      	cmp	r3, #0
 800638c:	d119      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800638e:	2301      	movs	r3, #1
 8006390:	e07f      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	2b02      	cmp	r3, #2
 8006398:	d003      	beq.n	80063a2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800639e:	2b03      	cmp	r3, #3
 80063a0:	d107      	bne.n	80063b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80063a2:	4b3f      	ldr	r3, [pc, #252]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d109      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063ae:	2301      	movs	r3, #1
 80063b0:	e06f      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80063b2:	4b3b      	ldr	r3, [pc, #236]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	f003 0302 	and.w	r3, r3, #2
 80063ba:	2b00      	cmp	r3, #0
 80063bc:	d101      	bne.n	80063c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80063be:	2301      	movs	r3, #1
 80063c0:	e067      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80063c2:	4b37      	ldr	r3, [pc, #220]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 80063c4:	689b      	ldr	r3, [r3, #8]
 80063c6:	f023 0203 	bic.w	r2, r3, #3
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	4934      	ldr	r1, [pc, #208]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 80063d0:	4313      	orrs	r3, r2
 80063d2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80063d4:	f7fd ff30 	bl	8004238 <HAL_GetTick>
 80063d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063da:	e00a      	b.n	80063f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063dc:	f7fd ff2c 	bl	8004238 <HAL_GetTick>
 80063e0:	4602      	mov	r2, r0
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	1ad3      	subs	r3, r2, r3
 80063e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d901      	bls.n	80063f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80063ee:	2303      	movs	r3, #3
 80063f0:	e04f      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80063f2:	4b2b      	ldr	r3, [pc, #172]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	f003 020c 	and.w	r2, r3, #12
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	685b      	ldr	r3, [r3, #4]
 80063fe:	009b      	lsls	r3, r3, #2
 8006400:	429a      	cmp	r2, r3
 8006402:	d1eb      	bne.n	80063dc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006404:	4b25      	ldr	r3, [pc, #148]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f003 0307 	and.w	r3, r3, #7
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	429a      	cmp	r2, r3
 8006410:	d20c      	bcs.n	800642c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006412:	4b22      	ldr	r3, [pc, #136]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 8006414:	683a      	ldr	r2, [r7, #0]
 8006416:	b2d2      	uxtb	r2, r2
 8006418:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800641a:	4b20      	ldr	r3, [pc, #128]	@ (800649c <HAL_RCC_ClockConfig+0x1b8>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f003 0307 	and.w	r3, r3, #7
 8006422:	683a      	ldr	r2, [r7, #0]
 8006424:	429a      	cmp	r2, r3
 8006426:	d001      	beq.n	800642c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006428:	2301      	movs	r3, #1
 800642a:	e032      	b.n	8006492 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	f003 0304 	and.w	r3, r3, #4
 8006434:	2b00      	cmp	r3, #0
 8006436:	d008      	beq.n	800644a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006438:	4b19      	ldr	r3, [pc, #100]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 800643a:	689b      	ldr	r3, [r3, #8]
 800643c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	4916      	ldr	r1, [pc, #88]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006446:	4313      	orrs	r3, r2
 8006448:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	f003 0308 	and.w	r3, r3, #8
 8006452:	2b00      	cmp	r3, #0
 8006454:	d009      	beq.n	800646a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006456:	4b12      	ldr	r3, [pc, #72]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	691b      	ldr	r3, [r3, #16]
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	490e      	ldr	r1, [pc, #56]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006466:	4313      	orrs	r3, r2
 8006468:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800646a:	f000 f821 	bl	80064b0 <HAL_RCC_GetSysClockFreq>
 800646e:	4602      	mov	r2, r0
 8006470:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <HAL_RCC_ClockConfig+0x1bc>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	091b      	lsrs	r3, r3, #4
 8006476:	f003 030f 	and.w	r3, r3, #15
 800647a:	490a      	ldr	r1, [pc, #40]	@ (80064a4 <HAL_RCC_ClockConfig+0x1c0>)
 800647c:	5ccb      	ldrb	r3, [r1, r3]
 800647e:	fa22 f303 	lsr.w	r3, r2, r3
 8006482:	4a09      	ldr	r2, [pc, #36]	@ (80064a8 <HAL_RCC_ClockConfig+0x1c4>)
 8006484:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006486:	4b09      	ldr	r3, [pc, #36]	@ (80064ac <HAL_RCC_ClockConfig+0x1c8>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	4618      	mov	r0, r3
 800648c:	f7fd fe90 	bl	80041b0 <HAL_InitTick>

  return HAL_OK;
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3710      	adds	r7, #16
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40023c00 	.word	0x40023c00
 80064a0:	40023800 	.word	0x40023800
 80064a4:	08011080 	.word	0x08011080
 80064a8:	20000010 	.word	0x20000010
 80064ac:	20000014 	.word	0x20000014

080064b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80064b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064b4:	b090      	sub	sp, #64	@ 0x40
 80064b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80064b8:	2300      	movs	r3, #0
 80064ba:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80064bc:	2300      	movs	r3, #0
 80064be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80064c8:	4b59      	ldr	r3, [pc, #356]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x180>)
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	f003 030c 	and.w	r3, r3, #12
 80064d0:	2b08      	cmp	r3, #8
 80064d2:	d00d      	beq.n	80064f0 <HAL_RCC_GetSysClockFreq+0x40>
 80064d4:	2b08      	cmp	r3, #8
 80064d6:	f200 80a1 	bhi.w	800661c <HAL_RCC_GetSysClockFreq+0x16c>
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d002      	beq.n	80064e4 <HAL_RCC_GetSysClockFreq+0x34>
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d003      	beq.n	80064ea <HAL_RCC_GetSysClockFreq+0x3a>
 80064e2:	e09b      	b.n	800661c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80064e4:	4b53      	ldr	r3, [pc, #332]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x184>)
 80064e6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064e8:	e09b      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80064ea:	4b53      	ldr	r3, [pc, #332]	@ (8006638 <HAL_RCC_GetSysClockFreq+0x188>)
 80064ec:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80064ee:	e098      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80064f0:	4b4f      	ldr	r3, [pc, #316]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x180>)
 80064f2:	685b      	ldr	r3, [r3, #4]
 80064f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80064f8:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80064fa:	4b4d      	ldr	r3, [pc, #308]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x180>)
 80064fc:	685b      	ldr	r3, [r3, #4]
 80064fe:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006502:	2b00      	cmp	r3, #0
 8006504:	d028      	beq.n	8006558 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006506:	4b4a      	ldr	r3, [pc, #296]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x180>)
 8006508:	685b      	ldr	r3, [r3, #4]
 800650a:	099b      	lsrs	r3, r3, #6
 800650c:	2200      	movs	r2, #0
 800650e:	623b      	str	r3, [r7, #32]
 8006510:	627a      	str	r2, [r7, #36]	@ 0x24
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006518:	2100      	movs	r1, #0
 800651a:	4b47      	ldr	r3, [pc, #284]	@ (8006638 <HAL_RCC_GetSysClockFreq+0x188>)
 800651c:	fb03 f201 	mul.w	r2, r3, r1
 8006520:	2300      	movs	r3, #0
 8006522:	fb00 f303 	mul.w	r3, r0, r3
 8006526:	4413      	add	r3, r2
 8006528:	4a43      	ldr	r2, [pc, #268]	@ (8006638 <HAL_RCC_GetSysClockFreq+0x188>)
 800652a:	fba0 1202 	umull	r1, r2, r0, r2
 800652e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006530:	460a      	mov	r2, r1
 8006532:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006534:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006536:	4413      	add	r3, r2
 8006538:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800653a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800653c:	2200      	movs	r2, #0
 800653e:	61bb      	str	r3, [r7, #24]
 8006540:	61fa      	str	r2, [r7, #28]
 8006542:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006546:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800654a:	f7fa fce3 	bl	8000f14 <__aeabi_uldivmod>
 800654e:	4602      	mov	r2, r0
 8006550:	460b      	mov	r3, r1
 8006552:	4613      	mov	r3, r2
 8006554:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006556:	e053      	b.n	8006600 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006558:	4b35      	ldr	r3, [pc, #212]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x180>)
 800655a:	685b      	ldr	r3, [r3, #4]
 800655c:	099b      	lsrs	r3, r3, #6
 800655e:	2200      	movs	r2, #0
 8006560:	613b      	str	r3, [r7, #16]
 8006562:	617a      	str	r2, [r7, #20]
 8006564:	693b      	ldr	r3, [r7, #16]
 8006566:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800656a:	f04f 0b00 	mov.w	fp, #0
 800656e:	4652      	mov	r2, sl
 8006570:	465b      	mov	r3, fp
 8006572:	f04f 0000 	mov.w	r0, #0
 8006576:	f04f 0100 	mov.w	r1, #0
 800657a:	0159      	lsls	r1, r3, #5
 800657c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006580:	0150      	lsls	r0, r2, #5
 8006582:	4602      	mov	r2, r0
 8006584:	460b      	mov	r3, r1
 8006586:	ebb2 080a 	subs.w	r8, r2, sl
 800658a:	eb63 090b 	sbc.w	r9, r3, fp
 800658e:	f04f 0200 	mov.w	r2, #0
 8006592:	f04f 0300 	mov.w	r3, #0
 8006596:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800659a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800659e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80065a2:	ebb2 0408 	subs.w	r4, r2, r8
 80065a6:	eb63 0509 	sbc.w	r5, r3, r9
 80065aa:	f04f 0200 	mov.w	r2, #0
 80065ae:	f04f 0300 	mov.w	r3, #0
 80065b2:	00eb      	lsls	r3, r5, #3
 80065b4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065b8:	00e2      	lsls	r2, r4, #3
 80065ba:	4614      	mov	r4, r2
 80065bc:	461d      	mov	r5, r3
 80065be:	eb14 030a 	adds.w	r3, r4, sl
 80065c2:	603b      	str	r3, [r7, #0]
 80065c4:	eb45 030b 	adc.w	r3, r5, fp
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	f04f 0200 	mov.w	r2, #0
 80065ce:	f04f 0300 	mov.w	r3, #0
 80065d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80065d6:	4629      	mov	r1, r5
 80065d8:	028b      	lsls	r3, r1, #10
 80065da:	4621      	mov	r1, r4
 80065dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80065e0:	4621      	mov	r1, r4
 80065e2:	028a      	lsls	r2, r1, #10
 80065e4:	4610      	mov	r0, r2
 80065e6:	4619      	mov	r1, r3
 80065e8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80065ea:	2200      	movs	r2, #0
 80065ec:	60bb      	str	r3, [r7, #8]
 80065ee:	60fa      	str	r2, [r7, #12]
 80065f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80065f4:	f7fa fc8e 	bl	8000f14 <__aeabi_uldivmod>
 80065f8:	4602      	mov	r2, r0
 80065fa:	460b      	mov	r3, r1
 80065fc:	4613      	mov	r3, r2
 80065fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006600:	4b0b      	ldr	r3, [pc, #44]	@ (8006630 <HAL_RCC_GetSysClockFreq+0x180>)
 8006602:	685b      	ldr	r3, [r3, #4]
 8006604:	0c1b      	lsrs	r3, r3, #16
 8006606:	f003 0303 	and.w	r3, r3, #3
 800660a:	3301      	adds	r3, #1
 800660c:	005b      	lsls	r3, r3, #1
 800660e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006610:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	fbb2 f3f3 	udiv	r3, r2, r3
 8006618:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 800661a:	e002      	b.n	8006622 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800661c:	4b05      	ldr	r3, [pc, #20]	@ (8006634 <HAL_RCC_GetSysClockFreq+0x184>)
 800661e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006620:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006624:	4618      	mov	r0, r3
 8006626:	3740      	adds	r7, #64	@ 0x40
 8006628:	46bd      	mov	sp, r7
 800662a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800662e:	bf00      	nop
 8006630:	40023800 	.word	0x40023800
 8006634:	00f42400 	.word	0x00f42400
 8006638:	00b71b00 	.word	0x00b71b00

0800663c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800663c:	b480      	push	{r7}
 800663e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006640:	4b03      	ldr	r3, [pc, #12]	@ (8006650 <HAL_RCC_GetHCLKFreq+0x14>)
 8006642:	681b      	ldr	r3, [r3, #0]
}
 8006644:	4618      	mov	r0, r3
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
 800664e:	bf00      	nop
 8006650:	20000010 	.word	0x20000010

08006654 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006658:	f7ff fff0 	bl	800663c <HAL_RCC_GetHCLKFreq>
 800665c:	4602      	mov	r2, r0
 800665e:	4b05      	ldr	r3, [pc, #20]	@ (8006674 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006660:	689b      	ldr	r3, [r3, #8]
 8006662:	0a9b      	lsrs	r3, r3, #10
 8006664:	f003 0307 	and.w	r3, r3, #7
 8006668:	4903      	ldr	r1, [pc, #12]	@ (8006678 <HAL_RCC_GetPCLK1Freq+0x24>)
 800666a:	5ccb      	ldrb	r3, [r1, r3]
 800666c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006670:	4618      	mov	r0, r3
 8006672:	bd80      	pop	{r7, pc}
 8006674:	40023800 	.word	0x40023800
 8006678:	08011090 	.word	0x08011090

0800667c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8006680:	f7ff ffdc 	bl	800663c <HAL_RCC_GetHCLKFreq>
 8006684:	4602      	mov	r2, r0
 8006686:	4b05      	ldr	r3, [pc, #20]	@ (800669c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006688:	689b      	ldr	r3, [r3, #8]
 800668a:	0b5b      	lsrs	r3, r3, #13
 800668c:	f003 0307 	and.w	r3, r3, #7
 8006690:	4903      	ldr	r1, [pc, #12]	@ (80066a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006692:	5ccb      	ldrb	r3, [r1, r3]
 8006694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006698:	4618      	mov	r0, r3
 800669a:	bd80      	pop	{r7, pc}
 800669c:	40023800 	.word	0x40023800
 80066a0:	08011090 	.word	0x08011090

080066a4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80066a4:	b580      	push	{r7, lr}
 80066a6:	b082      	sub	sp, #8
 80066a8:	af00      	add	r7, sp, #0
 80066aa:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d101      	bne.n	80066b6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80066b2:	2301      	movs	r3, #1
 80066b4:	e07b      	b.n	80067ae <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	d108      	bne.n	80066d0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80066c6:	d009      	beq.n	80066dc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2200      	movs	r2, #0
 80066cc:	61da      	str	r2, [r3, #28]
 80066ce:	e005      	b.n	80066dc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2200      	movs	r2, #0
 80066d4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	2200      	movs	r2, #0
 80066da:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	2200      	movs	r2, #0
 80066e0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d106      	bne.n	80066fc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	2200      	movs	r2, #0
 80066f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80066f6:	6878      	ldr	r0, [r7, #4]
 80066f8:	f7fd fad4 	bl	8003ca4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2202      	movs	r2, #2
 8006700:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	681a      	ldr	r2, [r3, #0]
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006712:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	685b      	ldr	r3, [r3, #4]
 8006718:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	689b      	ldr	r3, [r3, #8]
 8006720:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006724:	431a      	orrs	r2, r3
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	68db      	ldr	r3, [r3, #12]
 800672a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	691b      	ldr	r3, [r3, #16]
 8006734:	f003 0302 	and.w	r3, r3, #2
 8006738:	431a      	orrs	r2, r3
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	695b      	ldr	r3, [r3, #20]
 800673e:	f003 0301 	and.w	r3, r3, #1
 8006742:	431a      	orrs	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	699b      	ldr	r3, [r3, #24]
 8006748:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800674c:	431a      	orrs	r2, r3
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	69db      	ldr	r3, [r3, #28]
 8006752:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006756:	431a      	orrs	r2, r3
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6a1b      	ldr	r3, [r3, #32]
 800675c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006760:	ea42 0103 	orr.w	r1, r2, r3
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006768:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	430a      	orrs	r2, r1
 8006772:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	699b      	ldr	r3, [r3, #24]
 8006778:	0c1b      	lsrs	r3, r3, #16
 800677a:	f003 0104 	and.w	r1, r3, #4
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006782:	f003 0210 	and.w	r2, r3, #16
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	430a      	orrs	r2, r1
 800678c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	69da      	ldr	r2, [r3, #28]
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800679c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2200      	movs	r2, #0
 80067a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2201      	movs	r2, #1
 80067a8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80067ac:	2300      	movs	r3, #0
}
 80067ae:	4618      	mov	r0, r3
 80067b0:	3708      	adds	r7, #8
 80067b2:	46bd      	mov	sp, r7
 80067b4:	bd80      	pop	{r7, pc}

080067b6 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80067b6:	b580      	push	{r7, lr}
 80067b8:	b088      	sub	sp, #32
 80067ba:	af00      	add	r7, sp, #0
 80067bc:	60f8      	str	r0, [r7, #12]
 80067be:	60b9      	str	r1, [r7, #8]
 80067c0:	603b      	str	r3, [r7, #0]
 80067c2:	4613      	mov	r3, r2
 80067c4:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80067c6:	f7fd fd37 	bl	8004238 <HAL_GetTick>
 80067ca:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80067cc:	88fb      	ldrh	r3, [r7, #6]
 80067ce:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80067d6:	b2db      	uxtb	r3, r3
 80067d8:	2b01      	cmp	r3, #1
 80067da:	d001      	beq.n	80067e0 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80067dc:	2302      	movs	r3, #2
 80067de:	e12a      	b.n	8006a36 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d002      	beq.n	80067ec <HAL_SPI_Transmit+0x36>
 80067e6:	88fb      	ldrh	r3, [r7, #6]
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d101      	bne.n	80067f0 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	e122      	b.n	8006a36 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80067f6:	2b01      	cmp	r3, #1
 80067f8:	d101      	bne.n	80067fe <HAL_SPI_Transmit+0x48>
 80067fa:	2302      	movs	r3, #2
 80067fc:	e11b      	b.n	8006a36 <HAL_SPI_Transmit+0x280>
 80067fe:	68fb      	ldr	r3, [r7, #12]
 8006800:	2201      	movs	r2, #1
 8006802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	2203      	movs	r2, #3
 800680a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800680e:	68fb      	ldr	r3, [r7, #12]
 8006810:	2200      	movs	r2, #0
 8006812:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006814:	68fb      	ldr	r3, [r7, #12]
 8006816:	68ba      	ldr	r2, [r7, #8]
 8006818:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	88fa      	ldrh	r2, [r7, #6]
 800681e:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	88fa      	ldrh	r2, [r7, #6]
 8006824:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	2200      	movs	r2, #0
 800682a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 800682c:	68fb      	ldr	r3, [r7, #12]
 800682e:	2200      	movs	r2, #0
 8006830:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	2200      	movs	r2, #0
 8006836:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	2200      	movs	r2, #0
 800683c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	2200      	movs	r2, #0
 8006842:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	689b      	ldr	r3, [r3, #8]
 8006848:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800684c:	d10f      	bne.n	800686e <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800684e:	68fb      	ldr	r3, [r7, #12]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	681a      	ldr	r2, [r3, #0]
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800685c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681a      	ldr	r2, [r3, #0]
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800686c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006878:	2b40      	cmp	r3, #64	@ 0x40
 800687a:	d007      	beq.n	800688c <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800688a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006894:	d152      	bne.n	800693c <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	2b00      	cmp	r3, #0
 800689c:	d002      	beq.n	80068a4 <HAL_SPI_Transmit+0xee>
 800689e:	8b7b      	ldrh	r3, [r7, #26]
 80068a0:	2b01      	cmp	r3, #1
 80068a2:	d145      	bne.n	8006930 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a8:	881a      	ldrh	r2, [r3, #0]
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b4:	1c9a      	adds	r2, r3, #2
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068be:	b29b      	uxth	r3, r3
 80068c0:	3b01      	subs	r3, #1
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80068c8:	e032      	b.n	8006930 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	689b      	ldr	r3, [r3, #8]
 80068d0:	f003 0302 	and.w	r3, r3, #2
 80068d4:	2b02      	cmp	r3, #2
 80068d6:	d112      	bne.n	80068fe <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068dc:	881a      	ldrh	r2, [r3, #0]
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068e8:	1c9a      	adds	r2, r3, #2
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80068f2:	b29b      	uxth	r3, r3
 80068f4:	3b01      	subs	r3, #1
 80068f6:	b29a      	uxth	r2, r3
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	86da      	strh	r2, [r3, #54]	@ 0x36
 80068fc:	e018      	b.n	8006930 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068fe:	f7fd fc9b 	bl	8004238 <HAL_GetTick>
 8006902:	4602      	mov	r2, r0
 8006904:	69fb      	ldr	r3, [r7, #28]
 8006906:	1ad3      	subs	r3, r2, r3
 8006908:	683a      	ldr	r2, [r7, #0]
 800690a:	429a      	cmp	r2, r3
 800690c:	d803      	bhi.n	8006916 <HAL_SPI_Transmit+0x160>
 800690e:	683b      	ldr	r3, [r7, #0]
 8006910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006914:	d102      	bne.n	800691c <HAL_SPI_Transmit+0x166>
 8006916:	683b      	ldr	r3, [r7, #0]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d109      	bne.n	8006930 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	2201      	movs	r2, #1
 8006920:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	2200      	movs	r2, #0
 8006928:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800692c:	2303      	movs	r3, #3
 800692e:	e082      	b.n	8006a36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006934:	b29b      	uxth	r3, r3
 8006936:	2b00      	cmp	r3, #0
 8006938:	d1c7      	bne.n	80068ca <HAL_SPI_Transmit+0x114>
 800693a:	e053      	b.n	80069e4 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d002      	beq.n	800694a <HAL_SPI_Transmit+0x194>
 8006944:	8b7b      	ldrh	r3, [r7, #26]
 8006946:	2b01      	cmp	r3, #1
 8006948:	d147      	bne.n	80069da <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	330c      	adds	r3, #12
 8006954:	7812      	ldrb	r2, [r2, #0]
 8006956:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800695c:	1c5a      	adds	r2, r3, #1
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006970:	e033      	b.n	80069da <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b02      	cmp	r3, #2
 800697e:	d113      	bne.n	80069a8 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006984:	68fb      	ldr	r3, [r7, #12]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	330c      	adds	r3, #12
 800698a:	7812      	ldrb	r2, [r2, #0]
 800698c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006992:	1c5a      	adds	r2, r3, #1
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800699c:	b29b      	uxth	r3, r3
 800699e:	3b01      	subs	r3, #1
 80069a0:	b29a      	uxth	r2, r3
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	86da      	strh	r2, [r3, #54]	@ 0x36
 80069a6:	e018      	b.n	80069da <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80069a8:	f7fd fc46 	bl	8004238 <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	69fb      	ldr	r3, [r7, #28]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	683a      	ldr	r2, [r7, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d803      	bhi.n	80069c0 <HAL_SPI_Transmit+0x20a>
 80069b8:	683b      	ldr	r3, [r7, #0]
 80069ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069be:	d102      	bne.n	80069c6 <HAL_SPI_Transmit+0x210>
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d109      	bne.n	80069da <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	2201      	movs	r2, #1
 80069ca:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80069ce:	68fb      	ldr	r3, [r7, #12]
 80069d0:	2200      	movs	r2, #0
 80069d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80069d6:	2303      	movs	r3, #3
 80069d8:	e02d      	b.n	8006a36 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80069da:	68fb      	ldr	r3, [r7, #12]
 80069dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80069de:	b29b      	uxth	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d1c6      	bne.n	8006972 <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80069e4:	69fa      	ldr	r2, [r7, #28]
 80069e6:	6839      	ldr	r1, [r7, #0]
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 fbd9 	bl	80071a0 <SPI_EndRxTxTransaction>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d002      	beq.n	80069fa <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	2220      	movs	r2, #32
 80069f8:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	689b      	ldr	r3, [r3, #8]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d10a      	bne.n	8006a18 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006a02:	2300      	movs	r3, #0
 8006a04:	617b      	str	r3, [r7, #20]
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	617b      	str	r3, [r7, #20]
 8006a0e:	68fb      	ldr	r3, [r7, #12]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	617b      	str	r3, [r7, #20]
 8006a16:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	2200      	movs	r2, #0
 8006a24:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006a28:	68fb      	ldr	r3, [r7, #12]
 8006a2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d001      	beq.n	8006a34 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006a30:	2301      	movs	r3, #1
 8006a32:	e000      	b.n	8006a36 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006a34:	2300      	movs	r3, #0
  }
}
 8006a36:	4618      	mov	r0, r3
 8006a38:	3720      	adds	r7, #32
 8006a3a:	46bd      	mov	sp, r7
 8006a3c:	bd80      	pop	{r7, pc}

08006a3e <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006a3e:	b580      	push	{r7, lr}
 8006a40:	b088      	sub	sp, #32
 8006a42:	af02      	add	r7, sp, #8
 8006a44:	60f8      	str	r0, [r7, #12]
 8006a46:	60b9      	str	r1, [r7, #8]
 8006a48:	603b      	str	r3, [r7, #0]
 8006a4a:	4613      	mov	r3, r2
 8006a4c:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006a54:	b2db      	uxtb	r3, r3
 8006a56:	2b01      	cmp	r3, #1
 8006a58:	d001      	beq.n	8006a5e <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006a5a:	2302      	movs	r3, #2
 8006a5c:	e104      	b.n	8006c68 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8006a5e:	68bb      	ldr	r3, [r7, #8]
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d002      	beq.n	8006a6a <HAL_SPI_Receive+0x2c>
 8006a64:	88fb      	ldrh	r3, [r7, #6]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d101      	bne.n	8006a6e <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	e0fc      	b.n	8006c68 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006a76:	d112      	bne.n	8006a9e <HAL_SPI_Receive+0x60>
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	689b      	ldr	r3, [r3, #8]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d10e      	bne.n	8006a9e <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2204      	movs	r2, #4
 8006a84:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006a88:	88fa      	ldrh	r2, [r7, #6]
 8006a8a:	683b      	ldr	r3, [r7, #0]
 8006a8c:	9300      	str	r3, [sp, #0]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	68ba      	ldr	r2, [r7, #8]
 8006a92:	68b9      	ldr	r1, [r7, #8]
 8006a94:	68f8      	ldr	r0, [r7, #12]
 8006a96:	f000 f8eb 	bl	8006c70 <HAL_SPI_TransmitReceive>
 8006a9a:	4603      	mov	r3, r0
 8006a9c:	e0e4      	b.n	8006c68 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006a9e:	f7fd fbcb 	bl	8004238 <HAL_GetTick>
 8006aa2:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <HAL_SPI_Receive+0x74>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e0da      	b.n	8006c68 <HAL_SPI_Receive+0x22a>
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2204      	movs	r2, #4
 8006abe:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	2200      	movs	r2, #0
 8006ac6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	68ba      	ldr	r2, [r7, #8]
 8006acc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	88fa      	ldrh	r2, [r7, #6]
 8006ad2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	88fa      	ldrh	r2, [r7, #6]
 8006ad8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	2200      	movs	r2, #0
 8006af0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2200      	movs	r2, #0
 8006af6:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b00:	d10f      	bne.n	8006b22 <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	681a      	ldr	r2, [r3, #0]
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006b10:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	681a      	ldr	r2, [r3, #0]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006b20:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b2c:	2b40      	cmp	r3, #64	@ 0x40
 8006b2e:	d007      	beq.n	8006b40 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006b3e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d170      	bne.n	8006c2a <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006b48:	e035      	b.n	8006bb6 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	f003 0301 	and.w	r3, r3, #1
 8006b54:	2b01      	cmp	r3, #1
 8006b56:	d115      	bne.n	8006b84 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	f103 020c 	add.w	r2, r3, #12
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b64:	7812      	ldrb	r2, [r2, #0]
 8006b66:	b2d2      	uxtb	r2, r2
 8006b68:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b6e:	1c5a      	adds	r2, r3, #1
 8006b70:	68fb      	ldr	r3, [r7, #12]
 8006b72:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006b78:	b29b      	uxth	r3, r3
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	b29a      	uxth	r2, r3
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006b82:	e018      	b.n	8006bb6 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006b84:	f7fd fb58 	bl	8004238 <HAL_GetTick>
 8006b88:	4602      	mov	r2, r0
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	1ad3      	subs	r3, r2, r3
 8006b8e:	683a      	ldr	r2, [r7, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d803      	bhi.n	8006b9c <HAL_SPI_Receive+0x15e>
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b9a:	d102      	bne.n	8006ba2 <HAL_SPI_Receive+0x164>
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	2b00      	cmp	r3, #0
 8006ba0:	d109      	bne.n	8006bb6 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	2201      	movs	r2, #1
 8006ba6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2200      	movs	r2, #0
 8006bae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006bb2:	2303      	movs	r3, #3
 8006bb4:	e058      	b.n	8006c68 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bba:	b29b      	uxth	r3, r3
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d1c4      	bne.n	8006b4a <HAL_SPI_Receive+0x10c>
 8006bc0:	e038      	b.n	8006c34 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	689b      	ldr	r3, [r3, #8]
 8006bc8:	f003 0301 	and.w	r3, r3, #1
 8006bcc:	2b01      	cmp	r3, #1
 8006bce:	d113      	bne.n	8006bf8 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	68da      	ldr	r2, [r3, #12]
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bda:	b292      	uxth	r2, r2
 8006bdc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006be2:	1c9a      	adds	r2, r3, #2
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006bec:	b29b      	uxth	r3, r3
 8006bee:	3b01      	subs	r3, #1
 8006bf0:	b29a      	uxth	r2, r3
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8006bf6:	e018      	b.n	8006c2a <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006bf8:	f7fd fb1e 	bl	8004238 <HAL_GetTick>
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	697b      	ldr	r3, [r7, #20]
 8006c00:	1ad3      	subs	r3, r2, r3
 8006c02:	683a      	ldr	r2, [r7, #0]
 8006c04:	429a      	cmp	r2, r3
 8006c06:	d803      	bhi.n	8006c10 <HAL_SPI_Receive+0x1d2>
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c0e:	d102      	bne.n	8006c16 <HAL_SPI_Receive+0x1d8>
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d109      	bne.n	8006c2a <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	2201      	movs	r2, #1
 8006c1a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	2200      	movs	r2, #0
 8006c22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e01e      	b.n	8006c68 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006c2e:	b29b      	uxth	r3, r3
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d1c6      	bne.n	8006bc2 <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c34:	697a      	ldr	r2, [r7, #20]
 8006c36:	6839      	ldr	r1, [r7, #0]
 8006c38:	68f8      	ldr	r0, [r7, #12]
 8006c3a:	f000 fa4b 	bl	80070d4 <SPI_EndRxTransaction>
 8006c3e:	4603      	mov	r3, r0
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d002      	beq.n	8006c4a <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	2220      	movs	r2, #32
 8006c48:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	2201      	movs	r2, #1
 8006c4e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d001      	beq.n	8006c66 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8006c66:	2300      	movs	r3, #0
  }
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}

08006c70 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b08a      	sub	sp, #40	@ 0x28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	607a      	str	r2, [r7, #4]
 8006c7c:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8006c7e:	2301      	movs	r3, #1
 8006c80:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006c82:	f7fd fad9 	bl	8004238 <HAL_GetTick>
 8006c86:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c8e:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	685b      	ldr	r3, [r3, #4]
 8006c94:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8006c96:	887b      	ldrh	r3, [r7, #2]
 8006c98:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006c9a:	7ffb      	ldrb	r3, [r7, #31]
 8006c9c:	2b01      	cmp	r3, #1
 8006c9e:	d00c      	beq.n	8006cba <HAL_SPI_TransmitReceive+0x4a>
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006ca6:	d106      	bne.n	8006cb6 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d102      	bne.n	8006cb6 <HAL_SPI_TransmitReceive+0x46>
 8006cb0:	7ffb      	ldrb	r3, [r7, #31]
 8006cb2:	2b04      	cmp	r3, #4
 8006cb4:	d001      	beq.n	8006cba <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8006cb6:	2302      	movs	r3, #2
 8006cb8:	e17f      	b.n	8006fba <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d005      	beq.n	8006ccc <HAL_SPI_TransmitReceive+0x5c>
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d002      	beq.n	8006ccc <HAL_SPI_TransmitReceive+0x5c>
 8006cc6:	887b      	ldrh	r3, [r7, #2]
 8006cc8:	2b00      	cmp	r3, #0
 8006cca:	d101      	bne.n	8006cd0 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8006ccc:	2301      	movs	r3, #1
 8006cce:	e174      	b.n	8006fba <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006cd6:	2b01      	cmp	r3, #1
 8006cd8:	d101      	bne.n	8006cde <HAL_SPI_TransmitReceive+0x6e>
 8006cda:	2302      	movs	r3, #2
 8006cdc:	e16d      	b.n	8006fba <HAL_SPI_TransmitReceive+0x34a>
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	2201      	movs	r2, #1
 8006ce2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cec:	b2db      	uxtb	r3, r3
 8006cee:	2b04      	cmp	r3, #4
 8006cf0:	d003      	beq.n	8006cfa <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2205      	movs	r2, #5
 8006cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	687a      	ldr	r2, [r7, #4]
 8006d04:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	887a      	ldrh	r2, [r7, #2]
 8006d0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	887a      	ldrh	r2, [r7, #2]
 8006d10:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	68ba      	ldr	r2, [r7, #8]
 8006d16:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	887a      	ldrh	r2, [r7, #2]
 8006d1c:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	887a      	ldrh	r2, [r7, #2]
 8006d22:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	2200      	movs	r2, #0
 8006d28:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d3a:	2b40      	cmp	r3, #64	@ 0x40
 8006d3c:	d007      	beq.n	8006d4e <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	681a      	ldr	r2, [r3, #0]
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006d4c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	68db      	ldr	r3, [r3, #12]
 8006d52:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d56:	d17e      	bne.n	8006e56 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	685b      	ldr	r3, [r3, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <HAL_SPI_TransmitReceive+0xf6>
 8006d60:	8afb      	ldrh	r3, [r7, #22]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d16c      	bne.n	8006e40 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d6a:	881a      	ldrh	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006d76:	1c9a      	adds	r2, r3, #2
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	3b01      	subs	r3, #1
 8006d84:	b29a      	uxth	r2, r3
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d8a:	e059      	b.n	8006e40 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	689b      	ldr	r3, [r3, #8]
 8006d92:	f003 0302 	and.w	r3, r3, #2
 8006d96:	2b02      	cmp	r3, #2
 8006d98:	d11b      	bne.n	8006dd2 <HAL_SPI_TransmitReceive+0x162>
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006d9e:	b29b      	uxth	r3, r3
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d016      	beq.n	8006dd2 <HAL_SPI_TransmitReceive+0x162>
 8006da4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d113      	bne.n	8006dd2 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dae:	881a      	ldrh	r2, [r3, #0]
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dba:	1c9a      	adds	r2, r3, #2
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	3b01      	subs	r3, #1
 8006dc8:	b29a      	uxth	r2, r3
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006dce:	2300      	movs	r3, #0
 8006dd0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	f003 0301 	and.w	r3, r3, #1
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d119      	bne.n	8006e14 <HAL_SPI_TransmitReceive+0x1a4>
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006de4:	b29b      	uxth	r3, r3
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d014      	beq.n	8006e14 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68da      	ldr	r2, [r3, #12]
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006df4:	b292      	uxth	r2, r2
 8006df6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006dfc:	1c9a      	adds	r2, r3, #2
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e06:	b29b      	uxth	r3, r3
 8006e08:	3b01      	subs	r3, #1
 8006e0a:	b29a      	uxth	r2, r3
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006e10:	2301      	movs	r3, #1
 8006e12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e14:	f7fd fa10 	bl	8004238 <HAL_GetTick>
 8006e18:	4602      	mov	r2, r0
 8006e1a:	6a3b      	ldr	r3, [r7, #32]
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e20:	429a      	cmp	r2, r3
 8006e22:	d80d      	bhi.n	8006e40 <HAL_SPI_TransmitReceive+0x1d0>
 8006e24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006e26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2a:	d009      	beq.n	8006e40 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e0bc      	b.n	8006fba <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e44:	b29b      	uxth	r3, r3
 8006e46:	2b00      	cmp	r3, #0
 8006e48:	d1a0      	bne.n	8006d8c <HAL_SPI_TransmitReceive+0x11c>
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006e4e:	b29b      	uxth	r3, r3
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d19b      	bne.n	8006d8c <HAL_SPI_TransmitReceive+0x11c>
 8006e54:	e082      	b.n	8006f5c <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	685b      	ldr	r3, [r3, #4]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d002      	beq.n	8006e64 <HAL_SPI_TransmitReceive+0x1f4>
 8006e5e:	8afb      	ldrh	r3, [r7, #22]
 8006e60:	2b01      	cmp	r3, #1
 8006e62:	d171      	bne.n	8006f48 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	330c      	adds	r3, #12
 8006e6e:	7812      	ldrb	r2, [r2, #0]
 8006e70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e76:	1c5a      	adds	r2, r3, #1
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e80:	b29b      	uxth	r3, r3
 8006e82:	3b01      	subs	r3, #1
 8006e84:	b29a      	uxth	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e8a:	e05d      	b.n	8006f48 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	681b      	ldr	r3, [r3, #0]
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f003 0302 	and.w	r3, r3, #2
 8006e96:	2b02      	cmp	r3, #2
 8006e98:	d11c      	bne.n	8006ed4 <HAL_SPI_TransmitReceive+0x264>
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d017      	beq.n	8006ed4 <HAL_SPI_TransmitReceive+0x264>
 8006ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ea6:	2b01      	cmp	r3, #1
 8006ea8:	d114      	bne.n	8006ed4 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	330c      	adds	r3, #12
 8006eb4:	7812      	ldrb	r2, [r2, #0]
 8006eb6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ebc:	1c5a      	adds	r2, r3, #1
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ec6:	b29b      	uxth	r3, r3
 8006ec8:	3b01      	subs	r3, #1
 8006eca:	b29a      	uxth	r2, r3
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	689b      	ldr	r3, [r3, #8]
 8006eda:	f003 0301 	and.w	r3, r3, #1
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d119      	bne.n	8006f16 <HAL_SPI_TransmitReceive+0x2a6>
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006ee6:	b29b      	uxth	r3, r3
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d014      	beq.n	8006f16 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	68da      	ldr	r2, [r3, #12]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	3b01      	subs	r3, #1
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006f12:	2301      	movs	r3, #1
 8006f14:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006f16:	f7fd f98f 	bl	8004238 <HAL_GetTick>
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	1ad3      	subs	r3, r2, r3
 8006f20:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006f22:	429a      	cmp	r2, r3
 8006f24:	d803      	bhi.n	8006f2e <HAL_SPI_TransmitReceive+0x2be>
 8006f26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f2c:	d102      	bne.n	8006f34 <HAL_SPI_TransmitReceive+0x2c4>
 8006f2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d109      	bne.n	8006f48 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	2201      	movs	r2, #1
 8006f38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	2200      	movs	r2, #0
 8006f40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8006f44:	2303      	movs	r3, #3
 8006f46:	e038      	b.n	8006fba <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006f4c:	b29b      	uxth	r3, r3
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d19c      	bne.n	8006e8c <HAL_SPI_TransmitReceive+0x21c>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8006f56:	b29b      	uxth	r3, r3
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d197      	bne.n	8006e8c <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006f5c:	6a3a      	ldr	r2, [r7, #32]
 8006f5e:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006f60:	68f8      	ldr	r0, [r7, #12]
 8006f62:	f000 f91d 	bl	80071a0 <SPI_EndRxTxTransaction>
 8006f66:	4603      	mov	r3, r0
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d008      	beq.n	8006f7e <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2220      	movs	r2, #32
 8006f70:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8006f7a:	2301      	movs	r3, #1
 8006f7c:	e01d      	b.n	8006fba <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	689b      	ldr	r3, [r3, #8]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d10a      	bne.n	8006f9c <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f86:	2300      	movs	r3, #0
 8006f88:	613b      	str	r3, [r7, #16]
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	68db      	ldr	r3, [r3, #12]
 8006f90:	613b      	str	r3, [r7, #16]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	613b      	str	r3, [r7, #16]
 8006f9a:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d001      	beq.n	8006fb8 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8006fb4:	2301      	movs	r3, #1
 8006fb6:	e000      	b.n	8006fba <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
  }
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3728      	adds	r7, #40	@ 0x28
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	bd80      	pop	{r7, pc}
	...

08006fc4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	603b      	str	r3, [r7, #0]
 8006fd0:	4613      	mov	r3, r2
 8006fd2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006fd4:	f7fd f930 	bl	8004238 <HAL_GetTick>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fdc:	1a9b      	subs	r3, r3, r2
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	4413      	add	r3, r2
 8006fe2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006fe4:	f7fd f928 	bl	8004238 <HAL_GetTick>
 8006fe8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006fea:	4b39      	ldr	r3, [pc, #228]	@ (80070d0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	015b      	lsls	r3, r3, #5
 8006ff0:	0d1b      	lsrs	r3, r3, #20
 8006ff2:	69fa      	ldr	r2, [r7, #28]
 8006ff4:	fb02 f303 	mul.w	r3, r2, r3
 8006ff8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006ffa:	e055      	b.n	80070a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006ffc:	683b      	ldr	r3, [r7, #0]
 8006ffe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007002:	d051      	beq.n	80070a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007004:	f7fd f918 	bl	8004238 <HAL_GetTick>
 8007008:	4602      	mov	r2, r0
 800700a:	69bb      	ldr	r3, [r7, #24]
 800700c:	1ad3      	subs	r3, r2, r3
 800700e:	69fa      	ldr	r2, [r7, #28]
 8007010:	429a      	cmp	r2, r3
 8007012:	d902      	bls.n	800701a <SPI_WaitFlagStateUntilTimeout+0x56>
 8007014:	69fb      	ldr	r3, [r7, #28]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d13d      	bne.n	8007096 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	685a      	ldr	r2, [r3, #4]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007028:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007032:	d111      	bne.n	8007058 <SPI_WaitFlagStateUntilTimeout+0x94>
 8007034:	68fb      	ldr	r3, [r7, #12]
 8007036:	689b      	ldr	r3, [r3, #8]
 8007038:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800703c:	d004      	beq.n	8007048 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	689b      	ldr	r3, [r3, #8]
 8007042:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007046:	d107      	bne.n	8007058 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007056:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800705c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007060:	d10f      	bne.n	8007082 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	681a      	ldr	r2, [r3, #0]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007070:	601a      	str	r2, [r3, #0]
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007080:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	2200      	movs	r2, #0
 800708e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8007092:	2303      	movs	r3, #3
 8007094:	e018      	b.n	80070c8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	2b00      	cmp	r3, #0
 800709a:	d102      	bne.n	80070a2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	61fb      	str	r3, [r7, #28]
 80070a0:	e002      	b.n	80070a8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	3b01      	subs	r3, #1
 80070a6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	689a      	ldr	r2, [r3, #8]
 80070ae:	68bb      	ldr	r3, [r7, #8]
 80070b0:	4013      	ands	r3, r2
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	429a      	cmp	r2, r3
 80070b6:	bf0c      	ite	eq
 80070b8:	2301      	moveq	r3, #1
 80070ba:	2300      	movne	r3, #0
 80070bc:	b2db      	uxtb	r3, r3
 80070be:	461a      	mov	r2, r3
 80070c0:	79fb      	ldrb	r3, [r7, #7]
 80070c2:	429a      	cmp	r2, r3
 80070c4:	d19a      	bne.n	8006ffc <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80070c6:	2300      	movs	r3, #0
}
 80070c8:	4618      	mov	r0, r3
 80070ca:	3720      	adds	r7, #32
 80070cc:	46bd      	mov	sp, r7
 80070ce:	bd80      	pop	{r7, pc}
 80070d0:	20000010 	.word	0x20000010

080070d4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b086      	sub	sp, #24
 80070d8:	af02      	add	r7, sp, #8
 80070da:	60f8      	str	r0, [r7, #12]
 80070dc:	60b9      	str	r1, [r7, #8]
 80070de:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	685b      	ldr	r3, [r3, #4]
 80070e4:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80070e8:	d111      	bne.n	800710e <SPI_EndRxTransaction+0x3a>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80070f2:	d004      	beq.n	80070fe <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	689b      	ldr	r3, [r3, #8]
 80070f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80070fc:	d107      	bne.n	800710e <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80070fe:	68fb      	ldr	r3, [r7, #12]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	68fb      	ldr	r3, [r7, #12]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800710c:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	685b      	ldr	r3, [r3, #4]
 8007112:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007116:	d12a      	bne.n	800716e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	689b      	ldr	r3, [r3, #8]
 800711c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007120:	d012      	beq.n	8007148 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	9300      	str	r3, [sp, #0]
 8007126:	68bb      	ldr	r3, [r7, #8]
 8007128:	2200      	movs	r2, #0
 800712a:	2180      	movs	r1, #128	@ 0x80
 800712c:	68f8      	ldr	r0, [r7, #12]
 800712e:	f7ff ff49 	bl	8006fc4 <SPI_WaitFlagStateUntilTimeout>
 8007132:	4603      	mov	r3, r0
 8007134:	2b00      	cmp	r3, #0
 8007136:	d02d      	beq.n	8007194 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800713c:	f043 0220 	orr.w	r2, r3, #32
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007144:	2303      	movs	r3, #3
 8007146:	e026      	b.n	8007196 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	9300      	str	r3, [sp, #0]
 800714c:	68bb      	ldr	r3, [r7, #8]
 800714e:	2200      	movs	r2, #0
 8007150:	2101      	movs	r1, #1
 8007152:	68f8      	ldr	r0, [r7, #12]
 8007154:	f7ff ff36 	bl	8006fc4 <SPI_WaitFlagStateUntilTimeout>
 8007158:	4603      	mov	r3, r0
 800715a:	2b00      	cmp	r3, #0
 800715c:	d01a      	beq.n	8007194 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007162:	f043 0220 	orr.w	r2, r3, #32
 8007166:	68fb      	ldr	r3, [r7, #12]
 8007168:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800716a:	2303      	movs	r3, #3
 800716c:	e013      	b.n	8007196 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	9300      	str	r3, [sp, #0]
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	2200      	movs	r2, #0
 8007176:	2101      	movs	r1, #1
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f7ff ff23 	bl	8006fc4 <SPI_WaitFlagStateUntilTimeout>
 800717e:	4603      	mov	r3, r0
 8007180:	2b00      	cmp	r3, #0
 8007182:	d007      	beq.n	8007194 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007188:	f043 0220 	orr.w	r2, r3, #32
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007190:	2303      	movs	r3, #3
 8007192:	e000      	b.n	8007196 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8007194:	2300      	movs	r3, #0
}
 8007196:	4618      	mov	r0, r3
 8007198:	3710      	adds	r7, #16
 800719a:	46bd      	mov	sp, r7
 800719c:	bd80      	pop	{r7, pc}
	...

080071a0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af02      	add	r7, sp, #8
 80071a6:	60f8      	str	r0, [r7, #12]
 80071a8:	60b9      	str	r1, [r7, #8]
 80071aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	9300      	str	r3, [sp, #0]
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	2201      	movs	r2, #1
 80071b4:	2102      	movs	r1, #2
 80071b6:	68f8      	ldr	r0, [r7, #12]
 80071b8:	f7ff ff04 	bl	8006fc4 <SPI_WaitFlagStateUntilTimeout>
 80071bc:	4603      	mov	r3, r0
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d007      	beq.n	80071d2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80071c6:	f043 0220 	orr.w	r2, r3, #32
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80071ce:	2303      	movs	r3, #3
 80071d0:	e032      	b.n	8007238 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80071d2:	4b1b      	ldr	r3, [pc, #108]	@ (8007240 <SPI_EndRxTxTransaction+0xa0>)
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4a1b      	ldr	r2, [pc, #108]	@ (8007244 <SPI_EndRxTxTransaction+0xa4>)
 80071d8:	fba2 2303 	umull	r2, r3, r2, r3
 80071dc:	0d5b      	lsrs	r3, r3, #21
 80071de:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80071e2:	fb02 f303 	mul.w	r3, r2, r3
 80071e6:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071f0:	d112      	bne.n	8007218 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	9300      	str	r3, [sp, #0]
 80071f6:	68bb      	ldr	r3, [r7, #8]
 80071f8:	2200      	movs	r2, #0
 80071fa:	2180      	movs	r1, #128	@ 0x80
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f7ff fee1 	bl	8006fc4 <SPI_WaitFlagStateUntilTimeout>
 8007202:	4603      	mov	r3, r0
 8007204:	2b00      	cmp	r3, #0
 8007206:	d016      	beq.n	8007236 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800720c:	f043 0220 	orr.w	r2, r3, #32
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8007214:	2303      	movs	r3, #3
 8007216:	e00f      	b.n	8007238 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00a      	beq.n	8007234 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800721e:	697b      	ldr	r3, [r7, #20]
 8007220:	3b01      	subs	r3, #1
 8007222:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800722e:	2b80      	cmp	r3, #128	@ 0x80
 8007230:	d0f2      	beq.n	8007218 <SPI_EndRxTxTransaction+0x78>
 8007232:	e000      	b.n	8007236 <SPI_EndRxTxTransaction+0x96>
        break;
 8007234:	bf00      	nop
  }

  return HAL_OK;
 8007236:	2300      	movs	r3, #0
}
 8007238:	4618      	mov	r0, r3
 800723a:	3718      	adds	r7, #24
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	20000010 	.word	0x20000010
 8007244:	165e9f81 	.word	0x165e9f81

08007248 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d101      	bne.n	800725a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007256:	2301      	movs	r3, #1
 8007258:	e042      	b.n	80072e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d106      	bne.n	8007274 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	2200      	movs	r2, #0
 800726a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800726e:	6878      	ldr	r0, [r7, #4]
 8007270:	f7fc fdca 	bl	8003e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	2224      	movs	r2, #36	@ 0x24
 8007278:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	68da      	ldr	r2, [r3, #12]
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800728a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800728c:	6878      	ldr	r0, [r7, #4]
 800728e:	f000 fd7f 	bl	8007d90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	691a      	ldr	r2, [r3, #16]
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80072a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	695a      	ldr	r2, [r3, #20]
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80072b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80072c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2200      	movs	r2, #0
 80072c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	2220      	movs	r2, #32
 80072cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2220      	movs	r2, #32
 80072d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3708      	adds	r7, #8
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}

080072e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08a      	sub	sp, #40	@ 0x28
 80072ec:	af02      	add	r7, sp, #8
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	603b      	str	r3, [r7, #0]
 80072f4:	4613      	mov	r3, r2
 80072f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80072f8:	2300      	movs	r3, #0
 80072fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007302:	b2db      	uxtb	r3, r3
 8007304:	2b20      	cmp	r3, #32
 8007306:	d175      	bne.n	80073f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007308:	68bb      	ldr	r3, [r7, #8]
 800730a:	2b00      	cmp	r3, #0
 800730c:	d002      	beq.n	8007314 <HAL_UART_Transmit+0x2c>
 800730e:	88fb      	ldrh	r3, [r7, #6]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d101      	bne.n	8007318 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007314:	2301      	movs	r3, #1
 8007316:	e06e      	b.n	80073f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	2200      	movs	r2, #0
 800731c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	2221      	movs	r2, #33	@ 0x21
 8007322:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007326:	f7fc ff87 	bl	8004238 <HAL_GetTick>
 800732a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	88fa      	ldrh	r2, [r7, #6]
 8007330:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	88fa      	ldrh	r2, [r7, #6]
 8007336:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	689b      	ldr	r3, [r3, #8]
 800733c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007340:	d108      	bne.n	8007354 <HAL_UART_Transmit+0x6c>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	691b      	ldr	r3, [r3, #16]
 8007346:	2b00      	cmp	r3, #0
 8007348:	d104      	bne.n	8007354 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800734e:	68bb      	ldr	r3, [r7, #8]
 8007350:	61bb      	str	r3, [r7, #24]
 8007352:	e003      	b.n	800735c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007354:	68bb      	ldr	r3, [r7, #8]
 8007356:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007358:	2300      	movs	r3, #0
 800735a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800735c:	e02e      	b.n	80073bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	9300      	str	r3, [sp, #0]
 8007362:	697b      	ldr	r3, [r7, #20]
 8007364:	2200      	movs	r2, #0
 8007366:	2180      	movs	r1, #128	@ 0x80
 8007368:	68f8      	ldr	r0, [r7, #12]
 800736a:	f000 fb1d 	bl	80079a8 <UART_WaitOnFlagUntilTimeout>
 800736e:	4603      	mov	r3, r0
 8007370:	2b00      	cmp	r3, #0
 8007372:	d005      	beq.n	8007380 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2220      	movs	r2, #32
 8007378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800737c:	2303      	movs	r3, #3
 800737e:	e03a      	b.n	80073f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007380:	69fb      	ldr	r3, [r7, #28]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d10b      	bne.n	800739e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007386:	69bb      	ldr	r3, [r7, #24]
 8007388:	881b      	ldrh	r3, [r3, #0]
 800738a:	461a      	mov	r2, r3
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007394:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007396:	69bb      	ldr	r3, [r7, #24]
 8007398:	3302      	adds	r3, #2
 800739a:	61bb      	str	r3, [r7, #24]
 800739c:	e007      	b.n	80073ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	781a      	ldrb	r2, [r3, #0]
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80073a8:	69fb      	ldr	r3, [r7, #28]
 80073aa:	3301      	adds	r3, #1
 80073ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	3b01      	subs	r3, #1
 80073b6:	b29a      	uxth	r2, r3
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80073c0:	b29b      	uxth	r3, r3
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1cb      	bne.n	800735e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80073c6:	683b      	ldr	r3, [r7, #0]
 80073c8:	9300      	str	r3, [sp, #0]
 80073ca:	697b      	ldr	r3, [r7, #20]
 80073cc:	2200      	movs	r2, #0
 80073ce:	2140      	movs	r1, #64	@ 0x40
 80073d0:	68f8      	ldr	r0, [r7, #12]
 80073d2:	f000 fae9 	bl	80079a8 <UART_WaitOnFlagUntilTimeout>
 80073d6:	4603      	mov	r3, r0
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d005      	beq.n	80073e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	2220      	movs	r2, #32
 80073e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80073e4:	2303      	movs	r3, #3
 80073e6:	e006      	b.n	80073f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	2220      	movs	r2, #32
 80073ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	e000      	b.n	80073f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80073f4:	2302      	movs	r3, #2
  }
}
 80073f6:	4618      	mov	r0, r3
 80073f8:	3720      	adds	r7, #32
 80073fa:	46bd      	mov	sp, r7
 80073fc:	bd80      	pop	{r7, pc}
	...

08007400 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007400:	b580      	push	{r7, lr}
 8007402:	b0ba      	sub	sp, #232	@ 0xe8
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	68db      	ldr	r3, [r3, #12]
 8007418:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	695b      	ldr	r3, [r3, #20]
 8007422:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8007426:	2300      	movs	r3, #0
 8007428:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800742c:	2300      	movs	r3, #0
 800742e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800743e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10f      	bne.n	8007466 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d009      	beq.n	8007466 <HAL_UART_IRQHandler+0x66>
 8007452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d003      	beq.n	8007466 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 fbd7 	bl	8007c12 <UART_Receive_IT>
      return;
 8007464:	e273      	b.n	800794e <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007466:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 80de 	beq.w	800762c <HAL_UART_IRQHandler+0x22c>
 8007470:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007474:	f003 0301 	and.w	r3, r3, #1
 8007478:	2b00      	cmp	r3, #0
 800747a:	d106      	bne.n	800748a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800747c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007480:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 80d1 	beq.w	800762c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800748a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800748e:	f003 0301 	and.w	r3, r3, #1
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00b      	beq.n	80074ae <HAL_UART_IRQHandler+0xae>
 8007496:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800749a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d005      	beq.n	80074ae <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074a6:	f043 0201 	orr.w	r2, r3, #1
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074b2:	f003 0304 	and.w	r3, r3, #4
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d00b      	beq.n	80074d2 <HAL_UART_IRQHandler+0xd2>
 80074ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074be:	f003 0301 	and.w	r3, r3, #1
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d005      	beq.n	80074d2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ca:	f043 0202 	orr.w	r2, r3, #2
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074d6:	f003 0302 	and.w	r3, r3, #2
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d00b      	beq.n	80074f6 <HAL_UART_IRQHandler+0xf6>
 80074de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80074e2:	f003 0301 	and.w	r3, r3, #1
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d005      	beq.n	80074f6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80074ee:	f043 0204 	orr.w	r2, r3, #4
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80074f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80074fa:	f003 0308 	and.w	r3, r3, #8
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d011      	beq.n	8007526 <HAL_UART_IRQHandler+0x126>
 8007502:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007506:	f003 0320 	and.w	r3, r3, #32
 800750a:	2b00      	cmp	r3, #0
 800750c:	d105      	bne.n	800751a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800750e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007512:	f003 0301 	and.w	r3, r3, #1
 8007516:	2b00      	cmp	r3, #0
 8007518:	d005      	beq.n	8007526 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800751e:	f043 0208 	orr.w	r2, r3, #8
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800752a:	2b00      	cmp	r3, #0
 800752c:	f000 820a 	beq.w	8007944 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007530:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007534:	f003 0320 	and.w	r3, r3, #32
 8007538:	2b00      	cmp	r3, #0
 800753a:	d008      	beq.n	800754e <HAL_UART_IRQHandler+0x14e>
 800753c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007540:	f003 0320 	and.w	r3, r3, #32
 8007544:	2b00      	cmp	r3, #0
 8007546:	d002      	beq.n	800754e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007548:	6878      	ldr	r0, [r7, #4]
 800754a:	f000 fb62 	bl	8007c12 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	695b      	ldr	r3, [r3, #20]
 8007554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007558:	2b40      	cmp	r3, #64	@ 0x40
 800755a:	bf0c      	ite	eq
 800755c:	2301      	moveq	r3, #1
 800755e:	2300      	movne	r3, #0
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800756a:	f003 0308 	and.w	r3, r3, #8
 800756e:	2b00      	cmp	r3, #0
 8007570:	d103      	bne.n	800757a <HAL_UART_IRQHandler+0x17a>
 8007572:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007576:	2b00      	cmp	r3, #0
 8007578:	d04f      	beq.n	800761a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fa6d 	bl	8007a5a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	695b      	ldr	r3, [r3, #20]
 8007586:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800758a:	2b40      	cmp	r3, #64	@ 0x40
 800758c:	d141      	bne.n	8007612 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3314      	adds	r3, #20
 8007594:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80075a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80075a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80075ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3314      	adds	r3, #20
 80075b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80075ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80075be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80075c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80075d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1d9      	bne.n	800758e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d013      	beq.n	800760a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075e6:	4a8a      	ldr	r2, [pc, #552]	@ (8007810 <HAL_UART_IRQHandler+0x410>)
 80075e8:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fc ffd3 	bl	800459a <HAL_DMA_Abort_IT>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d016      	beq.n	8007628 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80075fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007608:	e00e      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f9b6 	bl	800797c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007610:	e00a      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f9b2 	bl	800797c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	e006      	b.n	8007628 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f9ae 	bl	800797c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8007626:	e18d      	b.n	8007944 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007628:	bf00      	nop
    return;
 800762a:	e18b      	b.n	8007944 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007630:	2b01      	cmp	r3, #1
 8007632:	f040 8167 	bne.w	8007904 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007636:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	2b00      	cmp	r3, #0
 8007640:	f000 8160 	beq.w	8007904 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8007644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007648:	f003 0310 	and.w	r3, r3, #16
 800764c:	2b00      	cmp	r3, #0
 800764e:	f000 8159 	beq.w	8007904 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007652:	2300      	movs	r3, #0
 8007654:	60bb      	str	r3, [r7, #8]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	60bb      	str	r3, [r7, #8]
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	685b      	ldr	r3, [r3, #4]
 8007664:	60bb      	str	r3, [r7, #8]
 8007666:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	695b      	ldr	r3, [r3, #20]
 800766e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007672:	2b40      	cmp	r3, #64	@ 0x40
 8007674:	f040 80ce 	bne.w	8007814 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	685b      	ldr	r3, [r3, #4]
 8007680:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007684:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007688:	2b00      	cmp	r3, #0
 800768a:	f000 80a9 	beq.w	80077e0 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007696:	429a      	cmp	r2, r3
 8007698:	f080 80a2 	bcs.w	80077e0 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80076a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80076a8:	69db      	ldr	r3, [r3, #28]
 80076aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80076ae:	f000 8088 	beq.w	80077c2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	330c      	adds	r3, #12
 80076b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80076c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80076cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	330c      	adds	r3, #12
 80076da:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80076de:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80076e2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80076ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80076f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1d9      	bne.n	80076b2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3314      	adds	r3, #20
 8007704:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800770e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007710:	f023 0301 	bic.w	r3, r3, #1
 8007714:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3314      	adds	r3, #20
 800771e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8007722:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8007726:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800772a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007734:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e1      	bne.n	80076fe <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3314      	adds	r3, #20
 8007740:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800774a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800774c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007750:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3314      	adds	r3, #20
 800775a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800775e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007760:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007764:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800776c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e3      	bne.n	800773a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	330c      	adds	r3, #12
 8007786:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007788:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800778a:	e853 3f00 	ldrex	r3, [r3]
 800778e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007790:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007792:	f023 0310 	bic.w	r3, r3, #16
 8007796:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	330c      	adds	r3, #12
 80077a0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80077a4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80077a6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80077aa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80077ac:	e841 2300 	strex	r3, r2, [r1]
 80077b0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80077b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d1e3      	bne.n	8007780 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077bc:	4618      	mov	r0, r3
 80077be:	f7fc fe7c 	bl	80044ba <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	2202      	movs	r2, #2
 80077c6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80077d0:	b29b      	uxth	r3, r3
 80077d2:	1ad3      	subs	r3, r2, r3
 80077d4:	b29b      	uxth	r3, r3
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 f8d9 	bl	8007990 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80077de:	e0b3      	b.n	8007948 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80077e4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80077e8:	429a      	cmp	r2, r3
 80077ea:	f040 80ad 	bne.w	8007948 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80077f2:	69db      	ldr	r3, [r3, #28]
 80077f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80077f8:	f040 80a6 	bne.w	8007948 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2202      	movs	r2, #2
 8007800:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007806:	4619      	mov	r1, r3
 8007808:	6878      	ldr	r0, [r7, #4]
 800780a:	f000 f8c1 	bl	8007990 <HAL_UARTEx_RxEventCallback>
      return;
 800780e:	e09b      	b.n	8007948 <HAL_UART_IRQHandler+0x548>
 8007810:	08007b21 	.word	0x08007b21
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800781c:	b29b      	uxth	r3, r3
 800781e:	1ad3      	subs	r3, r2, r3
 8007820:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007828:	b29b      	uxth	r3, r3
 800782a:	2b00      	cmp	r3, #0
 800782c:	f000 808e 	beq.w	800794c <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8007830:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007834:	2b00      	cmp	r3, #0
 8007836:	f000 8089 	beq.w	800794c <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	330c      	adds	r3, #12
 8007840:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007842:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007844:	e853 3f00 	ldrex	r3, [r3]
 8007848:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800784a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800784c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007850:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	330c      	adds	r3, #12
 800785a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800785e:	647a      	str	r2, [r7, #68]	@ 0x44
 8007860:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007862:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007864:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007866:	e841 2300 	strex	r3, r2, [r1]
 800786a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800786c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800786e:	2b00      	cmp	r3, #0
 8007870:	d1e3      	bne.n	800783a <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007872:	687b      	ldr	r3, [r7, #4]
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	3314      	adds	r3, #20
 8007878:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800787a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787c:	e853 3f00 	ldrex	r3, [r3]
 8007880:	623b      	str	r3, [r7, #32]
   return(result);
 8007882:	6a3b      	ldr	r3, [r7, #32]
 8007884:	f023 0301 	bic.w	r3, r3, #1
 8007888:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	3314      	adds	r3, #20
 8007892:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007896:	633a      	str	r2, [r7, #48]	@ 0x30
 8007898:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800789a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800789c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800789e:	e841 2300 	strex	r3, r2, [r1]
 80078a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80078a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d1e3      	bne.n	8007872 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2220      	movs	r2, #32
 80078ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	2200      	movs	r2, #0
 80078b6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	330c      	adds	r3, #12
 80078be:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078c0:	693b      	ldr	r3, [r7, #16]
 80078c2:	e853 3f00 	ldrex	r3, [r3]
 80078c6:	60fb      	str	r3, [r7, #12]
   return(result);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	f023 0310 	bic.w	r3, r3, #16
 80078ce:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80078d2:	687b      	ldr	r3, [r7, #4]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	330c      	adds	r3, #12
 80078d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80078dc:	61fa      	str	r2, [r7, #28]
 80078de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078e0:	69b9      	ldr	r1, [r7, #24]
 80078e2:	69fa      	ldr	r2, [r7, #28]
 80078e4:	e841 2300 	strex	r3, r2, [r1]
 80078e8:	617b      	str	r3, [r7, #20]
   return(result);
 80078ea:	697b      	ldr	r3, [r7, #20]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d1e3      	bne.n	80078b8 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	2202      	movs	r2, #2
 80078f4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078f6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80078fa:	4619      	mov	r1, r3
 80078fc:	6878      	ldr	r0, [r7, #4]
 80078fe:	f000 f847 	bl	8007990 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007902:	e023      	b.n	800794c <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007908:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800790c:	2b00      	cmp	r3, #0
 800790e:	d009      	beq.n	8007924 <HAL_UART_IRQHandler+0x524>
 8007910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007914:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007918:	2b00      	cmp	r3, #0
 800791a:	d003      	beq.n	8007924 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 f910 	bl	8007b42 <UART_Transmit_IT>
    return;
 8007922:	e014      	b.n	800794e <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007924:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007928:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800792c:	2b00      	cmp	r3, #0
 800792e:	d00e      	beq.n	800794e <HAL_UART_IRQHandler+0x54e>
 8007930:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007938:	2b00      	cmp	r3, #0
 800793a:	d008      	beq.n	800794e <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 800793c:	6878      	ldr	r0, [r7, #4]
 800793e:	f000 f950 	bl	8007be2 <UART_EndTransmit_IT>
    return;
 8007942:	e004      	b.n	800794e <HAL_UART_IRQHandler+0x54e>
    return;
 8007944:	bf00      	nop
 8007946:	e002      	b.n	800794e <HAL_UART_IRQHandler+0x54e>
      return;
 8007948:	bf00      	nop
 800794a:	e000      	b.n	800794e <HAL_UART_IRQHandler+0x54e>
      return;
 800794c:	bf00      	nop
  }
}
 800794e:	37e8      	adds	r7, #232	@ 0xe8
 8007950:	46bd      	mov	sp, r7
 8007952:	bd80      	pop	{r7, pc}

08007954 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007954:	b480      	push	{r7}
 8007956:	b083      	sub	sp, #12
 8007958:	af00      	add	r7, sp, #0
 800795a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800795c:	bf00      	nop
 800795e:	370c      	adds	r7, #12
 8007960:	46bd      	mov	sp, r7
 8007962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007966:	4770      	bx	lr

08007968 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007968:	b480      	push	{r7}
 800796a:	b083      	sub	sp, #12
 800796c:	af00      	add	r7, sp, #0
 800796e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800797c:	b480      	push	{r7}
 800797e:	b083      	sub	sp, #12
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007984:	bf00      	nop
 8007986:	370c      	adds	r7, #12
 8007988:	46bd      	mov	sp, r7
 800798a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800798e:	4770      	bx	lr

08007990 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007990:	b480      	push	{r7}
 8007992:	b083      	sub	sp, #12
 8007994:	af00      	add	r7, sp, #0
 8007996:	6078      	str	r0, [r7, #4]
 8007998:	460b      	mov	r3, r1
 800799a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800799c:	bf00      	nop
 800799e:	370c      	adds	r7, #12
 80079a0:	46bd      	mov	sp, r7
 80079a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a6:	4770      	bx	lr

080079a8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b086      	sub	sp, #24
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	603b      	str	r3, [r7, #0]
 80079b4:	4613      	mov	r3, r2
 80079b6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079b8:	e03b      	b.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ba:	6a3b      	ldr	r3, [r7, #32]
 80079bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079c0:	d037      	beq.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079c2:	f7fc fc39 	bl	8004238 <HAL_GetTick>
 80079c6:	4602      	mov	r2, r0
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	1ad3      	subs	r3, r2, r3
 80079cc:	6a3a      	ldr	r2, [r7, #32]
 80079ce:	429a      	cmp	r2, r3
 80079d0:	d302      	bcc.n	80079d8 <UART_WaitOnFlagUntilTimeout+0x30>
 80079d2:	6a3b      	ldr	r3, [r7, #32]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d101      	bne.n	80079dc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80079d8:	2303      	movs	r3, #3
 80079da:	e03a      	b.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	68db      	ldr	r3, [r3, #12]
 80079e2:	f003 0304 	and.w	r3, r3, #4
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d023      	beq.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b80      	cmp	r3, #128	@ 0x80
 80079ee:	d020      	beq.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	2b40      	cmp	r3, #64	@ 0x40
 80079f4:	d01d      	beq.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	f003 0308 	and.w	r3, r3, #8
 8007a00:	2b08      	cmp	r3, #8
 8007a02:	d116      	bne.n	8007a32 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007a04:	2300      	movs	r3, #0
 8007a06:	617b      	str	r3, [r7, #20]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	617b      	str	r3, [r7, #20]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	617b      	str	r3, [r7, #20]
 8007a18:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	f000 f81d 	bl	8007a5a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	2208      	movs	r2, #8
 8007a24:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	2200      	movs	r2, #0
 8007a2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007a2e:	2301      	movs	r3, #1
 8007a30:	e00f      	b.n	8007a52 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	681a      	ldr	r2, [r3, #0]
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	bf0c      	ite	eq
 8007a42:	2301      	moveq	r3, #1
 8007a44:	2300      	movne	r3, #0
 8007a46:	b2db      	uxtb	r3, r3
 8007a48:	461a      	mov	r2, r3
 8007a4a:	79fb      	ldrb	r3, [r7, #7]
 8007a4c:	429a      	cmp	r2, r3
 8007a4e:	d0b4      	beq.n	80079ba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a50:	2300      	movs	r3, #0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3718      	adds	r7, #24
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a5a:	b480      	push	{r7}
 8007a5c:	b095      	sub	sp, #84	@ 0x54
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	330c      	adds	r3, #12
 8007a68:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007a6c:	e853 3f00 	ldrex	r3, [r3]
 8007a70:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007a72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007a78:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	330c      	adds	r3, #12
 8007a80:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007a82:	643a      	str	r2, [r7, #64]	@ 0x40
 8007a84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a86:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007a88:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a8a:	e841 2300 	strex	r3, r2, [r1]
 8007a8e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1e5      	bne.n	8007a62 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	3314      	adds	r3, #20
 8007a9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a9e:	6a3b      	ldr	r3, [r7, #32]
 8007aa0:	e853 3f00 	ldrex	r3, [r3]
 8007aa4:	61fb      	str	r3, [r7, #28]
   return(result);
 8007aa6:	69fb      	ldr	r3, [r7, #28]
 8007aa8:	f023 0301 	bic.w	r3, r3, #1
 8007aac:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	3314      	adds	r3, #20
 8007ab4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ab6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007ab8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007abc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007abe:	e841 2300 	strex	r3, r2, [r1]
 8007ac2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007ac4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1e5      	bne.n	8007a96 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007ace:	2b01      	cmp	r3, #1
 8007ad0:	d119      	bne.n	8007b06 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	330c      	adds	r3, #12
 8007ad8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	e853 3f00 	ldrex	r3, [r3]
 8007ae0:	60bb      	str	r3, [r7, #8]
   return(result);
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	f023 0310 	bic.w	r3, r3, #16
 8007ae8:	647b      	str	r3, [r7, #68]	@ 0x44
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	330c      	adds	r3, #12
 8007af0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007af2:	61ba      	str	r2, [r7, #24]
 8007af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007af6:	6979      	ldr	r1, [r7, #20]
 8007af8:	69ba      	ldr	r2, [r7, #24]
 8007afa:	e841 2300 	strex	r3, r2, [r1]
 8007afe:	613b      	str	r3, [r7, #16]
   return(result);
 8007b00:	693b      	ldr	r3, [r7, #16]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d1e5      	bne.n	8007ad2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2220      	movs	r2, #32
 8007b0a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007b14:	bf00      	nop
 8007b16:	3754      	adds	r7, #84	@ 0x54
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr

08007b20 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007b2c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	2200      	movs	r2, #0
 8007b32:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b34:	68f8      	ldr	r0, [r7, #12]
 8007b36:	f7ff ff21 	bl	800797c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b3a:	bf00      	nop
 8007b3c:	3710      	adds	r7, #16
 8007b3e:	46bd      	mov	sp, r7
 8007b40:	bd80      	pop	{r7, pc}

08007b42 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b42:	b480      	push	{r7}
 8007b44:	b085      	sub	sp, #20
 8007b46:	af00      	add	r7, sp, #0
 8007b48:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007b50:	b2db      	uxtb	r3, r3
 8007b52:	2b21      	cmp	r3, #33	@ 0x21
 8007b54:	d13e      	bne.n	8007bd4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	689b      	ldr	r3, [r3, #8]
 8007b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007b5e:	d114      	bne.n	8007b8a <UART_Transmit_IT+0x48>
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	691b      	ldr	r3, [r3, #16]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d110      	bne.n	8007b8a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6a1b      	ldr	r3, [r3, #32]
 8007b6c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	881b      	ldrh	r3, [r3, #0]
 8007b72:	461a      	mov	r2, r3
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b7c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a1b      	ldr	r3, [r3, #32]
 8007b82:	1c9a      	adds	r2, r3, #2
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	621a      	str	r2, [r3, #32]
 8007b88:	e008      	b.n	8007b9c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a1b      	ldr	r3, [r3, #32]
 8007b8e:	1c59      	adds	r1, r3, #1
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6211      	str	r1, [r2, #32]
 8007b94:	781a      	ldrb	r2, [r3, #0]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007ba0:	b29b      	uxth	r3, r3
 8007ba2:	3b01      	subs	r3, #1
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	687a      	ldr	r2, [r7, #4]
 8007ba8:	4619      	mov	r1, r3
 8007baa:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d10f      	bne.n	8007bd0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	68da      	ldr	r2, [r3, #12]
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007bbe:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68da      	ldr	r2, [r3, #12]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007bce:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
 8007bd2:	e000      	b.n	8007bd6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bd4:	2302      	movs	r3, #2
  }
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr

08007be2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b082      	sub	sp, #8
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	68da      	ldr	r2, [r3, #12]
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007bf8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2220      	movs	r2, #32
 8007bfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c02:	6878      	ldr	r0, [r7, #4]
 8007c04:	f7ff fea6 	bl	8007954 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c08:	2300      	movs	r3, #0
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3708      	adds	r7, #8
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}

08007c12 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c12:	b580      	push	{r7, lr}
 8007c14:	b08c      	sub	sp, #48	@ 0x30
 8007c16:	af00      	add	r7, sp, #0
 8007c18:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b22      	cmp	r3, #34	@ 0x22
 8007c2c:	f040 80aa 	bne.w	8007d84 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c38:	d115      	bne.n	8007c66 <UART_Receive_IT+0x54>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d111      	bne.n	8007c66 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c46:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	685b      	ldr	r3, [r3, #4]
 8007c4e:	b29b      	uxth	r3, r3
 8007c50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c54:	b29a      	uxth	r2, r3
 8007c56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007c58:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c5e:	1c9a      	adds	r2, r3, #2
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	629a      	str	r2, [r3, #40]	@ 0x28
 8007c64:	e024      	b.n	8007cb0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007c6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	689b      	ldr	r3, [r3, #8]
 8007c70:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007c74:	d007      	beq.n	8007c86 <UART_Receive_IT+0x74>
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	689b      	ldr	r3, [r3, #8]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <UART_Receive_IT+0x82>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d106      	bne.n	8007c94 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	685b      	ldr	r3, [r3, #4]
 8007c8c:	b2da      	uxtb	r2, r3
 8007c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007c90:	701a      	strb	r2, [r3, #0]
 8007c92:	e008      	b.n	8007ca6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	685b      	ldr	r3, [r3, #4]
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007ca0:	b2da      	uxtb	r2, r3
 8007ca2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007ca4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007caa:	1c5a      	adds	r2, r3, #1
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	3b01      	subs	r3, #1
 8007cb8:	b29b      	uxth	r3, r3
 8007cba:	687a      	ldr	r2, [r7, #4]
 8007cbc:	4619      	mov	r1, r3
 8007cbe:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d15d      	bne.n	8007d80 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	68da      	ldr	r2, [r3, #12]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0220 	bic.w	r2, r2, #32
 8007cd2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007ce2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	695a      	ldr	r2, [r3, #20]
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f022 0201 	bic.w	r2, r2, #1
 8007cf2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2220      	movs	r2, #32
 8007cf8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2200      	movs	r2, #0
 8007d00:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007d06:	2b01      	cmp	r3, #1
 8007d08:	d135      	bne.n	8007d76 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	330c      	adds	r3, #12
 8007d16:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	e853 3f00 	ldrex	r3, [r3]
 8007d1e:	613b      	str	r3, [r7, #16]
   return(result);
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f023 0310 	bic.w	r3, r3, #16
 8007d26:	627b      	str	r3, [r7, #36]	@ 0x24
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	330c      	adds	r3, #12
 8007d2e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d30:	623a      	str	r2, [r7, #32]
 8007d32:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d34:	69f9      	ldr	r1, [r7, #28]
 8007d36:	6a3a      	ldr	r2, [r7, #32]
 8007d38:	e841 2300 	strex	r3, r2, [r1]
 8007d3c:	61bb      	str	r3, [r7, #24]
   return(result);
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	2b00      	cmp	r3, #0
 8007d42:	d1e5      	bne.n	8007d10 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	f003 0310 	and.w	r3, r3, #16
 8007d4e:	2b10      	cmp	r3, #16
 8007d50:	d10a      	bne.n	8007d68 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d52:	2300      	movs	r3, #0
 8007d54:	60fb      	str	r3, [r7, #12]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	60fb      	str	r3, [r7, #12]
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	685b      	ldr	r3, [r3, #4]
 8007d64:	60fb      	str	r3, [r7, #12]
 8007d66:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	6878      	ldr	r0, [r7, #4]
 8007d70:	f7ff fe0e 	bl	8007990 <HAL_UARTEx_RxEventCallback>
 8007d74:	e002      	b.n	8007d7c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f7ff fdf6 	bl	8007968 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007d7c:	2300      	movs	r3, #0
 8007d7e:	e002      	b.n	8007d86 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e000      	b.n	8007d86 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8007d84:	2302      	movs	r3, #2
  }
}
 8007d86:	4618      	mov	r0, r3
 8007d88:	3730      	adds	r7, #48	@ 0x30
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	bd80      	pop	{r7, pc}
	...

08007d90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d90:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d94:	b0c0      	sub	sp, #256	@ 0x100
 8007d96:	af00      	add	r7, sp, #0
 8007d98:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	691b      	ldr	r3, [r3, #16]
 8007da4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007da8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dac:	68d9      	ldr	r1, [r3, #12]
 8007dae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007db2:	681a      	ldr	r2, [r3, #0]
 8007db4:	ea40 0301 	orr.w	r3, r0, r1
 8007db8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007dba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dbe:	689a      	ldr	r2, [r3, #8]
 8007dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc4:	691b      	ldr	r3, [r3, #16]
 8007dc6:	431a      	orrs	r2, r3
 8007dc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dcc:	695b      	ldr	r3, [r3, #20]
 8007dce:	431a      	orrs	r2, r3
 8007dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dd4:	69db      	ldr	r3, [r3, #28]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	68db      	ldr	r3, [r3, #12]
 8007de4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007de8:	f021 010c 	bic.w	r1, r1, #12
 8007dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007df0:	681a      	ldr	r2, [r3, #0]
 8007df2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007df6:	430b      	orrs	r3, r1
 8007df8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	695b      	ldr	r3, [r3, #20]
 8007e02:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007e06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e0a:	6999      	ldr	r1, [r3, #24]
 8007e0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e10:	681a      	ldr	r2, [r3, #0]
 8007e12:	ea40 0301 	orr.w	r3, r0, r1
 8007e16:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007e18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e1c:	681a      	ldr	r2, [r3, #0]
 8007e1e:	4b8f      	ldr	r3, [pc, #572]	@ (800805c <UART_SetConfig+0x2cc>)
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d005      	beq.n	8007e30 <UART_SetConfig+0xa0>
 8007e24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e28:	681a      	ldr	r2, [r3, #0]
 8007e2a:	4b8d      	ldr	r3, [pc, #564]	@ (8008060 <UART_SetConfig+0x2d0>)
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d104      	bne.n	8007e3a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007e30:	f7fe fc24 	bl	800667c <HAL_RCC_GetPCLK2Freq>
 8007e34:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007e38:	e003      	b.n	8007e42 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007e3a:	f7fe fc0b 	bl	8006654 <HAL_RCC_GetPCLK1Freq>
 8007e3e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e46:	69db      	ldr	r3, [r3, #28]
 8007e48:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e4c:	f040 810c 	bne.w	8008068 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007e50:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e54:	2200      	movs	r2, #0
 8007e56:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007e5a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007e5e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007e62:	4622      	mov	r2, r4
 8007e64:	462b      	mov	r3, r5
 8007e66:	1891      	adds	r1, r2, r2
 8007e68:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007e6a:	415b      	adcs	r3, r3
 8007e6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007e6e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007e72:	4621      	mov	r1, r4
 8007e74:	eb12 0801 	adds.w	r8, r2, r1
 8007e78:	4629      	mov	r1, r5
 8007e7a:	eb43 0901 	adc.w	r9, r3, r1
 8007e7e:	f04f 0200 	mov.w	r2, #0
 8007e82:	f04f 0300 	mov.w	r3, #0
 8007e86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007e8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007e8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007e92:	4690      	mov	r8, r2
 8007e94:	4699      	mov	r9, r3
 8007e96:	4623      	mov	r3, r4
 8007e98:	eb18 0303 	adds.w	r3, r8, r3
 8007e9c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007ea0:	462b      	mov	r3, r5
 8007ea2:	eb49 0303 	adc.w	r3, r9, r3
 8007ea6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007eaa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	2200      	movs	r2, #0
 8007eb2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007eb6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007eba:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007ebe:	460b      	mov	r3, r1
 8007ec0:	18db      	adds	r3, r3, r3
 8007ec2:	653b      	str	r3, [r7, #80]	@ 0x50
 8007ec4:	4613      	mov	r3, r2
 8007ec6:	eb42 0303 	adc.w	r3, r2, r3
 8007eca:	657b      	str	r3, [r7, #84]	@ 0x54
 8007ecc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007ed0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007ed4:	f7f9 f81e 	bl	8000f14 <__aeabi_uldivmod>
 8007ed8:	4602      	mov	r2, r0
 8007eda:	460b      	mov	r3, r1
 8007edc:	4b61      	ldr	r3, [pc, #388]	@ (8008064 <UART_SetConfig+0x2d4>)
 8007ede:	fba3 2302 	umull	r2, r3, r3, r2
 8007ee2:	095b      	lsrs	r3, r3, #5
 8007ee4:	011c      	lsls	r4, r3, #4
 8007ee6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007eea:	2200      	movs	r2, #0
 8007eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007ef0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007ef4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007ef8:	4642      	mov	r2, r8
 8007efa:	464b      	mov	r3, r9
 8007efc:	1891      	adds	r1, r2, r2
 8007efe:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007f00:	415b      	adcs	r3, r3
 8007f02:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007f04:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007f08:	4641      	mov	r1, r8
 8007f0a:	eb12 0a01 	adds.w	sl, r2, r1
 8007f0e:	4649      	mov	r1, r9
 8007f10:	eb43 0b01 	adc.w	fp, r3, r1
 8007f14:	f04f 0200 	mov.w	r2, #0
 8007f18:	f04f 0300 	mov.w	r3, #0
 8007f1c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007f20:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007f24:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007f28:	4692      	mov	sl, r2
 8007f2a:	469b      	mov	fp, r3
 8007f2c:	4643      	mov	r3, r8
 8007f2e:	eb1a 0303 	adds.w	r3, sl, r3
 8007f32:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007f36:	464b      	mov	r3, r9
 8007f38:	eb4b 0303 	adc.w	r3, fp, r3
 8007f3c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f44:	685b      	ldr	r3, [r3, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007f4c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007f50:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007f54:	460b      	mov	r3, r1
 8007f56:	18db      	adds	r3, r3, r3
 8007f58:	643b      	str	r3, [r7, #64]	@ 0x40
 8007f5a:	4613      	mov	r3, r2
 8007f5c:	eb42 0303 	adc.w	r3, r2, r3
 8007f60:	647b      	str	r3, [r7, #68]	@ 0x44
 8007f62:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007f66:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007f6a:	f7f8 ffd3 	bl	8000f14 <__aeabi_uldivmod>
 8007f6e:	4602      	mov	r2, r0
 8007f70:	460b      	mov	r3, r1
 8007f72:	4611      	mov	r1, r2
 8007f74:	4b3b      	ldr	r3, [pc, #236]	@ (8008064 <UART_SetConfig+0x2d4>)
 8007f76:	fba3 2301 	umull	r2, r3, r3, r1
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	2264      	movs	r2, #100	@ 0x64
 8007f7e:	fb02 f303 	mul.w	r3, r2, r3
 8007f82:	1acb      	subs	r3, r1, r3
 8007f84:	00db      	lsls	r3, r3, #3
 8007f86:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007f8a:	4b36      	ldr	r3, [pc, #216]	@ (8008064 <UART_SetConfig+0x2d4>)
 8007f8c:	fba3 2302 	umull	r2, r3, r3, r2
 8007f90:	095b      	lsrs	r3, r3, #5
 8007f92:	005b      	lsls	r3, r3, #1
 8007f94:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007f98:	441c      	add	r4, r3
 8007f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f9e:	2200      	movs	r2, #0
 8007fa0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007fa4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007fa8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007fac:	4642      	mov	r2, r8
 8007fae:	464b      	mov	r3, r9
 8007fb0:	1891      	adds	r1, r2, r2
 8007fb2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007fb4:	415b      	adcs	r3, r3
 8007fb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007fb8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007fbc:	4641      	mov	r1, r8
 8007fbe:	1851      	adds	r1, r2, r1
 8007fc0:	6339      	str	r1, [r7, #48]	@ 0x30
 8007fc2:	4649      	mov	r1, r9
 8007fc4:	414b      	adcs	r3, r1
 8007fc6:	637b      	str	r3, [r7, #52]	@ 0x34
 8007fc8:	f04f 0200 	mov.w	r2, #0
 8007fcc:	f04f 0300 	mov.w	r3, #0
 8007fd0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007fd4:	4659      	mov	r1, fp
 8007fd6:	00cb      	lsls	r3, r1, #3
 8007fd8:	4651      	mov	r1, sl
 8007fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fde:	4651      	mov	r1, sl
 8007fe0:	00ca      	lsls	r2, r1, #3
 8007fe2:	4610      	mov	r0, r2
 8007fe4:	4619      	mov	r1, r3
 8007fe6:	4603      	mov	r3, r0
 8007fe8:	4642      	mov	r2, r8
 8007fea:	189b      	adds	r3, r3, r2
 8007fec:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007ff0:	464b      	mov	r3, r9
 8007ff2:	460a      	mov	r2, r1
 8007ff4:	eb42 0303 	adc.w	r3, r2, r3
 8007ff8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008000:	685b      	ldr	r3, [r3, #4]
 8008002:	2200      	movs	r2, #0
 8008004:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8008008:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800800c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8008010:	460b      	mov	r3, r1
 8008012:	18db      	adds	r3, r3, r3
 8008014:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008016:	4613      	mov	r3, r2
 8008018:	eb42 0303 	adc.w	r3, r2, r3
 800801c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800801e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8008022:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8008026:	f7f8 ff75 	bl	8000f14 <__aeabi_uldivmod>
 800802a:	4602      	mov	r2, r0
 800802c:	460b      	mov	r3, r1
 800802e:	4b0d      	ldr	r3, [pc, #52]	@ (8008064 <UART_SetConfig+0x2d4>)
 8008030:	fba3 1302 	umull	r1, r3, r3, r2
 8008034:	095b      	lsrs	r3, r3, #5
 8008036:	2164      	movs	r1, #100	@ 0x64
 8008038:	fb01 f303 	mul.w	r3, r1, r3
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	00db      	lsls	r3, r3, #3
 8008040:	3332      	adds	r3, #50	@ 0x32
 8008042:	4a08      	ldr	r2, [pc, #32]	@ (8008064 <UART_SetConfig+0x2d4>)
 8008044:	fba2 2303 	umull	r2, r3, r2, r3
 8008048:	095b      	lsrs	r3, r3, #5
 800804a:	f003 0207 	and.w	r2, r3, #7
 800804e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	4422      	add	r2, r4
 8008056:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008058:	e106      	b.n	8008268 <UART_SetConfig+0x4d8>
 800805a:	bf00      	nop
 800805c:	40011000 	.word	0x40011000
 8008060:	40011400 	.word	0x40011400
 8008064:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800806c:	2200      	movs	r2, #0
 800806e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8008072:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8008076:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800807a:	4642      	mov	r2, r8
 800807c:	464b      	mov	r3, r9
 800807e:	1891      	adds	r1, r2, r2
 8008080:	6239      	str	r1, [r7, #32]
 8008082:	415b      	adcs	r3, r3
 8008084:	627b      	str	r3, [r7, #36]	@ 0x24
 8008086:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800808a:	4641      	mov	r1, r8
 800808c:	1854      	adds	r4, r2, r1
 800808e:	4649      	mov	r1, r9
 8008090:	eb43 0501 	adc.w	r5, r3, r1
 8008094:	f04f 0200 	mov.w	r2, #0
 8008098:	f04f 0300 	mov.w	r3, #0
 800809c:	00eb      	lsls	r3, r5, #3
 800809e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80080a2:	00e2      	lsls	r2, r4, #3
 80080a4:	4614      	mov	r4, r2
 80080a6:	461d      	mov	r5, r3
 80080a8:	4643      	mov	r3, r8
 80080aa:	18e3      	adds	r3, r4, r3
 80080ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80080b0:	464b      	mov	r3, r9
 80080b2:	eb45 0303 	adc.w	r3, r5, r3
 80080b6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80080ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080be:	685b      	ldr	r3, [r3, #4]
 80080c0:	2200      	movs	r2, #0
 80080c2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80080c6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80080ca:	f04f 0200 	mov.w	r2, #0
 80080ce:	f04f 0300 	mov.w	r3, #0
 80080d2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80080d6:	4629      	mov	r1, r5
 80080d8:	008b      	lsls	r3, r1, #2
 80080da:	4621      	mov	r1, r4
 80080dc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080e0:	4621      	mov	r1, r4
 80080e2:	008a      	lsls	r2, r1, #2
 80080e4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80080e8:	f7f8 ff14 	bl	8000f14 <__aeabi_uldivmod>
 80080ec:	4602      	mov	r2, r0
 80080ee:	460b      	mov	r3, r1
 80080f0:	4b60      	ldr	r3, [pc, #384]	@ (8008274 <UART_SetConfig+0x4e4>)
 80080f2:	fba3 2302 	umull	r2, r3, r3, r2
 80080f6:	095b      	lsrs	r3, r3, #5
 80080f8:	011c      	lsls	r4, r3, #4
 80080fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80080fe:	2200      	movs	r2, #0
 8008100:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8008104:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8008108:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800810c:	4642      	mov	r2, r8
 800810e:	464b      	mov	r3, r9
 8008110:	1891      	adds	r1, r2, r2
 8008112:	61b9      	str	r1, [r7, #24]
 8008114:	415b      	adcs	r3, r3
 8008116:	61fb      	str	r3, [r7, #28]
 8008118:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800811c:	4641      	mov	r1, r8
 800811e:	1851      	adds	r1, r2, r1
 8008120:	6139      	str	r1, [r7, #16]
 8008122:	4649      	mov	r1, r9
 8008124:	414b      	adcs	r3, r1
 8008126:	617b      	str	r3, [r7, #20]
 8008128:	f04f 0200 	mov.w	r2, #0
 800812c:	f04f 0300 	mov.w	r3, #0
 8008130:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008134:	4659      	mov	r1, fp
 8008136:	00cb      	lsls	r3, r1, #3
 8008138:	4651      	mov	r1, sl
 800813a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800813e:	4651      	mov	r1, sl
 8008140:	00ca      	lsls	r2, r1, #3
 8008142:	4610      	mov	r0, r2
 8008144:	4619      	mov	r1, r3
 8008146:	4603      	mov	r3, r0
 8008148:	4642      	mov	r2, r8
 800814a:	189b      	adds	r3, r3, r2
 800814c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008150:	464b      	mov	r3, r9
 8008152:	460a      	mov	r2, r1
 8008154:	eb42 0303 	adc.w	r3, r2, r3
 8008158:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800815c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	2200      	movs	r2, #0
 8008164:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008166:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008168:	f04f 0200 	mov.w	r2, #0
 800816c:	f04f 0300 	mov.w	r3, #0
 8008170:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008174:	4649      	mov	r1, r9
 8008176:	008b      	lsls	r3, r1, #2
 8008178:	4641      	mov	r1, r8
 800817a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800817e:	4641      	mov	r1, r8
 8008180:	008a      	lsls	r2, r1, #2
 8008182:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008186:	f7f8 fec5 	bl	8000f14 <__aeabi_uldivmod>
 800818a:	4602      	mov	r2, r0
 800818c:	460b      	mov	r3, r1
 800818e:	4611      	mov	r1, r2
 8008190:	4b38      	ldr	r3, [pc, #224]	@ (8008274 <UART_SetConfig+0x4e4>)
 8008192:	fba3 2301 	umull	r2, r3, r3, r1
 8008196:	095b      	lsrs	r3, r3, #5
 8008198:	2264      	movs	r2, #100	@ 0x64
 800819a:	fb02 f303 	mul.w	r3, r2, r3
 800819e:	1acb      	subs	r3, r1, r3
 80081a0:	011b      	lsls	r3, r3, #4
 80081a2:	3332      	adds	r3, #50	@ 0x32
 80081a4:	4a33      	ldr	r2, [pc, #204]	@ (8008274 <UART_SetConfig+0x4e4>)
 80081a6:	fba2 2303 	umull	r2, r3, r2, r3
 80081aa:	095b      	lsrs	r3, r3, #5
 80081ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80081b0:	441c      	add	r4, r3
 80081b2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80081b6:	2200      	movs	r2, #0
 80081b8:	673b      	str	r3, [r7, #112]	@ 0x70
 80081ba:	677a      	str	r2, [r7, #116]	@ 0x74
 80081bc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80081c0:	4642      	mov	r2, r8
 80081c2:	464b      	mov	r3, r9
 80081c4:	1891      	adds	r1, r2, r2
 80081c6:	60b9      	str	r1, [r7, #8]
 80081c8:	415b      	adcs	r3, r3
 80081ca:	60fb      	str	r3, [r7, #12]
 80081cc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80081d0:	4641      	mov	r1, r8
 80081d2:	1851      	adds	r1, r2, r1
 80081d4:	6039      	str	r1, [r7, #0]
 80081d6:	4649      	mov	r1, r9
 80081d8:	414b      	adcs	r3, r1
 80081da:	607b      	str	r3, [r7, #4]
 80081dc:	f04f 0200 	mov.w	r2, #0
 80081e0:	f04f 0300 	mov.w	r3, #0
 80081e4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80081e8:	4659      	mov	r1, fp
 80081ea:	00cb      	lsls	r3, r1, #3
 80081ec:	4651      	mov	r1, sl
 80081ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80081f2:	4651      	mov	r1, sl
 80081f4:	00ca      	lsls	r2, r1, #3
 80081f6:	4610      	mov	r0, r2
 80081f8:	4619      	mov	r1, r3
 80081fa:	4603      	mov	r3, r0
 80081fc:	4642      	mov	r2, r8
 80081fe:	189b      	adds	r3, r3, r2
 8008200:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008202:	464b      	mov	r3, r9
 8008204:	460a      	mov	r2, r1
 8008206:	eb42 0303 	adc.w	r3, r2, r3
 800820a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800820c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008210:	685b      	ldr	r3, [r3, #4]
 8008212:	2200      	movs	r2, #0
 8008214:	663b      	str	r3, [r7, #96]	@ 0x60
 8008216:	667a      	str	r2, [r7, #100]	@ 0x64
 8008218:	f04f 0200 	mov.w	r2, #0
 800821c:	f04f 0300 	mov.w	r3, #0
 8008220:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8008224:	4649      	mov	r1, r9
 8008226:	008b      	lsls	r3, r1, #2
 8008228:	4641      	mov	r1, r8
 800822a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800822e:	4641      	mov	r1, r8
 8008230:	008a      	lsls	r2, r1, #2
 8008232:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8008236:	f7f8 fe6d 	bl	8000f14 <__aeabi_uldivmod>
 800823a:	4602      	mov	r2, r0
 800823c:	460b      	mov	r3, r1
 800823e:	4b0d      	ldr	r3, [pc, #52]	@ (8008274 <UART_SetConfig+0x4e4>)
 8008240:	fba3 1302 	umull	r1, r3, r3, r2
 8008244:	095b      	lsrs	r3, r3, #5
 8008246:	2164      	movs	r1, #100	@ 0x64
 8008248:	fb01 f303 	mul.w	r3, r1, r3
 800824c:	1ad3      	subs	r3, r2, r3
 800824e:	011b      	lsls	r3, r3, #4
 8008250:	3332      	adds	r3, #50	@ 0x32
 8008252:	4a08      	ldr	r2, [pc, #32]	@ (8008274 <UART_SetConfig+0x4e4>)
 8008254:	fba2 2303 	umull	r2, r3, r2, r3
 8008258:	095b      	lsrs	r3, r3, #5
 800825a:	f003 020f 	and.w	r2, r3, #15
 800825e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	4422      	add	r2, r4
 8008266:	609a      	str	r2, [r3, #8]
}
 8008268:	bf00      	nop
 800826a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800826e:	46bd      	mov	sp, r7
 8008270:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008274:	51eb851f 	.word	0x51eb851f

08008278 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008278:	b084      	sub	sp, #16
 800827a:	b580      	push	{r7, lr}
 800827c:	b084      	sub	sp, #16
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	f107 001c 	add.w	r0, r7, #28
 8008286:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800828a:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800828e:	2b01      	cmp	r3, #1
 8008290:	d123      	bne.n	80082da <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008296:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 80082a6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80082aa:	687a      	ldr	r2, [r7, #4]
 80082ac:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	68db      	ldr	r3, [r3, #12]
 80082b2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80082ba:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80082be:	2b01      	cmp	r3, #1
 80082c0:	d105      	bne.n	80082ce <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	68db      	ldr	r3, [r3, #12]
 80082c6:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082ce:	6878      	ldr	r0, [r7, #4]
 80082d0:	f001 fae8 	bl	80098a4 <USB_CoreReset>
 80082d4:	4603      	mov	r3, r0
 80082d6:	73fb      	strb	r3, [r7, #15]
 80082d8:	e01b      	b.n	8008312 <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80082e6:	6878      	ldr	r0, [r7, #4]
 80082e8:	f001 fadc 	bl	80098a4 <USB_CoreReset>
 80082ec:	4603      	mov	r3, r0
 80082ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80082f0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d106      	bne.n	8008306 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80082fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	639a      	str	r2, [r3, #56]	@ 0x38
 8008304:	e005      	b.n	8008312 <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800830a:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8008312:	7fbb      	ldrb	r3, [r7, #30]
 8008314:	2b01      	cmp	r3, #1
 8008316:	d10b      	bne.n	8008330 <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	689b      	ldr	r3, [r3, #8]
 800831c:	f043 0206 	orr.w	r2, r3, #6
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	689b      	ldr	r3, [r3, #8]
 8008328:	f043 0220 	orr.w	r2, r3, #32
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8008330:	7bfb      	ldrb	r3, [r7, #15]
}
 8008332:	4618      	mov	r0, r3
 8008334:	3710      	adds	r7, #16
 8008336:	46bd      	mov	sp, r7
 8008338:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800833c:	b004      	add	sp, #16
 800833e:	4770      	bx	lr

08008340 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8008340:	b480      	push	{r7}
 8008342:	b087      	sub	sp, #28
 8008344:	af00      	add	r7, sp, #0
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800834e:	79fb      	ldrb	r3, [r7, #7]
 8008350:	2b02      	cmp	r3, #2
 8008352:	d165      	bne.n	8008420 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8008354:	68bb      	ldr	r3, [r7, #8]
 8008356:	4a41      	ldr	r2, [pc, #260]	@ (800845c <USB_SetTurnaroundTime+0x11c>)
 8008358:	4293      	cmp	r3, r2
 800835a:	d906      	bls.n	800836a <USB_SetTurnaroundTime+0x2a>
 800835c:	68bb      	ldr	r3, [r7, #8]
 800835e:	4a40      	ldr	r2, [pc, #256]	@ (8008460 <USB_SetTurnaroundTime+0x120>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d202      	bcs.n	800836a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8008364:	230f      	movs	r3, #15
 8008366:	617b      	str	r3, [r7, #20]
 8008368:	e062      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800836a:	68bb      	ldr	r3, [r7, #8]
 800836c:	4a3c      	ldr	r2, [pc, #240]	@ (8008460 <USB_SetTurnaroundTime+0x120>)
 800836e:	4293      	cmp	r3, r2
 8008370:	d306      	bcc.n	8008380 <USB_SetTurnaroundTime+0x40>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	4a3b      	ldr	r2, [pc, #236]	@ (8008464 <USB_SetTurnaroundTime+0x124>)
 8008376:	4293      	cmp	r3, r2
 8008378:	d202      	bcs.n	8008380 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800837a:	230e      	movs	r3, #14
 800837c:	617b      	str	r3, [r7, #20]
 800837e:	e057      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8008380:	68bb      	ldr	r3, [r7, #8]
 8008382:	4a38      	ldr	r2, [pc, #224]	@ (8008464 <USB_SetTurnaroundTime+0x124>)
 8008384:	4293      	cmp	r3, r2
 8008386:	d306      	bcc.n	8008396 <USB_SetTurnaroundTime+0x56>
 8008388:	68bb      	ldr	r3, [r7, #8]
 800838a:	4a37      	ldr	r2, [pc, #220]	@ (8008468 <USB_SetTurnaroundTime+0x128>)
 800838c:	4293      	cmp	r3, r2
 800838e:	d202      	bcs.n	8008396 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8008390:	230d      	movs	r3, #13
 8008392:	617b      	str	r3, [r7, #20]
 8008394:	e04c      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8008396:	68bb      	ldr	r3, [r7, #8]
 8008398:	4a33      	ldr	r2, [pc, #204]	@ (8008468 <USB_SetTurnaroundTime+0x128>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d306      	bcc.n	80083ac <USB_SetTurnaroundTime+0x6c>
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	4a32      	ldr	r2, [pc, #200]	@ (800846c <USB_SetTurnaroundTime+0x12c>)
 80083a2:	4293      	cmp	r3, r2
 80083a4:	d802      	bhi.n	80083ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80083a6:	230c      	movs	r3, #12
 80083a8:	617b      	str	r3, [r7, #20]
 80083aa:	e041      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80083ac:	68bb      	ldr	r3, [r7, #8]
 80083ae:	4a2f      	ldr	r2, [pc, #188]	@ (800846c <USB_SetTurnaroundTime+0x12c>)
 80083b0:	4293      	cmp	r3, r2
 80083b2:	d906      	bls.n	80083c2 <USB_SetTurnaroundTime+0x82>
 80083b4:	68bb      	ldr	r3, [r7, #8]
 80083b6:	4a2e      	ldr	r2, [pc, #184]	@ (8008470 <USB_SetTurnaroundTime+0x130>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d802      	bhi.n	80083c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80083bc:	230b      	movs	r3, #11
 80083be:	617b      	str	r3, [r7, #20]
 80083c0:	e036      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	4a2a      	ldr	r2, [pc, #168]	@ (8008470 <USB_SetTurnaroundTime+0x130>)
 80083c6:	4293      	cmp	r3, r2
 80083c8:	d906      	bls.n	80083d8 <USB_SetTurnaroundTime+0x98>
 80083ca:	68bb      	ldr	r3, [r7, #8]
 80083cc:	4a29      	ldr	r2, [pc, #164]	@ (8008474 <USB_SetTurnaroundTime+0x134>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d802      	bhi.n	80083d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80083d2:	230a      	movs	r3, #10
 80083d4:	617b      	str	r3, [r7, #20]
 80083d6:	e02b      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80083d8:	68bb      	ldr	r3, [r7, #8]
 80083da:	4a26      	ldr	r2, [pc, #152]	@ (8008474 <USB_SetTurnaroundTime+0x134>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d906      	bls.n	80083ee <USB_SetTurnaroundTime+0xae>
 80083e0:	68bb      	ldr	r3, [r7, #8]
 80083e2:	4a25      	ldr	r2, [pc, #148]	@ (8008478 <USB_SetTurnaroundTime+0x138>)
 80083e4:	4293      	cmp	r3, r2
 80083e6:	d202      	bcs.n	80083ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80083e8:	2309      	movs	r3, #9
 80083ea:	617b      	str	r3, [r7, #20]
 80083ec:	e020      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	4a21      	ldr	r2, [pc, #132]	@ (8008478 <USB_SetTurnaroundTime+0x138>)
 80083f2:	4293      	cmp	r3, r2
 80083f4:	d306      	bcc.n	8008404 <USB_SetTurnaroundTime+0xc4>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	4a20      	ldr	r2, [pc, #128]	@ (800847c <USB_SetTurnaroundTime+0x13c>)
 80083fa:	4293      	cmp	r3, r2
 80083fc:	d802      	bhi.n	8008404 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80083fe:	2308      	movs	r3, #8
 8008400:	617b      	str	r3, [r7, #20]
 8008402:	e015      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	4a1d      	ldr	r2, [pc, #116]	@ (800847c <USB_SetTurnaroundTime+0x13c>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d906      	bls.n	800841a <USB_SetTurnaroundTime+0xda>
 800840c:	68bb      	ldr	r3, [r7, #8]
 800840e:	4a1c      	ldr	r2, [pc, #112]	@ (8008480 <USB_SetTurnaroundTime+0x140>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d202      	bcs.n	800841a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8008414:	2307      	movs	r3, #7
 8008416:	617b      	str	r3, [r7, #20]
 8008418:	e00a      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800841a:	2306      	movs	r3, #6
 800841c:	617b      	str	r3, [r7, #20]
 800841e:	e007      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8008420:	79fb      	ldrb	r3, [r7, #7]
 8008422:	2b00      	cmp	r3, #0
 8008424:	d102      	bne.n	800842c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8008426:	2309      	movs	r3, #9
 8008428:	617b      	str	r3, [r7, #20]
 800842a:	e001      	b.n	8008430 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800842c:	2309      	movs	r3, #9
 800842e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	68db      	ldr	r3, [r3, #12]
 8008434:	f423 5270 	bic.w	r2, r3, #15360	@ 0x3c00
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800843c:	68fb      	ldr	r3, [r7, #12]
 800843e:	68da      	ldr	r2, [r3, #12]
 8008440:	697b      	ldr	r3, [r7, #20]
 8008442:	029b      	lsls	r3, r3, #10
 8008444:	f403 5370 	and.w	r3, r3, #15360	@ 0x3c00
 8008448:	431a      	orrs	r2, r3
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800844e:	2300      	movs	r3, #0
}
 8008450:	4618      	mov	r0, r3
 8008452:	371c      	adds	r7, #28
 8008454:	46bd      	mov	sp, r7
 8008456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800845a:	4770      	bx	lr
 800845c:	00d8acbf 	.word	0x00d8acbf
 8008460:	00e4e1c0 	.word	0x00e4e1c0
 8008464:	00f42400 	.word	0x00f42400
 8008468:	01067380 	.word	0x01067380
 800846c:	011a499f 	.word	0x011a499f
 8008470:	01312cff 	.word	0x01312cff
 8008474:	014ca43f 	.word	0x014ca43f
 8008478:	016e3600 	.word	0x016e3600
 800847c:	01a6ab1f 	.word	0x01a6ab1f
 8008480:	01e84800 	.word	0x01e84800

08008484 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008484:	b480      	push	{r7}
 8008486:	b083      	sub	sp, #12
 8008488:	af00      	add	r7, sp, #0
 800848a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	689b      	ldr	r3, [r3, #8]
 8008490:	f043 0201 	orr.w	r2, r3, #1
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008498:	2300      	movs	r3, #0
}
 800849a:	4618      	mov	r0, r3
 800849c:	370c      	adds	r7, #12
 800849e:	46bd      	mov	sp, r7
 80084a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a4:	4770      	bx	lr

080084a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80084a6:	b480      	push	{r7}
 80084a8:	b083      	sub	sp, #12
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	689b      	ldr	r3, [r3, #8]
 80084b2:	f023 0201 	bic.w	r2, r3, #1
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80084ba:	2300      	movs	r3, #0
}
 80084bc:	4618      	mov	r0, r3
 80084be:	370c      	adds	r7, #12
 80084c0:	46bd      	mov	sp, r7
 80084c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c6:	4770      	bx	lr

080084c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80084c8:	b580      	push	{r7, lr}
 80084ca:	b084      	sub	sp, #16
 80084cc:	af00      	add	r7, sp, #0
 80084ce:	6078      	str	r0, [r7, #4]
 80084d0:	460b      	mov	r3, r1
 80084d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80084d4:	2300      	movs	r3, #0
 80084d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	68db      	ldr	r3, [r3, #12]
 80084dc:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80084e4:	78fb      	ldrb	r3, [r7, #3]
 80084e6:	2b01      	cmp	r3, #1
 80084e8:	d115      	bne.n	8008516 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	68db      	ldr	r3, [r3, #12]
 80084ee:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 80084f6:	200a      	movs	r0, #10
 80084f8:	f7fb feaa 	bl	8004250 <HAL_Delay>
      ms += 10U;
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	330a      	adds	r3, #10
 8008500:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008502:	6878      	ldr	r0, [r7, #4]
 8008504:	f001 f93f 	bl	8009786 <USB_GetMode>
 8008508:	4603      	mov	r3, r0
 800850a:	2b01      	cmp	r3, #1
 800850c:	d01e      	beq.n	800854c <USB_SetCurrentMode+0x84>
 800850e:	68fb      	ldr	r3, [r7, #12]
 8008510:	2bc7      	cmp	r3, #199	@ 0xc7
 8008512:	d9f0      	bls.n	80084f6 <USB_SetCurrentMode+0x2e>
 8008514:	e01a      	b.n	800854c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008516:	78fb      	ldrb	r3, [r7, #3]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d115      	bne.n	8008548 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68db      	ldr	r3, [r3, #12]
 8008520:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8008528:	200a      	movs	r0, #10
 800852a:	f7fb fe91 	bl	8004250 <HAL_Delay>
      ms += 10U;
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	330a      	adds	r3, #10
 8008532:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 f926 	bl	8009786 <USB_GetMode>
 800853a:	4603      	mov	r3, r0
 800853c:	2b00      	cmp	r3, #0
 800853e:	d005      	beq.n	800854c <USB_SetCurrentMode+0x84>
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	2bc7      	cmp	r3, #199	@ 0xc7
 8008544:	d9f0      	bls.n	8008528 <USB_SetCurrentMode+0x60>
 8008546:	e001      	b.n	800854c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008548:	2301      	movs	r3, #1
 800854a:	e005      	b.n	8008558 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	2bc8      	cmp	r3, #200	@ 0xc8
 8008550:	d101      	bne.n	8008556 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008552:	2301      	movs	r3, #1
 8008554:	e000      	b.n	8008558 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008556:	2300      	movs	r3, #0
}
 8008558:	4618      	mov	r0, r3
 800855a:	3710      	adds	r7, #16
 800855c:	46bd      	mov	sp, r7
 800855e:	bd80      	pop	{r7, pc}

08008560 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008560:	b084      	sub	sp, #16
 8008562:	b580      	push	{r7, lr}
 8008564:	b086      	sub	sp, #24
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800856e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008572:	2300      	movs	r3, #0
 8008574:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800857a:	2300      	movs	r3, #0
 800857c:	613b      	str	r3, [r7, #16]
 800857e:	e009      	b.n	8008594 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008580:	687a      	ldr	r2, [r7, #4]
 8008582:	693b      	ldr	r3, [r7, #16]
 8008584:	3340      	adds	r3, #64	@ 0x40
 8008586:	009b      	lsls	r3, r3, #2
 8008588:	4413      	add	r3, r2
 800858a:	2200      	movs	r2, #0
 800858c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800858e:	693b      	ldr	r3, [r7, #16]
 8008590:	3301      	adds	r3, #1
 8008592:	613b      	str	r3, [r7, #16]
 8008594:	693b      	ldr	r3, [r7, #16]
 8008596:	2b0e      	cmp	r3, #14
 8008598:	d9f2      	bls.n	8008580 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800859a:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 800859e:	2b00      	cmp	r3, #0
 80085a0:	d11c      	bne.n	80085dc <USB_DevInit+0x7c>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80085a8:	685b      	ldr	r3, [r3, #4]
 80085aa:	68fa      	ldr	r2, [r7, #12]
 80085ac:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80085b0:	f043 0302 	orr.w	r3, r3, #2
 80085b4:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80085b6:	687b      	ldr	r3, [r7, #4]
 80085b8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ba:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80085c2:	687b      	ldr	r3, [r7, #4]
 80085c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085c6:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085d2:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	639a      	str	r2, [r3, #56]	@ 0x38
 80085da:	e00b      	b.n	80085f4 <USB_DevInit+0x94>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085e0:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	639a      	str	r2, [r3, #56]	@ 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80085ec:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80085fa:	461a      	mov	r2, r3
 80085fc:	2300      	movs	r3, #0
 80085fe:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008600:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8008604:	2b01      	cmp	r3, #1
 8008606:	d10d      	bne.n	8008624 <USB_DevInit+0xc4>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8008608:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800860c:	2b00      	cmp	r3, #0
 800860e:	d104      	bne.n	800861a <USB_DevInit+0xba>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008610:	2100      	movs	r1, #0
 8008612:	6878      	ldr	r0, [r7, #4]
 8008614:	f000 f968 	bl	80088e8 <USB_SetDevSpeed>
 8008618:	e008      	b.n	800862c <USB_DevInit+0xcc>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800861a:	2101      	movs	r1, #1
 800861c:	6878      	ldr	r0, [r7, #4]
 800861e:	f000 f963 	bl	80088e8 <USB_SetDevSpeed>
 8008622:	e003      	b.n	800862c <USB_DevInit+0xcc>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008624:	2103      	movs	r1, #3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f95e 	bl	80088e8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800862c:	2110      	movs	r1, #16
 800862e:	6878      	ldr	r0, [r7, #4]
 8008630:	f000 f8fa 	bl	8008828 <USB_FlushTxFifo>
 8008634:	4603      	mov	r3, r0
 8008636:	2b00      	cmp	r3, #0
 8008638:	d001      	beq.n	800863e <USB_DevInit+0xde>
  {
    ret = HAL_ERROR;
 800863a:	2301      	movs	r3, #1
 800863c:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	f000 f924 	bl	800888c <USB_FlushRxFifo>
 8008644:	4603      	mov	r3, r0
 8008646:	2b00      	cmp	r3, #0
 8008648:	d001      	beq.n	800864e <USB_DevInit+0xee>
  {
    ret = HAL_ERROR;
 800864a:	2301      	movs	r3, #1
 800864c:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800864e:	68fb      	ldr	r3, [r7, #12]
 8008650:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008654:	461a      	mov	r2, r3
 8008656:	2300      	movs	r3, #0
 8008658:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008660:	461a      	mov	r2, r3
 8008662:	2300      	movs	r3, #0
 8008664:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800866c:	461a      	mov	r2, r3
 800866e:	2300      	movs	r3, #0
 8008670:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008672:	2300      	movs	r3, #0
 8008674:	613b      	str	r3, [r7, #16]
 8008676:	e043      	b.n	8008700 <USB_DevInit+0x1a0>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	015a      	lsls	r2, r3, #5
 800867c:	68fb      	ldr	r3, [r7, #12]
 800867e:	4413      	add	r3, r2
 8008680:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800868a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800868e:	d118      	bne.n	80086c2 <USB_DevInit+0x162>
    {
      if (i == 0U)
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	2b00      	cmp	r3, #0
 8008694:	d10a      	bne.n	80086ac <USB_DevInit+0x14c>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008696:	693b      	ldr	r3, [r7, #16]
 8008698:	015a      	lsls	r2, r3, #5
 800869a:	68fb      	ldr	r3, [r7, #12]
 800869c:	4413      	add	r3, r2
 800869e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086a2:	461a      	mov	r2, r3
 80086a4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80086a8:	6013      	str	r3, [r2, #0]
 80086aa:	e013      	b.n	80086d4 <USB_DevInit+0x174>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80086ac:	693b      	ldr	r3, [r7, #16]
 80086ae:	015a      	lsls	r2, r3, #5
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	4413      	add	r3, r2
 80086b4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086b8:	461a      	mov	r2, r3
 80086ba:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 80086be:	6013      	str	r3, [r2, #0]
 80086c0:	e008      	b.n	80086d4 <USB_DevInit+0x174>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	015a      	lsls	r2, r3, #5
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	4413      	add	r3, r2
 80086ca:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086ce:	461a      	mov	r2, r3
 80086d0:	2300      	movs	r3, #0
 80086d2:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80086d4:	693b      	ldr	r3, [r7, #16]
 80086d6:	015a      	lsls	r2, r3, #5
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	4413      	add	r3, r2
 80086dc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086e0:	461a      	mov	r2, r3
 80086e2:	2300      	movs	r3, #0
 80086e4:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80086e6:	693b      	ldr	r3, [r7, #16]
 80086e8:	015a      	lsls	r2, r3, #5
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	4413      	add	r3, r2
 80086ee:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80086f2:	461a      	mov	r2, r3
 80086f4:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80086f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80086fa:	693b      	ldr	r3, [r7, #16]
 80086fc:	3301      	adds	r3, #1
 80086fe:	613b      	str	r3, [r7, #16]
 8008700:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8008704:	461a      	mov	r2, r3
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	4293      	cmp	r3, r2
 800870a:	d3b5      	bcc.n	8008678 <USB_DevInit+0x118>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800870c:	2300      	movs	r3, #0
 800870e:	613b      	str	r3, [r7, #16]
 8008710:	e043      	b.n	800879a <USB_DevInit+0x23a>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008712:	693b      	ldr	r3, [r7, #16]
 8008714:	015a      	lsls	r2, r3, #5
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	4413      	add	r3, r2
 800871a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008724:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008728:	d118      	bne.n	800875c <USB_DevInit+0x1fc>
    {
      if (i == 0U)
 800872a:	693b      	ldr	r3, [r7, #16]
 800872c:	2b00      	cmp	r3, #0
 800872e:	d10a      	bne.n	8008746 <USB_DevInit+0x1e6>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008730:	693b      	ldr	r3, [r7, #16]
 8008732:	015a      	lsls	r2, r3, #5
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	4413      	add	r3, r2
 8008738:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800873c:	461a      	mov	r2, r3
 800873e:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8008742:	6013      	str	r3, [r2, #0]
 8008744:	e013      	b.n	800876e <USB_DevInit+0x20e>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	015a      	lsls	r2, r3, #5
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	4413      	add	r3, r2
 800874e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008752:	461a      	mov	r2, r3
 8008754:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8008758:	6013      	str	r3, [r2, #0]
 800875a:	e008      	b.n	800876e <USB_DevInit+0x20e>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	68fb      	ldr	r3, [r7, #12]
 8008762:	4413      	add	r3, r2
 8008764:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008768:	461a      	mov	r2, r3
 800876a:	2300      	movs	r3, #0
 800876c:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800876e:	693b      	ldr	r3, [r7, #16]
 8008770:	015a      	lsls	r2, r3, #5
 8008772:	68fb      	ldr	r3, [r7, #12]
 8008774:	4413      	add	r3, r2
 8008776:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800877a:	461a      	mov	r2, r3
 800877c:	2300      	movs	r3, #0
 800877e:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	015a      	lsls	r2, r3, #5
 8008784:	68fb      	ldr	r3, [r7, #12]
 8008786:	4413      	add	r3, r2
 8008788:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800878c:	461a      	mov	r2, r3
 800878e:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8008792:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008794:	693b      	ldr	r3, [r7, #16]
 8008796:	3301      	adds	r3, #1
 8008798:	613b      	str	r3, [r7, #16]
 800879a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800879e:	461a      	mov	r2, r3
 80087a0:	693b      	ldr	r3, [r7, #16]
 80087a2:	4293      	cmp	r3, r2
 80087a4:	d3b5      	bcc.n	8008712 <USB_DevInit+0x1b2>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80087ac:	691b      	ldr	r3, [r3, #16]
 80087ae:	68fa      	ldr	r2, [r7, #12]
 80087b0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80087b4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80087b8:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	2200      	movs	r2, #0
 80087be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 80087c6:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80087c8:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 80087cc:	2b00      	cmp	r3, #0
 80087ce:	d105      	bne.n	80087dc <USB_DevInit+0x27c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	699b      	ldr	r3, [r3, #24]
 80087d4:	f043 0210 	orr.w	r2, r3, #16
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	699a      	ldr	r2, [r3, #24]
 80087e0:	4b10      	ldr	r3, [pc, #64]	@ (8008824 <USB_DevInit+0x2c4>)
 80087e2:	4313      	orrs	r3, r2
 80087e4:	687a      	ldr	r2, [r7, #4]
 80087e6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80087e8:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d005      	beq.n	80087fc <USB_DevInit+0x29c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	699b      	ldr	r3, [r3, #24]
 80087f4:	f043 0208 	orr.w	r2, r3, #8
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80087fc:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8008800:	2b01      	cmp	r3, #1
 8008802:	d107      	bne.n	8008814 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	699b      	ldr	r3, [r3, #24]
 8008808:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800880c:	f043 0304 	orr.w	r3, r3, #4
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008814:	7dfb      	ldrb	r3, [r7, #23]
}
 8008816:	4618      	mov	r0, r3
 8008818:	3718      	adds	r7, #24
 800881a:	46bd      	mov	sp, r7
 800881c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008820:	b004      	add	sp, #16
 8008822:	4770      	bx	lr
 8008824:	803c3800 	.word	0x803c3800

08008828 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008828:	b480      	push	{r7}
 800882a:	b085      	sub	sp, #20
 800882c:	af00      	add	r7, sp, #0
 800882e:	6078      	str	r0, [r7, #4]
 8008830:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008832:	2300      	movs	r3, #0
 8008834:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	3301      	adds	r3, #1
 800883a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8008842:	d901      	bls.n	8008848 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008844:	2303      	movs	r3, #3
 8008846:	e01b      	b.n	8008880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	691b      	ldr	r3, [r3, #16]
 800884c:	2b00      	cmp	r3, #0
 800884e:	daf2      	bge.n	8008836 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008850:	2300      	movs	r3, #0
 8008852:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	019b      	lsls	r3, r3, #6
 8008858:	f043 0220 	orr.w	r2, r3, #32
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3301      	adds	r3, #1
 8008864:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8008866:	68fb      	ldr	r3, [r7, #12]
 8008868:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800886c:	d901      	bls.n	8008872 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800886e:	2303      	movs	r3, #3
 8008870:	e006      	b.n	8008880 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	691b      	ldr	r3, [r3, #16]
 8008876:	f003 0320 	and.w	r3, r3, #32
 800887a:	2b20      	cmp	r3, #32
 800887c:	d0f0      	beq.n	8008860 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800887e:	2300      	movs	r3, #0
}
 8008880:	4618      	mov	r0, r3
 8008882:	3714      	adds	r7, #20
 8008884:	46bd      	mov	sp, r7
 8008886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800888a:	4770      	bx	lr

0800888c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800888c:	b480      	push	{r7}
 800888e:	b085      	sub	sp, #20
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008894:	2300      	movs	r3, #0
 8008896:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	3301      	adds	r3, #1
 800889c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088a4:	d901      	bls.n	80088aa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80088a6:	2303      	movs	r3, #3
 80088a8:	e018      	b.n	80088dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	691b      	ldr	r3, [r3, #16]
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	daf2      	bge.n	8008898 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80088b2:	2300      	movs	r3, #0
 80088b4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	2210      	movs	r2, #16
 80088ba:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	3301      	adds	r3, #1
 80088c0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80088c8:	d901      	bls.n	80088ce <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80088ca:	2303      	movs	r3, #3
 80088cc:	e006      	b.n	80088dc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f003 0310 	and.w	r3, r3, #16
 80088d6:	2b10      	cmp	r3, #16
 80088d8:	d0f0      	beq.n	80088bc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80088da:	2300      	movs	r3, #0
}
 80088dc:	4618      	mov	r0, r3
 80088de:	3714      	adds	r7, #20
 80088e0:	46bd      	mov	sp, r7
 80088e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e6:	4770      	bx	lr

080088e8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80088e8:	b480      	push	{r7}
 80088ea:	b085      	sub	sp, #20
 80088ec:	af00      	add	r7, sp, #0
 80088ee:	6078      	str	r0, [r7, #4]
 80088f0:	460b      	mov	r3, r1
 80088f2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80088f8:	68fb      	ldr	r3, [r7, #12]
 80088fa:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80088fe:	681a      	ldr	r2, [r3, #0]
 8008900:	78fb      	ldrb	r3, [r7, #3]
 8008902:	68f9      	ldr	r1, [r7, #12]
 8008904:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008908:	4313      	orrs	r3, r2
 800890a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	4618      	mov	r0, r3
 8008910:	3714      	adds	r7, #20
 8008912:	46bd      	mov	sp, r7
 8008914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008918:	4770      	bx	lr

0800891a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(const USB_OTG_GlobalTypeDef *USBx)
{
 800891a:	b480      	push	{r7}
 800891c:	b087      	sub	sp, #28
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8008926:	693b      	ldr	r3, [r7, #16]
 8008928:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f003 0306 	and.w	r3, r3, #6
 8008932:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	2b00      	cmp	r3, #0
 8008938:	d102      	bne.n	8008940 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 800893a:	2300      	movs	r3, #0
 800893c:	75fb      	strb	r3, [r7, #23]
 800893e:	e00a      	b.n	8008956 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2b02      	cmp	r3, #2
 8008944:	d002      	beq.n	800894c <USB_GetDevSpeed+0x32>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	2b06      	cmp	r3, #6
 800894a:	d102      	bne.n	8008952 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800894c:	2302      	movs	r3, #2
 800894e:	75fb      	strb	r3, [r7, #23]
 8008950:	e001      	b.n	8008956 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8008952:	230f      	movs	r3, #15
 8008954:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8008956:	7dfb      	ldrb	r3, [r7, #23]
}
 8008958:	4618      	mov	r0, r3
 800895a:	371c      	adds	r7, #28
 800895c:	46bd      	mov	sp, r7
 800895e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008962:	4770      	bx	lr

08008964 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008964:	b480      	push	{r7}
 8008966:	b085      	sub	sp, #20
 8008968:	af00      	add	r7, sp, #0
 800896a:	6078      	str	r0, [r7, #4]
 800896c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008972:	683b      	ldr	r3, [r7, #0]
 8008974:	781b      	ldrb	r3, [r3, #0]
 8008976:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8008978:	683b      	ldr	r3, [r7, #0]
 800897a:	785b      	ldrb	r3, [r3, #1]
 800897c:	2b01      	cmp	r3, #1
 800897e:	d13a      	bne.n	80089f6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008986:	69da      	ldr	r2, [r3, #28]
 8008988:	683b      	ldr	r3, [r7, #0]
 800898a:	781b      	ldrb	r3, [r3, #0]
 800898c:	f003 030f 	and.w	r3, r3, #15
 8008990:	2101      	movs	r1, #1
 8008992:	fa01 f303 	lsl.w	r3, r1, r3
 8008996:	b29b      	uxth	r3, r3
 8008998:	68f9      	ldr	r1, [r7, #12]
 800899a:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800899e:	4313      	orrs	r3, r2
 80089a0:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	015a      	lsls	r2, r3, #5
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	4413      	add	r3, r2
 80089aa:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d155      	bne.n	8008a64 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089b8:	68bb      	ldr	r3, [r7, #8]
 80089ba:	015a      	lsls	r2, r3, #5
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	4413      	add	r3, r2
 80089c0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80089c4:	681a      	ldr	r2, [r3, #0]
 80089c6:	683b      	ldr	r3, [r7, #0]
 80089c8:	689b      	ldr	r3, [r3, #8]
 80089ca:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089ce:	683b      	ldr	r3, [r7, #0]
 80089d0:	791b      	ldrb	r3, [r3, #4]
 80089d2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089d4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80089d6:	68bb      	ldr	r3, [r7, #8]
 80089d8:	059b      	lsls	r3, r3, #22
 80089da:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80089dc:	4313      	orrs	r3, r2
 80089de:	68ba      	ldr	r2, [r7, #8]
 80089e0:	0151      	lsls	r1, r2, #5
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	440a      	add	r2, r1
 80089e6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80089ea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80089ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80089f2:	6013      	str	r3, [r2, #0]
 80089f4:	e036      	b.n	8008a64 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80089fc:	69da      	ldr	r2, [r3, #28]
 80089fe:	683b      	ldr	r3, [r7, #0]
 8008a00:	781b      	ldrb	r3, [r3, #0]
 8008a02:	f003 030f 	and.w	r3, r3, #15
 8008a06:	2101      	movs	r1, #1
 8008a08:	fa01 f303 	lsl.w	r3, r1, r3
 8008a0c:	041b      	lsls	r3, r3, #16
 8008a0e:	68f9      	ldr	r1, [r7, #12]
 8008a10:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008a14:	4313      	orrs	r3, r2
 8008a16:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a24:	681b      	ldr	r3, [r3, #0]
 8008a26:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8008a2a:	2b00      	cmp	r3, #0
 8008a2c:	d11a      	bne.n	8008a64 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a2e:	68bb      	ldr	r3, [r7, #8]
 8008a30:	015a      	lsls	r2, r3, #5
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	4413      	add	r3, r2
 8008a36:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	689b      	ldr	r3, [r3, #8]
 8008a40:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	791b      	ldrb	r3, [r3, #4]
 8008a48:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8008a4a:	430b      	orrs	r3, r1
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	68ba      	ldr	r2, [r7, #8]
 8008a50:	0151      	lsls	r1, r2, #5
 8008a52:	68fa      	ldr	r2, [r7, #12]
 8008a54:	440a      	add	r2, r1
 8008a56:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008a5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a5e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8008a62:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8008a64:	2300      	movs	r3, #0
}
 8008a66:	4618      	mov	r0, r3
 8008a68:	3714      	adds	r7, #20
 8008a6a:	46bd      	mov	sp, r7
 8008a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a70:	4770      	bx	lr
	...

08008a74 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 8008a74:	b480      	push	{r7}
 8008a76:	b085      	sub	sp, #20
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]
 8008a7c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	781b      	ldrb	r3, [r3, #0]
 8008a86:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8008a88:	683b      	ldr	r3, [r7, #0]
 8008a8a:	785b      	ldrb	r3, [r3, #1]
 8008a8c:	2b01      	cmp	r3, #1
 8008a8e:	d161      	bne.n	8008b54 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a90:	68bb      	ldr	r3, [r7, #8]
 8008a92:	015a      	lsls	r2, r3, #5
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	4413      	add	r3, r2
 8008a98:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008aa2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008aa6:	d11f      	bne.n	8008ae8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8008aa8:	68bb      	ldr	r3, [r7, #8]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	68ba      	ldr	r2, [r7, #8]
 8008ab8:	0151      	lsls	r1, r2, #5
 8008aba:	68fa      	ldr	r2, [r7, #12]
 8008abc:	440a      	add	r2, r1
 8008abe:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ac2:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008ac6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8008ac8:	68bb      	ldr	r3, [r7, #8]
 8008aca:	015a      	lsls	r2, r3, #5
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	4413      	add	r3, r2
 8008ad0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	68ba      	ldr	r2, [r7, #8]
 8008ad8:	0151      	lsls	r1, r2, #5
 8008ada:	68fa      	ldr	r2, [r7, #12]
 8008adc:	440a      	add	r2, r1
 8008ade:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ae2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008ae6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008aee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008af0:	683b      	ldr	r3, [r7, #0]
 8008af2:	781b      	ldrb	r3, [r3, #0]
 8008af4:	f003 030f 	and.w	r3, r3, #15
 8008af8:	2101      	movs	r1, #1
 8008afa:	fa01 f303 	lsl.w	r3, r1, r3
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	43db      	mvns	r3, r3
 8008b02:	68f9      	ldr	r1, [r7, #12]
 8008b04:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b08:	4013      	ands	r3, r2
 8008b0a:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008b12:	69da      	ldr	r2, [r3, #28]
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	781b      	ldrb	r3, [r3, #0]
 8008b18:	f003 030f 	and.w	r3, r3, #15
 8008b1c:	2101      	movs	r1, #1
 8008b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8008b22:	b29b      	uxth	r3, r3
 8008b24:	43db      	mvns	r3, r3
 8008b26:	68f9      	ldr	r1, [r7, #12]
 8008b28:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008b2c:	4013      	ands	r3, r2
 8008b2e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	015a      	lsls	r2, r3, #5
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	4413      	add	r3, r2
 8008b38:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b3c:	681a      	ldr	r2, [r3, #0]
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	0159      	lsls	r1, r3, #5
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	440b      	add	r3, r1
 8008b46:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008b4a:	4619      	mov	r1, r3
 8008b4c:	4b35      	ldr	r3, [pc, #212]	@ (8008c24 <USB_DeactivateEndpoint+0x1b0>)
 8008b4e:	4013      	ands	r3, r2
 8008b50:	600b      	str	r3, [r1, #0]
 8008b52:	e060      	b.n	8008c16 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008b54:	68bb      	ldr	r3, [r7, #8]
 8008b56:	015a      	lsls	r2, r3, #5
 8008b58:	68fb      	ldr	r3, [r7, #12]
 8008b5a:	4413      	add	r3, r2
 8008b5c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008b66:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008b6a:	d11f      	bne.n	8008bac <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8008b6c:	68bb      	ldr	r3, [r7, #8]
 8008b6e:	015a      	lsls	r2, r3, #5
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	4413      	add	r3, r2
 8008b74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	68ba      	ldr	r2, [r7, #8]
 8008b7c:	0151      	lsls	r1, r2, #5
 8008b7e:	68fa      	ldr	r2, [r7, #12]
 8008b80:	440a      	add	r2, r1
 8008b82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008b86:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8008b8a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	015a      	lsls	r2, r3, #5
 8008b90:	68fb      	ldr	r3, [r7, #12]
 8008b92:	4413      	add	r3, r2
 8008b94:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	68ba      	ldr	r2, [r7, #8]
 8008b9c:	0151      	lsls	r1, r2, #5
 8008b9e:	68fa      	ldr	r2, [r7, #12]
 8008ba0:	440a      	add	r2, r1
 8008ba2:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008ba6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008baa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bb2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008bb4:	683b      	ldr	r3, [r7, #0]
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	f003 030f 	and.w	r3, r3, #15
 8008bbc:	2101      	movs	r1, #1
 8008bbe:	fa01 f303 	lsl.w	r3, r1, r3
 8008bc2:	041b      	lsls	r3, r3, #16
 8008bc4:	43db      	mvns	r3, r3
 8008bc6:	68f9      	ldr	r1, [r7, #12]
 8008bc8:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bcc:	4013      	ands	r3, r2
 8008bce:	63cb      	str	r3, [r1, #60]	@ 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008bd6:	69da      	ldr	r2, [r3, #28]
 8008bd8:	683b      	ldr	r3, [r7, #0]
 8008bda:	781b      	ldrb	r3, [r3, #0]
 8008bdc:	f003 030f 	and.w	r3, r3, #15
 8008be0:	2101      	movs	r1, #1
 8008be2:	fa01 f303 	lsl.w	r3, r1, r3
 8008be6:	041b      	lsls	r3, r3, #16
 8008be8:	43db      	mvns	r3, r3
 8008bea:	68f9      	ldr	r1, [r7, #12]
 8008bec:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008bf0:	4013      	ands	r3, r2
 8008bf2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	015a      	lsls	r2, r3, #5
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	4413      	add	r3, r2
 8008bfc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c00:	681a      	ldr	r2, [r3, #0]
 8008c02:	68bb      	ldr	r3, [r7, #8]
 8008c04:	0159      	lsls	r1, r3, #5
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	440b      	add	r3, r1
 8008c0a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008c0e:	4619      	mov	r1, r3
 8008c10:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <USB_DeactivateEndpoint+0x1b4>)
 8008c12:	4013      	ands	r3, r2
 8008c14:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8008c16:	2300      	movs	r3, #0
}
 8008c18:	4618      	mov	r0, r3
 8008c1a:	3714      	adds	r7, #20
 8008c1c:	46bd      	mov	sp, r7
 8008c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c22:	4770      	bx	lr
 8008c24:	ec337800 	.word	0xec337800
 8008c28:	eff37800 	.word	0xeff37800

08008c2c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8008c2c:	b580      	push	{r7, lr}
 8008c2e:	b08a      	sub	sp, #40	@ 0x28
 8008c30:	af02      	add	r7, sp, #8
 8008c32:	60f8      	str	r0, [r7, #12]
 8008c34:	60b9      	str	r1, [r7, #8]
 8008c36:	4613      	mov	r3, r2
 8008c38:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8008c3e:	68bb      	ldr	r3, [r7, #8]
 8008c40:	781b      	ldrb	r3, [r3, #0]
 8008c42:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8008c44:	68bb      	ldr	r3, [r7, #8]
 8008c46:	785b      	ldrb	r3, [r3, #1]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	f040 817f 	bne.w	8008f4c <USB_EPStartXfer+0x320>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8008c4e:	68bb      	ldr	r3, [r7, #8]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d132      	bne.n	8008cbc <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008c56:	69bb      	ldr	r3, [r7, #24]
 8008c58:	015a      	lsls	r2, r3, #5
 8008c5a:	69fb      	ldr	r3, [r7, #28]
 8008c5c:	4413      	add	r3, r2
 8008c5e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c62:	691b      	ldr	r3, [r3, #16]
 8008c64:	69ba      	ldr	r2, [r7, #24]
 8008c66:	0151      	lsls	r1, r2, #5
 8008c68:	69fa      	ldr	r2, [r7, #28]
 8008c6a:	440a      	add	r2, r1
 8008c6c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c70:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008c74:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008c78:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008c7a:	69bb      	ldr	r3, [r7, #24]
 8008c7c:	015a      	lsls	r2, r3, #5
 8008c7e:	69fb      	ldr	r3, [r7, #28]
 8008c80:	4413      	add	r3, r2
 8008c82:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	69ba      	ldr	r2, [r7, #24]
 8008c8a:	0151      	lsls	r1, r2, #5
 8008c8c:	69fa      	ldr	r2, [r7, #28]
 8008c8e:	440a      	add	r2, r1
 8008c90:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008c94:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008c98:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008c9a:	69bb      	ldr	r3, [r7, #24]
 8008c9c:	015a      	lsls	r2, r3, #5
 8008c9e:	69fb      	ldr	r3, [r7, #28]
 8008ca0:	4413      	add	r3, r2
 8008ca2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ca6:	691b      	ldr	r3, [r3, #16]
 8008ca8:	69ba      	ldr	r2, [r7, #24]
 8008caa:	0151      	lsls	r1, r2, #5
 8008cac:	69fa      	ldr	r2, [r7, #28]
 8008cae:	440a      	add	r2, r1
 8008cb0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cb4:	0cdb      	lsrs	r3, r3, #19
 8008cb6:	04db      	lsls	r3, r3, #19
 8008cb8:	6113      	str	r3, [r2, #16]
 8008cba:	e097      	b.n	8008dec <USB_EPStartXfer+0x1c0>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8008cbc:	69bb      	ldr	r3, [r7, #24]
 8008cbe:	015a      	lsls	r2, r3, #5
 8008cc0:	69fb      	ldr	r3, [r7, #28]
 8008cc2:	4413      	add	r3, r2
 8008cc4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	69ba      	ldr	r2, [r7, #24]
 8008ccc:	0151      	lsls	r1, r2, #5
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	440a      	add	r2, r1
 8008cd2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cd6:	0cdb      	lsrs	r3, r3, #19
 8008cd8:	04db      	lsls	r3, r3, #19
 8008cda:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8008cdc:	69bb      	ldr	r3, [r7, #24]
 8008cde:	015a      	lsls	r2, r3, #5
 8008ce0:	69fb      	ldr	r3, [r7, #28]
 8008ce2:	4413      	add	r3, r2
 8008ce4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	69ba      	ldr	r2, [r7, #24]
 8008cec:	0151      	lsls	r1, r2, #5
 8008cee:	69fa      	ldr	r2, [r7, #28]
 8008cf0:	440a      	add	r2, r1
 8008cf2:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008cf6:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008cfa:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008cfe:	6113      	str	r3, [r2, #16]

      if (epnum == 0U)
 8008d00:	69bb      	ldr	r3, [r7, #24]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d11a      	bne.n	8008d3c <USB_EPStartXfer+0x110>
      {
        if (ep->xfer_len > ep->maxpacket)
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	691a      	ldr	r2, [r3, #16]
 8008d0a:	68bb      	ldr	r3, [r7, #8]
 8008d0c:	689b      	ldr	r3, [r3, #8]
 8008d0e:	429a      	cmp	r2, r3
 8008d10:	d903      	bls.n	8008d1a <USB_EPStartXfer+0xee>
        {
          ep->xfer_len = ep->maxpacket;
 8008d12:	68bb      	ldr	r3, [r7, #8]
 8008d14:	689a      	ldr	r2, [r3, #8]
 8008d16:	68bb      	ldr	r3, [r7, #8]
 8008d18:	611a      	str	r2, [r3, #16]
        }

        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8008d1a:	69bb      	ldr	r3, [r7, #24]
 8008d1c:	015a      	lsls	r2, r3, #5
 8008d1e:	69fb      	ldr	r3, [r7, #28]
 8008d20:	4413      	add	r3, r2
 8008d22:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d26:	691b      	ldr	r3, [r3, #16]
 8008d28:	69ba      	ldr	r2, [r7, #24]
 8008d2a:	0151      	lsls	r1, r2, #5
 8008d2c:	69fa      	ldr	r2, [r7, #28]
 8008d2e:	440a      	add	r2, r1
 8008d30:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d34:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008d38:	6113      	str	r3, [r2, #16]
 8008d3a:	e044      	b.n	8008dc6 <USB_EPStartXfer+0x19a>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8008d3c:	68bb      	ldr	r3, [r7, #8]
 8008d3e:	691a      	ldr	r2, [r3, #16]
 8008d40:	68bb      	ldr	r3, [r7, #8]
 8008d42:	689b      	ldr	r3, [r3, #8]
 8008d44:	4413      	add	r3, r2
 8008d46:	1e5a      	subs	r2, r3, #1
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	689b      	ldr	r3, [r3, #8]
 8008d4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d50:	82fb      	strh	r3, [r7, #22]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19));
 8008d52:	69bb      	ldr	r3, [r7, #24]
 8008d54:	015a      	lsls	r2, r3, #5
 8008d56:	69fb      	ldr	r3, [r7, #28]
 8008d58:	4413      	add	r3, r2
 8008d5a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d5e:	691a      	ldr	r2, [r3, #16]
 8008d60:	8afb      	ldrh	r3, [r7, #22]
 8008d62:	04d9      	lsls	r1, r3, #19
 8008d64:	4ba4      	ldr	r3, [pc, #656]	@ (8008ff8 <USB_EPStartXfer+0x3cc>)
 8008d66:	400b      	ands	r3, r1
 8008d68:	69b9      	ldr	r1, [r7, #24]
 8008d6a:	0148      	lsls	r0, r1, #5
 8008d6c:	69f9      	ldr	r1, [r7, #28]
 8008d6e:	4401      	add	r1, r0
 8008d70:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008d74:	4313      	orrs	r3, r2
 8008d76:	610b      	str	r3, [r1, #16]

        if (ep->type == EP_TYPE_ISOC)
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	791b      	ldrb	r3, [r3, #4]
 8008d7c:	2b01      	cmp	r3, #1
 8008d7e:	d122      	bne.n	8008dc6 <USB_EPStartXfer+0x19a>
        {
          USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8008d80:	69bb      	ldr	r3, [r7, #24]
 8008d82:	015a      	lsls	r2, r3, #5
 8008d84:	69fb      	ldr	r3, [r7, #28]
 8008d86:	4413      	add	r3, r2
 8008d88:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008d8c:	691b      	ldr	r3, [r3, #16]
 8008d8e:	69ba      	ldr	r2, [r7, #24]
 8008d90:	0151      	lsls	r1, r2, #5
 8008d92:	69fa      	ldr	r2, [r7, #28]
 8008d94:	440a      	add	r2, r1
 8008d96:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008d9a:	f023 43c0 	bic.w	r3, r3, #1610612736	@ 0x60000000
 8008d9e:	6113      	str	r3, [r2, #16]
          USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & ((uint32_t)pktcnt << 29));
 8008da0:	69bb      	ldr	r3, [r7, #24]
 8008da2:	015a      	lsls	r2, r3, #5
 8008da4:	69fb      	ldr	r3, [r7, #28]
 8008da6:	4413      	add	r3, r2
 8008da8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dac:	691a      	ldr	r2, [r3, #16]
 8008dae:	8afb      	ldrh	r3, [r7, #22]
 8008db0:	075b      	lsls	r3, r3, #29
 8008db2:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
 8008db6:	69b9      	ldr	r1, [r7, #24]
 8008db8:	0148      	lsls	r0, r1, #5
 8008dba:	69f9      	ldr	r1, [r7, #28]
 8008dbc:	4401      	add	r1, r0
 8008dbe:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	610b      	str	r3, [r1, #16]
        }
      }

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8008dc6:	69bb      	ldr	r3, [r7, #24]
 8008dc8:	015a      	lsls	r2, r3, #5
 8008dca:	69fb      	ldr	r3, [r7, #28]
 8008dcc:	4413      	add	r3, r2
 8008dce:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008dd2:	691a      	ldr	r2, [r3, #16]
 8008dd4:	68bb      	ldr	r3, [r7, #8]
 8008dd6:	691b      	ldr	r3, [r3, #16]
 8008dd8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008ddc:	69b9      	ldr	r1, [r7, #24]
 8008dde:	0148      	lsls	r0, r1, #5
 8008de0:	69f9      	ldr	r1, [r7, #28]
 8008de2:	4401      	add	r1, r0
 8008de4:	f501 6110 	add.w	r1, r1, #2304	@ 0x900
 8008de8:	4313      	orrs	r3, r2
 8008dea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8008dec:	79fb      	ldrb	r3, [r7, #7]
 8008dee:	2b01      	cmp	r3, #1
 8008df0:	d14b      	bne.n	8008e8a <USB_EPStartXfer+0x25e>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8008df2:	68bb      	ldr	r3, [r7, #8]
 8008df4:	69db      	ldr	r3, [r3, #28]
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d009      	beq.n	8008e0e <USB_EPStartXfer+0x1e2>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8008dfa:	69bb      	ldr	r3, [r7, #24]
 8008dfc:	015a      	lsls	r2, r3, #5
 8008dfe:	69fb      	ldr	r3, [r7, #28]
 8008e00:	4413      	add	r3, r2
 8008e02:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e06:	461a      	mov	r2, r3
 8008e08:	68bb      	ldr	r3, [r7, #8]
 8008e0a:	69db      	ldr	r3, [r3, #28]
 8008e0c:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8008e0e:	68bb      	ldr	r3, [r7, #8]
 8008e10:	791b      	ldrb	r3, [r3, #4]
 8008e12:	2b01      	cmp	r3, #1
 8008e14:	d128      	bne.n	8008e68 <USB_EPStartXfer+0x23c>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008e16:	69fb      	ldr	r3, [r7, #28]
 8008e18:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008e1c:	689b      	ldr	r3, [r3, #8]
 8008e1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008e22:	2b00      	cmp	r3, #0
 8008e24:	d110      	bne.n	8008e48 <USB_EPStartXfer+0x21c>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008e26:	69bb      	ldr	r3, [r7, #24]
 8008e28:	015a      	lsls	r2, r3, #5
 8008e2a:	69fb      	ldr	r3, [r7, #28]
 8008e2c:	4413      	add	r3, r2
 8008e2e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	69ba      	ldr	r2, [r7, #24]
 8008e36:	0151      	lsls	r1, r2, #5
 8008e38:	69fa      	ldr	r2, [r7, #28]
 8008e3a:	440a      	add	r2, r1
 8008e3c:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e40:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008e44:	6013      	str	r3, [r2, #0]
 8008e46:	e00f      	b.n	8008e68 <USB_EPStartXfer+0x23c>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008e48:	69bb      	ldr	r3, [r7, #24]
 8008e4a:	015a      	lsls	r2, r3, #5
 8008e4c:	69fb      	ldr	r3, [r7, #28]
 8008e4e:	4413      	add	r3, r2
 8008e50:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e54:	681b      	ldr	r3, [r3, #0]
 8008e56:	69ba      	ldr	r2, [r7, #24]
 8008e58:	0151      	lsls	r1, r2, #5
 8008e5a:	69fa      	ldr	r2, [r7, #28]
 8008e5c:	440a      	add	r2, r1
 8008e5e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e62:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008e66:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e68:	69bb      	ldr	r3, [r7, #24]
 8008e6a:	015a      	lsls	r2, r3, #5
 8008e6c:	69fb      	ldr	r3, [r7, #28]
 8008e6e:	4413      	add	r3, r2
 8008e70:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	69ba      	ldr	r2, [r7, #24]
 8008e78:	0151      	lsls	r1, r2, #5
 8008e7a:	69fa      	ldr	r2, [r7, #28]
 8008e7c:	440a      	add	r2, r1
 8008e7e:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008e82:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008e86:	6013      	str	r3, [r2, #0]
 8008e88:	e166      	b.n	8009158 <USB_EPStartXfer+0x52c>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	015a      	lsls	r2, r3, #5
 8008e8e:	69fb      	ldr	r3, [r7, #28]
 8008e90:	4413      	add	r3, r2
 8008e92:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	69ba      	ldr	r2, [r7, #24]
 8008e9a:	0151      	lsls	r1, r2, #5
 8008e9c:	69fa      	ldr	r2, [r7, #28]
 8008e9e:	440a      	add	r2, r1
 8008ea0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008ea4:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8008ea8:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8008eaa:	68bb      	ldr	r3, [r7, #8]
 8008eac:	791b      	ldrb	r3, [r3, #4]
 8008eae:	2b01      	cmp	r3, #1
 8008eb0:	d015      	beq.n	8008ede <USB_EPStartXfer+0x2b2>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8008eb2:	68bb      	ldr	r3, [r7, #8]
 8008eb4:	691b      	ldr	r3, [r3, #16]
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	f000 814e 	beq.w	8009158 <USB_EPStartXfer+0x52c>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8008ebc:	69fb      	ldr	r3, [r7, #28]
 8008ebe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ec2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ec4:	68bb      	ldr	r3, [r7, #8]
 8008ec6:	781b      	ldrb	r3, [r3, #0]
 8008ec8:	f003 030f 	and.w	r3, r3, #15
 8008ecc:	2101      	movs	r1, #1
 8008ece:	fa01 f303 	lsl.w	r3, r1, r3
 8008ed2:	69f9      	ldr	r1, [r7, #28]
 8008ed4:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8008ed8:	4313      	orrs	r3, r2
 8008eda:	634b      	str	r3, [r1, #52]	@ 0x34
 8008edc:	e13c      	b.n	8009158 <USB_EPStartXfer+0x52c>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8008ede:	69fb      	ldr	r3, [r7, #28]
 8008ee0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8008ee4:	689b      	ldr	r3, [r3, #8]
 8008ee6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d110      	bne.n	8008f10 <USB_EPStartXfer+0x2e4>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8008eee:	69bb      	ldr	r3, [r7, #24]
 8008ef0:	015a      	lsls	r2, r3, #5
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	4413      	add	r3, r2
 8008ef6:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69ba      	ldr	r2, [r7, #24]
 8008efe:	0151      	lsls	r1, r2, #5
 8008f00:	69fa      	ldr	r2, [r7, #28]
 8008f02:	440a      	add	r2, r1
 8008f04:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f08:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8008f0c:	6013      	str	r3, [r2, #0]
 8008f0e:	e00f      	b.n	8008f30 <USB_EPStartXfer+0x304>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8008f10:	69bb      	ldr	r3, [r7, #24]
 8008f12:	015a      	lsls	r2, r3, #5
 8008f14:	69fb      	ldr	r3, [r7, #28]
 8008f16:	4413      	add	r3, r2
 8008f18:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	69ba      	ldr	r2, [r7, #24]
 8008f20:	0151      	lsls	r1, r2, #5
 8008f22:	69fa      	ldr	r2, [r7, #28]
 8008f24:	440a      	add	r2, r1
 8008f26:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8008f2a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008f2e:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8008f30:	68bb      	ldr	r3, [r7, #8]
 8008f32:	68d9      	ldr	r1, [r3, #12]
 8008f34:	68bb      	ldr	r3, [r7, #8]
 8008f36:	781a      	ldrb	r2, [r3, #0]
 8008f38:	68bb      	ldr	r3, [r7, #8]
 8008f3a:	691b      	ldr	r3, [r3, #16]
 8008f3c:	b298      	uxth	r0, r3
 8008f3e:	79fb      	ldrb	r3, [r7, #7]
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	4603      	mov	r3, r0
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 f9b9 	bl	80092bc <USB_WritePacket>
 8008f4a:	e105      	b.n	8009158 <USB_EPStartXfer+0x52c>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8008f4c:	69bb      	ldr	r3, [r7, #24]
 8008f4e:	015a      	lsls	r2, r3, #5
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	4413      	add	r3, r2
 8008f54:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f58:	691b      	ldr	r3, [r3, #16]
 8008f5a:	69ba      	ldr	r2, [r7, #24]
 8008f5c:	0151      	lsls	r1, r2, #5
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	440a      	add	r2, r1
 8008f62:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f66:	0cdb      	lsrs	r3, r3, #19
 8008f68:	04db      	lsls	r3, r3, #19
 8008f6a:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8008f6c:	69bb      	ldr	r3, [r7, #24]
 8008f6e:	015a      	lsls	r2, r3, #5
 8008f70:	69fb      	ldr	r3, [r7, #28]
 8008f72:	4413      	add	r3, r2
 8008f74:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008f78:	691b      	ldr	r3, [r3, #16]
 8008f7a:	69ba      	ldr	r2, [r7, #24]
 8008f7c:	0151      	lsls	r1, r2, #5
 8008f7e:	69fa      	ldr	r2, [r7, #28]
 8008f80:	440a      	add	r2, r1
 8008f82:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008f86:	f023 53ff 	bic.w	r3, r3, #534773760	@ 0x1fe00000
 8008f8a:	f423 13c0 	bic.w	r3, r3, #1572864	@ 0x180000
 8008f8e:	6113      	str	r3, [r2, #16]

    if (epnum == 0U)
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d132      	bne.n	8008ffc <USB_EPStartXfer+0x3d0>
    {
      if (ep->xfer_len > 0U)
 8008f96:	68bb      	ldr	r3, [r7, #8]
 8008f98:	691b      	ldr	r3, [r3, #16]
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	d003      	beq.n	8008fa6 <USB_EPStartXfer+0x37a>
      {
        ep->xfer_len = ep->maxpacket;
 8008f9e:	68bb      	ldr	r3, [r7, #8]
 8008fa0:	689a      	ldr	r2, [r3, #8]
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	611a      	str	r2, [r3, #16]
      }

      /* Store transfer size, for EP0 this is equal to endpoint max packet size */
      ep->xfer_size = ep->maxpacket;
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	689a      	ldr	r2, [r3, #8]
 8008faa:	68bb      	ldr	r3, [r7, #8]
 8008fac:	621a      	str	r2, [r3, #32]

      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8008fae:	69bb      	ldr	r3, [r7, #24]
 8008fb0:	015a      	lsls	r2, r3, #5
 8008fb2:	69fb      	ldr	r3, [r7, #28]
 8008fb4:	4413      	add	r3, r2
 8008fb6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fba:	691a      	ldr	r2, [r3, #16]
 8008fbc:	68bb      	ldr	r3, [r7, #8]
 8008fbe:	6a1b      	ldr	r3, [r3, #32]
 8008fc0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8008fc4:	69b9      	ldr	r1, [r7, #24]
 8008fc6:	0148      	lsls	r0, r1, #5
 8008fc8:	69f9      	ldr	r1, [r7, #28]
 8008fca:	4401      	add	r1, r0
 8008fcc:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8008fd4:	69bb      	ldr	r3, [r7, #24]
 8008fd6:	015a      	lsls	r2, r3, #5
 8008fd8:	69fb      	ldr	r3, [r7, #28]
 8008fda:	4413      	add	r3, r2
 8008fdc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8008fe0:	691b      	ldr	r3, [r3, #16]
 8008fe2:	69ba      	ldr	r2, [r7, #24]
 8008fe4:	0151      	lsls	r1, r2, #5
 8008fe6:	69fa      	ldr	r2, [r7, #28]
 8008fe8:	440a      	add	r2, r1
 8008fea:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8008fee:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8008ff2:	6113      	str	r3, [r2, #16]
 8008ff4:	e062      	b.n	80090bc <USB_EPStartXfer+0x490>
 8008ff6:	bf00      	nop
 8008ff8:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      if (ep->xfer_len == 0U)
 8008ffc:	68bb      	ldr	r3, [r7, #8]
 8008ffe:	691b      	ldr	r3, [r3, #16]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d123      	bne.n	800904c <USB_EPStartXfer+0x420>
      {
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8009004:	69bb      	ldr	r3, [r7, #24]
 8009006:	015a      	lsls	r2, r3, #5
 8009008:	69fb      	ldr	r3, [r7, #28]
 800900a:	4413      	add	r3, r2
 800900c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009010:	691a      	ldr	r2, [r3, #16]
 8009012:	68bb      	ldr	r3, [r7, #8]
 8009014:	689b      	ldr	r3, [r3, #8]
 8009016:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800901a:	69b9      	ldr	r1, [r7, #24]
 800901c:	0148      	lsls	r0, r1, #5
 800901e:	69f9      	ldr	r1, [r7, #28]
 8009020:	4401      	add	r1, r0
 8009022:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009026:	4313      	orrs	r3, r2
 8009028:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800902a:	69bb      	ldr	r3, [r7, #24]
 800902c:	015a      	lsls	r2, r3, #5
 800902e:	69fb      	ldr	r3, [r7, #28]
 8009030:	4413      	add	r3, r2
 8009032:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009036:	691b      	ldr	r3, [r3, #16]
 8009038:	69ba      	ldr	r2, [r7, #24]
 800903a:	0151      	lsls	r1, r2, #5
 800903c:	69fa      	ldr	r2, [r7, #28]
 800903e:	440a      	add	r2, r1
 8009040:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009044:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009048:	6113      	str	r3, [r2, #16]
 800904a:	e037      	b.n	80090bc <USB_EPStartXfer+0x490>
      }
      else
      {
        pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	691a      	ldr	r2, [r3, #16]
 8009050:	68bb      	ldr	r3, [r7, #8]
 8009052:	689b      	ldr	r3, [r3, #8]
 8009054:	4413      	add	r3, r2
 8009056:	1e5a      	subs	r2, r3, #1
 8009058:	68bb      	ldr	r3, [r7, #8]
 800905a:	689b      	ldr	r3, [r3, #8]
 800905c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009060:	82fb      	strh	r3, [r7, #22]
        ep->xfer_size = ep->maxpacket * pktcnt;
 8009062:	68bb      	ldr	r3, [r7, #8]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	8afa      	ldrh	r2, [r7, #22]
 8009068:	fb03 f202 	mul.w	r2, r3, r2
 800906c:	68bb      	ldr	r3, [r7, #8]
 800906e:	621a      	str	r2, [r3, #32]

        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8009070:	69bb      	ldr	r3, [r7, #24]
 8009072:	015a      	lsls	r2, r3, #5
 8009074:	69fb      	ldr	r3, [r7, #28]
 8009076:	4413      	add	r3, r2
 8009078:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800907c:	691a      	ldr	r2, [r3, #16]
 800907e:	8afb      	ldrh	r3, [r7, #22]
 8009080:	04d9      	lsls	r1, r3, #19
 8009082:	4b38      	ldr	r3, [pc, #224]	@ (8009164 <USB_EPStartXfer+0x538>)
 8009084:	400b      	ands	r3, r1
 8009086:	69b9      	ldr	r1, [r7, #24]
 8009088:	0148      	lsls	r0, r1, #5
 800908a:	69f9      	ldr	r1, [r7, #28]
 800908c:	4401      	add	r1, r0
 800908e:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 8009092:	4313      	orrs	r3, r2
 8009094:	610b      	str	r3, [r1, #16]
        USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8009096:	69bb      	ldr	r3, [r7, #24]
 8009098:	015a      	lsls	r2, r3, #5
 800909a:	69fb      	ldr	r3, [r7, #28]
 800909c:	4413      	add	r3, r2
 800909e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090a2:	691a      	ldr	r2, [r3, #16]
 80090a4:	68bb      	ldr	r3, [r7, #8]
 80090a6:	6a1b      	ldr	r3, [r3, #32]
 80090a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80090ac:	69b9      	ldr	r1, [r7, #24]
 80090ae:	0148      	lsls	r0, r1, #5
 80090b0:	69f9      	ldr	r1, [r7, #28]
 80090b2:	4401      	add	r1, r0
 80090b4:	f501 6130 	add.w	r1, r1, #2816	@ 0xb00
 80090b8:	4313      	orrs	r3, r2
 80090ba:	610b      	str	r3, [r1, #16]
      }
    }

    if (dma == 1U)
 80090bc:	79fb      	ldrb	r3, [r7, #7]
 80090be:	2b01      	cmp	r3, #1
 80090c0:	d10d      	bne.n	80090de <USB_EPStartXfer+0x4b2>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80090c2:	68bb      	ldr	r3, [r7, #8]
 80090c4:	68db      	ldr	r3, [r3, #12]
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d009      	beq.n	80090de <USB_EPStartXfer+0x4b2>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80090ca:	68bb      	ldr	r3, [r7, #8]
 80090cc:	68d9      	ldr	r1, [r3, #12]
 80090ce:	69bb      	ldr	r3, [r7, #24]
 80090d0:	015a      	lsls	r2, r3, #5
 80090d2:	69fb      	ldr	r3, [r7, #28]
 80090d4:	4413      	add	r3, r2
 80090d6:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80090da:	460a      	mov	r2, r1
 80090dc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80090de:	68bb      	ldr	r3, [r7, #8]
 80090e0:	791b      	ldrb	r3, [r3, #4]
 80090e2:	2b01      	cmp	r3, #1
 80090e4:	d128      	bne.n	8009138 <USB_EPStartXfer+0x50c>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80090e6:	69fb      	ldr	r3, [r7, #28]
 80090e8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d110      	bne.n	8009118 <USB_EPStartXfer+0x4ec>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80090f6:	69bb      	ldr	r3, [r7, #24]
 80090f8:	015a      	lsls	r2, r3, #5
 80090fa:	69fb      	ldr	r3, [r7, #28]
 80090fc:	4413      	add	r3, r2
 80090fe:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	69ba      	ldr	r2, [r7, #24]
 8009106:	0151      	lsls	r1, r2, #5
 8009108:	69fa      	ldr	r2, [r7, #28]
 800910a:	440a      	add	r2, r1
 800910c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009110:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8009114:	6013      	str	r3, [r2, #0]
 8009116:	e00f      	b.n	8009138 <USB_EPStartXfer+0x50c>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8009118:	69bb      	ldr	r3, [r7, #24]
 800911a:	015a      	lsls	r2, r3, #5
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	4413      	add	r3, r2
 8009120:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	69ba      	ldr	r2, [r7, #24]
 8009128:	0151      	lsls	r1, r2, #5
 800912a:	69fa      	ldr	r2, [r7, #28]
 800912c:	440a      	add	r2, r1
 800912e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009132:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009136:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8009138:	69bb      	ldr	r3, [r7, #24]
 800913a:	015a      	lsls	r2, r3, #5
 800913c:	69fb      	ldr	r3, [r7, #28]
 800913e:	4413      	add	r3, r2
 8009140:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	69ba      	ldr	r2, [r7, #24]
 8009148:	0151      	lsls	r1, r2, #5
 800914a:	69fa      	ldr	r2, [r7, #28]
 800914c:	440a      	add	r2, r1
 800914e:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009152:	f043 4304 	orr.w	r3, r3, #2214592512	@ 0x84000000
 8009156:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009158:	2300      	movs	r3, #0
}
 800915a:	4618      	mov	r0, r3
 800915c:	3720      	adds	r7, #32
 800915e:	46bd      	mov	sp, r7
 8009160:	bd80      	pop	{r7, pc}
 8009162:	bf00      	nop
 8009164:	1ff80000 	.word	0x1ff80000

08009168 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(const USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8009168:	b480      	push	{r7}
 800916a:	b087      	sub	sp, #28
 800916c:	af00      	add	r7, sp, #0
 800916e:	6078      	str	r0, [r7, #4]
 8009170:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8009172:	2300      	movs	r3, #0
 8009174:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8009176:	2300      	movs	r3, #0
 8009178:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800917e:	683b      	ldr	r3, [r7, #0]
 8009180:	785b      	ldrb	r3, [r3, #1]
 8009182:	2b01      	cmp	r3, #1
 8009184:	d14a      	bne.n	800921c <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8009186:	683b      	ldr	r3, [r7, #0]
 8009188:	781b      	ldrb	r3, [r3, #0]
 800918a:	015a      	lsls	r2, r3, #5
 800918c:	693b      	ldr	r3, [r7, #16]
 800918e:	4413      	add	r3, r2
 8009190:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 800919a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800919e:	f040 8086 	bne.w	80092ae <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80091a2:	683b      	ldr	r3, [r7, #0]
 80091a4:	781b      	ldrb	r3, [r3, #0]
 80091a6:	015a      	lsls	r2, r3, #5
 80091a8:	693b      	ldr	r3, [r7, #16]
 80091aa:	4413      	add	r3, r2
 80091ac:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	683a      	ldr	r2, [r7, #0]
 80091b4:	7812      	ldrb	r2, [r2, #0]
 80091b6:	0151      	lsls	r1, r2, #5
 80091b8:	693a      	ldr	r2, [r7, #16]
 80091ba:	440a      	add	r2, r1
 80091bc:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091c0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80091c4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80091c6:	683b      	ldr	r3, [r7, #0]
 80091c8:	781b      	ldrb	r3, [r3, #0]
 80091ca:	015a      	lsls	r2, r3, #5
 80091cc:	693b      	ldr	r3, [r7, #16]
 80091ce:	4413      	add	r3, r2
 80091d0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	683a      	ldr	r2, [r7, #0]
 80091d8:	7812      	ldrb	r2, [r2, #0]
 80091da:	0151      	lsls	r1, r2, #5
 80091dc:	693a      	ldr	r2, [r7, #16]
 80091de:	440a      	add	r2, r1
 80091e0:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80091e4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80091e8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	3301      	adds	r3, #1
 80091ee:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80091f0:	68fb      	ldr	r3, [r7, #12]
 80091f2:	f242 7210 	movw	r2, #10000	@ 0x2710
 80091f6:	4293      	cmp	r3, r2
 80091f8:	d902      	bls.n	8009200 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80091fa:	2301      	movs	r3, #1
 80091fc:	75fb      	strb	r3, [r7, #23]
          break;
 80091fe:	e056      	b.n	80092ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	781b      	ldrb	r3, [r3, #0]
 8009204:	015a      	lsls	r2, r3, #5
 8009206:	693b      	ldr	r3, [r7, #16]
 8009208:	4413      	add	r3, r2
 800920a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009214:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009218:	d0e7      	beq.n	80091ea <USB_EPStopXfer+0x82>
 800921a:	e048      	b.n	80092ae <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	781b      	ldrb	r3, [r3, #0]
 8009220:	015a      	lsls	r2, r3, #5
 8009222:	693b      	ldr	r3, [r7, #16]
 8009224:	4413      	add	r3, r2
 8009226:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009230:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009234:	d13b      	bne.n	80092ae <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8009236:	683b      	ldr	r3, [r7, #0]
 8009238:	781b      	ldrb	r3, [r3, #0]
 800923a:	015a      	lsls	r2, r3, #5
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	4413      	add	r3, r2
 8009240:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	683a      	ldr	r2, [r7, #0]
 8009248:	7812      	ldrb	r2, [r2, #0]
 800924a:	0151      	lsls	r1, r2, #5
 800924c:	693a      	ldr	r2, [r7, #16]
 800924e:	440a      	add	r2, r1
 8009250:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009254:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8009258:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800925a:	683b      	ldr	r3, [r7, #0]
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	015a      	lsls	r2, r3, #5
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	4413      	add	r3, r2
 8009264:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009268:	681b      	ldr	r3, [r3, #0]
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	7812      	ldrb	r2, [r2, #0]
 800926e:	0151      	lsls	r1, r2, #5
 8009270:	693a      	ldr	r2, [r7, #16]
 8009272:	440a      	add	r2, r1
 8009274:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009278:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800927c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3301      	adds	r3, #1
 8009282:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8009284:	68fb      	ldr	r3, [r7, #12]
 8009286:	f242 7210 	movw	r2, #10000	@ 0x2710
 800928a:	4293      	cmp	r3, r2
 800928c:	d902      	bls.n	8009294 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800928e:	2301      	movs	r3, #1
 8009290:	75fb      	strb	r3, [r7, #23]
          break;
 8009292:	e00c      	b.n	80092ae <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	781b      	ldrb	r3, [r3, #0]
 8009298:	015a      	lsls	r2, r3, #5
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	4413      	add	r3, r2
 800929e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80092a8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80092ac:	d0e7      	beq.n	800927e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80092ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80092b0:	4618      	mov	r0, r3
 80092b2:	371c      	adds	r7, #28
 80092b4:	46bd      	mov	sp, r7
 80092b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092ba:	4770      	bx	lr

080092bc <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80092bc:	b480      	push	{r7}
 80092be:	b089      	sub	sp, #36	@ 0x24
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	60f8      	str	r0, [r7, #12]
 80092c4:	60b9      	str	r1, [r7, #8]
 80092c6:	4611      	mov	r1, r2
 80092c8:	461a      	mov	r2, r3
 80092ca:	460b      	mov	r3, r1
 80092cc:	71fb      	strb	r3, [r7, #7]
 80092ce:	4613      	mov	r3, r2
 80092d0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80092da:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d123      	bne.n	800932a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80092e2:	88bb      	ldrh	r3, [r7, #4]
 80092e4:	3303      	adds	r3, #3
 80092e6:	089b      	lsrs	r3, r3, #2
 80092e8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80092ea:	2300      	movs	r3, #0
 80092ec:	61bb      	str	r3, [r7, #24]
 80092ee:	e018      	b.n	8009322 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80092f0:	79fb      	ldrb	r3, [r7, #7]
 80092f2:	031a      	lsls	r2, r3, #12
 80092f4:	697b      	ldr	r3, [r7, #20]
 80092f6:	4413      	add	r3, r2
 80092f8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80092fc:	461a      	mov	r2, r3
 80092fe:	69fb      	ldr	r3, [r7, #28]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	6013      	str	r3, [r2, #0]
      pSrc++;
 8009304:	69fb      	ldr	r3, [r7, #28]
 8009306:	3301      	adds	r3, #1
 8009308:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800930a:	69fb      	ldr	r3, [r7, #28]
 800930c:	3301      	adds	r3, #1
 800930e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009310:	69fb      	ldr	r3, [r7, #28]
 8009312:	3301      	adds	r3, #1
 8009314:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8009316:	69fb      	ldr	r3, [r7, #28]
 8009318:	3301      	adds	r3, #1
 800931a:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 800931c:	69bb      	ldr	r3, [r7, #24]
 800931e:	3301      	adds	r3, #1
 8009320:	61bb      	str	r3, [r7, #24]
 8009322:	69ba      	ldr	r2, [r7, #24]
 8009324:	693b      	ldr	r3, [r7, #16]
 8009326:	429a      	cmp	r2, r3
 8009328:	d3e2      	bcc.n	80092f0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800932a:	2300      	movs	r3, #0
}
 800932c:	4618      	mov	r0, r3
 800932e:	3724      	adds	r7, #36	@ 0x24
 8009330:	46bd      	mov	sp, r7
 8009332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009336:	4770      	bx	lr

08009338 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8009338:	b480      	push	{r7}
 800933a:	b08b      	sub	sp, #44	@ 0x2c
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	4613      	mov	r3, r2
 8009344:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800934a:	68bb      	ldr	r3, [r7, #8]
 800934c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800934e:	88fb      	ldrh	r3, [r7, #6]
 8009350:	089b      	lsrs	r3, r3, #2
 8009352:	b29b      	uxth	r3, r3
 8009354:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8009356:	88fb      	ldrh	r3, [r7, #6]
 8009358:	f003 0303 	and.w	r3, r3, #3
 800935c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800935e:	2300      	movs	r3, #0
 8009360:	623b      	str	r3, [r7, #32]
 8009362:	e014      	b.n	800938e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8009364:	69bb      	ldr	r3, [r7, #24]
 8009366:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 800936a:	681a      	ldr	r2, [r3, #0]
 800936c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800936e:	601a      	str	r2, [r3, #0]
    pDest++;
 8009370:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009372:	3301      	adds	r3, #1
 8009374:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009376:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009378:	3301      	adds	r3, #1
 800937a:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 800937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800937e:	3301      	adds	r3, #1
 8009380:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8009382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009384:	3301      	adds	r3, #1
 8009386:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8009388:	6a3b      	ldr	r3, [r7, #32]
 800938a:	3301      	adds	r3, #1
 800938c:	623b      	str	r3, [r7, #32]
 800938e:	6a3a      	ldr	r2, [r7, #32]
 8009390:	697b      	ldr	r3, [r7, #20]
 8009392:	429a      	cmp	r2, r3
 8009394:	d3e6      	bcc.n	8009364 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8009396:	8bfb      	ldrh	r3, [r7, #30]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d01e      	beq.n	80093da <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800939c:	2300      	movs	r3, #0
 800939e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80093a0:	69bb      	ldr	r3, [r7, #24]
 80093a2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80093a6:	461a      	mov	r2, r3
 80093a8:	f107 0310 	add.w	r3, r7, #16
 80093ac:	6812      	ldr	r2, [r2, #0]
 80093ae:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80093b0:	693a      	ldr	r2, [r7, #16]
 80093b2:	6a3b      	ldr	r3, [r7, #32]
 80093b4:	b2db      	uxtb	r3, r3
 80093b6:	00db      	lsls	r3, r3, #3
 80093b8:	fa22 f303 	lsr.w	r3, r2, r3
 80093bc:	b2da      	uxtb	r2, r3
 80093be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093c0:	701a      	strb	r2, [r3, #0]
      i++;
 80093c2:	6a3b      	ldr	r3, [r7, #32]
 80093c4:	3301      	adds	r3, #1
 80093c6:	623b      	str	r3, [r7, #32]
      pDest++;
 80093c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80093ca:	3301      	adds	r3, #1
 80093cc:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 80093ce:	8bfb      	ldrh	r3, [r7, #30]
 80093d0:	3b01      	subs	r3, #1
 80093d2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80093d4:	8bfb      	ldrh	r3, [r7, #30]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d1ea      	bne.n	80093b0 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80093da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80093dc:	4618      	mov	r0, r3
 80093de:	372c      	adds	r7, #44	@ 0x2c
 80093e0:	46bd      	mov	sp, r7
 80093e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e6:	4770      	bx	lr

080093e8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80093e8:	b480      	push	{r7}
 80093ea:	b085      	sub	sp, #20
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
 80093f0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	781b      	ldrb	r3, [r3, #0]
 80093fa:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	785b      	ldrb	r3, [r3, #1]
 8009400:	2b01      	cmp	r3, #1
 8009402:	d12c      	bne.n	800945e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	015a      	lsls	r2, r3, #5
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	4413      	add	r3, r2
 800940c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	2b00      	cmp	r3, #0
 8009414:	db12      	blt.n	800943c <USB_EPSetStall+0x54>
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00f      	beq.n	800943c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 800941c:	68bb      	ldr	r3, [r7, #8]
 800941e:	015a      	lsls	r2, r3, #5
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	4413      	add	r3, r2
 8009424:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	68ba      	ldr	r2, [r7, #8]
 800942c:	0151      	lsls	r1, r2, #5
 800942e:	68fa      	ldr	r2, [r7, #12]
 8009430:	440a      	add	r2, r1
 8009432:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009436:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800943a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	4413      	add	r3, r2
 8009444:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	68ba      	ldr	r2, [r7, #8]
 800944c:	0151      	lsls	r1, r2, #5
 800944e:	68fa      	ldr	r2, [r7, #12]
 8009450:	440a      	add	r2, r1
 8009452:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 8009456:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800945a:	6013      	str	r3, [r2, #0]
 800945c:	e02b      	b.n	80094b6 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800945e:	68bb      	ldr	r3, [r7, #8]
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	4413      	add	r3, r2
 8009466:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800946a:	681b      	ldr	r3, [r3, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	db12      	blt.n	8009496 <USB_EPSetStall+0xae>
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	2b00      	cmp	r3, #0
 8009474:	d00f      	beq.n	8009496 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8009476:	68bb      	ldr	r3, [r7, #8]
 8009478:	015a      	lsls	r2, r3, #5
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	4413      	add	r3, r2
 800947e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	68ba      	ldr	r2, [r7, #8]
 8009486:	0151      	lsls	r1, r2, #5
 8009488:	68fa      	ldr	r2, [r7, #12]
 800948a:	440a      	add	r2, r1
 800948c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009490:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8009494:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8009496:	68bb      	ldr	r3, [r7, #8]
 8009498:	015a      	lsls	r2, r3, #5
 800949a:	68fb      	ldr	r3, [r7, #12]
 800949c:	4413      	add	r3, r2
 800949e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80094a2:	681b      	ldr	r3, [r3, #0]
 80094a4:	68ba      	ldr	r2, [r7, #8]
 80094a6:	0151      	lsls	r1, r2, #5
 80094a8:	68fa      	ldr	r2, [r7, #12]
 80094aa:	440a      	add	r2, r1
 80094ac:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 80094b0:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80094b4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80094b6:	2300      	movs	r3, #0
}
 80094b8:	4618      	mov	r0, r3
 80094ba:	3714      	adds	r7, #20
 80094bc:	46bd      	mov	sp, r7
 80094be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094c2:	4770      	bx	lr

080094c4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(const USB_OTG_GlobalTypeDef *USBx, const USB_OTG_EPTypeDef *ep)
{
 80094c4:	b480      	push	{r7}
 80094c6:	b085      	sub	sp, #20
 80094c8:	af00      	add	r7, sp, #0
 80094ca:	6078      	str	r0, [r7, #4]
 80094cc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80094d2:	683b      	ldr	r3, [r7, #0]
 80094d4:	781b      	ldrb	r3, [r3, #0]
 80094d6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	785b      	ldrb	r3, [r3, #1]
 80094dc:	2b01      	cmp	r3, #1
 80094de:	d128      	bne.n	8009532 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80094e0:	68bb      	ldr	r3, [r7, #8]
 80094e2:	015a      	lsls	r2, r3, #5
 80094e4:	68fb      	ldr	r3, [r7, #12]
 80094e6:	4413      	add	r3, r2
 80094e8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	68ba      	ldr	r2, [r7, #8]
 80094f0:	0151      	lsls	r1, r2, #5
 80094f2:	68fa      	ldr	r2, [r7, #12]
 80094f4:	440a      	add	r2, r1
 80094f6:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80094fa:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 80094fe:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009500:	683b      	ldr	r3, [r7, #0]
 8009502:	791b      	ldrb	r3, [r3, #4]
 8009504:	2b03      	cmp	r3, #3
 8009506:	d003      	beq.n	8009510 <USB_EPClearStall+0x4c>
 8009508:	683b      	ldr	r3, [r7, #0]
 800950a:	791b      	ldrb	r3, [r3, #4]
 800950c:	2b02      	cmp	r3, #2
 800950e:	d138      	bne.n	8009582 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009510:	68bb      	ldr	r3, [r7, #8]
 8009512:	015a      	lsls	r2, r3, #5
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	4413      	add	r3, r2
 8009518:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	68ba      	ldr	r2, [r7, #8]
 8009520:	0151      	lsls	r1, r2, #5
 8009522:	68fa      	ldr	r2, [r7, #12]
 8009524:	440a      	add	r2, r1
 8009526:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 800952a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800952e:	6013      	str	r3, [r2, #0]
 8009530:	e027      	b.n	8009582 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	015a      	lsls	r2, r3, #5
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	4413      	add	r3, r2
 800953a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800953e:	681b      	ldr	r3, [r3, #0]
 8009540:	68ba      	ldr	r2, [r7, #8]
 8009542:	0151      	lsls	r1, r2, #5
 8009544:	68fa      	ldr	r2, [r7, #12]
 8009546:	440a      	add	r2, r1
 8009548:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800954c:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8009550:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8009552:	683b      	ldr	r3, [r7, #0]
 8009554:	791b      	ldrb	r3, [r3, #4]
 8009556:	2b03      	cmp	r3, #3
 8009558:	d003      	beq.n	8009562 <USB_EPClearStall+0x9e>
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	791b      	ldrb	r3, [r3, #4]
 800955e:	2b02      	cmp	r3, #2
 8009560:	d10f      	bne.n	8009582 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8009562:	68bb      	ldr	r3, [r7, #8]
 8009564:	015a      	lsls	r2, r3, #5
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	4413      	add	r3, r2
 800956a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	68ba      	ldr	r2, [r7, #8]
 8009572:	0151      	lsls	r1, r2, #5
 8009574:	68fa      	ldr	r2, [r7, #12]
 8009576:	440a      	add	r2, r1
 8009578:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800957c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8009580:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8009582:	2300      	movs	r3, #0
}
 8009584:	4618      	mov	r0, r3
 8009586:	3714      	adds	r7, #20
 8009588:	46bd      	mov	sp, r7
 800958a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800958e:	4770      	bx	lr

08009590 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetDevAddress(const USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8009590:	b480      	push	{r7}
 8009592:	b085      	sub	sp, #20
 8009594:	af00      	add	r7, sp, #0
 8009596:	6078      	str	r0, [r7, #4]
 8009598:	460b      	mov	r3, r1
 800959a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800959c:	687b      	ldr	r3, [r7, #4]
 800959e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68fa      	ldr	r2, [r7, #12]
 80095aa:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80095ae:	f423 63fe 	bic.w	r3, r3, #2032	@ 0x7f0
 80095b2:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80095ba:	681a      	ldr	r2, [r3, #0]
 80095bc:	78fb      	ldrb	r3, [r7, #3]
 80095be:	011b      	lsls	r3, r3, #4
 80095c0:	f403 63fe 	and.w	r3, r3, #2032	@ 0x7f0
 80095c4:	68f9      	ldr	r1, [r7, #12]
 80095c6:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 80095ca:	4313      	orrs	r3, r2
 80095cc:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80095ce:	2300      	movs	r3, #0
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3714      	adds	r7, #20
 80095d4:	46bd      	mov	sp, r7
 80095d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095da:	4770      	bx	lr

080095dc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevConnect(const USB_OTG_GlobalTypeDef *USBx)
{
 80095dc:	b480      	push	{r7}
 80095de:	b085      	sub	sp, #20
 80095e0:	af00      	add	r7, sp, #0
 80095e2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	68fa      	ldr	r2, [r7, #12]
 80095f2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 80095f6:	f023 0303 	bic.w	r3, r3, #3
 80095fa:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009602:	685b      	ldr	r3, [r3, #4]
 8009604:	68fa      	ldr	r2, [r7, #12]
 8009606:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800960a:	f023 0302 	bic.w	r3, r3, #2
 800960e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009610:	2300      	movs	r3, #0
}
 8009612:	4618      	mov	r0, r3
 8009614:	3714      	adds	r7, #20
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800961e:	b480      	push	{r7}
 8009620:	b085      	sub	sp, #20
 8009622:	af00      	add	r7, sp, #0
 8009624:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	68fa      	ldr	r2, [r7, #12]
 8009634:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8009638:	f023 0303 	bic.w	r3, r3, #3
 800963c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009644:	685b      	ldr	r3, [r3, #4]
 8009646:	68fa      	ldr	r2, [r7, #12]
 8009648:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800964c:	f043 0302 	orr.w	r3, r3, #2
 8009650:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8009652:	2300      	movs	r3, #0
}
 8009654:	4618      	mov	r0, r3
 8009656:	3714      	adds	r7, #20
 8009658:	46bd      	mov	sp, r7
 800965a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800965e:	4770      	bx	lr

08009660 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8009660:	b480      	push	{r7}
 8009662:	b085      	sub	sp, #20
 8009664:	af00      	add	r7, sp, #0
 8009666:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	695b      	ldr	r3, [r3, #20]
 800966c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	699b      	ldr	r3, [r3, #24]
 8009672:	68fa      	ldr	r2, [r7, #12]
 8009674:	4013      	ands	r3, r2
 8009676:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8009678:	68fb      	ldr	r3, [r7, #12]
}
 800967a:	4618      	mov	r0, r3
 800967c:	3714      	adds	r7, #20
 800967e:	46bd      	mov	sp, r7
 8009680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009684:	4770      	bx	lr

08009686 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device OUT EP interrupt status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8009686:	b480      	push	{r7}
 8009688:	b085      	sub	sp, #20
 800968a:	af00      	add	r7, sp, #0
 800968c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009698:	699b      	ldr	r3, [r3, #24]
 800969a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096a2:	69db      	ldr	r3, [r3, #28]
 80096a4:	68ba      	ldr	r2, [r7, #8]
 80096a6:	4013      	ands	r3, r2
 80096a8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 80096aa:	68bb      	ldr	r3, [r7, #8]
 80096ac:	0c1b      	lsrs	r3, r3, #16
}
 80096ae:	4618      	mov	r0, r3
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr

080096ba <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval USB Device IN EP interrupt status
  */
uint32_t USB_ReadDevAllInEpInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 80096ba:	b480      	push	{r7}
 80096bc:	b085      	sub	sp, #20
 80096be:	af00      	add	r7, sp, #0
 80096c0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096cc:	699b      	ldr	r3, [r3, #24]
 80096ce:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80096d0:	68fb      	ldr	r3, [r7, #12]
 80096d2:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80096d6:	69db      	ldr	r3, [r3, #28]
 80096d8:	68ba      	ldr	r2, [r7, #8]
 80096da:	4013      	ands	r3, r2
 80096dc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80096de:	68bb      	ldr	r3, [r7, #8]
 80096e0:	b29b      	uxth	r3, r3
}
 80096e2:	4618      	mov	r0, r3
 80096e4:	3714      	adds	r7, #20
 80096e6:	46bd      	mov	sp, r7
 80096e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ec:	4770      	bx	lr

080096ee <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80096ee:	b480      	push	{r7}
 80096f0:	b085      	sub	sp, #20
 80096f2:	af00      	add	r7, sp, #0
 80096f4:	6078      	str	r0, [r7, #4]
 80096f6:	460b      	mov	r3, r1
 80096f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80096fe:	78fb      	ldrb	r3, [r7, #3]
 8009700:	015a      	lsls	r2, r3, #5
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	4413      	add	r3, r2
 8009706:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800970a:	689b      	ldr	r3, [r3, #8]
 800970c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009714:	695b      	ldr	r3, [r3, #20]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	4013      	ands	r3, r2
 800971a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800971c:	68bb      	ldr	r3, [r7, #8]
}
 800971e:	4618      	mov	r0, r3
 8009720:	3714      	adds	r7, #20
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(const USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800972a:	b480      	push	{r7}
 800972c:	b087      	sub	sp, #28
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
 8009732:	460b      	mov	r3, r1
 8009734:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800973a:	697b      	ldr	r3, [r7, #20]
 800973c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8009740:	691b      	ldr	r3, [r3, #16]
 8009742:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8009744:	697b      	ldr	r3, [r7, #20]
 8009746:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 800974a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800974c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800974e:	78fb      	ldrb	r3, [r7, #3]
 8009750:	f003 030f 	and.w	r3, r3, #15
 8009754:	68fa      	ldr	r2, [r7, #12]
 8009756:	fa22 f303 	lsr.w	r3, r2, r3
 800975a:	01db      	lsls	r3, r3, #7
 800975c:	b2db      	uxtb	r3, r3
 800975e:	693a      	ldr	r2, [r7, #16]
 8009760:	4313      	orrs	r3, r2
 8009762:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8009764:	78fb      	ldrb	r3, [r7, #3]
 8009766:	015a      	lsls	r2, r3, #5
 8009768:	697b      	ldr	r3, [r7, #20]
 800976a:	4413      	add	r3, r2
 800976c:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8009770:	689b      	ldr	r3, [r3, #8]
 8009772:	693a      	ldr	r2, [r7, #16]
 8009774:	4013      	ands	r3, r2
 8009776:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8009778:	68bb      	ldr	r3, [r7, #8]
}
 800977a:	4618      	mov	r0, r3
 800977c:	371c      	adds	r7, #28
 800977e:	46bd      	mov	sp, r7
 8009780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009784:	4770      	bx	lr

08009786 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8009786:	b480      	push	{r7}
 8009788:	b083      	sub	sp, #12
 800978a:	af00      	add	r7, sp, #0
 800978c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	695b      	ldr	r3, [r3, #20]
 8009792:	f003 0301 	and.w	r3, r3, #1
}
 8009796:	4618      	mov	r0, r3
 8009798:	370c      	adds	r7, #12
 800979a:	46bd      	mov	sp, r7
 800979c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097a0:	4770      	bx	lr

080097a2 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateSetup(const USB_OTG_GlobalTypeDef *USBx)
{
 80097a2:	b480      	push	{r7}
 80097a4:	b085      	sub	sp, #20
 80097a6:	af00      	add	r7, sp, #0
 80097a8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 80097ae:	68fb      	ldr	r3, [r7, #12]
 80097b0:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	68fa      	ldr	r2, [r7, #12]
 80097b8:	f502 6210 	add.w	r2, r2, #2304	@ 0x900
 80097bc:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80097c0:	f023 0307 	bic.w	r3, r3, #7
 80097c4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80097cc:	685b      	ldr	r3, [r3, #4]
 80097ce:	68fa      	ldr	r2, [r7, #12]
 80097d0:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80097d4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80097d8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80097da:	2300      	movs	r3, #0
}
 80097dc:	4618      	mov	r0, r3
 80097de:	3714      	adds	r7, #20
 80097e0:	46bd      	mov	sp, r7
 80097e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e6:	4770      	bx	lr

080097e8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(const USB_OTG_GlobalTypeDef *USBx, uint8_t dma, const uint8_t *psetup)
{
 80097e8:	b480      	push	{r7}
 80097ea:	b087      	sub	sp, #28
 80097ec:	af00      	add	r7, sp, #0
 80097ee:	60f8      	str	r0, [r7, #12]
 80097f0:	460b      	mov	r3, r1
 80097f2:	607a      	str	r2, [r7, #4]
 80097f4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80097f6:	68fb      	ldr	r3, [r7, #12]
 80097f8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO const uint32_t *)(&USBx->CID + 0x1U);
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	333c      	adds	r3, #60	@ 0x3c
 80097fe:	3304      	adds	r3, #4
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8009804:	693b      	ldr	r3, [r7, #16]
 8009806:	4a26      	ldr	r2, [pc, #152]	@ (80098a0 <USB_EP0_OutStart+0xb8>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d90a      	bls.n	8009822 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800980c:	697b      	ldr	r3, [r7, #20]
 800980e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009812:	681b      	ldr	r3, [r3, #0]
 8009814:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8009818:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800981c:	d101      	bne.n	8009822 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 800981e:	2300      	movs	r3, #0
 8009820:	e037      	b.n	8009892 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8009822:	697b      	ldr	r3, [r7, #20]
 8009824:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009828:	461a      	mov	r2, r3
 800982a:	2300      	movs	r3, #0
 800982c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800982e:	697b      	ldr	r3, [r7, #20]
 8009830:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009834:	691b      	ldr	r3, [r3, #16]
 8009836:	697a      	ldr	r2, [r7, #20]
 8009838:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800983c:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8009840:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8009842:	697b      	ldr	r3, [r7, #20]
 8009844:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009848:	691b      	ldr	r3, [r3, #16]
 800984a:	697a      	ldr	r2, [r7, #20]
 800984c:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009850:	f043 0318 	orr.w	r3, r3, #24
 8009854:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8009856:	697b      	ldr	r3, [r7, #20]
 8009858:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 800985c:	691b      	ldr	r3, [r3, #16]
 800985e:	697a      	ldr	r2, [r7, #20]
 8009860:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 8009864:	f043 43c0 	orr.w	r3, r3, #1610612736	@ 0x60000000
 8009868:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800986a:	7afb      	ldrb	r3, [r7, #11]
 800986c:	2b01      	cmp	r3, #1
 800986e:	d10f      	bne.n	8009890 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8009870:	697b      	ldr	r3, [r7, #20]
 8009872:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009876:	461a      	mov	r2, r3
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800987c:	697b      	ldr	r3, [r7, #20]
 800987e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	697a      	ldr	r2, [r7, #20]
 8009886:	f502 6230 	add.w	r2, r2, #2816	@ 0xb00
 800988a:	f043 2380 	orr.w	r3, r3, #2147516416	@ 0x80008000
 800988e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8009890:	2300      	movs	r3, #0
}
 8009892:	4618      	mov	r0, r3
 8009894:	371c      	adds	r7, #28
 8009896:	46bd      	mov	sp, r7
 8009898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800989c:	4770      	bx	lr
 800989e:	bf00      	nop
 80098a0:	4f54300a 	.word	0x4f54300a

080098a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80098a4:	b480      	push	{r7}
 80098a6:	b085      	sub	sp, #20
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80098ac:	2300      	movs	r3, #0
 80098ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80098b0:	68fb      	ldr	r3, [r7, #12]
 80098b2:	3301      	adds	r3, #1
 80098b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098bc:	d901      	bls.n	80098c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80098be:	2303      	movs	r3, #3
 80098c0:	e022      	b.n	8009908 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	691b      	ldr	r3, [r3, #16]
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	daf2      	bge.n	80098b0 <USB_CoreReset+0xc>

  count = 10U;
 80098ca:	230a      	movs	r3, #10
 80098cc:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 80098ce:	e002      	b.n	80098d6 <USB_CoreReset+0x32>
  {
    count--;
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	3b01      	subs	r3, #1
 80098d4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	2b00      	cmp	r3, #0
 80098da:	d1f9      	bne.n	80098d0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	691b      	ldr	r3, [r3, #16]
 80098e0:	f043 0201 	orr.w	r2, r3, #1
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3301      	adds	r3, #1
 80098ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80098f4:	d901      	bls.n	80098fa <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 80098f6:	2303      	movs	r3, #3
 80098f8:	e006      	b.n	8009908 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	f003 0301 	and.w	r3, r3, #1
 8009902:	2b01      	cmp	r3, #1
 8009904:	d0f0      	beq.n	80098e8 <USB_CoreReset+0x44>

  return HAL_OK;
 8009906:	2300      	movs	r3, #0
}
 8009908:	4618      	mov	r0, r3
 800990a:	3714      	adds	r7, #20
 800990c:	46bd      	mov	sp, r7
 800990e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009912:	4770      	bx	lr

08009914 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009914:	b580      	push	{r7, lr}
 8009916:	b084      	sub	sp, #16
 8009918:	af00      	add	r7, sp, #0
 800991a:	6078      	str	r0, [r7, #4]
 800991c:	460b      	mov	r3, r1
 800991e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8009920:	f44f 7007 	mov.w	r0, #540	@ 0x21c
 8009924:	f002 fcb2 	bl	800c28c <USBD_static_malloc>
 8009928:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800992a:	68fb      	ldr	r3, [r7, #12]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d109      	bne.n	8009944 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	32b0      	adds	r2, #176	@ 0xb0
 800993a:	2100      	movs	r1, #0
 800993c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8009940:	2302      	movs	r3, #2
 8009942:	e0d4      	b.n	8009aee <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8009944:	f44f 7207 	mov.w	r2, #540	@ 0x21c
 8009948:	2100      	movs	r1, #0
 800994a:	68f8      	ldr	r0, [r7, #12]
 800994c:	f003 fc92 	bl	800d274 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	32b0      	adds	r2, #176	@ 0xb0
 800995a:	68f9      	ldr	r1, [r7, #12]
 800995c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	32b0      	adds	r2, #176	@ 0xb0
 800996a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800996e:	687b      	ldr	r3, [r7, #4]
 8009970:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	7c1b      	ldrb	r3, [r3, #16]
 8009978:	2b00      	cmp	r3, #0
 800997a:	d138      	bne.n	80099ee <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 800997c:	4b5e      	ldr	r3, [pc, #376]	@ (8009af8 <USBD_CDC_Init+0x1e4>)
 800997e:	7819      	ldrb	r1, [r3, #0]
 8009980:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009984:	2202      	movs	r2, #2
 8009986:	6878      	ldr	r0, [r7, #4]
 8009988:	f002 fb5d 	bl	800c046 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 800998c:	4b5a      	ldr	r3, [pc, #360]	@ (8009af8 <USBD_CDC_Init+0x1e4>)
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	f003 020f 	and.w	r2, r3, #15
 8009994:	6879      	ldr	r1, [r7, #4]
 8009996:	4613      	mov	r3, r2
 8009998:	009b      	lsls	r3, r3, #2
 800999a:	4413      	add	r3, r2
 800999c:	009b      	lsls	r3, r3, #2
 800999e:	440b      	add	r3, r1
 80099a0:	3323      	adds	r3, #35	@ 0x23
 80099a2:	2201      	movs	r2, #1
 80099a4:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80099a6:	4b55      	ldr	r3, [pc, #340]	@ (8009afc <USBD_CDC_Init+0x1e8>)
 80099a8:	7819      	ldrb	r1, [r3, #0]
 80099aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80099ae:	2202      	movs	r2, #2
 80099b0:	6878      	ldr	r0, [r7, #4]
 80099b2:	f002 fb48 	bl	800c046 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80099b6:	4b51      	ldr	r3, [pc, #324]	@ (8009afc <USBD_CDC_Init+0x1e8>)
 80099b8:	781b      	ldrb	r3, [r3, #0]
 80099ba:	f003 020f 	and.w	r2, r3, #15
 80099be:	6879      	ldr	r1, [r7, #4]
 80099c0:	4613      	mov	r3, r2
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	009b      	lsls	r3, r3, #2
 80099c8:	440b      	add	r3, r1
 80099ca:	f203 1363 	addw	r3, r3, #355	@ 0x163
 80099ce:	2201      	movs	r2, #1
 80099d0:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 80099d2:	4b4b      	ldr	r3, [pc, #300]	@ (8009b00 <USBD_CDC_Init+0x1ec>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	f003 020f 	and.w	r2, r3, #15
 80099da:	6879      	ldr	r1, [r7, #4]
 80099dc:	4613      	mov	r3, r2
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	009b      	lsls	r3, r3, #2
 80099e4:	440b      	add	r3, r1
 80099e6:	331c      	adds	r3, #28
 80099e8:	2210      	movs	r2, #16
 80099ea:	601a      	str	r2, [r3, #0]
 80099ec:	e035      	b.n	8009a5a <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80099ee:	4b42      	ldr	r3, [pc, #264]	@ (8009af8 <USBD_CDC_Init+0x1e4>)
 80099f0:	7819      	ldrb	r1, [r3, #0]
 80099f2:	2340      	movs	r3, #64	@ 0x40
 80099f4:	2202      	movs	r2, #2
 80099f6:	6878      	ldr	r0, [r7, #4]
 80099f8:	f002 fb25 	bl	800c046 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80099fc:	4b3e      	ldr	r3, [pc, #248]	@ (8009af8 <USBD_CDC_Init+0x1e4>)
 80099fe:	781b      	ldrb	r3, [r3, #0]
 8009a00:	f003 020f 	and.w	r2, r3, #15
 8009a04:	6879      	ldr	r1, [r7, #4]
 8009a06:	4613      	mov	r3, r2
 8009a08:	009b      	lsls	r3, r3, #2
 8009a0a:	4413      	add	r3, r2
 8009a0c:	009b      	lsls	r3, r3, #2
 8009a0e:	440b      	add	r3, r1
 8009a10:	3323      	adds	r3, #35	@ 0x23
 8009a12:	2201      	movs	r2, #1
 8009a14:	701a      	strb	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8009a16:	4b39      	ldr	r3, [pc, #228]	@ (8009afc <USBD_CDC_Init+0x1e8>)
 8009a18:	7819      	ldrb	r1, [r3, #0]
 8009a1a:	2340      	movs	r3, #64	@ 0x40
 8009a1c:	2202      	movs	r2, #2
 8009a1e:	6878      	ldr	r0, [r7, #4]
 8009a20:	f002 fb11 	bl	800c046 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8009a24:	4b35      	ldr	r3, [pc, #212]	@ (8009afc <USBD_CDC_Init+0x1e8>)
 8009a26:	781b      	ldrb	r3, [r3, #0]
 8009a28:	f003 020f 	and.w	r2, r3, #15
 8009a2c:	6879      	ldr	r1, [r7, #4]
 8009a2e:	4613      	mov	r3, r2
 8009a30:	009b      	lsls	r3, r3, #2
 8009a32:	4413      	add	r3, r2
 8009a34:	009b      	lsls	r3, r3, #2
 8009a36:	440b      	add	r3, r1
 8009a38:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009a3c:	2201      	movs	r2, #1
 8009a3e:	701a      	strb	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8009a40:	4b2f      	ldr	r3, [pc, #188]	@ (8009b00 <USBD_CDC_Init+0x1ec>)
 8009a42:	781b      	ldrb	r3, [r3, #0]
 8009a44:	f003 020f 	and.w	r2, r3, #15
 8009a48:	6879      	ldr	r1, [r7, #4]
 8009a4a:	4613      	mov	r3, r2
 8009a4c:	009b      	lsls	r3, r3, #2
 8009a4e:	4413      	add	r3, r2
 8009a50:	009b      	lsls	r3, r3, #2
 8009a52:	440b      	add	r3, r1
 8009a54:	331c      	adds	r3, #28
 8009a56:	2210      	movs	r2, #16
 8009a58:	601a      	str	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8009a5a:	4b29      	ldr	r3, [pc, #164]	@ (8009b00 <USBD_CDC_Init+0x1ec>)
 8009a5c:	7819      	ldrb	r1, [r3, #0]
 8009a5e:	2308      	movs	r3, #8
 8009a60:	2203      	movs	r2, #3
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	f002 faef 	bl	800c046 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8009a68:	4b25      	ldr	r3, [pc, #148]	@ (8009b00 <USBD_CDC_Init+0x1ec>)
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	f003 020f 	and.w	r2, r3, #15
 8009a70:	6879      	ldr	r1, [r7, #4]
 8009a72:	4613      	mov	r3, r2
 8009a74:	009b      	lsls	r3, r3, #2
 8009a76:	4413      	add	r3, r2
 8009a78:	009b      	lsls	r3, r3, #2
 8009a7a:	440b      	add	r3, r1
 8009a7c:	3323      	adds	r3, #35	@ 0x23
 8009a7e:	2201      	movs	r2, #1
 8009a80:	701a      	strb	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8009a82:	68fb      	ldr	r3, [r7, #12]
 8009a84:	2200      	movs	r2, #0
 8009a86:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009a90:	687a      	ldr	r2, [r7, #4]
 8009a92:	33b0      	adds	r3, #176	@ 0xb0
 8009a94:	009b      	lsls	r3, r3, #2
 8009a96:	4413      	add	r3, r2
 8009a98:	685b      	ldr	r3, [r3, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	2200      	movs	r2, #0
 8009aa2:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
  hcdc->RxState = 0U;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	2200      	movs	r2, #0
 8009aaa:	f8c3 2218 	str.w	r2, [r3, #536]	@ 0x218

  if (hcdc->RxBuffer == NULL)
 8009aae:	68fb      	ldr	r3, [r7, #12]
 8009ab0:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d101      	bne.n	8009abc <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8009ab8:	2302      	movs	r3, #2
 8009aba:	e018      	b.n	8009aee <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	7c1b      	ldrb	r3, [r3, #16]
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d10a      	bne.n	8009ada <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ac4:	4b0d      	ldr	r3, [pc, #52]	@ (8009afc <USBD_CDC_Init+0x1e8>)
 8009ac6:	7819      	ldrb	r1, [r3, #0]
 8009ac8:	68fb      	ldr	r3, [r7, #12]
 8009aca:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ace:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ad2:	6878      	ldr	r0, [r7, #4]
 8009ad4:	f002 fba6 	bl	800c224 <USBD_LL_PrepareReceive>
 8009ad8:	e008      	b.n	8009aec <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8009ada:	4b08      	ldr	r3, [pc, #32]	@ (8009afc <USBD_CDC_Init+0x1e8>)
 8009adc:	7819      	ldrb	r1, [r3, #0]
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8009ae4:	2340      	movs	r3, #64	@ 0x40
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	f002 fb9c 	bl	800c224 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8009aec:	2300      	movs	r3, #0
}
 8009aee:	4618      	mov	r0, r3
 8009af0:	3710      	adds	r7, #16
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	200000a3 	.word	0x200000a3
 8009afc:	200000a4 	.word	0x200000a4
 8009b00:	200000a5 	.word	0x200000a5

08009b04 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b082      	sub	sp, #8
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8009b10:	4b3a      	ldr	r3, [pc, #232]	@ (8009bfc <USBD_CDC_DeInit+0xf8>)
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	4619      	mov	r1, r3
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f002 fabb 	bl	800c092 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8009b1c:	4b37      	ldr	r3, [pc, #220]	@ (8009bfc <USBD_CDC_DeInit+0xf8>)
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	f003 020f 	and.w	r2, r3, #15
 8009b24:	6879      	ldr	r1, [r7, #4]
 8009b26:	4613      	mov	r3, r2
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	4413      	add	r3, r2
 8009b2c:	009b      	lsls	r3, r3, #2
 8009b2e:	440b      	add	r3, r1
 8009b30:	3323      	adds	r3, #35	@ 0x23
 8009b32:	2200      	movs	r2, #0
 8009b34:	701a      	strb	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8009b36:	4b32      	ldr	r3, [pc, #200]	@ (8009c00 <USBD_CDC_DeInit+0xfc>)
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	4619      	mov	r1, r3
 8009b3c:	6878      	ldr	r0, [r7, #4]
 8009b3e:	f002 faa8 	bl	800c092 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8009b42:	4b2f      	ldr	r3, [pc, #188]	@ (8009c00 <USBD_CDC_DeInit+0xfc>)
 8009b44:	781b      	ldrb	r3, [r3, #0]
 8009b46:	f003 020f 	and.w	r2, r3, #15
 8009b4a:	6879      	ldr	r1, [r7, #4]
 8009b4c:	4613      	mov	r3, r2
 8009b4e:	009b      	lsls	r3, r3, #2
 8009b50:	4413      	add	r3, r2
 8009b52:	009b      	lsls	r3, r3, #2
 8009b54:	440b      	add	r3, r1
 8009b56:	f203 1363 	addw	r3, r3, #355	@ 0x163
 8009b5a:	2200      	movs	r2, #0
 8009b5c:	701a      	strb	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8009b5e:	4b29      	ldr	r3, [pc, #164]	@ (8009c04 <USBD_CDC_DeInit+0x100>)
 8009b60:	781b      	ldrb	r3, [r3, #0]
 8009b62:	4619      	mov	r1, r3
 8009b64:	6878      	ldr	r0, [r7, #4]
 8009b66:	f002 fa94 	bl	800c092 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8009b6a:	4b26      	ldr	r3, [pc, #152]	@ (8009c04 <USBD_CDC_DeInit+0x100>)
 8009b6c:	781b      	ldrb	r3, [r3, #0]
 8009b6e:	f003 020f 	and.w	r2, r3, #15
 8009b72:	6879      	ldr	r1, [r7, #4]
 8009b74:	4613      	mov	r3, r2
 8009b76:	009b      	lsls	r3, r3, #2
 8009b78:	4413      	add	r3, r2
 8009b7a:	009b      	lsls	r3, r3, #2
 8009b7c:	440b      	add	r3, r1
 8009b7e:	3323      	adds	r3, #35	@ 0x23
 8009b80:	2200      	movs	r2, #0
 8009b82:	701a      	strb	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8009b84:	4b1f      	ldr	r3, [pc, #124]	@ (8009c04 <USBD_CDC_DeInit+0x100>)
 8009b86:	781b      	ldrb	r3, [r3, #0]
 8009b88:	f003 020f 	and.w	r2, r3, #15
 8009b8c:	6879      	ldr	r1, [r7, #4]
 8009b8e:	4613      	mov	r3, r2
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	440b      	add	r3, r1
 8009b98:	331c      	adds	r3, #28
 8009b9a:	2200      	movs	r2, #0
 8009b9c:	601a      	str	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	32b0      	adds	r2, #176	@ 0xb0
 8009ba8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d01f      	beq.n	8009bf0 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009bb6:	687a      	ldr	r2, [r7, #4]
 8009bb8:	33b0      	adds	r3, #176	@ 0xb0
 8009bba:	009b      	lsls	r3, r3, #2
 8009bbc:	4413      	add	r3, r2
 8009bbe:	685b      	ldr	r3, [r3, #4]
 8009bc0:	685b      	ldr	r3, [r3, #4]
 8009bc2:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	32b0      	adds	r2, #176	@ 0xb0
 8009bce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009bd2:	4618      	mov	r0, r3
 8009bd4:	f002 fb68 	bl	800c2a8 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	32b0      	adds	r2, #176	@ 0xb0
 8009be2:	2100      	movs	r1, #0
 8009be4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2200      	movs	r2, #0
 8009bec:	f8c3 22bc 	str.w	r2, [r3, #700]	@ 0x2bc
  }

  return (uint8_t)USBD_OK;
 8009bf0:	2300      	movs	r3, #0
}
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	3708      	adds	r7, #8
 8009bf6:	46bd      	mov	sp, r7
 8009bf8:	bd80      	pop	{r7, pc}
 8009bfa:	bf00      	nop
 8009bfc:	200000a3 	.word	0x200000a3
 8009c00:	200000a4 	.word	0x200000a4
 8009c04:	200000a5 	.word	0x200000a5

08009c08 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8009c08:	b580      	push	{r7, lr}
 8009c0a:	b086      	sub	sp, #24
 8009c0c:	af00      	add	r7, sp, #0
 8009c0e:	6078      	str	r0, [r7, #4]
 8009c10:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	32b0      	adds	r2, #176	@ 0xb0
 8009c1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009c20:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8009c22:	2300      	movs	r3, #0
 8009c24:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8009c26:	2300      	movs	r3, #0
 8009c28:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8009c2a:	2300      	movs	r3, #0
 8009c2c:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8009c2e:	693b      	ldr	r3, [r7, #16]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d101      	bne.n	8009c38 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8009c34:	2303      	movs	r3, #3
 8009c36:	e0bf      	b.n	8009db8 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	781b      	ldrb	r3, [r3, #0]
 8009c3c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8009c40:	2b00      	cmp	r3, #0
 8009c42:	d050      	beq.n	8009ce6 <USBD_CDC_Setup+0xde>
 8009c44:	2b20      	cmp	r3, #32
 8009c46:	f040 80af 	bne.w	8009da8 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8009c4a:	683b      	ldr	r3, [r7, #0]
 8009c4c:	88db      	ldrh	r3, [r3, #6]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d03a      	beq.n	8009cc8 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8009c52:	683b      	ldr	r3, [r7, #0]
 8009c54:	781b      	ldrb	r3, [r3, #0]
 8009c56:	b25b      	sxtb	r3, r3
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	da1b      	bge.n	8009c94 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009c62:	687a      	ldr	r2, [r7, #4]
 8009c64:	33b0      	adds	r3, #176	@ 0xb0
 8009c66:	009b      	lsls	r3, r3, #2
 8009c68:	4413      	add	r3, r2
 8009c6a:	685b      	ldr	r3, [r3, #4]
 8009c6c:	689b      	ldr	r3, [r3, #8]
 8009c6e:	683a      	ldr	r2, [r7, #0]
 8009c70:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 8009c72:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009c74:	683a      	ldr	r2, [r7, #0]
 8009c76:	88d2      	ldrh	r2, [r2, #6]
 8009c78:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8009c7a:	683b      	ldr	r3, [r7, #0]
 8009c7c:	88db      	ldrh	r3, [r3, #6]
 8009c7e:	2b07      	cmp	r3, #7
 8009c80:	bf28      	it	cs
 8009c82:	2307      	movcs	r3, #7
 8009c84:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8009c86:	693b      	ldr	r3, [r7, #16]
 8009c88:	89fa      	ldrh	r2, [r7, #14]
 8009c8a:	4619      	mov	r1, r3
 8009c8c:	6878      	ldr	r0, [r7, #4]
 8009c8e:	f001 fda9 	bl	800b7e4 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 8009c92:	e090      	b.n	8009db6 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8009c94:	683b      	ldr	r3, [r7, #0]
 8009c96:	785a      	ldrb	r2, [r3, #1]
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 8009c9e:	683b      	ldr	r3, [r7, #0]
 8009ca0:	88db      	ldrh	r3, [r3, #6]
 8009ca2:	2b3f      	cmp	r3, #63	@ 0x3f
 8009ca4:	d803      	bhi.n	8009cae <USBD_CDC_Setup+0xa6>
 8009ca6:	683b      	ldr	r3, [r7, #0]
 8009ca8:	88db      	ldrh	r3, [r3, #6]
 8009caa:	b2da      	uxtb	r2, r3
 8009cac:	e000      	b.n	8009cb0 <USBD_CDC_Setup+0xa8>
 8009cae:	2240      	movs	r2, #64	@ 0x40
 8009cb0:	693b      	ldr	r3, [r7, #16]
 8009cb2:	f883 2201 	strb.w	r2, [r3, #513]	@ 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 8009cb6:	6939      	ldr	r1, [r7, #16]
 8009cb8:	693b      	ldr	r3, [r7, #16]
 8009cba:	f893 3201 	ldrb.w	r3, [r3, #513]	@ 0x201
 8009cbe:	461a      	mov	r2, r3
 8009cc0:	6878      	ldr	r0, [r7, #4]
 8009cc2:	f001 fdbe 	bl	800b842 <USBD_CtlPrepareRx>
      break;
 8009cc6:	e076      	b.n	8009db6 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009cce:	687a      	ldr	r2, [r7, #4]
 8009cd0:	33b0      	adds	r3, #176	@ 0xb0
 8009cd2:	009b      	lsls	r3, r3, #2
 8009cd4:	4413      	add	r3, r2
 8009cd6:	685b      	ldr	r3, [r3, #4]
 8009cd8:	689b      	ldr	r3, [r3, #8]
 8009cda:	683a      	ldr	r2, [r7, #0]
 8009cdc:	7850      	ldrb	r0, [r2, #1]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	6839      	ldr	r1, [r7, #0]
 8009ce2:	4798      	blx	r3
      break;
 8009ce4:	e067      	b.n	8009db6 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8009ce6:	683b      	ldr	r3, [r7, #0]
 8009ce8:	785b      	ldrb	r3, [r3, #1]
 8009cea:	2b0b      	cmp	r3, #11
 8009cec:	d851      	bhi.n	8009d92 <USBD_CDC_Setup+0x18a>
 8009cee:	a201      	add	r2, pc, #4	@ (adr r2, 8009cf4 <USBD_CDC_Setup+0xec>)
 8009cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009cf4:	08009d25 	.word	0x08009d25
 8009cf8:	08009da1 	.word	0x08009da1
 8009cfc:	08009d93 	.word	0x08009d93
 8009d00:	08009d93 	.word	0x08009d93
 8009d04:	08009d93 	.word	0x08009d93
 8009d08:	08009d93 	.word	0x08009d93
 8009d0c:	08009d93 	.word	0x08009d93
 8009d10:	08009d93 	.word	0x08009d93
 8009d14:	08009d93 	.word	0x08009d93
 8009d18:	08009d93 	.word	0x08009d93
 8009d1c:	08009d4f 	.word	0x08009d4f
 8009d20:	08009d79 	.word	0x08009d79
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d24:	687b      	ldr	r3, [r7, #4]
 8009d26:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d2a:	b2db      	uxtb	r3, r3
 8009d2c:	2b03      	cmp	r3, #3
 8009d2e:	d107      	bne.n	8009d40 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8009d30:	f107 030a 	add.w	r3, r7, #10
 8009d34:	2202      	movs	r2, #2
 8009d36:	4619      	mov	r1, r3
 8009d38:	6878      	ldr	r0, [r7, #4]
 8009d3a:	f001 fd53 	bl	800b7e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d3e:	e032      	b.n	8009da6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d40:	6839      	ldr	r1, [r7, #0]
 8009d42:	6878      	ldr	r0, [r7, #4]
 8009d44:	f001 fcd1 	bl	800b6ea <USBD_CtlError>
            ret = USBD_FAIL;
 8009d48:	2303      	movs	r3, #3
 8009d4a:	75fb      	strb	r3, [r7, #23]
          break;
 8009d4c:	e02b      	b.n	8009da6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d54:	b2db      	uxtb	r3, r3
 8009d56:	2b03      	cmp	r3, #3
 8009d58:	d107      	bne.n	8009d6a <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8009d5a:	f107 030d 	add.w	r3, r7, #13
 8009d5e:	2201      	movs	r2, #1
 8009d60:	4619      	mov	r1, r3
 8009d62:	6878      	ldr	r0, [r7, #4]
 8009d64:	f001 fd3e 	bl	800b7e4 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8009d68:	e01d      	b.n	8009da6 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8009d6a:	6839      	ldr	r1, [r7, #0]
 8009d6c:	6878      	ldr	r0, [r7, #4]
 8009d6e:	f001 fcbc 	bl	800b6ea <USBD_CtlError>
            ret = USBD_FAIL;
 8009d72:	2303      	movs	r3, #3
 8009d74:	75fb      	strb	r3, [r7, #23]
          break;
 8009d76:	e016      	b.n	8009da6 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 8009d7e:	b2db      	uxtb	r3, r3
 8009d80:	2b03      	cmp	r3, #3
 8009d82:	d00f      	beq.n	8009da4 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8009d84:	6839      	ldr	r1, [r7, #0]
 8009d86:	6878      	ldr	r0, [r7, #4]
 8009d88:	f001 fcaf 	bl	800b6ea <USBD_CtlError>
            ret = USBD_FAIL;
 8009d8c:	2303      	movs	r3, #3
 8009d8e:	75fb      	strb	r3, [r7, #23]
          }
          break;
 8009d90:	e008      	b.n	8009da4 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8009d92:	6839      	ldr	r1, [r7, #0]
 8009d94:	6878      	ldr	r0, [r7, #4]
 8009d96:	f001 fca8 	bl	800b6ea <USBD_CtlError>
          ret = USBD_FAIL;
 8009d9a:	2303      	movs	r3, #3
 8009d9c:	75fb      	strb	r3, [r7, #23]
          break;
 8009d9e:	e002      	b.n	8009da6 <USBD_CDC_Setup+0x19e>
          break;
 8009da0:	bf00      	nop
 8009da2:	e008      	b.n	8009db6 <USBD_CDC_Setup+0x1ae>
          break;
 8009da4:	bf00      	nop
      }
      break;
 8009da6:	e006      	b.n	8009db6 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8009da8:	6839      	ldr	r1, [r7, #0]
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f001 fc9d 	bl	800b6ea <USBD_CtlError>
      ret = USBD_FAIL;
 8009db0:	2303      	movs	r3, #3
 8009db2:	75fb      	strb	r3, [r7, #23]
      break;
 8009db4:	bf00      	nop
  }

  return (uint8_t)ret;
 8009db6:	7dfb      	ldrb	r3, [r7, #23]
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3718      	adds	r7, #24
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b084      	sub	sp, #16
 8009dc4:	af00      	add	r7, sp, #0
 8009dc6:	6078      	str	r0, [r7, #4]
 8009dc8:	460b      	mov	r3, r1
 8009dca:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 8009dd2:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	32b0      	adds	r2, #176	@ 0xb0
 8009dde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d101      	bne.n	8009dea <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 8009de6:	2303      	movs	r3, #3
 8009de8:	e065      	b.n	8009eb6 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	32b0      	adds	r2, #176	@ 0xb0
 8009df4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009df8:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009dfa:	78fb      	ldrb	r3, [r7, #3]
 8009dfc:	f003 020f 	and.w	r2, r3, #15
 8009e00:	6879      	ldr	r1, [r7, #4]
 8009e02:	4613      	mov	r3, r2
 8009e04:	009b      	lsls	r3, r3, #2
 8009e06:	4413      	add	r3, r2
 8009e08:	009b      	lsls	r3, r3, #2
 8009e0a:	440b      	add	r3, r1
 8009e0c:	3314      	adds	r3, #20
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d02f      	beq.n	8009e74 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8009e14:	78fb      	ldrb	r3, [r7, #3]
 8009e16:	f003 020f 	and.w	r2, r3, #15
 8009e1a:	6879      	ldr	r1, [r7, #4]
 8009e1c:	4613      	mov	r3, r2
 8009e1e:	009b      	lsls	r3, r3, #2
 8009e20:	4413      	add	r3, r2
 8009e22:	009b      	lsls	r3, r3, #2
 8009e24:	440b      	add	r3, r1
 8009e26:	3314      	adds	r3, #20
 8009e28:	681a      	ldr	r2, [r3, #0]
 8009e2a:	78fb      	ldrb	r3, [r7, #3]
 8009e2c:	f003 010f 	and.w	r1, r3, #15
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	460b      	mov	r3, r1
 8009e34:	00db      	lsls	r3, r3, #3
 8009e36:	440b      	add	r3, r1
 8009e38:	009b      	lsls	r3, r3, #2
 8009e3a:	4403      	add	r3, r0
 8009e3c:	331c      	adds	r3, #28
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	fbb2 f1f3 	udiv	r1, r2, r3
 8009e44:	fb01 f303 	mul.w	r3, r1, r3
 8009e48:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d112      	bne.n	8009e74 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8009e4e:	78fb      	ldrb	r3, [r7, #3]
 8009e50:	f003 020f 	and.w	r2, r3, #15
 8009e54:	6879      	ldr	r1, [r7, #4]
 8009e56:	4613      	mov	r3, r2
 8009e58:	009b      	lsls	r3, r3, #2
 8009e5a:	4413      	add	r3, r2
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	440b      	add	r3, r1
 8009e60:	3314      	adds	r3, #20
 8009e62:	2200      	movs	r2, #0
 8009e64:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8009e66:	78f9      	ldrb	r1, [r7, #3]
 8009e68:	2300      	movs	r3, #0
 8009e6a:	2200      	movs	r2, #0
 8009e6c:	6878      	ldr	r0, [r7, #4]
 8009e6e:	f002 f9b8 	bl	800c1e2 <USBD_LL_Transmit>
 8009e72:	e01f      	b.n	8009eb4 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8009e74:	68bb      	ldr	r3, [r7, #8]
 8009e76:	2200      	movs	r2, #0
 8009e78:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	33b0      	adds	r3, #176	@ 0xb0
 8009e86:	009b      	lsls	r3, r3, #2
 8009e88:	4413      	add	r3, r2
 8009e8a:	685b      	ldr	r3, [r3, #4]
 8009e8c:	691b      	ldr	r3, [r3, #16]
 8009e8e:	2b00      	cmp	r3, #0
 8009e90:	d010      	beq.n	8009eb4 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009e98:	687a      	ldr	r2, [r7, #4]
 8009e9a:	33b0      	adds	r3, #176	@ 0xb0
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4413      	add	r3, r2
 8009ea0:	685b      	ldr	r3, [r3, #4]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	68ba      	ldr	r2, [r7, #8]
 8009ea6:	f8d2 0208 	ldr.w	r0, [r2, #520]	@ 0x208
 8009eaa:	68ba      	ldr	r2, [r7, #8]
 8009eac:	f502 7104 	add.w	r1, r2, #528	@ 0x210
 8009eb0:	78fa      	ldrb	r2, [r7, #3]
 8009eb2:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3710      	adds	r7, #16
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bd80      	pop	{r7, pc}

08009ebe <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8009ebe:	b580      	push	{r7, lr}
 8009ec0:	b084      	sub	sp, #16
 8009ec2:	af00      	add	r7, sp, #0
 8009ec4:	6078      	str	r0, [r7, #4]
 8009ec6:	460b      	mov	r3, r1
 8009ec8:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ed0:	687b      	ldr	r3, [r7, #4]
 8009ed2:	32b0      	adds	r2, #176	@ 0xb0
 8009ed4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ed8:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	32b0      	adds	r2, #176	@ 0xb0
 8009ee4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d101      	bne.n	8009ef0 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8009eec:	2303      	movs	r3, #3
 8009eee:	e01a      	b.n	8009f26 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8009ef0:	78fb      	ldrb	r3, [r7, #3]
 8009ef2:	4619      	mov	r1, r3
 8009ef4:	6878      	ldr	r0, [r7, #4]
 8009ef6:	f002 f9b6 	bl	800c266 <USBD_LL_GetRxDataSize>
 8009efa:	4602      	mov	r2, r0
 8009efc:	68fb      	ldr	r3, [r7, #12]
 8009efe:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8009f02:	687b      	ldr	r3, [r7, #4]
 8009f04:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	33b0      	adds	r3, #176	@ 0xb0
 8009f0c:	009b      	lsls	r3, r3, #2
 8009f0e:	4413      	add	r3, r2
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	68db      	ldr	r3, [r3, #12]
 8009f14:	68fa      	ldr	r2, [r7, #12]
 8009f16:	f8d2 0204 	ldr.w	r0, [r2, #516]	@ 0x204
 8009f1a:	68fa      	ldr	r2, [r7, #12]
 8009f1c:	f502 7203 	add.w	r2, r2, #524	@ 0x20c
 8009f20:	4611      	mov	r1, r2
 8009f22:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8009f24:	2300      	movs	r3, #0
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3710      	adds	r7, #16
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}

08009f2e <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8009f2e:	b580      	push	{r7, lr}
 8009f30:	b084      	sub	sp, #16
 8009f32:	af00      	add	r7, sp, #0
 8009f34:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 8009f3c:	687b      	ldr	r3, [r7, #4]
 8009f3e:	32b0      	adds	r2, #176	@ 0xb0
 8009f40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009f44:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8009f46:	68fb      	ldr	r3, [r7, #12]
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	d101      	bne.n	8009f50 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	e024      	b.n	8009f9a <USBD_CDC_EP0_RxReady+0x6c>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f56:	687a      	ldr	r2, [r7, #4]
 8009f58:	33b0      	adds	r3, #176	@ 0xb0
 8009f5a:	009b      	lsls	r3, r3, #2
 8009f5c:	4413      	add	r3, r2
 8009f5e:	685b      	ldr	r3, [r3, #4]
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	d019      	beq.n	8009f98 <USBD_CDC_EP0_RxReady+0x6a>
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f893 3200 	ldrb.w	r3, [r3, #512]	@ 0x200
 8009f6a:	2bff      	cmp	r3, #255	@ 0xff
 8009f6c:	d014      	beq.n	8009f98 <USBD_CDC_EP0_RxReady+0x6a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f6e:	687b      	ldr	r3, [r7, #4]
 8009f70:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 8009f74:	687a      	ldr	r2, [r7, #4]
 8009f76:	33b0      	adds	r3, #176	@ 0xb0
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	4413      	add	r3, r2
 8009f7c:	685b      	ldr	r3, [r3, #4]
 8009f7e:	689b      	ldr	r3, [r3, #8]
 8009f80:	68fa      	ldr	r2, [r7, #12]
 8009f82:	f892 0200 	ldrb.w	r0, [r2, #512]	@ 0x200
                                                                     (uint8_t *)hcdc->data,
 8009f86:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8009f88:	68fa      	ldr	r2, [r7, #12]
 8009f8a:	f892 2201 	ldrb.w	r2, [r2, #513]	@ 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 8009f8e:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	22ff      	movs	r2, #255	@ 0xff
 8009f94:	f883 2200 	strb.w	r2, [r3, #512]	@ 0x200
  }

  return (uint8_t)USBD_OK;
 8009f98:	2300      	movs	r3, #0
}
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	3710      	adds	r7, #16
 8009f9e:	46bd      	mov	sp, r7
 8009fa0:	bd80      	pop	{r7, pc}
	...

08009fa4 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8009fa4:	b580      	push	{r7, lr}
 8009fa6:	b086      	sub	sp, #24
 8009fa8:	af00      	add	r7, sp, #0
 8009faa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8009fac:	2182      	movs	r1, #130	@ 0x82
 8009fae:	4818      	ldr	r0, [pc, #96]	@ (800a010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fb0:	f000 fd62 	bl	800aa78 <USBD_GetEpDesc>
 8009fb4:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8009fb6:	2101      	movs	r1, #1
 8009fb8:	4815      	ldr	r0, [pc, #84]	@ (800a010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fba:	f000 fd5d 	bl	800aa78 <USBD_GetEpDesc>
 8009fbe:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8009fc0:	2181      	movs	r1, #129	@ 0x81
 8009fc2:	4813      	ldr	r0, [pc, #76]	@ (800a010 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8009fc4:	f000 fd58 	bl	800aa78 <USBD_GetEpDesc>
 8009fc8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d002      	beq.n	8009fd6 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8009fd0:	697b      	ldr	r3, [r7, #20]
 8009fd2:	2210      	movs	r2, #16
 8009fd4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8009fd6:	693b      	ldr	r3, [r7, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d006      	beq.n	8009fea <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009fdc:	693b      	ldr	r3, [r7, #16]
 8009fde:	2200      	movs	r2, #0
 8009fe0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009fe4:	711a      	strb	r2, [r3, #4]
 8009fe6:	2200      	movs	r2, #0
 8009fe8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8009fea:	68fb      	ldr	r3, [r7, #12]
 8009fec:	2b00      	cmp	r3, #0
 8009fee:	d006      	beq.n	8009ffe <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009ff8:	711a      	strb	r2, [r3, #4]
 8009ffa:	2200      	movs	r2, #0
 8009ffc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	2243      	movs	r2, #67	@ 0x43
 800a002:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a004:	4b02      	ldr	r3, [pc, #8]	@ (800a010 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800a006:	4618      	mov	r0, r3
 800a008:	3718      	adds	r7, #24
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	20000060 	.word	0x20000060

0800a014 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b086      	sub	sp, #24
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a01c:	2182      	movs	r1, #130	@ 0x82
 800a01e:	4818      	ldr	r0, [pc, #96]	@ (800a080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a020:	f000 fd2a 	bl	800aa78 <USBD_GetEpDesc>
 800a024:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a026:	2101      	movs	r1, #1
 800a028:	4815      	ldr	r0, [pc, #84]	@ (800a080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a02a:	f000 fd25 	bl	800aa78 <USBD_GetEpDesc>
 800a02e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a030:	2181      	movs	r1, #129	@ 0x81
 800a032:	4813      	ldr	r0, [pc, #76]	@ (800a080 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800a034:	f000 fd20 	bl	800aa78 <USBD_GetEpDesc>
 800a038:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a03a:	697b      	ldr	r3, [r7, #20]
 800a03c:	2b00      	cmp	r3, #0
 800a03e:	d002      	beq.n	800a046 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 800a040:	697b      	ldr	r3, [r7, #20]
 800a042:	2210      	movs	r2, #16
 800a044:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a046:	693b      	ldr	r3, [r7, #16]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d006      	beq.n	800a05a <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a04c:	693b      	ldr	r3, [r7, #16]
 800a04e:	2200      	movs	r2, #0
 800a050:	711a      	strb	r2, [r3, #4]
 800a052:	2200      	movs	r2, #0
 800a054:	f042 0202 	orr.w	r2, r2, #2
 800a058:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a05a:	68fb      	ldr	r3, [r7, #12]
 800a05c:	2b00      	cmp	r3, #0
 800a05e:	d006      	beq.n	800a06e <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 800a060:	68fb      	ldr	r3, [r7, #12]
 800a062:	2200      	movs	r2, #0
 800a064:	711a      	strb	r2, [r3, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	f042 0202 	orr.w	r2, r2, #2
 800a06c:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	2243      	movs	r2, #67	@ 0x43
 800a072:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a074:	4b02      	ldr	r3, [pc, #8]	@ (800a080 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 800a076:	4618      	mov	r0, r3
 800a078:	3718      	adds	r7, #24
 800a07a:	46bd      	mov	sp, r7
 800a07c:	bd80      	pop	{r7, pc}
 800a07e:	bf00      	nop
 800a080:	20000060 	.word	0x20000060

0800a084 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800a084:	b580      	push	{r7, lr}
 800a086:	b086      	sub	sp, #24
 800a088:	af00      	add	r7, sp, #0
 800a08a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 800a08c:	2182      	movs	r1, #130	@ 0x82
 800a08e:	4818      	ldr	r0, [pc, #96]	@ (800a0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a090:	f000 fcf2 	bl	800aa78 <USBD_GetEpDesc>
 800a094:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800a096:	2101      	movs	r1, #1
 800a098:	4815      	ldr	r0, [pc, #84]	@ (800a0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a09a:	f000 fced 	bl	800aa78 <USBD_GetEpDesc>
 800a09e:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 800a0a0:	2181      	movs	r1, #129	@ 0x81
 800a0a2:	4813      	ldr	r0, [pc, #76]	@ (800a0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 800a0a4:	f000 fce8 	bl	800aa78 <USBD_GetEpDesc>
 800a0a8:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d002      	beq.n	800a0b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	2210      	movs	r2, #16
 800a0b4:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800a0b6:	693b      	ldr	r3, [r7, #16]
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d006      	beq.n	800a0ca <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0bc:	693b      	ldr	r3, [r7, #16]
 800a0be:	2200      	movs	r2, #0
 800a0c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0c4:	711a      	strb	r2, [r3, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2b00      	cmp	r3, #0
 800a0ce:	d006      	beq.n	800a0de <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 800a0d0:	68fb      	ldr	r3, [r7, #12]
 800a0d2:	2200      	movs	r2, #0
 800a0d4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0d8:	711a      	strb	r2, [r3, #4]
 800a0da:	2200      	movs	r2, #0
 800a0dc:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2243      	movs	r2, #67	@ 0x43
 800a0e2:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 800a0e4:	4b02      	ldr	r3, [pc, #8]	@ (800a0f0 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	3718      	adds	r7, #24
 800a0ea:	46bd      	mov	sp, r7
 800a0ec:	bd80      	pop	{r7, pc}
 800a0ee:	bf00      	nop
 800a0f0:	20000060 	.word	0x20000060

0800a0f4 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	220a      	movs	r2, #10
 800a100:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 800a102:	4b03      	ldr	r3, [pc, #12]	@ (800a110 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800a104:	4618      	mov	r0, r3
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr
 800a110:	2000001c 	.word	0x2000001c

0800a114 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 800a114:	b480      	push	{r7}
 800a116:	b083      	sub	sp, #12
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	2b00      	cmp	r3, #0
 800a122:	d101      	bne.n	800a128 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800a124:	2303      	movs	r3, #3
 800a126:	e009      	b.n	800a13c <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800a128:	687b      	ldr	r3, [r7, #4]
 800a12a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	@ 0x2d4
 800a12e:	687a      	ldr	r2, [r7, #4]
 800a130:	33b0      	adds	r3, #176	@ 0xb0
 800a132:	009b      	lsls	r3, r3, #2
 800a134:	4413      	add	r3, r2
 800a136:	683a      	ldr	r2, [r7, #0]
 800a138:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800a13a:	2300      	movs	r3, #0
}
 800a13c:	4618      	mov	r0, r3
 800a13e:	370c      	adds	r7, #12
 800a140:	46bd      	mov	sp, r7
 800a142:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a146:	4770      	bx	lr

0800a148 <USBD_CDC_SetTxBuffer>:
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800a148:	b480      	push	{r7}
 800a14a:	b087      	sub	sp, #28
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	60f8      	str	r0, [r7, #12]
 800a150:	60b9      	str	r1, [r7, #8]
 800a152:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	32b0      	adds	r2, #176	@ 0xb0
 800a15e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a162:	617b      	str	r3, [r7, #20]
#endif /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a164:	697b      	ldr	r3, [r7, #20]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d101      	bne.n	800a16e <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a16a:	2303      	movs	r3, #3
 800a16c:	e008      	b.n	800a180 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 800a16e:	697b      	ldr	r3, [r7, #20]
 800a170:	68ba      	ldr	r2, [r7, #8]
 800a172:	f8c3 2208 	str.w	r2, [r3, #520]	@ 0x208
  hcdc->TxLength = length;
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	687a      	ldr	r2, [r7, #4]
 800a17a:	f8c3 2210 	str.w	r2, [r3, #528]	@ 0x210

  return (uint8_t)USBD_OK;
 800a17e:	2300      	movs	r3, #0
}
 800a180:	4618      	mov	r0, r3
 800a182:	371c      	adds	r7, #28
 800a184:	46bd      	mov	sp, r7
 800a186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a18a:	4770      	bx	lr

0800a18c <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 800a18c:	b480      	push	{r7}
 800a18e:	b085      	sub	sp, #20
 800a190:	af00      	add	r7, sp, #0
 800a192:	6078      	str	r0, [r7, #4]
 800a194:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	32b0      	adds	r2, #176	@ 0xb0
 800a1a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1a4:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d101      	bne.n	800a1b0 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 800a1ac:	2303      	movs	r3, #3
 800a1ae:	e004      	b.n	800a1ba <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 800a1b0:	68fb      	ldr	r3, [r7, #12]
 800a1b2:	683a      	ldr	r2, [r7, #0]
 800a1b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  return (uint8_t)USBD_OK;
 800a1b8:	2300      	movs	r3, #0
}
 800a1ba:	4618      	mov	r0, r3
 800a1bc:	3714      	adds	r7, #20
 800a1be:	46bd      	mov	sp, r7
 800a1c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1c4:	4770      	bx	lr
	...

0800a1c8 <USBD_CDC_TransmitPacket>:
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev, uint8_t ClassId)
{
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[ClassId];
#else
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800a1c8:	b580      	push	{r7, lr}
 800a1ca:	b084      	sub	sp, #16
 800a1cc:	af00      	add	r7, sp, #0
 800a1ce:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a1d6:	687b      	ldr	r3, [r7, #4]
 800a1d8:	32b0      	adds	r2, #176	@ 0xb0
 800a1da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a1de:	60bb      	str	r3, [r7, #8]
#endif  /* USE_USBD_COMPOSITE */

  USBD_StatusTypeDef ret = USBD_BUSY;
 800a1e0:	2301      	movs	r3, #1
 800a1e2:	73fb      	strb	r3, [r7, #15]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK, ClassId);
#endif  /* USE_USBD_COMPOSITE */

  if (hcdc == NULL)
 800a1e4:	68bb      	ldr	r3, [r7, #8]
 800a1e6:	2b00      	cmp	r3, #0
 800a1e8:	d101      	bne.n	800a1ee <USBD_CDC_TransmitPacket+0x26>
  {
    return (uint8_t)USBD_FAIL;
 800a1ea:	2303      	movs	r3, #3
 800a1ec:	e025      	b.n	800a23a <USBD_CDC_TransmitPacket+0x72>
  }

  if (hcdc->TxState == 0U)
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800a1f4:	2b00      	cmp	r3, #0
 800a1f6:	d11f      	bne.n	800a238 <USBD_CDC_TransmitPacket+0x70>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 800a1f8:	68bb      	ldr	r3, [r7, #8]
 800a1fa:	2201      	movs	r2, #1
 800a1fc:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 800a200:	4b10      	ldr	r3, [pc, #64]	@ (800a244 <USBD_CDC_TransmitPacket+0x7c>)
 800a202:	781b      	ldrb	r3, [r3, #0]
 800a204:	f003 020f 	and.w	r2, r3, #15
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	f8d3 1210 	ldr.w	r1, [r3, #528]	@ 0x210
 800a20e:	6878      	ldr	r0, [r7, #4]
 800a210:	4613      	mov	r3, r2
 800a212:	009b      	lsls	r3, r3, #2
 800a214:	4413      	add	r3, r2
 800a216:	009b      	lsls	r3, r3, #2
 800a218:	4403      	add	r3, r0
 800a21a:	3314      	adds	r3, #20
 800a21c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800a21e:	4b09      	ldr	r3, [pc, #36]	@ (800a244 <USBD_CDC_TransmitPacket+0x7c>)
 800a220:	7819      	ldrb	r1, [r3, #0]
 800a222:	68bb      	ldr	r3, [r7, #8]
 800a224:	f8d3 2208 	ldr.w	r2, [r3, #520]	@ 0x208
 800a228:	68bb      	ldr	r3, [r7, #8]
 800a22a:	f8d3 3210 	ldr.w	r3, [r3, #528]	@ 0x210
 800a22e:	6878      	ldr	r0, [r7, #4]
 800a230:	f001 ffd7 	bl	800c1e2 <USBD_LL_Transmit>

    ret = USBD_OK;
 800a234:	2300      	movs	r3, #0
 800a236:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 800a238:	7bfb      	ldrb	r3, [r7, #15]
}
 800a23a:	4618      	mov	r0, r3
 800a23c:	3710      	adds	r7, #16
 800a23e:	46bd      	mov	sp, r7
 800a240:	bd80      	pop	{r7, pc}
 800a242:	bf00      	nop
 800a244:	200000a3 	.word	0x200000a3

0800a248 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800a248:	b580      	push	{r7, lr}
 800a24a:	b084      	sub	sp, #16
 800a24c:	af00      	add	r7, sp, #0
 800a24e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	32b0      	adds	r2, #176	@ 0xb0
 800a25a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a25e:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK, (uint8_t)pdev->classId);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a266:	687b      	ldr	r3, [r7, #4]
 800a268:	32b0      	adds	r2, #176	@ 0xb0
 800a26a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a26e:	2b00      	cmp	r3, #0
 800a270:	d101      	bne.n	800a276 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 800a272:	2303      	movs	r3, #3
 800a274:	e018      	b.n	800a2a8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800a276:	687b      	ldr	r3, [r7, #4]
 800a278:	7c1b      	ldrb	r3, [r3, #16]
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d10a      	bne.n	800a294 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a27e:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b0 <USBD_CDC_ReceivePacket+0x68>)
 800a280:	7819      	ldrb	r1, [r3, #0]
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a288:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a28c:	6878      	ldr	r0, [r7, #4]
 800a28e:	f001 ffc9 	bl	800c224 <USBD_LL_PrepareReceive>
 800a292:	e008      	b.n	800a2a6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800a294:	4b06      	ldr	r3, [pc, #24]	@ (800a2b0 <USBD_CDC_ReceivePacket+0x68>)
 800a296:	7819      	ldrb	r1, [r3, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800a29e:	2340      	movs	r3, #64	@ 0x40
 800a2a0:	6878      	ldr	r0, [r7, #4]
 800a2a2:	f001 ffbf 	bl	800c224 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 800a2a6:	2300      	movs	r3, #0
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	200000a4 	.word	0x200000a4

0800a2b4 <USBD_Init>:
  * @param  id: Low level core index
  * @retval status: USBD Status
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b086      	sub	sp, #24
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	4613      	mov	r3, r2
 800a2c0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 800a2c2:	68fb      	ldr	r3, [r7, #12]
 800a2c4:	2b00      	cmp	r3, #0
 800a2c6:	d101      	bne.n	800a2cc <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a2c8:	2303      	movs	r3, #3
 800a2ca:	e01f      	b.n	800a30c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	2200      	movs	r2, #0
 800a2d0:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  pdev->pUserData[0] = NULL;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	f8c3 22c4 	str.w	r2, [r3, #708]	@ 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	2200      	movs	r2, #0
 800a2e0:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800a2e4:	68bb      	ldr	r3, [r7, #8]
 800a2e6:	2b00      	cmp	r3, #0
 800a2e8:	d003      	beq.n	800a2f2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	68ba      	ldr	r2, [r7, #8]
 800a2ee:	f8c3 22b4 	str.w	r2, [r3, #692]	@ 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	2201      	movs	r2, #1
 800a2f6:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->id = id;
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	79fa      	ldrb	r2, [r7, #7]
 800a2fe:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 800a300:	68f8      	ldr	r0, [r7, #12]
 800a302:	f001 fe39 	bl	800bf78 <USBD_LL_Init>
 800a306:	4603      	mov	r3, r0
 800a308:	75fb      	strb	r3, [r7, #23]

  return ret;
 800a30a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a30c:	4618      	mov	r0, r3
 800a30e:	3718      	adds	r7, #24
 800a310:	46bd      	mov	sp, r7
 800a312:	bd80      	pop	{r7, pc}

0800a314 <USBD_RegisterClass>:
  * @param  pdev: Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800a314:	b580      	push	{r7, lr}
 800a316:	b084      	sub	sp, #16
 800a318:	af00      	add	r7, sp, #0
 800a31a:	6078      	str	r0, [r7, #4]
 800a31c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800a31e:	2300      	movs	r3, #0
 800a320:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800a322:	683b      	ldr	r3, [r7, #0]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800a328:	2303      	movs	r3, #3
 800a32a:	e025      	b.n	800a378 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 800a32c:	687b      	ldr	r3, [r7, #4]
 800a32e:	683a      	ldr	r2, [r7, #0]
 800a330:	f8c3 22b8 	str.w	r2, [r3, #696]	@ 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800a334:	687b      	ldr	r3, [r7, #4]
 800a336:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	32ae      	adds	r2, #174	@ 0xae
 800a33e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a342:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a344:	2b00      	cmp	r3, #0
 800a346:	d00f      	beq.n	800a368 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	32ae      	adds	r2, #174	@ 0xae
 800a352:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a356:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a358:	f107 020e 	add.w	r2, r7, #14
 800a35c:	4610      	mov	r0, r2
 800a35e:	4798      	blx	r3
 800a360:	4602      	mov	r2, r0
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	f8c3 22d0 	str.w	r2, [r3, #720]	@ 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses++;
 800a368:	687b      	ldr	r3, [r7, #4]
 800a36a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	@ 0x2d8
 800a36e:	1c5a      	adds	r2, r3, #1
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8c3 22d8 	str.w	r2, [r3, #728]	@ 0x2d8

  return USBD_OK;
 800a376:	2300      	movs	r3, #0
}
 800a378:	4618      	mov	r0, r3
 800a37a:	3710      	adds	r7, #16
 800a37c:	46bd      	mov	sp, r7
 800a37e:	bd80      	pop	{r7, pc}

0800a380 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800a388:	6878      	ldr	r0, [r7, #4]
 800a38a:	f001 fe41 	bl	800c010 <USBD_LL_Start>
 800a38e:	4603      	mov	r3, r0
}
 800a390:	4618      	mov	r0, r3
 800a392:	3708      	adds	r7, #8
 800a394:	46bd      	mov	sp, r7
 800a396:	bd80      	pop	{r7, pc}

0800a398 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800a398:	b480      	push	{r7}
 800a39a:	b083      	sub	sp, #12
 800a39c:	af00      	add	r7, sp, #0
 800a39e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a3a0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800a3a2:	4618      	mov	r0, r3
 800a3a4:	370c      	adds	r7, #12
 800a3a6:	46bd      	mov	sp, r7
 800a3a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ac:	4770      	bx	lr

0800a3ae <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3ae:	b580      	push	{r7, lr}
 800a3b0:	b084      	sub	sp, #16
 800a3b2:	af00      	add	r7, sp, #0
 800a3b4:	6078      	str	r0, [r7, #4]
 800a3b6:	460b      	mov	r3, r1
 800a3b8:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3ba:	2300      	movs	r3, #0
 800a3bc:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d009      	beq.n	800a3dc <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800a3c8:	687b      	ldr	r3, [r7, #4]
 800a3ca:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3ce:	681b      	ldr	r3, [r3, #0]
 800a3d0:	78fa      	ldrb	r2, [r7, #3]
 800a3d2:	4611      	mov	r1, r2
 800a3d4:	6878      	ldr	r0, [r7, #4]
 800a3d6:	4798      	blx	r3
 800a3d8:	4603      	mov	r3, r0
 800a3da:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a3dc:	7bfb      	ldrb	r3, [r7, #15]
}
 800a3de:	4618      	mov	r0, r3
 800a3e0:	3710      	adds	r7, #16
 800a3e2:	46bd      	mov	sp, r7
 800a3e4:	bd80      	pop	{r7, pc}

0800a3e6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800a3e6:	b580      	push	{r7, lr}
 800a3e8:	b084      	sub	sp, #16
 800a3ea:	af00      	add	r7, sp, #0
 800a3ec:	6078      	str	r0, [r7, #4]
 800a3ee:	460b      	mov	r3, r1
 800a3f0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a3fc:	685b      	ldr	r3, [r3, #4]
 800a3fe:	78fa      	ldrb	r2, [r7, #3]
 800a400:	4611      	mov	r1, r2
 800a402:	6878      	ldr	r0, [r7, #4]
 800a404:	4798      	blx	r3
 800a406:	4603      	mov	r3, r0
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d001      	beq.n	800a410 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800a40c:	2303      	movs	r3, #3
 800a40e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800a410:	7bfb      	ldrb	r3, [r7, #15]
}
 800a412:	4618      	mov	r0, r3
 800a414:	3710      	adds	r7, #16
 800a416:	46bd      	mov	sp, r7
 800a418:	bd80      	pop	{r7, pc}

0800a41a <USBD_LL_SetupStage>:
  * @param  pdev: device instance
  * @param  psetup: setup packet buffer pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800a41a:	b580      	push	{r7, lr}
 800a41c:	b084      	sub	sp, #16
 800a41e:	af00      	add	r7, sp, #0
 800a420:	6078      	str	r0, [r7, #4]
 800a422:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a42a:	6839      	ldr	r1, [r7, #0]
 800a42c:	4618      	mov	r0, r3
 800a42e:	f001 f922 	bl	800b676 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	2201      	movs	r2, #1
 800a436:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800a43a:	687b      	ldr	r3, [r7, #4]
 800a43c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	@ 0x2b0
 800a440:	461a      	mov	r2, r3
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a44e:	f003 031f 	and.w	r3, r3, #31
 800a452:	2b02      	cmp	r3, #2
 800a454:	d01a      	beq.n	800a48c <USBD_LL_SetupStage+0x72>
 800a456:	2b02      	cmp	r3, #2
 800a458:	d822      	bhi.n	800a4a0 <USBD_LL_SetupStage+0x86>
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d002      	beq.n	800a464 <USBD_LL_SetupStage+0x4a>
 800a45e:	2b01      	cmp	r3, #1
 800a460:	d00a      	beq.n	800a478 <USBD_LL_SetupStage+0x5e>
 800a462:	e01d      	b.n	800a4a0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800a464:	687b      	ldr	r3, [r7, #4]
 800a466:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a46a:	4619      	mov	r1, r3
 800a46c:	6878      	ldr	r0, [r7, #4]
 800a46e:	f000 fb77 	bl	800ab60 <USBD_StdDevReq>
 800a472:	4603      	mov	r3, r0
 800a474:	73fb      	strb	r3, [r7, #15]
      break;
 800a476:	e020      	b.n	800a4ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a47e:	4619      	mov	r1, r3
 800a480:	6878      	ldr	r0, [r7, #4]
 800a482:	f000 fbdf 	bl	800ac44 <USBD_StdItfReq>
 800a486:	4603      	mov	r3, r0
 800a488:	73fb      	strb	r3, [r7, #15]
      break;
 800a48a:	e016      	b.n	800a4ba <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	f203 23aa 	addw	r3, r3, #682	@ 0x2aa
 800a492:	4619      	mov	r1, r3
 800a494:	6878      	ldr	r0, [r7, #4]
 800a496:	f000 fc41 	bl	800ad1c <USBD_StdEPReq>
 800a49a:	4603      	mov	r3, r0
 800a49c:	73fb      	strb	r3, [r7, #15]
      break;
 800a49e:	e00c      	b.n	800a4ba <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a4a6:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800a4aa:	b2db      	uxtb	r3, r3
 800a4ac:	4619      	mov	r1, r3
 800a4ae:	6878      	ldr	r0, [r7, #4]
 800a4b0:	f001 fe0e 	bl	800c0d0 <USBD_LL_StallEP>
 800a4b4:	4603      	mov	r3, r0
 800a4b6:	73fb      	strb	r3, [r7, #15]
      break;
 800a4b8:	bf00      	nop
  }

  return ret;
 800a4ba:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4bc:	4618      	mov	r0, r3
 800a4be:	3710      	adds	r7, #16
 800a4c0:	46bd      	mov	sp, r7
 800a4c2:	bd80      	pop	{r7, pc}

0800a4c4 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800a4c4:	b580      	push	{r7, lr}
 800a4c6:	b086      	sub	sp, #24
 800a4c8:	af00      	add	r7, sp, #0
 800a4ca:	60f8      	str	r0, [r7, #12]
 800a4cc:	460b      	mov	r3, r1
 800a4ce:	607a      	str	r2, [r7, #4]
 800a4d0:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a4d6:	7afb      	ldrb	r3, [r7, #11]
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	d177      	bne.n	800a5cc <USBD_LL_DataOutStage+0x108>
  {
    pep = &pdev->ep_out[0];
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	f503 73aa 	add.w	r3, r3, #340	@ 0x154
 800a4e2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a4ea:	2b03      	cmp	r3, #3
 800a4ec:	f040 80a1 	bne.w	800a632 <USBD_LL_DataOutStage+0x16e>
    {
      if (pep->rem_length > pep->maxpacket)
 800a4f0:	693b      	ldr	r3, [r7, #16]
 800a4f2:	685b      	ldr	r3, [r3, #4]
 800a4f4:	693a      	ldr	r2, [r7, #16]
 800a4f6:	8992      	ldrh	r2, [r2, #12]
 800a4f8:	4293      	cmp	r3, r2
 800a4fa:	d91c      	bls.n	800a536 <USBD_LL_DataOutStage+0x72>
      {
        pep->rem_length -= pep->maxpacket;
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	685b      	ldr	r3, [r3, #4]
 800a500:	693a      	ldr	r2, [r7, #16]
 800a502:	8992      	ldrh	r2, [r2, #12]
 800a504:	1a9a      	subs	r2, r3, r2
 800a506:	693b      	ldr	r3, [r7, #16]
 800a508:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	691b      	ldr	r3, [r3, #16]
 800a50e:	693a      	ldr	r2, [r7, #16]
 800a510:	8992      	ldrh	r2, [r2, #12]
 800a512:	441a      	add	r2, r3
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueRx(pdev, pep->pbuffer, MAX(pep->rem_length, pep->maxpacket));
 800a518:	693b      	ldr	r3, [r7, #16]
 800a51a:	6919      	ldr	r1, [r3, #16]
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	899b      	ldrh	r3, [r3, #12]
 800a520:	461a      	mov	r2, r3
 800a522:	693b      	ldr	r3, [r7, #16]
 800a524:	685b      	ldr	r3, [r3, #4]
 800a526:	4293      	cmp	r3, r2
 800a528:	bf38      	it	cc
 800a52a:	4613      	movcc	r3, r2
 800a52c:	461a      	mov	r2, r3
 800a52e:	68f8      	ldr	r0, [r7, #12]
 800a530:	f001 f9a8 	bl	800b884 <USBD_CtlContinueRx>
 800a534:	e07d      	b.n	800a632 <USBD_LL_DataOutStage+0x16e>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	f893 32aa 	ldrb.w	r3, [r3, #682]	@ 0x2aa
 800a53c:	f003 031f 	and.w	r3, r3, #31
 800a540:	2b02      	cmp	r3, #2
 800a542:	d014      	beq.n	800a56e <USBD_LL_DataOutStage+0xaa>
 800a544:	2b02      	cmp	r3, #2
 800a546:	d81d      	bhi.n	800a584 <USBD_LL_DataOutStage+0xc0>
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d002      	beq.n	800a552 <USBD_LL_DataOutStage+0x8e>
 800a54c:	2b01      	cmp	r3, #1
 800a54e:	d003      	beq.n	800a558 <USBD_LL_DataOutStage+0x94>
 800a550:	e018      	b.n	800a584 <USBD_LL_DataOutStage+0xc0>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 800a552:	2300      	movs	r3, #0
 800a554:	75bb      	strb	r3, [r7, #22]
            break;
 800a556:	e018      	b.n	800a58a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800a558:	68fb      	ldr	r3, [r7, #12]
 800a55a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a55e:	b2db      	uxtb	r3, r3
 800a560:	4619      	mov	r1, r3
 800a562:	68f8      	ldr	r0, [r7, #12]
 800a564:	f000 fa6e 	bl	800aa44 <USBD_CoreFindIF>
 800a568:	4603      	mov	r3, r0
 800a56a:	75bb      	strb	r3, [r7, #22]
            break;
 800a56c:	e00d      	b.n	800a58a <USBD_LL_DataOutStage+0xc6>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	@ 0x2ae
 800a574:	b2db      	uxtb	r3, r3
 800a576:	4619      	mov	r1, r3
 800a578:	68f8      	ldr	r0, [r7, #12]
 800a57a:	f000 fa70 	bl	800aa5e <USBD_CoreFindEP>
 800a57e:	4603      	mov	r3, r0
 800a580:	75bb      	strb	r3, [r7, #22]
            break;
 800a582:	e002      	b.n	800a58a <USBD_LL_DataOutStage+0xc6>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800a584:	2300      	movs	r3, #0
 800a586:	75bb      	strb	r3, [r7, #22]
            break;
 800a588:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800a58a:	7dbb      	ldrb	r3, [r7, #22]
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d119      	bne.n	800a5c4 <USBD_LL_DataOutStage+0x100>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a596:	b2db      	uxtb	r3, r3
 800a598:	2b03      	cmp	r3, #3
 800a59a:	d113      	bne.n	800a5c4 <USBD_LL_DataOutStage+0x100>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800a59c:	7dba      	ldrb	r2, [r7, #22]
 800a59e:	68fb      	ldr	r3, [r7, #12]
 800a5a0:	32ae      	adds	r2, #174	@ 0xae
 800a5a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5a6:	691b      	ldr	r3, [r3, #16]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d00b      	beq.n	800a5c4 <USBD_LL_DataOutStage+0x100>
            {
              pdev->classId = idx;
 800a5ac:	7dba      	ldrb	r2, [r7, #22]
 800a5ae:	68fb      	ldr	r3, [r7, #12]
 800a5b0:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800a5b4:	7dba      	ldrb	r2, [r7, #22]
 800a5b6:	68fb      	ldr	r3, [r7, #12]
 800a5b8:	32ae      	adds	r2, #174	@ 0xae
 800a5ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	68f8      	ldr	r0, [r7, #12]
 800a5c2:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800a5c4:	68f8      	ldr	r0, [r7, #12]
 800a5c6:	f001 f96e 	bl	800b8a6 <USBD_CtlSendStatus>
 800a5ca:	e032      	b.n	800a632 <USBD_LL_DataOutStage+0x16e>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800a5cc:	7afb      	ldrb	r3, [r7, #11]
 800a5ce:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a5d2:	b2db      	uxtb	r3, r3
 800a5d4:	4619      	mov	r1, r3
 800a5d6:	68f8      	ldr	r0, [r7, #12]
 800a5d8:	f000 fa41 	bl	800aa5e <USBD_CoreFindEP>
 800a5dc:	4603      	mov	r3, r0
 800a5de:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a5e0:	7dbb      	ldrb	r3, [r7, #22]
 800a5e2:	2bff      	cmp	r3, #255	@ 0xff
 800a5e4:	d025      	beq.n	800a632 <USBD_LL_DataOutStage+0x16e>
 800a5e6:	7dbb      	ldrb	r3, [r7, #22]
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d122      	bne.n	800a632 <USBD_LL_DataOutStage+0x16e>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a5f2:	b2db      	uxtb	r3, r3
 800a5f4:	2b03      	cmp	r3, #3
 800a5f6:	d117      	bne.n	800a628 <USBD_LL_DataOutStage+0x164>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800a5f8:	7dba      	ldrb	r2, [r7, #22]
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	32ae      	adds	r2, #174	@ 0xae
 800a5fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a602:	699b      	ldr	r3, [r3, #24]
 800a604:	2b00      	cmp	r3, #0
 800a606:	d00f      	beq.n	800a628 <USBD_LL_DataOutStage+0x164>
        {
          pdev->classId = idx;
 800a608:	7dba      	ldrb	r2, [r7, #22]
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800a610:	7dba      	ldrb	r2, [r7, #22]
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	32ae      	adds	r2, #174	@ 0xae
 800a616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a61a:	699b      	ldr	r3, [r3, #24]
 800a61c:	7afa      	ldrb	r2, [r7, #11]
 800a61e:	4611      	mov	r1, r2
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	4798      	blx	r3
 800a624:	4603      	mov	r3, r0
 800a626:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800a628:	7dfb      	ldrb	r3, [r7, #23]
 800a62a:	2b00      	cmp	r3, #0
 800a62c:	d001      	beq.n	800a632 <USBD_LL_DataOutStage+0x16e>
      {
        return ret;
 800a62e:	7dfb      	ldrb	r3, [r7, #23]
 800a630:	e000      	b.n	800a634 <USBD_LL_DataOutStage+0x170>
      }
    }
  }

  return USBD_OK;
 800a632:	2300      	movs	r3, #0
}
 800a634:	4618      	mov	r0, r3
 800a636:	3718      	adds	r7, #24
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <USBD_LL_DataInStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b086      	sub	sp, #24
 800a640:	af00      	add	r7, sp, #0
 800a642:	60f8      	str	r0, [r7, #12]
 800a644:	460b      	mov	r3, r1
 800a646:	607a      	str	r2, [r7, #4]
 800a648:	72fb      	strb	r3, [r7, #11]
  USBD_StatusTypeDef ret;
  uint8_t idx;

  UNUSED(pdata);

  if (epnum == 0U)
 800a64a:	7afb      	ldrb	r3, [r7, #11]
 800a64c:	2b00      	cmp	r3, #0
 800a64e:	d178      	bne.n	800a742 <USBD_LL_DataInStage+0x106>
  {
    pep = &pdev->ep_in[0];
 800a650:	68fb      	ldr	r3, [r7, #12]
 800a652:	3314      	adds	r3, #20
 800a654:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f8d3 3294 	ldr.w	r3, [r3, #660]	@ 0x294
 800a65c:	2b02      	cmp	r3, #2
 800a65e:	d163      	bne.n	800a728 <USBD_LL_DataInStage+0xec>
    {
      if (pep->rem_length > pep->maxpacket)
 800a660:	693b      	ldr	r3, [r7, #16]
 800a662:	685b      	ldr	r3, [r3, #4]
 800a664:	693a      	ldr	r2, [r7, #16]
 800a666:	8992      	ldrh	r2, [r2, #12]
 800a668:	4293      	cmp	r3, r2
 800a66a:	d91c      	bls.n	800a6a6 <USBD_LL_DataInStage+0x6a>
      {
        pep->rem_length -= pep->maxpacket;
 800a66c:	693b      	ldr	r3, [r7, #16]
 800a66e:	685b      	ldr	r3, [r3, #4]
 800a670:	693a      	ldr	r2, [r7, #16]
 800a672:	8992      	ldrh	r2, [r2, #12]
 800a674:	1a9a      	subs	r2, r3, r2
 800a676:	693b      	ldr	r3, [r7, #16]
 800a678:	605a      	str	r2, [r3, #4]
        pep->pbuffer += pep->maxpacket;
 800a67a:	693b      	ldr	r3, [r7, #16]
 800a67c:	691b      	ldr	r3, [r3, #16]
 800a67e:	693a      	ldr	r2, [r7, #16]
 800a680:	8992      	ldrh	r2, [r2, #12]
 800a682:	441a      	add	r2, r3
 800a684:	693b      	ldr	r3, [r7, #16]
 800a686:	611a      	str	r2, [r3, #16]

        (void)USBD_CtlContinueSendData(pdev, pep->pbuffer, pep->rem_length);
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	6919      	ldr	r1, [r3, #16]
 800a68c:	693b      	ldr	r3, [r7, #16]
 800a68e:	685b      	ldr	r3, [r3, #4]
 800a690:	461a      	mov	r2, r3
 800a692:	68f8      	ldr	r0, [r7, #12]
 800a694:	f001 f8c4 	bl	800b820 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a698:	2300      	movs	r3, #0
 800a69a:	2200      	movs	r2, #0
 800a69c:	2100      	movs	r1, #0
 800a69e:	68f8      	ldr	r0, [r7, #12]
 800a6a0:	f001 fdc0 	bl	800c224 <USBD_LL_PrepareReceive>
 800a6a4:	e040      	b.n	800a728 <USBD_LL_DataInStage+0xec>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800a6a6:	693b      	ldr	r3, [r7, #16]
 800a6a8:	899b      	ldrh	r3, [r3, #12]
 800a6aa:	461a      	mov	r2, r3
 800a6ac:	693b      	ldr	r3, [r7, #16]
 800a6ae:	685b      	ldr	r3, [r3, #4]
 800a6b0:	429a      	cmp	r2, r3
 800a6b2:	d11c      	bne.n	800a6ee <USBD_LL_DataInStage+0xb2>
            (pep->total_length >= pep->maxpacket) &&
 800a6b4:	693b      	ldr	r3, [r7, #16]
 800a6b6:	681b      	ldr	r3, [r3, #0]
 800a6b8:	693a      	ldr	r2, [r7, #16]
 800a6ba:	8992      	ldrh	r2, [r2, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800a6bc:	4293      	cmp	r3, r2
 800a6be:	d316      	bcc.n	800a6ee <USBD_LL_DataInStage+0xb2>
            (pep->total_length < pdev->ep0_data_len))
 800a6c0:	693b      	ldr	r3, [r7, #16]
 800a6c2:	681a      	ldr	r2, [r3, #0]
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	@ 0x298
            (pep->total_length >= pep->maxpacket) &&
 800a6ca:	429a      	cmp	r2, r3
 800a6cc:	d20f      	bcs.n	800a6ee <USBD_LL_DataInStage+0xb2>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800a6ce:	2200      	movs	r2, #0
 800a6d0:	2100      	movs	r1, #0
 800a6d2:	68f8      	ldr	r0, [r7, #12]
 800a6d4:	f001 f8a4 	bl	800b820 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	2200      	movs	r2, #0
 800a6dc:	f8c3 2298 	str.w	r2, [r3, #664]	@ 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800a6e0:	2300      	movs	r3, #0
 800a6e2:	2200      	movs	r2, #0
 800a6e4:	2100      	movs	r1, #0
 800a6e6:	68f8      	ldr	r0, [r7, #12]
 800a6e8:	f001 fd9c 	bl	800c224 <USBD_LL_PrepareReceive>
 800a6ec:	e01c      	b.n	800a728 <USBD_LL_DataInStage+0xec>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a6ee:	68fb      	ldr	r3, [r7, #12]
 800a6f0:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a6f4:	b2db      	uxtb	r3, r3
 800a6f6:	2b03      	cmp	r3, #3
 800a6f8:	d10f      	bne.n	800a71a <USBD_LL_DataInStage+0xde>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800a6fa:	68fb      	ldr	r3, [r7, #12]
 800a6fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a700:	68db      	ldr	r3, [r3, #12]
 800a702:	2b00      	cmp	r3, #0
 800a704:	d009      	beq.n	800a71a <USBD_LL_DataInStage+0xde>
            {
              pdev->classId = 0U;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2200      	movs	r2, #0
 800a70a:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a714:	68db      	ldr	r3, [r3, #12]
 800a716:	68f8      	ldr	r0, [r7, #12]
 800a718:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800a71a:	2180      	movs	r1, #128	@ 0x80
 800a71c:	68f8      	ldr	r0, [r7, #12]
 800a71e:	f001 fcd7 	bl	800c0d0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800a722:	68f8      	ldr	r0, [r7, #12]
 800a724:	f001 f8d2 	bl	800b8cc <USBD_CtlReceiveStatus>
        }
      }
    }

    if (pdev->dev_test_mode != 0U)
 800a728:	68fb      	ldr	r3, [r7, #12]
 800a72a:	f893 32a0 	ldrb.w	r3, [r3, #672]	@ 0x2a0
 800a72e:	2b00      	cmp	r3, #0
 800a730:	d03a      	beq.n	800a7a8 <USBD_LL_DataInStage+0x16c>
    {
      (void)USBD_RunTestMode(pdev);
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7ff fe30 	bl	800a398 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800a738:	68fb      	ldr	r3, [r7, #12]
 800a73a:	2200      	movs	r2, #0
 800a73c:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
 800a740:	e032      	b.n	800a7a8 <USBD_LL_DataInStage+0x16c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800a742:	7afb      	ldrb	r3, [r7, #11]
 800a744:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800a748:	b2db      	uxtb	r3, r3
 800a74a:	4619      	mov	r1, r3
 800a74c:	68f8      	ldr	r0, [r7, #12]
 800a74e:	f000 f986 	bl	800aa5e <USBD_CoreFindEP>
 800a752:	4603      	mov	r3, r0
 800a754:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800a756:	7dfb      	ldrb	r3, [r7, #23]
 800a758:	2bff      	cmp	r3, #255	@ 0xff
 800a75a:	d025      	beq.n	800a7a8 <USBD_LL_DataInStage+0x16c>
 800a75c:	7dfb      	ldrb	r3, [r7, #23]
 800a75e:	2b00      	cmp	r3, #0
 800a760:	d122      	bne.n	800a7a8 <USBD_LL_DataInStage+0x16c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a768:	b2db      	uxtb	r3, r3
 800a76a:	2b03      	cmp	r3, #3
 800a76c:	d11c      	bne.n	800a7a8 <USBD_LL_DataInStage+0x16c>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800a76e:	7dfa      	ldrb	r2, [r7, #23]
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	32ae      	adds	r2, #174	@ 0xae
 800a774:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a778:	695b      	ldr	r3, [r3, #20]
 800a77a:	2b00      	cmp	r3, #0
 800a77c:	d014      	beq.n	800a7a8 <USBD_LL_DataInStage+0x16c>
        {
          pdev->classId = idx;
 800a77e:	7dfa      	ldrb	r2, [r7, #23]
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800a786:	7dfa      	ldrb	r2, [r7, #23]
 800a788:	68fb      	ldr	r3, [r7, #12]
 800a78a:	32ae      	adds	r2, #174	@ 0xae
 800a78c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a790:	695b      	ldr	r3, [r3, #20]
 800a792:	7afa      	ldrb	r2, [r7, #11]
 800a794:	4611      	mov	r1, r2
 800a796:	68f8      	ldr	r0, [r7, #12]
 800a798:	4798      	blx	r3
 800a79a:	4603      	mov	r3, r0
 800a79c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800a79e:	7dbb      	ldrb	r3, [r7, #22]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d001      	beq.n	800a7a8 <USBD_LL_DataInStage+0x16c>
          {
            return ret;
 800a7a4:	7dbb      	ldrb	r3, [r7, #22]
 800a7a6:	e000      	b.n	800a7aa <USBD_LL_DataInStage+0x16e>
        }
      }
    }
  }

  return USBD_OK;
 800a7a8:	2300      	movs	r3, #0
}
 800a7aa:	4618      	mov	r0, r3
 800a7ac:	3718      	adds	r7, #24
 800a7ae:	46bd      	mov	sp, r7
 800a7b0:	bd80      	pop	{r7, pc}

0800a7b2 <USBD_LL_Reset>:
  *         Handle Reset event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800a7b2:	b580      	push	{r7, lr}
 800a7b4:	b084      	sub	sp, #16
 800a7b6:	af00      	add	r7, sp, #0
 800a7b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800a7ba:	2300      	movs	r3, #0
 800a7bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	2201      	movs	r2, #1
 800a7c2:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800a7c6:	687b      	ldr	r3, [r7, #4]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->dev_config = 0U;
 800a7ce:	687b      	ldr	r3, [r7, #4]
 800a7d0:	2200      	movs	r2, #0
 800a7d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	2200      	movs	r2, #0
 800a7d8:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
  pdev->dev_test_mode = 0U;
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	2200      	movs	r2, #0
 800a7e0:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800a7e4:	687b      	ldr	r3, [r7, #4]
 800a7e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d014      	beq.n	800a818 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800a7ee:	687b      	ldr	r3, [r7, #4]
 800a7f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a7f4:	685b      	ldr	r3, [r3, #4]
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d00e      	beq.n	800a818 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a800:	685b      	ldr	r3, [r3, #4]
 800a802:	687a      	ldr	r2, [r7, #4]
 800a804:	6852      	ldr	r2, [r2, #4]
 800a806:	b2d2      	uxtb	r2, r2
 800a808:	4611      	mov	r1, r2
 800a80a:	6878      	ldr	r0, [r7, #4]
 800a80c:	4798      	blx	r3
 800a80e:	4603      	mov	r3, r0
 800a810:	2b00      	cmp	r3, #0
 800a812:	d001      	beq.n	800a818 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800a814:	2303      	movs	r3, #3
 800a816:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a818:	2340      	movs	r3, #64	@ 0x40
 800a81a:	2200      	movs	r2, #0
 800a81c:	2100      	movs	r1, #0
 800a81e:	6878      	ldr	r0, [r7, #4]
 800a820:	f001 fc11 	bl	800c046 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	2201      	movs	r2, #1
 800a828:	f883 2163 	strb.w	r2, [r3, #355]	@ 0x163

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	2240      	movs	r2, #64	@ 0x40
 800a830:	f8a3 2160 	strh.w	r2, [r3, #352]	@ 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800a834:	2340      	movs	r3, #64	@ 0x40
 800a836:	2200      	movs	r2, #0
 800a838:	2180      	movs	r1, #128	@ 0x80
 800a83a:	6878      	ldr	r0, [r7, #4]
 800a83c:	f001 fc03 	bl	800c046 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	2201      	movs	r2, #1
 800a844:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	2240      	movs	r2, #64	@ 0x40
 800a84c:	841a      	strh	r2, [r3, #32]

  return ret;
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a850:	4618      	mov	r0, r3
 800a852:	3710      	adds	r7, #16
 800a854:	46bd      	mov	sp, r7
 800a856:	bd80      	pop	{r7, pc}

0800a858 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800a858:	b480      	push	{r7}
 800a85a:	b083      	sub	sp, #12
 800a85c:	af00      	add	r7, sp, #0
 800a85e:	6078      	str	r0, [r7, #4]
 800a860:	460b      	mov	r3, r1
 800a862:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800a864:	687b      	ldr	r3, [r7, #4]
 800a866:	78fa      	ldrb	r2, [r7, #3]
 800a868:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800a86a:	2300      	movs	r3, #0
}
 800a86c:	4618      	mov	r0, r3
 800a86e:	370c      	adds	r7, #12
 800a870:	46bd      	mov	sp, r7
 800a872:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a876:	4770      	bx	lr

0800a878 <USBD_LL_Suspend>:
  *         Handle Suspend event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800a878:	b480      	push	{r7}
 800a87a:	b083      	sub	sp, #12
 800a87c:	af00      	add	r7, sp, #0
 800a87e:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state != USBD_STATE_SUSPENDED)
 800a880:	687b      	ldr	r3, [r7, #4]
 800a882:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a886:	b2db      	uxtb	r3, r3
 800a888:	2b04      	cmp	r3, #4
 800a88a:	d006      	beq.n	800a89a <USBD_LL_Suspend+0x22>
  {
    pdev->dev_old_state = pdev->dev_state;
 800a88c:	687b      	ldr	r3, [r7, #4]
 800a88e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a892:	b2da      	uxtb	r2, r3
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	f883 229d 	strb.w	r2, [r3, #669]	@ 0x29d
  }

  pdev->dev_state = USBD_STATE_SUSPENDED;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	2204      	movs	r2, #4
 800a89e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c

  return USBD_OK;
 800a8a2:	2300      	movs	r3, #0
}
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	370c      	adds	r7, #12
 800a8a8:	46bd      	mov	sp, r7
 800a8aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ae:	4770      	bx	lr

0800a8b0 <USBD_LL_Resume>:
  *         Handle Resume event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800a8b0:	b480      	push	{r7}
 800a8b2:	b083      	sub	sp, #12
 800a8b4:	af00      	add	r7, sp, #0
 800a8b6:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b04      	cmp	r3, #4
 800a8c2:	d106      	bne.n	800a8d2 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 329d 	ldrb.w	r3, [r3, #669]	@ 0x29d
 800a8ca:	b2da      	uxtb	r2, r3
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
  }

  return USBD_OK;
 800a8d2:	2300      	movs	r3, #0
}
 800a8d4:	4618      	mov	r0, r3
 800a8d6:	370c      	adds	r7, #12
 800a8d8:	46bd      	mov	sp, r7
 800a8da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8de:	4770      	bx	lr

0800a8e0 <USBD_LL_SOF>:
  *         Handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800a8e0:	b580      	push	{r7, lr}
 800a8e2:	b082      	sub	sp, #8
 800a8e4:	af00      	add	r7, sp, #0
 800a8e6:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a8ee:	b2db      	uxtb	r3, r3
 800a8f0:	2b03      	cmp	r3, #3
 800a8f2:	d110      	bne.n	800a916 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d00b      	beq.n	800a916 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a904:	69db      	ldr	r3, [r3, #28]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d005      	beq.n	800a916 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800a910:	69db      	ldr	r3, [r3, #28]
 800a912:	6878      	ldr	r0, [r7, #4]
 800a914:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 800a916:	2300      	movs	r3, #0
}
 800a918:	4618      	mov	r0, r3
 800a91a:	3708      	adds	r7, #8
 800a91c:	46bd      	mov	sp, r7
 800a91e:	bd80      	pop	{r7, pc}

0800a920 <USBD_LL_IsoINIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800a920:	b580      	push	{r7, lr}
 800a922:	b082      	sub	sp, #8
 800a924:	af00      	add	r7, sp, #0
 800a926:	6078      	str	r0, [r7, #4]
 800a928:	460b      	mov	r3, r1
 800a92a:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	32ae      	adds	r2, #174	@ 0xae
 800a936:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d101      	bne.n	800a942 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800a93e:	2303      	movs	r3, #3
 800a940:	e01c      	b.n	800a97c <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a948:	b2db      	uxtb	r3, r3
 800a94a:	2b03      	cmp	r3, #3
 800a94c:	d115      	bne.n	800a97a <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	32ae      	adds	r2, #174	@ 0xae
 800a958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a95c:	6a1b      	ldr	r3, [r3, #32]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d00b      	beq.n	800a97a <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	32ae      	adds	r2, #174	@ 0xae
 800a96c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a970:	6a1b      	ldr	r3, [r3, #32]
 800a972:	78fa      	ldrb	r2, [r7, #3]
 800a974:	4611      	mov	r1, r2
 800a976:	6878      	ldr	r0, [r7, #4]
 800a978:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a97a:	2300      	movs	r3, #0
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3708      	adds	r7, #8
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}

0800a984 <USBD_LL_IsoOUTIncomplete>:
  * @param  epnum: Endpoint number
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800a984:	b580      	push	{r7, lr}
 800a986:	b082      	sub	sp, #8
 800a988:	af00      	add	r7, sp, #0
 800a98a:	6078      	str	r0, [r7, #4]
 800a98c:	460b      	mov	r3, r1
 800a98e:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a996:	687b      	ldr	r3, [r7, #4]
 800a998:	32ae      	adds	r2, #174	@ 0xae
 800a99a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a99e:	2b00      	cmp	r3, #0
 800a9a0:	d101      	bne.n	800a9a6 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800a9a2:	2303      	movs	r3, #3
 800a9a4:	e01c      	b.n	800a9e0 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800a9a6:	687b      	ldr	r3, [r7, #4]
 800a9a8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800a9ac:	b2db      	uxtb	r3, r3
 800a9ae:	2b03      	cmp	r3, #3
 800a9b0:	d115      	bne.n	800a9de <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9b8:	687b      	ldr	r3, [r7, #4]
 800a9ba:	32ae      	adds	r2, #174	@ 0xae
 800a9bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d00b      	beq.n	800a9de <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	32ae      	adds	r2, #174	@ 0xae
 800a9d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a9d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a9d6:	78fa      	ldrb	r2, [r7, #3]
 800a9d8:	4611      	mov	r1, r2
 800a9da:	6878      	ldr	r0, [r7, #4]
 800a9dc:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800a9de:	2300      	movs	r3, #0
}
 800a9e0:	4618      	mov	r0, r3
 800a9e2:	3708      	adds	r7, #8
 800a9e4:	46bd      	mov	sp, r7
 800a9e6:	bd80      	pop	{r7, pc}

0800a9e8 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	b083      	sub	sp, #12
 800a9ec:	af00      	add	r7, sp, #0
 800a9ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800a9f0:	2300      	movs	r3, #0
}
 800a9f2:	4618      	mov	r0, r3
 800a9f4:	370c      	adds	r7, #12
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800a9fe:	b580      	push	{r7, lr}
 800aa00:	b084      	sub	sp, #16
 800aa02:	af00      	add	r7, sp, #0
 800aa04:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 800aa06:	2300      	movs	r3, #0
 800aa08:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	2201      	movs	r2, #1
 800aa0e:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800aa12:	687b      	ldr	r3, [r7, #4]
 800aa14:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d00e      	beq.n	800aa3a <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800aa22:	685b      	ldr	r3, [r3, #4]
 800aa24:	687a      	ldr	r2, [r7, #4]
 800aa26:	6852      	ldr	r2, [r2, #4]
 800aa28:	b2d2      	uxtb	r2, r2
 800aa2a:	4611      	mov	r1, r2
 800aa2c:	6878      	ldr	r0, [r7, #4]
 800aa2e:	4798      	blx	r3
 800aa30:	4603      	mov	r3, r0
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d001      	beq.n	800aa3a <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 800aa36:	2303      	movs	r3, #3
 800aa38:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}

0800aa44 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa44:	b480      	push	{r7}
 800aa46:	b083      	sub	sp, #12
 800aa48:	af00      	add	r7, sp, #0
 800aa4a:	6078      	str	r0, [r7, #4]
 800aa4c:	460b      	mov	r3, r1
 800aa4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa52:	4618      	mov	r0, r3
 800aa54:	370c      	adds	r7, #12
 800aa56:	46bd      	mov	sp, r7
 800aa58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa5c:	4770      	bx	lr

0800aa5e <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800aa5e:	b480      	push	{r7}
 800aa60:	b083      	sub	sp, #12
 800aa62:	af00      	add	r7, sp, #0
 800aa64:	6078      	str	r0, [r7, #4]
 800aa66:	460b      	mov	r3, r1
 800aa68:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800aa6a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800aa6c:	4618      	mov	r0, r3
 800aa6e:	370c      	adds	r7, #12
 800aa70:	46bd      	mov	sp, r7
 800aa72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa76:	4770      	bx	lr

0800aa78 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 800aa78:	b580      	push	{r7, lr}
 800aa7a:	b086      	sub	sp, #24
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	6078      	str	r0, [r7, #4]
 800aa80:	460b      	mov	r3, r1
 800aa82:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 800aa8c:	2300      	movs	r3, #0
 800aa8e:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800aa90:	68fb      	ldr	r3, [r7, #12]
 800aa92:	885b      	ldrh	r3, [r3, #2]
 800aa94:	b29b      	uxth	r3, r3
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	7812      	ldrb	r2, [r2, #0]
 800aa9a:	4293      	cmp	r3, r2
 800aa9c:	d91f      	bls.n	800aade <USBD_GetEpDesc+0x66>
  {
    ptr = desc->bLength;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	781b      	ldrb	r3, [r3, #0]
 800aaa2:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 800aaa4:	e013      	b.n	800aace <USBD_GetEpDesc+0x56>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 800aaa6:	f107 030a 	add.w	r3, r7, #10
 800aaaa:	4619      	mov	r1, r3
 800aaac:	6978      	ldr	r0, [r7, #20]
 800aaae:	f000 f81b 	bl	800aae8 <USBD_GetNextDesc>
 800aab2:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 800aab4:	697b      	ldr	r3, [r7, #20]
 800aab6:	785b      	ldrb	r3, [r3, #1]
 800aab8:	2b05      	cmp	r3, #5
 800aaba:	d108      	bne.n	800aace <USBD_GetEpDesc+0x56>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800aac0:	693b      	ldr	r3, [r7, #16]
 800aac2:	789b      	ldrb	r3, [r3, #2]
 800aac4:	78fa      	ldrb	r2, [r7, #3]
 800aac6:	429a      	cmp	r2, r3
 800aac8:	d008      	beq.n	800aadc <USBD_GetEpDesc+0x64>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800aaca:	2300      	movs	r3, #0
 800aacc:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800aace:	68fb      	ldr	r3, [r7, #12]
 800aad0:	885b      	ldrh	r3, [r3, #2]
 800aad2:	b29a      	uxth	r2, r3
 800aad4:	897b      	ldrh	r3, [r7, #10]
 800aad6:	429a      	cmp	r2, r3
 800aad8:	d8e5      	bhi.n	800aaa6 <USBD_GetEpDesc+0x2e>
 800aada:	e000      	b.n	800aade <USBD_GetEpDesc+0x66>
          break;
 800aadc:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800aade:	693b      	ldr	r3, [r7, #16]
}
 800aae0:	4618      	mov	r0, r3
 800aae2:	3718      	adds	r7, #24
 800aae4:	46bd      	mov	sp, r7
 800aae6:	bd80      	pop	{r7, pc}

0800aae8 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800aae8:	b480      	push	{r7}
 800aaea:	b085      	sub	sp, #20
 800aaec:	af00      	add	r7, sp, #0
 800aaee:	6078      	str	r0, [r7, #4]
 800aaf0:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 800aaf6:	683b      	ldr	r3, [r7, #0]
 800aaf8:	881b      	ldrh	r3, [r3, #0]
 800aafa:	68fa      	ldr	r2, [r7, #12]
 800aafc:	7812      	ldrb	r2, [r2, #0]
 800aafe:	4413      	add	r3, r2
 800ab00:	b29a      	uxth	r2, r3
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	781b      	ldrb	r3, [r3, #0]
 800ab0a:	461a      	mov	r2, r3
 800ab0c:	687b      	ldr	r3, [r7, #4]
 800ab0e:	4413      	add	r3, r2
 800ab10:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800ab12:	68fb      	ldr	r3, [r7, #12]
}
 800ab14:	4618      	mov	r0, r3
 800ab16:	3714      	adds	r7, #20
 800ab18:	46bd      	mov	sp, r7
 800ab1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab1e:	4770      	bx	lr

0800ab20 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 800ab20:	b480      	push	{r7}
 800ab22:	b087      	sub	sp, #28
 800ab24:	af00      	add	r7, sp, #0
 800ab26:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal;
  uint16_t _Byte1;
  uint16_t _Byte2;
  uint8_t *_pbuff = addr;
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800ab2c:	697b      	ldr	r3, [r7, #20]
 800ab2e:	781b      	ldrb	r3, [r3, #0]
 800ab30:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 800ab32:	697b      	ldr	r3, [r7, #20]
 800ab34:	3301      	adds	r3, #1
 800ab36:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800ab38:	697b      	ldr	r3, [r7, #20]
 800ab3a:	781b      	ldrb	r3, [r3, #0]
 800ab3c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800ab3e:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800ab42:	021b      	lsls	r3, r3, #8
 800ab44:	b21a      	sxth	r2, r3
 800ab46:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800ab4a:	4313      	orrs	r3, r2
 800ab4c:	b21b      	sxth	r3, r3
 800ab4e:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800ab50:	89fb      	ldrh	r3, [r7, #14]
}
 800ab52:	4618      	mov	r0, r3
 800ab54:	371c      	adds	r7, #28
 800ab56:	46bd      	mov	sp, r7
 800ab58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab5c:	4770      	bx	lr
	...

0800ab60 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ab60:	b580      	push	{r7, lr}
 800ab62:	b084      	sub	sp, #16
 800ab64:	af00      	add	r7, sp, #0
 800ab66:	6078      	str	r0, [r7, #4]
 800ab68:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ab6a:	2300      	movs	r3, #0
 800ab6c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ab6e:	683b      	ldr	r3, [r7, #0]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ab76:	2b40      	cmp	r3, #64	@ 0x40
 800ab78:	d005      	beq.n	800ab86 <USBD_StdDevReq+0x26>
 800ab7a:	2b40      	cmp	r3, #64	@ 0x40
 800ab7c:	d857      	bhi.n	800ac2e <USBD_StdDevReq+0xce>
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d00f      	beq.n	800aba2 <USBD_StdDevReq+0x42>
 800ab82:	2b20      	cmp	r3, #32
 800ab84:	d153      	bne.n	800ac2e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	f8d3 22d4 	ldr.w	r2, [r3, #724]	@ 0x2d4
 800ab8c:	687b      	ldr	r3, [r7, #4]
 800ab8e:	32ae      	adds	r2, #174	@ 0xae
 800ab90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ab94:	689b      	ldr	r3, [r3, #8]
 800ab96:	6839      	ldr	r1, [r7, #0]
 800ab98:	6878      	ldr	r0, [r7, #4]
 800ab9a:	4798      	blx	r3
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	73fb      	strb	r3, [r7, #15]
      break;
 800aba0:	e04a      	b.n	800ac38 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800aba2:	683b      	ldr	r3, [r7, #0]
 800aba4:	785b      	ldrb	r3, [r3, #1]
 800aba6:	2b09      	cmp	r3, #9
 800aba8:	d83b      	bhi.n	800ac22 <USBD_StdDevReq+0xc2>
 800abaa:	a201      	add	r2, pc, #4	@ (adr r2, 800abb0 <USBD_StdDevReq+0x50>)
 800abac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800abb0:	0800ac05 	.word	0x0800ac05
 800abb4:	0800ac19 	.word	0x0800ac19
 800abb8:	0800ac23 	.word	0x0800ac23
 800abbc:	0800ac0f 	.word	0x0800ac0f
 800abc0:	0800ac23 	.word	0x0800ac23
 800abc4:	0800abe3 	.word	0x0800abe3
 800abc8:	0800abd9 	.word	0x0800abd9
 800abcc:	0800ac23 	.word	0x0800ac23
 800abd0:	0800abfb 	.word	0x0800abfb
 800abd4:	0800abed 	.word	0x0800abed
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 800abd8:	6839      	ldr	r1, [r7, #0]
 800abda:	6878      	ldr	r0, [r7, #4]
 800abdc:	f000 fa3e 	bl	800b05c <USBD_GetDescriptor>
          break;
 800abe0:	e024      	b.n	800ac2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800abe2:	6839      	ldr	r1, [r7, #0]
 800abe4:	6878      	ldr	r0, [r7, #4]
 800abe6:	f000 fba3 	bl	800b330 <USBD_SetAddress>
          break;
 800abea:	e01f      	b.n	800ac2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800abec:	6839      	ldr	r1, [r7, #0]
 800abee:	6878      	ldr	r0, [r7, #4]
 800abf0:	f000 fbe2 	bl	800b3b8 <USBD_SetConfig>
 800abf4:	4603      	mov	r3, r0
 800abf6:	73fb      	strb	r3, [r7, #15]
          break;
 800abf8:	e018      	b.n	800ac2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800abfa:	6839      	ldr	r1, [r7, #0]
 800abfc:	6878      	ldr	r0, [r7, #4]
 800abfe:	f000 fc85 	bl	800b50c <USBD_GetConfig>
          break;
 800ac02:	e013      	b.n	800ac2c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 800ac04:	6839      	ldr	r1, [r7, #0]
 800ac06:	6878      	ldr	r0, [r7, #4]
 800ac08:	f000 fcb6 	bl	800b578 <USBD_GetStatus>
          break;
 800ac0c:	e00e      	b.n	800ac2c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800ac0e:	6839      	ldr	r1, [r7, #0]
 800ac10:	6878      	ldr	r0, [r7, #4]
 800ac12:	f000 fce5 	bl	800b5e0 <USBD_SetFeature>
          break;
 800ac16:	e009      	b.n	800ac2c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 800ac18:	6839      	ldr	r1, [r7, #0]
 800ac1a:	6878      	ldr	r0, [r7, #4]
 800ac1c:	f000 fd09 	bl	800b632 <USBD_ClrFeature>
          break;
 800ac20:	e004      	b.n	800ac2c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800ac22:	6839      	ldr	r1, [r7, #0]
 800ac24:	6878      	ldr	r0, [r7, #4]
 800ac26:	f000 fd60 	bl	800b6ea <USBD_CtlError>
          break;
 800ac2a:	bf00      	nop
      }
      break;
 800ac2c:	e004      	b.n	800ac38 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800ac2e:	6839      	ldr	r1, [r7, #0]
 800ac30:	6878      	ldr	r0, [r7, #4]
 800ac32:	f000 fd5a 	bl	800b6ea <USBD_CtlError>
      break;
 800ac36:	bf00      	nop
  }

  return ret;
 800ac38:	7bfb      	ldrb	r3, [r7, #15]
}
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	3710      	adds	r7, #16
 800ac3e:	46bd      	mov	sp, r7
 800ac40:	bd80      	pop	{r7, pc}
 800ac42:	bf00      	nop

0800ac44 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ac44:	b580      	push	{r7, lr}
 800ac46:	b084      	sub	sp, #16
 800ac48:	af00      	add	r7, sp, #0
 800ac4a:	6078      	str	r0, [r7, #4]
 800ac4c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800ac4e:	2300      	movs	r3, #0
 800ac50:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ac52:	683b      	ldr	r3, [r7, #0]
 800ac54:	781b      	ldrb	r3, [r3, #0]
 800ac56:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ac5a:	2b40      	cmp	r3, #64	@ 0x40
 800ac5c:	d005      	beq.n	800ac6a <USBD_StdItfReq+0x26>
 800ac5e:	2b40      	cmp	r3, #64	@ 0x40
 800ac60:	d852      	bhi.n	800ad08 <USBD_StdItfReq+0xc4>
 800ac62:	2b00      	cmp	r3, #0
 800ac64:	d001      	beq.n	800ac6a <USBD_StdItfReq+0x26>
 800ac66:	2b20      	cmp	r3, #32
 800ac68:	d14e      	bne.n	800ad08 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ac70:	b2db      	uxtb	r3, r3
 800ac72:	3b01      	subs	r3, #1
 800ac74:	2b02      	cmp	r3, #2
 800ac76:	d840      	bhi.n	800acfa <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800ac78:	683b      	ldr	r3, [r7, #0]
 800ac7a:	889b      	ldrh	r3, [r3, #4]
 800ac7c:	b2db      	uxtb	r3, r3
 800ac7e:	2b01      	cmp	r3, #1
 800ac80:	d836      	bhi.n	800acf0 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800ac82:	683b      	ldr	r3, [r7, #0]
 800ac84:	889b      	ldrh	r3, [r3, #4]
 800ac86:	b2db      	uxtb	r3, r3
 800ac88:	4619      	mov	r1, r3
 800ac8a:	6878      	ldr	r0, [r7, #4]
 800ac8c:	f7ff feda 	bl	800aa44 <USBD_CoreFindIF>
 800ac90:	4603      	mov	r3, r0
 800ac92:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ac94:	7bbb      	ldrb	r3, [r7, #14]
 800ac96:	2bff      	cmp	r3, #255	@ 0xff
 800ac98:	d01d      	beq.n	800acd6 <USBD_StdItfReq+0x92>
 800ac9a:	7bbb      	ldrb	r3, [r7, #14]
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	d11a      	bne.n	800acd6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800aca0:	7bba      	ldrb	r2, [r7, #14]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	32ae      	adds	r2, #174	@ 0xae
 800aca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acaa:	689b      	ldr	r3, [r3, #8]
 800acac:	2b00      	cmp	r3, #0
 800acae:	d00f      	beq.n	800acd0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800acb0:	7bba      	ldrb	r2, [r7, #14]
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800acb8:	7bba      	ldrb	r2, [r7, #14]
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	32ae      	adds	r2, #174	@ 0xae
 800acbe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800acc2:	689b      	ldr	r3, [r3, #8]
 800acc4:	6839      	ldr	r1, [r7, #0]
 800acc6:	6878      	ldr	r0, [r7, #4]
 800acc8:	4798      	blx	r3
 800acca:	4603      	mov	r3, r0
 800accc:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800acce:	e004      	b.n	800acda <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800acd0:	2303      	movs	r3, #3
 800acd2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800acd4:	e001      	b.n	800acda <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 800acd6:	2303      	movs	r3, #3
 800acd8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800acda:	683b      	ldr	r3, [r7, #0]
 800acdc:	88db      	ldrh	r3, [r3, #6]
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d110      	bne.n	800ad04 <USBD_StdItfReq+0xc0>
 800ace2:	7bfb      	ldrb	r3, [r7, #15]
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d10d      	bne.n	800ad04 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 800ace8:	6878      	ldr	r0, [r7, #4]
 800acea:	f000 fddc 	bl	800b8a6 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800acee:	e009      	b.n	800ad04 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800acf0:	6839      	ldr	r1, [r7, #0]
 800acf2:	6878      	ldr	r0, [r7, #4]
 800acf4:	f000 fcf9 	bl	800b6ea <USBD_CtlError>
          break;
 800acf8:	e004      	b.n	800ad04 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800acfa:	6839      	ldr	r1, [r7, #0]
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f000 fcf4 	bl	800b6ea <USBD_CtlError>
          break;
 800ad02:	e000      	b.n	800ad06 <USBD_StdItfReq+0xc2>
          break;
 800ad04:	bf00      	nop
      }
      break;
 800ad06:	e004      	b.n	800ad12 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 800ad08:	6839      	ldr	r1, [r7, #0]
 800ad0a:	6878      	ldr	r0, [r7, #4]
 800ad0c:	f000 fced 	bl	800b6ea <USBD_CtlError>
      break;
 800ad10:	bf00      	nop
  }

  return ret;
 800ad12:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3710      	adds	r7, #16
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}

0800ad1c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800ad1c:	b580      	push	{r7, lr}
 800ad1e:	b084      	sub	sp, #16
 800ad20:	af00      	add	r7, sp, #0
 800ad22:	6078      	str	r0, [r7, #4]
 800ad24:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 800ad26:	2300      	movs	r3, #0
 800ad28:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800ad2a:	683b      	ldr	r3, [r7, #0]
 800ad2c:	889b      	ldrh	r3, [r3, #4]
 800ad2e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800ad30:	683b      	ldr	r3, [r7, #0]
 800ad32:	781b      	ldrb	r3, [r3, #0]
 800ad34:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 800ad38:	2b40      	cmp	r3, #64	@ 0x40
 800ad3a:	d007      	beq.n	800ad4c <USBD_StdEPReq+0x30>
 800ad3c:	2b40      	cmp	r3, #64	@ 0x40
 800ad3e:	f200 8181 	bhi.w	800b044 <USBD_StdEPReq+0x328>
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d02a      	beq.n	800ad9c <USBD_StdEPReq+0x80>
 800ad46:	2b20      	cmp	r3, #32
 800ad48:	f040 817c 	bne.w	800b044 <USBD_StdEPReq+0x328>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800ad4c:	7bbb      	ldrb	r3, [r7, #14]
 800ad4e:	4619      	mov	r1, r3
 800ad50:	6878      	ldr	r0, [r7, #4]
 800ad52:	f7ff fe84 	bl	800aa5e <USBD_CoreFindEP>
 800ad56:	4603      	mov	r3, r0
 800ad58:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ad5a:	7b7b      	ldrb	r3, [r7, #13]
 800ad5c:	2bff      	cmp	r3, #255	@ 0xff
 800ad5e:	f000 8176 	beq.w	800b04e <USBD_StdEPReq+0x332>
 800ad62:	7b7b      	ldrb	r3, [r7, #13]
 800ad64:	2b00      	cmp	r3, #0
 800ad66:	f040 8172 	bne.w	800b04e <USBD_StdEPReq+0x332>
      {
        pdev->classId = idx;
 800ad6a:	7b7a      	ldrb	r2, [r7, #13]
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800ad72:	7b7a      	ldrb	r2, [r7, #13]
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	32ae      	adds	r2, #174	@ 0xae
 800ad78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad7c:	689b      	ldr	r3, [r3, #8]
 800ad7e:	2b00      	cmp	r3, #0
 800ad80:	f000 8165 	beq.w	800b04e <USBD_StdEPReq+0x332>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 800ad84:	7b7a      	ldrb	r2, [r7, #13]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	32ae      	adds	r2, #174	@ 0xae
 800ad8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ad8e:	689b      	ldr	r3, [r3, #8]
 800ad90:	6839      	ldr	r1, [r7, #0]
 800ad92:	6878      	ldr	r0, [r7, #4]
 800ad94:	4798      	blx	r3
 800ad96:	4603      	mov	r3, r0
 800ad98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800ad9a:	e158      	b.n	800b04e <USBD_StdEPReq+0x332>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800ad9c:	683b      	ldr	r3, [r7, #0]
 800ad9e:	785b      	ldrb	r3, [r3, #1]
 800ada0:	2b03      	cmp	r3, #3
 800ada2:	d008      	beq.n	800adb6 <USBD_StdEPReq+0x9a>
 800ada4:	2b03      	cmp	r3, #3
 800ada6:	f300 8147 	bgt.w	800b038 <USBD_StdEPReq+0x31c>
 800adaa:	2b00      	cmp	r3, #0
 800adac:	f000 809b 	beq.w	800aee6 <USBD_StdEPReq+0x1ca>
 800adb0:	2b01      	cmp	r3, #1
 800adb2:	d03c      	beq.n	800ae2e <USBD_StdEPReq+0x112>
 800adb4:	e140      	b.n	800b038 <USBD_StdEPReq+0x31c>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 800adb6:	687b      	ldr	r3, [r7, #4]
 800adb8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800adbc:	b2db      	uxtb	r3, r3
 800adbe:	2b02      	cmp	r3, #2
 800adc0:	d002      	beq.n	800adc8 <USBD_StdEPReq+0xac>
 800adc2:	2b03      	cmp	r3, #3
 800adc4:	d016      	beq.n	800adf4 <USBD_StdEPReq+0xd8>
 800adc6:	e02c      	b.n	800ae22 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800adc8:	7bbb      	ldrb	r3, [r7, #14]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d00d      	beq.n	800adea <USBD_StdEPReq+0xce>
 800adce:	7bbb      	ldrb	r3, [r7, #14]
 800add0:	2b80      	cmp	r3, #128	@ 0x80
 800add2:	d00a      	beq.n	800adea <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800add4:	7bbb      	ldrb	r3, [r7, #14]
 800add6:	4619      	mov	r1, r3
 800add8:	6878      	ldr	r0, [r7, #4]
 800adda:	f001 f979 	bl	800c0d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800adde:	2180      	movs	r1, #128	@ 0x80
 800ade0:	6878      	ldr	r0, [r7, #4]
 800ade2:	f001 f975 	bl	800c0d0 <USBD_LL_StallEP>
 800ade6:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ade8:	e020      	b.n	800ae2c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800adea:	6839      	ldr	r1, [r7, #0]
 800adec:	6878      	ldr	r0, [r7, #4]
 800adee:	f000 fc7c 	bl	800b6ea <USBD_CtlError>
              break;
 800adf2:	e01b      	b.n	800ae2c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	885b      	ldrh	r3, [r3, #2]
 800adf8:	2b00      	cmp	r3, #0
 800adfa:	d10e      	bne.n	800ae1a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800adfc:	7bbb      	ldrb	r3, [r7, #14]
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d00b      	beq.n	800ae1a <USBD_StdEPReq+0xfe>
 800ae02:	7bbb      	ldrb	r3, [r7, #14]
 800ae04:	2b80      	cmp	r3, #128	@ 0x80
 800ae06:	d008      	beq.n	800ae1a <USBD_StdEPReq+0xfe>
 800ae08:	683b      	ldr	r3, [r7, #0]
 800ae0a:	88db      	ldrh	r3, [r3, #6]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d104      	bne.n	800ae1a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae10:	7bbb      	ldrb	r3, [r7, #14]
 800ae12:	4619      	mov	r1, r3
 800ae14:	6878      	ldr	r0, [r7, #4]
 800ae16:	f001 f95b 	bl	800c0d0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fd43 	bl	800b8a6 <USBD_CtlSendStatus>

              break;
 800ae20:	e004      	b.n	800ae2c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800ae22:	6839      	ldr	r1, [r7, #0]
 800ae24:	6878      	ldr	r0, [r7, #4]
 800ae26:	f000 fc60 	bl	800b6ea <USBD_CtlError>
              break;
 800ae2a:	bf00      	nop
          }
          break;
 800ae2c:	e109      	b.n	800b042 <USBD_StdEPReq+0x326>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800ae34:	b2db      	uxtb	r3, r3
 800ae36:	2b02      	cmp	r3, #2
 800ae38:	d002      	beq.n	800ae40 <USBD_StdEPReq+0x124>
 800ae3a:	2b03      	cmp	r3, #3
 800ae3c:	d016      	beq.n	800ae6c <USBD_StdEPReq+0x150>
 800ae3e:	e04b      	b.n	800aed8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800ae40:	7bbb      	ldrb	r3, [r7, #14]
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	d00d      	beq.n	800ae62 <USBD_StdEPReq+0x146>
 800ae46:	7bbb      	ldrb	r3, [r7, #14]
 800ae48:	2b80      	cmp	r3, #128	@ 0x80
 800ae4a:	d00a      	beq.n	800ae62 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800ae4c:	7bbb      	ldrb	r3, [r7, #14]
 800ae4e:	4619      	mov	r1, r3
 800ae50:	6878      	ldr	r0, [r7, #4]
 800ae52:	f001 f93d 	bl	800c0d0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800ae56:	2180      	movs	r1, #128	@ 0x80
 800ae58:	6878      	ldr	r0, [r7, #4]
 800ae5a:	f001 f939 	bl	800c0d0 <USBD_LL_StallEP>
 800ae5e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800ae60:	e040      	b.n	800aee4 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800ae62:	6839      	ldr	r1, [r7, #0]
 800ae64:	6878      	ldr	r0, [r7, #4]
 800ae66:	f000 fc40 	bl	800b6ea <USBD_CtlError>
              break;
 800ae6a:	e03b      	b.n	800aee4 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	885b      	ldrh	r3, [r3, #2]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d136      	bne.n	800aee2 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 800ae74:	7bbb      	ldrb	r3, [r7, #14]
 800ae76:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	d004      	beq.n	800ae88 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800ae7e:	7bbb      	ldrb	r3, [r7, #14]
 800ae80:	4619      	mov	r1, r3
 800ae82:	6878      	ldr	r0, [r7, #4]
 800ae84:	f001 f943 	bl	800c10e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800ae88:	6878      	ldr	r0, [r7, #4]
 800ae8a:	f000 fd0c 	bl	800b8a6 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800ae8e:	7bbb      	ldrb	r3, [r7, #14]
 800ae90:	4619      	mov	r1, r3
 800ae92:	6878      	ldr	r0, [r7, #4]
 800ae94:	f7ff fde3 	bl	800aa5e <USBD_CoreFindEP>
 800ae98:	4603      	mov	r3, r0
 800ae9a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800ae9c:	7b7b      	ldrb	r3, [r7, #13]
 800ae9e:	2bff      	cmp	r3, #255	@ 0xff
 800aea0:	d01f      	beq.n	800aee2 <USBD_StdEPReq+0x1c6>
 800aea2:	7b7b      	ldrb	r3, [r7, #13]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d11c      	bne.n	800aee2 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800aea8:	7b7a      	ldrb	r2, [r7, #13]
 800aeaa:	687b      	ldr	r3, [r7, #4]
 800aeac:	f8c3 22d4 	str.w	r2, [r3, #724]	@ 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800aeb0:	7b7a      	ldrb	r2, [r7, #13]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	32ae      	adds	r2, #174	@ 0xae
 800aeb6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeba:	689b      	ldr	r3, [r3, #8]
 800aebc:	2b00      	cmp	r3, #0
 800aebe:	d010      	beq.n	800aee2 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800aec0:	7b7a      	ldrb	r2, [r7, #13]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	32ae      	adds	r2, #174	@ 0xae
 800aec6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aeca:	689b      	ldr	r3, [r3, #8]
 800aecc:	6839      	ldr	r1, [r7, #0]
 800aece:	6878      	ldr	r0, [r7, #4]
 800aed0:	4798      	blx	r3
 800aed2:	4603      	mov	r3, r0
 800aed4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 800aed6:	e004      	b.n	800aee2 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 800aed8:	6839      	ldr	r1, [r7, #0]
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 fc05 	bl	800b6ea <USBD_CtlError>
              break;
 800aee0:	e000      	b.n	800aee4 <USBD_StdEPReq+0x1c8>
              break;
 800aee2:	bf00      	nop
          }
          break;
 800aee4:	e0ad      	b.n	800b042 <USBD_StdEPReq+0x326>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800aeec:	b2db      	uxtb	r3, r3
 800aeee:	2b02      	cmp	r3, #2
 800aef0:	d002      	beq.n	800aef8 <USBD_StdEPReq+0x1dc>
 800aef2:	2b03      	cmp	r3, #3
 800aef4:	d033      	beq.n	800af5e <USBD_StdEPReq+0x242>
 800aef6:	e099      	b.n	800b02c <USBD_StdEPReq+0x310>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800aef8:	7bbb      	ldrb	r3, [r7, #14]
 800aefa:	2b00      	cmp	r3, #0
 800aefc:	d007      	beq.n	800af0e <USBD_StdEPReq+0x1f2>
 800aefe:	7bbb      	ldrb	r3, [r7, #14]
 800af00:	2b80      	cmp	r3, #128	@ 0x80
 800af02:	d004      	beq.n	800af0e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 800af04:	6839      	ldr	r1, [r7, #0]
 800af06:	6878      	ldr	r0, [r7, #4]
 800af08:	f000 fbef 	bl	800b6ea <USBD_CtlError>
                break;
 800af0c:	e093      	b.n	800b036 <USBD_StdEPReq+0x31a>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af0e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af12:	2b00      	cmp	r3, #0
 800af14:	da0b      	bge.n	800af2e <USBD_StdEPReq+0x212>
 800af16:	7bbb      	ldrb	r3, [r7, #14]
 800af18:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800af1c:	4613      	mov	r3, r2
 800af1e:	009b      	lsls	r3, r3, #2
 800af20:	4413      	add	r3, r2
 800af22:	009b      	lsls	r3, r3, #2
 800af24:	3310      	adds	r3, #16
 800af26:	687a      	ldr	r2, [r7, #4]
 800af28:	4413      	add	r3, r2
 800af2a:	3304      	adds	r3, #4
 800af2c:	e00b      	b.n	800af46 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800af2e:	7bbb      	ldrb	r3, [r7, #14]
 800af30:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800af34:	4613      	mov	r3, r2
 800af36:	009b      	lsls	r3, r3, #2
 800af38:	4413      	add	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800af40:	687a      	ldr	r2, [r7, #4]
 800af42:	4413      	add	r3, r2
 800af44:	3304      	adds	r3, #4
 800af46:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800af48:	68bb      	ldr	r3, [r7, #8]
 800af4a:	2200      	movs	r2, #0
 800af4c:	739a      	strb	r2, [r3, #14]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800af4e:	68bb      	ldr	r3, [r7, #8]
 800af50:	330e      	adds	r3, #14
 800af52:	2202      	movs	r2, #2
 800af54:	4619      	mov	r1, r3
 800af56:	6878      	ldr	r0, [r7, #4]
 800af58:	f000 fc44 	bl	800b7e4 <USBD_CtlSendData>
              break;
 800af5c:	e06b      	b.n	800b036 <USBD_StdEPReq+0x31a>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800af5e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800af62:	2b00      	cmp	r3, #0
 800af64:	da11      	bge.n	800af8a <USBD_StdEPReq+0x26e>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800af66:	7bbb      	ldrb	r3, [r7, #14]
 800af68:	f003 020f 	and.w	r2, r3, #15
 800af6c:	6879      	ldr	r1, [r7, #4]
 800af6e:	4613      	mov	r3, r2
 800af70:	009b      	lsls	r3, r3, #2
 800af72:	4413      	add	r3, r2
 800af74:	009b      	lsls	r3, r3, #2
 800af76:	440b      	add	r3, r1
 800af78:	3323      	adds	r3, #35	@ 0x23
 800af7a:	781b      	ldrb	r3, [r3, #0]
 800af7c:	2b00      	cmp	r3, #0
 800af7e:	d117      	bne.n	800afb0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800af80:	6839      	ldr	r1, [r7, #0]
 800af82:	6878      	ldr	r0, [r7, #4]
 800af84:	f000 fbb1 	bl	800b6ea <USBD_CtlError>
                  break;
 800af88:	e055      	b.n	800b036 <USBD_StdEPReq+0x31a>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800af8a:	7bbb      	ldrb	r3, [r7, #14]
 800af8c:	f003 020f 	and.w	r2, r3, #15
 800af90:	6879      	ldr	r1, [r7, #4]
 800af92:	4613      	mov	r3, r2
 800af94:	009b      	lsls	r3, r3, #2
 800af96:	4413      	add	r3, r2
 800af98:	009b      	lsls	r3, r3, #2
 800af9a:	440b      	add	r3, r1
 800af9c:	f203 1363 	addw	r3, r3, #355	@ 0x163
 800afa0:	781b      	ldrb	r3, [r3, #0]
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d104      	bne.n	800afb0 <USBD_StdEPReq+0x294>
                {
                  USBD_CtlError(pdev, req);
 800afa6:	6839      	ldr	r1, [r7, #0]
 800afa8:	6878      	ldr	r0, [r7, #4]
 800afaa:	f000 fb9e 	bl	800b6ea <USBD_CtlError>
                  break;
 800afae:	e042      	b.n	800b036 <USBD_StdEPReq+0x31a>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800afb4:	2b00      	cmp	r3, #0
 800afb6:	da0b      	bge.n	800afd0 <USBD_StdEPReq+0x2b4>
 800afb8:	7bbb      	ldrb	r3, [r7, #14]
 800afba:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800afbe:	4613      	mov	r3, r2
 800afc0:	009b      	lsls	r3, r3, #2
 800afc2:	4413      	add	r3, r2
 800afc4:	009b      	lsls	r3, r3, #2
 800afc6:	3310      	adds	r3, #16
 800afc8:	687a      	ldr	r2, [r7, #4]
 800afca:	4413      	add	r3, r2
 800afcc:	3304      	adds	r3, #4
 800afce:	e00b      	b.n	800afe8 <USBD_StdEPReq+0x2cc>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800afd0:	7bbb      	ldrb	r3, [r7, #14]
 800afd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800afd6:	4613      	mov	r3, r2
 800afd8:	009b      	lsls	r3, r3, #2
 800afda:	4413      	add	r3, r2
 800afdc:	009b      	lsls	r3, r3, #2
 800afde:	f503 73a8 	add.w	r3, r3, #336	@ 0x150
 800afe2:	687a      	ldr	r2, [r7, #4]
 800afe4:	4413      	add	r3, r2
 800afe6:	3304      	adds	r3, #4
 800afe8:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800afea:	7bbb      	ldrb	r3, [r7, #14]
 800afec:	2b00      	cmp	r3, #0
 800afee:	d002      	beq.n	800aff6 <USBD_StdEPReq+0x2da>
 800aff0:	7bbb      	ldrb	r3, [r7, #14]
 800aff2:	2b80      	cmp	r3, #128	@ 0x80
 800aff4:	d103      	bne.n	800affe <USBD_StdEPReq+0x2e2>
              {
                pep->status = 0x0000U;
 800aff6:	68bb      	ldr	r3, [r7, #8]
 800aff8:	2200      	movs	r2, #0
 800affa:	739a      	strb	r2, [r3, #14]
 800affc:	e00e      	b.n	800b01c <USBD_StdEPReq+0x300>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800affe:	7bbb      	ldrb	r3, [r7, #14]
 800b000:	4619      	mov	r1, r3
 800b002:	6878      	ldr	r0, [r7, #4]
 800b004:	f001 f8a2 	bl	800c14c <USBD_LL_IsStallEP>
 800b008:	4603      	mov	r3, r0
 800b00a:	2b00      	cmp	r3, #0
 800b00c:	d003      	beq.n	800b016 <USBD_StdEPReq+0x2fa>
              {
                pep->status = 0x0001U;
 800b00e:	68bb      	ldr	r3, [r7, #8]
 800b010:	2201      	movs	r2, #1
 800b012:	739a      	strb	r2, [r3, #14]
 800b014:	e002      	b.n	800b01c <USBD_StdEPReq+0x300>
              }
              else
              {
                pep->status = 0x0000U;
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	2200      	movs	r2, #0
 800b01a:	739a      	strb	r2, [r3, #14]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800b01c:	68bb      	ldr	r3, [r7, #8]
 800b01e:	330e      	adds	r3, #14
 800b020:	2202      	movs	r2, #2
 800b022:	4619      	mov	r1, r3
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 fbdd 	bl	800b7e4 <USBD_CtlSendData>
              break;
 800b02a:	e004      	b.n	800b036 <USBD_StdEPReq+0x31a>

            default:
              USBD_CtlError(pdev, req);
 800b02c:	6839      	ldr	r1, [r7, #0]
 800b02e:	6878      	ldr	r0, [r7, #4]
 800b030:	f000 fb5b 	bl	800b6ea <USBD_CtlError>
              break;
 800b034:	bf00      	nop
          }
          break;
 800b036:	e004      	b.n	800b042 <USBD_StdEPReq+0x326>

        default:
          USBD_CtlError(pdev, req);
 800b038:	6839      	ldr	r1, [r7, #0]
 800b03a:	6878      	ldr	r0, [r7, #4]
 800b03c:	f000 fb55 	bl	800b6ea <USBD_CtlError>
          break;
 800b040:	bf00      	nop
      }
      break;
 800b042:	e005      	b.n	800b050 <USBD_StdEPReq+0x334>

    default:
      USBD_CtlError(pdev, req);
 800b044:	6839      	ldr	r1, [r7, #0]
 800b046:	6878      	ldr	r0, [r7, #4]
 800b048:	f000 fb4f 	bl	800b6ea <USBD_CtlError>
      break;
 800b04c:	e000      	b.n	800b050 <USBD_StdEPReq+0x334>
      break;
 800b04e:	bf00      	nop
  }

  return ret;
 800b050:	7bfb      	ldrb	r3, [r7, #15]
}
 800b052:	4618      	mov	r0, r3
 800b054:	3710      	adds	r7, #16
 800b056:	46bd      	mov	sp, r7
 800b058:	bd80      	pop	{r7, pc}
	...

0800b05c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b084      	sub	sp, #16
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800b066:	2300      	movs	r3, #0
 800b068:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800b06a:	2300      	movs	r3, #0
 800b06c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800b06e:	2300      	movs	r3, #0
 800b070:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	885b      	ldrh	r3, [r3, #2]
 800b076:	0a1b      	lsrs	r3, r3, #8
 800b078:	b29b      	uxth	r3, r3
 800b07a:	3b01      	subs	r3, #1
 800b07c:	2b06      	cmp	r3, #6
 800b07e:	f200 8128 	bhi.w	800b2d2 <USBD_GetDescriptor+0x276>
 800b082:	a201      	add	r2, pc, #4	@ (adr r2, 800b088 <USBD_GetDescriptor+0x2c>)
 800b084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b088:	0800b0a5 	.word	0x0800b0a5
 800b08c:	0800b0bd 	.word	0x0800b0bd
 800b090:	0800b0fd 	.word	0x0800b0fd
 800b094:	0800b2d3 	.word	0x0800b2d3
 800b098:	0800b2d3 	.word	0x0800b2d3
 800b09c:	0800b273 	.word	0x0800b273
 800b0a0:	0800b29f 	.word	0x0800b29f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800b0a4:	687b      	ldr	r3, [r7, #4]
 800b0a6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	687a      	ldr	r2, [r7, #4]
 800b0ae:	7c12      	ldrb	r2, [r2, #16]
 800b0b0:	f107 0108 	add.w	r1, r7, #8
 800b0b4:	4610      	mov	r0, r2
 800b0b6:	4798      	blx	r3
 800b0b8:	60f8      	str	r0, [r7, #12]
      break;
 800b0ba:	e112      	b.n	800b2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	7c1b      	ldrb	r3, [r3, #16]
 800b0c0:	2b00      	cmp	r3, #0
 800b0c2:	d10d      	bne.n	800b0e0 <USBD_GetDescriptor+0x84>
          pbuf = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b0cc:	f107 0208 	add.w	r2, r7, #8
 800b0d0:	4610      	mov	r0, r2
 800b0d2:	4798      	blx	r3
 800b0d4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	3301      	adds	r3, #1
 800b0da:	2202      	movs	r2, #2
 800b0dc:	701a      	strb	r2, [r3, #0]
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800b0de:	e100      	b.n	800b2e2 <USBD_GetDescriptor+0x286>
          pbuf = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800b0e0:	687b      	ldr	r3, [r7, #4]
 800b0e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b0e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0e8:	f107 0208 	add.w	r2, r7, #8
 800b0ec:	4610      	mov	r0, r2
 800b0ee:	4798      	blx	r3
 800b0f0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	3301      	adds	r3, #1
 800b0f6:	2202      	movs	r2, #2
 800b0f8:	701a      	strb	r2, [r3, #0]
      break;
 800b0fa:	e0f2      	b.n	800b2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800b0fc:	683b      	ldr	r3, [r7, #0]
 800b0fe:	885b      	ldrh	r3, [r3, #2]
 800b100:	b2db      	uxtb	r3, r3
 800b102:	2b05      	cmp	r3, #5
 800b104:	f200 80ac 	bhi.w	800b260 <USBD_GetDescriptor+0x204>
 800b108:	a201      	add	r2, pc, #4	@ (adr r2, 800b110 <USBD_GetDescriptor+0xb4>)
 800b10a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b10e:	bf00      	nop
 800b110:	0800b129 	.word	0x0800b129
 800b114:	0800b15d 	.word	0x0800b15d
 800b118:	0800b191 	.word	0x0800b191
 800b11c:	0800b1c5 	.word	0x0800b1c5
 800b120:	0800b1f9 	.word	0x0800b1f9
 800b124:	0800b22d 	.word	0x0800b22d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b12e:	685b      	ldr	r3, [r3, #4]
 800b130:	2b00      	cmp	r3, #0
 800b132:	d00b      	beq.n	800b14c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b13a:	685b      	ldr	r3, [r3, #4]
 800b13c:	687a      	ldr	r2, [r7, #4]
 800b13e:	7c12      	ldrb	r2, [r2, #16]
 800b140:	f107 0108 	add.w	r1, r7, #8
 800b144:	4610      	mov	r0, r2
 800b146:	4798      	blx	r3
 800b148:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b14a:	e091      	b.n	800b270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6878      	ldr	r0, [r7, #4]
 800b150:	f000 facb 	bl	800b6ea <USBD_CtlError>
            err++;
 800b154:	7afb      	ldrb	r3, [r7, #11]
 800b156:	3301      	adds	r3, #1
 800b158:	72fb      	strb	r3, [r7, #11]
          break;
 800b15a:	e089      	b.n	800b270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b162:	689b      	ldr	r3, [r3, #8]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d00b      	beq.n	800b180 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b16e:	689b      	ldr	r3, [r3, #8]
 800b170:	687a      	ldr	r2, [r7, #4]
 800b172:	7c12      	ldrb	r2, [r2, #16]
 800b174:	f107 0108 	add.w	r1, r7, #8
 800b178:	4610      	mov	r0, r2
 800b17a:	4798      	blx	r3
 800b17c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b17e:	e077      	b.n	800b270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b180:	6839      	ldr	r1, [r7, #0]
 800b182:	6878      	ldr	r0, [r7, #4]
 800b184:	f000 fab1 	bl	800b6ea <USBD_CtlError>
            err++;
 800b188:	7afb      	ldrb	r3, [r7, #11]
 800b18a:	3301      	adds	r3, #1
 800b18c:	72fb      	strb	r3, [r7, #11]
          break;
 800b18e:	e06f      	b.n	800b270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b196:	68db      	ldr	r3, [r3, #12]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d00b      	beq.n	800b1b4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1a2:	68db      	ldr	r3, [r3, #12]
 800b1a4:	687a      	ldr	r2, [r7, #4]
 800b1a6:	7c12      	ldrb	r2, [r2, #16]
 800b1a8:	f107 0108 	add.w	r1, r7, #8
 800b1ac:	4610      	mov	r0, r2
 800b1ae:	4798      	blx	r3
 800b1b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1b2:	e05d      	b.n	800b270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1b4:	6839      	ldr	r1, [r7, #0]
 800b1b6:	6878      	ldr	r0, [r7, #4]
 800b1b8:	f000 fa97 	bl	800b6ea <USBD_CtlError>
            err++;
 800b1bc:	7afb      	ldrb	r3, [r7, #11]
 800b1be:	3301      	adds	r3, #1
 800b1c0:	72fb      	strb	r3, [r7, #11]
          break;
 800b1c2:	e055      	b.n	800b270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1ca:	691b      	ldr	r3, [r3, #16]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d00b      	beq.n	800b1e8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800b1d0:	687b      	ldr	r3, [r7, #4]
 800b1d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1d6:	691b      	ldr	r3, [r3, #16]
 800b1d8:	687a      	ldr	r2, [r7, #4]
 800b1da:	7c12      	ldrb	r2, [r2, #16]
 800b1dc:	f107 0108 	add.w	r1, r7, #8
 800b1e0:	4610      	mov	r0, r2
 800b1e2:	4798      	blx	r3
 800b1e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b1e6:	e043      	b.n	800b270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b1e8:	6839      	ldr	r1, [r7, #0]
 800b1ea:	6878      	ldr	r0, [r7, #4]
 800b1ec:	f000 fa7d 	bl	800b6ea <USBD_CtlError>
            err++;
 800b1f0:	7afb      	ldrb	r3, [r7, #11]
 800b1f2:	3301      	adds	r3, #1
 800b1f4:	72fb      	strb	r3, [r7, #11]
          break;
 800b1f6:	e03b      	b.n	800b270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b1fe:	695b      	ldr	r3, [r3, #20]
 800b200:	2b00      	cmp	r3, #0
 800b202:	d00b      	beq.n	800b21c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b20a:	695b      	ldr	r3, [r3, #20]
 800b20c:	687a      	ldr	r2, [r7, #4]
 800b20e:	7c12      	ldrb	r2, [r2, #16]
 800b210:	f107 0108 	add.w	r1, r7, #8
 800b214:	4610      	mov	r0, r2
 800b216:	4798      	blx	r3
 800b218:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b21a:	e029      	b.n	800b270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b21c:	6839      	ldr	r1, [r7, #0]
 800b21e:	6878      	ldr	r0, [r7, #4]
 800b220:	f000 fa63 	bl	800b6ea <USBD_CtlError>
            err++;
 800b224:	7afb      	ldrb	r3, [r7, #11]
 800b226:	3301      	adds	r3, #1
 800b228:	72fb      	strb	r3, [r7, #11]
          break;
 800b22a:	e021      	b.n	800b270 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800b22c:	687b      	ldr	r3, [r7, #4]
 800b22e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b232:	699b      	ldr	r3, [r3, #24]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d00b      	beq.n	800b250 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800b238:	687b      	ldr	r3, [r7, #4]
 800b23a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	@ 0x2b4
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	687a      	ldr	r2, [r7, #4]
 800b242:	7c12      	ldrb	r2, [r2, #16]
 800b244:	f107 0108 	add.w	r1, r7, #8
 800b248:	4610      	mov	r0, r2
 800b24a:	4798      	blx	r3
 800b24c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800b24e:	e00f      	b.n	800b270 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800b250:	6839      	ldr	r1, [r7, #0]
 800b252:	6878      	ldr	r0, [r7, #4]
 800b254:	f000 fa49 	bl	800b6ea <USBD_CtlError>
            err++;
 800b258:	7afb      	ldrb	r3, [r7, #11]
 800b25a:	3301      	adds	r3, #1
 800b25c:	72fb      	strb	r3, [r7, #11]
          break;
 800b25e:	e007      	b.n	800b270 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800b260:	6839      	ldr	r1, [r7, #0]
 800b262:	6878      	ldr	r0, [r7, #4]
 800b264:	f000 fa41 	bl	800b6ea <USBD_CtlError>
          err++;
 800b268:	7afb      	ldrb	r3, [r7, #11]
 800b26a:	3301      	adds	r3, #1
 800b26c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800b26e:	bf00      	nop
      }
      break;
 800b270:	e037      	b.n	800b2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b272:	687b      	ldr	r3, [r7, #4]
 800b274:	7c1b      	ldrb	r3, [r3, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d109      	bne.n	800b28e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b280:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800b282:	f107 0208 	add.w	r2, r7, #8
 800b286:	4610      	mov	r0, r2
 800b288:	4798      	blx	r3
 800b28a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b28c:	e029      	b.n	800b2e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b28e:	6839      	ldr	r1, [r7, #0]
 800b290:	6878      	ldr	r0, [r7, #4]
 800b292:	f000 fa2a 	bl	800b6ea <USBD_CtlError>
        err++;
 800b296:	7afb      	ldrb	r3, [r7, #11]
 800b298:	3301      	adds	r3, #1
 800b29a:	72fb      	strb	r3, [r7, #11]
      break;
 800b29c:	e021      	b.n	800b2e2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	7c1b      	ldrb	r3, [r3, #16]
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d10d      	bne.n	800b2c2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800b2a6:	687b      	ldr	r3, [r7, #4]
 800b2a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	@ 0x2b8
 800b2ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b2ae:	f107 0208 	add.w	r2, r7, #8
 800b2b2:	4610      	mov	r0, r2
 800b2b4:	4798      	blx	r3
 800b2b6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	2207      	movs	r2, #7
 800b2be:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800b2c0:	e00f      	b.n	800b2e2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800b2c2:	6839      	ldr	r1, [r7, #0]
 800b2c4:	6878      	ldr	r0, [r7, #4]
 800b2c6:	f000 fa10 	bl	800b6ea <USBD_CtlError>
        err++;
 800b2ca:	7afb      	ldrb	r3, [r7, #11]
 800b2cc:	3301      	adds	r3, #1
 800b2ce:	72fb      	strb	r3, [r7, #11]
      break;
 800b2d0:	e007      	b.n	800b2e2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800b2d2:	6839      	ldr	r1, [r7, #0]
 800b2d4:	6878      	ldr	r0, [r7, #4]
 800b2d6:	f000 fa08 	bl	800b6ea <USBD_CtlError>
      err++;
 800b2da:	7afb      	ldrb	r3, [r7, #11]
 800b2dc:	3301      	adds	r3, #1
 800b2de:	72fb      	strb	r3, [r7, #11]
      break;
 800b2e0:	bf00      	nop
  }

  if (err != 0U)
 800b2e2:	7afb      	ldrb	r3, [r7, #11]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d11e      	bne.n	800b326 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 800b2e8:	683b      	ldr	r3, [r7, #0]
 800b2ea:	88db      	ldrh	r3, [r3, #6]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d016      	beq.n	800b31e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800b2f0:	893b      	ldrh	r3, [r7, #8]
 800b2f2:	2b00      	cmp	r3, #0
 800b2f4:	d00e      	beq.n	800b314 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 800b2f6:	683b      	ldr	r3, [r7, #0]
 800b2f8:	88da      	ldrh	r2, [r3, #6]
 800b2fa:	893b      	ldrh	r3, [r7, #8]
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	bf28      	it	cs
 800b300:	4613      	movcs	r3, r2
 800b302:	b29b      	uxth	r3, r3
 800b304:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 800b306:	893b      	ldrh	r3, [r7, #8]
 800b308:	461a      	mov	r2, r3
 800b30a:	68f9      	ldr	r1, [r7, #12]
 800b30c:	6878      	ldr	r0, [r7, #4]
 800b30e:	f000 fa69 	bl	800b7e4 <USBD_CtlSendData>
 800b312:	e009      	b.n	800b328 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 800b314:	6839      	ldr	r1, [r7, #0]
 800b316:	6878      	ldr	r0, [r7, #4]
 800b318:	f000 f9e7 	bl	800b6ea <USBD_CtlError>
 800b31c:	e004      	b.n	800b328 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800b31e:	6878      	ldr	r0, [r7, #4]
 800b320:	f000 fac1 	bl	800b8a6 <USBD_CtlSendStatus>
 800b324:	e000      	b.n	800b328 <USBD_GetDescriptor+0x2cc>
    return;
 800b326:	bf00      	nop
  }
}
 800b328:	3710      	adds	r7, #16
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	bf00      	nop

0800b330 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b330:	b580      	push	{r7, lr}
 800b332:	b084      	sub	sp, #16
 800b334:	af00      	add	r7, sp, #0
 800b336:	6078      	str	r0, [r7, #4]
 800b338:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800b33a:	683b      	ldr	r3, [r7, #0]
 800b33c:	889b      	ldrh	r3, [r3, #4]
 800b33e:	2b00      	cmp	r3, #0
 800b340:	d131      	bne.n	800b3a6 <USBD_SetAddress+0x76>
 800b342:	683b      	ldr	r3, [r7, #0]
 800b344:	88db      	ldrh	r3, [r3, #6]
 800b346:	2b00      	cmp	r3, #0
 800b348:	d12d      	bne.n	800b3a6 <USBD_SetAddress+0x76>
 800b34a:	683b      	ldr	r3, [r7, #0]
 800b34c:	885b      	ldrh	r3, [r3, #2]
 800b34e:	2b7f      	cmp	r3, #127	@ 0x7f
 800b350:	d829      	bhi.n	800b3a6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800b352:	683b      	ldr	r3, [r7, #0]
 800b354:	885b      	ldrh	r3, [r3, #2]
 800b356:	b2db      	uxtb	r3, r3
 800b358:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800b35c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b364:	b2db      	uxtb	r3, r3
 800b366:	2b03      	cmp	r3, #3
 800b368:	d104      	bne.n	800b374 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800b36a:	6839      	ldr	r1, [r7, #0]
 800b36c:	6878      	ldr	r0, [r7, #4]
 800b36e:	f000 f9bc 	bl	800b6ea <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b372:	e01d      	b.n	800b3b0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	7bfa      	ldrb	r2, [r7, #15]
 800b378:	f883 229e 	strb.w	r2, [r3, #670]	@ 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800b37c:	7bfb      	ldrb	r3, [r7, #15]
 800b37e:	4619      	mov	r1, r3
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f000 ff0f 	bl	800c1a4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800b386:	6878      	ldr	r0, [r7, #4]
 800b388:	f000 fa8d 	bl	800b8a6 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800b38c:	7bfb      	ldrb	r3, [r7, #15]
 800b38e:	2b00      	cmp	r3, #0
 800b390:	d004      	beq.n	800b39c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	2202      	movs	r2, #2
 800b396:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b39a:	e009      	b.n	800b3b0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	2201      	movs	r2, #1
 800b3a0:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800b3a4:	e004      	b.n	800b3b0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800b3a6:	6839      	ldr	r1, [r7, #0]
 800b3a8:	6878      	ldr	r0, [r7, #4]
 800b3aa:	f000 f99e 	bl	800b6ea <USBD_CtlError>
  }
}
 800b3ae:	bf00      	nop
 800b3b0:	bf00      	nop
 800b3b2:	3710      	adds	r7, #16
 800b3b4:	46bd      	mov	sp, r7
 800b3b6:	bd80      	pop	{r7, pc}

0800b3b8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b3b8:	b580      	push	{r7, lr}
 800b3ba:	b084      	sub	sp, #16
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
 800b3c0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800b3c2:	2300      	movs	r3, #0
 800b3c4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800b3c6:	683b      	ldr	r3, [r7, #0]
 800b3c8:	885b      	ldrh	r3, [r3, #2]
 800b3ca:	b2da      	uxtb	r2, r3
 800b3cc:	4b4e      	ldr	r3, [pc, #312]	@ (800b508 <USBD_SetConfig+0x150>)
 800b3ce:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800b3d0:	4b4d      	ldr	r3, [pc, #308]	@ (800b508 <USBD_SetConfig+0x150>)
 800b3d2:	781b      	ldrb	r3, [r3, #0]
 800b3d4:	2b01      	cmp	r3, #1
 800b3d6:	d905      	bls.n	800b3e4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 800b3d8:	6839      	ldr	r1, [r7, #0]
 800b3da:	6878      	ldr	r0, [r7, #4]
 800b3dc:	f000 f985 	bl	800b6ea <USBD_CtlError>
    return USBD_FAIL;
 800b3e0:	2303      	movs	r3, #3
 800b3e2:	e08c      	b.n	800b4fe <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b3ea:	b2db      	uxtb	r3, r3
 800b3ec:	2b02      	cmp	r3, #2
 800b3ee:	d002      	beq.n	800b3f6 <USBD_SetConfig+0x3e>
 800b3f0:	2b03      	cmp	r3, #3
 800b3f2:	d029      	beq.n	800b448 <USBD_SetConfig+0x90>
 800b3f4:	e075      	b.n	800b4e2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800b3f6:	4b44      	ldr	r3, [pc, #272]	@ (800b508 <USBD_SetConfig+0x150>)
 800b3f8:	781b      	ldrb	r3, [r3, #0]
 800b3fa:	2b00      	cmp	r3, #0
 800b3fc:	d020      	beq.n	800b440 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800b3fe:	4b42      	ldr	r3, [pc, #264]	@ (800b508 <USBD_SetConfig+0x150>)
 800b400:	781b      	ldrb	r3, [r3, #0]
 800b402:	461a      	mov	r2, r3
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b408:	4b3f      	ldr	r3, [pc, #252]	@ (800b508 <USBD_SetConfig+0x150>)
 800b40a:	781b      	ldrb	r3, [r3, #0]
 800b40c:	4619      	mov	r1, r3
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7fe ffcd 	bl	800a3ae <USBD_SetClassConfig>
 800b414:	4603      	mov	r3, r0
 800b416:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 800b418:	7bfb      	ldrb	r3, [r7, #15]
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	d008      	beq.n	800b430 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800b41e:	6839      	ldr	r1, [r7, #0]
 800b420:	6878      	ldr	r0, [r7, #4]
 800b422:	f000 f962 	bl	800b6ea <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	2202      	movs	r2, #2
 800b42a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b42e:	e065      	b.n	800b4fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b430:	6878      	ldr	r0, [r7, #4]
 800b432:	f000 fa38 	bl	800b8a6 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800b436:	687b      	ldr	r3, [r7, #4]
 800b438:	2203      	movs	r2, #3
 800b43a:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b43e:	e05d      	b.n	800b4fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b440:	6878      	ldr	r0, [r7, #4]
 800b442:	f000 fa30 	bl	800b8a6 <USBD_CtlSendStatus>
      break;
 800b446:	e059      	b.n	800b4fc <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800b448:	4b2f      	ldr	r3, [pc, #188]	@ (800b508 <USBD_SetConfig+0x150>)
 800b44a:	781b      	ldrb	r3, [r3, #0]
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	d112      	bne.n	800b476 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800b450:	687b      	ldr	r3, [r7, #4]
 800b452:	2202      	movs	r2, #2
 800b454:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
        pdev->dev_config = cfgidx;
 800b458:	4b2b      	ldr	r3, [pc, #172]	@ (800b508 <USBD_SetConfig+0x150>)
 800b45a:	781b      	ldrb	r3, [r3, #0]
 800b45c:	461a      	mov	r2, r3
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b462:	4b29      	ldr	r3, [pc, #164]	@ (800b508 <USBD_SetConfig+0x150>)
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	4619      	mov	r1, r3
 800b468:	6878      	ldr	r0, [r7, #4]
 800b46a:	f7fe ffbc 	bl	800a3e6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800b46e:	6878      	ldr	r0, [r7, #4]
 800b470:	f000 fa19 	bl	800b8a6 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800b474:	e042      	b.n	800b4fc <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800b476:	4b24      	ldr	r3, [pc, #144]	@ (800b508 <USBD_SetConfig+0x150>)
 800b478:	781b      	ldrb	r3, [r3, #0]
 800b47a:	461a      	mov	r2, r3
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	685b      	ldr	r3, [r3, #4]
 800b480:	429a      	cmp	r2, r3
 800b482:	d02a      	beq.n	800b4da <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	685b      	ldr	r3, [r3, #4]
 800b488:	b2db      	uxtb	r3, r3
 800b48a:	4619      	mov	r1, r3
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	f7fe ffaa 	bl	800a3e6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800b492:	4b1d      	ldr	r3, [pc, #116]	@ (800b508 <USBD_SetConfig+0x150>)
 800b494:	781b      	ldrb	r3, [r3, #0]
 800b496:	461a      	mov	r2, r3
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800b49c:	4b1a      	ldr	r3, [pc, #104]	@ (800b508 <USBD_SetConfig+0x150>)
 800b49e:	781b      	ldrb	r3, [r3, #0]
 800b4a0:	4619      	mov	r1, r3
 800b4a2:	6878      	ldr	r0, [r7, #4]
 800b4a4:	f7fe ff83 	bl	800a3ae <USBD_SetClassConfig>
 800b4a8:	4603      	mov	r3, r0
 800b4aa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800b4ac:	7bfb      	ldrb	r3, [r7, #15]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d00f      	beq.n	800b4d2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800b4b2:	6839      	ldr	r1, [r7, #0]
 800b4b4:	6878      	ldr	r0, [r7, #4]
 800b4b6:	f000 f918 	bl	800b6ea <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685b      	ldr	r3, [r3, #4]
 800b4be:	b2db      	uxtb	r3, r3
 800b4c0:	4619      	mov	r1, r3
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	f7fe ff8f 	bl	800a3e6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800b4c8:	687b      	ldr	r3, [r7, #4]
 800b4ca:	2202      	movs	r2, #2
 800b4cc:	f883 229c 	strb.w	r2, [r3, #668]	@ 0x29c
      break;
 800b4d0:	e014      	b.n	800b4fc <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800b4d2:	6878      	ldr	r0, [r7, #4]
 800b4d4:	f000 f9e7 	bl	800b8a6 <USBD_CtlSendStatus>
      break;
 800b4d8:	e010      	b.n	800b4fc <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800b4da:	6878      	ldr	r0, [r7, #4]
 800b4dc:	f000 f9e3 	bl	800b8a6 <USBD_CtlSendStatus>
      break;
 800b4e0:	e00c      	b.n	800b4fc <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800b4e2:	6839      	ldr	r1, [r7, #0]
 800b4e4:	6878      	ldr	r0, [r7, #4]
 800b4e6:	f000 f900 	bl	800b6ea <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800b4ea:	4b07      	ldr	r3, [pc, #28]	@ (800b508 <USBD_SetConfig+0x150>)
 800b4ec:	781b      	ldrb	r3, [r3, #0]
 800b4ee:	4619      	mov	r1, r3
 800b4f0:	6878      	ldr	r0, [r7, #4]
 800b4f2:	f7fe ff78 	bl	800a3e6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800b4f6:	2303      	movs	r3, #3
 800b4f8:	73fb      	strb	r3, [r7, #15]
      break;
 800b4fa:	bf00      	nop
  }

  return ret;
 800b4fc:	7bfb      	ldrb	r3, [r7, #15]
}
 800b4fe:	4618      	mov	r0, r3
 800b500:	3710      	adds	r7, #16
 800b502:	46bd      	mov	sp, r7
 800b504:	bd80      	pop	{r7, pc}
 800b506:	bf00      	nop
 800b508:	2000083c 	.word	0x2000083c

0800b50c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b082      	sub	sp, #8
 800b510:	af00      	add	r7, sp, #0
 800b512:	6078      	str	r0, [r7, #4]
 800b514:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800b516:	683b      	ldr	r3, [r7, #0]
 800b518:	88db      	ldrh	r3, [r3, #6]
 800b51a:	2b01      	cmp	r3, #1
 800b51c:	d004      	beq.n	800b528 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800b51e:	6839      	ldr	r1, [r7, #0]
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 f8e2 	bl	800b6ea <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800b526:	e023      	b.n	800b570 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b52e:	b2db      	uxtb	r3, r3
 800b530:	2b02      	cmp	r3, #2
 800b532:	dc02      	bgt.n	800b53a <USBD_GetConfig+0x2e>
 800b534:	2b00      	cmp	r3, #0
 800b536:	dc03      	bgt.n	800b540 <USBD_GetConfig+0x34>
 800b538:	e015      	b.n	800b566 <USBD_GetConfig+0x5a>
 800b53a:	2b03      	cmp	r3, #3
 800b53c:	d00b      	beq.n	800b556 <USBD_GetConfig+0x4a>
 800b53e:	e012      	b.n	800b566 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	2200      	movs	r2, #0
 800b544:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	3308      	adds	r3, #8
 800b54a:	2201      	movs	r2, #1
 800b54c:	4619      	mov	r1, r3
 800b54e:	6878      	ldr	r0, [r7, #4]
 800b550:	f000 f948 	bl	800b7e4 <USBD_CtlSendData>
        break;
 800b554:	e00c      	b.n	800b570 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800b556:	687b      	ldr	r3, [r7, #4]
 800b558:	3304      	adds	r3, #4
 800b55a:	2201      	movs	r2, #1
 800b55c:	4619      	mov	r1, r3
 800b55e:	6878      	ldr	r0, [r7, #4]
 800b560:	f000 f940 	bl	800b7e4 <USBD_CtlSendData>
        break;
 800b564:	e004      	b.n	800b570 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800b566:	6839      	ldr	r1, [r7, #0]
 800b568:	6878      	ldr	r0, [r7, #4]
 800b56a:	f000 f8be 	bl	800b6ea <USBD_CtlError>
        break;
 800b56e:	bf00      	nop
}
 800b570:	bf00      	nop
 800b572:	3708      	adds	r7, #8
 800b574:	46bd      	mov	sp, r7
 800b576:	bd80      	pop	{r7, pc}

0800b578 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b578:	b580      	push	{r7, lr}
 800b57a:	b082      	sub	sp, #8
 800b57c:	af00      	add	r7, sp, #0
 800b57e:	6078      	str	r0, [r7, #4]
 800b580:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b588:	b2db      	uxtb	r3, r3
 800b58a:	3b01      	subs	r3, #1
 800b58c:	2b02      	cmp	r3, #2
 800b58e:	d81e      	bhi.n	800b5ce <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800b590:	683b      	ldr	r3, [r7, #0]
 800b592:	88db      	ldrh	r3, [r3, #6]
 800b594:	2b02      	cmp	r3, #2
 800b596:	d004      	beq.n	800b5a2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800b598:	6839      	ldr	r1, [r7, #0]
 800b59a:	6878      	ldr	r0, [r7, #4]
 800b59c:	f000 f8a5 	bl	800b6ea <USBD_CtlError>
        break;
 800b5a0:	e01a      	b.n	800b5d8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	2201      	movs	r2, #1
 800b5a6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	@ 0x2a4
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d005      	beq.n	800b5be <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	68db      	ldr	r3, [r3, #12]
 800b5b6:	f043 0202 	orr.w	r2, r3, #2
 800b5ba:	687b      	ldr	r3, [r7, #4]
 800b5bc:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	330c      	adds	r3, #12
 800b5c2:	2202      	movs	r2, #2
 800b5c4:	4619      	mov	r1, r3
 800b5c6:	6878      	ldr	r0, [r7, #4]
 800b5c8:	f000 f90c 	bl	800b7e4 <USBD_CtlSendData>
      break;
 800b5cc:	e004      	b.n	800b5d8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800b5ce:	6839      	ldr	r1, [r7, #0]
 800b5d0:	6878      	ldr	r0, [r7, #4]
 800b5d2:	f000 f88a 	bl	800b6ea <USBD_CtlError>
      break;
 800b5d6:	bf00      	nop
  }
}
 800b5d8:	bf00      	nop
 800b5da:	3708      	adds	r7, #8
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}

0800b5e0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b5e0:	b580      	push	{r7, lr}
 800b5e2:	b082      	sub	sp, #8
 800b5e4:	af00      	add	r7, sp, #0
 800b5e6:	6078      	str	r0, [r7, #4]
 800b5e8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b5ea:	683b      	ldr	r3, [r7, #0]
 800b5ec:	885b      	ldrh	r3, [r3, #2]
 800b5ee:	2b01      	cmp	r3, #1
 800b5f0:	d107      	bne.n	800b602 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800b5fa:	6878      	ldr	r0, [r7, #4]
 800b5fc:	f000 f953 	bl	800b8a6 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800b600:	e013      	b.n	800b62a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800b602:	683b      	ldr	r3, [r7, #0]
 800b604:	885b      	ldrh	r3, [r3, #2]
 800b606:	2b02      	cmp	r3, #2
 800b608:	d10b      	bne.n	800b622 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = (uint8_t)(req->wIndex >> 8);
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	889b      	ldrh	r3, [r3, #4]
 800b60e:	0a1b      	lsrs	r3, r3, #8
 800b610:	b29b      	uxth	r3, r3
 800b612:	b2da      	uxtb	r2, r3
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	f883 22a0 	strb.w	r2, [r3, #672]	@ 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800b61a:	6878      	ldr	r0, [r7, #4]
 800b61c:	f000 f943 	bl	800b8a6 <USBD_CtlSendStatus>
}
 800b620:	e003      	b.n	800b62a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800b622:	6839      	ldr	r1, [r7, #0]
 800b624:	6878      	ldr	r0, [r7, #4]
 800b626:	f000 f860 	bl	800b6ea <USBD_CtlError>
}
 800b62a:	bf00      	nop
 800b62c:	3708      	adds	r7, #8
 800b62e:	46bd      	mov	sp, r7
 800b630:	bd80      	pop	{r7, pc}

0800b632 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b632:	b580      	push	{r7, lr}
 800b634:	b082      	sub	sp, #8
 800b636:	af00      	add	r7, sp, #0
 800b638:	6078      	str	r0, [r7, #4]
 800b63a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800b63c:	687b      	ldr	r3, [r7, #4]
 800b63e:	f893 329c 	ldrb.w	r3, [r3, #668]	@ 0x29c
 800b642:	b2db      	uxtb	r3, r3
 800b644:	3b01      	subs	r3, #1
 800b646:	2b02      	cmp	r3, #2
 800b648:	d80b      	bhi.n	800b662 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800b64a:	683b      	ldr	r3, [r7, #0]
 800b64c:	885b      	ldrh	r3, [r3, #2]
 800b64e:	2b01      	cmp	r3, #1
 800b650:	d10c      	bne.n	800b66c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	2200      	movs	r2, #0
 800b656:	f8c3 22a4 	str.w	r2, [r3, #676]	@ 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f000 f923 	bl	800b8a6 <USBD_CtlSendStatus>
      }
      break;
 800b660:	e004      	b.n	800b66c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800b662:	6839      	ldr	r1, [r7, #0]
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f000 f840 	bl	800b6ea <USBD_CtlError>
      break;
 800b66a:	e000      	b.n	800b66e <USBD_ClrFeature+0x3c>
      break;
 800b66c:	bf00      	nop
  }
}
 800b66e:	bf00      	nop
 800b670:	3708      	adds	r7, #8
 800b672:	46bd      	mov	sp, r7
 800b674:	bd80      	pop	{r7, pc}

0800b676 <USBD_ParseSetupRequest>:
  * @param  req: usb request
  * @param  pdata: setup data pointer
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800b676:	b580      	push	{r7, lr}
 800b678:	b084      	sub	sp, #16
 800b67a:	af00      	add	r7, sp, #0
 800b67c:	6078      	str	r0, [r7, #4]
 800b67e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800b680:	683b      	ldr	r3, [r7, #0]
 800b682:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 800b684:	68fb      	ldr	r3, [r7, #12]
 800b686:	781a      	ldrb	r2, [r3, #0]
 800b688:	687b      	ldr	r3, [r7, #4]
 800b68a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	3301      	adds	r3, #1
 800b690:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	781a      	ldrb	r2, [r3, #0]
 800b696:	687b      	ldr	r3, [r7, #4]
 800b698:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	3301      	adds	r3, #1
 800b69e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800b6a0:	68f8      	ldr	r0, [r7, #12]
 800b6a2:	f7ff fa3d 	bl	800ab20 <SWAPBYTE>
 800b6a6:	4603      	mov	r3, r0
 800b6a8:	461a      	mov	r2, r3
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800b6ae:	68fb      	ldr	r3, [r7, #12]
 800b6b0:	3301      	adds	r3, #1
 800b6b2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6b4:	68fb      	ldr	r3, [r7, #12]
 800b6b6:	3301      	adds	r3, #1
 800b6b8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800b6ba:	68f8      	ldr	r0, [r7, #12]
 800b6bc:	f7ff fa30 	bl	800ab20 <SWAPBYTE>
 800b6c0:	4603      	mov	r3, r0
 800b6c2:	461a      	mov	r2, r3
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	3301      	adds	r3, #1
 800b6cc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3301      	adds	r3, #1
 800b6d2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800b6d4:	68f8      	ldr	r0, [r7, #12]
 800b6d6:	f7ff fa23 	bl	800ab20 <SWAPBYTE>
 800b6da:	4603      	mov	r3, r0
 800b6dc:	461a      	mov	r2, r3
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	80da      	strh	r2, [r3, #6]
}
 800b6e2:	bf00      	nop
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}

0800b6ea <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800b6ea:	b580      	push	{r7, lr}
 800b6ec:	b082      	sub	sp, #8
 800b6ee:	af00      	add	r7, sp, #0
 800b6f0:	6078      	str	r0, [r7, #4]
 800b6f2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800b6f4:	2180      	movs	r1, #128	@ 0x80
 800b6f6:	6878      	ldr	r0, [r7, #4]
 800b6f8:	f000 fcea 	bl	800c0d0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800b6fc:	2100      	movs	r1, #0
 800b6fe:	6878      	ldr	r0, [r7, #4]
 800b700:	f000 fce6 	bl	800c0d0 <USBD_LL_StallEP>
}
 800b704:	bf00      	nop
 800b706:	3708      	adds	r7, #8
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}

0800b70c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800b70c:	b580      	push	{r7, lr}
 800b70e:	b086      	sub	sp, #24
 800b710:	af00      	add	r7, sp, #0
 800b712:	60f8      	str	r0, [r7, #12]
 800b714:	60b9      	str	r1, [r7, #8]
 800b716:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800b718:	2300      	movs	r3, #0
 800b71a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800b71c:	68fb      	ldr	r3, [r7, #12]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d042      	beq.n	800b7a8 <USBD_GetString+0x9c>
  {
    return;
  }

  pdesc = desc;
 800b722:	68fb      	ldr	r3, [r7, #12]
 800b724:	613b      	str	r3, [r7, #16]
  *len = MIN(USBD_MAX_STR_DESC_SIZ, ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U);
 800b726:	6938      	ldr	r0, [r7, #16]
 800b728:	f000 f842 	bl	800b7b0 <USBD_GetLen>
 800b72c:	4603      	mov	r3, r0
 800b72e:	3301      	adds	r3, #1
 800b730:	005b      	lsls	r3, r3, #1
 800b732:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b736:	d808      	bhi.n	800b74a <USBD_GetString+0x3e>
 800b738:	6938      	ldr	r0, [r7, #16]
 800b73a:	f000 f839 	bl	800b7b0 <USBD_GetLen>
 800b73e:	4603      	mov	r3, r0
 800b740:	3301      	adds	r3, #1
 800b742:	b29b      	uxth	r3, r3
 800b744:	005b      	lsls	r3, r3, #1
 800b746:	b29a      	uxth	r2, r3
 800b748:	e001      	b.n	800b74e <USBD_GetString+0x42>
 800b74a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b74e:	687b      	ldr	r3, [r7, #4]
 800b750:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800b752:	7dfb      	ldrb	r3, [r7, #23]
 800b754:	68ba      	ldr	r2, [r7, #8]
 800b756:	4413      	add	r3, r2
 800b758:	687a      	ldr	r2, [r7, #4]
 800b75a:	7812      	ldrb	r2, [r2, #0]
 800b75c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b75e:	7dfb      	ldrb	r3, [r7, #23]
 800b760:	3301      	adds	r3, #1
 800b762:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800b764:	7dfb      	ldrb	r3, [r7, #23]
 800b766:	68ba      	ldr	r2, [r7, #8]
 800b768:	4413      	add	r3, r2
 800b76a:	2203      	movs	r2, #3
 800b76c:	701a      	strb	r2, [r3, #0]
  idx++;
 800b76e:	7dfb      	ldrb	r3, [r7, #23]
 800b770:	3301      	adds	r3, #1
 800b772:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800b774:	e013      	b.n	800b79e <USBD_GetString+0x92>
  {
    unicode[idx] = *pdesc;
 800b776:	7dfb      	ldrb	r3, [r7, #23]
 800b778:	68ba      	ldr	r2, [r7, #8]
 800b77a:	4413      	add	r3, r2
 800b77c:	693a      	ldr	r2, [r7, #16]
 800b77e:	7812      	ldrb	r2, [r2, #0]
 800b780:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800b782:	693b      	ldr	r3, [r7, #16]
 800b784:	3301      	adds	r3, #1
 800b786:	613b      	str	r3, [r7, #16]
    idx++;
 800b788:	7dfb      	ldrb	r3, [r7, #23]
 800b78a:	3301      	adds	r3, #1
 800b78c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800b78e:	7dfb      	ldrb	r3, [r7, #23]
 800b790:	68ba      	ldr	r2, [r7, #8]
 800b792:	4413      	add	r3, r2
 800b794:	2200      	movs	r2, #0
 800b796:	701a      	strb	r2, [r3, #0]
    idx++;
 800b798:	7dfb      	ldrb	r3, [r7, #23]
 800b79a:	3301      	adds	r3, #1
 800b79c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800b79e:	693b      	ldr	r3, [r7, #16]
 800b7a0:	781b      	ldrb	r3, [r3, #0]
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d1e7      	bne.n	800b776 <USBD_GetString+0x6a>
 800b7a6:	e000      	b.n	800b7aa <USBD_GetString+0x9e>
    return;
 800b7a8:	bf00      	nop
  }
}
 800b7aa:	3718      	adds	r7, #24
 800b7ac:	46bd      	mov	sp, r7
 800b7ae:	bd80      	pop	{r7, pc}

0800b7b0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800b7b0:	b480      	push	{r7}
 800b7b2:	b085      	sub	sp, #20
 800b7b4:	af00      	add	r7, sp, #0
 800b7b6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800b7b8:	2300      	movs	r3, #0
 800b7ba:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800b7c0:	e005      	b.n	800b7ce <USBD_GetLen+0x1e>
  {
    len++;
 800b7c2:	7bfb      	ldrb	r3, [r7, #15]
 800b7c4:	3301      	adds	r3, #1
 800b7c6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	3301      	adds	r3, #1
 800b7cc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	781b      	ldrb	r3, [r3, #0]
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d1f5      	bne.n	800b7c2 <USBD_GetLen+0x12>
  }

  return len;
 800b7d6:	7bfb      	ldrb	r3, [r7, #15]
}
 800b7d8:	4618      	mov	r0, r3
 800b7da:	3714      	adds	r7, #20
 800b7dc:	46bd      	mov	sp, r7
 800b7de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7e2:	4770      	bx	lr

0800b7e4 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800b7e4:	b580      	push	{r7, lr}
 800b7e6:	b084      	sub	sp, #16
 800b7e8:	af00      	add	r7, sp, #0
 800b7ea:	60f8      	str	r0, [r7, #12]
 800b7ec:	60b9      	str	r1, [r7, #8]
 800b7ee:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800b7f0:	68fb      	ldr	r3, [r7, #12]
 800b7f2:	2202      	movs	r2, #2
 800b7f4:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_in[0].total_length = len;
 800b7f8:	68fb      	ldr	r3, [r7, #12]
 800b7fa:	687a      	ldr	r2, [r7, #4]
 800b7fc:	615a      	str	r2, [r3, #20]
  pdev->ep_in[0].pbuffer = pbuf;
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	68ba      	ldr	r2, [r7, #8]
 800b802:	625a      	str	r2, [r3, #36]	@ 0x24

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	687a      	ldr	r2, [r7, #4]
 800b808:	619a      	str	r2, [r3, #24]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b80a:	687b      	ldr	r3, [r7, #4]
 800b80c:	68ba      	ldr	r2, [r7, #8]
 800b80e:	2100      	movs	r1, #0
 800b810:	68f8      	ldr	r0, [r7, #12]
 800b812:	f000 fce6 	bl	800c1e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b816:	2300      	movs	r3, #0
}
 800b818:	4618      	mov	r0, r3
 800b81a:	3710      	adds	r7, #16
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800b820:	b580      	push	{r7, lr}
 800b822:	b084      	sub	sp, #16
 800b824:	af00      	add	r7, sp, #0
 800b826:	60f8      	str	r0, [r7, #12]
 800b828:	60b9      	str	r1, [r7, #8]
 800b82a:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	68ba      	ldr	r2, [r7, #8]
 800b830:	2100      	movs	r1, #0
 800b832:	68f8      	ldr	r0, [r7, #12]
 800b834:	f000 fcd5 	bl	800c1e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3710      	adds	r7, #16
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}

0800b842 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 800b842:	b580      	push	{r7, lr}
 800b844:	b084      	sub	sp, #16
 800b846:	af00      	add	r7, sp, #0
 800b848:	60f8      	str	r0, [r7, #12]
 800b84a:	60b9      	str	r1, [r7, #8]
 800b84c:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800b84e:	68fb      	ldr	r3, [r7, #12]
 800b850:	2203      	movs	r2, #3
 800b852:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294
  pdev->ep_out[0].total_length = len;
 800b856:	68fb      	ldr	r3, [r7, #12]
 800b858:	687a      	ldr	r2, [r7, #4]
 800b85a:	f8c3 2154 	str.w	r2, [r3, #340]	@ 0x154
  pdev->ep_out[0].pbuffer = pbuf;
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	68ba      	ldr	r2, [r7, #8]
 800b862:	f8c3 2164 	str.w	r2, [r3, #356]	@ 0x164

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	687a      	ldr	r2, [r7, #4]
 800b86a:	f8c3 2158 	str.w	r2, [r3, #344]	@ 0x158
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	68ba      	ldr	r2, [r7, #8]
 800b872:	2100      	movs	r1, #0
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f000 fcd5 	bl	800c224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b87a:	2300      	movs	r3, #0
}
 800b87c:	4618      	mov	r0, r3
 800b87e:	3710      	adds	r7, #16
 800b880:	46bd      	mov	sp, r7
 800b882:	bd80      	pop	{r7, pc}

0800b884 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	2100      	movs	r1, #0
 800b896:	68f8      	ldr	r0, [r7, #12]
 800b898:	f000 fcc4 	bl	800c224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b89c:	2300      	movs	r3, #0
}
 800b89e:	4618      	mov	r0, r3
 800b8a0:	3710      	adds	r7, #16
 800b8a2:	46bd      	mov	sp, r7
 800b8a4:	bd80      	pop	{r7, pc}

0800b8a6 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800b8a6:	b580      	push	{r7, lr}
 800b8a8:	b082      	sub	sp, #8
 800b8aa:	af00      	add	r7, sp, #0
 800b8ac:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	2204      	movs	r2, #4
 800b8b2:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	2100      	movs	r1, #0
 800b8bc:	6878      	ldr	r0, [r7, #4]
 800b8be:	f000 fc90 	bl	800c1e2 <USBD_LL_Transmit>

  return USBD_OK;
 800b8c2:	2300      	movs	r3, #0
}
 800b8c4:	4618      	mov	r0, r3
 800b8c6:	3708      	adds	r7, #8
 800b8c8:	46bd      	mov	sp, r7
 800b8ca:	bd80      	pop	{r7, pc}

0800b8cc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 800b8cc:	b580      	push	{r7, lr}
 800b8ce:	b082      	sub	sp, #8
 800b8d0:	af00      	add	r7, sp, #0
 800b8d2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2205      	movs	r2, #5
 800b8d8:	f8c3 2294 	str.w	r2, [r3, #660]	@ 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800b8dc:	2300      	movs	r3, #0
 800b8de:	2200      	movs	r2, #0
 800b8e0:	2100      	movs	r1, #0
 800b8e2:	6878      	ldr	r0, [r7, #4]
 800b8e4:	f000 fc9e 	bl	800c224 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800b8e8:	2300      	movs	r3, #0
}
 800b8ea:	4618      	mov	r0, r3
 800b8ec:	3708      	adds	r7, #8
 800b8ee:	46bd      	mov	sp, r7
 800b8f0:	bd80      	pop	{r7, pc}
	...

0800b8f4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800b8f4:	b580      	push	{r7, lr}
 800b8f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800b8f8:	2200      	movs	r2, #0
 800b8fa:	4912      	ldr	r1, [pc, #72]	@ (800b944 <MX_USB_DEVICE_Init+0x50>)
 800b8fc:	4812      	ldr	r0, [pc, #72]	@ (800b948 <MX_USB_DEVICE_Init+0x54>)
 800b8fe:	f7fe fcd9 	bl	800a2b4 <USBD_Init>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d001      	beq.n	800b90c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800b908:	f7f8 f92a 	bl	8003b60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 800b90c:	490f      	ldr	r1, [pc, #60]	@ (800b94c <MX_USB_DEVICE_Init+0x58>)
 800b90e:	480e      	ldr	r0, [pc, #56]	@ (800b948 <MX_USB_DEVICE_Init+0x54>)
 800b910:	f7fe fd00 	bl	800a314 <USBD_RegisterClass>
 800b914:	4603      	mov	r3, r0
 800b916:	2b00      	cmp	r3, #0
 800b918:	d001      	beq.n	800b91e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800b91a:	f7f8 f921 	bl	8003b60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 800b91e:	490c      	ldr	r1, [pc, #48]	@ (800b950 <MX_USB_DEVICE_Init+0x5c>)
 800b920:	4809      	ldr	r0, [pc, #36]	@ (800b948 <MX_USB_DEVICE_Init+0x54>)
 800b922:	f7fe fbf7 	bl	800a114 <USBD_CDC_RegisterInterface>
 800b926:	4603      	mov	r3, r0
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d001      	beq.n	800b930 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 800b92c:	f7f8 f918 	bl	8003b60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800b930:	4805      	ldr	r0, [pc, #20]	@ (800b948 <MX_USB_DEVICE_Init+0x54>)
 800b932:	f7fe fd25 	bl	800a380 <USBD_Start>
 800b936:	4603      	mov	r3, r0
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d001      	beq.n	800b940 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 800b93c:	f7f8 f910 	bl	8003b60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800b940:	bf00      	nop
 800b942:	bd80      	pop	{r7, pc}
 800b944:	200000bc 	.word	0x200000bc
 800b948:	20000840 	.word	0x20000840
 800b94c:	20000028 	.word	0x20000028
 800b950:	200000a8 	.word	0x200000a8

0800b954 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 800b954:	b580      	push	{r7, lr}
 800b956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800b958:	2200      	movs	r2, #0
 800b95a:	4905      	ldr	r1, [pc, #20]	@ (800b970 <CDC_Init_FS+0x1c>)
 800b95c:	4805      	ldr	r0, [pc, #20]	@ (800b974 <CDC_Init_FS+0x20>)
 800b95e:	f7fe fbf3 	bl	800a148 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 800b962:	4905      	ldr	r1, [pc, #20]	@ (800b978 <CDC_Init_FS+0x24>)
 800b964:	4803      	ldr	r0, [pc, #12]	@ (800b974 <CDC_Init_FS+0x20>)
 800b966:	f7fe fc11 	bl	800a18c <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800b96a:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 800b96c:	4618      	mov	r0, r3
 800b96e:	bd80      	pop	{r7, pc}
 800b970:	2000131c 	.word	0x2000131c
 800b974:	20000840 	.word	0x20000840
 800b978:	20000b1c 	.word	0x20000b1c

0800b97c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 800b97c:	b480      	push	{r7}
 800b97e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 800b980:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 800b982:	4618      	mov	r0, r3
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 800b98c:	b480      	push	{r7}
 800b98e:	b083      	sub	sp, #12
 800b990:	af00      	add	r7, sp, #0
 800b992:	4603      	mov	r3, r0
 800b994:	6039      	str	r1, [r7, #0]
 800b996:	71fb      	strb	r3, [r7, #7]
 800b998:	4613      	mov	r3, r2
 800b99a:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 800b99c:	79fb      	ldrb	r3, [r7, #7]
 800b99e:	2b23      	cmp	r3, #35	@ 0x23
 800b9a0:	d84a      	bhi.n	800ba38 <CDC_Control_FS+0xac>
 800b9a2:	a201      	add	r2, pc, #4	@ (adr r2, 800b9a8 <CDC_Control_FS+0x1c>)
 800b9a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b9a8:	0800ba39 	.word	0x0800ba39
 800b9ac:	0800ba39 	.word	0x0800ba39
 800b9b0:	0800ba39 	.word	0x0800ba39
 800b9b4:	0800ba39 	.word	0x0800ba39
 800b9b8:	0800ba39 	.word	0x0800ba39
 800b9bc:	0800ba39 	.word	0x0800ba39
 800b9c0:	0800ba39 	.word	0x0800ba39
 800b9c4:	0800ba39 	.word	0x0800ba39
 800b9c8:	0800ba39 	.word	0x0800ba39
 800b9cc:	0800ba39 	.word	0x0800ba39
 800b9d0:	0800ba39 	.word	0x0800ba39
 800b9d4:	0800ba39 	.word	0x0800ba39
 800b9d8:	0800ba39 	.word	0x0800ba39
 800b9dc:	0800ba39 	.word	0x0800ba39
 800b9e0:	0800ba39 	.word	0x0800ba39
 800b9e4:	0800ba39 	.word	0x0800ba39
 800b9e8:	0800ba39 	.word	0x0800ba39
 800b9ec:	0800ba39 	.word	0x0800ba39
 800b9f0:	0800ba39 	.word	0x0800ba39
 800b9f4:	0800ba39 	.word	0x0800ba39
 800b9f8:	0800ba39 	.word	0x0800ba39
 800b9fc:	0800ba39 	.word	0x0800ba39
 800ba00:	0800ba39 	.word	0x0800ba39
 800ba04:	0800ba39 	.word	0x0800ba39
 800ba08:	0800ba39 	.word	0x0800ba39
 800ba0c:	0800ba39 	.word	0x0800ba39
 800ba10:	0800ba39 	.word	0x0800ba39
 800ba14:	0800ba39 	.word	0x0800ba39
 800ba18:	0800ba39 	.word	0x0800ba39
 800ba1c:	0800ba39 	.word	0x0800ba39
 800ba20:	0800ba39 	.word	0x0800ba39
 800ba24:	0800ba39 	.word	0x0800ba39
 800ba28:	0800ba39 	.word	0x0800ba39
 800ba2c:	0800ba39 	.word	0x0800ba39
 800ba30:	0800ba39 	.word	0x0800ba39
 800ba34:	0800ba39 	.word	0x0800ba39
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 800ba38:	bf00      	nop
  }

  return (USBD_OK);
 800ba3a:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	370c      	adds	r7, #12
 800ba40:	46bd      	mov	sp, r7
 800ba42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba46:	4770      	bx	lr

0800ba48 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 800ba48:	b580      	push	{r7, lr}
 800ba4a:	b082      	sub	sp, #8
 800ba4c:	af00      	add	r7, sp, #0
 800ba4e:	6078      	str	r0, [r7, #4]
 800ba50:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800ba52:	6879      	ldr	r1, [r7, #4]
 800ba54:	4805      	ldr	r0, [pc, #20]	@ (800ba6c <CDC_Receive_FS+0x24>)
 800ba56:	f7fe fb99 	bl	800a18c <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800ba5a:	4804      	ldr	r0, [pc, #16]	@ (800ba6c <CDC_Receive_FS+0x24>)
 800ba5c:	f7fe fbf4 	bl	800a248 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 800ba60:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 800ba62:	4618      	mov	r0, r3
 800ba64:	3708      	adds	r7, #8
 800ba66:	46bd      	mov	sp, r7
 800ba68:	bd80      	pop	{r7, pc}
 800ba6a:	bf00      	nop
 800ba6c:	20000840 	.word	0x20000840

0800ba70 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 800ba70:	b580      	push	{r7, lr}
 800ba72:	b084      	sub	sp, #16
 800ba74:	af00      	add	r7, sp, #0
 800ba76:	6078      	str	r0, [r7, #4]
 800ba78:	460b      	mov	r3, r1
 800ba7a:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 800ba7c:	2300      	movs	r3, #0
 800ba7e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 800ba80:	4b0d      	ldr	r3, [pc, #52]	@ (800bab8 <CDC_Transmit_FS+0x48>)
 800ba82:	f8d3 32bc 	ldr.w	r3, [r3, #700]	@ 0x2bc
 800ba86:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 800ba88:	68bb      	ldr	r3, [r7, #8]
 800ba8a:	f8d3 3214 	ldr.w	r3, [r3, #532]	@ 0x214
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d001      	beq.n	800ba96 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 800ba92:	2301      	movs	r3, #1
 800ba94:	e00b      	b.n	800baae <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 800ba96:	887b      	ldrh	r3, [r7, #2]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	6879      	ldr	r1, [r7, #4]
 800ba9c:	4806      	ldr	r0, [pc, #24]	@ (800bab8 <CDC_Transmit_FS+0x48>)
 800ba9e:	f7fe fb53 	bl	800a148 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800baa2:	4805      	ldr	r0, [pc, #20]	@ (800bab8 <CDC_Transmit_FS+0x48>)
 800baa4:	f7fe fb90 	bl	800a1c8 <USBD_CDC_TransmitPacket>
 800baa8:	4603      	mov	r3, r0
 800baaa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 800baac:	7bfb      	ldrb	r3, [r7, #15]
}
 800baae:	4618      	mov	r0, r3
 800bab0:	3710      	adds	r7, #16
 800bab2:	46bd      	mov	sp, r7
 800bab4:	bd80      	pop	{r7, pc}
 800bab6:	bf00      	nop
 800bab8:	20000840 	.word	0x20000840

0800babc <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 800babc:	b480      	push	{r7}
 800babe:	b087      	sub	sp, #28
 800bac0:	af00      	add	r7, sp, #0
 800bac2:	60f8      	str	r0, [r7, #12]
 800bac4:	60b9      	str	r1, [r7, #8]
 800bac6:	4613      	mov	r3, r2
 800bac8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 800baca:	2300      	movs	r3, #0
 800bacc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 800bace:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800bad2:	4618      	mov	r0, r3
 800bad4:	371c      	adds	r7, #28
 800bad6:	46bd      	mov	sp, r7
 800bad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800badc:	4770      	bx	lr
	...

0800bae0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bae0:	b480      	push	{r7}
 800bae2:	b083      	sub	sp, #12
 800bae4:	af00      	add	r7, sp, #0
 800bae6:	4603      	mov	r3, r0
 800bae8:	6039      	str	r1, [r7, #0]
 800baea:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800baec:	683b      	ldr	r3, [r7, #0]
 800baee:	2212      	movs	r2, #18
 800baf0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800baf2:	4b03      	ldr	r3, [pc, #12]	@ (800bb00 <USBD_FS_DeviceDescriptor+0x20>)
}
 800baf4:	4618      	mov	r0, r3
 800baf6:	370c      	adds	r7, #12
 800baf8:	46bd      	mov	sp, r7
 800bafa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bafe:	4770      	bx	lr
 800bb00:	200000d8 	.word	0x200000d8

0800bb04 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb04:	b480      	push	{r7}
 800bb06:	b083      	sub	sp, #12
 800bb08:	af00      	add	r7, sp, #0
 800bb0a:	4603      	mov	r3, r0
 800bb0c:	6039      	str	r1, [r7, #0]
 800bb0e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800bb10:	683b      	ldr	r3, [r7, #0]
 800bb12:	2204      	movs	r2, #4
 800bb14:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800bb16:	4b03      	ldr	r3, [pc, #12]	@ (800bb24 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 800bb18:	4618      	mov	r0, r3
 800bb1a:	370c      	adds	r7, #12
 800bb1c:	46bd      	mov	sp, r7
 800bb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb22:	4770      	bx	lr
 800bb24:	200000ec 	.word	0x200000ec

0800bb28 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b082      	sub	sp, #8
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	4603      	mov	r3, r0
 800bb30:	6039      	str	r1, [r7, #0]
 800bb32:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bb34:	79fb      	ldrb	r3, [r7, #7]
 800bb36:	2b00      	cmp	r3, #0
 800bb38:	d105      	bne.n	800bb46 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb3a:	683a      	ldr	r2, [r7, #0]
 800bb3c:	4907      	ldr	r1, [pc, #28]	@ (800bb5c <USBD_FS_ProductStrDescriptor+0x34>)
 800bb3e:	4808      	ldr	r0, [pc, #32]	@ (800bb60 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb40:	f7ff fde4 	bl	800b70c <USBD_GetString>
 800bb44:	e004      	b.n	800bb50 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800bb46:	683a      	ldr	r2, [r7, #0]
 800bb48:	4904      	ldr	r1, [pc, #16]	@ (800bb5c <USBD_FS_ProductStrDescriptor+0x34>)
 800bb4a:	4805      	ldr	r0, [pc, #20]	@ (800bb60 <USBD_FS_ProductStrDescriptor+0x38>)
 800bb4c:	f7ff fdde 	bl	800b70c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bb50:	4b02      	ldr	r3, [pc, #8]	@ (800bb5c <USBD_FS_ProductStrDescriptor+0x34>)
}
 800bb52:	4618      	mov	r0, r3
 800bb54:	3708      	adds	r7, #8
 800bb56:	46bd      	mov	sp, r7
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	20001b1c 	.word	0x20001b1c
 800bb60:	08011038 	.word	0x08011038

0800bb64 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb64:	b580      	push	{r7, lr}
 800bb66:	b082      	sub	sp, #8
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	4603      	mov	r3, r0
 800bb6c:	6039      	str	r1, [r7, #0]
 800bb6e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800bb70:	683a      	ldr	r2, [r7, #0]
 800bb72:	4904      	ldr	r1, [pc, #16]	@ (800bb84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800bb74:	4804      	ldr	r0, [pc, #16]	@ (800bb88 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800bb76:	f7ff fdc9 	bl	800b70c <USBD_GetString>
  return USBD_StrDesc;
 800bb7a:	4b02      	ldr	r3, [pc, #8]	@ (800bb84 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 800bb7c:	4618      	mov	r0, r3
 800bb7e:	3708      	adds	r7, #8
 800bb80:	46bd      	mov	sp, r7
 800bb82:	bd80      	pop	{r7, pc}
 800bb84:	20001b1c 	.word	0x20001b1c
 800bb88:	08011050 	.word	0x08011050

0800bb8c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bb8c:	b580      	push	{r7, lr}
 800bb8e:	b082      	sub	sp, #8
 800bb90:	af00      	add	r7, sp, #0
 800bb92:	4603      	mov	r3, r0
 800bb94:	6039      	str	r1, [r7, #0]
 800bb96:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800bb98:	683b      	ldr	r3, [r7, #0]
 800bb9a:	221a      	movs	r2, #26
 800bb9c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800bb9e:	f000 f843 	bl	800bc28 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800bba2:	4b02      	ldr	r3, [pc, #8]	@ (800bbac <USBD_FS_SerialStrDescriptor+0x20>)
}
 800bba4:	4618      	mov	r0, r3
 800bba6:	3708      	adds	r7, #8
 800bba8:	46bd      	mov	sp, r7
 800bbaa:	bd80      	pop	{r7, pc}
 800bbac:	200000f0 	.word	0x200000f0

0800bbb0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	6039      	str	r1, [r7, #0]
 800bbba:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800bbbc:	79fb      	ldrb	r3, [r7, #7]
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d105      	bne.n	800bbce <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbc2:	683a      	ldr	r2, [r7, #0]
 800bbc4:	4907      	ldr	r1, [pc, #28]	@ (800bbe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbc6:	4808      	ldr	r0, [pc, #32]	@ (800bbe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbc8:	f7ff fda0 	bl	800b70c <USBD_GetString>
 800bbcc:	e004      	b.n	800bbd8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800bbce:	683a      	ldr	r2, [r7, #0]
 800bbd0:	4904      	ldr	r1, [pc, #16]	@ (800bbe4 <USBD_FS_ConfigStrDescriptor+0x34>)
 800bbd2:	4805      	ldr	r0, [pc, #20]	@ (800bbe8 <USBD_FS_ConfigStrDescriptor+0x38>)
 800bbd4:	f7ff fd9a 	bl	800b70c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bbd8:	4b02      	ldr	r3, [pc, #8]	@ (800bbe4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800bbda:	4618      	mov	r0, r3
 800bbdc:	3708      	adds	r7, #8
 800bbde:	46bd      	mov	sp, r7
 800bbe0:	bd80      	pop	{r7, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20001b1c 	.word	0x20001b1c
 800bbe8:	08011064 	.word	0x08011064

0800bbec <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800bbec:	b580      	push	{r7, lr}
 800bbee:	b082      	sub	sp, #8
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	4603      	mov	r3, r0
 800bbf4:	6039      	str	r1, [r7, #0]
 800bbf6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800bbf8:	79fb      	ldrb	r3, [r7, #7]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d105      	bne.n	800bc0a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bbfe:	683a      	ldr	r2, [r7, #0]
 800bc00:	4907      	ldr	r1, [pc, #28]	@ (800bc20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc02:	4808      	ldr	r0, [pc, #32]	@ (800bc24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc04:	f7ff fd82 	bl	800b70c <USBD_GetString>
 800bc08:	e004      	b.n	800bc14 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800bc0a:	683a      	ldr	r2, [r7, #0]
 800bc0c:	4904      	ldr	r1, [pc, #16]	@ (800bc20 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800bc0e:	4805      	ldr	r0, [pc, #20]	@ (800bc24 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800bc10:	f7ff fd7c 	bl	800b70c <USBD_GetString>
  }
  return USBD_StrDesc;
 800bc14:	4b02      	ldr	r3, [pc, #8]	@ (800bc20 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800bc16:	4618      	mov	r0, r3
 800bc18:	3708      	adds	r7, #8
 800bc1a:	46bd      	mov	sp, r7
 800bc1c:	bd80      	pop	{r7, pc}
 800bc1e:	bf00      	nop
 800bc20:	20001b1c 	.word	0x20001b1c
 800bc24:	08011070 	.word	0x08011070

0800bc28 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 800bc28:	b580      	push	{r7, lr}
 800bc2a:	b084      	sub	sp, #16
 800bc2c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800bc2e:	4b0f      	ldr	r3, [pc, #60]	@ (800bc6c <Get_SerialNum+0x44>)
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800bc34:	4b0e      	ldr	r3, [pc, #56]	@ (800bc70 <Get_SerialNum+0x48>)
 800bc36:	681b      	ldr	r3, [r3, #0]
 800bc38:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800bc3a:	4b0e      	ldr	r3, [pc, #56]	@ (800bc74 <Get_SerialNum+0x4c>)
 800bc3c:	681b      	ldr	r3, [r3, #0]
 800bc3e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800bc40:	68fa      	ldr	r2, [r7, #12]
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	4413      	add	r3, r2
 800bc46:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2b00      	cmp	r3, #0
 800bc4c:	d009      	beq.n	800bc62 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800bc4e:	2208      	movs	r2, #8
 800bc50:	4909      	ldr	r1, [pc, #36]	@ (800bc78 <Get_SerialNum+0x50>)
 800bc52:	68f8      	ldr	r0, [r7, #12]
 800bc54:	f000 f814 	bl	800bc80 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 800bc58:	2204      	movs	r2, #4
 800bc5a:	4908      	ldr	r1, [pc, #32]	@ (800bc7c <Get_SerialNum+0x54>)
 800bc5c:	68b8      	ldr	r0, [r7, #8]
 800bc5e:	f000 f80f 	bl	800bc80 <IntToUnicode>
  }
}
 800bc62:	bf00      	nop
 800bc64:	3710      	adds	r7, #16
 800bc66:	46bd      	mov	sp, r7
 800bc68:	bd80      	pop	{r7, pc}
 800bc6a:	bf00      	nop
 800bc6c:	1fff7a10 	.word	0x1fff7a10
 800bc70:	1fff7a14 	.word	0x1fff7a14
 800bc74:	1fff7a18 	.word	0x1fff7a18
 800bc78:	200000f2 	.word	0x200000f2
 800bc7c:	20000102 	.word	0x20000102

0800bc80 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 800bc80:	b480      	push	{r7}
 800bc82:	b087      	sub	sp, #28
 800bc84:	af00      	add	r7, sp, #0
 800bc86:	60f8      	str	r0, [r7, #12]
 800bc88:	60b9      	str	r1, [r7, #8]
 800bc8a:	4613      	mov	r3, r2
 800bc8c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 800bc8e:	2300      	movs	r3, #0
 800bc90:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800bc92:	2300      	movs	r3, #0
 800bc94:	75fb      	strb	r3, [r7, #23]
 800bc96:	e027      	b.n	800bce8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 800bc98:	68fb      	ldr	r3, [r7, #12]
 800bc9a:	0f1b      	lsrs	r3, r3, #28
 800bc9c:	2b09      	cmp	r3, #9
 800bc9e:	d80b      	bhi.n	800bcb8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	0f1b      	lsrs	r3, r3, #28
 800bca4:	b2da      	uxtb	r2, r3
 800bca6:	7dfb      	ldrb	r3, [r7, #23]
 800bca8:	005b      	lsls	r3, r3, #1
 800bcaa:	4619      	mov	r1, r3
 800bcac:	68bb      	ldr	r3, [r7, #8]
 800bcae:	440b      	add	r3, r1
 800bcb0:	3230      	adds	r2, #48	@ 0x30
 800bcb2:	b2d2      	uxtb	r2, r2
 800bcb4:	701a      	strb	r2, [r3, #0]
 800bcb6:	e00a      	b.n	800bcce <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	0f1b      	lsrs	r3, r3, #28
 800bcbc:	b2da      	uxtb	r2, r3
 800bcbe:	7dfb      	ldrb	r3, [r7, #23]
 800bcc0:	005b      	lsls	r3, r3, #1
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	440b      	add	r3, r1
 800bcc8:	3237      	adds	r2, #55	@ 0x37
 800bcca:	b2d2      	uxtb	r2, r2
 800bccc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	011b      	lsls	r3, r3, #4
 800bcd2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800bcd4:	7dfb      	ldrb	r3, [r7, #23]
 800bcd6:	005b      	lsls	r3, r3, #1
 800bcd8:	3301      	adds	r3, #1
 800bcda:	68ba      	ldr	r2, [r7, #8]
 800bcdc:	4413      	add	r3, r2
 800bcde:	2200      	movs	r2, #0
 800bce0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800bce2:	7dfb      	ldrb	r3, [r7, #23]
 800bce4:	3301      	adds	r3, #1
 800bce6:	75fb      	strb	r3, [r7, #23]
 800bce8:	7dfa      	ldrb	r2, [r7, #23]
 800bcea:	79fb      	ldrb	r3, [r7, #7]
 800bcec:	429a      	cmp	r2, r3
 800bcee:	d3d3      	bcc.n	800bc98 <IntToUnicode+0x18>
  }
}
 800bcf0:	bf00      	nop
 800bcf2:	bf00      	nop
 800bcf4:	371c      	adds	r7, #28
 800bcf6:	46bd      	mov	sp, r7
 800bcf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcfc:	4770      	bx	lr
	...

0800bd00 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800bd00:	b580      	push	{r7, lr}
 800bd02:	b08a      	sub	sp, #40	@ 0x28
 800bd04:	af00      	add	r7, sp, #0
 800bd06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800bd08:	f107 0314 	add.w	r3, r7, #20
 800bd0c:	2200      	movs	r2, #0
 800bd0e:	601a      	str	r2, [r3, #0]
 800bd10:	605a      	str	r2, [r3, #4]
 800bd12:	609a      	str	r2, [r3, #8]
 800bd14:	60da      	str	r2, [r3, #12]
 800bd16:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	681b      	ldr	r3, [r3, #0]
 800bd1c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800bd20:	d13a      	bne.n	800bd98 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800bd22:	2300      	movs	r3, #0
 800bd24:	613b      	str	r3, [r7, #16]
 800bd26:	4b1e      	ldr	r3, [pc, #120]	@ (800bda0 <HAL_PCD_MspInit+0xa0>)
 800bd28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd2a:	4a1d      	ldr	r2, [pc, #116]	@ (800bda0 <HAL_PCD_MspInit+0xa0>)
 800bd2c:	f043 0301 	orr.w	r3, r3, #1
 800bd30:	6313      	str	r3, [r2, #48]	@ 0x30
 800bd32:	4b1b      	ldr	r3, [pc, #108]	@ (800bda0 <HAL_PCD_MspInit+0xa0>)
 800bd34:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bd36:	f003 0301 	and.w	r3, r3, #1
 800bd3a:	613b      	str	r3, [r7, #16]
 800bd3c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800bd3e:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 800bd42:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800bd44:	2302      	movs	r3, #2
 800bd46:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800bd48:	2300      	movs	r3, #0
 800bd4a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800bd4c:	2303      	movs	r3, #3
 800bd4e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800bd50:	230a      	movs	r3, #10
 800bd52:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800bd54:	f107 0314 	add.w	r3, r7, #20
 800bd58:	4619      	mov	r1, r3
 800bd5a:	4812      	ldr	r0, [pc, #72]	@ (800bda4 <HAL_PCD_MspInit+0xa4>)
 800bd5c:	f7f8 fc40 	bl	80045e0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800bd60:	4b0f      	ldr	r3, [pc, #60]	@ (800bda0 <HAL_PCD_MspInit+0xa0>)
 800bd62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800bd64:	4a0e      	ldr	r2, [pc, #56]	@ (800bda0 <HAL_PCD_MspInit+0xa0>)
 800bd66:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bd6a:	6353      	str	r3, [r2, #52]	@ 0x34
 800bd6c:	2300      	movs	r3, #0
 800bd6e:	60fb      	str	r3, [r7, #12]
 800bd70:	4b0b      	ldr	r3, [pc, #44]	@ (800bda0 <HAL_PCD_MspInit+0xa0>)
 800bd72:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd74:	4a0a      	ldr	r2, [pc, #40]	@ (800bda0 <HAL_PCD_MspInit+0xa0>)
 800bd76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800bd7a:	6453      	str	r3, [r2, #68]	@ 0x44
 800bd7c:	4b08      	ldr	r3, [pc, #32]	@ (800bda0 <HAL_PCD_MspInit+0xa0>)
 800bd7e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bd80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800bd84:	60fb      	str	r3, [r7, #12]
 800bd86:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800bd88:	2200      	movs	r2, #0
 800bd8a:	2100      	movs	r1, #0
 800bd8c:	2043      	movs	r0, #67	@ 0x43
 800bd8e:	f7f8 fb5e 	bl	800444e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800bd92:	2043      	movs	r0, #67	@ 0x43
 800bd94:	f7f8 fb77 	bl	8004486 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800bd98:	bf00      	nop
 800bd9a:	3728      	adds	r7, #40	@ 0x28
 800bd9c:	46bd      	mov	sp, r7
 800bd9e:	bd80      	pop	{r7, pc}
 800bda0:	40023800 	.word	0x40023800
 800bda4:	40020000 	.word	0x40020000

0800bda8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bda8:	b580      	push	{r7, lr}
 800bdaa:	b082      	sub	sp, #8
 800bdac:	af00      	add	r7, sp, #0
 800bdae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 800bdb0:	687b      	ldr	r3, [r7, #4]
 800bdb2:	f8d3 24e0 	ldr.w	r2, [r3, #1248]	@ 0x4e0
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	f203 439c 	addw	r3, r3, #1180	@ 0x49c
 800bdbc:	4619      	mov	r1, r3
 800bdbe:	4610      	mov	r0, r2
 800bdc0:	f7fe fb2b 	bl	800a41a <USBD_LL_SetupStage>
}
 800bdc4:	bf00      	nop
 800bdc6:	3708      	adds	r7, #8
 800bdc8:	46bd      	mov	sp, r7
 800bdca:	bd80      	pop	{r7, pc}

0800bdcc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bdcc:	b580      	push	{r7, lr}
 800bdce:	b082      	sub	sp, #8
 800bdd0:	af00      	add	r7, sp, #0
 800bdd2:	6078      	str	r0, [r7, #4]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 800bdd8:	687b      	ldr	r3, [r7, #4]
 800bdda:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800bdde:	78fa      	ldrb	r2, [r7, #3]
 800bde0:	6879      	ldr	r1, [r7, #4]
 800bde2:	4613      	mov	r3, r2
 800bde4:	00db      	lsls	r3, r3, #3
 800bde6:	4413      	add	r3, r2
 800bde8:	009b      	lsls	r3, r3, #2
 800bdea:	440b      	add	r3, r1
 800bdec:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 800bdf0:	681a      	ldr	r2, [r3, #0]
 800bdf2:	78fb      	ldrb	r3, [r7, #3]
 800bdf4:	4619      	mov	r1, r3
 800bdf6:	f7fe fb65 	bl	800a4c4 <USBD_LL_DataOutStage>
}
 800bdfa:	bf00      	nop
 800bdfc:	3708      	adds	r7, #8
 800bdfe:	46bd      	mov	sp, r7
 800be00:	bd80      	pop	{r7, pc}

0800be02 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be02:	b580      	push	{r7, lr}
 800be04:	b082      	sub	sp, #8
 800be06:	af00      	add	r7, sp, #0
 800be08:	6078      	str	r0, [r7, #4]
 800be0a:	460b      	mov	r3, r1
 800be0c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	f8d3 04e0 	ldr.w	r0, [r3, #1248]	@ 0x4e0
 800be14:	78fa      	ldrb	r2, [r7, #3]
 800be16:	6879      	ldr	r1, [r7, #4]
 800be18:	4613      	mov	r3, r2
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	4413      	add	r3, r2
 800be1e:	009b      	lsls	r3, r3, #2
 800be20:	440b      	add	r3, r1
 800be22:	3320      	adds	r3, #32
 800be24:	681a      	ldr	r2, [r3, #0]
 800be26:	78fb      	ldrb	r3, [r7, #3]
 800be28:	4619      	mov	r1, r3
 800be2a:	f7fe fc07 	bl	800a63c <USBD_LL_DataInStage>
}
 800be2e:	bf00      	nop
 800be30:	3708      	adds	r7, #8
 800be32:	46bd      	mov	sp, r7
 800be34:	bd80      	pop	{r7, pc}

0800be36 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be36:	b580      	push	{r7, lr}
 800be38:	b082      	sub	sp, #8
 800be3a:	af00      	add	r7, sp, #0
 800be3c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800be3e:	687b      	ldr	r3, [r7, #4]
 800be40:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be44:	4618      	mov	r0, r3
 800be46:	f7fe fd4b 	bl	800a8e0 <USBD_LL_SOF>
}
 800be4a:	bf00      	nop
 800be4c:	3708      	adds	r7, #8
 800be4e:	46bd      	mov	sp, r7
 800be50:	bd80      	pop	{r7, pc}

0800be52 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be52:	b580      	push	{r7, lr}
 800be54:	b084      	sub	sp, #16
 800be56:	af00      	add	r7, sp, #0
 800be58:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 800be5a:	2301      	movs	r3, #1
 800be5c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	79db      	ldrb	r3, [r3, #7]
 800be62:	2b02      	cmp	r3, #2
 800be64:	d001      	beq.n	800be6a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800be66:	f7f7 fe7b 	bl	8003b60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be70:	7bfa      	ldrb	r2, [r7, #15]
 800be72:	4611      	mov	r1, r2
 800be74:	4618      	mov	r0, r3
 800be76:	f7fe fcef 	bl	800a858 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be80:	4618      	mov	r0, r3
 800be82:	f7fe fc96 	bl	800a7b2 <USBD_LL_Reset>
}
 800be86:	bf00      	nop
 800be88:	3710      	adds	r7, #16
 800be8a:	46bd      	mov	sp, r7
 800be8c:	bd80      	pop	{r7, pc}
	...

0800be90 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800be90:	b580      	push	{r7, lr}
 800be92:	b082      	sub	sp, #8
 800be94:	af00      	add	r7, sp, #0
 800be96:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800be98:	687b      	ldr	r3, [r7, #4]
 800be9a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800be9e:	4618      	mov	r0, r3
 800bea0:	f7fe fcea 	bl	800a878 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	681b      	ldr	r3, [r3, #0]
 800bea8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800beac:	681b      	ldr	r3, [r3, #0]
 800beae:	687a      	ldr	r2, [r7, #4]
 800beb0:	6812      	ldr	r2, [r2, #0]
 800beb2:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 800beb6:	f043 0301 	orr.w	r3, r3, #1
 800beba:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	7adb      	ldrb	r3, [r3, #11]
 800bec0:	2b00      	cmp	r3, #0
 800bec2:	d005      	beq.n	800bed0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800bec4:	4b04      	ldr	r3, [pc, #16]	@ (800bed8 <HAL_PCD_SuspendCallback+0x48>)
 800bec6:	691b      	ldr	r3, [r3, #16]
 800bec8:	4a03      	ldr	r2, [pc, #12]	@ (800bed8 <HAL_PCD_SuspendCallback+0x48>)
 800beca:	f043 0306 	orr.w	r3, r3, #6
 800bece:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800bed0:	bf00      	nop
 800bed2:	3708      	adds	r7, #8
 800bed4:	46bd      	mov	sp, r7
 800bed6:	bd80      	pop	{r7, pc}
 800bed8:	e000ed00 	.word	0xe000ed00

0800bedc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bedc:	b580      	push	{r7, lr}
 800bede:	b082      	sub	sp, #8
 800bee0:	af00      	add	r7, sp, #0
 800bee2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800bee4:	687b      	ldr	r3, [r7, #4]
 800bee6:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800beea:	4618      	mov	r0, r3
 800beec:	f7fe fce0 	bl	800a8b0 <USBD_LL_Resume>
}
 800bef0:	bf00      	nop
 800bef2:	3708      	adds	r7, #8
 800bef4:	46bd      	mov	sp, r7
 800bef6:	bd80      	pop	{r7, pc}

0800bef8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b082      	sub	sp, #8
 800befc:	af00      	add	r7, sp, #0
 800befe:	6078      	str	r0, [r7, #4]
 800bf00:	460b      	mov	r3, r1
 800bf02:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf0a:	78fa      	ldrb	r2, [r7, #3]
 800bf0c:	4611      	mov	r1, r2
 800bf0e:	4618      	mov	r0, r3
 800bf10:	f7fe fd38 	bl	800a984 <USBD_LL_IsoOUTIncomplete>
}
 800bf14:	bf00      	nop
 800bf16:	3708      	adds	r7, #8
 800bf18:	46bd      	mov	sp, r7
 800bf1a:	bd80      	pop	{r7, pc}

0800bf1c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b082      	sub	sp, #8
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	6078      	str	r0, [r7, #4]
 800bf24:	460b      	mov	r3, r1
 800bf26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf2e:	78fa      	ldrb	r2, [r7, #3]
 800bf30:	4611      	mov	r1, r2
 800bf32:	4618      	mov	r0, r3
 800bf34:	f7fe fcf4 	bl	800a920 <USBD_LL_IsoINIncomplete>
}
 800bf38:	bf00      	nop
 800bf3a:	3708      	adds	r7, #8
 800bf3c:	46bd      	mov	sp, r7
 800bf3e:	bd80      	pop	{r7, pc}

0800bf40 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf40:	b580      	push	{r7, lr}
 800bf42:	b082      	sub	sp, #8
 800bf44:	af00      	add	r7, sp, #0
 800bf46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf4e:	4618      	mov	r0, r3
 800bf50:	f7fe fd4a 	bl	800a9e8 <USBD_LL_DevConnected>
}
 800bf54:	bf00      	nop
 800bf56:	3708      	adds	r7, #8
 800bf58:	46bd      	mov	sp, r7
 800bf5a:	bd80      	pop	{r7, pc}

0800bf5c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800bf5c:	b580      	push	{r7, lr}
 800bf5e:	b082      	sub	sp, #8
 800bf60:	af00      	add	r7, sp, #0
 800bf62:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	f8d3 34e0 	ldr.w	r3, [r3, #1248]	@ 0x4e0
 800bf6a:	4618      	mov	r0, r3
 800bf6c:	f7fe fd47 	bl	800a9fe <USBD_LL_DevDisconnected>
}
 800bf70:	bf00      	nop
 800bf72:	3708      	adds	r7, #8
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b082      	sub	sp, #8
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	781b      	ldrb	r3, [r3, #0]
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d13c      	bne.n	800c002 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 800bf88:	4a20      	ldr	r2, [pc, #128]	@ (800c00c <USBD_LL_Init+0x94>)
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	f8c2 34e0 	str.w	r3, [r2, #1248]	@ 0x4e0
  pdev->pData = &hpcd_USB_OTG_FS;
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	4a1e      	ldr	r2, [pc, #120]	@ (800c00c <USBD_LL_Init+0x94>)
 800bf94:	f8c3 22c8 	str.w	r2, [r3, #712]	@ 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800bf98:	4b1c      	ldr	r3, [pc, #112]	@ (800c00c <USBD_LL_Init+0x94>)
 800bf9a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800bf9e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 800bfa0:	4b1a      	ldr	r3, [pc, #104]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfa2:	2204      	movs	r2, #4
 800bfa4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800bfa6:	4b19      	ldr	r3, [pc, #100]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfa8:	2202      	movs	r2, #2
 800bfaa:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800bfac:	4b17      	ldr	r3, [pc, #92]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfae:	2200      	movs	r2, #0
 800bfb0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800bfb2:	4b16      	ldr	r3, [pc, #88]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfb4:	2202      	movs	r2, #2
 800bfb6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800bfb8:	4b14      	ldr	r3, [pc, #80]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfba:	2200      	movs	r2, #0
 800bfbc:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800bfbe:	4b13      	ldr	r3, [pc, #76]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfc0:	2200      	movs	r2, #0
 800bfc2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800bfc4:	4b11      	ldr	r3, [pc, #68]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfc6:	2200      	movs	r2, #0
 800bfc8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 800bfca:	4b10      	ldr	r3, [pc, #64]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfcc:	2200      	movs	r2, #0
 800bfce:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800bfd0:	4b0e      	ldr	r3, [pc, #56]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfd2:	2200      	movs	r2, #0
 800bfd4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800bfd6:	480d      	ldr	r0, [pc, #52]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfd8:	f7f8 fcb9 	bl	800494e <HAL_PCD_Init>
 800bfdc:	4603      	mov	r3, r0
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d001      	beq.n	800bfe6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800bfe2:	f7f7 fdbd 	bl	8003b60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800bfe6:	2180      	movs	r1, #128	@ 0x80
 800bfe8:	4808      	ldr	r0, [pc, #32]	@ (800c00c <USBD_LL_Init+0x94>)
 800bfea:	f7f9 fee6 	bl	8005dba <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800bfee:	2240      	movs	r2, #64	@ 0x40
 800bff0:	2100      	movs	r1, #0
 800bff2:	4806      	ldr	r0, [pc, #24]	@ (800c00c <USBD_LL_Init+0x94>)
 800bff4:	f7f9 fe9a 	bl	8005d2c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 800bff8:	2280      	movs	r2, #128	@ 0x80
 800bffa:	2101      	movs	r1, #1
 800bffc:	4803      	ldr	r0, [pc, #12]	@ (800c00c <USBD_LL_Init+0x94>)
 800bffe:	f7f9 fe95 	bl	8005d2c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800c002:	2300      	movs	r3, #0
}
 800c004:	4618      	mov	r0, r3
 800c006:	3708      	adds	r7, #8
 800c008:	46bd      	mov	sp, r7
 800c00a:	bd80      	pop	{r7, pc}
 800c00c:	20001d1c 	.word	0x20001d1c

0800c010 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c018:	2300      	movs	r3, #0
 800c01a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c01c:	2300      	movs	r3, #0
 800c01e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 800c020:	687b      	ldr	r3, [r7, #4]
 800c022:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c026:	4618      	mov	r0, r3
 800c028:	f7f8 fda0 	bl	8004b6c <HAL_PCD_Start>
 800c02c:	4603      	mov	r3, r0
 800c02e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c030:	7bfb      	ldrb	r3, [r7, #15]
 800c032:	4618      	mov	r0, r3
 800c034:	f000 f942 	bl	800c2bc <USBD_Get_USB_Status>
 800c038:	4603      	mov	r3, r0
 800c03a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c03c:	7bbb      	ldrb	r3, [r7, #14]
}
 800c03e:	4618      	mov	r0, r3
 800c040:	3710      	adds	r7, #16
 800c042:	46bd      	mov	sp, r7
 800c044:	bd80      	pop	{r7, pc}

0800c046 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 800c046:	b580      	push	{r7, lr}
 800c048:	b084      	sub	sp, #16
 800c04a:	af00      	add	r7, sp, #0
 800c04c:	6078      	str	r0, [r7, #4]
 800c04e:	4608      	mov	r0, r1
 800c050:	4611      	mov	r1, r2
 800c052:	461a      	mov	r2, r3
 800c054:	4603      	mov	r3, r0
 800c056:	70fb      	strb	r3, [r7, #3]
 800c058:	460b      	mov	r3, r1
 800c05a:	70bb      	strb	r3, [r7, #2]
 800c05c:	4613      	mov	r3, r2
 800c05e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c060:	2300      	movs	r3, #0
 800c062:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c064:	2300      	movs	r3, #0
 800c066:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c06e:	78bb      	ldrb	r3, [r7, #2]
 800c070:	883a      	ldrh	r2, [r7, #0]
 800c072:	78f9      	ldrb	r1, [r7, #3]
 800c074:	f7f9 fa74 	bl	8005560 <HAL_PCD_EP_Open>
 800c078:	4603      	mov	r3, r0
 800c07a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c07c:	7bfb      	ldrb	r3, [r7, #15]
 800c07e:	4618      	mov	r0, r3
 800c080:	f000 f91c 	bl	800c2bc <USBD_Get_USB_Status>
 800c084:	4603      	mov	r3, r0
 800c086:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c088:	7bbb      	ldrb	r3, [r7, #14]
}
 800c08a:	4618      	mov	r0, r3
 800c08c:	3710      	adds	r7, #16
 800c08e:	46bd      	mov	sp, r7
 800c090:	bd80      	pop	{r7, pc}

0800c092 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c092:	b580      	push	{r7, lr}
 800c094:	b084      	sub	sp, #16
 800c096:	af00      	add	r7, sp, #0
 800c098:	6078      	str	r0, [r7, #4]
 800c09a:	460b      	mov	r3, r1
 800c09c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c09e:	2300      	movs	r3, #0
 800c0a0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0a2:	2300      	movs	r3, #0
 800c0a4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0ac:	78fa      	ldrb	r2, [r7, #3]
 800c0ae:	4611      	mov	r1, r2
 800c0b0:	4618      	mov	r0, r3
 800c0b2:	f7f9 fabf 	bl	8005634 <HAL_PCD_EP_Close>
 800c0b6:	4603      	mov	r3, r0
 800c0b8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0ba:	7bfb      	ldrb	r3, [r7, #15]
 800c0bc:	4618      	mov	r0, r3
 800c0be:	f000 f8fd 	bl	800c2bc <USBD_Get_USB_Status>
 800c0c2:	4603      	mov	r3, r0
 800c0c4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c0c6:	7bbb      	ldrb	r3, [r7, #14]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3710      	adds	r7, #16
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}

0800c0d0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c0d0:	b580      	push	{r7, lr}
 800c0d2:	b084      	sub	sp, #16
 800c0d4:	af00      	add	r7, sp, #0
 800c0d6:	6078      	str	r0, [r7, #4]
 800c0d8:	460b      	mov	r3, r1
 800c0da:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c0dc:	2300      	movs	r3, #0
 800c0de:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c0e0:	2300      	movs	r3, #0
 800c0e2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c0ea:	78fa      	ldrb	r2, [r7, #3]
 800c0ec:	4611      	mov	r1, r2
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	f7f9 fb77 	bl	80057e2 <HAL_PCD_EP_SetStall>
 800c0f4:	4603      	mov	r3, r0
 800c0f6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c0f8:	7bfb      	ldrb	r3, [r7, #15]
 800c0fa:	4618      	mov	r0, r3
 800c0fc:	f000 f8de 	bl	800c2bc <USBD_Get_USB_Status>
 800c100:	4603      	mov	r3, r0
 800c102:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c104:	7bbb      	ldrb	r3, [r7, #14]
}
 800c106:	4618      	mov	r0, r3
 800c108:	3710      	adds	r7, #16
 800c10a:	46bd      	mov	sp, r7
 800c10c:	bd80      	pop	{r7, pc}

0800c10e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c10e:	b580      	push	{r7, lr}
 800c110:	b084      	sub	sp, #16
 800c112:	af00      	add	r7, sp, #0
 800c114:	6078      	str	r0, [r7, #4]
 800c116:	460b      	mov	r3, r1
 800c118:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c11a:	2300      	movs	r3, #0
 800c11c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c11e:	2300      	movs	r3, #0
 800c120:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800c122:	687b      	ldr	r3, [r7, #4]
 800c124:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c128:	78fa      	ldrb	r2, [r7, #3]
 800c12a:	4611      	mov	r1, r2
 800c12c:	4618      	mov	r0, r3
 800c12e:	f7f9 fbbb 	bl	80058a8 <HAL_PCD_EP_ClrStall>
 800c132:	4603      	mov	r3, r0
 800c134:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c136:	7bfb      	ldrb	r3, [r7, #15]
 800c138:	4618      	mov	r0, r3
 800c13a:	f000 f8bf 	bl	800c2bc <USBD_Get_USB_Status>
 800c13e:	4603      	mov	r3, r0
 800c140:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c142:	7bbb      	ldrb	r3, [r7, #14]
}
 800c144:	4618      	mov	r0, r3
 800c146:	3710      	adds	r7, #16
 800c148:	46bd      	mov	sp, r7
 800c14a:	bd80      	pop	{r7, pc}

0800c14c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c14c:	b480      	push	{r7}
 800c14e:	b085      	sub	sp, #20
 800c150:	af00      	add	r7, sp, #0
 800c152:	6078      	str	r0, [r7, #4]
 800c154:	460b      	mov	r3, r1
 800c156:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c15e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 800c160:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800c164:	2b00      	cmp	r3, #0
 800c166:	da0b      	bge.n	800c180 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 800c168:	78fb      	ldrb	r3, [r7, #3]
 800c16a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c16e:	68f9      	ldr	r1, [r7, #12]
 800c170:	4613      	mov	r3, r2
 800c172:	00db      	lsls	r3, r3, #3
 800c174:	4413      	add	r3, r2
 800c176:	009b      	lsls	r3, r3, #2
 800c178:	440b      	add	r3, r1
 800c17a:	3316      	adds	r3, #22
 800c17c:	781b      	ldrb	r3, [r3, #0]
 800c17e:	e00b      	b.n	800c198 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 800c180:	78fb      	ldrb	r3, [r7, #3]
 800c182:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c186:	68f9      	ldr	r1, [r7, #12]
 800c188:	4613      	mov	r3, r2
 800c18a:	00db      	lsls	r3, r3, #3
 800c18c:	4413      	add	r3, r2
 800c18e:	009b      	lsls	r3, r3, #2
 800c190:	440b      	add	r3, r1
 800c192:	f203 2356 	addw	r3, r3, #598	@ 0x256
 800c196:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c198:	4618      	mov	r0, r3
 800c19a:	3714      	adds	r7, #20
 800c19c:	46bd      	mov	sp, r7
 800c19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1a2:	4770      	bx	lr

0800c1a4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b084      	sub	sp, #16
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1b0:	2300      	movs	r3, #0
 800c1b2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1b4:	2300      	movs	r3, #0
 800c1b6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 800c1b8:	687b      	ldr	r3, [r7, #4]
 800c1ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c1be:	78fa      	ldrb	r2, [r7, #3]
 800c1c0:	4611      	mov	r1, r2
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	f7f9 f9a8 	bl	8005518 <HAL_PCD_SetAddress>
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c1cc:	7bfb      	ldrb	r3, [r7, #15]
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	f000 f874 	bl	800c2bc <USBD_Get_USB_Status>
 800c1d4:	4603      	mov	r3, r0
 800c1d6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800c1d8:	7bbb      	ldrb	r3, [r7, #14]
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	3710      	adds	r7, #16
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bd80      	pop	{r7, pc}

0800c1e2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c1e2:	b580      	push	{r7, lr}
 800c1e4:	b086      	sub	sp, #24
 800c1e6:	af00      	add	r7, sp, #0
 800c1e8:	60f8      	str	r0, [r7, #12]
 800c1ea:	607a      	str	r2, [r7, #4]
 800c1ec:	603b      	str	r3, [r7, #0]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c1f2:	2300      	movs	r3, #0
 800c1f4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c1f6:	2300      	movs	r3, #0
 800c1f8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c200:	7af9      	ldrb	r1, [r7, #11]
 800c202:	683b      	ldr	r3, [r7, #0]
 800c204:	687a      	ldr	r2, [r7, #4]
 800c206:	f7f9 fab2 	bl	800576e <HAL_PCD_EP_Transmit>
 800c20a:	4603      	mov	r3, r0
 800c20c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c20e:	7dfb      	ldrb	r3, [r7, #23]
 800c210:	4618      	mov	r0, r3
 800c212:	f000 f853 	bl	800c2bc <USBD_Get_USB_Status>
 800c216:	4603      	mov	r3, r0
 800c218:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c21a:	7dbb      	ldrb	r3, [r7, #22]
}
 800c21c:	4618      	mov	r0, r3
 800c21e:	3718      	adds	r7, #24
 800c220:	46bd      	mov	sp, r7
 800c222:	bd80      	pop	{r7, pc}

0800c224 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800c224:	b580      	push	{r7, lr}
 800c226:	b086      	sub	sp, #24
 800c228:	af00      	add	r7, sp, #0
 800c22a:	60f8      	str	r0, [r7, #12]
 800c22c:	607a      	str	r2, [r7, #4]
 800c22e:	603b      	str	r3, [r7, #0]
 800c230:	460b      	mov	r3, r1
 800c232:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800c234:	2300      	movs	r3, #0
 800c236:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c238:	2300      	movs	r3, #0
 800c23a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	@ 0x2c8
 800c242:	7af9      	ldrb	r1, [r7, #11]
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	687a      	ldr	r2, [r7, #4]
 800c248:	f7f9 fa3e 	bl	80056c8 <HAL_PCD_EP_Receive>
 800c24c:	4603      	mov	r3, r0
 800c24e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800c250:	7dfb      	ldrb	r3, [r7, #23]
 800c252:	4618      	mov	r0, r3
 800c254:	f000 f832 	bl	800c2bc <USBD_Get_USB_Status>
 800c258:	4603      	mov	r3, r0
 800c25a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800c25c:	7dbb      	ldrb	r3, [r7, #22]
}
 800c25e:	4618      	mov	r0, r3
 800c260:	3718      	adds	r7, #24
 800c262:	46bd      	mov	sp, r7
 800c264:	bd80      	pop	{r7, pc}

0800c266 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800c266:	b580      	push	{r7, lr}
 800c268:	b082      	sub	sp, #8
 800c26a:	af00      	add	r7, sp, #0
 800c26c:	6078      	str	r0, [r7, #4]
 800c26e:	460b      	mov	r3, r1
 800c270:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	f8d3 32c8 	ldr.w	r3, [r3, #712]	@ 0x2c8
 800c278:	78fa      	ldrb	r2, [r7, #3]
 800c27a:	4611      	mov	r1, r2
 800c27c:	4618      	mov	r0, r3
 800c27e:	f7f9 fa5e 	bl	800573e <HAL_PCD_EP_GetRxCount>
 800c282:	4603      	mov	r3, r0
}
 800c284:	4618      	mov	r0, r3
 800c286:	3708      	adds	r7, #8
 800c288:	46bd      	mov	sp, r7
 800c28a:	bd80      	pop	{r7, pc}

0800c28c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800c28c:	b480      	push	{r7}
 800c28e:	b083      	sub	sp, #12
 800c290:	af00      	add	r7, sp, #0
 800c292:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 800c294:	4b03      	ldr	r3, [pc, #12]	@ (800c2a4 <USBD_static_malloc+0x18>)
}
 800c296:	4618      	mov	r0, r3
 800c298:	370c      	adds	r7, #12
 800c29a:	46bd      	mov	sp, r7
 800c29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2a0:	4770      	bx	lr
 800c2a2:	bf00      	nop
 800c2a4:	20002200 	.word	0x20002200

0800c2a8 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800c2a8:	b480      	push	{r7}
 800c2aa:	b083      	sub	sp, #12
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	6078      	str	r0, [r7, #4]

}
 800c2b0:	bf00      	nop
 800c2b2:	370c      	adds	r7, #12
 800c2b4:	46bd      	mov	sp, r7
 800c2b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c2ba:	4770      	bx	lr

0800c2bc <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800c2bc:	b480      	push	{r7}
 800c2be:	b085      	sub	sp, #20
 800c2c0:	af00      	add	r7, sp, #0
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800c2c6:	2300      	movs	r3, #0
 800c2c8:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800c2ca:	79fb      	ldrb	r3, [r7, #7]
 800c2cc:	2b03      	cmp	r3, #3
 800c2ce:	d817      	bhi.n	800c300 <USBD_Get_USB_Status+0x44>
 800c2d0:	a201      	add	r2, pc, #4	@ (adr r2, 800c2d8 <USBD_Get_USB_Status+0x1c>)
 800c2d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2d6:	bf00      	nop
 800c2d8:	0800c2e9 	.word	0x0800c2e9
 800c2dc:	0800c2ef 	.word	0x0800c2ef
 800c2e0:	0800c2f5 	.word	0x0800c2f5
 800c2e4:	0800c2fb 	.word	0x0800c2fb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800c2e8:	2300      	movs	r3, #0
 800c2ea:	73fb      	strb	r3, [r7, #15]
    break;
 800c2ec:	e00b      	b.n	800c306 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800c2ee:	2303      	movs	r3, #3
 800c2f0:	73fb      	strb	r3, [r7, #15]
    break;
 800c2f2:	e008      	b.n	800c306 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800c2f4:	2301      	movs	r3, #1
 800c2f6:	73fb      	strb	r3, [r7, #15]
    break;
 800c2f8:	e005      	b.n	800c306 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800c2fa:	2303      	movs	r3, #3
 800c2fc:	73fb      	strb	r3, [r7, #15]
    break;
 800c2fe:	e002      	b.n	800c306 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800c300:	2303      	movs	r3, #3
 800c302:	73fb      	strb	r3, [r7, #15]
    break;
 800c304:	bf00      	nop
  }
  return usb_status;
 800c306:	7bfb      	ldrb	r3, [r7, #15]
}
 800c308:	4618      	mov	r0, r3
 800c30a:	3714      	adds	r7, #20
 800c30c:	46bd      	mov	sp, r7
 800c30e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c312:	4770      	bx	lr

0800c314 <rand>:
 800c314:	4b16      	ldr	r3, [pc, #88]	@ (800c370 <rand+0x5c>)
 800c316:	b510      	push	{r4, lr}
 800c318:	681c      	ldr	r4, [r3, #0]
 800c31a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800c31c:	b9b3      	cbnz	r3, 800c34c <rand+0x38>
 800c31e:	2018      	movs	r0, #24
 800c320:	f001 ff00 	bl	800e124 <malloc>
 800c324:	4602      	mov	r2, r0
 800c326:	6320      	str	r0, [r4, #48]	@ 0x30
 800c328:	b920      	cbnz	r0, 800c334 <rand+0x20>
 800c32a:	4b12      	ldr	r3, [pc, #72]	@ (800c374 <rand+0x60>)
 800c32c:	4812      	ldr	r0, [pc, #72]	@ (800c378 <rand+0x64>)
 800c32e:	2152      	movs	r1, #82	@ 0x52
 800c330:	f001 f836 	bl	800d3a0 <__assert_func>
 800c334:	4911      	ldr	r1, [pc, #68]	@ (800c37c <rand+0x68>)
 800c336:	4b12      	ldr	r3, [pc, #72]	@ (800c380 <rand+0x6c>)
 800c338:	e9c0 1300 	strd	r1, r3, [r0]
 800c33c:	4b11      	ldr	r3, [pc, #68]	@ (800c384 <rand+0x70>)
 800c33e:	6083      	str	r3, [r0, #8]
 800c340:	230b      	movs	r3, #11
 800c342:	8183      	strh	r3, [r0, #12]
 800c344:	2100      	movs	r1, #0
 800c346:	2001      	movs	r0, #1
 800c348:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800c34c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800c34e:	480e      	ldr	r0, [pc, #56]	@ (800c388 <rand+0x74>)
 800c350:	690b      	ldr	r3, [r1, #16]
 800c352:	694c      	ldr	r4, [r1, #20]
 800c354:	4a0d      	ldr	r2, [pc, #52]	@ (800c38c <rand+0x78>)
 800c356:	4358      	muls	r0, r3
 800c358:	fb02 0004 	mla	r0, r2, r4, r0
 800c35c:	fba3 3202 	umull	r3, r2, r3, r2
 800c360:	3301      	adds	r3, #1
 800c362:	eb40 0002 	adc.w	r0, r0, r2
 800c366:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800c36a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800c36e:	bd10      	pop	{r4, pc}
 800c370:	20000284 	.word	0x20000284
 800c374:	08011098 	.word	0x08011098
 800c378:	080110af 	.word	0x080110af
 800c37c:	abcd330e 	.word	0xabcd330e
 800c380:	e66d1234 	.word	0xe66d1234
 800c384:	0005deec 	.word	0x0005deec
 800c388:	5851f42d 	.word	0x5851f42d
 800c38c:	4c957f2d 	.word	0x4c957f2d

0800c390 <__cvt>:
 800c390:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c394:	ec57 6b10 	vmov	r6, r7, d0
 800c398:	2f00      	cmp	r7, #0
 800c39a:	460c      	mov	r4, r1
 800c39c:	4619      	mov	r1, r3
 800c39e:	463b      	mov	r3, r7
 800c3a0:	bfbb      	ittet	lt
 800c3a2:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800c3a6:	461f      	movlt	r7, r3
 800c3a8:	2300      	movge	r3, #0
 800c3aa:	232d      	movlt	r3, #45	@ 0x2d
 800c3ac:	700b      	strb	r3, [r1, #0]
 800c3ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800c3b0:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800c3b4:	4691      	mov	r9, r2
 800c3b6:	f023 0820 	bic.w	r8, r3, #32
 800c3ba:	bfbc      	itt	lt
 800c3bc:	4632      	movlt	r2, r6
 800c3be:	4616      	movlt	r6, r2
 800c3c0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c3c4:	d005      	beq.n	800c3d2 <__cvt+0x42>
 800c3c6:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800c3ca:	d100      	bne.n	800c3ce <__cvt+0x3e>
 800c3cc:	3401      	adds	r4, #1
 800c3ce:	2102      	movs	r1, #2
 800c3d0:	e000      	b.n	800c3d4 <__cvt+0x44>
 800c3d2:	2103      	movs	r1, #3
 800c3d4:	ab03      	add	r3, sp, #12
 800c3d6:	9301      	str	r3, [sp, #4]
 800c3d8:	ab02      	add	r3, sp, #8
 800c3da:	9300      	str	r3, [sp, #0]
 800c3dc:	ec47 6b10 	vmov	d0, r6, r7
 800c3e0:	4653      	mov	r3, sl
 800c3e2:	4622      	mov	r2, r4
 800c3e4:	f001 f884 	bl	800d4f0 <_dtoa_r>
 800c3e8:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800c3ec:	4605      	mov	r5, r0
 800c3ee:	d119      	bne.n	800c424 <__cvt+0x94>
 800c3f0:	f019 0f01 	tst.w	r9, #1
 800c3f4:	d00e      	beq.n	800c414 <__cvt+0x84>
 800c3f6:	eb00 0904 	add.w	r9, r0, r4
 800c3fa:	2200      	movs	r2, #0
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	4630      	mov	r0, r6
 800c400:	4639      	mov	r1, r7
 800c402:	f7f4 fb69 	bl	8000ad8 <__aeabi_dcmpeq>
 800c406:	b108      	cbz	r0, 800c40c <__cvt+0x7c>
 800c408:	f8cd 900c 	str.w	r9, [sp, #12]
 800c40c:	2230      	movs	r2, #48	@ 0x30
 800c40e:	9b03      	ldr	r3, [sp, #12]
 800c410:	454b      	cmp	r3, r9
 800c412:	d31e      	bcc.n	800c452 <__cvt+0xc2>
 800c414:	9b03      	ldr	r3, [sp, #12]
 800c416:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c418:	1b5b      	subs	r3, r3, r5
 800c41a:	4628      	mov	r0, r5
 800c41c:	6013      	str	r3, [r2, #0]
 800c41e:	b004      	add	sp, #16
 800c420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c424:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800c428:	eb00 0904 	add.w	r9, r0, r4
 800c42c:	d1e5      	bne.n	800c3fa <__cvt+0x6a>
 800c42e:	7803      	ldrb	r3, [r0, #0]
 800c430:	2b30      	cmp	r3, #48	@ 0x30
 800c432:	d10a      	bne.n	800c44a <__cvt+0xba>
 800c434:	2200      	movs	r2, #0
 800c436:	2300      	movs	r3, #0
 800c438:	4630      	mov	r0, r6
 800c43a:	4639      	mov	r1, r7
 800c43c:	f7f4 fb4c 	bl	8000ad8 <__aeabi_dcmpeq>
 800c440:	b918      	cbnz	r0, 800c44a <__cvt+0xba>
 800c442:	f1c4 0401 	rsb	r4, r4, #1
 800c446:	f8ca 4000 	str.w	r4, [sl]
 800c44a:	f8da 3000 	ldr.w	r3, [sl]
 800c44e:	4499      	add	r9, r3
 800c450:	e7d3      	b.n	800c3fa <__cvt+0x6a>
 800c452:	1c59      	adds	r1, r3, #1
 800c454:	9103      	str	r1, [sp, #12]
 800c456:	701a      	strb	r2, [r3, #0]
 800c458:	e7d9      	b.n	800c40e <__cvt+0x7e>

0800c45a <__exponent>:
 800c45a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c45c:	2900      	cmp	r1, #0
 800c45e:	bfba      	itte	lt
 800c460:	4249      	neglt	r1, r1
 800c462:	232d      	movlt	r3, #45	@ 0x2d
 800c464:	232b      	movge	r3, #43	@ 0x2b
 800c466:	2909      	cmp	r1, #9
 800c468:	7002      	strb	r2, [r0, #0]
 800c46a:	7043      	strb	r3, [r0, #1]
 800c46c:	dd29      	ble.n	800c4c2 <__exponent+0x68>
 800c46e:	f10d 0307 	add.w	r3, sp, #7
 800c472:	461d      	mov	r5, r3
 800c474:	270a      	movs	r7, #10
 800c476:	461a      	mov	r2, r3
 800c478:	fbb1 f6f7 	udiv	r6, r1, r7
 800c47c:	fb07 1416 	mls	r4, r7, r6, r1
 800c480:	3430      	adds	r4, #48	@ 0x30
 800c482:	f802 4c01 	strb.w	r4, [r2, #-1]
 800c486:	460c      	mov	r4, r1
 800c488:	2c63      	cmp	r4, #99	@ 0x63
 800c48a:	f103 33ff 	add.w	r3, r3, #4294967295
 800c48e:	4631      	mov	r1, r6
 800c490:	dcf1      	bgt.n	800c476 <__exponent+0x1c>
 800c492:	3130      	adds	r1, #48	@ 0x30
 800c494:	1e94      	subs	r4, r2, #2
 800c496:	f803 1c01 	strb.w	r1, [r3, #-1]
 800c49a:	1c41      	adds	r1, r0, #1
 800c49c:	4623      	mov	r3, r4
 800c49e:	42ab      	cmp	r3, r5
 800c4a0:	d30a      	bcc.n	800c4b8 <__exponent+0x5e>
 800c4a2:	f10d 0309 	add.w	r3, sp, #9
 800c4a6:	1a9b      	subs	r3, r3, r2
 800c4a8:	42ac      	cmp	r4, r5
 800c4aa:	bf88      	it	hi
 800c4ac:	2300      	movhi	r3, #0
 800c4ae:	3302      	adds	r3, #2
 800c4b0:	4403      	add	r3, r0
 800c4b2:	1a18      	subs	r0, r3, r0
 800c4b4:	b003      	add	sp, #12
 800c4b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c4b8:	f813 6b01 	ldrb.w	r6, [r3], #1
 800c4bc:	f801 6f01 	strb.w	r6, [r1, #1]!
 800c4c0:	e7ed      	b.n	800c49e <__exponent+0x44>
 800c4c2:	2330      	movs	r3, #48	@ 0x30
 800c4c4:	3130      	adds	r1, #48	@ 0x30
 800c4c6:	7083      	strb	r3, [r0, #2]
 800c4c8:	70c1      	strb	r1, [r0, #3]
 800c4ca:	1d03      	adds	r3, r0, #4
 800c4cc:	e7f1      	b.n	800c4b2 <__exponent+0x58>
	...

0800c4d0 <_printf_float>:
 800c4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4d4:	b08d      	sub	sp, #52	@ 0x34
 800c4d6:	460c      	mov	r4, r1
 800c4d8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800c4dc:	4616      	mov	r6, r2
 800c4de:	461f      	mov	r7, r3
 800c4e0:	4605      	mov	r5, r0
 800c4e2:	f000 fecf 	bl	800d284 <_localeconv_r>
 800c4e6:	6803      	ldr	r3, [r0, #0]
 800c4e8:	9304      	str	r3, [sp, #16]
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	f7f3 fec8 	bl	8000280 <strlen>
 800c4f0:	2300      	movs	r3, #0
 800c4f2:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4f4:	f8d8 3000 	ldr.w	r3, [r8]
 800c4f8:	9005      	str	r0, [sp, #20]
 800c4fa:	3307      	adds	r3, #7
 800c4fc:	f023 0307 	bic.w	r3, r3, #7
 800c500:	f103 0208 	add.w	r2, r3, #8
 800c504:	f894 a018 	ldrb.w	sl, [r4, #24]
 800c508:	f8d4 b000 	ldr.w	fp, [r4]
 800c50c:	f8c8 2000 	str.w	r2, [r8]
 800c510:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c514:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800c518:	9307      	str	r3, [sp, #28]
 800c51a:	f8cd 8018 	str.w	r8, [sp, #24]
 800c51e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800c522:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c526:	4b9c      	ldr	r3, [pc, #624]	@ (800c798 <_printf_float+0x2c8>)
 800c528:	f04f 32ff 	mov.w	r2, #4294967295
 800c52c:	f7f4 fb06 	bl	8000b3c <__aeabi_dcmpun>
 800c530:	bb70      	cbnz	r0, 800c590 <_printf_float+0xc0>
 800c532:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c536:	4b98      	ldr	r3, [pc, #608]	@ (800c798 <_printf_float+0x2c8>)
 800c538:	f04f 32ff 	mov.w	r2, #4294967295
 800c53c:	f7f4 fae0 	bl	8000b00 <__aeabi_dcmple>
 800c540:	bb30      	cbnz	r0, 800c590 <_printf_float+0xc0>
 800c542:	2200      	movs	r2, #0
 800c544:	2300      	movs	r3, #0
 800c546:	4640      	mov	r0, r8
 800c548:	4649      	mov	r1, r9
 800c54a:	f7f4 facf 	bl	8000aec <__aeabi_dcmplt>
 800c54e:	b110      	cbz	r0, 800c556 <_printf_float+0x86>
 800c550:	232d      	movs	r3, #45	@ 0x2d
 800c552:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c556:	4a91      	ldr	r2, [pc, #580]	@ (800c79c <_printf_float+0x2cc>)
 800c558:	4b91      	ldr	r3, [pc, #580]	@ (800c7a0 <_printf_float+0x2d0>)
 800c55a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800c55e:	bf8c      	ite	hi
 800c560:	4690      	movhi	r8, r2
 800c562:	4698      	movls	r8, r3
 800c564:	2303      	movs	r3, #3
 800c566:	6123      	str	r3, [r4, #16]
 800c568:	f02b 0304 	bic.w	r3, fp, #4
 800c56c:	6023      	str	r3, [r4, #0]
 800c56e:	f04f 0900 	mov.w	r9, #0
 800c572:	9700      	str	r7, [sp, #0]
 800c574:	4633      	mov	r3, r6
 800c576:	aa0b      	add	r2, sp, #44	@ 0x2c
 800c578:	4621      	mov	r1, r4
 800c57a:	4628      	mov	r0, r5
 800c57c:	f000 f9d2 	bl	800c924 <_printf_common>
 800c580:	3001      	adds	r0, #1
 800c582:	f040 808d 	bne.w	800c6a0 <_printf_float+0x1d0>
 800c586:	f04f 30ff 	mov.w	r0, #4294967295
 800c58a:	b00d      	add	sp, #52	@ 0x34
 800c58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c590:	4642      	mov	r2, r8
 800c592:	464b      	mov	r3, r9
 800c594:	4640      	mov	r0, r8
 800c596:	4649      	mov	r1, r9
 800c598:	f7f4 fad0 	bl	8000b3c <__aeabi_dcmpun>
 800c59c:	b140      	cbz	r0, 800c5b0 <_printf_float+0xe0>
 800c59e:	464b      	mov	r3, r9
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	bfbc      	itt	lt
 800c5a4:	232d      	movlt	r3, #45	@ 0x2d
 800c5a6:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800c5aa:	4a7e      	ldr	r2, [pc, #504]	@ (800c7a4 <_printf_float+0x2d4>)
 800c5ac:	4b7e      	ldr	r3, [pc, #504]	@ (800c7a8 <_printf_float+0x2d8>)
 800c5ae:	e7d4      	b.n	800c55a <_printf_float+0x8a>
 800c5b0:	6863      	ldr	r3, [r4, #4]
 800c5b2:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800c5b6:	9206      	str	r2, [sp, #24]
 800c5b8:	1c5a      	adds	r2, r3, #1
 800c5ba:	d13b      	bne.n	800c634 <_printf_float+0x164>
 800c5bc:	2306      	movs	r3, #6
 800c5be:	6063      	str	r3, [r4, #4]
 800c5c0:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800c5c4:	2300      	movs	r3, #0
 800c5c6:	6022      	str	r2, [r4, #0]
 800c5c8:	9303      	str	r3, [sp, #12]
 800c5ca:	ab0a      	add	r3, sp, #40	@ 0x28
 800c5cc:	e9cd a301 	strd	sl, r3, [sp, #4]
 800c5d0:	ab09      	add	r3, sp, #36	@ 0x24
 800c5d2:	9300      	str	r3, [sp, #0]
 800c5d4:	6861      	ldr	r1, [r4, #4]
 800c5d6:	ec49 8b10 	vmov	d0, r8, r9
 800c5da:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800c5de:	4628      	mov	r0, r5
 800c5e0:	f7ff fed6 	bl	800c390 <__cvt>
 800c5e4:	9b06      	ldr	r3, [sp, #24]
 800c5e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c5e8:	2b47      	cmp	r3, #71	@ 0x47
 800c5ea:	4680      	mov	r8, r0
 800c5ec:	d129      	bne.n	800c642 <_printf_float+0x172>
 800c5ee:	1cc8      	adds	r0, r1, #3
 800c5f0:	db02      	blt.n	800c5f8 <_printf_float+0x128>
 800c5f2:	6863      	ldr	r3, [r4, #4]
 800c5f4:	4299      	cmp	r1, r3
 800c5f6:	dd41      	ble.n	800c67c <_printf_float+0x1ac>
 800c5f8:	f1aa 0a02 	sub.w	sl, sl, #2
 800c5fc:	fa5f fa8a 	uxtb.w	sl, sl
 800c600:	3901      	subs	r1, #1
 800c602:	4652      	mov	r2, sl
 800c604:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800c608:	9109      	str	r1, [sp, #36]	@ 0x24
 800c60a:	f7ff ff26 	bl	800c45a <__exponent>
 800c60e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c610:	1813      	adds	r3, r2, r0
 800c612:	2a01      	cmp	r2, #1
 800c614:	4681      	mov	r9, r0
 800c616:	6123      	str	r3, [r4, #16]
 800c618:	dc02      	bgt.n	800c620 <_printf_float+0x150>
 800c61a:	6822      	ldr	r2, [r4, #0]
 800c61c:	07d2      	lsls	r2, r2, #31
 800c61e:	d501      	bpl.n	800c624 <_printf_float+0x154>
 800c620:	3301      	adds	r3, #1
 800c622:	6123      	str	r3, [r4, #16]
 800c624:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800c628:	2b00      	cmp	r3, #0
 800c62a:	d0a2      	beq.n	800c572 <_printf_float+0xa2>
 800c62c:	232d      	movs	r3, #45	@ 0x2d
 800c62e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800c632:	e79e      	b.n	800c572 <_printf_float+0xa2>
 800c634:	9a06      	ldr	r2, [sp, #24]
 800c636:	2a47      	cmp	r2, #71	@ 0x47
 800c638:	d1c2      	bne.n	800c5c0 <_printf_float+0xf0>
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d1c0      	bne.n	800c5c0 <_printf_float+0xf0>
 800c63e:	2301      	movs	r3, #1
 800c640:	e7bd      	b.n	800c5be <_printf_float+0xee>
 800c642:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c646:	d9db      	bls.n	800c600 <_printf_float+0x130>
 800c648:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800c64c:	d118      	bne.n	800c680 <_printf_float+0x1b0>
 800c64e:	2900      	cmp	r1, #0
 800c650:	6863      	ldr	r3, [r4, #4]
 800c652:	dd0b      	ble.n	800c66c <_printf_float+0x19c>
 800c654:	6121      	str	r1, [r4, #16]
 800c656:	b913      	cbnz	r3, 800c65e <_printf_float+0x18e>
 800c658:	6822      	ldr	r2, [r4, #0]
 800c65a:	07d0      	lsls	r0, r2, #31
 800c65c:	d502      	bpl.n	800c664 <_printf_float+0x194>
 800c65e:	3301      	adds	r3, #1
 800c660:	440b      	add	r3, r1
 800c662:	6123      	str	r3, [r4, #16]
 800c664:	65a1      	str	r1, [r4, #88]	@ 0x58
 800c666:	f04f 0900 	mov.w	r9, #0
 800c66a:	e7db      	b.n	800c624 <_printf_float+0x154>
 800c66c:	b913      	cbnz	r3, 800c674 <_printf_float+0x1a4>
 800c66e:	6822      	ldr	r2, [r4, #0]
 800c670:	07d2      	lsls	r2, r2, #31
 800c672:	d501      	bpl.n	800c678 <_printf_float+0x1a8>
 800c674:	3302      	adds	r3, #2
 800c676:	e7f4      	b.n	800c662 <_printf_float+0x192>
 800c678:	2301      	movs	r3, #1
 800c67a:	e7f2      	b.n	800c662 <_printf_float+0x192>
 800c67c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800c680:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c682:	4299      	cmp	r1, r3
 800c684:	db05      	blt.n	800c692 <_printf_float+0x1c2>
 800c686:	6823      	ldr	r3, [r4, #0]
 800c688:	6121      	str	r1, [r4, #16]
 800c68a:	07d8      	lsls	r0, r3, #31
 800c68c:	d5ea      	bpl.n	800c664 <_printf_float+0x194>
 800c68e:	1c4b      	adds	r3, r1, #1
 800c690:	e7e7      	b.n	800c662 <_printf_float+0x192>
 800c692:	2900      	cmp	r1, #0
 800c694:	bfd4      	ite	le
 800c696:	f1c1 0202 	rsble	r2, r1, #2
 800c69a:	2201      	movgt	r2, #1
 800c69c:	4413      	add	r3, r2
 800c69e:	e7e0      	b.n	800c662 <_printf_float+0x192>
 800c6a0:	6823      	ldr	r3, [r4, #0]
 800c6a2:	055a      	lsls	r2, r3, #21
 800c6a4:	d407      	bmi.n	800c6b6 <_printf_float+0x1e6>
 800c6a6:	6923      	ldr	r3, [r4, #16]
 800c6a8:	4642      	mov	r2, r8
 800c6aa:	4631      	mov	r1, r6
 800c6ac:	4628      	mov	r0, r5
 800c6ae:	47b8      	blx	r7
 800c6b0:	3001      	adds	r0, #1
 800c6b2:	d12b      	bne.n	800c70c <_printf_float+0x23c>
 800c6b4:	e767      	b.n	800c586 <_printf_float+0xb6>
 800c6b6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800c6ba:	f240 80dd 	bls.w	800c878 <_printf_float+0x3a8>
 800c6be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c6c2:	2200      	movs	r2, #0
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	f7f4 fa07 	bl	8000ad8 <__aeabi_dcmpeq>
 800c6ca:	2800      	cmp	r0, #0
 800c6cc:	d033      	beq.n	800c736 <_printf_float+0x266>
 800c6ce:	4a37      	ldr	r2, [pc, #220]	@ (800c7ac <_printf_float+0x2dc>)
 800c6d0:	2301      	movs	r3, #1
 800c6d2:	4631      	mov	r1, r6
 800c6d4:	4628      	mov	r0, r5
 800c6d6:	47b8      	blx	r7
 800c6d8:	3001      	adds	r0, #1
 800c6da:	f43f af54 	beq.w	800c586 <_printf_float+0xb6>
 800c6de:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800c6e2:	4543      	cmp	r3, r8
 800c6e4:	db02      	blt.n	800c6ec <_printf_float+0x21c>
 800c6e6:	6823      	ldr	r3, [r4, #0]
 800c6e8:	07d8      	lsls	r0, r3, #31
 800c6ea:	d50f      	bpl.n	800c70c <_printf_float+0x23c>
 800c6ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c6f0:	4631      	mov	r1, r6
 800c6f2:	4628      	mov	r0, r5
 800c6f4:	47b8      	blx	r7
 800c6f6:	3001      	adds	r0, #1
 800c6f8:	f43f af45 	beq.w	800c586 <_printf_float+0xb6>
 800c6fc:	f04f 0900 	mov.w	r9, #0
 800c700:	f108 38ff 	add.w	r8, r8, #4294967295
 800c704:	f104 0a1a 	add.w	sl, r4, #26
 800c708:	45c8      	cmp	r8, r9
 800c70a:	dc09      	bgt.n	800c720 <_printf_float+0x250>
 800c70c:	6823      	ldr	r3, [r4, #0]
 800c70e:	079b      	lsls	r3, r3, #30
 800c710:	f100 8103 	bmi.w	800c91a <_printf_float+0x44a>
 800c714:	68e0      	ldr	r0, [r4, #12]
 800c716:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c718:	4298      	cmp	r0, r3
 800c71a:	bfb8      	it	lt
 800c71c:	4618      	movlt	r0, r3
 800c71e:	e734      	b.n	800c58a <_printf_float+0xba>
 800c720:	2301      	movs	r3, #1
 800c722:	4652      	mov	r2, sl
 800c724:	4631      	mov	r1, r6
 800c726:	4628      	mov	r0, r5
 800c728:	47b8      	blx	r7
 800c72a:	3001      	adds	r0, #1
 800c72c:	f43f af2b 	beq.w	800c586 <_printf_float+0xb6>
 800c730:	f109 0901 	add.w	r9, r9, #1
 800c734:	e7e8      	b.n	800c708 <_printf_float+0x238>
 800c736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c738:	2b00      	cmp	r3, #0
 800c73a:	dc39      	bgt.n	800c7b0 <_printf_float+0x2e0>
 800c73c:	4a1b      	ldr	r2, [pc, #108]	@ (800c7ac <_printf_float+0x2dc>)
 800c73e:	2301      	movs	r3, #1
 800c740:	4631      	mov	r1, r6
 800c742:	4628      	mov	r0, r5
 800c744:	47b8      	blx	r7
 800c746:	3001      	adds	r0, #1
 800c748:	f43f af1d 	beq.w	800c586 <_printf_float+0xb6>
 800c74c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800c750:	ea59 0303 	orrs.w	r3, r9, r3
 800c754:	d102      	bne.n	800c75c <_printf_float+0x28c>
 800c756:	6823      	ldr	r3, [r4, #0]
 800c758:	07d9      	lsls	r1, r3, #31
 800c75a:	d5d7      	bpl.n	800c70c <_printf_float+0x23c>
 800c75c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c760:	4631      	mov	r1, r6
 800c762:	4628      	mov	r0, r5
 800c764:	47b8      	blx	r7
 800c766:	3001      	adds	r0, #1
 800c768:	f43f af0d 	beq.w	800c586 <_printf_float+0xb6>
 800c76c:	f04f 0a00 	mov.w	sl, #0
 800c770:	f104 0b1a 	add.w	fp, r4, #26
 800c774:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c776:	425b      	negs	r3, r3
 800c778:	4553      	cmp	r3, sl
 800c77a:	dc01      	bgt.n	800c780 <_printf_float+0x2b0>
 800c77c:	464b      	mov	r3, r9
 800c77e:	e793      	b.n	800c6a8 <_printf_float+0x1d8>
 800c780:	2301      	movs	r3, #1
 800c782:	465a      	mov	r2, fp
 800c784:	4631      	mov	r1, r6
 800c786:	4628      	mov	r0, r5
 800c788:	47b8      	blx	r7
 800c78a:	3001      	adds	r0, #1
 800c78c:	f43f aefb 	beq.w	800c586 <_printf_float+0xb6>
 800c790:	f10a 0a01 	add.w	sl, sl, #1
 800c794:	e7ee      	b.n	800c774 <_printf_float+0x2a4>
 800c796:	bf00      	nop
 800c798:	7fefffff 	.word	0x7fefffff
 800c79c:	0801110b 	.word	0x0801110b
 800c7a0:	08011107 	.word	0x08011107
 800c7a4:	08011113 	.word	0x08011113
 800c7a8:	0801110f 	.word	0x0801110f
 800c7ac:	08011117 	.word	0x08011117
 800c7b0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7b2:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c7b6:	4553      	cmp	r3, sl
 800c7b8:	bfa8      	it	ge
 800c7ba:	4653      	movge	r3, sl
 800c7bc:	2b00      	cmp	r3, #0
 800c7be:	4699      	mov	r9, r3
 800c7c0:	dc36      	bgt.n	800c830 <_printf_float+0x360>
 800c7c2:	f04f 0b00 	mov.w	fp, #0
 800c7c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c7ca:	f104 021a 	add.w	r2, r4, #26
 800c7ce:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800c7d0:	9306      	str	r3, [sp, #24]
 800c7d2:	eba3 0309 	sub.w	r3, r3, r9
 800c7d6:	455b      	cmp	r3, fp
 800c7d8:	dc31      	bgt.n	800c83e <_printf_float+0x36e>
 800c7da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7dc:	459a      	cmp	sl, r3
 800c7de:	dc3a      	bgt.n	800c856 <_printf_float+0x386>
 800c7e0:	6823      	ldr	r3, [r4, #0]
 800c7e2:	07da      	lsls	r2, r3, #31
 800c7e4:	d437      	bmi.n	800c856 <_printf_float+0x386>
 800c7e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c7e8:	ebaa 0903 	sub.w	r9, sl, r3
 800c7ec:	9b06      	ldr	r3, [sp, #24]
 800c7ee:	ebaa 0303 	sub.w	r3, sl, r3
 800c7f2:	4599      	cmp	r9, r3
 800c7f4:	bfa8      	it	ge
 800c7f6:	4699      	movge	r9, r3
 800c7f8:	f1b9 0f00 	cmp.w	r9, #0
 800c7fc:	dc33      	bgt.n	800c866 <_printf_float+0x396>
 800c7fe:	f04f 0800 	mov.w	r8, #0
 800c802:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c806:	f104 0b1a 	add.w	fp, r4, #26
 800c80a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c80c:	ebaa 0303 	sub.w	r3, sl, r3
 800c810:	eba3 0309 	sub.w	r3, r3, r9
 800c814:	4543      	cmp	r3, r8
 800c816:	f77f af79 	ble.w	800c70c <_printf_float+0x23c>
 800c81a:	2301      	movs	r3, #1
 800c81c:	465a      	mov	r2, fp
 800c81e:	4631      	mov	r1, r6
 800c820:	4628      	mov	r0, r5
 800c822:	47b8      	blx	r7
 800c824:	3001      	adds	r0, #1
 800c826:	f43f aeae 	beq.w	800c586 <_printf_float+0xb6>
 800c82a:	f108 0801 	add.w	r8, r8, #1
 800c82e:	e7ec      	b.n	800c80a <_printf_float+0x33a>
 800c830:	4642      	mov	r2, r8
 800c832:	4631      	mov	r1, r6
 800c834:	4628      	mov	r0, r5
 800c836:	47b8      	blx	r7
 800c838:	3001      	adds	r0, #1
 800c83a:	d1c2      	bne.n	800c7c2 <_printf_float+0x2f2>
 800c83c:	e6a3      	b.n	800c586 <_printf_float+0xb6>
 800c83e:	2301      	movs	r3, #1
 800c840:	4631      	mov	r1, r6
 800c842:	4628      	mov	r0, r5
 800c844:	9206      	str	r2, [sp, #24]
 800c846:	47b8      	blx	r7
 800c848:	3001      	adds	r0, #1
 800c84a:	f43f ae9c 	beq.w	800c586 <_printf_float+0xb6>
 800c84e:	9a06      	ldr	r2, [sp, #24]
 800c850:	f10b 0b01 	add.w	fp, fp, #1
 800c854:	e7bb      	b.n	800c7ce <_printf_float+0x2fe>
 800c856:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c85a:	4631      	mov	r1, r6
 800c85c:	4628      	mov	r0, r5
 800c85e:	47b8      	blx	r7
 800c860:	3001      	adds	r0, #1
 800c862:	d1c0      	bne.n	800c7e6 <_printf_float+0x316>
 800c864:	e68f      	b.n	800c586 <_printf_float+0xb6>
 800c866:	9a06      	ldr	r2, [sp, #24]
 800c868:	464b      	mov	r3, r9
 800c86a:	4442      	add	r2, r8
 800c86c:	4631      	mov	r1, r6
 800c86e:	4628      	mov	r0, r5
 800c870:	47b8      	blx	r7
 800c872:	3001      	adds	r0, #1
 800c874:	d1c3      	bne.n	800c7fe <_printf_float+0x32e>
 800c876:	e686      	b.n	800c586 <_printf_float+0xb6>
 800c878:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800c87c:	f1ba 0f01 	cmp.w	sl, #1
 800c880:	dc01      	bgt.n	800c886 <_printf_float+0x3b6>
 800c882:	07db      	lsls	r3, r3, #31
 800c884:	d536      	bpl.n	800c8f4 <_printf_float+0x424>
 800c886:	2301      	movs	r3, #1
 800c888:	4642      	mov	r2, r8
 800c88a:	4631      	mov	r1, r6
 800c88c:	4628      	mov	r0, r5
 800c88e:	47b8      	blx	r7
 800c890:	3001      	adds	r0, #1
 800c892:	f43f ae78 	beq.w	800c586 <_printf_float+0xb6>
 800c896:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c89a:	4631      	mov	r1, r6
 800c89c:	4628      	mov	r0, r5
 800c89e:	47b8      	blx	r7
 800c8a0:	3001      	adds	r0, #1
 800c8a2:	f43f ae70 	beq.w	800c586 <_printf_float+0xb6>
 800c8a6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800c8aa:	2200      	movs	r2, #0
 800c8ac:	2300      	movs	r3, #0
 800c8ae:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c8b2:	f7f4 f911 	bl	8000ad8 <__aeabi_dcmpeq>
 800c8b6:	b9c0      	cbnz	r0, 800c8ea <_printf_float+0x41a>
 800c8b8:	4653      	mov	r3, sl
 800c8ba:	f108 0201 	add.w	r2, r8, #1
 800c8be:	4631      	mov	r1, r6
 800c8c0:	4628      	mov	r0, r5
 800c8c2:	47b8      	blx	r7
 800c8c4:	3001      	adds	r0, #1
 800c8c6:	d10c      	bne.n	800c8e2 <_printf_float+0x412>
 800c8c8:	e65d      	b.n	800c586 <_printf_float+0xb6>
 800c8ca:	2301      	movs	r3, #1
 800c8cc:	465a      	mov	r2, fp
 800c8ce:	4631      	mov	r1, r6
 800c8d0:	4628      	mov	r0, r5
 800c8d2:	47b8      	blx	r7
 800c8d4:	3001      	adds	r0, #1
 800c8d6:	f43f ae56 	beq.w	800c586 <_printf_float+0xb6>
 800c8da:	f108 0801 	add.w	r8, r8, #1
 800c8de:	45d0      	cmp	r8, sl
 800c8e0:	dbf3      	blt.n	800c8ca <_printf_float+0x3fa>
 800c8e2:	464b      	mov	r3, r9
 800c8e4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800c8e8:	e6df      	b.n	800c6aa <_printf_float+0x1da>
 800c8ea:	f04f 0800 	mov.w	r8, #0
 800c8ee:	f104 0b1a 	add.w	fp, r4, #26
 800c8f2:	e7f4      	b.n	800c8de <_printf_float+0x40e>
 800c8f4:	2301      	movs	r3, #1
 800c8f6:	4642      	mov	r2, r8
 800c8f8:	e7e1      	b.n	800c8be <_printf_float+0x3ee>
 800c8fa:	2301      	movs	r3, #1
 800c8fc:	464a      	mov	r2, r9
 800c8fe:	4631      	mov	r1, r6
 800c900:	4628      	mov	r0, r5
 800c902:	47b8      	blx	r7
 800c904:	3001      	adds	r0, #1
 800c906:	f43f ae3e 	beq.w	800c586 <_printf_float+0xb6>
 800c90a:	f108 0801 	add.w	r8, r8, #1
 800c90e:	68e3      	ldr	r3, [r4, #12]
 800c910:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c912:	1a5b      	subs	r3, r3, r1
 800c914:	4543      	cmp	r3, r8
 800c916:	dcf0      	bgt.n	800c8fa <_printf_float+0x42a>
 800c918:	e6fc      	b.n	800c714 <_printf_float+0x244>
 800c91a:	f04f 0800 	mov.w	r8, #0
 800c91e:	f104 0919 	add.w	r9, r4, #25
 800c922:	e7f4      	b.n	800c90e <_printf_float+0x43e>

0800c924 <_printf_common>:
 800c924:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c928:	4616      	mov	r6, r2
 800c92a:	4698      	mov	r8, r3
 800c92c:	688a      	ldr	r2, [r1, #8]
 800c92e:	690b      	ldr	r3, [r1, #16]
 800c930:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c934:	4293      	cmp	r3, r2
 800c936:	bfb8      	it	lt
 800c938:	4613      	movlt	r3, r2
 800c93a:	6033      	str	r3, [r6, #0]
 800c93c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800c940:	4607      	mov	r7, r0
 800c942:	460c      	mov	r4, r1
 800c944:	b10a      	cbz	r2, 800c94a <_printf_common+0x26>
 800c946:	3301      	adds	r3, #1
 800c948:	6033      	str	r3, [r6, #0]
 800c94a:	6823      	ldr	r3, [r4, #0]
 800c94c:	0699      	lsls	r1, r3, #26
 800c94e:	bf42      	ittt	mi
 800c950:	6833      	ldrmi	r3, [r6, #0]
 800c952:	3302      	addmi	r3, #2
 800c954:	6033      	strmi	r3, [r6, #0]
 800c956:	6825      	ldr	r5, [r4, #0]
 800c958:	f015 0506 	ands.w	r5, r5, #6
 800c95c:	d106      	bne.n	800c96c <_printf_common+0x48>
 800c95e:	f104 0a19 	add.w	sl, r4, #25
 800c962:	68e3      	ldr	r3, [r4, #12]
 800c964:	6832      	ldr	r2, [r6, #0]
 800c966:	1a9b      	subs	r3, r3, r2
 800c968:	42ab      	cmp	r3, r5
 800c96a:	dc26      	bgt.n	800c9ba <_printf_common+0x96>
 800c96c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800c970:	6822      	ldr	r2, [r4, #0]
 800c972:	3b00      	subs	r3, #0
 800c974:	bf18      	it	ne
 800c976:	2301      	movne	r3, #1
 800c978:	0692      	lsls	r2, r2, #26
 800c97a:	d42b      	bmi.n	800c9d4 <_printf_common+0xb0>
 800c97c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800c980:	4641      	mov	r1, r8
 800c982:	4638      	mov	r0, r7
 800c984:	47c8      	blx	r9
 800c986:	3001      	adds	r0, #1
 800c988:	d01e      	beq.n	800c9c8 <_printf_common+0xa4>
 800c98a:	6823      	ldr	r3, [r4, #0]
 800c98c:	6922      	ldr	r2, [r4, #16]
 800c98e:	f003 0306 	and.w	r3, r3, #6
 800c992:	2b04      	cmp	r3, #4
 800c994:	bf02      	ittt	eq
 800c996:	68e5      	ldreq	r5, [r4, #12]
 800c998:	6833      	ldreq	r3, [r6, #0]
 800c99a:	1aed      	subeq	r5, r5, r3
 800c99c:	68a3      	ldr	r3, [r4, #8]
 800c99e:	bf0c      	ite	eq
 800c9a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c9a4:	2500      	movne	r5, #0
 800c9a6:	4293      	cmp	r3, r2
 800c9a8:	bfc4      	itt	gt
 800c9aa:	1a9b      	subgt	r3, r3, r2
 800c9ac:	18ed      	addgt	r5, r5, r3
 800c9ae:	2600      	movs	r6, #0
 800c9b0:	341a      	adds	r4, #26
 800c9b2:	42b5      	cmp	r5, r6
 800c9b4:	d11a      	bne.n	800c9ec <_printf_common+0xc8>
 800c9b6:	2000      	movs	r0, #0
 800c9b8:	e008      	b.n	800c9cc <_printf_common+0xa8>
 800c9ba:	2301      	movs	r3, #1
 800c9bc:	4652      	mov	r2, sl
 800c9be:	4641      	mov	r1, r8
 800c9c0:	4638      	mov	r0, r7
 800c9c2:	47c8      	blx	r9
 800c9c4:	3001      	adds	r0, #1
 800c9c6:	d103      	bne.n	800c9d0 <_printf_common+0xac>
 800c9c8:	f04f 30ff 	mov.w	r0, #4294967295
 800c9cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c9d0:	3501      	adds	r5, #1
 800c9d2:	e7c6      	b.n	800c962 <_printf_common+0x3e>
 800c9d4:	18e1      	adds	r1, r4, r3
 800c9d6:	1c5a      	adds	r2, r3, #1
 800c9d8:	2030      	movs	r0, #48	@ 0x30
 800c9da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800c9de:	4422      	add	r2, r4
 800c9e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800c9e4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800c9e8:	3302      	adds	r3, #2
 800c9ea:	e7c7      	b.n	800c97c <_printf_common+0x58>
 800c9ec:	2301      	movs	r3, #1
 800c9ee:	4622      	mov	r2, r4
 800c9f0:	4641      	mov	r1, r8
 800c9f2:	4638      	mov	r0, r7
 800c9f4:	47c8      	blx	r9
 800c9f6:	3001      	adds	r0, #1
 800c9f8:	d0e6      	beq.n	800c9c8 <_printf_common+0xa4>
 800c9fa:	3601      	adds	r6, #1
 800c9fc:	e7d9      	b.n	800c9b2 <_printf_common+0x8e>
	...

0800ca00 <_printf_i>:
 800ca00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ca04:	7e0f      	ldrb	r7, [r1, #24]
 800ca06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800ca08:	2f78      	cmp	r7, #120	@ 0x78
 800ca0a:	4691      	mov	r9, r2
 800ca0c:	4680      	mov	r8, r0
 800ca0e:	460c      	mov	r4, r1
 800ca10:	469a      	mov	sl, r3
 800ca12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800ca16:	d807      	bhi.n	800ca28 <_printf_i+0x28>
 800ca18:	2f62      	cmp	r7, #98	@ 0x62
 800ca1a:	d80a      	bhi.n	800ca32 <_printf_i+0x32>
 800ca1c:	2f00      	cmp	r7, #0
 800ca1e:	f000 80d1 	beq.w	800cbc4 <_printf_i+0x1c4>
 800ca22:	2f58      	cmp	r7, #88	@ 0x58
 800ca24:	f000 80b8 	beq.w	800cb98 <_printf_i+0x198>
 800ca28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800ca2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800ca30:	e03a      	b.n	800caa8 <_printf_i+0xa8>
 800ca32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800ca36:	2b15      	cmp	r3, #21
 800ca38:	d8f6      	bhi.n	800ca28 <_printf_i+0x28>
 800ca3a:	a101      	add	r1, pc, #4	@ (adr r1, 800ca40 <_printf_i+0x40>)
 800ca3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800ca40:	0800ca99 	.word	0x0800ca99
 800ca44:	0800caad 	.word	0x0800caad
 800ca48:	0800ca29 	.word	0x0800ca29
 800ca4c:	0800ca29 	.word	0x0800ca29
 800ca50:	0800ca29 	.word	0x0800ca29
 800ca54:	0800ca29 	.word	0x0800ca29
 800ca58:	0800caad 	.word	0x0800caad
 800ca5c:	0800ca29 	.word	0x0800ca29
 800ca60:	0800ca29 	.word	0x0800ca29
 800ca64:	0800ca29 	.word	0x0800ca29
 800ca68:	0800ca29 	.word	0x0800ca29
 800ca6c:	0800cbab 	.word	0x0800cbab
 800ca70:	0800cad7 	.word	0x0800cad7
 800ca74:	0800cb65 	.word	0x0800cb65
 800ca78:	0800ca29 	.word	0x0800ca29
 800ca7c:	0800ca29 	.word	0x0800ca29
 800ca80:	0800cbcd 	.word	0x0800cbcd
 800ca84:	0800ca29 	.word	0x0800ca29
 800ca88:	0800cad7 	.word	0x0800cad7
 800ca8c:	0800ca29 	.word	0x0800ca29
 800ca90:	0800ca29 	.word	0x0800ca29
 800ca94:	0800cb6d 	.word	0x0800cb6d
 800ca98:	6833      	ldr	r3, [r6, #0]
 800ca9a:	1d1a      	adds	r2, r3, #4
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	6032      	str	r2, [r6, #0]
 800caa0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800caa4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800caa8:	2301      	movs	r3, #1
 800caaa:	e09c      	b.n	800cbe6 <_printf_i+0x1e6>
 800caac:	6833      	ldr	r3, [r6, #0]
 800caae:	6820      	ldr	r0, [r4, #0]
 800cab0:	1d19      	adds	r1, r3, #4
 800cab2:	6031      	str	r1, [r6, #0]
 800cab4:	0606      	lsls	r6, r0, #24
 800cab6:	d501      	bpl.n	800cabc <_printf_i+0xbc>
 800cab8:	681d      	ldr	r5, [r3, #0]
 800caba:	e003      	b.n	800cac4 <_printf_i+0xc4>
 800cabc:	0645      	lsls	r5, r0, #25
 800cabe:	d5fb      	bpl.n	800cab8 <_printf_i+0xb8>
 800cac0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800cac4:	2d00      	cmp	r5, #0
 800cac6:	da03      	bge.n	800cad0 <_printf_i+0xd0>
 800cac8:	232d      	movs	r3, #45	@ 0x2d
 800caca:	426d      	negs	r5, r5
 800cacc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cad0:	4858      	ldr	r0, [pc, #352]	@ (800cc34 <_printf_i+0x234>)
 800cad2:	230a      	movs	r3, #10
 800cad4:	e011      	b.n	800cafa <_printf_i+0xfa>
 800cad6:	6821      	ldr	r1, [r4, #0]
 800cad8:	6833      	ldr	r3, [r6, #0]
 800cada:	0608      	lsls	r0, r1, #24
 800cadc:	f853 5b04 	ldr.w	r5, [r3], #4
 800cae0:	d402      	bmi.n	800cae8 <_printf_i+0xe8>
 800cae2:	0649      	lsls	r1, r1, #25
 800cae4:	bf48      	it	mi
 800cae6:	b2ad      	uxthmi	r5, r5
 800cae8:	2f6f      	cmp	r7, #111	@ 0x6f
 800caea:	4852      	ldr	r0, [pc, #328]	@ (800cc34 <_printf_i+0x234>)
 800caec:	6033      	str	r3, [r6, #0]
 800caee:	bf14      	ite	ne
 800caf0:	230a      	movne	r3, #10
 800caf2:	2308      	moveq	r3, #8
 800caf4:	2100      	movs	r1, #0
 800caf6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800cafa:	6866      	ldr	r6, [r4, #4]
 800cafc:	60a6      	str	r6, [r4, #8]
 800cafe:	2e00      	cmp	r6, #0
 800cb00:	db05      	blt.n	800cb0e <_printf_i+0x10e>
 800cb02:	6821      	ldr	r1, [r4, #0]
 800cb04:	432e      	orrs	r6, r5
 800cb06:	f021 0104 	bic.w	r1, r1, #4
 800cb0a:	6021      	str	r1, [r4, #0]
 800cb0c:	d04b      	beq.n	800cba6 <_printf_i+0x1a6>
 800cb0e:	4616      	mov	r6, r2
 800cb10:	fbb5 f1f3 	udiv	r1, r5, r3
 800cb14:	fb03 5711 	mls	r7, r3, r1, r5
 800cb18:	5dc7      	ldrb	r7, [r0, r7]
 800cb1a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800cb1e:	462f      	mov	r7, r5
 800cb20:	42bb      	cmp	r3, r7
 800cb22:	460d      	mov	r5, r1
 800cb24:	d9f4      	bls.n	800cb10 <_printf_i+0x110>
 800cb26:	2b08      	cmp	r3, #8
 800cb28:	d10b      	bne.n	800cb42 <_printf_i+0x142>
 800cb2a:	6823      	ldr	r3, [r4, #0]
 800cb2c:	07df      	lsls	r7, r3, #31
 800cb2e:	d508      	bpl.n	800cb42 <_printf_i+0x142>
 800cb30:	6923      	ldr	r3, [r4, #16]
 800cb32:	6861      	ldr	r1, [r4, #4]
 800cb34:	4299      	cmp	r1, r3
 800cb36:	bfde      	ittt	le
 800cb38:	2330      	movle	r3, #48	@ 0x30
 800cb3a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800cb3e:	f106 36ff 	addle.w	r6, r6, #4294967295
 800cb42:	1b92      	subs	r2, r2, r6
 800cb44:	6122      	str	r2, [r4, #16]
 800cb46:	f8cd a000 	str.w	sl, [sp]
 800cb4a:	464b      	mov	r3, r9
 800cb4c:	aa03      	add	r2, sp, #12
 800cb4e:	4621      	mov	r1, r4
 800cb50:	4640      	mov	r0, r8
 800cb52:	f7ff fee7 	bl	800c924 <_printf_common>
 800cb56:	3001      	adds	r0, #1
 800cb58:	d14a      	bne.n	800cbf0 <_printf_i+0x1f0>
 800cb5a:	f04f 30ff 	mov.w	r0, #4294967295
 800cb5e:	b004      	add	sp, #16
 800cb60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cb64:	6823      	ldr	r3, [r4, #0]
 800cb66:	f043 0320 	orr.w	r3, r3, #32
 800cb6a:	6023      	str	r3, [r4, #0]
 800cb6c:	4832      	ldr	r0, [pc, #200]	@ (800cc38 <_printf_i+0x238>)
 800cb6e:	2778      	movs	r7, #120	@ 0x78
 800cb70:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800cb74:	6823      	ldr	r3, [r4, #0]
 800cb76:	6831      	ldr	r1, [r6, #0]
 800cb78:	061f      	lsls	r7, r3, #24
 800cb7a:	f851 5b04 	ldr.w	r5, [r1], #4
 800cb7e:	d402      	bmi.n	800cb86 <_printf_i+0x186>
 800cb80:	065f      	lsls	r7, r3, #25
 800cb82:	bf48      	it	mi
 800cb84:	b2ad      	uxthmi	r5, r5
 800cb86:	6031      	str	r1, [r6, #0]
 800cb88:	07d9      	lsls	r1, r3, #31
 800cb8a:	bf44      	itt	mi
 800cb8c:	f043 0320 	orrmi.w	r3, r3, #32
 800cb90:	6023      	strmi	r3, [r4, #0]
 800cb92:	b11d      	cbz	r5, 800cb9c <_printf_i+0x19c>
 800cb94:	2310      	movs	r3, #16
 800cb96:	e7ad      	b.n	800caf4 <_printf_i+0xf4>
 800cb98:	4826      	ldr	r0, [pc, #152]	@ (800cc34 <_printf_i+0x234>)
 800cb9a:	e7e9      	b.n	800cb70 <_printf_i+0x170>
 800cb9c:	6823      	ldr	r3, [r4, #0]
 800cb9e:	f023 0320 	bic.w	r3, r3, #32
 800cba2:	6023      	str	r3, [r4, #0]
 800cba4:	e7f6      	b.n	800cb94 <_printf_i+0x194>
 800cba6:	4616      	mov	r6, r2
 800cba8:	e7bd      	b.n	800cb26 <_printf_i+0x126>
 800cbaa:	6833      	ldr	r3, [r6, #0]
 800cbac:	6825      	ldr	r5, [r4, #0]
 800cbae:	6961      	ldr	r1, [r4, #20]
 800cbb0:	1d18      	adds	r0, r3, #4
 800cbb2:	6030      	str	r0, [r6, #0]
 800cbb4:	062e      	lsls	r6, r5, #24
 800cbb6:	681b      	ldr	r3, [r3, #0]
 800cbb8:	d501      	bpl.n	800cbbe <_printf_i+0x1be>
 800cbba:	6019      	str	r1, [r3, #0]
 800cbbc:	e002      	b.n	800cbc4 <_printf_i+0x1c4>
 800cbbe:	0668      	lsls	r0, r5, #25
 800cbc0:	d5fb      	bpl.n	800cbba <_printf_i+0x1ba>
 800cbc2:	8019      	strh	r1, [r3, #0]
 800cbc4:	2300      	movs	r3, #0
 800cbc6:	6123      	str	r3, [r4, #16]
 800cbc8:	4616      	mov	r6, r2
 800cbca:	e7bc      	b.n	800cb46 <_printf_i+0x146>
 800cbcc:	6833      	ldr	r3, [r6, #0]
 800cbce:	1d1a      	adds	r2, r3, #4
 800cbd0:	6032      	str	r2, [r6, #0]
 800cbd2:	681e      	ldr	r6, [r3, #0]
 800cbd4:	6862      	ldr	r2, [r4, #4]
 800cbd6:	2100      	movs	r1, #0
 800cbd8:	4630      	mov	r0, r6
 800cbda:	f7f3 fb01 	bl	80001e0 <memchr>
 800cbde:	b108      	cbz	r0, 800cbe4 <_printf_i+0x1e4>
 800cbe0:	1b80      	subs	r0, r0, r6
 800cbe2:	6060      	str	r0, [r4, #4]
 800cbe4:	6863      	ldr	r3, [r4, #4]
 800cbe6:	6123      	str	r3, [r4, #16]
 800cbe8:	2300      	movs	r3, #0
 800cbea:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cbee:	e7aa      	b.n	800cb46 <_printf_i+0x146>
 800cbf0:	6923      	ldr	r3, [r4, #16]
 800cbf2:	4632      	mov	r2, r6
 800cbf4:	4649      	mov	r1, r9
 800cbf6:	4640      	mov	r0, r8
 800cbf8:	47d0      	blx	sl
 800cbfa:	3001      	adds	r0, #1
 800cbfc:	d0ad      	beq.n	800cb5a <_printf_i+0x15a>
 800cbfe:	6823      	ldr	r3, [r4, #0]
 800cc00:	079b      	lsls	r3, r3, #30
 800cc02:	d413      	bmi.n	800cc2c <_printf_i+0x22c>
 800cc04:	68e0      	ldr	r0, [r4, #12]
 800cc06:	9b03      	ldr	r3, [sp, #12]
 800cc08:	4298      	cmp	r0, r3
 800cc0a:	bfb8      	it	lt
 800cc0c:	4618      	movlt	r0, r3
 800cc0e:	e7a6      	b.n	800cb5e <_printf_i+0x15e>
 800cc10:	2301      	movs	r3, #1
 800cc12:	4632      	mov	r2, r6
 800cc14:	4649      	mov	r1, r9
 800cc16:	4640      	mov	r0, r8
 800cc18:	47d0      	blx	sl
 800cc1a:	3001      	adds	r0, #1
 800cc1c:	d09d      	beq.n	800cb5a <_printf_i+0x15a>
 800cc1e:	3501      	adds	r5, #1
 800cc20:	68e3      	ldr	r3, [r4, #12]
 800cc22:	9903      	ldr	r1, [sp, #12]
 800cc24:	1a5b      	subs	r3, r3, r1
 800cc26:	42ab      	cmp	r3, r5
 800cc28:	dcf2      	bgt.n	800cc10 <_printf_i+0x210>
 800cc2a:	e7eb      	b.n	800cc04 <_printf_i+0x204>
 800cc2c:	2500      	movs	r5, #0
 800cc2e:	f104 0619 	add.w	r6, r4, #25
 800cc32:	e7f5      	b.n	800cc20 <_printf_i+0x220>
 800cc34:	08011119 	.word	0x08011119
 800cc38:	0801112a 	.word	0x0801112a

0800cc3c <std>:
 800cc3c:	2300      	movs	r3, #0
 800cc3e:	b510      	push	{r4, lr}
 800cc40:	4604      	mov	r4, r0
 800cc42:	e9c0 3300 	strd	r3, r3, [r0]
 800cc46:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800cc4a:	6083      	str	r3, [r0, #8]
 800cc4c:	8181      	strh	r1, [r0, #12]
 800cc4e:	6643      	str	r3, [r0, #100]	@ 0x64
 800cc50:	81c2      	strh	r2, [r0, #14]
 800cc52:	6183      	str	r3, [r0, #24]
 800cc54:	4619      	mov	r1, r3
 800cc56:	2208      	movs	r2, #8
 800cc58:	305c      	adds	r0, #92	@ 0x5c
 800cc5a:	f000 fb0b 	bl	800d274 <memset>
 800cc5e:	4b0d      	ldr	r3, [pc, #52]	@ (800cc94 <std+0x58>)
 800cc60:	6263      	str	r3, [r4, #36]	@ 0x24
 800cc62:	4b0d      	ldr	r3, [pc, #52]	@ (800cc98 <std+0x5c>)
 800cc64:	62a3      	str	r3, [r4, #40]	@ 0x28
 800cc66:	4b0d      	ldr	r3, [pc, #52]	@ (800cc9c <std+0x60>)
 800cc68:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800cc6a:	4b0d      	ldr	r3, [pc, #52]	@ (800cca0 <std+0x64>)
 800cc6c:	6323      	str	r3, [r4, #48]	@ 0x30
 800cc6e:	4b0d      	ldr	r3, [pc, #52]	@ (800cca4 <std+0x68>)
 800cc70:	6224      	str	r4, [r4, #32]
 800cc72:	429c      	cmp	r4, r3
 800cc74:	d006      	beq.n	800cc84 <std+0x48>
 800cc76:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800cc7a:	4294      	cmp	r4, r2
 800cc7c:	d002      	beq.n	800cc84 <std+0x48>
 800cc7e:	33d0      	adds	r3, #208	@ 0xd0
 800cc80:	429c      	cmp	r4, r3
 800cc82:	d105      	bne.n	800cc90 <std+0x54>
 800cc84:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800cc88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cc8c:	f000 bb6e 	b.w	800d36c <__retarget_lock_init_recursive>
 800cc90:	bd10      	pop	{r4, pc}
 800cc92:	bf00      	nop
 800cc94:	0800d04d 	.word	0x0800d04d
 800cc98:	0800d06f 	.word	0x0800d06f
 800cc9c:	0800d0a7 	.word	0x0800d0a7
 800cca0:	0800d0cb 	.word	0x0800d0cb
 800cca4:	20002420 	.word	0x20002420

0800cca8 <stdio_exit_handler>:
 800cca8:	4a02      	ldr	r2, [pc, #8]	@ (800ccb4 <stdio_exit_handler+0xc>)
 800ccaa:	4903      	ldr	r1, [pc, #12]	@ (800ccb8 <stdio_exit_handler+0x10>)
 800ccac:	4803      	ldr	r0, [pc, #12]	@ (800ccbc <stdio_exit_handler+0x14>)
 800ccae:	f000 b869 	b.w	800cd84 <_fwalk_sglue>
 800ccb2:	bf00      	nop
 800ccb4:	2000010c 	.word	0x2000010c
 800ccb8:	0800effd 	.word	0x0800effd
 800ccbc:	20000288 	.word	0x20000288

0800ccc0 <cleanup_stdio>:
 800ccc0:	6841      	ldr	r1, [r0, #4]
 800ccc2:	4b0c      	ldr	r3, [pc, #48]	@ (800ccf4 <cleanup_stdio+0x34>)
 800ccc4:	4299      	cmp	r1, r3
 800ccc6:	b510      	push	{r4, lr}
 800ccc8:	4604      	mov	r4, r0
 800ccca:	d001      	beq.n	800ccd0 <cleanup_stdio+0x10>
 800cccc:	f002 f996 	bl	800effc <_fflush_r>
 800ccd0:	68a1      	ldr	r1, [r4, #8]
 800ccd2:	4b09      	ldr	r3, [pc, #36]	@ (800ccf8 <cleanup_stdio+0x38>)
 800ccd4:	4299      	cmp	r1, r3
 800ccd6:	d002      	beq.n	800ccde <cleanup_stdio+0x1e>
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f002 f98f 	bl	800effc <_fflush_r>
 800ccde:	68e1      	ldr	r1, [r4, #12]
 800cce0:	4b06      	ldr	r3, [pc, #24]	@ (800ccfc <cleanup_stdio+0x3c>)
 800cce2:	4299      	cmp	r1, r3
 800cce4:	d004      	beq.n	800ccf0 <cleanup_stdio+0x30>
 800cce6:	4620      	mov	r0, r4
 800cce8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ccec:	f002 b986 	b.w	800effc <_fflush_r>
 800ccf0:	bd10      	pop	{r4, pc}
 800ccf2:	bf00      	nop
 800ccf4:	20002420 	.word	0x20002420
 800ccf8:	20002488 	.word	0x20002488
 800ccfc:	200024f0 	.word	0x200024f0

0800cd00 <global_stdio_init.part.0>:
 800cd00:	b510      	push	{r4, lr}
 800cd02:	4b0b      	ldr	r3, [pc, #44]	@ (800cd30 <global_stdio_init.part.0+0x30>)
 800cd04:	4c0b      	ldr	r4, [pc, #44]	@ (800cd34 <global_stdio_init.part.0+0x34>)
 800cd06:	4a0c      	ldr	r2, [pc, #48]	@ (800cd38 <global_stdio_init.part.0+0x38>)
 800cd08:	601a      	str	r2, [r3, #0]
 800cd0a:	4620      	mov	r0, r4
 800cd0c:	2200      	movs	r2, #0
 800cd0e:	2104      	movs	r1, #4
 800cd10:	f7ff ff94 	bl	800cc3c <std>
 800cd14:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800cd18:	2201      	movs	r2, #1
 800cd1a:	2109      	movs	r1, #9
 800cd1c:	f7ff ff8e 	bl	800cc3c <std>
 800cd20:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800cd24:	2202      	movs	r2, #2
 800cd26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd2a:	2112      	movs	r1, #18
 800cd2c:	f7ff bf86 	b.w	800cc3c <std>
 800cd30:	20002558 	.word	0x20002558
 800cd34:	20002420 	.word	0x20002420
 800cd38:	0800cca9 	.word	0x0800cca9

0800cd3c <__sfp_lock_acquire>:
 800cd3c:	4801      	ldr	r0, [pc, #4]	@ (800cd44 <__sfp_lock_acquire+0x8>)
 800cd3e:	f000 bb16 	b.w	800d36e <__retarget_lock_acquire_recursive>
 800cd42:	bf00      	nop
 800cd44:	20002561 	.word	0x20002561

0800cd48 <__sfp_lock_release>:
 800cd48:	4801      	ldr	r0, [pc, #4]	@ (800cd50 <__sfp_lock_release+0x8>)
 800cd4a:	f000 bb11 	b.w	800d370 <__retarget_lock_release_recursive>
 800cd4e:	bf00      	nop
 800cd50:	20002561 	.word	0x20002561

0800cd54 <__sinit>:
 800cd54:	b510      	push	{r4, lr}
 800cd56:	4604      	mov	r4, r0
 800cd58:	f7ff fff0 	bl	800cd3c <__sfp_lock_acquire>
 800cd5c:	6a23      	ldr	r3, [r4, #32]
 800cd5e:	b11b      	cbz	r3, 800cd68 <__sinit+0x14>
 800cd60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800cd64:	f7ff bff0 	b.w	800cd48 <__sfp_lock_release>
 800cd68:	4b04      	ldr	r3, [pc, #16]	@ (800cd7c <__sinit+0x28>)
 800cd6a:	6223      	str	r3, [r4, #32]
 800cd6c:	4b04      	ldr	r3, [pc, #16]	@ (800cd80 <__sinit+0x2c>)
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	2b00      	cmp	r3, #0
 800cd72:	d1f5      	bne.n	800cd60 <__sinit+0xc>
 800cd74:	f7ff ffc4 	bl	800cd00 <global_stdio_init.part.0>
 800cd78:	e7f2      	b.n	800cd60 <__sinit+0xc>
 800cd7a:	bf00      	nop
 800cd7c:	0800ccc1 	.word	0x0800ccc1
 800cd80:	20002558 	.word	0x20002558

0800cd84 <_fwalk_sglue>:
 800cd84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cd88:	4607      	mov	r7, r0
 800cd8a:	4688      	mov	r8, r1
 800cd8c:	4614      	mov	r4, r2
 800cd8e:	2600      	movs	r6, #0
 800cd90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800cd94:	f1b9 0901 	subs.w	r9, r9, #1
 800cd98:	d505      	bpl.n	800cda6 <_fwalk_sglue+0x22>
 800cd9a:	6824      	ldr	r4, [r4, #0]
 800cd9c:	2c00      	cmp	r4, #0
 800cd9e:	d1f7      	bne.n	800cd90 <_fwalk_sglue+0xc>
 800cda0:	4630      	mov	r0, r6
 800cda2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cda6:	89ab      	ldrh	r3, [r5, #12]
 800cda8:	2b01      	cmp	r3, #1
 800cdaa:	d907      	bls.n	800cdbc <_fwalk_sglue+0x38>
 800cdac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800cdb0:	3301      	adds	r3, #1
 800cdb2:	d003      	beq.n	800cdbc <_fwalk_sglue+0x38>
 800cdb4:	4629      	mov	r1, r5
 800cdb6:	4638      	mov	r0, r7
 800cdb8:	47c0      	blx	r8
 800cdba:	4306      	orrs	r6, r0
 800cdbc:	3568      	adds	r5, #104	@ 0x68
 800cdbe:	e7e9      	b.n	800cd94 <_fwalk_sglue+0x10>

0800cdc0 <iprintf>:
 800cdc0:	b40f      	push	{r0, r1, r2, r3}
 800cdc2:	b507      	push	{r0, r1, r2, lr}
 800cdc4:	4906      	ldr	r1, [pc, #24]	@ (800cde0 <iprintf+0x20>)
 800cdc6:	ab04      	add	r3, sp, #16
 800cdc8:	6808      	ldr	r0, [r1, #0]
 800cdca:	f853 2b04 	ldr.w	r2, [r3], #4
 800cdce:	6881      	ldr	r1, [r0, #8]
 800cdd0:	9301      	str	r3, [sp, #4]
 800cdd2:	f001 ff77 	bl	800ecc4 <_vfiprintf_r>
 800cdd6:	b003      	add	sp, #12
 800cdd8:	f85d eb04 	ldr.w	lr, [sp], #4
 800cddc:	b004      	add	sp, #16
 800cdde:	4770      	bx	lr
 800cde0:	20000284 	.word	0x20000284

0800cde4 <_puts_r>:
 800cde4:	6a03      	ldr	r3, [r0, #32]
 800cde6:	b570      	push	{r4, r5, r6, lr}
 800cde8:	6884      	ldr	r4, [r0, #8]
 800cdea:	4605      	mov	r5, r0
 800cdec:	460e      	mov	r6, r1
 800cdee:	b90b      	cbnz	r3, 800cdf4 <_puts_r+0x10>
 800cdf0:	f7ff ffb0 	bl	800cd54 <__sinit>
 800cdf4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800cdf6:	07db      	lsls	r3, r3, #31
 800cdf8:	d405      	bmi.n	800ce06 <_puts_r+0x22>
 800cdfa:	89a3      	ldrh	r3, [r4, #12]
 800cdfc:	0598      	lsls	r0, r3, #22
 800cdfe:	d402      	bmi.n	800ce06 <_puts_r+0x22>
 800ce00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce02:	f000 fab4 	bl	800d36e <__retarget_lock_acquire_recursive>
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	0719      	lsls	r1, r3, #28
 800ce0a:	d502      	bpl.n	800ce12 <_puts_r+0x2e>
 800ce0c:	6923      	ldr	r3, [r4, #16]
 800ce0e:	2b00      	cmp	r3, #0
 800ce10:	d135      	bne.n	800ce7e <_puts_r+0x9a>
 800ce12:	4621      	mov	r1, r4
 800ce14:	4628      	mov	r0, r5
 800ce16:	f000 f9d7 	bl	800d1c8 <__swsetup_r>
 800ce1a:	b380      	cbz	r0, 800ce7e <_puts_r+0x9a>
 800ce1c:	f04f 35ff 	mov.w	r5, #4294967295
 800ce20:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ce22:	07da      	lsls	r2, r3, #31
 800ce24:	d405      	bmi.n	800ce32 <_puts_r+0x4e>
 800ce26:	89a3      	ldrh	r3, [r4, #12]
 800ce28:	059b      	lsls	r3, r3, #22
 800ce2a:	d402      	bmi.n	800ce32 <_puts_r+0x4e>
 800ce2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ce2e:	f000 fa9f 	bl	800d370 <__retarget_lock_release_recursive>
 800ce32:	4628      	mov	r0, r5
 800ce34:	bd70      	pop	{r4, r5, r6, pc}
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	da04      	bge.n	800ce44 <_puts_r+0x60>
 800ce3a:	69a2      	ldr	r2, [r4, #24]
 800ce3c:	429a      	cmp	r2, r3
 800ce3e:	dc17      	bgt.n	800ce70 <_puts_r+0x8c>
 800ce40:	290a      	cmp	r1, #10
 800ce42:	d015      	beq.n	800ce70 <_puts_r+0x8c>
 800ce44:	6823      	ldr	r3, [r4, #0]
 800ce46:	1c5a      	adds	r2, r3, #1
 800ce48:	6022      	str	r2, [r4, #0]
 800ce4a:	7019      	strb	r1, [r3, #0]
 800ce4c:	68a3      	ldr	r3, [r4, #8]
 800ce4e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800ce52:	3b01      	subs	r3, #1
 800ce54:	60a3      	str	r3, [r4, #8]
 800ce56:	2900      	cmp	r1, #0
 800ce58:	d1ed      	bne.n	800ce36 <_puts_r+0x52>
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	da11      	bge.n	800ce82 <_puts_r+0x9e>
 800ce5e:	4622      	mov	r2, r4
 800ce60:	210a      	movs	r1, #10
 800ce62:	4628      	mov	r0, r5
 800ce64:	f000 f972 	bl	800d14c <__swbuf_r>
 800ce68:	3001      	adds	r0, #1
 800ce6a:	d0d7      	beq.n	800ce1c <_puts_r+0x38>
 800ce6c:	250a      	movs	r5, #10
 800ce6e:	e7d7      	b.n	800ce20 <_puts_r+0x3c>
 800ce70:	4622      	mov	r2, r4
 800ce72:	4628      	mov	r0, r5
 800ce74:	f000 f96a 	bl	800d14c <__swbuf_r>
 800ce78:	3001      	adds	r0, #1
 800ce7a:	d1e7      	bne.n	800ce4c <_puts_r+0x68>
 800ce7c:	e7ce      	b.n	800ce1c <_puts_r+0x38>
 800ce7e:	3e01      	subs	r6, #1
 800ce80:	e7e4      	b.n	800ce4c <_puts_r+0x68>
 800ce82:	6823      	ldr	r3, [r4, #0]
 800ce84:	1c5a      	adds	r2, r3, #1
 800ce86:	6022      	str	r2, [r4, #0]
 800ce88:	220a      	movs	r2, #10
 800ce8a:	701a      	strb	r2, [r3, #0]
 800ce8c:	e7ee      	b.n	800ce6c <_puts_r+0x88>
	...

0800ce90 <puts>:
 800ce90:	4b02      	ldr	r3, [pc, #8]	@ (800ce9c <puts+0xc>)
 800ce92:	4601      	mov	r1, r0
 800ce94:	6818      	ldr	r0, [r3, #0]
 800ce96:	f7ff bfa5 	b.w	800cde4 <_puts_r>
 800ce9a:	bf00      	nop
 800ce9c:	20000284 	.word	0x20000284

0800cea0 <setvbuf>:
 800cea0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cea4:	461d      	mov	r5, r3
 800cea6:	4b57      	ldr	r3, [pc, #348]	@ (800d004 <setvbuf+0x164>)
 800cea8:	681f      	ldr	r7, [r3, #0]
 800ceaa:	4604      	mov	r4, r0
 800ceac:	460e      	mov	r6, r1
 800ceae:	4690      	mov	r8, r2
 800ceb0:	b127      	cbz	r7, 800cebc <setvbuf+0x1c>
 800ceb2:	6a3b      	ldr	r3, [r7, #32]
 800ceb4:	b913      	cbnz	r3, 800cebc <setvbuf+0x1c>
 800ceb6:	4638      	mov	r0, r7
 800ceb8:	f7ff ff4c 	bl	800cd54 <__sinit>
 800cebc:	f1b8 0f02 	cmp.w	r8, #2
 800cec0:	d006      	beq.n	800ced0 <setvbuf+0x30>
 800cec2:	f1b8 0f01 	cmp.w	r8, #1
 800cec6:	f200 809a 	bhi.w	800cffe <setvbuf+0x15e>
 800ceca:	2d00      	cmp	r5, #0
 800cecc:	f2c0 8097 	blt.w	800cffe <setvbuf+0x15e>
 800ced0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ced2:	07d9      	lsls	r1, r3, #31
 800ced4:	d405      	bmi.n	800cee2 <setvbuf+0x42>
 800ced6:	89a3      	ldrh	r3, [r4, #12]
 800ced8:	059a      	lsls	r2, r3, #22
 800ceda:	d402      	bmi.n	800cee2 <setvbuf+0x42>
 800cedc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cede:	f000 fa46 	bl	800d36e <__retarget_lock_acquire_recursive>
 800cee2:	4621      	mov	r1, r4
 800cee4:	4638      	mov	r0, r7
 800cee6:	f002 f889 	bl	800effc <_fflush_r>
 800ceea:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ceec:	b141      	cbz	r1, 800cf00 <setvbuf+0x60>
 800ceee:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cef2:	4299      	cmp	r1, r3
 800cef4:	d002      	beq.n	800cefc <setvbuf+0x5c>
 800cef6:	4638      	mov	r0, r7
 800cef8:	f001 f8ca 	bl	800e090 <_free_r>
 800cefc:	2300      	movs	r3, #0
 800cefe:	6363      	str	r3, [r4, #52]	@ 0x34
 800cf00:	2300      	movs	r3, #0
 800cf02:	61a3      	str	r3, [r4, #24]
 800cf04:	6063      	str	r3, [r4, #4]
 800cf06:	89a3      	ldrh	r3, [r4, #12]
 800cf08:	061b      	lsls	r3, r3, #24
 800cf0a:	d503      	bpl.n	800cf14 <setvbuf+0x74>
 800cf0c:	6921      	ldr	r1, [r4, #16]
 800cf0e:	4638      	mov	r0, r7
 800cf10:	f001 f8be 	bl	800e090 <_free_r>
 800cf14:	89a3      	ldrh	r3, [r4, #12]
 800cf16:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800cf1a:	f023 0303 	bic.w	r3, r3, #3
 800cf1e:	f1b8 0f02 	cmp.w	r8, #2
 800cf22:	81a3      	strh	r3, [r4, #12]
 800cf24:	d061      	beq.n	800cfea <setvbuf+0x14a>
 800cf26:	ab01      	add	r3, sp, #4
 800cf28:	466a      	mov	r2, sp
 800cf2a:	4621      	mov	r1, r4
 800cf2c:	4638      	mov	r0, r7
 800cf2e:	f002 f89f 	bl	800f070 <__swhatbuf_r>
 800cf32:	89a3      	ldrh	r3, [r4, #12]
 800cf34:	4318      	orrs	r0, r3
 800cf36:	81a0      	strh	r0, [r4, #12]
 800cf38:	bb2d      	cbnz	r5, 800cf86 <setvbuf+0xe6>
 800cf3a:	9d00      	ldr	r5, [sp, #0]
 800cf3c:	4628      	mov	r0, r5
 800cf3e:	f001 f8f1 	bl	800e124 <malloc>
 800cf42:	4606      	mov	r6, r0
 800cf44:	2800      	cmp	r0, #0
 800cf46:	d152      	bne.n	800cfee <setvbuf+0x14e>
 800cf48:	f8dd 9000 	ldr.w	r9, [sp]
 800cf4c:	45a9      	cmp	r9, r5
 800cf4e:	d140      	bne.n	800cfd2 <setvbuf+0x132>
 800cf50:	f04f 35ff 	mov.w	r5, #4294967295
 800cf54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf58:	f043 0202 	orr.w	r2, r3, #2
 800cf5c:	81a2      	strh	r2, [r4, #12]
 800cf5e:	2200      	movs	r2, #0
 800cf60:	60a2      	str	r2, [r4, #8]
 800cf62:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800cf66:	6022      	str	r2, [r4, #0]
 800cf68:	6122      	str	r2, [r4, #16]
 800cf6a:	2201      	movs	r2, #1
 800cf6c:	6162      	str	r2, [r4, #20]
 800cf6e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cf70:	07d6      	lsls	r6, r2, #31
 800cf72:	d404      	bmi.n	800cf7e <setvbuf+0xde>
 800cf74:	0598      	lsls	r0, r3, #22
 800cf76:	d402      	bmi.n	800cf7e <setvbuf+0xde>
 800cf78:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cf7a:	f000 f9f9 	bl	800d370 <__retarget_lock_release_recursive>
 800cf7e:	4628      	mov	r0, r5
 800cf80:	b003      	add	sp, #12
 800cf82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cf86:	2e00      	cmp	r6, #0
 800cf88:	d0d8      	beq.n	800cf3c <setvbuf+0x9c>
 800cf8a:	6a3b      	ldr	r3, [r7, #32]
 800cf8c:	b913      	cbnz	r3, 800cf94 <setvbuf+0xf4>
 800cf8e:	4638      	mov	r0, r7
 800cf90:	f7ff fee0 	bl	800cd54 <__sinit>
 800cf94:	f1b8 0f01 	cmp.w	r8, #1
 800cf98:	bf08      	it	eq
 800cf9a:	89a3      	ldrheq	r3, [r4, #12]
 800cf9c:	6026      	str	r6, [r4, #0]
 800cf9e:	bf04      	itt	eq
 800cfa0:	f043 0301 	orreq.w	r3, r3, #1
 800cfa4:	81a3      	strheq	r3, [r4, #12]
 800cfa6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cfaa:	f013 0208 	ands.w	r2, r3, #8
 800cfae:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800cfb2:	d01e      	beq.n	800cff2 <setvbuf+0x152>
 800cfb4:	07d9      	lsls	r1, r3, #31
 800cfb6:	bf41      	itttt	mi
 800cfb8:	2200      	movmi	r2, #0
 800cfba:	426d      	negmi	r5, r5
 800cfbc:	60a2      	strmi	r2, [r4, #8]
 800cfbe:	61a5      	strmi	r5, [r4, #24]
 800cfc0:	bf58      	it	pl
 800cfc2:	60a5      	strpl	r5, [r4, #8]
 800cfc4:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800cfc6:	07d2      	lsls	r2, r2, #31
 800cfc8:	d401      	bmi.n	800cfce <setvbuf+0x12e>
 800cfca:	059b      	lsls	r3, r3, #22
 800cfcc:	d513      	bpl.n	800cff6 <setvbuf+0x156>
 800cfce:	2500      	movs	r5, #0
 800cfd0:	e7d5      	b.n	800cf7e <setvbuf+0xde>
 800cfd2:	4648      	mov	r0, r9
 800cfd4:	f001 f8a6 	bl	800e124 <malloc>
 800cfd8:	4606      	mov	r6, r0
 800cfda:	2800      	cmp	r0, #0
 800cfdc:	d0b8      	beq.n	800cf50 <setvbuf+0xb0>
 800cfde:	89a3      	ldrh	r3, [r4, #12]
 800cfe0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cfe4:	81a3      	strh	r3, [r4, #12]
 800cfe6:	464d      	mov	r5, r9
 800cfe8:	e7cf      	b.n	800cf8a <setvbuf+0xea>
 800cfea:	2500      	movs	r5, #0
 800cfec:	e7b2      	b.n	800cf54 <setvbuf+0xb4>
 800cfee:	46a9      	mov	r9, r5
 800cff0:	e7f5      	b.n	800cfde <setvbuf+0x13e>
 800cff2:	60a2      	str	r2, [r4, #8]
 800cff4:	e7e6      	b.n	800cfc4 <setvbuf+0x124>
 800cff6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800cff8:	f000 f9ba 	bl	800d370 <__retarget_lock_release_recursive>
 800cffc:	e7e7      	b.n	800cfce <setvbuf+0x12e>
 800cffe:	f04f 35ff 	mov.w	r5, #4294967295
 800d002:	e7bc      	b.n	800cf7e <setvbuf+0xde>
 800d004:	20000284 	.word	0x20000284

0800d008 <siprintf>:
 800d008:	b40e      	push	{r1, r2, r3}
 800d00a:	b510      	push	{r4, lr}
 800d00c:	b09d      	sub	sp, #116	@ 0x74
 800d00e:	ab1f      	add	r3, sp, #124	@ 0x7c
 800d010:	9002      	str	r0, [sp, #8]
 800d012:	9006      	str	r0, [sp, #24]
 800d014:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 800d018:	480a      	ldr	r0, [pc, #40]	@ (800d044 <siprintf+0x3c>)
 800d01a:	9107      	str	r1, [sp, #28]
 800d01c:	9104      	str	r1, [sp, #16]
 800d01e:	490a      	ldr	r1, [pc, #40]	@ (800d048 <siprintf+0x40>)
 800d020:	f853 2b04 	ldr.w	r2, [r3], #4
 800d024:	9105      	str	r1, [sp, #20]
 800d026:	2400      	movs	r4, #0
 800d028:	a902      	add	r1, sp, #8
 800d02a:	6800      	ldr	r0, [r0, #0]
 800d02c:	9301      	str	r3, [sp, #4]
 800d02e:	941b      	str	r4, [sp, #108]	@ 0x6c
 800d030:	f001 fd22 	bl	800ea78 <_svfiprintf_r>
 800d034:	9b02      	ldr	r3, [sp, #8]
 800d036:	701c      	strb	r4, [r3, #0]
 800d038:	b01d      	add	sp, #116	@ 0x74
 800d03a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d03e:	b003      	add	sp, #12
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	20000284 	.word	0x20000284
 800d048:	ffff0208 	.word	0xffff0208

0800d04c <__sread>:
 800d04c:	b510      	push	{r4, lr}
 800d04e:	460c      	mov	r4, r1
 800d050:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d054:	f000 f93c 	bl	800d2d0 <_read_r>
 800d058:	2800      	cmp	r0, #0
 800d05a:	bfab      	itete	ge
 800d05c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d05e:	89a3      	ldrhlt	r3, [r4, #12]
 800d060:	181b      	addge	r3, r3, r0
 800d062:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d066:	bfac      	ite	ge
 800d068:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d06a:	81a3      	strhlt	r3, [r4, #12]
 800d06c:	bd10      	pop	{r4, pc}

0800d06e <__swrite>:
 800d06e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d072:	461f      	mov	r7, r3
 800d074:	898b      	ldrh	r3, [r1, #12]
 800d076:	05db      	lsls	r3, r3, #23
 800d078:	4605      	mov	r5, r0
 800d07a:	460c      	mov	r4, r1
 800d07c:	4616      	mov	r6, r2
 800d07e:	d505      	bpl.n	800d08c <__swrite+0x1e>
 800d080:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d084:	2302      	movs	r3, #2
 800d086:	2200      	movs	r2, #0
 800d088:	f000 f910 	bl	800d2ac <_lseek_r>
 800d08c:	89a3      	ldrh	r3, [r4, #12]
 800d08e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d092:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d096:	81a3      	strh	r3, [r4, #12]
 800d098:	4632      	mov	r2, r6
 800d09a:	463b      	mov	r3, r7
 800d09c:	4628      	mov	r0, r5
 800d09e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0a2:	f000 b927 	b.w	800d2f4 <_write_r>

0800d0a6 <__sseek>:
 800d0a6:	b510      	push	{r4, lr}
 800d0a8:	460c      	mov	r4, r1
 800d0aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ae:	f000 f8fd 	bl	800d2ac <_lseek_r>
 800d0b2:	1c43      	adds	r3, r0, #1
 800d0b4:	89a3      	ldrh	r3, [r4, #12]
 800d0b6:	bf15      	itete	ne
 800d0b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d0ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d0be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d0c2:	81a3      	strheq	r3, [r4, #12]
 800d0c4:	bf18      	it	ne
 800d0c6:	81a3      	strhne	r3, [r4, #12]
 800d0c8:	bd10      	pop	{r4, pc}

0800d0ca <__sclose>:
 800d0ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d0ce:	f000 b8dd 	b.w	800d28c <_close_r>

0800d0d2 <_vsniprintf_r>:
 800d0d2:	b530      	push	{r4, r5, lr}
 800d0d4:	4614      	mov	r4, r2
 800d0d6:	2c00      	cmp	r4, #0
 800d0d8:	b09b      	sub	sp, #108	@ 0x6c
 800d0da:	4605      	mov	r5, r0
 800d0dc:	461a      	mov	r2, r3
 800d0de:	da05      	bge.n	800d0ec <_vsniprintf_r+0x1a>
 800d0e0:	238b      	movs	r3, #139	@ 0x8b
 800d0e2:	6003      	str	r3, [r0, #0]
 800d0e4:	f04f 30ff 	mov.w	r0, #4294967295
 800d0e8:	b01b      	add	sp, #108	@ 0x6c
 800d0ea:	bd30      	pop	{r4, r5, pc}
 800d0ec:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d0f0:	f8ad 300c 	strh.w	r3, [sp, #12]
 800d0f4:	f04f 0300 	mov.w	r3, #0
 800d0f8:	9319      	str	r3, [sp, #100]	@ 0x64
 800d0fa:	bf14      	ite	ne
 800d0fc:	f104 33ff 	addne.w	r3, r4, #4294967295
 800d100:	4623      	moveq	r3, r4
 800d102:	9302      	str	r3, [sp, #8]
 800d104:	9305      	str	r3, [sp, #20]
 800d106:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d10a:	9100      	str	r1, [sp, #0]
 800d10c:	9104      	str	r1, [sp, #16]
 800d10e:	f8ad 300e 	strh.w	r3, [sp, #14]
 800d112:	4669      	mov	r1, sp
 800d114:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 800d116:	f001 fcaf 	bl	800ea78 <_svfiprintf_r>
 800d11a:	1c43      	adds	r3, r0, #1
 800d11c:	bfbc      	itt	lt
 800d11e:	238b      	movlt	r3, #139	@ 0x8b
 800d120:	602b      	strlt	r3, [r5, #0]
 800d122:	2c00      	cmp	r4, #0
 800d124:	d0e0      	beq.n	800d0e8 <_vsniprintf_r+0x16>
 800d126:	9b00      	ldr	r3, [sp, #0]
 800d128:	2200      	movs	r2, #0
 800d12a:	701a      	strb	r2, [r3, #0]
 800d12c:	e7dc      	b.n	800d0e8 <_vsniprintf_r+0x16>
	...

0800d130 <vsniprintf>:
 800d130:	b507      	push	{r0, r1, r2, lr}
 800d132:	9300      	str	r3, [sp, #0]
 800d134:	4613      	mov	r3, r2
 800d136:	460a      	mov	r2, r1
 800d138:	4601      	mov	r1, r0
 800d13a:	4803      	ldr	r0, [pc, #12]	@ (800d148 <vsniprintf+0x18>)
 800d13c:	6800      	ldr	r0, [r0, #0]
 800d13e:	f7ff ffc8 	bl	800d0d2 <_vsniprintf_r>
 800d142:	b003      	add	sp, #12
 800d144:	f85d fb04 	ldr.w	pc, [sp], #4
 800d148:	20000284 	.word	0x20000284

0800d14c <__swbuf_r>:
 800d14c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d14e:	460e      	mov	r6, r1
 800d150:	4614      	mov	r4, r2
 800d152:	4605      	mov	r5, r0
 800d154:	b118      	cbz	r0, 800d15e <__swbuf_r+0x12>
 800d156:	6a03      	ldr	r3, [r0, #32]
 800d158:	b90b      	cbnz	r3, 800d15e <__swbuf_r+0x12>
 800d15a:	f7ff fdfb 	bl	800cd54 <__sinit>
 800d15e:	69a3      	ldr	r3, [r4, #24]
 800d160:	60a3      	str	r3, [r4, #8]
 800d162:	89a3      	ldrh	r3, [r4, #12]
 800d164:	071a      	lsls	r2, r3, #28
 800d166:	d501      	bpl.n	800d16c <__swbuf_r+0x20>
 800d168:	6923      	ldr	r3, [r4, #16]
 800d16a:	b943      	cbnz	r3, 800d17e <__swbuf_r+0x32>
 800d16c:	4621      	mov	r1, r4
 800d16e:	4628      	mov	r0, r5
 800d170:	f000 f82a 	bl	800d1c8 <__swsetup_r>
 800d174:	b118      	cbz	r0, 800d17e <__swbuf_r+0x32>
 800d176:	f04f 37ff 	mov.w	r7, #4294967295
 800d17a:	4638      	mov	r0, r7
 800d17c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d17e:	6823      	ldr	r3, [r4, #0]
 800d180:	6922      	ldr	r2, [r4, #16]
 800d182:	1a98      	subs	r0, r3, r2
 800d184:	6963      	ldr	r3, [r4, #20]
 800d186:	b2f6      	uxtb	r6, r6
 800d188:	4283      	cmp	r3, r0
 800d18a:	4637      	mov	r7, r6
 800d18c:	dc05      	bgt.n	800d19a <__swbuf_r+0x4e>
 800d18e:	4621      	mov	r1, r4
 800d190:	4628      	mov	r0, r5
 800d192:	f001 ff33 	bl	800effc <_fflush_r>
 800d196:	2800      	cmp	r0, #0
 800d198:	d1ed      	bne.n	800d176 <__swbuf_r+0x2a>
 800d19a:	68a3      	ldr	r3, [r4, #8]
 800d19c:	3b01      	subs	r3, #1
 800d19e:	60a3      	str	r3, [r4, #8]
 800d1a0:	6823      	ldr	r3, [r4, #0]
 800d1a2:	1c5a      	adds	r2, r3, #1
 800d1a4:	6022      	str	r2, [r4, #0]
 800d1a6:	701e      	strb	r6, [r3, #0]
 800d1a8:	6962      	ldr	r2, [r4, #20]
 800d1aa:	1c43      	adds	r3, r0, #1
 800d1ac:	429a      	cmp	r2, r3
 800d1ae:	d004      	beq.n	800d1ba <__swbuf_r+0x6e>
 800d1b0:	89a3      	ldrh	r3, [r4, #12]
 800d1b2:	07db      	lsls	r3, r3, #31
 800d1b4:	d5e1      	bpl.n	800d17a <__swbuf_r+0x2e>
 800d1b6:	2e0a      	cmp	r6, #10
 800d1b8:	d1df      	bne.n	800d17a <__swbuf_r+0x2e>
 800d1ba:	4621      	mov	r1, r4
 800d1bc:	4628      	mov	r0, r5
 800d1be:	f001 ff1d 	bl	800effc <_fflush_r>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	d0d9      	beq.n	800d17a <__swbuf_r+0x2e>
 800d1c6:	e7d6      	b.n	800d176 <__swbuf_r+0x2a>

0800d1c8 <__swsetup_r>:
 800d1c8:	b538      	push	{r3, r4, r5, lr}
 800d1ca:	4b29      	ldr	r3, [pc, #164]	@ (800d270 <__swsetup_r+0xa8>)
 800d1cc:	4605      	mov	r5, r0
 800d1ce:	6818      	ldr	r0, [r3, #0]
 800d1d0:	460c      	mov	r4, r1
 800d1d2:	b118      	cbz	r0, 800d1dc <__swsetup_r+0x14>
 800d1d4:	6a03      	ldr	r3, [r0, #32]
 800d1d6:	b90b      	cbnz	r3, 800d1dc <__swsetup_r+0x14>
 800d1d8:	f7ff fdbc 	bl	800cd54 <__sinit>
 800d1dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d1e0:	0719      	lsls	r1, r3, #28
 800d1e2:	d422      	bmi.n	800d22a <__swsetup_r+0x62>
 800d1e4:	06da      	lsls	r2, r3, #27
 800d1e6:	d407      	bmi.n	800d1f8 <__swsetup_r+0x30>
 800d1e8:	2209      	movs	r2, #9
 800d1ea:	602a      	str	r2, [r5, #0]
 800d1ec:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d1f0:	81a3      	strh	r3, [r4, #12]
 800d1f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d1f6:	e033      	b.n	800d260 <__swsetup_r+0x98>
 800d1f8:	0758      	lsls	r0, r3, #29
 800d1fa:	d512      	bpl.n	800d222 <__swsetup_r+0x5a>
 800d1fc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d1fe:	b141      	cbz	r1, 800d212 <__swsetup_r+0x4a>
 800d200:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d204:	4299      	cmp	r1, r3
 800d206:	d002      	beq.n	800d20e <__swsetup_r+0x46>
 800d208:	4628      	mov	r0, r5
 800d20a:	f000 ff41 	bl	800e090 <_free_r>
 800d20e:	2300      	movs	r3, #0
 800d210:	6363      	str	r3, [r4, #52]	@ 0x34
 800d212:	89a3      	ldrh	r3, [r4, #12]
 800d214:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d218:	81a3      	strh	r3, [r4, #12]
 800d21a:	2300      	movs	r3, #0
 800d21c:	6063      	str	r3, [r4, #4]
 800d21e:	6923      	ldr	r3, [r4, #16]
 800d220:	6023      	str	r3, [r4, #0]
 800d222:	89a3      	ldrh	r3, [r4, #12]
 800d224:	f043 0308 	orr.w	r3, r3, #8
 800d228:	81a3      	strh	r3, [r4, #12]
 800d22a:	6923      	ldr	r3, [r4, #16]
 800d22c:	b94b      	cbnz	r3, 800d242 <__swsetup_r+0x7a>
 800d22e:	89a3      	ldrh	r3, [r4, #12]
 800d230:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d234:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d238:	d003      	beq.n	800d242 <__swsetup_r+0x7a>
 800d23a:	4621      	mov	r1, r4
 800d23c:	4628      	mov	r0, r5
 800d23e:	f001 ff3d 	bl	800f0bc <__smakebuf_r>
 800d242:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d246:	f013 0201 	ands.w	r2, r3, #1
 800d24a:	d00a      	beq.n	800d262 <__swsetup_r+0x9a>
 800d24c:	2200      	movs	r2, #0
 800d24e:	60a2      	str	r2, [r4, #8]
 800d250:	6962      	ldr	r2, [r4, #20]
 800d252:	4252      	negs	r2, r2
 800d254:	61a2      	str	r2, [r4, #24]
 800d256:	6922      	ldr	r2, [r4, #16]
 800d258:	b942      	cbnz	r2, 800d26c <__swsetup_r+0xa4>
 800d25a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d25e:	d1c5      	bne.n	800d1ec <__swsetup_r+0x24>
 800d260:	bd38      	pop	{r3, r4, r5, pc}
 800d262:	0799      	lsls	r1, r3, #30
 800d264:	bf58      	it	pl
 800d266:	6962      	ldrpl	r2, [r4, #20]
 800d268:	60a2      	str	r2, [r4, #8]
 800d26a:	e7f4      	b.n	800d256 <__swsetup_r+0x8e>
 800d26c:	2000      	movs	r0, #0
 800d26e:	e7f7      	b.n	800d260 <__swsetup_r+0x98>
 800d270:	20000284 	.word	0x20000284

0800d274 <memset>:
 800d274:	4402      	add	r2, r0
 800d276:	4603      	mov	r3, r0
 800d278:	4293      	cmp	r3, r2
 800d27a:	d100      	bne.n	800d27e <memset+0xa>
 800d27c:	4770      	bx	lr
 800d27e:	f803 1b01 	strb.w	r1, [r3], #1
 800d282:	e7f9      	b.n	800d278 <memset+0x4>

0800d284 <_localeconv_r>:
 800d284:	4800      	ldr	r0, [pc, #0]	@ (800d288 <_localeconv_r+0x4>)
 800d286:	4770      	bx	lr
 800d288:	20000208 	.word	0x20000208

0800d28c <_close_r>:
 800d28c:	b538      	push	{r3, r4, r5, lr}
 800d28e:	4d06      	ldr	r5, [pc, #24]	@ (800d2a8 <_close_r+0x1c>)
 800d290:	2300      	movs	r3, #0
 800d292:	4604      	mov	r4, r0
 800d294:	4608      	mov	r0, r1
 800d296:	602b      	str	r3, [r5, #0]
 800d298:	f7f6 fec2 	bl	8004020 <_close>
 800d29c:	1c43      	adds	r3, r0, #1
 800d29e:	d102      	bne.n	800d2a6 <_close_r+0x1a>
 800d2a0:	682b      	ldr	r3, [r5, #0]
 800d2a2:	b103      	cbz	r3, 800d2a6 <_close_r+0x1a>
 800d2a4:	6023      	str	r3, [r4, #0]
 800d2a6:	bd38      	pop	{r3, r4, r5, pc}
 800d2a8:	2000255c 	.word	0x2000255c

0800d2ac <_lseek_r>:
 800d2ac:	b538      	push	{r3, r4, r5, lr}
 800d2ae:	4d07      	ldr	r5, [pc, #28]	@ (800d2cc <_lseek_r+0x20>)
 800d2b0:	4604      	mov	r4, r0
 800d2b2:	4608      	mov	r0, r1
 800d2b4:	4611      	mov	r1, r2
 800d2b6:	2200      	movs	r2, #0
 800d2b8:	602a      	str	r2, [r5, #0]
 800d2ba:	461a      	mov	r2, r3
 800d2bc:	f7f6 fed7 	bl	800406e <_lseek>
 800d2c0:	1c43      	adds	r3, r0, #1
 800d2c2:	d102      	bne.n	800d2ca <_lseek_r+0x1e>
 800d2c4:	682b      	ldr	r3, [r5, #0]
 800d2c6:	b103      	cbz	r3, 800d2ca <_lseek_r+0x1e>
 800d2c8:	6023      	str	r3, [r4, #0]
 800d2ca:	bd38      	pop	{r3, r4, r5, pc}
 800d2cc:	2000255c 	.word	0x2000255c

0800d2d0 <_read_r>:
 800d2d0:	b538      	push	{r3, r4, r5, lr}
 800d2d2:	4d07      	ldr	r5, [pc, #28]	@ (800d2f0 <_read_r+0x20>)
 800d2d4:	4604      	mov	r4, r0
 800d2d6:	4608      	mov	r0, r1
 800d2d8:	4611      	mov	r1, r2
 800d2da:	2200      	movs	r2, #0
 800d2dc:	602a      	str	r2, [r5, #0]
 800d2de:	461a      	mov	r2, r3
 800d2e0:	f7f6 fe81 	bl	8003fe6 <_read>
 800d2e4:	1c43      	adds	r3, r0, #1
 800d2e6:	d102      	bne.n	800d2ee <_read_r+0x1e>
 800d2e8:	682b      	ldr	r3, [r5, #0]
 800d2ea:	b103      	cbz	r3, 800d2ee <_read_r+0x1e>
 800d2ec:	6023      	str	r3, [r4, #0]
 800d2ee:	bd38      	pop	{r3, r4, r5, pc}
 800d2f0:	2000255c 	.word	0x2000255c

0800d2f4 <_write_r>:
 800d2f4:	b538      	push	{r3, r4, r5, lr}
 800d2f6:	4d07      	ldr	r5, [pc, #28]	@ (800d314 <_write_r+0x20>)
 800d2f8:	4604      	mov	r4, r0
 800d2fa:	4608      	mov	r0, r1
 800d2fc:	4611      	mov	r1, r2
 800d2fe:	2200      	movs	r2, #0
 800d300:	602a      	str	r2, [r5, #0]
 800d302:	461a      	mov	r2, r3
 800d304:	f7f6 fc58 	bl	8003bb8 <_write>
 800d308:	1c43      	adds	r3, r0, #1
 800d30a:	d102      	bne.n	800d312 <_write_r+0x1e>
 800d30c:	682b      	ldr	r3, [r5, #0]
 800d30e:	b103      	cbz	r3, 800d312 <_write_r+0x1e>
 800d310:	6023      	str	r3, [r4, #0]
 800d312:	bd38      	pop	{r3, r4, r5, pc}
 800d314:	2000255c 	.word	0x2000255c

0800d318 <__errno>:
 800d318:	4b01      	ldr	r3, [pc, #4]	@ (800d320 <__errno+0x8>)
 800d31a:	6818      	ldr	r0, [r3, #0]
 800d31c:	4770      	bx	lr
 800d31e:	bf00      	nop
 800d320:	20000284 	.word	0x20000284

0800d324 <__libc_init_array>:
 800d324:	b570      	push	{r4, r5, r6, lr}
 800d326:	4d0d      	ldr	r5, [pc, #52]	@ (800d35c <__libc_init_array+0x38>)
 800d328:	4c0d      	ldr	r4, [pc, #52]	@ (800d360 <__libc_init_array+0x3c>)
 800d32a:	1b64      	subs	r4, r4, r5
 800d32c:	10a4      	asrs	r4, r4, #2
 800d32e:	2600      	movs	r6, #0
 800d330:	42a6      	cmp	r6, r4
 800d332:	d109      	bne.n	800d348 <__libc_init_array+0x24>
 800d334:	4d0b      	ldr	r5, [pc, #44]	@ (800d364 <__libc_init_array+0x40>)
 800d336:	4c0c      	ldr	r4, [pc, #48]	@ (800d368 <__libc_init_array+0x44>)
 800d338:	f003 fae2 	bl	8010900 <_init>
 800d33c:	1b64      	subs	r4, r4, r5
 800d33e:	10a4      	asrs	r4, r4, #2
 800d340:	2600      	movs	r6, #0
 800d342:	42a6      	cmp	r6, r4
 800d344:	d105      	bne.n	800d352 <__libc_init_array+0x2e>
 800d346:	bd70      	pop	{r4, r5, r6, pc}
 800d348:	f855 3b04 	ldr.w	r3, [r5], #4
 800d34c:	4798      	blx	r3
 800d34e:	3601      	adds	r6, #1
 800d350:	e7ee      	b.n	800d330 <__libc_init_array+0xc>
 800d352:	f855 3b04 	ldr.w	r3, [r5], #4
 800d356:	4798      	blx	r3
 800d358:	3601      	adds	r6, #1
 800d35a:	e7f2      	b.n	800d342 <__libc_init_array+0x1e>
 800d35c:	08011890 	.word	0x08011890
 800d360:	08011890 	.word	0x08011890
 800d364:	08011890 	.word	0x08011890
 800d368:	08011894 	.word	0x08011894

0800d36c <__retarget_lock_init_recursive>:
 800d36c:	4770      	bx	lr

0800d36e <__retarget_lock_acquire_recursive>:
 800d36e:	4770      	bx	lr

0800d370 <__retarget_lock_release_recursive>:
 800d370:	4770      	bx	lr

0800d372 <strcpy>:
 800d372:	4603      	mov	r3, r0
 800d374:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d378:	f803 2b01 	strb.w	r2, [r3], #1
 800d37c:	2a00      	cmp	r2, #0
 800d37e:	d1f9      	bne.n	800d374 <strcpy+0x2>
 800d380:	4770      	bx	lr

0800d382 <memcpy>:
 800d382:	440a      	add	r2, r1
 800d384:	4291      	cmp	r1, r2
 800d386:	f100 33ff 	add.w	r3, r0, #4294967295
 800d38a:	d100      	bne.n	800d38e <memcpy+0xc>
 800d38c:	4770      	bx	lr
 800d38e:	b510      	push	{r4, lr}
 800d390:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d394:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d398:	4291      	cmp	r1, r2
 800d39a:	d1f9      	bne.n	800d390 <memcpy+0xe>
 800d39c:	bd10      	pop	{r4, pc}
	...

0800d3a0 <__assert_func>:
 800d3a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d3a2:	4614      	mov	r4, r2
 800d3a4:	461a      	mov	r2, r3
 800d3a6:	4b09      	ldr	r3, [pc, #36]	@ (800d3cc <__assert_func+0x2c>)
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4605      	mov	r5, r0
 800d3ac:	68d8      	ldr	r0, [r3, #12]
 800d3ae:	b14c      	cbz	r4, 800d3c4 <__assert_func+0x24>
 800d3b0:	4b07      	ldr	r3, [pc, #28]	@ (800d3d0 <__assert_func+0x30>)
 800d3b2:	9100      	str	r1, [sp, #0]
 800d3b4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d3b8:	4906      	ldr	r1, [pc, #24]	@ (800d3d4 <__assert_func+0x34>)
 800d3ba:	462b      	mov	r3, r5
 800d3bc:	f001 fe46 	bl	800f04c <fiprintf>
 800d3c0:	f001 ff04 	bl	800f1cc <abort>
 800d3c4:	4b04      	ldr	r3, [pc, #16]	@ (800d3d8 <__assert_func+0x38>)
 800d3c6:	461c      	mov	r4, r3
 800d3c8:	e7f3      	b.n	800d3b2 <__assert_func+0x12>
 800d3ca:	bf00      	nop
 800d3cc:	20000284 	.word	0x20000284
 800d3d0:	08011145 	.word	0x08011145
 800d3d4:	08011152 	.word	0x08011152
 800d3d8:	08011180 	.word	0x08011180

0800d3dc <quorem>:
 800d3dc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d3e0:	6903      	ldr	r3, [r0, #16]
 800d3e2:	690c      	ldr	r4, [r1, #16]
 800d3e4:	42a3      	cmp	r3, r4
 800d3e6:	4607      	mov	r7, r0
 800d3e8:	db7e      	blt.n	800d4e8 <quorem+0x10c>
 800d3ea:	3c01      	subs	r4, #1
 800d3ec:	f101 0814 	add.w	r8, r1, #20
 800d3f0:	00a3      	lsls	r3, r4, #2
 800d3f2:	f100 0514 	add.w	r5, r0, #20
 800d3f6:	9300      	str	r3, [sp, #0]
 800d3f8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d3fc:	9301      	str	r3, [sp, #4]
 800d3fe:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800d402:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d406:	3301      	adds	r3, #1
 800d408:	429a      	cmp	r2, r3
 800d40a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800d40e:	fbb2 f6f3 	udiv	r6, r2, r3
 800d412:	d32e      	bcc.n	800d472 <quorem+0x96>
 800d414:	f04f 0a00 	mov.w	sl, #0
 800d418:	46c4      	mov	ip, r8
 800d41a:	46ae      	mov	lr, r5
 800d41c:	46d3      	mov	fp, sl
 800d41e:	f85c 3b04 	ldr.w	r3, [ip], #4
 800d422:	b298      	uxth	r0, r3
 800d424:	fb06 a000 	mla	r0, r6, r0, sl
 800d428:	0c02      	lsrs	r2, r0, #16
 800d42a:	0c1b      	lsrs	r3, r3, #16
 800d42c:	fb06 2303 	mla	r3, r6, r3, r2
 800d430:	f8de 2000 	ldr.w	r2, [lr]
 800d434:	b280      	uxth	r0, r0
 800d436:	b292      	uxth	r2, r2
 800d438:	1a12      	subs	r2, r2, r0
 800d43a:	445a      	add	r2, fp
 800d43c:	f8de 0000 	ldr.w	r0, [lr]
 800d440:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800d444:	b29b      	uxth	r3, r3
 800d446:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800d44a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800d44e:	b292      	uxth	r2, r2
 800d450:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800d454:	45e1      	cmp	r9, ip
 800d456:	f84e 2b04 	str.w	r2, [lr], #4
 800d45a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800d45e:	d2de      	bcs.n	800d41e <quorem+0x42>
 800d460:	9b00      	ldr	r3, [sp, #0]
 800d462:	58eb      	ldr	r3, [r5, r3]
 800d464:	b92b      	cbnz	r3, 800d472 <quorem+0x96>
 800d466:	9b01      	ldr	r3, [sp, #4]
 800d468:	3b04      	subs	r3, #4
 800d46a:	429d      	cmp	r5, r3
 800d46c:	461a      	mov	r2, r3
 800d46e:	d32f      	bcc.n	800d4d0 <quorem+0xf4>
 800d470:	613c      	str	r4, [r7, #16]
 800d472:	4638      	mov	r0, r7
 800d474:	f001 f990 	bl	800e798 <__mcmp>
 800d478:	2800      	cmp	r0, #0
 800d47a:	db25      	blt.n	800d4c8 <quorem+0xec>
 800d47c:	4629      	mov	r1, r5
 800d47e:	2000      	movs	r0, #0
 800d480:	f858 2b04 	ldr.w	r2, [r8], #4
 800d484:	f8d1 c000 	ldr.w	ip, [r1]
 800d488:	fa1f fe82 	uxth.w	lr, r2
 800d48c:	fa1f f38c 	uxth.w	r3, ip
 800d490:	eba3 030e 	sub.w	r3, r3, lr
 800d494:	4403      	add	r3, r0
 800d496:	0c12      	lsrs	r2, r2, #16
 800d498:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800d49c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800d4a0:	b29b      	uxth	r3, r3
 800d4a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800d4a6:	45c1      	cmp	r9, r8
 800d4a8:	f841 3b04 	str.w	r3, [r1], #4
 800d4ac:	ea4f 4022 	mov.w	r0, r2, asr #16
 800d4b0:	d2e6      	bcs.n	800d480 <quorem+0xa4>
 800d4b2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800d4b6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800d4ba:	b922      	cbnz	r2, 800d4c6 <quorem+0xea>
 800d4bc:	3b04      	subs	r3, #4
 800d4be:	429d      	cmp	r5, r3
 800d4c0:	461a      	mov	r2, r3
 800d4c2:	d30b      	bcc.n	800d4dc <quorem+0x100>
 800d4c4:	613c      	str	r4, [r7, #16]
 800d4c6:	3601      	adds	r6, #1
 800d4c8:	4630      	mov	r0, r6
 800d4ca:	b003      	add	sp, #12
 800d4cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4d0:	6812      	ldr	r2, [r2, #0]
 800d4d2:	3b04      	subs	r3, #4
 800d4d4:	2a00      	cmp	r2, #0
 800d4d6:	d1cb      	bne.n	800d470 <quorem+0x94>
 800d4d8:	3c01      	subs	r4, #1
 800d4da:	e7c6      	b.n	800d46a <quorem+0x8e>
 800d4dc:	6812      	ldr	r2, [r2, #0]
 800d4de:	3b04      	subs	r3, #4
 800d4e0:	2a00      	cmp	r2, #0
 800d4e2:	d1ef      	bne.n	800d4c4 <quorem+0xe8>
 800d4e4:	3c01      	subs	r4, #1
 800d4e6:	e7ea      	b.n	800d4be <quorem+0xe2>
 800d4e8:	2000      	movs	r0, #0
 800d4ea:	e7ee      	b.n	800d4ca <quorem+0xee>
 800d4ec:	0000      	movs	r0, r0
	...

0800d4f0 <_dtoa_r>:
 800d4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4f4:	69c7      	ldr	r7, [r0, #28]
 800d4f6:	b097      	sub	sp, #92	@ 0x5c
 800d4f8:	ed8d 0b04 	vstr	d0, [sp, #16]
 800d4fc:	ec55 4b10 	vmov	r4, r5, d0
 800d500:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800d502:	9107      	str	r1, [sp, #28]
 800d504:	4681      	mov	r9, r0
 800d506:	920c      	str	r2, [sp, #48]	@ 0x30
 800d508:	9311      	str	r3, [sp, #68]	@ 0x44
 800d50a:	b97f      	cbnz	r7, 800d52c <_dtoa_r+0x3c>
 800d50c:	2010      	movs	r0, #16
 800d50e:	f000 fe09 	bl	800e124 <malloc>
 800d512:	4602      	mov	r2, r0
 800d514:	f8c9 001c 	str.w	r0, [r9, #28]
 800d518:	b920      	cbnz	r0, 800d524 <_dtoa_r+0x34>
 800d51a:	4ba9      	ldr	r3, [pc, #676]	@ (800d7c0 <_dtoa_r+0x2d0>)
 800d51c:	21ef      	movs	r1, #239	@ 0xef
 800d51e:	48a9      	ldr	r0, [pc, #676]	@ (800d7c4 <_dtoa_r+0x2d4>)
 800d520:	f7ff ff3e 	bl	800d3a0 <__assert_func>
 800d524:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800d528:	6007      	str	r7, [r0, #0]
 800d52a:	60c7      	str	r7, [r0, #12]
 800d52c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d530:	6819      	ldr	r1, [r3, #0]
 800d532:	b159      	cbz	r1, 800d54c <_dtoa_r+0x5c>
 800d534:	685a      	ldr	r2, [r3, #4]
 800d536:	604a      	str	r2, [r1, #4]
 800d538:	2301      	movs	r3, #1
 800d53a:	4093      	lsls	r3, r2
 800d53c:	608b      	str	r3, [r1, #8]
 800d53e:	4648      	mov	r0, r9
 800d540:	f000 fef8 	bl	800e334 <_Bfree>
 800d544:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d548:	2200      	movs	r2, #0
 800d54a:	601a      	str	r2, [r3, #0]
 800d54c:	1e2b      	subs	r3, r5, #0
 800d54e:	bfb9      	ittee	lt
 800d550:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800d554:	9305      	strlt	r3, [sp, #20]
 800d556:	2300      	movge	r3, #0
 800d558:	6033      	strge	r3, [r6, #0]
 800d55a:	9f05      	ldr	r7, [sp, #20]
 800d55c:	4b9a      	ldr	r3, [pc, #616]	@ (800d7c8 <_dtoa_r+0x2d8>)
 800d55e:	bfbc      	itt	lt
 800d560:	2201      	movlt	r2, #1
 800d562:	6032      	strlt	r2, [r6, #0]
 800d564:	43bb      	bics	r3, r7
 800d566:	d112      	bne.n	800d58e <_dtoa_r+0x9e>
 800d568:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d56a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800d56e:	6013      	str	r3, [r2, #0]
 800d570:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d574:	4323      	orrs	r3, r4
 800d576:	f000 855a 	beq.w	800e02e <_dtoa_r+0xb3e>
 800d57a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d57c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800d7dc <_dtoa_r+0x2ec>
 800d580:	2b00      	cmp	r3, #0
 800d582:	f000 855c 	beq.w	800e03e <_dtoa_r+0xb4e>
 800d586:	f10a 0303 	add.w	r3, sl, #3
 800d58a:	f000 bd56 	b.w	800e03a <_dtoa_r+0xb4a>
 800d58e:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d592:	2200      	movs	r2, #0
 800d594:	ec51 0b17 	vmov	r0, r1, d7
 800d598:	2300      	movs	r3, #0
 800d59a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800d59e:	f7f3 fa9b 	bl	8000ad8 <__aeabi_dcmpeq>
 800d5a2:	4680      	mov	r8, r0
 800d5a4:	b158      	cbz	r0, 800d5be <_dtoa_r+0xce>
 800d5a6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	6013      	str	r3, [r2, #0]
 800d5ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800d5ae:	b113      	cbz	r3, 800d5b6 <_dtoa_r+0xc6>
 800d5b0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800d5b2:	4b86      	ldr	r3, [pc, #536]	@ (800d7cc <_dtoa_r+0x2dc>)
 800d5b4:	6013      	str	r3, [r2, #0]
 800d5b6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 800d7e0 <_dtoa_r+0x2f0>
 800d5ba:	f000 bd40 	b.w	800e03e <_dtoa_r+0xb4e>
 800d5be:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800d5c2:	aa14      	add	r2, sp, #80	@ 0x50
 800d5c4:	a915      	add	r1, sp, #84	@ 0x54
 800d5c6:	4648      	mov	r0, r9
 800d5c8:	f001 f996 	bl	800e8f8 <__d2b>
 800d5cc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800d5d0:	9002      	str	r0, [sp, #8]
 800d5d2:	2e00      	cmp	r6, #0
 800d5d4:	d078      	beq.n	800d6c8 <_dtoa_r+0x1d8>
 800d5d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d5d8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800d5dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d5e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d5e4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800d5e8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800d5ec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800d5f0:	4619      	mov	r1, r3
 800d5f2:	2200      	movs	r2, #0
 800d5f4:	4b76      	ldr	r3, [pc, #472]	@ (800d7d0 <_dtoa_r+0x2e0>)
 800d5f6:	f7f2 fe4f 	bl	8000298 <__aeabi_dsub>
 800d5fa:	a36b      	add	r3, pc, #428	@ (adr r3, 800d7a8 <_dtoa_r+0x2b8>)
 800d5fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d600:	f7f3 f802 	bl	8000608 <__aeabi_dmul>
 800d604:	a36a      	add	r3, pc, #424	@ (adr r3, 800d7b0 <_dtoa_r+0x2c0>)
 800d606:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d60a:	f7f2 fe47 	bl	800029c <__adddf3>
 800d60e:	4604      	mov	r4, r0
 800d610:	4630      	mov	r0, r6
 800d612:	460d      	mov	r5, r1
 800d614:	f7f2 ff8e 	bl	8000534 <__aeabi_i2d>
 800d618:	a367      	add	r3, pc, #412	@ (adr r3, 800d7b8 <_dtoa_r+0x2c8>)
 800d61a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d61e:	f7f2 fff3 	bl	8000608 <__aeabi_dmul>
 800d622:	4602      	mov	r2, r0
 800d624:	460b      	mov	r3, r1
 800d626:	4620      	mov	r0, r4
 800d628:	4629      	mov	r1, r5
 800d62a:	f7f2 fe37 	bl	800029c <__adddf3>
 800d62e:	4604      	mov	r4, r0
 800d630:	460d      	mov	r5, r1
 800d632:	f7f3 fa99 	bl	8000b68 <__aeabi_d2iz>
 800d636:	2200      	movs	r2, #0
 800d638:	4607      	mov	r7, r0
 800d63a:	2300      	movs	r3, #0
 800d63c:	4620      	mov	r0, r4
 800d63e:	4629      	mov	r1, r5
 800d640:	f7f3 fa54 	bl	8000aec <__aeabi_dcmplt>
 800d644:	b140      	cbz	r0, 800d658 <_dtoa_r+0x168>
 800d646:	4638      	mov	r0, r7
 800d648:	f7f2 ff74 	bl	8000534 <__aeabi_i2d>
 800d64c:	4622      	mov	r2, r4
 800d64e:	462b      	mov	r3, r5
 800d650:	f7f3 fa42 	bl	8000ad8 <__aeabi_dcmpeq>
 800d654:	b900      	cbnz	r0, 800d658 <_dtoa_r+0x168>
 800d656:	3f01      	subs	r7, #1
 800d658:	2f16      	cmp	r7, #22
 800d65a:	d852      	bhi.n	800d702 <_dtoa_r+0x212>
 800d65c:	4b5d      	ldr	r3, [pc, #372]	@ (800d7d4 <_dtoa_r+0x2e4>)
 800d65e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d662:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d666:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d66a:	f7f3 fa3f 	bl	8000aec <__aeabi_dcmplt>
 800d66e:	2800      	cmp	r0, #0
 800d670:	d049      	beq.n	800d706 <_dtoa_r+0x216>
 800d672:	3f01      	subs	r7, #1
 800d674:	2300      	movs	r3, #0
 800d676:	9310      	str	r3, [sp, #64]	@ 0x40
 800d678:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800d67a:	1b9b      	subs	r3, r3, r6
 800d67c:	1e5a      	subs	r2, r3, #1
 800d67e:	bf45      	ittet	mi
 800d680:	f1c3 0301 	rsbmi	r3, r3, #1
 800d684:	9300      	strmi	r3, [sp, #0]
 800d686:	2300      	movpl	r3, #0
 800d688:	2300      	movmi	r3, #0
 800d68a:	9206      	str	r2, [sp, #24]
 800d68c:	bf54      	ite	pl
 800d68e:	9300      	strpl	r3, [sp, #0]
 800d690:	9306      	strmi	r3, [sp, #24]
 800d692:	2f00      	cmp	r7, #0
 800d694:	db39      	blt.n	800d70a <_dtoa_r+0x21a>
 800d696:	9b06      	ldr	r3, [sp, #24]
 800d698:	970d      	str	r7, [sp, #52]	@ 0x34
 800d69a:	443b      	add	r3, r7
 800d69c:	9306      	str	r3, [sp, #24]
 800d69e:	2300      	movs	r3, #0
 800d6a0:	9308      	str	r3, [sp, #32]
 800d6a2:	9b07      	ldr	r3, [sp, #28]
 800d6a4:	2b09      	cmp	r3, #9
 800d6a6:	d863      	bhi.n	800d770 <_dtoa_r+0x280>
 800d6a8:	2b05      	cmp	r3, #5
 800d6aa:	bfc4      	itt	gt
 800d6ac:	3b04      	subgt	r3, #4
 800d6ae:	9307      	strgt	r3, [sp, #28]
 800d6b0:	9b07      	ldr	r3, [sp, #28]
 800d6b2:	f1a3 0302 	sub.w	r3, r3, #2
 800d6b6:	bfcc      	ite	gt
 800d6b8:	2400      	movgt	r4, #0
 800d6ba:	2401      	movle	r4, #1
 800d6bc:	2b03      	cmp	r3, #3
 800d6be:	d863      	bhi.n	800d788 <_dtoa_r+0x298>
 800d6c0:	e8df f003 	tbb	[pc, r3]
 800d6c4:	2b375452 	.word	0x2b375452
 800d6c8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800d6cc:	441e      	add	r6, r3
 800d6ce:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800d6d2:	2b20      	cmp	r3, #32
 800d6d4:	bfc1      	itttt	gt
 800d6d6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800d6da:	409f      	lslgt	r7, r3
 800d6dc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800d6e0:	fa24 f303 	lsrgt.w	r3, r4, r3
 800d6e4:	bfd6      	itet	le
 800d6e6:	f1c3 0320 	rsble	r3, r3, #32
 800d6ea:	ea47 0003 	orrgt.w	r0, r7, r3
 800d6ee:	fa04 f003 	lslle.w	r0, r4, r3
 800d6f2:	f7f2 ff0f 	bl	8000514 <__aeabi_ui2d>
 800d6f6:	2201      	movs	r2, #1
 800d6f8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800d6fc:	3e01      	subs	r6, #1
 800d6fe:	9212      	str	r2, [sp, #72]	@ 0x48
 800d700:	e776      	b.n	800d5f0 <_dtoa_r+0x100>
 800d702:	2301      	movs	r3, #1
 800d704:	e7b7      	b.n	800d676 <_dtoa_r+0x186>
 800d706:	9010      	str	r0, [sp, #64]	@ 0x40
 800d708:	e7b6      	b.n	800d678 <_dtoa_r+0x188>
 800d70a:	9b00      	ldr	r3, [sp, #0]
 800d70c:	1bdb      	subs	r3, r3, r7
 800d70e:	9300      	str	r3, [sp, #0]
 800d710:	427b      	negs	r3, r7
 800d712:	9308      	str	r3, [sp, #32]
 800d714:	2300      	movs	r3, #0
 800d716:	930d      	str	r3, [sp, #52]	@ 0x34
 800d718:	e7c3      	b.n	800d6a2 <_dtoa_r+0x1b2>
 800d71a:	2301      	movs	r3, #1
 800d71c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d71e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d720:	eb07 0b03 	add.w	fp, r7, r3
 800d724:	f10b 0301 	add.w	r3, fp, #1
 800d728:	2b01      	cmp	r3, #1
 800d72a:	9303      	str	r3, [sp, #12]
 800d72c:	bfb8      	it	lt
 800d72e:	2301      	movlt	r3, #1
 800d730:	e006      	b.n	800d740 <_dtoa_r+0x250>
 800d732:	2301      	movs	r3, #1
 800d734:	9309      	str	r3, [sp, #36]	@ 0x24
 800d736:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d738:	2b00      	cmp	r3, #0
 800d73a:	dd28      	ble.n	800d78e <_dtoa_r+0x29e>
 800d73c:	469b      	mov	fp, r3
 800d73e:	9303      	str	r3, [sp, #12]
 800d740:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800d744:	2100      	movs	r1, #0
 800d746:	2204      	movs	r2, #4
 800d748:	f102 0514 	add.w	r5, r2, #20
 800d74c:	429d      	cmp	r5, r3
 800d74e:	d926      	bls.n	800d79e <_dtoa_r+0x2ae>
 800d750:	6041      	str	r1, [r0, #4]
 800d752:	4648      	mov	r0, r9
 800d754:	f000 fdae 	bl	800e2b4 <_Balloc>
 800d758:	4682      	mov	sl, r0
 800d75a:	2800      	cmp	r0, #0
 800d75c:	d142      	bne.n	800d7e4 <_dtoa_r+0x2f4>
 800d75e:	4b1e      	ldr	r3, [pc, #120]	@ (800d7d8 <_dtoa_r+0x2e8>)
 800d760:	4602      	mov	r2, r0
 800d762:	f240 11af 	movw	r1, #431	@ 0x1af
 800d766:	e6da      	b.n	800d51e <_dtoa_r+0x2e>
 800d768:	2300      	movs	r3, #0
 800d76a:	e7e3      	b.n	800d734 <_dtoa_r+0x244>
 800d76c:	2300      	movs	r3, #0
 800d76e:	e7d5      	b.n	800d71c <_dtoa_r+0x22c>
 800d770:	2401      	movs	r4, #1
 800d772:	2300      	movs	r3, #0
 800d774:	9307      	str	r3, [sp, #28]
 800d776:	9409      	str	r4, [sp, #36]	@ 0x24
 800d778:	f04f 3bff 	mov.w	fp, #4294967295
 800d77c:	2200      	movs	r2, #0
 800d77e:	f8cd b00c 	str.w	fp, [sp, #12]
 800d782:	2312      	movs	r3, #18
 800d784:	920c      	str	r2, [sp, #48]	@ 0x30
 800d786:	e7db      	b.n	800d740 <_dtoa_r+0x250>
 800d788:	2301      	movs	r3, #1
 800d78a:	9309      	str	r3, [sp, #36]	@ 0x24
 800d78c:	e7f4      	b.n	800d778 <_dtoa_r+0x288>
 800d78e:	f04f 0b01 	mov.w	fp, #1
 800d792:	f8cd b00c 	str.w	fp, [sp, #12]
 800d796:	465b      	mov	r3, fp
 800d798:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800d79c:	e7d0      	b.n	800d740 <_dtoa_r+0x250>
 800d79e:	3101      	adds	r1, #1
 800d7a0:	0052      	lsls	r2, r2, #1
 800d7a2:	e7d1      	b.n	800d748 <_dtoa_r+0x258>
 800d7a4:	f3af 8000 	nop.w
 800d7a8:	636f4361 	.word	0x636f4361
 800d7ac:	3fd287a7 	.word	0x3fd287a7
 800d7b0:	8b60c8b3 	.word	0x8b60c8b3
 800d7b4:	3fc68a28 	.word	0x3fc68a28
 800d7b8:	509f79fb 	.word	0x509f79fb
 800d7bc:	3fd34413 	.word	0x3fd34413
 800d7c0:	08011098 	.word	0x08011098
 800d7c4:	0801118e 	.word	0x0801118e
 800d7c8:	7ff00000 	.word	0x7ff00000
 800d7cc:	08011118 	.word	0x08011118
 800d7d0:	3ff80000 	.word	0x3ff80000
 800d7d4:	08011398 	.word	0x08011398
 800d7d8:	080111e6 	.word	0x080111e6
 800d7dc:	0801118a 	.word	0x0801118a
 800d7e0:	08011117 	.word	0x08011117
 800d7e4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 800d7e8:	6018      	str	r0, [r3, #0]
 800d7ea:	9b03      	ldr	r3, [sp, #12]
 800d7ec:	2b0e      	cmp	r3, #14
 800d7ee:	f200 80a1 	bhi.w	800d934 <_dtoa_r+0x444>
 800d7f2:	2c00      	cmp	r4, #0
 800d7f4:	f000 809e 	beq.w	800d934 <_dtoa_r+0x444>
 800d7f8:	2f00      	cmp	r7, #0
 800d7fa:	dd33      	ble.n	800d864 <_dtoa_r+0x374>
 800d7fc:	4b9c      	ldr	r3, [pc, #624]	@ (800da70 <_dtoa_r+0x580>)
 800d7fe:	f007 020f 	and.w	r2, r7, #15
 800d802:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d806:	ed93 7b00 	vldr	d7, [r3]
 800d80a:	05f8      	lsls	r0, r7, #23
 800d80c:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 800d810:	ea4f 1427 	mov.w	r4, r7, asr #4
 800d814:	d516      	bpl.n	800d844 <_dtoa_r+0x354>
 800d816:	4b97      	ldr	r3, [pc, #604]	@ (800da74 <_dtoa_r+0x584>)
 800d818:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d81c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800d820:	f7f3 f81c 	bl	800085c <__aeabi_ddiv>
 800d824:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d828:	f004 040f 	and.w	r4, r4, #15
 800d82c:	2603      	movs	r6, #3
 800d82e:	4d91      	ldr	r5, [pc, #580]	@ (800da74 <_dtoa_r+0x584>)
 800d830:	b954      	cbnz	r4, 800d848 <_dtoa_r+0x358>
 800d832:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800d836:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d83a:	f7f3 f80f 	bl	800085c <__aeabi_ddiv>
 800d83e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d842:	e028      	b.n	800d896 <_dtoa_r+0x3a6>
 800d844:	2602      	movs	r6, #2
 800d846:	e7f2      	b.n	800d82e <_dtoa_r+0x33e>
 800d848:	07e1      	lsls	r1, r4, #31
 800d84a:	d508      	bpl.n	800d85e <_dtoa_r+0x36e>
 800d84c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800d850:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d854:	f7f2 fed8 	bl	8000608 <__aeabi_dmul>
 800d858:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d85c:	3601      	adds	r6, #1
 800d85e:	1064      	asrs	r4, r4, #1
 800d860:	3508      	adds	r5, #8
 800d862:	e7e5      	b.n	800d830 <_dtoa_r+0x340>
 800d864:	f000 80af 	beq.w	800d9c6 <_dtoa_r+0x4d6>
 800d868:	427c      	negs	r4, r7
 800d86a:	4b81      	ldr	r3, [pc, #516]	@ (800da70 <_dtoa_r+0x580>)
 800d86c:	4d81      	ldr	r5, [pc, #516]	@ (800da74 <_dtoa_r+0x584>)
 800d86e:	f004 020f 	and.w	r2, r4, #15
 800d872:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d876:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d87a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800d87e:	f7f2 fec3 	bl	8000608 <__aeabi_dmul>
 800d882:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d886:	1124      	asrs	r4, r4, #4
 800d888:	2300      	movs	r3, #0
 800d88a:	2602      	movs	r6, #2
 800d88c:	2c00      	cmp	r4, #0
 800d88e:	f040 808f 	bne.w	800d9b0 <_dtoa_r+0x4c0>
 800d892:	2b00      	cmp	r3, #0
 800d894:	d1d3      	bne.n	800d83e <_dtoa_r+0x34e>
 800d896:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800d898:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	f000 8094 	beq.w	800d9ca <_dtoa_r+0x4da>
 800d8a2:	4b75      	ldr	r3, [pc, #468]	@ (800da78 <_dtoa_r+0x588>)
 800d8a4:	2200      	movs	r2, #0
 800d8a6:	4620      	mov	r0, r4
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7f3 f91f 	bl	8000aec <__aeabi_dcmplt>
 800d8ae:	2800      	cmp	r0, #0
 800d8b0:	f000 808b 	beq.w	800d9ca <_dtoa_r+0x4da>
 800d8b4:	9b03      	ldr	r3, [sp, #12]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	f000 8087 	beq.w	800d9ca <_dtoa_r+0x4da>
 800d8bc:	f1bb 0f00 	cmp.w	fp, #0
 800d8c0:	dd34      	ble.n	800d92c <_dtoa_r+0x43c>
 800d8c2:	4620      	mov	r0, r4
 800d8c4:	4b6d      	ldr	r3, [pc, #436]	@ (800da7c <_dtoa_r+0x58c>)
 800d8c6:	2200      	movs	r2, #0
 800d8c8:	4629      	mov	r1, r5
 800d8ca:	f7f2 fe9d 	bl	8000608 <__aeabi_dmul>
 800d8ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8d2:	f107 38ff 	add.w	r8, r7, #4294967295
 800d8d6:	3601      	adds	r6, #1
 800d8d8:	465c      	mov	r4, fp
 800d8da:	4630      	mov	r0, r6
 800d8dc:	f7f2 fe2a 	bl	8000534 <__aeabi_i2d>
 800d8e0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d8e4:	f7f2 fe90 	bl	8000608 <__aeabi_dmul>
 800d8e8:	4b65      	ldr	r3, [pc, #404]	@ (800da80 <_dtoa_r+0x590>)
 800d8ea:	2200      	movs	r2, #0
 800d8ec:	f7f2 fcd6 	bl	800029c <__adddf3>
 800d8f0:	4605      	mov	r5, r0
 800d8f2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800d8f6:	2c00      	cmp	r4, #0
 800d8f8:	d16a      	bne.n	800d9d0 <_dtoa_r+0x4e0>
 800d8fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8fe:	4b61      	ldr	r3, [pc, #388]	@ (800da84 <_dtoa_r+0x594>)
 800d900:	2200      	movs	r2, #0
 800d902:	f7f2 fcc9 	bl	8000298 <__aeabi_dsub>
 800d906:	4602      	mov	r2, r0
 800d908:	460b      	mov	r3, r1
 800d90a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d90e:	462a      	mov	r2, r5
 800d910:	4633      	mov	r3, r6
 800d912:	f7f3 f909 	bl	8000b28 <__aeabi_dcmpgt>
 800d916:	2800      	cmp	r0, #0
 800d918:	f040 8298 	bne.w	800de4c <_dtoa_r+0x95c>
 800d91c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d920:	462a      	mov	r2, r5
 800d922:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800d926:	f7f3 f8e1 	bl	8000aec <__aeabi_dcmplt>
 800d92a:	bb38      	cbnz	r0, 800d97c <_dtoa_r+0x48c>
 800d92c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 800d930:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800d934:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800d936:	2b00      	cmp	r3, #0
 800d938:	f2c0 8157 	blt.w	800dbea <_dtoa_r+0x6fa>
 800d93c:	2f0e      	cmp	r7, #14
 800d93e:	f300 8154 	bgt.w	800dbea <_dtoa_r+0x6fa>
 800d942:	4b4b      	ldr	r3, [pc, #300]	@ (800da70 <_dtoa_r+0x580>)
 800d944:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800d948:	ed93 7b00 	vldr	d7, [r3]
 800d94c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d94e:	2b00      	cmp	r3, #0
 800d950:	ed8d 7b00 	vstr	d7, [sp]
 800d954:	f280 80e5 	bge.w	800db22 <_dtoa_r+0x632>
 800d958:	9b03      	ldr	r3, [sp, #12]
 800d95a:	2b00      	cmp	r3, #0
 800d95c:	f300 80e1 	bgt.w	800db22 <_dtoa_r+0x632>
 800d960:	d10c      	bne.n	800d97c <_dtoa_r+0x48c>
 800d962:	4b48      	ldr	r3, [pc, #288]	@ (800da84 <_dtoa_r+0x594>)
 800d964:	2200      	movs	r2, #0
 800d966:	ec51 0b17 	vmov	r0, r1, d7
 800d96a:	f7f2 fe4d 	bl	8000608 <__aeabi_dmul>
 800d96e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d972:	f7f3 f8cf 	bl	8000b14 <__aeabi_dcmpge>
 800d976:	2800      	cmp	r0, #0
 800d978:	f000 8266 	beq.w	800de48 <_dtoa_r+0x958>
 800d97c:	2400      	movs	r4, #0
 800d97e:	4625      	mov	r5, r4
 800d980:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800d982:	4656      	mov	r6, sl
 800d984:	ea6f 0803 	mvn.w	r8, r3
 800d988:	2700      	movs	r7, #0
 800d98a:	4621      	mov	r1, r4
 800d98c:	4648      	mov	r0, r9
 800d98e:	f000 fcd1 	bl	800e334 <_Bfree>
 800d992:	2d00      	cmp	r5, #0
 800d994:	f000 80bd 	beq.w	800db12 <_dtoa_r+0x622>
 800d998:	b12f      	cbz	r7, 800d9a6 <_dtoa_r+0x4b6>
 800d99a:	42af      	cmp	r7, r5
 800d99c:	d003      	beq.n	800d9a6 <_dtoa_r+0x4b6>
 800d99e:	4639      	mov	r1, r7
 800d9a0:	4648      	mov	r0, r9
 800d9a2:	f000 fcc7 	bl	800e334 <_Bfree>
 800d9a6:	4629      	mov	r1, r5
 800d9a8:	4648      	mov	r0, r9
 800d9aa:	f000 fcc3 	bl	800e334 <_Bfree>
 800d9ae:	e0b0      	b.n	800db12 <_dtoa_r+0x622>
 800d9b0:	07e2      	lsls	r2, r4, #31
 800d9b2:	d505      	bpl.n	800d9c0 <_dtoa_r+0x4d0>
 800d9b4:	e9d5 2300 	ldrd	r2, r3, [r5]
 800d9b8:	f7f2 fe26 	bl	8000608 <__aeabi_dmul>
 800d9bc:	3601      	adds	r6, #1
 800d9be:	2301      	movs	r3, #1
 800d9c0:	1064      	asrs	r4, r4, #1
 800d9c2:	3508      	adds	r5, #8
 800d9c4:	e762      	b.n	800d88c <_dtoa_r+0x39c>
 800d9c6:	2602      	movs	r6, #2
 800d9c8:	e765      	b.n	800d896 <_dtoa_r+0x3a6>
 800d9ca:	9c03      	ldr	r4, [sp, #12]
 800d9cc:	46b8      	mov	r8, r7
 800d9ce:	e784      	b.n	800d8da <_dtoa_r+0x3ea>
 800d9d0:	4b27      	ldr	r3, [pc, #156]	@ (800da70 <_dtoa_r+0x580>)
 800d9d2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800d9d4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d9d8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d9dc:	4454      	add	r4, sl
 800d9de:	2900      	cmp	r1, #0
 800d9e0:	d054      	beq.n	800da8c <_dtoa_r+0x59c>
 800d9e2:	4929      	ldr	r1, [pc, #164]	@ (800da88 <_dtoa_r+0x598>)
 800d9e4:	2000      	movs	r0, #0
 800d9e6:	f7f2 ff39 	bl	800085c <__aeabi_ddiv>
 800d9ea:	4633      	mov	r3, r6
 800d9ec:	462a      	mov	r2, r5
 800d9ee:	f7f2 fc53 	bl	8000298 <__aeabi_dsub>
 800d9f2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800d9f6:	4656      	mov	r6, sl
 800d9f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d9fc:	f7f3 f8b4 	bl	8000b68 <__aeabi_d2iz>
 800da00:	4605      	mov	r5, r0
 800da02:	f7f2 fd97 	bl	8000534 <__aeabi_i2d>
 800da06:	4602      	mov	r2, r0
 800da08:	460b      	mov	r3, r1
 800da0a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da0e:	f7f2 fc43 	bl	8000298 <__aeabi_dsub>
 800da12:	3530      	adds	r5, #48	@ 0x30
 800da14:	4602      	mov	r2, r0
 800da16:	460b      	mov	r3, r1
 800da18:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800da1c:	f806 5b01 	strb.w	r5, [r6], #1
 800da20:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da24:	f7f3 f862 	bl	8000aec <__aeabi_dcmplt>
 800da28:	2800      	cmp	r0, #0
 800da2a:	d172      	bne.n	800db12 <_dtoa_r+0x622>
 800da2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800da30:	4911      	ldr	r1, [pc, #68]	@ (800da78 <_dtoa_r+0x588>)
 800da32:	2000      	movs	r0, #0
 800da34:	f7f2 fc30 	bl	8000298 <__aeabi_dsub>
 800da38:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800da3c:	f7f3 f856 	bl	8000aec <__aeabi_dcmplt>
 800da40:	2800      	cmp	r0, #0
 800da42:	f040 80b4 	bne.w	800dbae <_dtoa_r+0x6be>
 800da46:	42a6      	cmp	r6, r4
 800da48:	f43f af70 	beq.w	800d92c <_dtoa_r+0x43c>
 800da4c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800da50:	4b0a      	ldr	r3, [pc, #40]	@ (800da7c <_dtoa_r+0x58c>)
 800da52:	2200      	movs	r2, #0
 800da54:	f7f2 fdd8 	bl	8000608 <__aeabi_dmul>
 800da58:	4b08      	ldr	r3, [pc, #32]	@ (800da7c <_dtoa_r+0x58c>)
 800da5a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da5e:	2200      	movs	r2, #0
 800da60:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800da64:	f7f2 fdd0 	bl	8000608 <__aeabi_dmul>
 800da68:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800da6c:	e7c4      	b.n	800d9f8 <_dtoa_r+0x508>
 800da6e:	bf00      	nop
 800da70:	08011398 	.word	0x08011398
 800da74:	08011370 	.word	0x08011370
 800da78:	3ff00000 	.word	0x3ff00000
 800da7c:	40240000 	.word	0x40240000
 800da80:	401c0000 	.word	0x401c0000
 800da84:	40140000 	.word	0x40140000
 800da88:	3fe00000 	.word	0x3fe00000
 800da8c:	4631      	mov	r1, r6
 800da8e:	4628      	mov	r0, r5
 800da90:	f7f2 fdba 	bl	8000608 <__aeabi_dmul>
 800da94:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800da98:	9413      	str	r4, [sp, #76]	@ 0x4c
 800da9a:	4656      	mov	r6, sl
 800da9c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800daa0:	f7f3 f862 	bl	8000b68 <__aeabi_d2iz>
 800daa4:	4605      	mov	r5, r0
 800daa6:	f7f2 fd45 	bl	8000534 <__aeabi_i2d>
 800daaa:	4602      	mov	r2, r0
 800daac:	460b      	mov	r3, r1
 800daae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dab2:	f7f2 fbf1 	bl	8000298 <__aeabi_dsub>
 800dab6:	3530      	adds	r5, #48	@ 0x30
 800dab8:	f806 5b01 	strb.w	r5, [r6], #1
 800dabc:	4602      	mov	r2, r0
 800dabe:	460b      	mov	r3, r1
 800dac0:	42a6      	cmp	r6, r4
 800dac2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800dac6:	f04f 0200 	mov.w	r2, #0
 800daca:	d124      	bne.n	800db16 <_dtoa_r+0x626>
 800dacc:	4baf      	ldr	r3, [pc, #700]	@ (800dd8c <_dtoa_r+0x89c>)
 800dace:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800dad2:	f7f2 fbe3 	bl	800029c <__adddf3>
 800dad6:	4602      	mov	r2, r0
 800dad8:	460b      	mov	r3, r1
 800dada:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dade:	f7f3 f823 	bl	8000b28 <__aeabi_dcmpgt>
 800dae2:	2800      	cmp	r0, #0
 800dae4:	d163      	bne.n	800dbae <_dtoa_r+0x6be>
 800dae6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800daea:	49a8      	ldr	r1, [pc, #672]	@ (800dd8c <_dtoa_r+0x89c>)
 800daec:	2000      	movs	r0, #0
 800daee:	f7f2 fbd3 	bl	8000298 <__aeabi_dsub>
 800daf2:	4602      	mov	r2, r0
 800daf4:	460b      	mov	r3, r1
 800daf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800dafa:	f7f2 fff7 	bl	8000aec <__aeabi_dcmplt>
 800dafe:	2800      	cmp	r0, #0
 800db00:	f43f af14 	beq.w	800d92c <_dtoa_r+0x43c>
 800db04:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800db06:	1e73      	subs	r3, r6, #1
 800db08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800db0a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800db0e:	2b30      	cmp	r3, #48	@ 0x30
 800db10:	d0f8      	beq.n	800db04 <_dtoa_r+0x614>
 800db12:	4647      	mov	r7, r8
 800db14:	e03b      	b.n	800db8e <_dtoa_r+0x69e>
 800db16:	4b9e      	ldr	r3, [pc, #632]	@ (800dd90 <_dtoa_r+0x8a0>)
 800db18:	f7f2 fd76 	bl	8000608 <__aeabi_dmul>
 800db1c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800db20:	e7bc      	b.n	800da9c <_dtoa_r+0x5ac>
 800db22:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800db26:	4656      	mov	r6, sl
 800db28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db2c:	4620      	mov	r0, r4
 800db2e:	4629      	mov	r1, r5
 800db30:	f7f2 fe94 	bl	800085c <__aeabi_ddiv>
 800db34:	f7f3 f818 	bl	8000b68 <__aeabi_d2iz>
 800db38:	4680      	mov	r8, r0
 800db3a:	f7f2 fcfb 	bl	8000534 <__aeabi_i2d>
 800db3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db42:	f7f2 fd61 	bl	8000608 <__aeabi_dmul>
 800db46:	4602      	mov	r2, r0
 800db48:	460b      	mov	r3, r1
 800db4a:	4620      	mov	r0, r4
 800db4c:	4629      	mov	r1, r5
 800db4e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800db52:	f7f2 fba1 	bl	8000298 <__aeabi_dsub>
 800db56:	f806 4b01 	strb.w	r4, [r6], #1
 800db5a:	9d03      	ldr	r5, [sp, #12]
 800db5c:	eba6 040a 	sub.w	r4, r6, sl
 800db60:	42a5      	cmp	r5, r4
 800db62:	4602      	mov	r2, r0
 800db64:	460b      	mov	r3, r1
 800db66:	d133      	bne.n	800dbd0 <_dtoa_r+0x6e0>
 800db68:	f7f2 fb98 	bl	800029c <__adddf3>
 800db6c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db70:	4604      	mov	r4, r0
 800db72:	460d      	mov	r5, r1
 800db74:	f7f2 ffd8 	bl	8000b28 <__aeabi_dcmpgt>
 800db78:	b9c0      	cbnz	r0, 800dbac <_dtoa_r+0x6bc>
 800db7a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800db7e:	4620      	mov	r0, r4
 800db80:	4629      	mov	r1, r5
 800db82:	f7f2 ffa9 	bl	8000ad8 <__aeabi_dcmpeq>
 800db86:	b110      	cbz	r0, 800db8e <_dtoa_r+0x69e>
 800db88:	f018 0f01 	tst.w	r8, #1
 800db8c:	d10e      	bne.n	800dbac <_dtoa_r+0x6bc>
 800db8e:	9902      	ldr	r1, [sp, #8]
 800db90:	4648      	mov	r0, r9
 800db92:	f000 fbcf 	bl	800e334 <_Bfree>
 800db96:	2300      	movs	r3, #0
 800db98:	7033      	strb	r3, [r6, #0]
 800db9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800db9c:	3701      	adds	r7, #1
 800db9e:	601f      	str	r7, [r3, #0]
 800dba0:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800dba2:	2b00      	cmp	r3, #0
 800dba4:	f000 824b 	beq.w	800e03e <_dtoa_r+0xb4e>
 800dba8:	601e      	str	r6, [r3, #0]
 800dbaa:	e248      	b.n	800e03e <_dtoa_r+0xb4e>
 800dbac:	46b8      	mov	r8, r7
 800dbae:	4633      	mov	r3, r6
 800dbb0:	461e      	mov	r6, r3
 800dbb2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800dbb6:	2a39      	cmp	r2, #57	@ 0x39
 800dbb8:	d106      	bne.n	800dbc8 <_dtoa_r+0x6d8>
 800dbba:	459a      	cmp	sl, r3
 800dbbc:	d1f8      	bne.n	800dbb0 <_dtoa_r+0x6c0>
 800dbbe:	2230      	movs	r2, #48	@ 0x30
 800dbc0:	f108 0801 	add.w	r8, r8, #1
 800dbc4:	f88a 2000 	strb.w	r2, [sl]
 800dbc8:	781a      	ldrb	r2, [r3, #0]
 800dbca:	3201      	adds	r2, #1
 800dbcc:	701a      	strb	r2, [r3, #0]
 800dbce:	e7a0      	b.n	800db12 <_dtoa_r+0x622>
 800dbd0:	4b6f      	ldr	r3, [pc, #444]	@ (800dd90 <_dtoa_r+0x8a0>)
 800dbd2:	2200      	movs	r2, #0
 800dbd4:	f7f2 fd18 	bl	8000608 <__aeabi_dmul>
 800dbd8:	2200      	movs	r2, #0
 800dbda:	2300      	movs	r3, #0
 800dbdc:	4604      	mov	r4, r0
 800dbde:	460d      	mov	r5, r1
 800dbe0:	f7f2 ff7a 	bl	8000ad8 <__aeabi_dcmpeq>
 800dbe4:	2800      	cmp	r0, #0
 800dbe6:	d09f      	beq.n	800db28 <_dtoa_r+0x638>
 800dbe8:	e7d1      	b.n	800db8e <_dtoa_r+0x69e>
 800dbea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800dbec:	2a00      	cmp	r2, #0
 800dbee:	f000 80ea 	beq.w	800ddc6 <_dtoa_r+0x8d6>
 800dbf2:	9a07      	ldr	r2, [sp, #28]
 800dbf4:	2a01      	cmp	r2, #1
 800dbf6:	f300 80cd 	bgt.w	800dd94 <_dtoa_r+0x8a4>
 800dbfa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800dbfc:	2a00      	cmp	r2, #0
 800dbfe:	f000 80c1 	beq.w	800dd84 <_dtoa_r+0x894>
 800dc02:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800dc06:	9c08      	ldr	r4, [sp, #32]
 800dc08:	9e00      	ldr	r6, [sp, #0]
 800dc0a:	9a00      	ldr	r2, [sp, #0]
 800dc0c:	441a      	add	r2, r3
 800dc0e:	9200      	str	r2, [sp, #0]
 800dc10:	9a06      	ldr	r2, [sp, #24]
 800dc12:	2101      	movs	r1, #1
 800dc14:	441a      	add	r2, r3
 800dc16:	4648      	mov	r0, r9
 800dc18:	9206      	str	r2, [sp, #24]
 800dc1a:	f000 fc3f 	bl	800e49c <__i2b>
 800dc1e:	4605      	mov	r5, r0
 800dc20:	b166      	cbz	r6, 800dc3c <_dtoa_r+0x74c>
 800dc22:	9b06      	ldr	r3, [sp, #24]
 800dc24:	2b00      	cmp	r3, #0
 800dc26:	dd09      	ble.n	800dc3c <_dtoa_r+0x74c>
 800dc28:	42b3      	cmp	r3, r6
 800dc2a:	9a00      	ldr	r2, [sp, #0]
 800dc2c:	bfa8      	it	ge
 800dc2e:	4633      	movge	r3, r6
 800dc30:	1ad2      	subs	r2, r2, r3
 800dc32:	9200      	str	r2, [sp, #0]
 800dc34:	9a06      	ldr	r2, [sp, #24]
 800dc36:	1af6      	subs	r6, r6, r3
 800dc38:	1ad3      	subs	r3, r2, r3
 800dc3a:	9306      	str	r3, [sp, #24]
 800dc3c:	9b08      	ldr	r3, [sp, #32]
 800dc3e:	b30b      	cbz	r3, 800dc84 <_dtoa_r+0x794>
 800dc40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f000 80c6 	beq.w	800ddd4 <_dtoa_r+0x8e4>
 800dc48:	2c00      	cmp	r4, #0
 800dc4a:	f000 80c0 	beq.w	800ddce <_dtoa_r+0x8de>
 800dc4e:	4629      	mov	r1, r5
 800dc50:	4622      	mov	r2, r4
 800dc52:	4648      	mov	r0, r9
 800dc54:	f000 fcda 	bl	800e60c <__pow5mult>
 800dc58:	9a02      	ldr	r2, [sp, #8]
 800dc5a:	4601      	mov	r1, r0
 800dc5c:	4605      	mov	r5, r0
 800dc5e:	4648      	mov	r0, r9
 800dc60:	f000 fc32 	bl	800e4c8 <__multiply>
 800dc64:	9902      	ldr	r1, [sp, #8]
 800dc66:	4680      	mov	r8, r0
 800dc68:	4648      	mov	r0, r9
 800dc6a:	f000 fb63 	bl	800e334 <_Bfree>
 800dc6e:	9b08      	ldr	r3, [sp, #32]
 800dc70:	1b1b      	subs	r3, r3, r4
 800dc72:	9308      	str	r3, [sp, #32]
 800dc74:	f000 80b1 	beq.w	800ddda <_dtoa_r+0x8ea>
 800dc78:	9a08      	ldr	r2, [sp, #32]
 800dc7a:	4641      	mov	r1, r8
 800dc7c:	4648      	mov	r0, r9
 800dc7e:	f000 fcc5 	bl	800e60c <__pow5mult>
 800dc82:	9002      	str	r0, [sp, #8]
 800dc84:	2101      	movs	r1, #1
 800dc86:	4648      	mov	r0, r9
 800dc88:	f000 fc08 	bl	800e49c <__i2b>
 800dc8c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dc8e:	4604      	mov	r4, r0
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	f000 81d8 	beq.w	800e046 <_dtoa_r+0xb56>
 800dc96:	461a      	mov	r2, r3
 800dc98:	4601      	mov	r1, r0
 800dc9a:	4648      	mov	r0, r9
 800dc9c:	f000 fcb6 	bl	800e60c <__pow5mult>
 800dca0:	9b07      	ldr	r3, [sp, #28]
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	4604      	mov	r4, r0
 800dca6:	f300 809f 	bgt.w	800dde8 <_dtoa_r+0x8f8>
 800dcaa:	9b04      	ldr	r3, [sp, #16]
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	f040 8097 	bne.w	800dde0 <_dtoa_r+0x8f0>
 800dcb2:	9b05      	ldr	r3, [sp, #20]
 800dcb4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	f040 8093 	bne.w	800dde4 <_dtoa_r+0x8f4>
 800dcbe:	9b05      	ldr	r3, [sp, #20]
 800dcc0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800dcc4:	0d1b      	lsrs	r3, r3, #20
 800dcc6:	051b      	lsls	r3, r3, #20
 800dcc8:	b133      	cbz	r3, 800dcd8 <_dtoa_r+0x7e8>
 800dcca:	9b00      	ldr	r3, [sp, #0]
 800dccc:	3301      	adds	r3, #1
 800dcce:	9300      	str	r3, [sp, #0]
 800dcd0:	9b06      	ldr	r3, [sp, #24]
 800dcd2:	3301      	adds	r3, #1
 800dcd4:	9306      	str	r3, [sp, #24]
 800dcd6:	2301      	movs	r3, #1
 800dcd8:	9308      	str	r3, [sp, #32]
 800dcda:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dcdc:	2b00      	cmp	r3, #0
 800dcde:	f000 81b8 	beq.w	800e052 <_dtoa_r+0xb62>
 800dce2:	6923      	ldr	r3, [r4, #16]
 800dce4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dce8:	6918      	ldr	r0, [r3, #16]
 800dcea:	f000 fb8b 	bl	800e404 <__hi0bits>
 800dcee:	f1c0 0020 	rsb	r0, r0, #32
 800dcf2:	9b06      	ldr	r3, [sp, #24]
 800dcf4:	4418      	add	r0, r3
 800dcf6:	f010 001f 	ands.w	r0, r0, #31
 800dcfa:	f000 8082 	beq.w	800de02 <_dtoa_r+0x912>
 800dcfe:	f1c0 0320 	rsb	r3, r0, #32
 800dd02:	2b04      	cmp	r3, #4
 800dd04:	dd73      	ble.n	800ddee <_dtoa_r+0x8fe>
 800dd06:	9b00      	ldr	r3, [sp, #0]
 800dd08:	f1c0 001c 	rsb	r0, r0, #28
 800dd0c:	4403      	add	r3, r0
 800dd0e:	9300      	str	r3, [sp, #0]
 800dd10:	9b06      	ldr	r3, [sp, #24]
 800dd12:	4403      	add	r3, r0
 800dd14:	4406      	add	r6, r0
 800dd16:	9306      	str	r3, [sp, #24]
 800dd18:	9b00      	ldr	r3, [sp, #0]
 800dd1a:	2b00      	cmp	r3, #0
 800dd1c:	dd05      	ble.n	800dd2a <_dtoa_r+0x83a>
 800dd1e:	9902      	ldr	r1, [sp, #8]
 800dd20:	461a      	mov	r2, r3
 800dd22:	4648      	mov	r0, r9
 800dd24:	f000 fccc 	bl	800e6c0 <__lshift>
 800dd28:	9002      	str	r0, [sp, #8]
 800dd2a:	9b06      	ldr	r3, [sp, #24]
 800dd2c:	2b00      	cmp	r3, #0
 800dd2e:	dd05      	ble.n	800dd3c <_dtoa_r+0x84c>
 800dd30:	4621      	mov	r1, r4
 800dd32:	461a      	mov	r2, r3
 800dd34:	4648      	mov	r0, r9
 800dd36:	f000 fcc3 	bl	800e6c0 <__lshift>
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	d061      	beq.n	800de06 <_dtoa_r+0x916>
 800dd42:	9802      	ldr	r0, [sp, #8]
 800dd44:	4621      	mov	r1, r4
 800dd46:	f000 fd27 	bl	800e798 <__mcmp>
 800dd4a:	2800      	cmp	r0, #0
 800dd4c:	da5b      	bge.n	800de06 <_dtoa_r+0x916>
 800dd4e:	2300      	movs	r3, #0
 800dd50:	9902      	ldr	r1, [sp, #8]
 800dd52:	220a      	movs	r2, #10
 800dd54:	4648      	mov	r0, r9
 800dd56:	f000 fb0f 	bl	800e378 <__multadd>
 800dd5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dd5c:	9002      	str	r0, [sp, #8]
 800dd5e:	f107 38ff 	add.w	r8, r7, #4294967295
 800dd62:	2b00      	cmp	r3, #0
 800dd64:	f000 8177 	beq.w	800e056 <_dtoa_r+0xb66>
 800dd68:	4629      	mov	r1, r5
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	220a      	movs	r2, #10
 800dd6e:	4648      	mov	r0, r9
 800dd70:	f000 fb02 	bl	800e378 <__multadd>
 800dd74:	f1bb 0f00 	cmp.w	fp, #0
 800dd78:	4605      	mov	r5, r0
 800dd7a:	dc6f      	bgt.n	800de5c <_dtoa_r+0x96c>
 800dd7c:	9b07      	ldr	r3, [sp, #28]
 800dd7e:	2b02      	cmp	r3, #2
 800dd80:	dc49      	bgt.n	800de16 <_dtoa_r+0x926>
 800dd82:	e06b      	b.n	800de5c <_dtoa_r+0x96c>
 800dd84:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800dd86:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800dd8a:	e73c      	b.n	800dc06 <_dtoa_r+0x716>
 800dd8c:	3fe00000 	.word	0x3fe00000
 800dd90:	40240000 	.word	0x40240000
 800dd94:	9b03      	ldr	r3, [sp, #12]
 800dd96:	1e5c      	subs	r4, r3, #1
 800dd98:	9b08      	ldr	r3, [sp, #32]
 800dd9a:	42a3      	cmp	r3, r4
 800dd9c:	db09      	blt.n	800ddb2 <_dtoa_r+0x8c2>
 800dd9e:	1b1c      	subs	r4, r3, r4
 800dda0:	9b03      	ldr	r3, [sp, #12]
 800dda2:	2b00      	cmp	r3, #0
 800dda4:	f6bf af30 	bge.w	800dc08 <_dtoa_r+0x718>
 800dda8:	9b00      	ldr	r3, [sp, #0]
 800ddaa:	9a03      	ldr	r2, [sp, #12]
 800ddac:	1a9e      	subs	r6, r3, r2
 800ddae:	2300      	movs	r3, #0
 800ddb0:	e72b      	b.n	800dc0a <_dtoa_r+0x71a>
 800ddb2:	9b08      	ldr	r3, [sp, #32]
 800ddb4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800ddb6:	9408      	str	r4, [sp, #32]
 800ddb8:	1ae3      	subs	r3, r4, r3
 800ddba:	441a      	add	r2, r3
 800ddbc:	9e00      	ldr	r6, [sp, #0]
 800ddbe:	9b03      	ldr	r3, [sp, #12]
 800ddc0:	920d      	str	r2, [sp, #52]	@ 0x34
 800ddc2:	2400      	movs	r4, #0
 800ddc4:	e721      	b.n	800dc0a <_dtoa_r+0x71a>
 800ddc6:	9c08      	ldr	r4, [sp, #32]
 800ddc8:	9e00      	ldr	r6, [sp, #0]
 800ddca:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800ddcc:	e728      	b.n	800dc20 <_dtoa_r+0x730>
 800ddce:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800ddd2:	e751      	b.n	800dc78 <_dtoa_r+0x788>
 800ddd4:	9a08      	ldr	r2, [sp, #32]
 800ddd6:	9902      	ldr	r1, [sp, #8]
 800ddd8:	e750      	b.n	800dc7c <_dtoa_r+0x78c>
 800ddda:	f8cd 8008 	str.w	r8, [sp, #8]
 800ddde:	e751      	b.n	800dc84 <_dtoa_r+0x794>
 800dde0:	2300      	movs	r3, #0
 800dde2:	e779      	b.n	800dcd8 <_dtoa_r+0x7e8>
 800dde4:	9b04      	ldr	r3, [sp, #16]
 800dde6:	e777      	b.n	800dcd8 <_dtoa_r+0x7e8>
 800dde8:	2300      	movs	r3, #0
 800ddea:	9308      	str	r3, [sp, #32]
 800ddec:	e779      	b.n	800dce2 <_dtoa_r+0x7f2>
 800ddee:	d093      	beq.n	800dd18 <_dtoa_r+0x828>
 800ddf0:	9a00      	ldr	r2, [sp, #0]
 800ddf2:	331c      	adds	r3, #28
 800ddf4:	441a      	add	r2, r3
 800ddf6:	9200      	str	r2, [sp, #0]
 800ddf8:	9a06      	ldr	r2, [sp, #24]
 800ddfa:	441a      	add	r2, r3
 800ddfc:	441e      	add	r6, r3
 800ddfe:	9206      	str	r2, [sp, #24]
 800de00:	e78a      	b.n	800dd18 <_dtoa_r+0x828>
 800de02:	4603      	mov	r3, r0
 800de04:	e7f4      	b.n	800ddf0 <_dtoa_r+0x900>
 800de06:	9b03      	ldr	r3, [sp, #12]
 800de08:	2b00      	cmp	r3, #0
 800de0a:	46b8      	mov	r8, r7
 800de0c:	dc20      	bgt.n	800de50 <_dtoa_r+0x960>
 800de0e:	469b      	mov	fp, r3
 800de10:	9b07      	ldr	r3, [sp, #28]
 800de12:	2b02      	cmp	r3, #2
 800de14:	dd1e      	ble.n	800de54 <_dtoa_r+0x964>
 800de16:	f1bb 0f00 	cmp.w	fp, #0
 800de1a:	f47f adb1 	bne.w	800d980 <_dtoa_r+0x490>
 800de1e:	4621      	mov	r1, r4
 800de20:	465b      	mov	r3, fp
 800de22:	2205      	movs	r2, #5
 800de24:	4648      	mov	r0, r9
 800de26:	f000 faa7 	bl	800e378 <__multadd>
 800de2a:	4601      	mov	r1, r0
 800de2c:	4604      	mov	r4, r0
 800de2e:	9802      	ldr	r0, [sp, #8]
 800de30:	f000 fcb2 	bl	800e798 <__mcmp>
 800de34:	2800      	cmp	r0, #0
 800de36:	f77f ada3 	ble.w	800d980 <_dtoa_r+0x490>
 800de3a:	4656      	mov	r6, sl
 800de3c:	2331      	movs	r3, #49	@ 0x31
 800de3e:	f806 3b01 	strb.w	r3, [r6], #1
 800de42:	f108 0801 	add.w	r8, r8, #1
 800de46:	e59f      	b.n	800d988 <_dtoa_r+0x498>
 800de48:	9c03      	ldr	r4, [sp, #12]
 800de4a:	46b8      	mov	r8, r7
 800de4c:	4625      	mov	r5, r4
 800de4e:	e7f4      	b.n	800de3a <_dtoa_r+0x94a>
 800de50:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800de54:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800de56:	2b00      	cmp	r3, #0
 800de58:	f000 8101 	beq.w	800e05e <_dtoa_r+0xb6e>
 800de5c:	2e00      	cmp	r6, #0
 800de5e:	dd05      	ble.n	800de6c <_dtoa_r+0x97c>
 800de60:	4629      	mov	r1, r5
 800de62:	4632      	mov	r2, r6
 800de64:	4648      	mov	r0, r9
 800de66:	f000 fc2b 	bl	800e6c0 <__lshift>
 800de6a:	4605      	mov	r5, r0
 800de6c:	9b08      	ldr	r3, [sp, #32]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d05c      	beq.n	800df2c <_dtoa_r+0xa3c>
 800de72:	6869      	ldr	r1, [r5, #4]
 800de74:	4648      	mov	r0, r9
 800de76:	f000 fa1d 	bl	800e2b4 <_Balloc>
 800de7a:	4606      	mov	r6, r0
 800de7c:	b928      	cbnz	r0, 800de8a <_dtoa_r+0x99a>
 800de7e:	4b82      	ldr	r3, [pc, #520]	@ (800e088 <_dtoa_r+0xb98>)
 800de80:	4602      	mov	r2, r0
 800de82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800de86:	f7ff bb4a 	b.w	800d51e <_dtoa_r+0x2e>
 800de8a:	692a      	ldr	r2, [r5, #16]
 800de8c:	3202      	adds	r2, #2
 800de8e:	0092      	lsls	r2, r2, #2
 800de90:	f105 010c 	add.w	r1, r5, #12
 800de94:	300c      	adds	r0, #12
 800de96:	f7ff fa74 	bl	800d382 <memcpy>
 800de9a:	2201      	movs	r2, #1
 800de9c:	4631      	mov	r1, r6
 800de9e:	4648      	mov	r0, r9
 800dea0:	f000 fc0e 	bl	800e6c0 <__lshift>
 800dea4:	f10a 0301 	add.w	r3, sl, #1
 800dea8:	9300      	str	r3, [sp, #0]
 800deaa:	eb0a 030b 	add.w	r3, sl, fp
 800deae:	9308      	str	r3, [sp, #32]
 800deb0:	9b04      	ldr	r3, [sp, #16]
 800deb2:	f003 0301 	and.w	r3, r3, #1
 800deb6:	462f      	mov	r7, r5
 800deb8:	9306      	str	r3, [sp, #24]
 800deba:	4605      	mov	r5, r0
 800debc:	9b00      	ldr	r3, [sp, #0]
 800debe:	9802      	ldr	r0, [sp, #8]
 800dec0:	4621      	mov	r1, r4
 800dec2:	f103 3bff 	add.w	fp, r3, #4294967295
 800dec6:	f7ff fa89 	bl	800d3dc <quorem>
 800deca:	4603      	mov	r3, r0
 800decc:	3330      	adds	r3, #48	@ 0x30
 800dece:	9003      	str	r0, [sp, #12]
 800ded0:	4639      	mov	r1, r7
 800ded2:	9802      	ldr	r0, [sp, #8]
 800ded4:	9309      	str	r3, [sp, #36]	@ 0x24
 800ded6:	f000 fc5f 	bl	800e798 <__mcmp>
 800deda:	462a      	mov	r2, r5
 800dedc:	9004      	str	r0, [sp, #16]
 800dede:	4621      	mov	r1, r4
 800dee0:	4648      	mov	r0, r9
 800dee2:	f000 fc75 	bl	800e7d0 <__mdiff>
 800dee6:	68c2      	ldr	r2, [r0, #12]
 800dee8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800deea:	4606      	mov	r6, r0
 800deec:	bb02      	cbnz	r2, 800df30 <_dtoa_r+0xa40>
 800deee:	4601      	mov	r1, r0
 800def0:	9802      	ldr	r0, [sp, #8]
 800def2:	f000 fc51 	bl	800e798 <__mcmp>
 800def6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800def8:	4602      	mov	r2, r0
 800defa:	4631      	mov	r1, r6
 800defc:	4648      	mov	r0, r9
 800defe:	920c      	str	r2, [sp, #48]	@ 0x30
 800df00:	9309      	str	r3, [sp, #36]	@ 0x24
 800df02:	f000 fa17 	bl	800e334 <_Bfree>
 800df06:	9b07      	ldr	r3, [sp, #28]
 800df08:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800df0a:	9e00      	ldr	r6, [sp, #0]
 800df0c:	ea42 0103 	orr.w	r1, r2, r3
 800df10:	9b06      	ldr	r3, [sp, #24]
 800df12:	4319      	orrs	r1, r3
 800df14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df16:	d10d      	bne.n	800df34 <_dtoa_r+0xa44>
 800df18:	2b39      	cmp	r3, #57	@ 0x39
 800df1a:	d027      	beq.n	800df6c <_dtoa_r+0xa7c>
 800df1c:	9a04      	ldr	r2, [sp, #16]
 800df1e:	2a00      	cmp	r2, #0
 800df20:	dd01      	ble.n	800df26 <_dtoa_r+0xa36>
 800df22:	9b03      	ldr	r3, [sp, #12]
 800df24:	3331      	adds	r3, #49	@ 0x31
 800df26:	f88b 3000 	strb.w	r3, [fp]
 800df2a:	e52e      	b.n	800d98a <_dtoa_r+0x49a>
 800df2c:	4628      	mov	r0, r5
 800df2e:	e7b9      	b.n	800dea4 <_dtoa_r+0x9b4>
 800df30:	2201      	movs	r2, #1
 800df32:	e7e2      	b.n	800defa <_dtoa_r+0xa0a>
 800df34:	9904      	ldr	r1, [sp, #16]
 800df36:	2900      	cmp	r1, #0
 800df38:	db04      	blt.n	800df44 <_dtoa_r+0xa54>
 800df3a:	9807      	ldr	r0, [sp, #28]
 800df3c:	4301      	orrs	r1, r0
 800df3e:	9806      	ldr	r0, [sp, #24]
 800df40:	4301      	orrs	r1, r0
 800df42:	d120      	bne.n	800df86 <_dtoa_r+0xa96>
 800df44:	2a00      	cmp	r2, #0
 800df46:	ddee      	ble.n	800df26 <_dtoa_r+0xa36>
 800df48:	9902      	ldr	r1, [sp, #8]
 800df4a:	9300      	str	r3, [sp, #0]
 800df4c:	2201      	movs	r2, #1
 800df4e:	4648      	mov	r0, r9
 800df50:	f000 fbb6 	bl	800e6c0 <__lshift>
 800df54:	4621      	mov	r1, r4
 800df56:	9002      	str	r0, [sp, #8]
 800df58:	f000 fc1e 	bl	800e798 <__mcmp>
 800df5c:	2800      	cmp	r0, #0
 800df5e:	9b00      	ldr	r3, [sp, #0]
 800df60:	dc02      	bgt.n	800df68 <_dtoa_r+0xa78>
 800df62:	d1e0      	bne.n	800df26 <_dtoa_r+0xa36>
 800df64:	07da      	lsls	r2, r3, #31
 800df66:	d5de      	bpl.n	800df26 <_dtoa_r+0xa36>
 800df68:	2b39      	cmp	r3, #57	@ 0x39
 800df6a:	d1da      	bne.n	800df22 <_dtoa_r+0xa32>
 800df6c:	2339      	movs	r3, #57	@ 0x39
 800df6e:	f88b 3000 	strb.w	r3, [fp]
 800df72:	4633      	mov	r3, r6
 800df74:	461e      	mov	r6, r3
 800df76:	3b01      	subs	r3, #1
 800df78:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800df7c:	2a39      	cmp	r2, #57	@ 0x39
 800df7e:	d04e      	beq.n	800e01e <_dtoa_r+0xb2e>
 800df80:	3201      	adds	r2, #1
 800df82:	701a      	strb	r2, [r3, #0]
 800df84:	e501      	b.n	800d98a <_dtoa_r+0x49a>
 800df86:	2a00      	cmp	r2, #0
 800df88:	dd03      	ble.n	800df92 <_dtoa_r+0xaa2>
 800df8a:	2b39      	cmp	r3, #57	@ 0x39
 800df8c:	d0ee      	beq.n	800df6c <_dtoa_r+0xa7c>
 800df8e:	3301      	adds	r3, #1
 800df90:	e7c9      	b.n	800df26 <_dtoa_r+0xa36>
 800df92:	9a00      	ldr	r2, [sp, #0]
 800df94:	9908      	ldr	r1, [sp, #32]
 800df96:	f802 3c01 	strb.w	r3, [r2, #-1]
 800df9a:	428a      	cmp	r2, r1
 800df9c:	d028      	beq.n	800dff0 <_dtoa_r+0xb00>
 800df9e:	9902      	ldr	r1, [sp, #8]
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	220a      	movs	r2, #10
 800dfa4:	4648      	mov	r0, r9
 800dfa6:	f000 f9e7 	bl	800e378 <__multadd>
 800dfaa:	42af      	cmp	r7, r5
 800dfac:	9002      	str	r0, [sp, #8]
 800dfae:	f04f 0300 	mov.w	r3, #0
 800dfb2:	f04f 020a 	mov.w	r2, #10
 800dfb6:	4639      	mov	r1, r7
 800dfb8:	4648      	mov	r0, r9
 800dfba:	d107      	bne.n	800dfcc <_dtoa_r+0xadc>
 800dfbc:	f000 f9dc 	bl	800e378 <__multadd>
 800dfc0:	4607      	mov	r7, r0
 800dfc2:	4605      	mov	r5, r0
 800dfc4:	9b00      	ldr	r3, [sp, #0]
 800dfc6:	3301      	adds	r3, #1
 800dfc8:	9300      	str	r3, [sp, #0]
 800dfca:	e777      	b.n	800debc <_dtoa_r+0x9cc>
 800dfcc:	f000 f9d4 	bl	800e378 <__multadd>
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	4607      	mov	r7, r0
 800dfd4:	2300      	movs	r3, #0
 800dfd6:	220a      	movs	r2, #10
 800dfd8:	4648      	mov	r0, r9
 800dfda:	f000 f9cd 	bl	800e378 <__multadd>
 800dfde:	4605      	mov	r5, r0
 800dfe0:	e7f0      	b.n	800dfc4 <_dtoa_r+0xad4>
 800dfe2:	f1bb 0f00 	cmp.w	fp, #0
 800dfe6:	bfcc      	ite	gt
 800dfe8:	465e      	movgt	r6, fp
 800dfea:	2601      	movle	r6, #1
 800dfec:	4456      	add	r6, sl
 800dfee:	2700      	movs	r7, #0
 800dff0:	9902      	ldr	r1, [sp, #8]
 800dff2:	9300      	str	r3, [sp, #0]
 800dff4:	2201      	movs	r2, #1
 800dff6:	4648      	mov	r0, r9
 800dff8:	f000 fb62 	bl	800e6c0 <__lshift>
 800dffc:	4621      	mov	r1, r4
 800dffe:	9002      	str	r0, [sp, #8]
 800e000:	f000 fbca 	bl	800e798 <__mcmp>
 800e004:	2800      	cmp	r0, #0
 800e006:	dcb4      	bgt.n	800df72 <_dtoa_r+0xa82>
 800e008:	d102      	bne.n	800e010 <_dtoa_r+0xb20>
 800e00a:	9b00      	ldr	r3, [sp, #0]
 800e00c:	07db      	lsls	r3, r3, #31
 800e00e:	d4b0      	bmi.n	800df72 <_dtoa_r+0xa82>
 800e010:	4633      	mov	r3, r6
 800e012:	461e      	mov	r6, r3
 800e014:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e018:	2a30      	cmp	r2, #48	@ 0x30
 800e01a:	d0fa      	beq.n	800e012 <_dtoa_r+0xb22>
 800e01c:	e4b5      	b.n	800d98a <_dtoa_r+0x49a>
 800e01e:	459a      	cmp	sl, r3
 800e020:	d1a8      	bne.n	800df74 <_dtoa_r+0xa84>
 800e022:	2331      	movs	r3, #49	@ 0x31
 800e024:	f108 0801 	add.w	r8, r8, #1
 800e028:	f88a 3000 	strb.w	r3, [sl]
 800e02c:	e4ad      	b.n	800d98a <_dtoa_r+0x49a>
 800e02e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800e030:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800e08c <_dtoa_r+0xb9c>
 800e034:	b11b      	cbz	r3, 800e03e <_dtoa_r+0xb4e>
 800e036:	f10a 0308 	add.w	r3, sl, #8
 800e03a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800e03c:	6013      	str	r3, [r2, #0]
 800e03e:	4650      	mov	r0, sl
 800e040:	b017      	add	sp, #92	@ 0x5c
 800e042:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e046:	9b07      	ldr	r3, [sp, #28]
 800e048:	2b01      	cmp	r3, #1
 800e04a:	f77f ae2e 	ble.w	800dcaa <_dtoa_r+0x7ba>
 800e04e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e050:	9308      	str	r3, [sp, #32]
 800e052:	2001      	movs	r0, #1
 800e054:	e64d      	b.n	800dcf2 <_dtoa_r+0x802>
 800e056:	f1bb 0f00 	cmp.w	fp, #0
 800e05a:	f77f aed9 	ble.w	800de10 <_dtoa_r+0x920>
 800e05e:	4656      	mov	r6, sl
 800e060:	9802      	ldr	r0, [sp, #8]
 800e062:	4621      	mov	r1, r4
 800e064:	f7ff f9ba 	bl	800d3dc <quorem>
 800e068:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800e06c:	f806 3b01 	strb.w	r3, [r6], #1
 800e070:	eba6 020a 	sub.w	r2, r6, sl
 800e074:	4593      	cmp	fp, r2
 800e076:	ddb4      	ble.n	800dfe2 <_dtoa_r+0xaf2>
 800e078:	9902      	ldr	r1, [sp, #8]
 800e07a:	2300      	movs	r3, #0
 800e07c:	220a      	movs	r2, #10
 800e07e:	4648      	mov	r0, r9
 800e080:	f000 f97a 	bl	800e378 <__multadd>
 800e084:	9002      	str	r0, [sp, #8]
 800e086:	e7eb      	b.n	800e060 <_dtoa_r+0xb70>
 800e088:	080111e6 	.word	0x080111e6
 800e08c:	08011181 	.word	0x08011181

0800e090 <_free_r>:
 800e090:	b538      	push	{r3, r4, r5, lr}
 800e092:	4605      	mov	r5, r0
 800e094:	2900      	cmp	r1, #0
 800e096:	d041      	beq.n	800e11c <_free_r+0x8c>
 800e098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e09c:	1f0c      	subs	r4, r1, #4
 800e09e:	2b00      	cmp	r3, #0
 800e0a0:	bfb8      	it	lt
 800e0a2:	18e4      	addlt	r4, r4, r3
 800e0a4:	f000 f8fa 	bl	800e29c <__malloc_lock>
 800e0a8:	4a1d      	ldr	r2, [pc, #116]	@ (800e120 <_free_r+0x90>)
 800e0aa:	6813      	ldr	r3, [r2, #0]
 800e0ac:	b933      	cbnz	r3, 800e0bc <_free_r+0x2c>
 800e0ae:	6063      	str	r3, [r4, #4]
 800e0b0:	6014      	str	r4, [r2, #0]
 800e0b2:	4628      	mov	r0, r5
 800e0b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e0b8:	f000 b8f6 	b.w	800e2a8 <__malloc_unlock>
 800e0bc:	42a3      	cmp	r3, r4
 800e0be:	d908      	bls.n	800e0d2 <_free_r+0x42>
 800e0c0:	6820      	ldr	r0, [r4, #0]
 800e0c2:	1821      	adds	r1, r4, r0
 800e0c4:	428b      	cmp	r3, r1
 800e0c6:	bf01      	itttt	eq
 800e0c8:	6819      	ldreq	r1, [r3, #0]
 800e0ca:	685b      	ldreq	r3, [r3, #4]
 800e0cc:	1809      	addeq	r1, r1, r0
 800e0ce:	6021      	streq	r1, [r4, #0]
 800e0d0:	e7ed      	b.n	800e0ae <_free_r+0x1e>
 800e0d2:	461a      	mov	r2, r3
 800e0d4:	685b      	ldr	r3, [r3, #4]
 800e0d6:	b10b      	cbz	r3, 800e0dc <_free_r+0x4c>
 800e0d8:	42a3      	cmp	r3, r4
 800e0da:	d9fa      	bls.n	800e0d2 <_free_r+0x42>
 800e0dc:	6811      	ldr	r1, [r2, #0]
 800e0de:	1850      	adds	r0, r2, r1
 800e0e0:	42a0      	cmp	r0, r4
 800e0e2:	d10b      	bne.n	800e0fc <_free_r+0x6c>
 800e0e4:	6820      	ldr	r0, [r4, #0]
 800e0e6:	4401      	add	r1, r0
 800e0e8:	1850      	adds	r0, r2, r1
 800e0ea:	4283      	cmp	r3, r0
 800e0ec:	6011      	str	r1, [r2, #0]
 800e0ee:	d1e0      	bne.n	800e0b2 <_free_r+0x22>
 800e0f0:	6818      	ldr	r0, [r3, #0]
 800e0f2:	685b      	ldr	r3, [r3, #4]
 800e0f4:	6053      	str	r3, [r2, #4]
 800e0f6:	4408      	add	r0, r1
 800e0f8:	6010      	str	r0, [r2, #0]
 800e0fa:	e7da      	b.n	800e0b2 <_free_r+0x22>
 800e0fc:	d902      	bls.n	800e104 <_free_r+0x74>
 800e0fe:	230c      	movs	r3, #12
 800e100:	602b      	str	r3, [r5, #0]
 800e102:	e7d6      	b.n	800e0b2 <_free_r+0x22>
 800e104:	6820      	ldr	r0, [r4, #0]
 800e106:	1821      	adds	r1, r4, r0
 800e108:	428b      	cmp	r3, r1
 800e10a:	bf04      	itt	eq
 800e10c:	6819      	ldreq	r1, [r3, #0]
 800e10e:	685b      	ldreq	r3, [r3, #4]
 800e110:	6063      	str	r3, [r4, #4]
 800e112:	bf04      	itt	eq
 800e114:	1809      	addeq	r1, r1, r0
 800e116:	6021      	streq	r1, [r4, #0]
 800e118:	6054      	str	r4, [r2, #4]
 800e11a:	e7ca      	b.n	800e0b2 <_free_r+0x22>
 800e11c:	bd38      	pop	{r3, r4, r5, pc}
 800e11e:	bf00      	nop
 800e120:	20002568 	.word	0x20002568

0800e124 <malloc>:
 800e124:	4b02      	ldr	r3, [pc, #8]	@ (800e130 <malloc+0xc>)
 800e126:	4601      	mov	r1, r0
 800e128:	6818      	ldr	r0, [r3, #0]
 800e12a:	f000 b825 	b.w	800e178 <_malloc_r>
 800e12e:	bf00      	nop
 800e130:	20000284 	.word	0x20000284

0800e134 <sbrk_aligned>:
 800e134:	b570      	push	{r4, r5, r6, lr}
 800e136:	4e0f      	ldr	r6, [pc, #60]	@ (800e174 <sbrk_aligned+0x40>)
 800e138:	460c      	mov	r4, r1
 800e13a:	6831      	ldr	r1, [r6, #0]
 800e13c:	4605      	mov	r5, r0
 800e13e:	b911      	cbnz	r1, 800e146 <sbrk_aligned+0x12>
 800e140:	f001 f834 	bl	800f1ac <_sbrk_r>
 800e144:	6030      	str	r0, [r6, #0]
 800e146:	4621      	mov	r1, r4
 800e148:	4628      	mov	r0, r5
 800e14a:	f001 f82f 	bl	800f1ac <_sbrk_r>
 800e14e:	1c43      	adds	r3, r0, #1
 800e150:	d103      	bne.n	800e15a <sbrk_aligned+0x26>
 800e152:	f04f 34ff 	mov.w	r4, #4294967295
 800e156:	4620      	mov	r0, r4
 800e158:	bd70      	pop	{r4, r5, r6, pc}
 800e15a:	1cc4      	adds	r4, r0, #3
 800e15c:	f024 0403 	bic.w	r4, r4, #3
 800e160:	42a0      	cmp	r0, r4
 800e162:	d0f8      	beq.n	800e156 <sbrk_aligned+0x22>
 800e164:	1a21      	subs	r1, r4, r0
 800e166:	4628      	mov	r0, r5
 800e168:	f001 f820 	bl	800f1ac <_sbrk_r>
 800e16c:	3001      	adds	r0, #1
 800e16e:	d1f2      	bne.n	800e156 <sbrk_aligned+0x22>
 800e170:	e7ef      	b.n	800e152 <sbrk_aligned+0x1e>
 800e172:	bf00      	nop
 800e174:	20002564 	.word	0x20002564

0800e178 <_malloc_r>:
 800e178:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e17c:	1ccd      	adds	r5, r1, #3
 800e17e:	f025 0503 	bic.w	r5, r5, #3
 800e182:	3508      	adds	r5, #8
 800e184:	2d0c      	cmp	r5, #12
 800e186:	bf38      	it	cc
 800e188:	250c      	movcc	r5, #12
 800e18a:	2d00      	cmp	r5, #0
 800e18c:	4606      	mov	r6, r0
 800e18e:	db01      	blt.n	800e194 <_malloc_r+0x1c>
 800e190:	42a9      	cmp	r1, r5
 800e192:	d904      	bls.n	800e19e <_malloc_r+0x26>
 800e194:	230c      	movs	r3, #12
 800e196:	6033      	str	r3, [r6, #0]
 800e198:	2000      	movs	r0, #0
 800e19a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e19e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e274 <_malloc_r+0xfc>
 800e1a2:	f000 f87b 	bl	800e29c <__malloc_lock>
 800e1a6:	f8d8 3000 	ldr.w	r3, [r8]
 800e1aa:	461c      	mov	r4, r3
 800e1ac:	bb44      	cbnz	r4, 800e200 <_malloc_r+0x88>
 800e1ae:	4629      	mov	r1, r5
 800e1b0:	4630      	mov	r0, r6
 800e1b2:	f7ff ffbf 	bl	800e134 <sbrk_aligned>
 800e1b6:	1c43      	adds	r3, r0, #1
 800e1b8:	4604      	mov	r4, r0
 800e1ba:	d158      	bne.n	800e26e <_malloc_r+0xf6>
 800e1bc:	f8d8 4000 	ldr.w	r4, [r8]
 800e1c0:	4627      	mov	r7, r4
 800e1c2:	2f00      	cmp	r7, #0
 800e1c4:	d143      	bne.n	800e24e <_malloc_r+0xd6>
 800e1c6:	2c00      	cmp	r4, #0
 800e1c8:	d04b      	beq.n	800e262 <_malloc_r+0xea>
 800e1ca:	6823      	ldr	r3, [r4, #0]
 800e1cc:	4639      	mov	r1, r7
 800e1ce:	4630      	mov	r0, r6
 800e1d0:	eb04 0903 	add.w	r9, r4, r3
 800e1d4:	f000 ffea 	bl	800f1ac <_sbrk_r>
 800e1d8:	4581      	cmp	r9, r0
 800e1da:	d142      	bne.n	800e262 <_malloc_r+0xea>
 800e1dc:	6821      	ldr	r1, [r4, #0]
 800e1de:	1a6d      	subs	r5, r5, r1
 800e1e0:	4629      	mov	r1, r5
 800e1e2:	4630      	mov	r0, r6
 800e1e4:	f7ff ffa6 	bl	800e134 <sbrk_aligned>
 800e1e8:	3001      	adds	r0, #1
 800e1ea:	d03a      	beq.n	800e262 <_malloc_r+0xea>
 800e1ec:	6823      	ldr	r3, [r4, #0]
 800e1ee:	442b      	add	r3, r5
 800e1f0:	6023      	str	r3, [r4, #0]
 800e1f2:	f8d8 3000 	ldr.w	r3, [r8]
 800e1f6:	685a      	ldr	r2, [r3, #4]
 800e1f8:	bb62      	cbnz	r2, 800e254 <_malloc_r+0xdc>
 800e1fa:	f8c8 7000 	str.w	r7, [r8]
 800e1fe:	e00f      	b.n	800e220 <_malloc_r+0xa8>
 800e200:	6822      	ldr	r2, [r4, #0]
 800e202:	1b52      	subs	r2, r2, r5
 800e204:	d420      	bmi.n	800e248 <_malloc_r+0xd0>
 800e206:	2a0b      	cmp	r2, #11
 800e208:	d917      	bls.n	800e23a <_malloc_r+0xc2>
 800e20a:	1961      	adds	r1, r4, r5
 800e20c:	42a3      	cmp	r3, r4
 800e20e:	6025      	str	r5, [r4, #0]
 800e210:	bf18      	it	ne
 800e212:	6059      	strne	r1, [r3, #4]
 800e214:	6863      	ldr	r3, [r4, #4]
 800e216:	bf08      	it	eq
 800e218:	f8c8 1000 	streq.w	r1, [r8]
 800e21c:	5162      	str	r2, [r4, r5]
 800e21e:	604b      	str	r3, [r1, #4]
 800e220:	4630      	mov	r0, r6
 800e222:	f000 f841 	bl	800e2a8 <__malloc_unlock>
 800e226:	f104 000b 	add.w	r0, r4, #11
 800e22a:	1d23      	adds	r3, r4, #4
 800e22c:	f020 0007 	bic.w	r0, r0, #7
 800e230:	1ac2      	subs	r2, r0, r3
 800e232:	bf1c      	itt	ne
 800e234:	1a1b      	subne	r3, r3, r0
 800e236:	50a3      	strne	r3, [r4, r2]
 800e238:	e7af      	b.n	800e19a <_malloc_r+0x22>
 800e23a:	6862      	ldr	r2, [r4, #4]
 800e23c:	42a3      	cmp	r3, r4
 800e23e:	bf0c      	ite	eq
 800e240:	f8c8 2000 	streq.w	r2, [r8]
 800e244:	605a      	strne	r2, [r3, #4]
 800e246:	e7eb      	b.n	800e220 <_malloc_r+0xa8>
 800e248:	4623      	mov	r3, r4
 800e24a:	6864      	ldr	r4, [r4, #4]
 800e24c:	e7ae      	b.n	800e1ac <_malloc_r+0x34>
 800e24e:	463c      	mov	r4, r7
 800e250:	687f      	ldr	r7, [r7, #4]
 800e252:	e7b6      	b.n	800e1c2 <_malloc_r+0x4a>
 800e254:	461a      	mov	r2, r3
 800e256:	685b      	ldr	r3, [r3, #4]
 800e258:	42a3      	cmp	r3, r4
 800e25a:	d1fb      	bne.n	800e254 <_malloc_r+0xdc>
 800e25c:	2300      	movs	r3, #0
 800e25e:	6053      	str	r3, [r2, #4]
 800e260:	e7de      	b.n	800e220 <_malloc_r+0xa8>
 800e262:	230c      	movs	r3, #12
 800e264:	6033      	str	r3, [r6, #0]
 800e266:	4630      	mov	r0, r6
 800e268:	f000 f81e 	bl	800e2a8 <__malloc_unlock>
 800e26c:	e794      	b.n	800e198 <_malloc_r+0x20>
 800e26e:	6005      	str	r5, [r0, #0]
 800e270:	e7d6      	b.n	800e220 <_malloc_r+0xa8>
 800e272:	bf00      	nop
 800e274:	20002568 	.word	0x20002568

0800e278 <__ascii_mbtowc>:
 800e278:	b082      	sub	sp, #8
 800e27a:	b901      	cbnz	r1, 800e27e <__ascii_mbtowc+0x6>
 800e27c:	a901      	add	r1, sp, #4
 800e27e:	b142      	cbz	r2, 800e292 <__ascii_mbtowc+0x1a>
 800e280:	b14b      	cbz	r3, 800e296 <__ascii_mbtowc+0x1e>
 800e282:	7813      	ldrb	r3, [r2, #0]
 800e284:	600b      	str	r3, [r1, #0]
 800e286:	7812      	ldrb	r2, [r2, #0]
 800e288:	1e10      	subs	r0, r2, #0
 800e28a:	bf18      	it	ne
 800e28c:	2001      	movne	r0, #1
 800e28e:	b002      	add	sp, #8
 800e290:	4770      	bx	lr
 800e292:	4610      	mov	r0, r2
 800e294:	e7fb      	b.n	800e28e <__ascii_mbtowc+0x16>
 800e296:	f06f 0001 	mvn.w	r0, #1
 800e29a:	e7f8      	b.n	800e28e <__ascii_mbtowc+0x16>

0800e29c <__malloc_lock>:
 800e29c:	4801      	ldr	r0, [pc, #4]	@ (800e2a4 <__malloc_lock+0x8>)
 800e29e:	f7ff b866 	b.w	800d36e <__retarget_lock_acquire_recursive>
 800e2a2:	bf00      	nop
 800e2a4:	20002560 	.word	0x20002560

0800e2a8 <__malloc_unlock>:
 800e2a8:	4801      	ldr	r0, [pc, #4]	@ (800e2b0 <__malloc_unlock+0x8>)
 800e2aa:	f7ff b861 	b.w	800d370 <__retarget_lock_release_recursive>
 800e2ae:	bf00      	nop
 800e2b0:	20002560 	.word	0x20002560

0800e2b4 <_Balloc>:
 800e2b4:	b570      	push	{r4, r5, r6, lr}
 800e2b6:	69c6      	ldr	r6, [r0, #28]
 800e2b8:	4604      	mov	r4, r0
 800e2ba:	460d      	mov	r5, r1
 800e2bc:	b976      	cbnz	r6, 800e2dc <_Balloc+0x28>
 800e2be:	2010      	movs	r0, #16
 800e2c0:	f7ff ff30 	bl	800e124 <malloc>
 800e2c4:	4602      	mov	r2, r0
 800e2c6:	61e0      	str	r0, [r4, #28]
 800e2c8:	b920      	cbnz	r0, 800e2d4 <_Balloc+0x20>
 800e2ca:	4b18      	ldr	r3, [pc, #96]	@ (800e32c <_Balloc+0x78>)
 800e2cc:	4818      	ldr	r0, [pc, #96]	@ (800e330 <_Balloc+0x7c>)
 800e2ce:	216b      	movs	r1, #107	@ 0x6b
 800e2d0:	f7ff f866 	bl	800d3a0 <__assert_func>
 800e2d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e2d8:	6006      	str	r6, [r0, #0]
 800e2da:	60c6      	str	r6, [r0, #12]
 800e2dc:	69e6      	ldr	r6, [r4, #28]
 800e2de:	68f3      	ldr	r3, [r6, #12]
 800e2e0:	b183      	cbz	r3, 800e304 <_Balloc+0x50>
 800e2e2:	69e3      	ldr	r3, [r4, #28]
 800e2e4:	68db      	ldr	r3, [r3, #12]
 800e2e6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e2ea:	b9b8      	cbnz	r0, 800e31c <_Balloc+0x68>
 800e2ec:	2101      	movs	r1, #1
 800e2ee:	fa01 f605 	lsl.w	r6, r1, r5
 800e2f2:	1d72      	adds	r2, r6, #5
 800e2f4:	0092      	lsls	r2, r2, #2
 800e2f6:	4620      	mov	r0, r4
 800e2f8:	f000 ff6f 	bl	800f1da <_calloc_r>
 800e2fc:	b160      	cbz	r0, 800e318 <_Balloc+0x64>
 800e2fe:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e302:	e00e      	b.n	800e322 <_Balloc+0x6e>
 800e304:	2221      	movs	r2, #33	@ 0x21
 800e306:	2104      	movs	r1, #4
 800e308:	4620      	mov	r0, r4
 800e30a:	f000 ff66 	bl	800f1da <_calloc_r>
 800e30e:	69e3      	ldr	r3, [r4, #28]
 800e310:	60f0      	str	r0, [r6, #12]
 800e312:	68db      	ldr	r3, [r3, #12]
 800e314:	2b00      	cmp	r3, #0
 800e316:	d1e4      	bne.n	800e2e2 <_Balloc+0x2e>
 800e318:	2000      	movs	r0, #0
 800e31a:	bd70      	pop	{r4, r5, r6, pc}
 800e31c:	6802      	ldr	r2, [r0, #0]
 800e31e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800e322:	2300      	movs	r3, #0
 800e324:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e328:	e7f7      	b.n	800e31a <_Balloc+0x66>
 800e32a:	bf00      	nop
 800e32c:	08011098 	.word	0x08011098
 800e330:	080111f7 	.word	0x080111f7

0800e334 <_Bfree>:
 800e334:	b570      	push	{r4, r5, r6, lr}
 800e336:	69c6      	ldr	r6, [r0, #28]
 800e338:	4605      	mov	r5, r0
 800e33a:	460c      	mov	r4, r1
 800e33c:	b976      	cbnz	r6, 800e35c <_Bfree+0x28>
 800e33e:	2010      	movs	r0, #16
 800e340:	f7ff fef0 	bl	800e124 <malloc>
 800e344:	4602      	mov	r2, r0
 800e346:	61e8      	str	r0, [r5, #28]
 800e348:	b920      	cbnz	r0, 800e354 <_Bfree+0x20>
 800e34a:	4b09      	ldr	r3, [pc, #36]	@ (800e370 <_Bfree+0x3c>)
 800e34c:	4809      	ldr	r0, [pc, #36]	@ (800e374 <_Bfree+0x40>)
 800e34e:	218f      	movs	r1, #143	@ 0x8f
 800e350:	f7ff f826 	bl	800d3a0 <__assert_func>
 800e354:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e358:	6006      	str	r6, [r0, #0]
 800e35a:	60c6      	str	r6, [r0, #12]
 800e35c:	b13c      	cbz	r4, 800e36e <_Bfree+0x3a>
 800e35e:	69eb      	ldr	r3, [r5, #28]
 800e360:	6862      	ldr	r2, [r4, #4]
 800e362:	68db      	ldr	r3, [r3, #12]
 800e364:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800e368:	6021      	str	r1, [r4, #0]
 800e36a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800e36e:	bd70      	pop	{r4, r5, r6, pc}
 800e370:	08011098 	.word	0x08011098
 800e374:	080111f7 	.word	0x080111f7

0800e378 <__multadd>:
 800e378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e37c:	690d      	ldr	r5, [r1, #16]
 800e37e:	4607      	mov	r7, r0
 800e380:	460c      	mov	r4, r1
 800e382:	461e      	mov	r6, r3
 800e384:	f101 0c14 	add.w	ip, r1, #20
 800e388:	2000      	movs	r0, #0
 800e38a:	f8dc 3000 	ldr.w	r3, [ip]
 800e38e:	b299      	uxth	r1, r3
 800e390:	fb02 6101 	mla	r1, r2, r1, r6
 800e394:	0c1e      	lsrs	r6, r3, #16
 800e396:	0c0b      	lsrs	r3, r1, #16
 800e398:	fb02 3306 	mla	r3, r2, r6, r3
 800e39c:	b289      	uxth	r1, r1
 800e39e:	3001      	adds	r0, #1
 800e3a0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800e3a4:	4285      	cmp	r5, r0
 800e3a6:	f84c 1b04 	str.w	r1, [ip], #4
 800e3aa:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800e3ae:	dcec      	bgt.n	800e38a <__multadd+0x12>
 800e3b0:	b30e      	cbz	r6, 800e3f6 <__multadd+0x7e>
 800e3b2:	68a3      	ldr	r3, [r4, #8]
 800e3b4:	42ab      	cmp	r3, r5
 800e3b6:	dc19      	bgt.n	800e3ec <__multadd+0x74>
 800e3b8:	6861      	ldr	r1, [r4, #4]
 800e3ba:	4638      	mov	r0, r7
 800e3bc:	3101      	adds	r1, #1
 800e3be:	f7ff ff79 	bl	800e2b4 <_Balloc>
 800e3c2:	4680      	mov	r8, r0
 800e3c4:	b928      	cbnz	r0, 800e3d2 <__multadd+0x5a>
 800e3c6:	4602      	mov	r2, r0
 800e3c8:	4b0c      	ldr	r3, [pc, #48]	@ (800e3fc <__multadd+0x84>)
 800e3ca:	480d      	ldr	r0, [pc, #52]	@ (800e400 <__multadd+0x88>)
 800e3cc:	21ba      	movs	r1, #186	@ 0xba
 800e3ce:	f7fe ffe7 	bl	800d3a0 <__assert_func>
 800e3d2:	6922      	ldr	r2, [r4, #16]
 800e3d4:	3202      	adds	r2, #2
 800e3d6:	f104 010c 	add.w	r1, r4, #12
 800e3da:	0092      	lsls	r2, r2, #2
 800e3dc:	300c      	adds	r0, #12
 800e3de:	f7fe ffd0 	bl	800d382 <memcpy>
 800e3e2:	4621      	mov	r1, r4
 800e3e4:	4638      	mov	r0, r7
 800e3e6:	f7ff ffa5 	bl	800e334 <_Bfree>
 800e3ea:	4644      	mov	r4, r8
 800e3ec:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800e3f0:	3501      	adds	r5, #1
 800e3f2:	615e      	str	r6, [r3, #20]
 800e3f4:	6125      	str	r5, [r4, #16]
 800e3f6:	4620      	mov	r0, r4
 800e3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3fc:	080111e6 	.word	0x080111e6
 800e400:	080111f7 	.word	0x080111f7

0800e404 <__hi0bits>:
 800e404:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800e408:	4603      	mov	r3, r0
 800e40a:	bf36      	itet	cc
 800e40c:	0403      	lslcc	r3, r0, #16
 800e40e:	2000      	movcs	r0, #0
 800e410:	2010      	movcc	r0, #16
 800e412:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e416:	bf3c      	itt	cc
 800e418:	021b      	lslcc	r3, r3, #8
 800e41a:	3008      	addcc	r0, #8
 800e41c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e420:	bf3c      	itt	cc
 800e422:	011b      	lslcc	r3, r3, #4
 800e424:	3004      	addcc	r0, #4
 800e426:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800e42a:	bf3c      	itt	cc
 800e42c:	009b      	lslcc	r3, r3, #2
 800e42e:	3002      	addcc	r0, #2
 800e430:	2b00      	cmp	r3, #0
 800e432:	db05      	blt.n	800e440 <__hi0bits+0x3c>
 800e434:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800e438:	f100 0001 	add.w	r0, r0, #1
 800e43c:	bf08      	it	eq
 800e43e:	2020      	moveq	r0, #32
 800e440:	4770      	bx	lr

0800e442 <__lo0bits>:
 800e442:	6803      	ldr	r3, [r0, #0]
 800e444:	4602      	mov	r2, r0
 800e446:	f013 0007 	ands.w	r0, r3, #7
 800e44a:	d00b      	beq.n	800e464 <__lo0bits+0x22>
 800e44c:	07d9      	lsls	r1, r3, #31
 800e44e:	d421      	bmi.n	800e494 <__lo0bits+0x52>
 800e450:	0798      	lsls	r0, r3, #30
 800e452:	bf49      	itett	mi
 800e454:	085b      	lsrmi	r3, r3, #1
 800e456:	089b      	lsrpl	r3, r3, #2
 800e458:	2001      	movmi	r0, #1
 800e45a:	6013      	strmi	r3, [r2, #0]
 800e45c:	bf5c      	itt	pl
 800e45e:	6013      	strpl	r3, [r2, #0]
 800e460:	2002      	movpl	r0, #2
 800e462:	4770      	bx	lr
 800e464:	b299      	uxth	r1, r3
 800e466:	b909      	cbnz	r1, 800e46c <__lo0bits+0x2a>
 800e468:	0c1b      	lsrs	r3, r3, #16
 800e46a:	2010      	movs	r0, #16
 800e46c:	b2d9      	uxtb	r1, r3
 800e46e:	b909      	cbnz	r1, 800e474 <__lo0bits+0x32>
 800e470:	3008      	adds	r0, #8
 800e472:	0a1b      	lsrs	r3, r3, #8
 800e474:	0719      	lsls	r1, r3, #28
 800e476:	bf04      	itt	eq
 800e478:	091b      	lsreq	r3, r3, #4
 800e47a:	3004      	addeq	r0, #4
 800e47c:	0799      	lsls	r1, r3, #30
 800e47e:	bf04      	itt	eq
 800e480:	089b      	lsreq	r3, r3, #2
 800e482:	3002      	addeq	r0, #2
 800e484:	07d9      	lsls	r1, r3, #31
 800e486:	d403      	bmi.n	800e490 <__lo0bits+0x4e>
 800e488:	085b      	lsrs	r3, r3, #1
 800e48a:	f100 0001 	add.w	r0, r0, #1
 800e48e:	d003      	beq.n	800e498 <__lo0bits+0x56>
 800e490:	6013      	str	r3, [r2, #0]
 800e492:	4770      	bx	lr
 800e494:	2000      	movs	r0, #0
 800e496:	4770      	bx	lr
 800e498:	2020      	movs	r0, #32
 800e49a:	4770      	bx	lr

0800e49c <__i2b>:
 800e49c:	b510      	push	{r4, lr}
 800e49e:	460c      	mov	r4, r1
 800e4a0:	2101      	movs	r1, #1
 800e4a2:	f7ff ff07 	bl	800e2b4 <_Balloc>
 800e4a6:	4602      	mov	r2, r0
 800e4a8:	b928      	cbnz	r0, 800e4b6 <__i2b+0x1a>
 800e4aa:	4b05      	ldr	r3, [pc, #20]	@ (800e4c0 <__i2b+0x24>)
 800e4ac:	4805      	ldr	r0, [pc, #20]	@ (800e4c4 <__i2b+0x28>)
 800e4ae:	f240 1145 	movw	r1, #325	@ 0x145
 800e4b2:	f7fe ff75 	bl	800d3a0 <__assert_func>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	6144      	str	r4, [r0, #20]
 800e4ba:	6103      	str	r3, [r0, #16]
 800e4bc:	bd10      	pop	{r4, pc}
 800e4be:	bf00      	nop
 800e4c0:	080111e6 	.word	0x080111e6
 800e4c4:	080111f7 	.word	0x080111f7

0800e4c8 <__multiply>:
 800e4c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e4cc:	4617      	mov	r7, r2
 800e4ce:	690a      	ldr	r2, [r1, #16]
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	429a      	cmp	r2, r3
 800e4d4:	bfa8      	it	ge
 800e4d6:	463b      	movge	r3, r7
 800e4d8:	4689      	mov	r9, r1
 800e4da:	bfa4      	itt	ge
 800e4dc:	460f      	movge	r7, r1
 800e4de:	4699      	movge	r9, r3
 800e4e0:	693d      	ldr	r5, [r7, #16]
 800e4e2:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800e4e6:	68bb      	ldr	r3, [r7, #8]
 800e4e8:	6879      	ldr	r1, [r7, #4]
 800e4ea:	eb05 060a 	add.w	r6, r5, sl
 800e4ee:	42b3      	cmp	r3, r6
 800e4f0:	b085      	sub	sp, #20
 800e4f2:	bfb8      	it	lt
 800e4f4:	3101      	addlt	r1, #1
 800e4f6:	f7ff fedd 	bl	800e2b4 <_Balloc>
 800e4fa:	b930      	cbnz	r0, 800e50a <__multiply+0x42>
 800e4fc:	4602      	mov	r2, r0
 800e4fe:	4b41      	ldr	r3, [pc, #260]	@ (800e604 <__multiply+0x13c>)
 800e500:	4841      	ldr	r0, [pc, #260]	@ (800e608 <__multiply+0x140>)
 800e502:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800e506:	f7fe ff4b 	bl	800d3a0 <__assert_func>
 800e50a:	f100 0414 	add.w	r4, r0, #20
 800e50e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800e512:	4623      	mov	r3, r4
 800e514:	2200      	movs	r2, #0
 800e516:	4573      	cmp	r3, lr
 800e518:	d320      	bcc.n	800e55c <__multiply+0x94>
 800e51a:	f107 0814 	add.w	r8, r7, #20
 800e51e:	f109 0114 	add.w	r1, r9, #20
 800e522:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800e526:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800e52a:	9302      	str	r3, [sp, #8]
 800e52c:	1beb      	subs	r3, r5, r7
 800e52e:	3b15      	subs	r3, #21
 800e530:	f023 0303 	bic.w	r3, r3, #3
 800e534:	3304      	adds	r3, #4
 800e536:	3715      	adds	r7, #21
 800e538:	42bd      	cmp	r5, r7
 800e53a:	bf38      	it	cc
 800e53c:	2304      	movcc	r3, #4
 800e53e:	9301      	str	r3, [sp, #4]
 800e540:	9b02      	ldr	r3, [sp, #8]
 800e542:	9103      	str	r1, [sp, #12]
 800e544:	428b      	cmp	r3, r1
 800e546:	d80c      	bhi.n	800e562 <__multiply+0x9a>
 800e548:	2e00      	cmp	r6, #0
 800e54a:	dd03      	ble.n	800e554 <__multiply+0x8c>
 800e54c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800e550:	2b00      	cmp	r3, #0
 800e552:	d055      	beq.n	800e600 <__multiply+0x138>
 800e554:	6106      	str	r6, [r0, #16]
 800e556:	b005      	add	sp, #20
 800e558:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e55c:	f843 2b04 	str.w	r2, [r3], #4
 800e560:	e7d9      	b.n	800e516 <__multiply+0x4e>
 800e562:	f8b1 a000 	ldrh.w	sl, [r1]
 800e566:	f1ba 0f00 	cmp.w	sl, #0
 800e56a:	d01f      	beq.n	800e5ac <__multiply+0xe4>
 800e56c:	46c4      	mov	ip, r8
 800e56e:	46a1      	mov	r9, r4
 800e570:	2700      	movs	r7, #0
 800e572:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e576:	f8d9 3000 	ldr.w	r3, [r9]
 800e57a:	fa1f fb82 	uxth.w	fp, r2
 800e57e:	b29b      	uxth	r3, r3
 800e580:	fb0a 330b 	mla	r3, sl, fp, r3
 800e584:	443b      	add	r3, r7
 800e586:	f8d9 7000 	ldr.w	r7, [r9]
 800e58a:	0c12      	lsrs	r2, r2, #16
 800e58c:	0c3f      	lsrs	r7, r7, #16
 800e58e:	fb0a 7202 	mla	r2, sl, r2, r7
 800e592:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800e596:	b29b      	uxth	r3, r3
 800e598:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e59c:	4565      	cmp	r5, ip
 800e59e:	f849 3b04 	str.w	r3, [r9], #4
 800e5a2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800e5a6:	d8e4      	bhi.n	800e572 <__multiply+0xaa>
 800e5a8:	9b01      	ldr	r3, [sp, #4]
 800e5aa:	50e7      	str	r7, [r4, r3]
 800e5ac:	9b03      	ldr	r3, [sp, #12]
 800e5ae:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800e5b2:	3104      	adds	r1, #4
 800e5b4:	f1b9 0f00 	cmp.w	r9, #0
 800e5b8:	d020      	beq.n	800e5fc <__multiply+0x134>
 800e5ba:	6823      	ldr	r3, [r4, #0]
 800e5bc:	4647      	mov	r7, r8
 800e5be:	46a4      	mov	ip, r4
 800e5c0:	f04f 0a00 	mov.w	sl, #0
 800e5c4:	f8b7 b000 	ldrh.w	fp, [r7]
 800e5c8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800e5cc:	fb09 220b 	mla	r2, r9, fp, r2
 800e5d0:	4452      	add	r2, sl
 800e5d2:	b29b      	uxth	r3, r3
 800e5d4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800e5d8:	f84c 3b04 	str.w	r3, [ip], #4
 800e5dc:	f857 3b04 	ldr.w	r3, [r7], #4
 800e5e0:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5e4:	f8bc 3000 	ldrh.w	r3, [ip]
 800e5e8:	fb09 330a 	mla	r3, r9, sl, r3
 800e5ec:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800e5f0:	42bd      	cmp	r5, r7
 800e5f2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800e5f6:	d8e5      	bhi.n	800e5c4 <__multiply+0xfc>
 800e5f8:	9a01      	ldr	r2, [sp, #4]
 800e5fa:	50a3      	str	r3, [r4, r2]
 800e5fc:	3404      	adds	r4, #4
 800e5fe:	e79f      	b.n	800e540 <__multiply+0x78>
 800e600:	3e01      	subs	r6, #1
 800e602:	e7a1      	b.n	800e548 <__multiply+0x80>
 800e604:	080111e6 	.word	0x080111e6
 800e608:	080111f7 	.word	0x080111f7

0800e60c <__pow5mult>:
 800e60c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e610:	4615      	mov	r5, r2
 800e612:	f012 0203 	ands.w	r2, r2, #3
 800e616:	4607      	mov	r7, r0
 800e618:	460e      	mov	r6, r1
 800e61a:	d007      	beq.n	800e62c <__pow5mult+0x20>
 800e61c:	4c25      	ldr	r4, [pc, #148]	@ (800e6b4 <__pow5mult+0xa8>)
 800e61e:	3a01      	subs	r2, #1
 800e620:	2300      	movs	r3, #0
 800e622:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e626:	f7ff fea7 	bl	800e378 <__multadd>
 800e62a:	4606      	mov	r6, r0
 800e62c:	10ad      	asrs	r5, r5, #2
 800e62e:	d03d      	beq.n	800e6ac <__pow5mult+0xa0>
 800e630:	69fc      	ldr	r4, [r7, #28]
 800e632:	b97c      	cbnz	r4, 800e654 <__pow5mult+0x48>
 800e634:	2010      	movs	r0, #16
 800e636:	f7ff fd75 	bl	800e124 <malloc>
 800e63a:	4602      	mov	r2, r0
 800e63c:	61f8      	str	r0, [r7, #28]
 800e63e:	b928      	cbnz	r0, 800e64c <__pow5mult+0x40>
 800e640:	4b1d      	ldr	r3, [pc, #116]	@ (800e6b8 <__pow5mult+0xac>)
 800e642:	481e      	ldr	r0, [pc, #120]	@ (800e6bc <__pow5mult+0xb0>)
 800e644:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800e648:	f7fe feaa 	bl	800d3a0 <__assert_func>
 800e64c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e650:	6004      	str	r4, [r0, #0]
 800e652:	60c4      	str	r4, [r0, #12]
 800e654:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800e658:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e65c:	b94c      	cbnz	r4, 800e672 <__pow5mult+0x66>
 800e65e:	f240 2171 	movw	r1, #625	@ 0x271
 800e662:	4638      	mov	r0, r7
 800e664:	f7ff ff1a 	bl	800e49c <__i2b>
 800e668:	2300      	movs	r3, #0
 800e66a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e66e:	4604      	mov	r4, r0
 800e670:	6003      	str	r3, [r0, #0]
 800e672:	f04f 0900 	mov.w	r9, #0
 800e676:	07eb      	lsls	r3, r5, #31
 800e678:	d50a      	bpl.n	800e690 <__pow5mult+0x84>
 800e67a:	4631      	mov	r1, r6
 800e67c:	4622      	mov	r2, r4
 800e67e:	4638      	mov	r0, r7
 800e680:	f7ff ff22 	bl	800e4c8 <__multiply>
 800e684:	4631      	mov	r1, r6
 800e686:	4680      	mov	r8, r0
 800e688:	4638      	mov	r0, r7
 800e68a:	f7ff fe53 	bl	800e334 <_Bfree>
 800e68e:	4646      	mov	r6, r8
 800e690:	106d      	asrs	r5, r5, #1
 800e692:	d00b      	beq.n	800e6ac <__pow5mult+0xa0>
 800e694:	6820      	ldr	r0, [r4, #0]
 800e696:	b938      	cbnz	r0, 800e6a8 <__pow5mult+0x9c>
 800e698:	4622      	mov	r2, r4
 800e69a:	4621      	mov	r1, r4
 800e69c:	4638      	mov	r0, r7
 800e69e:	f7ff ff13 	bl	800e4c8 <__multiply>
 800e6a2:	6020      	str	r0, [r4, #0]
 800e6a4:	f8c0 9000 	str.w	r9, [r0]
 800e6a8:	4604      	mov	r4, r0
 800e6aa:	e7e4      	b.n	800e676 <__pow5mult+0x6a>
 800e6ac:	4630      	mov	r0, r6
 800e6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e6b2:	bf00      	nop
 800e6b4:	08011364 	.word	0x08011364
 800e6b8:	08011098 	.word	0x08011098
 800e6bc:	080111f7 	.word	0x080111f7

0800e6c0 <__lshift>:
 800e6c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e6c4:	460c      	mov	r4, r1
 800e6c6:	6849      	ldr	r1, [r1, #4]
 800e6c8:	6923      	ldr	r3, [r4, #16]
 800e6ca:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e6ce:	68a3      	ldr	r3, [r4, #8]
 800e6d0:	4607      	mov	r7, r0
 800e6d2:	4691      	mov	r9, r2
 800e6d4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e6d8:	f108 0601 	add.w	r6, r8, #1
 800e6dc:	42b3      	cmp	r3, r6
 800e6de:	db0b      	blt.n	800e6f8 <__lshift+0x38>
 800e6e0:	4638      	mov	r0, r7
 800e6e2:	f7ff fde7 	bl	800e2b4 <_Balloc>
 800e6e6:	4605      	mov	r5, r0
 800e6e8:	b948      	cbnz	r0, 800e6fe <__lshift+0x3e>
 800e6ea:	4602      	mov	r2, r0
 800e6ec:	4b28      	ldr	r3, [pc, #160]	@ (800e790 <__lshift+0xd0>)
 800e6ee:	4829      	ldr	r0, [pc, #164]	@ (800e794 <__lshift+0xd4>)
 800e6f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800e6f4:	f7fe fe54 	bl	800d3a0 <__assert_func>
 800e6f8:	3101      	adds	r1, #1
 800e6fa:	005b      	lsls	r3, r3, #1
 800e6fc:	e7ee      	b.n	800e6dc <__lshift+0x1c>
 800e6fe:	2300      	movs	r3, #0
 800e700:	f100 0114 	add.w	r1, r0, #20
 800e704:	f100 0210 	add.w	r2, r0, #16
 800e708:	4618      	mov	r0, r3
 800e70a:	4553      	cmp	r3, sl
 800e70c:	db33      	blt.n	800e776 <__lshift+0xb6>
 800e70e:	6920      	ldr	r0, [r4, #16]
 800e710:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e714:	f104 0314 	add.w	r3, r4, #20
 800e718:	f019 091f 	ands.w	r9, r9, #31
 800e71c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e720:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e724:	d02b      	beq.n	800e77e <__lshift+0xbe>
 800e726:	f1c9 0e20 	rsb	lr, r9, #32
 800e72a:	468a      	mov	sl, r1
 800e72c:	2200      	movs	r2, #0
 800e72e:	6818      	ldr	r0, [r3, #0]
 800e730:	fa00 f009 	lsl.w	r0, r0, r9
 800e734:	4310      	orrs	r0, r2
 800e736:	f84a 0b04 	str.w	r0, [sl], #4
 800e73a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e73e:	459c      	cmp	ip, r3
 800e740:	fa22 f20e 	lsr.w	r2, r2, lr
 800e744:	d8f3      	bhi.n	800e72e <__lshift+0x6e>
 800e746:	ebac 0304 	sub.w	r3, ip, r4
 800e74a:	3b15      	subs	r3, #21
 800e74c:	f023 0303 	bic.w	r3, r3, #3
 800e750:	3304      	adds	r3, #4
 800e752:	f104 0015 	add.w	r0, r4, #21
 800e756:	4560      	cmp	r0, ip
 800e758:	bf88      	it	hi
 800e75a:	2304      	movhi	r3, #4
 800e75c:	50ca      	str	r2, [r1, r3]
 800e75e:	b10a      	cbz	r2, 800e764 <__lshift+0xa4>
 800e760:	f108 0602 	add.w	r6, r8, #2
 800e764:	3e01      	subs	r6, #1
 800e766:	4638      	mov	r0, r7
 800e768:	612e      	str	r6, [r5, #16]
 800e76a:	4621      	mov	r1, r4
 800e76c:	f7ff fde2 	bl	800e334 <_Bfree>
 800e770:	4628      	mov	r0, r5
 800e772:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e776:	f842 0f04 	str.w	r0, [r2, #4]!
 800e77a:	3301      	adds	r3, #1
 800e77c:	e7c5      	b.n	800e70a <__lshift+0x4a>
 800e77e:	3904      	subs	r1, #4
 800e780:	f853 2b04 	ldr.w	r2, [r3], #4
 800e784:	f841 2f04 	str.w	r2, [r1, #4]!
 800e788:	459c      	cmp	ip, r3
 800e78a:	d8f9      	bhi.n	800e780 <__lshift+0xc0>
 800e78c:	e7ea      	b.n	800e764 <__lshift+0xa4>
 800e78e:	bf00      	nop
 800e790:	080111e6 	.word	0x080111e6
 800e794:	080111f7 	.word	0x080111f7

0800e798 <__mcmp>:
 800e798:	690a      	ldr	r2, [r1, #16]
 800e79a:	4603      	mov	r3, r0
 800e79c:	6900      	ldr	r0, [r0, #16]
 800e79e:	1a80      	subs	r0, r0, r2
 800e7a0:	b530      	push	{r4, r5, lr}
 800e7a2:	d10e      	bne.n	800e7c2 <__mcmp+0x2a>
 800e7a4:	3314      	adds	r3, #20
 800e7a6:	3114      	adds	r1, #20
 800e7a8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800e7ac:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800e7b0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800e7b4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800e7b8:	4295      	cmp	r5, r2
 800e7ba:	d003      	beq.n	800e7c4 <__mcmp+0x2c>
 800e7bc:	d205      	bcs.n	800e7ca <__mcmp+0x32>
 800e7be:	f04f 30ff 	mov.w	r0, #4294967295
 800e7c2:	bd30      	pop	{r4, r5, pc}
 800e7c4:	42a3      	cmp	r3, r4
 800e7c6:	d3f3      	bcc.n	800e7b0 <__mcmp+0x18>
 800e7c8:	e7fb      	b.n	800e7c2 <__mcmp+0x2a>
 800e7ca:	2001      	movs	r0, #1
 800e7cc:	e7f9      	b.n	800e7c2 <__mcmp+0x2a>
	...

0800e7d0 <__mdiff>:
 800e7d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7d4:	4689      	mov	r9, r1
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	4611      	mov	r1, r2
 800e7da:	4648      	mov	r0, r9
 800e7dc:	4614      	mov	r4, r2
 800e7de:	f7ff ffdb 	bl	800e798 <__mcmp>
 800e7e2:	1e05      	subs	r5, r0, #0
 800e7e4:	d112      	bne.n	800e80c <__mdiff+0x3c>
 800e7e6:	4629      	mov	r1, r5
 800e7e8:	4630      	mov	r0, r6
 800e7ea:	f7ff fd63 	bl	800e2b4 <_Balloc>
 800e7ee:	4602      	mov	r2, r0
 800e7f0:	b928      	cbnz	r0, 800e7fe <__mdiff+0x2e>
 800e7f2:	4b3f      	ldr	r3, [pc, #252]	@ (800e8f0 <__mdiff+0x120>)
 800e7f4:	f240 2137 	movw	r1, #567	@ 0x237
 800e7f8:	483e      	ldr	r0, [pc, #248]	@ (800e8f4 <__mdiff+0x124>)
 800e7fa:	f7fe fdd1 	bl	800d3a0 <__assert_func>
 800e7fe:	2301      	movs	r3, #1
 800e800:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e804:	4610      	mov	r0, r2
 800e806:	b003      	add	sp, #12
 800e808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e80c:	bfbc      	itt	lt
 800e80e:	464b      	movlt	r3, r9
 800e810:	46a1      	movlt	r9, r4
 800e812:	4630      	mov	r0, r6
 800e814:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800e818:	bfba      	itte	lt
 800e81a:	461c      	movlt	r4, r3
 800e81c:	2501      	movlt	r5, #1
 800e81e:	2500      	movge	r5, #0
 800e820:	f7ff fd48 	bl	800e2b4 <_Balloc>
 800e824:	4602      	mov	r2, r0
 800e826:	b918      	cbnz	r0, 800e830 <__mdiff+0x60>
 800e828:	4b31      	ldr	r3, [pc, #196]	@ (800e8f0 <__mdiff+0x120>)
 800e82a:	f240 2145 	movw	r1, #581	@ 0x245
 800e82e:	e7e3      	b.n	800e7f8 <__mdiff+0x28>
 800e830:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800e834:	6926      	ldr	r6, [r4, #16]
 800e836:	60c5      	str	r5, [r0, #12]
 800e838:	f109 0310 	add.w	r3, r9, #16
 800e83c:	f109 0514 	add.w	r5, r9, #20
 800e840:	f104 0e14 	add.w	lr, r4, #20
 800e844:	f100 0b14 	add.w	fp, r0, #20
 800e848:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800e84c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800e850:	9301      	str	r3, [sp, #4]
 800e852:	46d9      	mov	r9, fp
 800e854:	f04f 0c00 	mov.w	ip, #0
 800e858:	9b01      	ldr	r3, [sp, #4]
 800e85a:	f85e 0b04 	ldr.w	r0, [lr], #4
 800e85e:	f853 af04 	ldr.w	sl, [r3, #4]!
 800e862:	9301      	str	r3, [sp, #4]
 800e864:	fa1f f38a 	uxth.w	r3, sl
 800e868:	4619      	mov	r1, r3
 800e86a:	b283      	uxth	r3, r0
 800e86c:	1acb      	subs	r3, r1, r3
 800e86e:	0c00      	lsrs	r0, r0, #16
 800e870:	4463      	add	r3, ip
 800e872:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800e876:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800e87a:	b29b      	uxth	r3, r3
 800e87c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800e880:	4576      	cmp	r6, lr
 800e882:	f849 3b04 	str.w	r3, [r9], #4
 800e886:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e88a:	d8e5      	bhi.n	800e858 <__mdiff+0x88>
 800e88c:	1b33      	subs	r3, r6, r4
 800e88e:	3b15      	subs	r3, #21
 800e890:	f023 0303 	bic.w	r3, r3, #3
 800e894:	3415      	adds	r4, #21
 800e896:	3304      	adds	r3, #4
 800e898:	42a6      	cmp	r6, r4
 800e89a:	bf38      	it	cc
 800e89c:	2304      	movcc	r3, #4
 800e89e:	441d      	add	r5, r3
 800e8a0:	445b      	add	r3, fp
 800e8a2:	461e      	mov	r6, r3
 800e8a4:	462c      	mov	r4, r5
 800e8a6:	4544      	cmp	r4, r8
 800e8a8:	d30e      	bcc.n	800e8c8 <__mdiff+0xf8>
 800e8aa:	f108 0103 	add.w	r1, r8, #3
 800e8ae:	1b49      	subs	r1, r1, r5
 800e8b0:	f021 0103 	bic.w	r1, r1, #3
 800e8b4:	3d03      	subs	r5, #3
 800e8b6:	45a8      	cmp	r8, r5
 800e8b8:	bf38      	it	cc
 800e8ba:	2100      	movcc	r1, #0
 800e8bc:	440b      	add	r3, r1
 800e8be:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e8c2:	b191      	cbz	r1, 800e8ea <__mdiff+0x11a>
 800e8c4:	6117      	str	r7, [r2, #16]
 800e8c6:	e79d      	b.n	800e804 <__mdiff+0x34>
 800e8c8:	f854 1b04 	ldr.w	r1, [r4], #4
 800e8cc:	46e6      	mov	lr, ip
 800e8ce:	0c08      	lsrs	r0, r1, #16
 800e8d0:	fa1c fc81 	uxtah	ip, ip, r1
 800e8d4:	4471      	add	r1, lr
 800e8d6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800e8da:	b289      	uxth	r1, r1
 800e8dc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800e8e0:	f846 1b04 	str.w	r1, [r6], #4
 800e8e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800e8e8:	e7dd      	b.n	800e8a6 <__mdiff+0xd6>
 800e8ea:	3f01      	subs	r7, #1
 800e8ec:	e7e7      	b.n	800e8be <__mdiff+0xee>
 800e8ee:	bf00      	nop
 800e8f0:	080111e6 	.word	0x080111e6
 800e8f4:	080111f7 	.word	0x080111f7

0800e8f8 <__d2b>:
 800e8f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e8fc:	460f      	mov	r7, r1
 800e8fe:	2101      	movs	r1, #1
 800e900:	ec59 8b10 	vmov	r8, r9, d0
 800e904:	4616      	mov	r6, r2
 800e906:	f7ff fcd5 	bl	800e2b4 <_Balloc>
 800e90a:	4604      	mov	r4, r0
 800e90c:	b930      	cbnz	r0, 800e91c <__d2b+0x24>
 800e90e:	4602      	mov	r2, r0
 800e910:	4b23      	ldr	r3, [pc, #140]	@ (800e9a0 <__d2b+0xa8>)
 800e912:	4824      	ldr	r0, [pc, #144]	@ (800e9a4 <__d2b+0xac>)
 800e914:	f240 310f 	movw	r1, #783	@ 0x30f
 800e918:	f7fe fd42 	bl	800d3a0 <__assert_func>
 800e91c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800e920:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800e924:	b10d      	cbz	r5, 800e92a <__d2b+0x32>
 800e926:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800e92a:	9301      	str	r3, [sp, #4]
 800e92c:	f1b8 0300 	subs.w	r3, r8, #0
 800e930:	d023      	beq.n	800e97a <__d2b+0x82>
 800e932:	4668      	mov	r0, sp
 800e934:	9300      	str	r3, [sp, #0]
 800e936:	f7ff fd84 	bl	800e442 <__lo0bits>
 800e93a:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e93e:	b1d0      	cbz	r0, 800e976 <__d2b+0x7e>
 800e940:	f1c0 0320 	rsb	r3, r0, #32
 800e944:	fa02 f303 	lsl.w	r3, r2, r3
 800e948:	430b      	orrs	r3, r1
 800e94a:	40c2      	lsrs	r2, r0
 800e94c:	6163      	str	r3, [r4, #20]
 800e94e:	9201      	str	r2, [sp, #4]
 800e950:	9b01      	ldr	r3, [sp, #4]
 800e952:	61a3      	str	r3, [r4, #24]
 800e954:	2b00      	cmp	r3, #0
 800e956:	bf0c      	ite	eq
 800e958:	2201      	moveq	r2, #1
 800e95a:	2202      	movne	r2, #2
 800e95c:	6122      	str	r2, [r4, #16]
 800e95e:	b1a5      	cbz	r5, 800e98a <__d2b+0x92>
 800e960:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800e964:	4405      	add	r5, r0
 800e966:	603d      	str	r5, [r7, #0]
 800e968:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800e96c:	6030      	str	r0, [r6, #0]
 800e96e:	4620      	mov	r0, r4
 800e970:	b003      	add	sp, #12
 800e972:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e976:	6161      	str	r1, [r4, #20]
 800e978:	e7ea      	b.n	800e950 <__d2b+0x58>
 800e97a:	a801      	add	r0, sp, #4
 800e97c:	f7ff fd61 	bl	800e442 <__lo0bits>
 800e980:	9b01      	ldr	r3, [sp, #4]
 800e982:	6163      	str	r3, [r4, #20]
 800e984:	3020      	adds	r0, #32
 800e986:	2201      	movs	r2, #1
 800e988:	e7e8      	b.n	800e95c <__d2b+0x64>
 800e98a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e98e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800e992:	6038      	str	r0, [r7, #0]
 800e994:	6918      	ldr	r0, [r3, #16]
 800e996:	f7ff fd35 	bl	800e404 <__hi0bits>
 800e99a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e99e:	e7e5      	b.n	800e96c <__d2b+0x74>
 800e9a0:	080111e6 	.word	0x080111e6
 800e9a4:	080111f7 	.word	0x080111f7

0800e9a8 <__ascii_wctomb>:
 800e9a8:	4603      	mov	r3, r0
 800e9aa:	4608      	mov	r0, r1
 800e9ac:	b141      	cbz	r1, 800e9c0 <__ascii_wctomb+0x18>
 800e9ae:	2aff      	cmp	r2, #255	@ 0xff
 800e9b0:	d904      	bls.n	800e9bc <__ascii_wctomb+0x14>
 800e9b2:	228a      	movs	r2, #138	@ 0x8a
 800e9b4:	601a      	str	r2, [r3, #0]
 800e9b6:	f04f 30ff 	mov.w	r0, #4294967295
 800e9ba:	4770      	bx	lr
 800e9bc:	700a      	strb	r2, [r1, #0]
 800e9be:	2001      	movs	r0, #1
 800e9c0:	4770      	bx	lr

0800e9c2 <__ssputs_r>:
 800e9c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e9c6:	688e      	ldr	r6, [r1, #8]
 800e9c8:	461f      	mov	r7, r3
 800e9ca:	42be      	cmp	r6, r7
 800e9cc:	680b      	ldr	r3, [r1, #0]
 800e9ce:	4682      	mov	sl, r0
 800e9d0:	460c      	mov	r4, r1
 800e9d2:	4690      	mov	r8, r2
 800e9d4:	d82d      	bhi.n	800ea32 <__ssputs_r+0x70>
 800e9d6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800e9da:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800e9de:	d026      	beq.n	800ea2e <__ssputs_r+0x6c>
 800e9e0:	6965      	ldr	r5, [r4, #20]
 800e9e2:	6909      	ldr	r1, [r1, #16]
 800e9e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e9e8:	eba3 0901 	sub.w	r9, r3, r1
 800e9ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e9f0:	1c7b      	adds	r3, r7, #1
 800e9f2:	444b      	add	r3, r9
 800e9f4:	106d      	asrs	r5, r5, #1
 800e9f6:	429d      	cmp	r5, r3
 800e9f8:	bf38      	it	cc
 800e9fa:	461d      	movcc	r5, r3
 800e9fc:	0553      	lsls	r3, r2, #21
 800e9fe:	d527      	bpl.n	800ea50 <__ssputs_r+0x8e>
 800ea00:	4629      	mov	r1, r5
 800ea02:	f7ff fbb9 	bl	800e178 <_malloc_r>
 800ea06:	4606      	mov	r6, r0
 800ea08:	b360      	cbz	r0, 800ea64 <__ssputs_r+0xa2>
 800ea0a:	6921      	ldr	r1, [r4, #16]
 800ea0c:	464a      	mov	r2, r9
 800ea0e:	f7fe fcb8 	bl	800d382 <memcpy>
 800ea12:	89a3      	ldrh	r3, [r4, #12]
 800ea14:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800ea18:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ea1c:	81a3      	strh	r3, [r4, #12]
 800ea1e:	6126      	str	r6, [r4, #16]
 800ea20:	6165      	str	r5, [r4, #20]
 800ea22:	444e      	add	r6, r9
 800ea24:	eba5 0509 	sub.w	r5, r5, r9
 800ea28:	6026      	str	r6, [r4, #0]
 800ea2a:	60a5      	str	r5, [r4, #8]
 800ea2c:	463e      	mov	r6, r7
 800ea2e:	42be      	cmp	r6, r7
 800ea30:	d900      	bls.n	800ea34 <__ssputs_r+0x72>
 800ea32:	463e      	mov	r6, r7
 800ea34:	6820      	ldr	r0, [r4, #0]
 800ea36:	4632      	mov	r2, r6
 800ea38:	4641      	mov	r1, r8
 800ea3a:	f000 fb7b 	bl	800f134 <memmove>
 800ea3e:	68a3      	ldr	r3, [r4, #8]
 800ea40:	1b9b      	subs	r3, r3, r6
 800ea42:	60a3      	str	r3, [r4, #8]
 800ea44:	6823      	ldr	r3, [r4, #0]
 800ea46:	4433      	add	r3, r6
 800ea48:	6023      	str	r3, [r4, #0]
 800ea4a:	2000      	movs	r0, #0
 800ea4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ea50:	462a      	mov	r2, r5
 800ea52:	f000 fbd6 	bl	800f202 <_realloc_r>
 800ea56:	4606      	mov	r6, r0
 800ea58:	2800      	cmp	r0, #0
 800ea5a:	d1e0      	bne.n	800ea1e <__ssputs_r+0x5c>
 800ea5c:	6921      	ldr	r1, [r4, #16]
 800ea5e:	4650      	mov	r0, sl
 800ea60:	f7ff fb16 	bl	800e090 <_free_r>
 800ea64:	230c      	movs	r3, #12
 800ea66:	f8ca 3000 	str.w	r3, [sl]
 800ea6a:	89a3      	ldrh	r3, [r4, #12]
 800ea6c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ea70:	81a3      	strh	r3, [r4, #12]
 800ea72:	f04f 30ff 	mov.w	r0, #4294967295
 800ea76:	e7e9      	b.n	800ea4c <__ssputs_r+0x8a>

0800ea78 <_svfiprintf_r>:
 800ea78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea7c:	4698      	mov	r8, r3
 800ea7e:	898b      	ldrh	r3, [r1, #12]
 800ea80:	061b      	lsls	r3, r3, #24
 800ea82:	b09d      	sub	sp, #116	@ 0x74
 800ea84:	4607      	mov	r7, r0
 800ea86:	460d      	mov	r5, r1
 800ea88:	4614      	mov	r4, r2
 800ea8a:	d510      	bpl.n	800eaae <_svfiprintf_r+0x36>
 800ea8c:	690b      	ldr	r3, [r1, #16]
 800ea8e:	b973      	cbnz	r3, 800eaae <_svfiprintf_r+0x36>
 800ea90:	2140      	movs	r1, #64	@ 0x40
 800ea92:	f7ff fb71 	bl	800e178 <_malloc_r>
 800ea96:	6028      	str	r0, [r5, #0]
 800ea98:	6128      	str	r0, [r5, #16]
 800ea9a:	b930      	cbnz	r0, 800eaaa <_svfiprintf_r+0x32>
 800ea9c:	230c      	movs	r3, #12
 800ea9e:	603b      	str	r3, [r7, #0]
 800eaa0:	f04f 30ff 	mov.w	r0, #4294967295
 800eaa4:	b01d      	add	sp, #116	@ 0x74
 800eaa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eaaa:	2340      	movs	r3, #64	@ 0x40
 800eaac:	616b      	str	r3, [r5, #20]
 800eaae:	2300      	movs	r3, #0
 800eab0:	9309      	str	r3, [sp, #36]	@ 0x24
 800eab2:	2320      	movs	r3, #32
 800eab4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800eab8:	f8cd 800c 	str.w	r8, [sp, #12]
 800eabc:	2330      	movs	r3, #48	@ 0x30
 800eabe:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800ec5c <_svfiprintf_r+0x1e4>
 800eac2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800eac6:	f04f 0901 	mov.w	r9, #1
 800eaca:	4623      	mov	r3, r4
 800eacc:	469a      	mov	sl, r3
 800eace:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ead2:	b10a      	cbz	r2, 800ead8 <_svfiprintf_r+0x60>
 800ead4:	2a25      	cmp	r2, #37	@ 0x25
 800ead6:	d1f9      	bne.n	800eacc <_svfiprintf_r+0x54>
 800ead8:	ebba 0b04 	subs.w	fp, sl, r4
 800eadc:	d00b      	beq.n	800eaf6 <_svfiprintf_r+0x7e>
 800eade:	465b      	mov	r3, fp
 800eae0:	4622      	mov	r2, r4
 800eae2:	4629      	mov	r1, r5
 800eae4:	4638      	mov	r0, r7
 800eae6:	f7ff ff6c 	bl	800e9c2 <__ssputs_r>
 800eaea:	3001      	adds	r0, #1
 800eaec:	f000 80a7 	beq.w	800ec3e <_svfiprintf_r+0x1c6>
 800eaf0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800eaf2:	445a      	add	r2, fp
 800eaf4:	9209      	str	r2, [sp, #36]	@ 0x24
 800eaf6:	f89a 3000 	ldrb.w	r3, [sl]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	f000 809f 	beq.w	800ec3e <_svfiprintf_r+0x1c6>
 800eb00:	2300      	movs	r3, #0
 800eb02:	f04f 32ff 	mov.w	r2, #4294967295
 800eb06:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800eb0a:	f10a 0a01 	add.w	sl, sl, #1
 800eb0e:	9304      	str	r3, [sp, #16]
 800eb10:	9307      	str	r3, [sp, #28]
 800eb12:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800eb16:	931a      	str	r3, [sp, #104]	@ 0x68
 800eb18:	4654      	mov	r4, sl
 800eb1a:	2205      	movs	r2, #5
 800eb1c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb20:	484e      	ldr	r0, [pc, #312]	@ (800ec5c <_svfiprintf_r+0x1e4>)
 800eb22:	f7f1 fb5d 	bl	80001e0 <memchr>
 800eb26:	9a04      	ldr	r2, [sp, #16]
 800eb28:	b9d8      	cbnz	r0, 800eb62 <_svfiprintf_r+0xea>
 800eb2a:	06d0      	lsls	r0, r2, #27
 800eb2c:	bf44      	itt	mi
 800eb2e:	2320      	movmi	r3, #32
 800eb30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb34:	0711      	lsls	r1, r2, #28
 800eb36:	bf44      	itt	mi
 800eb38:	232b      	movmi	r3, #43	@ 0x2b
 800eb3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eb3e:	f89a 3000 	ldrb.w	r3, [sl]
 800eb42:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb44:	d015      	beq.n	800eb72 <_svfiprintf_r+0xfa>
 800eb46:	9a07      	ldr	r2, [sp, #28]
 800eb48:	4654      	mov	r4, sl
 800eb4a:	2000      	movs	r0, #0
 800eb4c:	f04f 0c0a 	mov.w	ip, #10
 800eb50:	4621      	mov	r1, r4
 800eb52:	f811 3b01 	ldrb.w	r3, [r1], #1
 800eb56:	3b30      	subs	r3, #48	@ 0x30
 800eb58:	2b09      	cmp	r3, #9
 800eb5a:	d94b      	bls.n	800ebf4 <_svfiprintf_r+0x17c>
 800eb5c:	b1b0      	cbz	r0, 800eb8c <_svfiprintf_r+0x114>
 800eb5e:	9207      	str	r2, [sp, #28]
 800eb60:	e014      	b.n	800eb8c <_svfiprintf_r+0x114>
 800eb62:	eba0 0308 	sub.w	r3, r0, r8
 800eb66:	fa09 f303 	lsl.w	r3, r9, r3
 800eb6a:	4313      	orrs	r3, r2
 800eb6c:	9304      	str	r3, [sp, #16]
 800eb6e:	46a2      	mov	sl, r4
 800eb70:	e7d2      	b.n	800eb18 <_svfiprintf_r+0xa0>
 800eb72:	9b03      	ldr	r3, [sp, #12]
 800eb74:	1d19      	adds	r1, r3, #4
 800eb76:	681b      	ldr	r3, [r3, #0]
 800eb78:	9103      	str	r1, [sp, #12]
 800eb7a:	2b00      	cmp	r3, #0
 800eb7c:	bfbb      	ittet	lt
 800eb7e:	425b      	neglt	r3, r3
 800eb80:	f042 0202 	orrlt.w	r2, r2, #2
 800eb84:	9307      	strge	r3, [sp, #28]
 800eb86:	9307      	strlt	r3, [sp, #28]
 800eb88:	bfb8      	it	lt
 800eb8a:	9204      	strlt	r2, [sp, #16]
 800eb8c:	7823      	ldrb	r3, [r4, #0]
 800eb8e:	2b2e      	cmp	r3, #46	@ 0x2e
 800eb90:	d10a      	bne.n	800eba8 <_svfiprintf_r+0x130>
 800eb92:	7863      	ldrb	r3, [r4, #1]
 800eb94:	2b2a      	cmp	r3, #42	@ 0x2a
 800eb96:	d132      	bne.n	800ebfe <_svfiprintf_r+0x186>
 800eb98:	9b03      	ldr	r3, [sp, #12]
 800eb9a:	1d1a      	adds	r2, r3, #4
 800eb9c:	681b      	ldr	r3, [r3, #0]
 800eb9e:	9203      	str	r2, [sp, #12]
 800eba0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800eba4:	3402      	adds	r4, #2
 800eba6:	9305      	str	r3, [sp, #20]
 800eba8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ec6c <_svfiprintf_r+0x1f4>
 800ebac:	7821      	ldrb	r1, [r4, #0]
 800ebae:	2203      	movs	r2, #3
 800ebb0:	4650      	mov	r0, sl
 800ebb2:	f7f1 fb15 	bl	80001e0 <memchr>
 800ebb6:	b138      	cbz	r0, 800ebc8 <_svfiprintf_r+0x150>
 800ebb8:	9b04      	ldr	r3, [sp, #16]
 800ebba:	eba0 000a 	sub.w	r0, r0, sl
 800ebbe:	2240      	movs	r2, #64	@ 0x40
 800ebc0:	4082      	lsls	r2, r0
 800ebc2:	4313      	orrs	r3, r2
 800ebc4:	3401      	adds	r4, #1
 800ebc6:	9304      	str	r3, [sp, #16]
 800ebc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ebcc:	4824      	ldr	r0, [pc, #144]	@ (800ec60 <_svfiprintf_r+0x1e8>)
 800ebce:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ebd2:	2206      	movs	r2, #6
 800ebd4:	f7f1 fb04 	bl	80001e0 <memchr>
 800ebd8:	2800      	cmp	r0, #0
 800ebda:	d036      	beq.n	800ec4a <_svfiprintf_r+0x1d2>
 800ebdc:	4b21      	ldr	r3, [pc, #132]	@ (800ec64 <_svfiprintf_r+0x1ec>)
 800ebde:	bb1b      	cbnz	r3, 800ec28 <_svfiprintf_r+0x1b0>
 800ebe0:	9b03      	ldr	r3, [sp, #12]
 800ebe2:	3307      	adds	r3, #7
 800ebe4:	f023 0307 	bic.w	r3, r3, #7
 800ebe8:	3308      	adds	r3, #8
 800ebea:	9303      	str	r3, [sp, #12]
 800ebec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ebee:	4433      	add	r3, r6
 800ebf0:	9309      	str	r3, [sp, #36]	@ 0x24
 800ebf2:	e76a      	b.n	800eaca <_svfiprintf_r+0x52>
 800ebf4:	fb0c 3202 	mla	r2, ip, r2, r3
 800ebf8:	460c      	mov	r4, r1
 800ebfa:	2001      	movs	r0, #1
 800ebfc:	e7a8      	b.n	800eb50 <_svfiprintf_r+0xd8>
 800ebfe:	2300      	movs	r3, #0
 800ec00:	3401      	adds	r4, #1
 800ec02:	9305      	str	r3, [sp, #20]
 800ec04:	4619      	mov	r1, r3
 800ec06:	f04f 0c0a 	mov.w	ip, #10
 800ec0a:	4620      	mov	r0, r4
 800ec0c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ec10:	3a30      	subs	r2, #48	@ 0x30
 800ec12:	2a09      	cmp	r2, #9
 800ec14:	d903      	bls.n	800ec1e <_svfiprintf_r+0x1a6>
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d0c6      	beq.n	800eba8 <_svfiprintf_r+0x130>
 800ec1a:	9105      	str	r1, [sp, #20]
 800ec1c:	e7c4      	b.n	800eba8 <_svfiprintf_r+0x130>
 800ec1e:	fb0c 2101 	mla	r1, ip, r1, r2
 800ec22:	4604      	mov	r4, r0
 800ec24:	2301      	movs	r3, #1
 800ec26:	e7f0      	b.n	800ec0a <_svfiprintf_r+0x192>
 800ec28:	ab03      	add	r3, sp, #12
 800ec2a:	9300      	str	r3, [sp, #0]
 800ec2c:	462a      	mov	r2, r5
 800ec2e:	4b0e      	ldr	r3, [pc, #56]	@ (800ec68 <_svfiprintf_r+0x1f0>)
 800ec30:	a904      	add	r1, sp, #16
 800ec32:	4638      	mov	r0, r7
 800ec34:	f7fd fc4c 	bl	800c4d0 <_printf_float>
 800ec38:	1c42      	adds	r2, r0, #1
 800ec3a:	4606      	mov	r6, r0
 800ec3c:	d1d6      	bne.n	800ebec <_svfiprintf_r+0x174>
 800ec3e:	89ab      	ldrh	r3, [r5, #12]
 800ec40:	065b      	lsls	r3, r3, #25
 800ec42:	f53f af2d 	bmi.w	800eaa0 <_svfiprintf_r+0x28>
 800ec46:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ec48:	e72c      	b.n	800eaa4 <_svfiprintf_r+0x2c>
 800ec4a:	ab03      	add	r3, sp, #12
 800ec4c:	9300      	str	r3, [sp, #0]
 800ec4e:	462a      	mov	r2, r5
 800ec50:	4b05      	ldr	r3, [pc, #20]	@ (800ec68 <_svfiprintf_r+0x1f0>)
 800ec52:	a904      	add	r1, sp, #16
 800ec54:	4638      	mov	r0, r7
 800ec56:	f7fd fed3 	bl	800ca00 <_printf_i>
 800ec5a:	e7ed      	b.n	800ec38 <_svfiprintf_r+0x1c0>
 800ec5c:	08011250 	.word	0x08011250
 800ec60:	0801125a 	.word	0x0801125a
 800ec64:	0800c4d1 	.word	0x0800c4d1
 800ec68:	0800e9c3 	.word	0x0800e9c3
 800ec6c:	08011256 	.word	0x08011256

0800ec70 <__sfputc_r>:
 800ec70:	6893      	ldr	r3, [r2, #8]
 800ec72:	3b01      	subs	r3, #1
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	b410      	push	{r4}
 800ec78:	6093      	str	r3, [r2, #8]
 800ec7a:	da08      	bge.n	800ec8e <__sfputc_r+0x1e>
 800ec7c:	6994      	ldr	r4, [r2, #24]
 800ec7e:	42a3      	cmp	r3, r4
 800ec80:	db01      	blt.n	800ec86 <__sfputc_r+0x16>
 800ec82:	290a      	cmp	r1, #10
 800ec84:	d103      	bne.n	800ec8e <__sfputc_r+0x1e>
 800ec86:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec8a:	f7fe ba5f 	b.w	800d14c <__swbuf_r>
 800ec8e:	6813      	ldr	r3, [r2, #0]
 800ec90:	1c58      	adds	r0, r3, #1
 800ec92:	6010      	str	r0, [r2, #0]
 800ec94:	7019      	strb	r1, [r3, #0]
 800ec96:	4608      	mov	r0, r1
 800ec98:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec9c:	4770      	bx	lr

0800ec9e <__sfputs_r>:
 800ec9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eca0:	4606      	mov	r6, r0
 800eca2:	460f      	mov	r7, r1
 800eca4:	4614      	mov	r4, r2
 800eca6:	18d5      	adds	r5, r2, r3
 800eca8:	42ac      	cmp	r4, r5
 800ecaa:	d101      	bne.n	800ecb0 <__sfputs_r+0x12>
 800ecac:	2000      	movs	r0, #0
 800ecae:	e007      	b.n	800ecc0 <__sfputs_r+0x22>
 800ecb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecb4:	463a      	mov	r2, r7
 800ecb6:	4630      	mov	r0, r6
 800ecb8:	f7ff ffda 	bl	800ec70 <__sfputc_r>
 800ecbc:	1c43      	adds	r3, r0, #1
 800ecbe:	d1f3      	bne.n	800eca8 <__sfputs_r+0xa>
 800ecc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ecc4 <_vfiprintf_r>:
 800ecc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecc8:	460d      	mov	r5, r1
 800ecca:	b09d      	sub	sp, #116	@ 0x74
 800eccc:	4614      	mov	r4, r2
 800ecce:	4698      	mov	r8, r3
 800ecd0:	4606      	mov	r6, r0
 800ecd2:	b118      	cbz	r0, 800ecdc <_vfiprintf_r+0x18>
 800ecd4:	6a03      	ldr	r3, [r0, #32]
 800ecd6:	b90b      	cbnz	r3, 800ecdc <_vfiprintf_r+0x18>
 800ecd8:	f7fe f83c 	bl	800cd54 <__sinit>
 800ecdc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ecde:	07d9      	lsls	r1, r3, #31
 800ece0:	d405      	bmi.n	800ecee <_vfiprintf_r+0x2a>
 800ece2:	89ab      	ldrh	r3, [r5, #12]
 800ece4:	059a      	lsls	r2, r3, #22
 800ece6:	d402      	bmi.n	800ecee <_vfiprintf_r+0x2a>
 800ece8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ecea:	f7fe fb40 	bl	800d36e <__retarget_lock_acquire_recursive>
 800ecee:	89ab      	ldrh	r3, [r5, #12]
 800ecf0:	071b      	lsls	r3, r3, #28
 800ecf2:	d501      	bpl.n	800ecf8 <_vfiprintf_r+0x34>
 800ecf4:	692b      	ldr	r3, [r5, #16]
 800ecf6:	b99b      	cbnz	r3, 800ed20 <_vfiprintf_r+0x5c>
 800ecf8:	4629      	mov	r1, r5
 800ecfa:	4630      	mov	r0, r6
 800ecfc:	f7fe fa64 	bl	800d1c8 <__swsetup_r>
 800ed00:	b170      	cbz	r0, 800ed20 <_vfiprintf_r+0x5c>
 800ed02:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ed04:	07dc      	lsls	r4, r3, #31
 800ed06:	d504      	bpl.n	800ed12 <_vfiprintf_r+0x4e>
 800ed08:	f04f 30ff 	mov.w	r0, #4294967295
 800ed0c:	b01d      	add	sp, #116	@ 0x74
 800ed0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed12:	89ab      	ldrh	r3, [r5, #12]
 800ed14:	0598      	lsls	r0, r3, #22
 800ed16:	d4f7      	bmi.n	800ed08 <_vfiprintf_r+0x44>
 800ed18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ed1a:	f7fe fb29 	bl	800d370 <__retarget_lock_release_recursive>
 800ed1e:	e7f3      	b.n	800ed08 <_vfiprintf_r+0x44>
 800ed20:	2300      	movs	r3, #0
 800ed22:	9309      	str	r3, [sp, #36]	@ 0x24
 800ed24:	2320      	movs	r3, #32
 800ed26:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ed2a:	f8cd 800c 	str.w	r8, [sp, #12]
 800ed2e:	2330      	movs	r3, #48	@ 0x30
 800ed30:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800eee0 <_vfiprintf_r+0x21c>
 800ed34:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ed38:	f04f 0901 	mov.w	r9, #1
 800ed3c:	4623      	mov	r3, r4
 800ed3e:	469a      	mov	sl, r3
 800ed40:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ed44:	b10a      	cbz	r2, 800ed4a <_vfiprintf_r+0x86>
 800ed46:	2a25      	cmp	r2, #37	@ 0x25
 800ed48:	d1f9      	bne.n	800ed3e <_vfiprintf_r+0x7a>
 800ed4a:	ebba 0b04 	subs.w	fp, sl, r4
 800ed4e:	d00b      	beq.n	800ed68 <_vfiprintf_r+0xa4>
 800ed50:	465b      	mov	r3, fp
 800ed52:	4622      	mov	r2, r4
 800ed54:	4629      	mov	r1, r5
 800ed56:	4630      	mov	r0, r6
 800ed58:	f7ff ffa1 	bl	800ec9e <__sfputs_r>
 800ed5c:	3001      	adds	r0, #1
 800ed5e:	f000 80a7 	beq.w	800eeb0 <_vfiprintf_r+0x1ec>
 800ed62:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ed64:	445a      	add	r2, fp
 800ed66:	9209      	str	r2, [sp, #36]	@ 0x24
 800ed68:	f89a 3000 	ldrb.w	r3, [sl]
 800ed6c:	2b00      	cmp	r3, #0
 800ed6e:	f000 809f 	beq.w	800eeb0 <_vfiprintf_r+0x1ec>
 800ed72:	2300      	movs	r3, #0
 800ed74:	f04f 32ff 	mov.w	r2, #4294967295
 800ed78:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ed7c:	f10a 0a01 	add.w	sl, sl, #1
 800ed80:	9304      	str	r3, [sp, #16]
 800ed82:	9307      	str	r3, [sp, #28]
 800ed84:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ed88:	931a      	str	r3, [sp, #104]	@ 0x68
 800ed8a:	4654      	mov	r4, sl
 800ed8c:	2205      	movs	r2, #5
 800ed8e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed92:	4853      	ldr	r0, [pc, #332]	@ (800eee0 <_vfiprintf_r+0x21c>)
 800ed94:	f7f1 fa24 	bl	80001e0 <memchr>
 800ed98:	9a04      	ldr	r2, [sp, #16]
 800ed9a:	b9d8      	cbnz	r0, 800edd4 <_vfiprintf_r+0x110>
 800ed9c:	06d1      	lsls	r1, r2, #27
 800ed9e:	bf44      	itt	mi
 800eda0:	2320      	movmi	r3, #32
 800eda2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800eda6:	0713      	lsls	r3, r2, #28
 800eda8:	bf44      	itt	mi
 800edaa:	232b      	movmi	r3, #43	@ 0x2b
 800edac:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800edb0:	f89a 3000 	ldrb.w	r3, [sl]
 800edb4:	2b2a      	cmp	r3, #42	@ 0x2a
 800edb6:	d015      	beq.n	800ede4 <_vfiprintf_r+0x120>
 800edb8:	9a07      	ldr	r2, [sp, #28]
 800edba:	4654      	mov	r4, sl
 800edbc:	2000      	movs	r0, #0
 800edbe:	f04f 0c0a 	mov.w	ip, #10
 800edc2:	4621      	mov	r1, r4
 800edc4:	f811 3b01 	ldrb.w	r3, [r1], #1
 800edc8:	3b30      	subs	r3, #48	@ 0x30
 800edca:	2b09      	cmp	r3, #9
 800edcc:	d94b      	bls.n	800ee66 <_vfiprintf_r+0x1a2>
 800edce:	b1b0      	cbz	r0, 800edfe <_vfiprintf_r+0x13a>
 800edd0:	9207      	str	r2, [sp, #28]
 800edd2:	e014      	b.n	800edfe <_vfiprintf_r+0x13a>
 800edd4:	eba0 0308 	sub.w	r3, r0, r8
 800edd8:	fa09 f303 	lsl.w	r3, r9, r3
 800eddc:	4313      	orrs	r3, r2
 800edde:	9304      	str	r3, [sp, #16]
 800ede0:	46a2      	mov	sl, r4
 800ede2:	e7d2      	b.n	800ed8a <_vfiprintf_r+0xc6>
 800ede4:	9b03      	ldr	r3, [sp, #12]
 800ede6:	1d19      	adds	r1, r3, #4
 800ede8:	681b      	ldr	r3, [r3, #0]
 800edea:	9103      	str	r1, [sp, #12]
 800edec:	2b00      	cmp	r3, #0
 800edee:	bfbb      	ittet	lt
 800edf0:	425b      	neglt	r3, r3
 800edf2:	f042 0202 	orrlt.w	r2, r2, #2
 800edf6:	9307      	strge	r3, [sp, #28]
 800edf8:	9307      	strlt	r3, [sp, #28]
 800edfa:	bfb8      	it	lt
 800edfc:	9204      	strlt	r2, [sp, #16]
 800edfe:	7823      	ldrb	r3, [r4, #0]
 800ee00:	2b2e      	cmp	r3, #46	@ 0x2e
 800ee02:	d10a      	bne.n	800ee1a <_vfiprintf_r+0x156>
 800ee04:	7863      	ldrb	r3, [r4, #1]
 800ee06:	2b2a      	cmp	r3, #42	@ 0x2a
 800ee08:	d132      	bne.n	800ee70 <_vfiprintf_r+0x1ac>
 800ee0a:	9b03      	ldr	r3, [sp, #12]
 800ee0c:	1d1a      	adds	r2, r3, #4
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	9203      	str	r2, [sp, #12]
 800ee12:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ee16:	3402      	adds	r4, #2
 800ee18:	9305      	str	r3, [sp, #20]
 800ee1a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800eef0 <_vfiprintf_r+0x22c>
 800ee1e:	7821      	ldrb	r1, [r4, #0]
 800ee20:	2203      	movs	r2, #3
 800ee22:	4650      	mov	r0, sl
 800ee24:	f7f1 f9dc 	bl	80001e0 <memchr>
 800ee28:	b138      	cbz	r0, 800ee3a <_vfiprintf_r+0x176>
 800ee2a:	9b04      	ldr	r3, [sp, #16]
 800ee2c:	eba0 000a 	sub.w	r0, r0, sl
 800ee30:	2240      	movs	r2, #64	@ 0x40
 800ee32:	4082      	lsls	r2, r0
 800ee34:	4313      	orrs	r3, r2
 800ee36:	3401      	adds	r4, #1
 800ee38:	9304      	str	r3, [sp, #16]
 800ee3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ee3e:	4829      	ldr	r0, [pc, #164]	@ (800eee4 <_vfiprintf_r+0x220>)
 800ee40:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ee44:	2206      	movs	r2, #6
 800ee46:	f7f1 f9cb 	bl	80001e0 <memchr>
 800ee4a:	2800      	cmp	r0, #0
 800ee4c:	d03f      	beq.n	800eece <_vfiprintf_r+0x20a>
 800ee4e:	4b26      	ldr	r3, [pc, #152]	@ (800eee8 <_vfiprintf_r+0x224>)
 800ee50:	bb1b      	cbnz	r3, 800ee9a <_vfiprintf_r+0x1d6>
 800ee52:	9b03      	ldr	r3, [sp, #12]
 800ee54:	3307      	adds	r3, #7
 800ee56:	f023 0307 	bic.w	r3, r3, #7
 800ee5a:	3308      	adds	r3, #8
 800ee5c:	9303      	str	r3, [sp, #12]
 800ee5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ee60:	443b      	add	r3, r7
 800ee62:	9309      	str	r3, [sp, #36]	@ 0x24
 800ee64:	e76a      	b.n	800ed3c <_vfiprintf_r+0x78>
 800ee66:	fb0c 3202 	mla	r2, ip, r2, r3
 800ee6a:	460c      	mov	r4, r1
 800ee6c:	2001      	movs	r0, #1
 800ee6e:	e7a8      	b.n	800edc2 <_vfiprintf_r+0xfe>
 800ee70:	2300      	movs	r3, #0
 800ee72:	3401      	adds	r4, #1
 800ee74:	9305      	str	r3, [sp, #20]
 800ee76:	4619      	mov	r1, r3
 800ee78:	f04f 0c0a 	mov.w	ip, #10
 800ee7c:	4620      	mov	r0, r4
 800ee7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ee82:	3a30      	subs	r2, #48	@ 0x30
 800ee84:	2a09      	cmp	r2, #9
 800ee86:	d903      	bls.n	800ee90 <_vfiprintf_r+0x1cc>
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d0c6      	beq.n	800ee1a <_vfiprintf_r+0x156>
 800ee8c:	9105      	str	r1, [sp, #20]
 800ee8e:	e7c4      	b.n	800ee1a <_vfiprintf_r+0x156>
 800ee90:	fb0c 2101 	mla	r1, ip, r1, r2
 800ee94:	4604      	mov	r4, r0
 800ee96:	2301      	movs	r3, #1
 800ee98:	e7f0      	b.n	800ee7c <_vfiprintf_r+0x1b8>
 800ee9a:	ab03      	add	r3, sp, #12
 800ee9c:	9300      	str	r3, [sp, #0]
 800ee9e:	462a      	mov	r2, r5
 800eea0:	4b12      	ldr	r3, [pc, #72]	@ (800eeec <_vfiprintf_r+0x228>)
 800eea2:	a904      	add	r1, sp, #16
 800eea4:	4630      	mov	r0, r6
 800eea6:	f7fd fb13 	bl	800c4d0 <_printf_float>
 800eeaa:	4607      	mov	r7, r0
 800eeac:	1c78      	adds	r0, r7, #1
 800eeae:	d1d6      	bne.n	800ee5e <_vfiprintf_r+0x19a>
 800eeb0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800eeb2:	07d9      	lsls	r1, r3, #31
 800eeb4:	d405      	bmi.n	800eec2 <_vfiprintf_r+0x1fe>
 800eeb6:	89ab      	ldrh	r3, [r5, #12]
 800eeb8:	059a      	lsls	r2, r3, #22
 800eeba:	d402      	bmi.n	800eec2 <_vfiprintf_r+0x1fe>
 800eebc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800eebe:	f7fe fa57 	bl	800d370 <__retarget_lock_release_recursive>
 800eec2:	89ab      	ldrh	r3, [r5, #12]
 800eec4:	065b      	lsls	r3, r3, #25
 800eec6:	f53f af1f 	bmi.w	800ed08 <_vfiprintf_r+0x44>
 800eeca:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800eecc:	e71e      	b.n	800ed0c <_vfiprintf_r+0x48>
 800eece:	ab03      	add	r3, sp, #12
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	462a      	mov	r2, r5
 800eed4:	4b05      	ldr	r3, [pc, #20]	@ (800eeec <_vfiprintf_r+0x228>)
 800eed6:	a904      	add	r1, sp, #16
 800eed8:	4630      	mov	r0, r6
 800eeda:	f7fd fd91 	bl	800ca00 <_printf_i>
 800eede:	e7e4      	b.n	800eeaa <_vfiprintf_r+0x1e6>
 800eee0:	08011250 	.word	0x08011250
 800eee4:	0801125a 	.word	0x0801125a
 800eee8:	0800c4d1 	.word	0x0800c4d1
 800eeec:	0800ec9f 	.word	0x0800ec9f
 800eef0:	08011256 	.word	0x08011256

0800eef4 <__sflush_r>:
 800eef4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800eef8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eefc:	0716      	lsls	r6, r2, #28
 800eefe:	4605      	mov	r5, r0
 800ef00:	460c      	mov	r4, r1
 800ef02:	d454      	bmi.n	800efae <__sflush_r+0xba>
 800ef04:	684b      	ldr	r3, [r1, #4]
 800ef06:	2b00      	cmp	r3, #0
 800ef08:	dc02      	bgt.n	800ef10 <__sflush_r+0x1c>
 800ef0a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	dd48      	ble.n	800efa2 <__sflush_r+0xae>
 800ef10:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef12:	2e00      	cmp	r6, #0
 800ef14:	d045      	beq.n	800efa2 <__sflush_r+0xae>
 800ef16:	2300      	movs	r3, #0
 800ef18:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ef1c:	682f      	ldr	r7, [r5, #0]
 800ef1e:	6a21      	ldr	r1, [r4, #32]
 800ef20:	602b      	str	r3, [r5, #0]
 800ef22:	d030      	beq.n	800ef86 <__sflush_r+0x92>
 800ef24:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ef26:	89a3      	ldrh	r3, [r4, #12]
 800ef28:	0759      	lsls	r1, r3, #29
 800ef2a:	d505      	bpl.n	800ef38 <__sflush_r+0x44>
 800ef2c:	6863      	ldr	r3, [r4, #4]
 800ef2e:	1ad2      	subs	r2, r2, r3
 800ef30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ef32:	b10b      	cbz	r3, 800ef38 <__sflush_r+0x44>
 800ef34:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ef36:	1ad2      	subs	r2, r2, r3
 800ef38:	2300      	movs	r3, #0
 800ef3a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ef3c:	6a21      	ldr	r1, [r4, #32]
 800ef3e:	4628      	mov	r0, r5
 800ef40:	47b0      	blx	r6
 800ef42:	1c43      	adds	r3, r0, #1
 800ef44:	89a3      	ldrh	r3, [r4, #12]
 800ef46:	d106      	bne.n	800ef56 <__sflush_r+0x62>
 800ef48:	6829      	ldr	r1, [r5, #0]
 800ef4a:	291d      	cmp	r1, #29
 800ef4c:	d82b      	bhi.n	800efa6 <__sflush_r+0xb2>
 800ef4e:	4a2a      	ldr	r2, [pc, #168]	@ (800eff8 <__sflush_r+0x104>)
 800ef50:	40ca      	lsrs	r2, r1
 800ef52:	07d6      	lsls	r6, r2, #31
 800ef54:	d527      	bpl.n	800efa6 <__sflush_r+0xb2>
 800ef56:	2200      	movs	r2, #0
 800ef58:	6062      	str	r2, [r4, #4]
 800ef5a:	04d9      	lsls	r1, r3, #19
 800ef5c:	6922      	ldr	r2, [r4, #16]
 800ef5e:	6022      	str	r2, [r4, #0]
 800ef60:	d504      	bpl.n	800ef6c <__sflush_r+0x78>
 800ef62:	1c42      	adds	r2, r0, #1
 800ef64:	d101      	bne.n	800ef6a <__sflush_r+0x76>
 800ef66:	682b      	ldr	r3, [r5, #0]
 800ef68:	b903      	cbnz	r3, 800ef6c <__sflush_r+0x78>
 800ef6a:	6560      	str	r0, [r4, #84]	@ 0x54
 800ef6c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ef6e:	602f      	str	r7, [r5, #0]
 800ef70:	b1b9      	cbz	r1, 800efa2 <__sflush_r+0xae>
 800ef72:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ef76:	4299      	cmp	r1, r3
 800ef78:	d002      	beq.n	800ef80 <__sflush_r+0x8c>
 800ef7a:	4628      	mov	r0, r5
 800ef7c:	f7ff f888 	bl	800e090 <_free_r>
 800ef80:	2300      	movs	r3, #0
 800ef82:	6363      	str	r3, [r4, #52]	@ 0x34
 800ef84:	e00d      	b.n	800efa2 <__sflush_r+0xae>
 800ef86:	2301      	movs	r3, #1
 800ef88:	4628      	mov	r0, r5
 800ef8a:	47b0      	blx	r6
 800ef8c:	4602      	mov	r2, r0
 800ef8e:	1c50      	adds	r0, r2, #1
 800ef90:	d1c9      	bne.n	800ef26 <__sflush_r+0x32>
 800ef92:	682b      	ldr	r3, [r5, #0]
 800ef94:	2b00      	cmp	r3, #0
 800ef96:	d0c6      	beq.n	800ef26 <__sflush_r+0x32>
 800ef98:	2b1d      	cmp	r3, #29
 800ef9a:	d001      	beq.n	800efa0 <__sflush_r+0xac>
 800ef9c:	2b16      	cmp	r3, #22
 800ef9e:	d11e      	bne.n	800efde <__sflush_r+0xea>
 800efa0:	602f      	str	r7, [r5, #0]
 800efa2:	2000      	movs	r0, #0
 800efa4:	e022      	b.n	800efec <__sflush_r+0xf8>
 800efa6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efaa:	b21b      	sxth	r3, r3
 800efac:	e01b      	b.n	800efe6 <__sflush_r+0xf2>
 800efae:	690f      	ldr	r7, [r1, #16]
 800efb0:	2f00      	cmp	r7, #0
 800efb2:	d0f6      	beq.n	800efa2 <__sflush_r+0xae>
 800efb4:	0793      	lsls	r3, r2, #30
 800efb6:	680e      	ldr	r6, [r1, #0]
 800efb8:	bf08      	it	eq
 800efba:	694b      	ldreq	r3, [r1, #20]
 800efbc:	600f      	str	r7, [r1, #0]
 800efbe:	bf18      	it	ne
 800efc0:	2300      	movne	r3, #0
 800efc2:	eba6 0807 	sub.w	r8, r6, r7
 800efc6:	608b      	str	r3, [r1, #8]
 800efc8:	f1b8 0f00 	cmp.w	r8, #0
 800efcc:	dde9      	ble.n	800efa2 <__sflush_r+0xae>
 800efce:	6a21      	ldr	r1, [r4, #32]
 800efd0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800efd2:	4643      	mov	r3, r8
 800efd4:	463a      	mov	r2, r7
 800efd6:	4628      	mov	r0, r5
 800efd8:	47b0      	blx	r6
 800efda:	2800      	cmp	r0, #0
 800efdc:	dc08      	bgt.n	800eff0 <__sflush_r+0xfc>
 800efde:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800efe2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800efe6:	81a3      	strh	r3, [r4, #12]
 800efe8:	f04f 30ff 	mov.w	r0, #4294967295
 800efec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eff0:	4407      	add	r7, r0
 800eff2:	eba8 0800 	sub.w	r8, r8, r0
 800eff6:	e7e7      	b.n	800efc8 <__sflush_r+0xd4>
 800eff8:	20400001 	.word	0x20400001

0800effc <_fflush_r>:
 800effc:	b538      	push	{r3, r4, r5, lr}
 800effe:	690b      	ldr	r3, [r1, #16]
 800f000:	4605      	mov	r5, r0
 800f002:	460c      	mov	r4, r1
 800f004:	b913      	cbnz	r3, 800f00c <_fflush_r+0x10>
 800f006:	2500      	movs	r5, #0
 800f008:	4628      	mov	r0, r5
 800f00a:	bd38      	pop	{r3, r4, r5, pc}
 800f00c:	b118      	cbz	r0, 800f016 <_fflush_r+0x1a>
 800f00e:	6a03      	ldr	r3, [r0, #32]
 800f010:	b90b      	cbnz	r3, 800f016 <_fflush_r+0x1a>
 800f012:	f7fd fe9f 	bl	800cd54 <__sinit>
 800f016:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f01a:	2b00      	cmp	r3, #0
 800f01c:	d0f3      	beq.n	800f006 <_fflush_r+0xa>
 800f01e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f020:	07d0      	lsls	r0, r2, #31
 800f022:	d404      	bmi.n	800f02e <_fflush_r+0x32>
 800f024:	0599      	lsls	r1, r3, #22
 800f026:	d402      	bmi.n	800f02e <_fflush_r+0x32>
 800f028:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f02a:	f7fe f9a0 	bl	800d36e <__retarget_lock_acquire_recursive>
 800f02e:	4628      	mov	r0, r5
 800f030:	4621      	mov	r1, r4
 800f032:	f7ff ff5f 	bl	800eef4 <__sflush_r>
 800f036:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f038:	07da      	lsls	r2, r3, #31
 800f03a:	4605      	mov	r5, r0
 800f03c:	d4e4      	bmi.n	800f008 <_fflush_r+0xc>
 800f03e:	89a3      	ldrh	r3, [r4, #12]
 800f040:	059b      	lsls	r3, r3, #22
 800f042:	d4e1      	bmi.n	800f008 <_fflush_r+0xc>
 800f044:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f046:	f7fe f993 	bl	800d370 <__retarget_lock_release_recursive>
 800f04a:	e7dd      	b.n	800f008 <_fflush_r+0xc>

0800f04c <fiprintf>:
 800f04c:	b40e      	push	{r1, r2, r3}
 800f04e:	b503      	push	{r0, r1, lr}
 800f050:	4601      	mov	r1, r0
 800f052:	ab03      	add	r3, sp, #12
 800f054:	4805      	ldr	r0, [pc, #20]	@ (800f06c <fiprintf+0x20>)
 800f056:	f853 2b04 	ldr.w	r2, [r3], #4
 800f05a:	6800      	ldr	r0, [r0, #0]
 800f05c:	9301      	str	r3, [sp, #4]
 800f05e:	f7ff fe31 	bl	800ecc4 <_vfiprintf_r>
 800f062:	b002      	add	sp, #8
 800f064:	f85d eb04 	ldr.w	lr, [sp], #4
 800f068:	b003      	add	sp, #12
 800f06a:	4770      	bx	lr
 800f06c:	20000284 	.word	0x20000284

0800f070 <__swhatbuf_r>:
 800f070:	b570      	push	{r4, r5, r6, lr}
 800f072:	460c      	mov	r4, r1
 800f074:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f078:	2900      	cmp	r1, #0
 800f07a:	b096      	sub	sp, #88	@ 0x58
 800f07c:	4615      	mov	r5, r2
 800f07e:	461e      	mov	r6, r3
 800f080:	da0d      	bge.n	800f09e <__swhatbuf_r+0x2e>
 800f082:	89a3      	ldrh	r3, [r4, #12]
 800f084:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f088:	f04f 0100 	mov.w	r1, #0
 800f08c:	bf14      	ite	ne
 800f08e:	2340      	movne	r3, #64	@ 0x40
 800f090:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f094:	2000      	movs	r0, #0
 800f096:	6031      	str	r1, [r6, #0]
 800f098:	602b      	str	r3, [r5, #0]
 800f09a:	b016      	add	sp, #88	@ 0x58
 800f09c:	bd70      	pop	{r4, r5, r6, pc}
 800f09e:	466a      	mov	r2, sp
 800f0a0:	f000 f862 	bl	800f168 <_fstat_r>
 800f0a4:	2800      	cmp	r0, #0
 800f0a6:	dbec      	blt.n	800f082 <__swhatbuf_r+0x12>
 800f0a8:	9901      	ldr	r1, [sp, #4]
 800f0aa:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f0ae:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f0b2:	4259      	negs	r1, r3
 800f0b4:	4159      	adcs	r1, r3
 800f0b6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0ba:	e7eb      	b.n	800f094 <__swhatbuf_r+0x24>

0800f0bc <__smakebuf_r>:
 800f0bc:	898b      	ldrh	r3, [r1, #12]
 800f0be:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f0c0:	079d      	lsls	r5, r3, #30
 800f0c2:	4606      	mov	r6, r0
 800f0c4:	460c      	mov	r4, r1
 800f0c6:	d507      	bpl.n	800f0d8 <__smakebuf_r+0x1c>
 800f0c8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f0cc:	6023      	str	r3, [r4, #0]
 800f0ce:	6123      	str	r3, [r4, #16]
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	6163      	str	r3, [r4, #20]
 800f0d4:	b003      	add	sp, #12
 800f0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f0d8:	ab01      	add	r3, sp, #4
 800f0da:	466a      	mov	r2, sp
 800f0dc:	f7ff ffc8 	bl	800f070 <__swhatbuf_r>
 800f0e0:	9f00      	ldr	r7, [sp, #0]
 800f0e2:	4605      	mov	r5, r0
 800f0e4:	4639      	mov	r1, r7
 800f0e6:	4630      	mov	r0, r6
 800f0e8:	f7ff f846 	bl	800e178 <_malloc_r>
 800f0ec:	b948      	cbnz	r0, 800f102 <__smakebuf_r+0x46>
 800f0ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0f2:	059a      	lsls	r2, r3, #22
 800f0f4:	d4ee      	bmi.n	800f0d4 <__smakebuf_r+0x18>
 800f0f6:	f023 0303 	bic.w	r3, r3, #3
 800f0fa:	f043 0302 	orr.w	r3, r3, #2
 800f0fe:	81a3      	strh	r3, [r4, #12]
 800f100:	e7e2      	b.n	800f0c8 <__smakebuf_r+0xc>
 800f102:	89a3      	ldrh	r3, [r4, #12]
 800f104:	6020      	str	r0, [r4, #0]
 800f106:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f10a:	81a3      	strh	r3, [r4, #12]
 800f10c:	9b01      	ldr	r3, [sp, #4]
 800f10e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f112:	b15b      	cbz	r3, 800f12c <__smakebuf_r+0x70>
 800f114:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f118:	4630      	mov	r0, r6
 800f11a:	f000 f837 	bl	800f18c <_isatty_r>
 800f11e:	b128      	cbz	r0, 800f12c <__smakebuf_r+0x70>
 800f120:	89a3      	ldrh	r3, [r4, #12]
 800f122:	f023 0303 	bic.w	r3, r3, #3
 800f126:	f043 0301 	orr.w	r3, r3, #1
 800f12a:	81a3      	strh	r3, [r4, #12]
 800f12c:	89a3      	ldrh	r3, [r4, #12]
 800f12e:	431d      	orrs	r5, r3
 800f130:	81a5      	strh	r5, [r4, #12]
 800f132:	e7cf      	b.n	800f0d4 <__smakebuf_r+0x18>

0800f134 <memmove>:
 800f134:	4288      	cmp	r0, r1
 800f136:	b510      	push	{r4, lr}
 800f138:	eb01 0402 	add.w	r4, r1, r2
 800f13c:	d902      	bls.n	800f144 <memmove+0x10>
 800f13e:	4284      	cmp	r4, r0
 800f140:	4623      	mov	r3, r4
 800f142:	d807      	bhi.n	800f154 <memmove+0x20>
 800f144:	1e43      	subs	r3, r0, #1
 800f146:	42a1      	cmp	r1, r4
 800f148:	d008      	beq.n	800f15c <memmove+0x28>
 800f14a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f14e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f152:	e7f8      	b.n	800f146 <memmove+0x12>
 800f154:	4402      	add	r2, r0
 800f156:	4601      	mov	r1, r0
 800f158:	428a      	cmp	r2, r1
 800f15a:	d100      	bne.n	800f15e <memmove+0x2a>
 800f15c:	bd10      	pop	{r4, pc}
 800f15e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f162:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f166:	e7f7      	b.n	800f158 <memmove+0x24>

0800f168 <_fstat_r>:
 800f168:	b538      	push	{r3, r4, r5, lr}
 800f16a:	4d07      	ldr	r5, [pc, #28]	@ (800f188 <_fstat_r+0x20>)
 800f16c:	2300      	movs	r3, #0
 800f16e:	4604      	mov	r4, r0
 800f170:	4608      	mov	r0, r1
 800f172:	4611      	mov	r1, r2
 800f174:	602b      	str	r3, [r5, #0]
 800f176:	f7f4 ff5f 	bl	8004038 <_fstat>
 800f17a:	1c43      	adds	r3, r0, #1
 800f17c:	d102      	bne.n	800f184 <_fstat_r+0x1c>
 800f17e:	682b      	ldr	r3, [r5, #0]
 800f180:	b103      	cbz	r3, 800f184 <_fstat_r+0x1c>
 800f182:	6023      	str	r3, [r4, #0]
 800f184:	bd38      	pop	{r3, r4, r5, pc}
 800f186:	bf00      	nop
 800f188:	2000255c 	.word	0x2000255c

0800f18c <_isatty_r>:
 800f18c:	b538      	push	{r3, r4, r5, lr}
 800f18e:	4d06      	ldr	r5, [pc, #24]	@ (800f1a8 <_isatty_r+0x1c>)
 800f190:	2300      	movs	r3, #0
 800f192:	4604      	mov	r4, r0
 800f194:	4608      	mov	r0, r1
 800f196:	602b      	str	r3, [r5, #0]
 800f198:	f7f4 ff5e 	bl	8004058 <_isatty>
 800f19c:	1c43      	adds	r3, r0, #1
 800f19e:	d102      	bne.n	800f1a6 <_isatty_r+0x1a>
 800f1a0:	682b      	ldr	r3, [r5, #0]
 800f1a2:	b103      	cbz	r3, 800f1a6 <_isatty_r+0x1a>
 800f1a4:	6023      	str	r3, [r4, #0]
 800f1a6:	bd38      	pop	{r3, r4, r5, pc}
 800f1a8:	2000255c 	.word	0x2000255c

0800f1ac <_sbrk_r>:
 800f1ac:	b538      	push	{r3, r4, r5, lr}
 800f1ae:	4d06      	ldr	r5, [pc, #24]	@ (800f1c8 <_sbrk_r+0x1c>)
 800f1b0:	2300      	movs	r3, #0
 800f1b2:	4604      	mov	r4, r0
 800f1b4:	4608      	mov	r0, r1
 800f1b6:	602b      	str	r3, [r5, #0]
 800f1b8:	f7f4 ff66 	bl	8004088 <_sbrk>
 800f1bc:	1c43      	adds	r3, r0, #1
 800f1be:	d102      	bne.n	800f1c6 <_sbrk_r+0x1a>
 800f1c0:	682b      	ldr	r3, [r5, #0]
 800f1c2:	b103      	cbz	r3, 800f1c6 <_sbrk_r+0x1a>
 800f1c4:	6023      	str	r3, [r4, #0]
 800f1c6:	bd38      	pop	{r3, r4, r5, pc}
 800f1c8:	2000255c 	.word	0x2000255c

0800f1cc <abort>:
 800f1cc:	b508      	push	{r3, lr}
 800f1ce:	2006      	movs	r0, #6
 800f1d0:	f000 f86e 	bl	800f2b0 <raise>
 800f1d4:	2001      	movs	r0, #1
 800f1d6:	f7f4 fefb 	bl	8003fd0 <_exit>

0800f1da <_calloc_r>:
 800f1da:	b570      	push	{r4, r5, r6, lr}
 800f1dc:	fba1 5402 	umull	r5, r4, r1, r2
 800f1e0:	b934      	cbnz	r4, 800f1f0 <_calloc_r+0x16>
 800f1e2:	4629      	mov	r1, r5
 800f1e4:	f7fe ffc8 	bl	800e178 <_malloc_r>
 800f1e8:	4606      	mov	r6, r0
 800f1ea:	b928      	cbnz	r0, 800f1f8 <_calloc_r+0x1e>
 800f1ec:	4630      	mov	r0, r6
 800f1ee:	bd70      	pop	{r4, r5, r6, pc}
 800f1f0:	220c      	movs	r2, #12
 800f1f2:	6002      	str	r2, [r0, #0]
 800f1f4:	2600      	movs	r6, #0
 800f1f6:	e7f9      	b.n	800f1ec <_calloc_r+0x12>
 800f1f8:	462a      	mov	r2, r5
 800f1fa:	4621      	mov	r1, r4
 800f1fc:	f7fe f83a 	bl	800d274 <memset>
 800f200:	e7f4      	b.n	800f1ec <_calloc_r+0x12>

0800f202 <_realloc_r>:
 800f202:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f206:	4607      	mov	r7, r0
 800f208:	4614      	mov	r4, r2
 800f20a:	460d      	mov	r5, r1
 800f20c:	b921      	cbnz	r1, 800f218 <_realloc_r+0x16>
 800f20e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f212:	4611      	mov	r1, r2
 800f214:	f7fe bfb0 	b.w	800e178 <_malloc_r>
 800f218:	b92a      	cbnz	r2, 800f226 <_realloc_r+0x24>
 800f21a:	f7fe ff39 	bl	800e090 <_free_r>
 800f21e:	4625      	mov	r5, r4
 800f220:	4628      	mov	r0, r5
 800f222:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f226:	f000 f85f 	bl	800f2e8 <_malloc_usable_size_r>
 800f22a:	4284      	cmp	r4, r0
 800f22c:	4606      	mov	r6, r0
 800f22e:	d802      	bhi.n	800f236 <_realloc_r+0x34>
 800f230:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f234:	d8f4      	bhi.n	800f220 <_realloc_r+0x1e>
 800f236:	4621      	mov	r1, r4
 800f238:	4638      	mov	r0, r7
 800f23a:	f7fe ff9d 	bl	800e178 <_malloc_r>
 800f23e:	4680      	mov	r8, r0
 800f240:	b908      	cbnz	r0, 800f246 <_realloc_r+0x44>
 800f242:	4645      	mov	r5, r8
 800f244:	e7ec      	b.n	800f220 <_realloc_r+0x1e>
 800f246:	42b4      	cmp	r4, r6
 800f248:	4622      	mov	r2, r4
 800f24a:	4629      	mov	r1, r5
 800f24c:	bf28      	it	cs
 800f24e:	4632      	movcs	r2, r6
 800f250:	f7fe f897 	bl	800d382 <memcpy>
 800f254:	4629      	mov	r1, r5
 800f256:	4638      	mov	r0, r7
 800f258:	f7fe ff1a 	bl	800e090 <_free_r>
 800f25c:	e7f1      	b.n	800f242 <_realloc_r+0x40>

0800f25e <_raise_r>:
 800f25e:	291f      	cmp	r1, #31
 800f260:	b538      	push	{r3, r4, r5, lr}
 800f262:	4605      	mov	r5, r0
 800f264:	460c      	mov	r4, r1
 800f266:	d904      	bls.n	800f272 <_raise_r+0x14>
 800f268:	2316      	movs	r3, #22
 800f26a:	6003      	str	r3, [r0, #0]
 800f26c:	f04f 30ff 	mov.w	r0, #4294967295
 800f270:	bd38      	pop	{r3, r4, r5, pc}
 800f272:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f274:	b112      	cbz	r2, 800f27c <_raise_r+0x1e>
 800f276:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f27a:	b94b      	cbnz	r3, 800f290 <_raise_r+0x32>
 800f27c:	4628      	mov	r0, r5
 800f27e:	f000 f831 	bl	800f2e4 <_getpid_r>
 800f282:	4622      	mov	r2, r4
 800f284:	4601      	mov	r1, r0
 800f286:	4628      	mov	r0, r5
 800f288:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f28c:	f000 b818 	b.w	800f2c0 <_kill_r>
 800f290:	2b01      	cmp	r3, #1
 800f292:	d00a      	beq.n	800f2aa <_raise_r+0x4c>
 800f294:	1c59      	adds	r1, r3, #1
 800f296:	d103      	bne.n	800f2a0 <_raise_r+0x42>
 800f298:	2316      	movs	r3, #22
 800f29a:	6003      	str	r3, [r0, #0]
 800f29c:	2001      	movs	r0, #1
 800f29e:	e7e7      	b.n	800f270 <_raise_r+0x12>
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800f2a6:	4620      	mov	r0, r4
 800f2a8:	4798      	blx	r3
 800f2aa:	2000      	movs	r0, #0
 800f2ac:	e7e0      	b.n	800f270 <_raise_r+0x12>
	...

0800f2b0 <raise>:
 800f2b0:	4b02      	ldr	r3, [pc, #8]	@ (800f2bc <raise+0xc>)
 800f2b2:	4601      	mov	r1, r0
 800f2b4:	6818      	ldr	r0, [r3, #0]
 800f2b6:	f7ff bfd2 	b.w	800f25e <_raise_r>
 800f2ba:	bf00      	nop
 800f2bc:	20000284 	.word	0x20000284

0800f2c0 <_kill_r>:
 800f2c0:	b538      	push	{r3, r4, r5, lr}
 800f2c2:	4d07      	ldr	r5, [pc, #28]	@ (800f2e0 <_kill_r+0x20>)
 800f2c4:	2300      	movs	r3, #0
 800f2c6:	4604      	mov	r4, r0
 800f2c8:	4608      	mov	r0, r1
 800f2ca:	4611      	mov	r1, r2
 800f2cc:	602b      	str	r3, [r5, #0]
 800f2ce:	f7f4 fe6f 	bl	8003fb0 <_kill>
 800f2d2:	1c43      	adds	r3, r0, #1
 800f2d4:	d102      	bne.n	800f2dc <_kill_r+0x1c>
 800f2d6:	682b      	ldr	r3, [r5, #0]
 800f2d8:	b103      	cbz	r3, 800f2dc <_kill_r+0x1c>
 800f2da:	6023      	str	r3, [r4, #0]
 800f2dc:	bd38      	pop	{r3, r4, r5, pc}
 800f2de:	bf00      	nop
 800f2e0:	2000255c 	.word	0x2000255c

0800f2e4 <_getpid_r>:
 800f2e4:	f7f4 be5c 	b.w	8003fa0 <_getpid>

0800f2e8 <_malloc_usable_size_r>:
 800f2e8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f2ec:	1f18      	subs	r0, r3, #4
 800f2ee:	2b00      	cmp	r3, #0
 800f2f0:	bfbc      	itt	lt
 800f2f2:	580b      	ldrlt	r3, [r1, r0]
 800f2f4:	18c0      	addlt	r0, r0, r3
 800f2f6:	4770      	bx	lr

0800f2f8 <atan2f>:
 800f2f8:	f000 b9ce 	b.w	800f698 <__ieee754_atan2f>

0800f2fc <fmodf>:
 800f2fc:	b508      	push	{r3, lr}
 800f2fe:	ed2d 8b02 	vpush	{d8}
 800f302:	eef0 8a40 	vmov.f32	s17, s0
 800f306:	eeb0 8a60 	vmov.f32	s16, s1
 800f30a:	f000 fa65 	bl	800f7d8 <__ieee754_fmodf>
 800f30e:	eef4 8a48 	vcmp.f32	s17, s16
 800f312:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f316:	d60c      	bvs.n	800f332 <fmodf+0x36>
 800f318:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f338 <fmodf+0x3c>
 800f31c:	eeb4 8a68 	vcmp.f32	s16, s17
 800f320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f324:	d105      	bne.n	800f332 <fmodf+0x36>
 800f326:	f7fd fff7 	bl	800d318 <__errno>
 800f32a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f32e:	2321      	movs	r3, #33	@ 0x21
 800f330:	6003      	str	r3, [r0, #0]
 800f332:	ecbd 8b02 	vpop	{d8}
 800f336:	bd08      	pop	{r3, pc}
 800f338:	00000000 	.word	0x00000000

0800f33c <powf>:
 800f33c:	b508      	push	{r3, lr}
 800f33e:	ed2d 8b04 	vpush	{d8-d9}
 800f342:	eeb0 8a60 	vmov.f32	s16, s1
 800f346:	eeb0 9a40 	vmov.f32	s18, s0
 800f34a:	f000 fac7 	bl	800f8dc <__ieee754_powf>
 800f34e:	eeb4 8a48 	vcmp.f32	s16, s16
 800f352:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f356:	eef0 8a40 	vmov.f32	s17, s0
 800f35a:	d63e      	bvs.n	800f3da <powf+0x9e>
 800f35c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800f360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f364:	d112      	bne.n	800f38c <powf+0x50>
 800f366:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800f36a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f36e:	d039      	beq.n	800f3e4 <powf+0xa8>
 800f370:	eeb0 0a48 	vmov.f32	s0, s16
 800f374:	f000 f8e2 	bl	800f53c <finitef>
 800f378:	b378      	cbz	r0, 800f3da <powf+0x9e>
 800f37a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f382:	d52a      	bpl.n	800f3da <powf+0x9e>
 800f384:	f7fd ffc8 	bl	800d318 <__errno>
 800f388:	2322      	movs	r3, #34	@ 0x22
 800f38a:	e014      	b.n	800f3b6 <powf+0x7a>
 800f38c:	f000 f8d6 	bl	800f53c <finitef>
 800f390:	b998      	cbnz	r0, 800f3ba <powf+0x7e>
 800f392:	eeb0 0a49 	vmov.f32	s0, s18
 800f396:	f000 f8d1 	bl	800f53c <finitef>
 800f39a:	b170      	cbz	r0, 800f3ba <powf+0x7e>
 800f39c:	eeb0 0a48 	vmov.f32	s0, s16
 800f3a0:	f000 f8cc 	bl	800f53c <finitef>
 800f3a4:	b148      	cbz	r0, 800f3ba <powf+0x7e>
 800f3a6:	eef4 8a68 	vcmp.f32	s17, s17
 800f3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3ae:	d7e9      	bvc.n	800f384 <powf+0x48>
 800f3b0:	f7fd ffb2 	bl	800d318 <__errno>
 800f3b4:	2321      	movs	r3, #33	@ 0x21
 800f3b6:	6003      	str	r3, [r0, #0]
 800f3b8:	e00f      	b.n	800f3da <powf+0x9e>
 800f3ba:	eef5 8a40 	vcmp.f32	s17, #0.0
 800f3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f3c2:	d10a      	bne.n	800f3da <powf+0x9e>
 800f3c4:	eeb0 0a49 	vmov.f32	s0, s18
 800f3c8:	f000 f8b8 	bl	800f53c <finitef>
 800f3cc:	b128      	cbz	r0, 800f3da <powf+0x9e>
 800f3ce:	eeb0 0a48 	vmov.f32	s0, s16
 800f3d2:	f000 f8b3 	bl	800f53c <finitef>
 800f3d6:	2800      	cmp	r0, #0
 800f3d8:	d1d4      	bne.n	800f384 <powf+0x48>
 800f3da:	eeb0 0a68 	vmov.f32	s0, s17
 800f3de:	ecbd 8b04 	vpop	{d8-d9}
 800f3e2:	bd08      	pop	{r3, pc}
 800f3e4:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800f3e8:	e7f7      	b.n	800f3da <powf+0x9e>
	...

0800f3ec <sqrtf>:
 800f3ec:	b508      	push	{r3, lr}
 800f3ee:	ed2d 8b02 	vpush	{d8}
 800f3f2:	eeb0 8a40 	vmov.f32	s16, s0
 800f3f6:	f000 f8ab 	bl	800f550 <__ieee754_sqrtf>
 800f3fa:	eeb4 8a48 	vcmp.f32	s16, s16
 800f3fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f402:	d60c      	bvs.n	800f41e <sqrtf+0x32>
 800f404:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800f424 <sqrtf+0x38>
 800f408:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800f40c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f410:	d505      	bpl.n	800f41e <sqrtf+0x32>
 800f412:	f7fd ff81 	bl	800d318 <__errno>
 800f416:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800f41a:	2321      	movs	r3, #33	@ 0x21
 800f41c:	6003      	str	r3, [r0, #0]
 800f41e:	ecbd 8b02 	vpop	{d8}
 800f422:	bd08      	pop	{r3, pc}
 800f424:	00000000 	.word	0x00000000

0800f428 <cosf>:
 800f428:	ee10 3a10 	vmov	r3, s0
 800f42c:	b507      	push	{r0, r1, r2, lr}
 800f42e:	4a1e      	ldr	r2, [pc, #120]	@ (800f4a8 <cosf+0x80>)
 800f430:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f434:	4293      	cmp	r3, r2
 800f436:	d806      	bhi.n	800f446 <cosf+0x1e>
 800f438:	eddf 0a1c 	vldr	s1, [pc, #112]	@ 800f4ac <cosf+0x84>
 800f43c:	b003      	add	sp, #12
 800f43e:	f85d eb04 	ldr.w	lr, [sp], #4
 800f442:	f000 b889 	b.w	800f558 <__kernel_cosf>
 800f446:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f44a:	d304      	bcc.n	800f456 <cosf+0x2e>
 800f44c:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f450:	b003      	add	sp, #12
 800f452:	f85d fb04 	ldr.w	pc, [sp], #4
 800f456:	4668      	mov	r0, sp
 800f458:	f000 fd0e 	bl	800fe78 <__ieee754_rem_pio2f>
 800f45c:	f000 0003 	and.w	r0, r0, #3
 800f460:	2801      	cmp	r0, #1
 800f462:	d009      	beq.n	800f478 <cosf+0x50>
 800f464:	2802      	cmp	r0, #2
 800f466:	d010      	beq.n	800f48a <cosf+0x62>
 800f468:	b9b0      	cbnz	r0, 800f498 <cosf+0x70>
 800f46a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f46e:	ed9d 0a00 	vldr	s0, [sp]
 800f472:	f000 f871 	bl	800f558 <__kernel_cosf>
 800f476:	e7eb      	b.n	800f450 <cosf+0x28>
 800f478:	eddd 0a01 	vldr	s1, [sp, #4]
 800f47c:	ed9d 0a00 	vldr	s0, [sp]
 800f480:	f000 f8c2 	bl	800f608 <__kernel_sinf>
 800f484:	eeb1 0a40 	vneg.f32	s0, s0
 800f488:	e7e2      	b.n	800f450 <cosf+0x28>
 800f48a:	eddd 0a01 	vldr	s1, [sp, #4]
 800f48e:	ed9d 0a00 	vldr	s0, [sp]
 800f492:	f000 f861 	bl	800f558 <__kernel_cosf>
 800f496:	e7f5      	b.n	800f484 <cosf+0x5c>
 800f498:	eddd 0a01 	vldr	s1, [sp, #4]
 800f49c:	ed9d 0a00 	vldr	s0, [sp]
 800f4a0:	2001      	movs	r0, #1
 800f4a2:	f000 f8b1 	bl	800f608 <__kernel_sinf>
 800f4a6:	e7d3      	b.n	800f450 <cosf+0x28>
 800f4a8:	3f490fd8 	.word	0x3f490fd8
 800f4ac:	00000000 	.word	0x00000000

0800f4b0 <sinf>:
 800f4b0:	ee10 3a10 	vmov	r3, s0
 800f4b4:	b507      	push	{r0, r1, r2, lr}
 800f4b6:	4a1f      	ldr	r2, [pc, #124]	@ (800f534 <sinf+0x84>)
 800f4b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f4bc:	4293      	cmp	r3, r2
 800f4be:	d807      	bhi.n	800f4d0 <sinf+0x20>
 800f4c0:	eddf 0a1d 	vldr	s1, [pc, #116]	@ 800f538 <sinf+0x88>
 800f4c4:	2000      	movs	r0, #0
 800f4c6:	b003      	add	sp, #12
 800f4c8:	f85d eb04 	ldr.w	lr, [sp], #4
 800f4cc:	f000 b89c 	b.w	800f608 <__kernel_sinf>
 800f4d0:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f4d4:	d304      	bcc.n	800f4e0 <sinf+0x30>
 800f4d6:	ee30 0a40 	vsub.f32	s0, s0, s0
 800f4da:	b003      	add	sp, #12
 800f4dc:	f85d fb04 	ldr.w	pc, [sp], #4
 800f4e0:	4668      	mov	r0, sp
 800f4e2:	f000 fcc9 	bl	800fe78 <__ieee754_rem_pio2f>
 800f4e6:	f000 0003 	and.w	r0, r0, #3
 800f4ea:	2801      	cmp	r0, #1
 800f4ec:	d00a      	beq.n	800f504 <sinf+0x54>
 800f4ee:	2802      	cmp	r0, #2
 800f4f0:	d00f      	beq.n	800f512 <sinf+0x62>
 800f4f2:	b9c0      	cbnz	r0, 800f526 <sinf+0x76>
 800f4f4:	eddd 0a01 	vldr	s1, [sp, #4]
 800f4f8:	ed9d 0a00 	vldr	s0, [sp]
 800f4fc:	2001      	movs	r0, #1
 800f4fe:	f000 f883 	bl	800f608 <__kernel_sinf>
 800f502:	e7ea      	b.n	800f4da <sinf+0x2a>
 800f504:	eddd 0a01 	vldr	s1, [sp, #4]
 800f508:	ed9d 0a00 	vldr	s0, [sp]
 800f50c:	f000 f824 	bl	800f558 <__kernel_cosf>
 800f510:	e7e3      	b.n	800f4da <sinf+0x2a>
 800f512:	eddd 0a01 	vldr	s1, [sp, #4]
 800f516:	ed9d 0a00 	vldr	s0, [sp]
 800f51a:	2001      	movs	r0, #1
 800f51c:	f000 f874 	bl	800f608 <__kernel_sinf>
 800f520:	eeb1 0a40 	vneg.f32	s0, s0
 800f524:	e7d9      	b.n	800f4da <sinf+0x2a>
 800f526:	eddd 0a01 	vldr	s1, [sp, #4]
 800f52a:	ed9d 0a00 	vldr	s0, [sp]
 800f52e:	f000 f813 	bl	800f558 <__kernel_cosf>
 800f532:	e7f5      	b.n	800f520 <sinf+0x70>
 800f534:	3f490fd8 	.word	0x3f490fd8
 800f538:	00000000 	.word	0x00000000

0800f53c <finitef>:
 800f53c:	ee10 3a10 	vmov	r3, s0
 800f540:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800f544:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800f548:	bfac      	ite	ge
 800f54a:	2000      	movge	r0, #0
 800f54c:	2001      	movlt	r0, #1
 800f54e:	4770      	bx	lr

0800f550 <__ieee754_sqrtf>:
 800f550:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800f554:	4770      	bx	lr
	...

0800f558 <__kernel_cosf>:
 800f558:	ee10 3a10 	vmov	r3, s0
 800f55c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f560:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f564:	eef0 6a40 	vmov.f32	s13, s0
 800f568:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800f56c:	d204      	bcs.n	800f578 <__kernel_cosf+0x20>
 800f56e:	eefd 7ae6 	vcvt.s32.f32	s15, s13
 800f572:	ee17 2a90 	vmov	r2, s15
 800f576:	b342      	cbz	r2, 800f5ca <__kernel_cosf+0x72>
 800f578:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800f57c:	eddf 7a1a 	vldr	s15, [pc, #104]	@ 800f5e8 <__kernel_cosf+0x90>
 800f580:	ed9f 6a1a 	vldr	s12, [pc, #104]	@ 800f5ec <__kernel_cosf+0x94>
 800f584:	4a1a      	ldr	r2, [pc, #104]	@ (800f5f0 <__kernel_cosf+0x98>)
 800f586:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f58a:	4293      	cmp	r3, r2
 800f58c:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800f5f4 <__kernel_cosf+0x9c>
 800f590:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f594:	ed9f 6a18 	vldr	s12, [pc, #96]	@ 800f5f8 <__kernel_cosf+0xa0>
 800f598:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f59c:	eddf 7a17 	vldr	s15, [pc, #92]	@ 800f5fc <__kernel_cosf+0xa4>
 800f5a0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f5a4:	ed9f 6a16 	vldr	s12, [pc, #88]	@ 800f600 <__kernel_cosf+0xa8>
 800f5a8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f5ac:	ee60 0ae6 	vnmul.f32	s1, s1, s13
 800f5b0:	ee26 6a07 	vmul.f32	s12, s12, s14
 800f5b4:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f5b8:	eee7 0a06 	vfma.f32	s1, s14, s12
 800f5bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5c0:	d804      	bhi.n	800f5cc <__kernel_cosf+0x74>
 800f5c2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800f5c6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800f5ca:	4770      	bx	lr
 800f5cc:	4a0d      	ldr	r2, [pc, #52]	@ (800f604 <__kernel_cosf+0xac>)
 800f5ce:	4293      	cmp	r3, r2
 800f5d0:	bf9a      	itte	ls
 800f5d2:	f103 437f 	addls.w	r3, r3, #4278190080	@ 0xff000000
 800f5d6:	ee07 3a10 	vmovls	s14, r3
 800f5da:	eeb5 7a02 	vmovhi.f32	s14, #82	@ 0x3e900000  0.2812500
 800f5de:	ee30 0a47 	vsub.f32	s0, s0, s14
 800f5e2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f5e6:	e7ec      	b.n	800f5c2 <__kernel_cosf+0x6a>
 800f5e8:	ad47d74e 	.word	0xad47d74e
 800f5ec:	310f74f6 	.word	0x310f74f6
 800f5f0:	3e999999 	.word	0x3e999999
 800f5f4:	b493f27c 	.word	0xb493f27c
 800f5f8:	37d00d01 	.word	0x37d00d01
 800f5fc:	bab60b61 	.word	0xbab60b61
 800f600:	3d2aaaab 	.word	0x3d2aaaab
 800f604:	3f480000 	.word	0x3f480000

0800f608 <__kernel_sinf>:
 800f608:	ee10 3a10 	vmov	r3, s0
 800f60c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800f610:	f1b3 5f48 	cmp.w	r3, #838860800	@ 0x32000000
 800f614:	d204      	bcs.n	800f620 <__kernel_sinf+0x18>
 800f616:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800f61a:	ee17 3a90 	vmov	r3, s15
 800f61e:	b35b      	cbz	r3, 800f678 <__kernel_sinf+0x70>
 800f620:	ee20 7a00 	vmul.f32	s14, s0, s0
 800f624:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f67c <__kernel_sinf+0x74>
 800f628:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800f680 <__kernel_sinf+0x78>
 800f62c:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f630:	eddf 7a14 	vldr	s15, [pc, #80]	@ 800f684 <__kernel_sinf+0x7c>
 800f634:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f638:	ed9f 6a13 	vldr	s12, [pc, #76]	@ 800f688 <__kernel_sinf+0x80>
 800f63c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800f640:	eddf 7a12 	vldr	s15, [pc, #72]	@ 800f68c <__kernel_sinf+0x84>
 800f644:	ee60 6a07 	vmul.f32	s13, s0, s14
 800f648:	eee6 7a07 	vfma.f32	s15, s12, s14
 800f64c:	b930      	cbnz	r0, 800f65c <__kernel_sinf+0x54>
 800f64e:	ed9f 6a10 	vldr	s12, [pc, #64]	@ 800f690 <__kernel_sinf+0x88>
 800f652:	eea7 6a27 	vfma.f32	s12, s14, s15
 800f656:	eea6 0a26 	vfma.f32	s0, s12, s13
 800f65a:	4770      	bx	lr
 800f65c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800f660:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800f664:	eee0 7a86 	vfma.f32	s15, s1, s12
 800f668:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800f66c:	eddf 7a09 	vldr	s15, [pc, #36]	@ 800f694 <__kernel_sinf+0x8c>
 800f670:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800f674:	ee30 0a60 	vsub.f32	s0, s0, s1
 800f678:	4770      	bx	lr
 800f67a:	bf00      	nop
 800f67c:	2f2ec9d3 	.word	0x2f2ec9d3
 800f680:	b2d72f34 	.word	0xb2d72f34
 800f684:	3638ef1b 	.word	0x3638ef1b
 800f688:	b9500d01 	.word	0xb9500d01
 800f68c:	3c088889 	.word	0x3c088889
 800f690:	be2aaaab 	.word	0xbe2aaaab
 800f694:	3e2aaaab 	.word	0x3e2aaaab

0800f698 <__ieee754_atan2f>:
 800f698:	ee10 2a90 	vmov	r2, s1
 800f69c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800f6a0:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f6a4:	b510      	push	{r4, lr}
 800f6a6:	eef0 7a40 	vmov.f32	s15, s0
 800f6aa:	d806      	bhi.n	800f6ba <__ieee754_atan2f+0x22>
 800f6ac:	ee10 0a10 	vmov	r0, s0
 800f6b0:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800f6b4:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f6b8:	d904      	bls.n	800f6c4 <__ieee754_atan2f+0x2c>
 800f6ba:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800f6be:	eeb0 0a67 	vmov.f32	s0, s15
 800f6c2:	bd10      	pop	{r4, pc}
 800f6c4:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800f6c8:	d103      	bne.n	800f6d2 <__ieee754_atan2f+0x3a>
 800f6ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f6ce:	f000 bd03 	b.w	80100d8 <atanf>
 800f6d2:	1794      	asrs	r4, r2, #30
 800f6d4:	f004 0402 	and.w	r4, r4, #2
 800f6d8:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800f6dc:	b943      	cbnz	r3, 800f6f0 <__ieee754_atan2f+0x58>
 800f6de:	2c02      	cmp	r4, #2
 800f6e0:	d05e      	beq.n	800f7a0 <__ieee754_atan2f+0x108>
 800f6e2:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800f7b4 <__ieee754_atan2f+0x11c>
 800f6e6:	2c03      	cmp	r4, #3
 800f6e8:	bf08      	it	eq
 800f6ea:	eef0 7a47 	vmoveq.f32	s15, s14
 800f6ee:	e7e6      	b.n	800f6be <__ieee754_atan2f+0x26>
 800f6f0:	b941      	cbnz	r1, 800f704 <__ieee754_atan2f+0x6c>
 800f6f2:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800f7b8 <__ieee754_atan2f+0x120>
 800f6f6:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800f7bc <__ieee754_atan2f+0x124>
 800f6fa:	2800      	cmp	r0, #0
 800f6fc:	bfa8      	it	ge
 800f6fe:	eef0 7a47 	vmovge.f32	s15, s14
 800f702:	e7dc      	b.n	800f6be <__ieee754_atan2f+0x26>
 800f704:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f708:	d110      	bne.n	800f72c <__ieee754_atan2f+0x94>
 800f70a:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f70e:	f104 34ff 	add.w	r4, r4, #4294967295
 800f712:	d107      	bne.n	800f724 <__ieee754_atan2f+0x8c>
 800f714:	2c02      	cmp	r4, #2
 800f716:	d846      	bhi.n	800f7a6 <__ieee754_atan2f+0x10e>
 800f718:	4b29      	ldr	r3, [pc, #164]	@ (800f7c0 <__ieee754_atan2f+0x128>)
 800f71a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800f71e:	edd3 7a00 	vldr	s15, [r3]
 800f722:	e7cc      	b.n	800f6be <__ieee754_atan2f+0x26>
 800f724:	2c02      	cmp	r4, #2
 800f726:	d841      	bhi.n	800f7ac <__ieee754_atan2f+0x114>
 800f728:	4b26      	ldr	r3, [pc, #152]	@ (800f7c4 <__ieee754_atan2f+0x12c>)
 800f72a:	e7f6      	b.n	800f71a <__ieee754_atan2f+0x82>
 800f72c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800f730:	d0df      	beq.n	800f6f2 <__ieee754_atan2f+0x5a>
 800f732:	1a5b      	subs	r3, r3, r1
 800f734:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800f738:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800f73c:	da1a      	bge.n	800f774 <__ieee754_atan2f+0xdc>
 800f73e:	2a00      	cmp	r2, #0
 800f740:	da01      	bge.n	800f746 <__ieee754_atan2f+0xae>
 800f742:	313c      	adds	r1, #60	@ 0x3c
 800f744:	db19      	blt.n	800f77a <__ieee754_atan2f+0xe2>
 800f746:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800f74a:	f000 fd99 	bl	8010280 <fabsf>
 800f74e:	f000 fcc3 	bl	80100d8 <atanf>
 800f752:	eef0 7a40 	vmov.f32	s15, s0
 800f756:	2c01      	cmp	r4, #1
 800f758:	d012      	beq.n	800f780 <__ieee754_atan2f+0xe8>
 800f75a:	2c02      	cmp	r4, #2
 800f75c:	d017      	beq.n	800f78e <__ieee754_atan2f+0xf6>
 800f75e:	2c00      	cmp	r4, #0
 800f760:	d0ad      	beq.n	800f6be <__ieee754_atan2f+0x26>
 800f762:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800f7c8 <__ieee754_atan2f+0x130>
 800f766:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f76a:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800f7cc <__ieee754_atan2f+0x134>
 800f76e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800f772:	e7a4      	b.n	800f6be <__ieee754_atan2f+0x26>
 800f774:	eddf 7a11 	vldr	s15, [pc, #68]	@ 800f7bc <__ieee754_atan2f+0x124>
 800f778:	e7ed      	b.n	800f756 <__ieee754_atan2f+0xbe>
 800f77a:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800f7d0 <__ieee754_atan2f+0x138>
 800f77e:	e7ea      	b.n	800f756 <__ieee754_atan2f+0xbe>
 800f780:	ee17 3a90 	vmov	r3, s15
 800f784:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800f788:	ee07 3a90 	vmov	s15, r3
 800f78c:	e797      	b.n	800f6be <__ieee754_atan2f+0x26>
 800f78e:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800f7c8 <__ieee754_atan2f+0x130>
 800f792:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f796:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800f7cc <__ieee754_atan2f+0x134>
 800f79a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f79e:	e78e      	b.n	800f6be <__ieee754_atan2f+0x26>
 800f7a0:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800f7cc <__ieee754_atan2f+0x134>
 800f7a4:	e78b      	b.n	800f6be <__ieee754_atan2f+0x26>
 800f7a6:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800f7d4 <__ieee754_atan2f+0x13c>
 800f7aa:	e788      	b.n	800f6be <__ieee754_atan2f+0x26>
 800f7ac:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800f7d0 <__ieee754_atan2f+0x138>
 800f7b0:	e785      	b.n	800f6be <__ieee754_atan2f+0x26>
 800f7b2:	bf00      	nop
 800f7b4:	c0490fdb 	.word	0xc0490fdb
 800f7b8:	bfc90fdb 	.word	0xbfc90fdb
 800f7bc:	3fc90fdb 	.word	0x3fc90fdb
 800f7c0:	0801146c 	.word	0x0801146c
 800f7c4:	08011460 	.word	0x08011460
 800f7c8:	33bbbd2e 	.word	0x33bbbd2e
 800f7cc:	40490fdb 	.word	0x40490fdb
 800f7d0:	00000000 	.word	0x00000000
 800f7d4:	3f490fdb 	.word	0x3f490fdb

0800f7d8 <__ieee754_fmodf>:
 800f7d8:	b570      	push	{r4, r5, r6, lr}
 800f7da:	ee10 6a90 	vmov	r6, s1
 800f7de:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800f7e2:	1e5a      	subs	r2, r3, #1
 800f7e4:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800f7e8:	d206      	bcs.n	800f7f8 <__ieee754_fmodf+0x20>
 800f7ea:	ee10 4a10 	vmov	r4, s0
 800f7ee:	f024 4100 	bic.w	r1, r4, #2147483648	@ 0x80000000
 800f7f2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800f7f6:	d304      	bcc.n	800f802 <__ieee754_fmodf+0x2a>
 800f7f8:	ee60 0a20 	vmul.f32	s1, s0, s1
 800f7fc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 800f800:	bd70      	pop	{r4, r5, r6, pc}
 800f802:	4299      	cmp	r1, r3
 800f804:	dbfc      	blt.n	800f800 <__ieee754_fmodf+0x28>
 800f806:	f004 4500 	and.w	r5, r4, #2147483648	@ 0x80000000
 800f80a:	d105      	bne.n	800f818 <__ieee754_fmodf+0x40>
 800f80c:	4b32      	ldr	r3, [pc, #200]	@ (800f8d8 <__ieee754_fmodf+0x100>)
 800f80e:	eb03 7355 	add.w	r3, r3, r5, lsr #29
 800f812:	ed93 0a00 	vldr	s0, [r3]
 800f816:	e7f3      	b.n	800f800 <__ieee754_fmodf+0x28>
 800f818:	f014 4fff 	tst.w	r4, #2139095040	@ 0x7f800000
 800f81c:	d146      	bne.n	800f8ac <__ieee754_fmodf+0xd4>
 800f81e:	020a      	lsls	r2, r1, #8
 800f820:	f06f 007d 	mvn.w	r0, #125	@ 0x7d
 800f824:	2a00      	cmp	r2, #0
 800f826:	dc3e      	bgt.n	800f8a6 <__ieee754_fmodf+0xce>
 800f828:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800f82c:	bf01      	itttt	eq
 800f82e:	021a      	lsleq	r2, r3, #8
 800f830:	fab2 f282 	clzeq	r2, r2
 800f834:	f1c2 22ff 	rsbeq	r2, r2, #4278255360	@ 0xff00ff00
 800f838:	f502 027f 	addeq.w	r2, r2, #16711680	@ 0xff0000
 800f83c:	bf16      	itet	ne
 800f83e:	15da      	asrne	r2, r3, #23
 800f840:	3282      	addeq	r2, #130	@ 0x82
 800f842:	3a7f      	subne	r2, #127	@ 0x7f
 800f844:	f110 0f7e 	cmn.w	r0, #126	@ 0x7e
 800f848:	bfbb      	ittet	lt
 800f84a:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800f84e:	1a24      	sublt	r4, r4, r0
 800f850:	f3c4 0416 	ubfxge	r4, r4, #0, #23
 800f854:	40a1      	lsllt	r1, r4
 800f856:	bfa8      	it	ge
 800f858:	f444 0100 	orrge.w	r1, r4, #8388608	@ 0x800000
 800f85c:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800f860:	bfb5      	itete	lt
 800f862:	f06f 047d 	mvnlt.w	r4, #125	@ 0x7d
 800f866:	f3c6 0616 	ubfxge	r6, r6, #0, #23
 800f86a:	1aa4      	sublt	r4, r4, r2
 800f86c:	f446 0400 	orrge.w	r4, r6, #8388608	@ 0x800000
 800f870:	bfb8      	it	lt
 800f872:	fa03 f404 	lsllt.w	r4, r3, r4
 800f876:	1a80      	subs	r0, r0, r2
 800f878:	1b0b      	subs	r3, r1, r4
 800f87a:	b9d0      	cbnz	r0, 800f8b2 <__ieee754_fmodf+0xda>
 800f87c:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800f880:	bf28      	it	cs
 800f882:	460b      	movcs	r3, r1
 800f884:	2b00      	cmp	r3, #0
 800f886:	d0c1      	beq.n	800f80c <__ieee754_fmodf+0x34>
 800f888:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800f88c:	db19      	blt.n	800f8c2 <__ieee754_fmodf+0xea>
 800f88e:	f112 0f7e 	cmn.w	r2, #126	@ 0x7e
 800f892:	db19      	blt.n	800f8c8 <__ieee754_fmodf+0xf0>
 800f894:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800f898:	327f      	adds	r2, #127	@ 0x7f
 800f89a:	432b      	orrs	r3, r5
 800f89c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800f8a0:	ee00 3a10 	vmov	s0, r3
 800f8a4:	e7ac      	b.n	800f800 <__ieee754_fmodf+0x28>
 800f8a6:	3801      	subs	r0, #1
 800f8a8:	0052      	lsls	r2, r2, #1
 800f8aa:	e7bb      	b.n	800f824 <__ieee754_fmodf+0x4c>
 800f8ac:	15c8      	asrs	r0, r1, #23
 800f8ae:	387f      	subs	r0, #127	@ 0x7f
 800f8b0:	e7ba      	b.n	800f828 <__ieee754_fmodf+0x50>
 800f8b2:	2b00      	cmp	r3, #0
 800f8b4:	da02      	bge.n	800f8bc <__ieee754_fmodf+0xe4>
 800f8b6:	0049      	lsls	r1, r1, #1
 800f8b8:	3801      	subs	r0, #1
 800f8ba:	e7dd      	b.n	800f878 <__ieee754_fmodf+0xa0>
 800f8bc:	d0a6      	beq.n	800f80c <__ieee754_fmodf+0x34>
 800f8be:	0059      	lsls	r1, r3, #1
 800f8c0:	e7fa      	b.n	800f8b8 <__ieee754_fmodf+0xe0>
 800f8c2:	005b      	lsls	r3, r3, #1
 800f8c4:	3a01      	subs	r2, #1
 800f8c6:	e7df      	b.n	800f888 <__ieee754_fmodf+0xb0>
 800f8c8:	f1c2 22ff 	rsb	r2, r2, #4278255360	@ 0xff00ff00
 800f8cc:	f502 027f 	add.w	r2, r2, #16711680	@ 0xff0000
 800f8d0:	3282      	adds	r2, #130	@ 0x82
 800f8d2:	4113      	asrs	r3, r2
 800f8d4:	432b      	orrs	r3, r5
 800f8d6:	e7e3      	b.n	800f8a0 <__ieee754_fmodf+0xc8>
 800f8d8:	08011478 	.word	0x08011478

0800f8dc <__ieee754_powf>:
 800f8dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f8e0:	ee10 4a90 	vmov	r4, s1
 800f8e4:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800f8e8:	ed2d 8b02 	vpush	{d8}
 800f8ec:	ee10 6a10 	vmov	r6, s0
 800f8f0:	eeb0 8a40 	vmov.f32	s16, s0
 800f8f4:	eef0 8a60 	vmov.f32	s17, s1
 800f8f8:	d10c      	bne.n	800f914 <__ieee754_powf+0x38>
 800f8fa:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800f8fe:	0076      	lsls	r6, r6, #1
 800f900:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800f904:	f240 8274 	bls.w	800fdf0 <__ieee754_powf+0x514>
 800f908:	ee38 0a28 	vadd.f32	s0, s16, s17
 800f90c:	ecbd 8b02 	vpop	{d8}
 800f910:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f914:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800f918:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800f91c:	d802      	bhi.n	800f924 <__ieee754_powf+0x48>
 800f91e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f922:	d908      	bls.n	800f936 <__ieee754_powf+0x5a>
 800f924:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800f928:	d1ee      	bne.n	800f908 <__ieee754_powf+0x2c>
 800f92a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800f92e:	0064      	lsls	r4, r4, #1
 800f930:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800f934:	e7e6      	b.n	800f904 <__ieee754_powf+0x28>
 800f936:	2e00      	cmp	r6, #0
 800f938:	da1f      	bge.n	800f97a <__ieee754_powf+0x9e>
 800f93a:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800f93e:	f080 8260 	bcs.w	800fe02 <__ieee754_powf+0x526>
 800f942:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f946:	d32f      	bcc.n	800f9a8 <__ieee754_powf+0xcc>
 800f948:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800f94c:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800f950:	fa49 f503 	asr.w	r5, r9, r3
 800f954:	fa05 f303 	lsl.w	r3, r5, r3
 800f958:	454b      	cmp	r3, r9
 800f95a:	d123      	bne.n	800f9a4 <__ieee754_powf+0xc8>
 800f95c:	f005 0501 	and.w	r5, r5, #1
 800f960:	f1c5 0502 	rsb	r5, r5, #2
 800f964:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800f968:	d11f      	bne.n	800f9aa <__ieee754_powf+0xce>
 800f96a:	2c00      	cmp	r4, #0
 800f96c:	f280 8246 	bge.w	800fdfc <__ieee754_powf+0x520>
 800f970:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800f974:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800f978:	e7c8      	b.n	800f90c <__ieee754_powf+0x30>
 800f97a:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800f97e:	d111      	bne.n	800f9a4 <__ieee754_powf+0xc8>
 800f980:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800f984:	f000 8234 	beq.w	800fdf0 <__ieee754_powf+0x514>
 800f988:	d906      	bls.n	800f998 <__ieee754_powf+0xbc>
 800f98a:	ed9f 0ac5 	vldr	s0, [pc, #788]	@ 800fca0 <__ieee754_powf+0x3c4>
 800f98e:	2c00      	cmp	r4, #0
 800f990:	bfa8      	it	ge
 800f992:	eeb0 0a68 	vmovge.f32	s0, s17
 800f996:	e7b9      	b.n	800f90c <__ieee754_powf+0x30>
 800f998:	2c00      	cmp	r4, #0
 800f99a:	f280 822c 	bge.w	800fdf6 <__ieee754_powf+0x51a>
 800f99e:	eeb1 0a68 	vneg.f32	s0, s17
 800f9a2:	e7b3      	b.n	800f90c <__ieee754_powf+0x30>
 800f9a4:	2500      	movs	r5, #0
 800f9a6:	e7dd      	b.n	800f964 <__ieee754_powf+0x88>
 800f9a8:	2500      	movs	r5, #0
 800f9aa:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800f9ae:	d102      	bne.n	800f9b6 <__ieee754_powf+0xda>
 800f9b0:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f9b4:	e7aa      	b.n	800f90c <__ieee754_powf+0x30>
 800f9b6:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800f9ba:	f040 8227 	bne.w	800fe0c <__ieee754_powf+0x530>
 800f9be:	2e00      	cmp	r6, #0
 800f9c0:	f2c0 8224 	blt.w	800fe0c <__ieee754_powf+0x530>
 800f9c4:	eeb0 0a48 	vmov.f32	s0, s16
 800f9c8:	ecbd 8b02 	vpop	{d8}
 800f9cc:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f9d0:	f7ff bdbe 	b.w	800f550 <__ieee754_sqrtf>
 800f9d4:	2d01      	cmp	r5, #1
 800f9d6:	d199      	bne.n	800f90c <__ieee754_powf+0x30>
 800f9d8:	eeb1 0a40 	vneg.f32	s0, s0
 800f9dc:	e796      	b.n	800f90c <__ieee754_powf+0x30>
 800f9de:	0ff0      	lsrs	r0, r6, #31
 800f9e0:	3801      	subs	r0, #1
 800f9e2:	ea55 0300 	orrs.w	r3, r5, r0
 800f9e6:	d104      	bne.n	800f9f2 <__ieee754_powf+0x116>
 800f9e8:	ee38 8a48 	vsub.f32	s16, s16, s16
 800f9ec:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800f9f0:	e78c      	b.n	800f90c <__ieee754_powf+0x30>
 800f9f2:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800f9f6:	d96d      	bls.n	800fad4 <__ieee754_powf+0x1f8>
 800f9f8:	4baa      	ldr	r3, [pc, #680]	@ (800fca4 <__ieee754_powf+0x3c8>)
 800f9fa:	4598      	cmp	r8, r3
 800f9fc:	d808      	bhi.n	800fa10 <__ieee754_powf+0x134>
 800f9fe:	2c00      	cmp	r4, #0
 800fa00:	da0b      	bge.n	800fa1a <__ieee754_powf+0x13e>
 800fa02:	2000      	movs	r0, #0
 800fa04:	ecbd 8b02 	vpop	{d8}
 800fa08:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa0c:	f000 bcc6 	b.w	801039c <__math_oflowf>
 800fa10:	4ba5      	ldr	r3, [pc, #660]	@ (800fca8 <__ieee754_powf+0x3cc>)
 800fa12:	4598      	cmp	r8, r3
 800fa14:	d908      	bls.n	800fa28 <__ieee754_powf+0x14c>
 800fa16:	2c00      	cmp	r4, #0
 800fa18:	dcf3      	bgt.n	800fa02 <__ieee754_powf+0x126>
 800fa1a:	2000      	movs	r0, #0
 800fa1c:	ecbd 8b02 	vpop	{d8}
 800fa20:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800fa24:	f000 bcb4 	b.w	8010390 <__math_uflowf>
 800fa28:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800fa2c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fa30:	eddf 6a9e 	vldr	s13, [pc, #632]	@ 800fcac <__ieee754_powf+0x3d0>
 800fa34:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800fa38:	eee0 6a67 	vfms.f32	s13, s0, s15
 800fa3c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800fa40:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800fa44:	ee20 7a00 	vmul.f32	s14, s0, s0
 800fa48:	eddf 6a99 	vldr	s13, [pc, #612]	@ 800fcb0 <__ieee754_powf+0x3d4>
 800fa4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800fa50:	eddf 7a98 	vldr	s15, [pc, #608]	@ 800fcb4 <__ieee754_powf+0x3d8>
 800fa54:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800fa58:	ed9f 7a97 	vldr	s14, [pc, #604]	@ 800fcb8 <__ieee754_powf+0x3dc>
 800fa5c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800fa60:	eeb0 7a67 	vmov.f32	s14, s15
 800fa64:	eea0 7a26 	vfma.f32	s14, s0, s13
 800fa68:	ee17 3a10 	vmov	r3, s14
 800fa6c:	f36f 030b 	bfc	r3, #0, #12
 800fa70:	ee07 3a10 	vmov	s14, r3
 800fa74:	eeb0 6a47 	vmov.f32	s12, s14
 800fa78:	eea0 6a66 	vfms.f32	s12, s0, s13
 800fa7c:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800fa80:	3d01      	subs	r5, #1
 800fa82:	4305      	orrs	r5, r0
 800fa84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fa88:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800fa8c:	f36f 040b 	bfc	r4, #0, #12
 800fa90:	bf18      	it	ne
 800fa92:	eeb0 8a66 	vmovne.f32	s16, s13
 800fa96:	ee06 4a90 	vmov	s13, r4
 800fa9a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800fa9e:	ee38 6ae6 	vsub.f32	s12, s17, s13
 800faa2:	ee67 7a26 	vmul.f32	s15, s14, s13
 800faa6:	eee6 0a07 	vfma.f32	s1, s12, s14
 800faaa:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800faae:	ee17 1a10 	vmov	r1, s14
 800fab2:	2900      	cmp	r1, #0
 800fab4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fab8:	f340 80dd 	ble.w	800fc76 <__ieee754_powf+0x39a>
 800fabc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800fac0:	f240 80ca 	bls.w	800fc58 <__ieee754_powf+0x37c>
 800fac4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800facc:	bf4c      	ite	mi
 800face:	2001      	movmi	r0, #1
 800fad0:	2000      	movpl	r0, #0
 800fad2:	e797      	b.n	800fa04 <__ieee754_powf+0x128>
 800fad4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800fad8:	bf01      	itttt	eq
 800fada:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800fcbc <__ieee754_powf+0x3e0>
 800fade:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800fae2:	f06f 0317 	mvneq.w	r3, #23
 800fae6:	ee17 7a90 	vmoveq	r7, s15
 800faea:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800faee:	bf18      	it	ne
 800faf0:	2300      	movne	r3, #0
 800faf2:	3a7f      	subs	r2, #127	@ 0x7f
 800faf4:	441a      	add	r2, r3
 800faf6:	4b72      	ldr	r3, [pc, #456]	@ (800fcc0 <__ieee754_powf+0x3e4>)
 800faf8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800fafc:	429f      	cmp	r7, r3
 800fafe:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800fb02:	dd06      	ble.n	800fb12 <__ieee754_powf+0x236>
 800fb04:	4b6f      	ldr	r3, [pc, #444]	@ (800fcc4 <__ieee754_powf+0x3e8>)
 800fb06:	429f      	cmp	r7, r3
 800fb08:	f340 80a4 	ble.w	800fc54 <__ieee754_powf+0x378>
 800fb0c:	3201      	adds	r2, #1
 800fb0e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800fb12:	2600      	movs	r6, #0
 800fb14:	4b6c      	ldr	r3, [pc, #432]	@ (800fcc8 <__ieee754_powf+0x3ec>)
 800fb16:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800fb1a:	ee07 1a10 	vmov	s14, r1
 800fb1e:	edd3 5a00 	vldr	s11, [r3]
 800fb22:	4b6a      	ldr	r3, [pc, #424]	@ (800fccc <__ieee754_powf+0x3f0>)
 800fb24:	ee75 7a87 	vadd.f32	s15, s11, s14
 800fb28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800fb2c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800fb30:	1049      	asrs	r1, r1, #1
 800fb32:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800fb36:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800fb3a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800fb3e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800fb42:	ee07 1a90 	vmov	s15, r1
 800fb46:	ee26 5a24 	vmul.f32	s10, s12, s9
 800fb4a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800fb4e:	ee15 7a10 	vmov	r7, s10
 800fb52:	401f      	ands	r7, r3
 800fb54:	ee06 7a90 	vmov	s13, r7
 800fb58:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800fb5c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800fb60:	ee65 7a05 	vmul.f32	s15, s10, s10
 800fb64:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800fb68:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800fcd0 <__ieee754_powf+0x3f4>
 800fb6c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800fcd4 <__ieee754_powf+0x3f8>
 800fb70:	eee7 5a87 	vfma.f32	s11, s15, s14
 800fb74:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800fcd8 <__ieee754_powf+0x3fc>
 800fb78:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fb7c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800fcac <__ieee754_powf+0x3d0>
 800fb80:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fb84:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800fcdc <__ieee754_powf+0x400>
 800fb88:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800fb8c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800fce0 <__ieee754_powf+0x404>
 800fb90:	ee26 6a24 	vmul.f32	s12, s12, s9
 800fb94:	eee7 5a27 	vfma.f32	s11, s14, s15
 800fb98:	ee35 7a26 	vadd.f32	s14, s10, s13
 800fb9c:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800fba0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800fba4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800fba8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800fbac:	eef0 5a67 	vmov.f32	s11, s15
 800fbb0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800fbb4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800fbb8:	ee15 1a90 	vmov	r1, s11
 800fbbc:	4019      	ands	r1, r3
 800fbbe:	ee05 1a90 	vmov	s11, r1
 800fbc2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800fbc6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800fbca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800fbce:	ee67 7a85 	vmul.f32	s15, s15, s10
 800fbd2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fbd6:	eeb0 6a67 	vmov.f32	s12, s15
 800fbda:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800fbde:	ee16 1a10 	vmov	r1, s12
 800fbe2:	4019      	ands	r1, r3
 800fbe4:	ee06 1a10 	vmov	s12, r1
 800fbe8:	eeb0 7a46 	vmov.f32	s14, s12
 800fbec:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800fbf0:	493c      	ldr	r1, [pc, #240]	@ (800fce4 <__ieee754_powf+0x408>)
 800fbf2:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800fbf6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fbfa:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800fce8 <__ieee754_powf+0x40c>
 800fbfe:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800fcec <__ieee754_powf+0x410>
 800fc02:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fc06:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800fcf0 <__ieee754_powf+0x414>
 800fc0a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800fc0e:	ed91 7a00 	vldr	s14, [r1]
 800fc12:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fc16:	ee07 2a10 	vmov	s14, r2
 800fc1a:	4a36      	ldr	r2, [pc, #216]	@ (800fcf4 <__ieee754_powf+0x418>)
 800fc1c:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800fc20:	eeb0 7a67 	vmov.f32	s14, s15
 800fc24:	eea6 7a25 	vfma.f32	s14, s12, s11
 800fc28:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800fc2c:	ed92 5a00 	vldr	s10, [r2]
 800fc30:	ee37 7a05 	vadd.f32	s14, s14, s10
 800fc34:	ee37 7a26 	vadd.f32	s14, s14, s13
 800fc38:	ee17 2a10 	vmov	r2, s14
 800fc3c:	401a      	ands	r2, r3
 800fc3e:	ee07 2a10 	vmov	s14, r2
 800fc42:	ee77 6a66 	vsub.f32	s13, s14, s13
 800fc46:	ee76 6ac5 	vsub.f32	s13, s13, s10
 800fc4a:	eee6 6a65 	vfms.f32	s13, s12, s11
 800fc4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fc52:	e715      	b.n	800fa80 <__ieee754_powf+0x1a4>
 800fc54:	2601      	movs	r6, #1
 800fc56:	e75d      	b.n	800fb14 <__ieee754_powf+0x238>
 800fc58:	d152      	bne.n	800fd00 <__ieee754_powf+0x424>
 800fc5a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800fcf8 <__ieee754_powf+0x41c>
 800fc5e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc62:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800fc66:	eef4 6ac7 	vcmpe.f32	s13, s14
 800fc6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc6e:	f73f af29 	bgt.w	800fac4 <__ieee754_powf+0x1e8>
 800fc72:	2386      	movs	r3, #134	@ 0x86
 800fc74:	e048      	b.n	800fd08 <__ieee754_powf+0x42c>
 800fc76:	4a21      	ldr	r2, [pc, #132]	@ (800fcfc <__ieee754_powf+0x420>)
 800fc78:	4293      	cmp	r3, r2
 800fc7a:	d907      	bls.n	800fc8c <__ieee754_powf+0x3b0>
 800fc7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800fc80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc84:	bf4c      	ite	mi
 800fc86:	2001      	movmi	r0, #1
 800fc88:	2000      	movpl	r0, #0
 800fc8a:	e6c7      	b.n	800fa1c <__ieee754_powf+0x140>
 800fc8c:	d138      	bne.n	800fd00 <__ieee754_powf+0x424>
 800fc8e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800fc92:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800fc96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fc9a:	dbea      	blt.n	800fc72 <__ieee754_powf+0x396>
 800fc9c:	e7ee      	b.n	800fc7c <__ieee754_powf+0x3a0>
 800fc9e:	bf00      	nop
 800fca0:	00000000 	.word	0x00000000
 800fca4:	3f7ffff3 	.word	0x3f7ffff3
 800fca8:	3f800007 	.word	0x3f800007
 800fcac:	3eaaaaab 	.word	0x3eaaaaab
 800fcb0:	3fb8aa00 	.word	0x3fb8aa00
 800fcb4:	3fb8aa3b 	.word	0x3fb8aa3b
 800fcb8:	36eca570 	.word	0x36eca570
 800fcbc:	4b800000 	.word	0x4b800000
 800fcc0:	001cc471 	.word	0x001cc471
 800fcc4:	005db3d6 	.word	0x005db3d6
 800fcc8:	08011490 	.word	0x08011490
 800fccc:	fffff000 	.word	0xfffff000
 800fcd0:	3e6c3255 	.word	0x3e6c3255
 800fcd4:	3e53f142 	.word	0x3e53f142
 800fcd8:	3e8ba305 	.word	0x3e8ba305
 800fcdc:	3edb6db7 	.word	0x3edb6db7
 800fce0:	3f19999a 	.word	0x3f19999a
 800fce4:	08011480 	.word	0x08011480
 800fce8:	3f76384f 	.word	0x3f76384f
 800fcec:	3f763800 	.word	0x3f763800
 800fcf0:	369dc3a0 	.word	0x369dc3a0
 800fcf4:	08011488 	.word	0x08011488
 800fcf8:	3338aa3c 	.word	0x3338aa3c
 800fcfc:	43160000 	.word	0x43160000
 800fd00:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800fd04:	d96f      	bls.n	800fde6 <__ieee754_powf+0x50a>
 800fd06:	15db      	asrs	r3, r3, #23
 800fd08:	3b7e      	subs	r3, #126	@ 0x7e
 800fd0a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800fd0e:	4118      	asrs	r0, r3
 800fd10:	4408      	add	r0, r1
 800fd12:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800fd16:	4a4e      	ldr	r2, [pc, #312]	@ (800fe50 <__ieee754_powf+0x574>)
 800fd18:	3b7f      	subs	r3, #127	@ 0x7f
 800fd1a:	411a      	asrs	r2, r3
 800fd1c:	4002      	ands	r2, r0
 800fd1e:	ee07 2a10 	vmov	s14, r2
 800fd22:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800fd26:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800fd2a:	f1c3 0317 	rsb	r3, r3, #23
 800fd2e:	4118      	asrs	r0, r3
 800fd30:	2900      	cmp	r1, #0
 800fd32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fd36:	bfb8      	it	lt
 800fd38:	4240      	neglt	r0, r0
 800fd3a:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800fd3e:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 800fe54 <__ieee754_powf+0x578>
 800fd42:	ed9f 6a45 	vldr	s12, [pc, #276]	@ 800fe58 <__ieee754_powf+0x57c>
 800fd46:	ee16 3a90 	vmov	r3, s13
 800fd4a:	f36f 030b 	bfc	r3, #0, #12
 800fd4e:	ee06 3a90 	vmov	s13, r3
 800fd52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fd56:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fd5a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800fd5e:	eddf 7a3f 	vldr	s15, [pc, #252]	@ 800fe5c <__ieee754_powf+0x580>
 800fd62:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800fd66:	eee0 7a87 	vfma.f32	s15, s1, s14
 800fd6a:	eeb0 7a67 	vmov.f32	s14, s15
 800fd6e:	eea6 7a86 	vfma.f32	s14, s13, s12
 800fd72:	eef0 5a47 	vmov.f32	s11, s14
 800fd76:	eee6 5ac6 	vfms.f32	s11, s13, s12
 800fd7a:	ee67 6a07 	vmul.f32	s13, s14, s14
 800fd7e:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800fd82:	ed9f 6a37 	vldr	s12, [pc, #220]	@ 800fe60 <__ieee754_powf+0x584>
 800fd86:	eddf 5a37 	vldr	s11, [pc, #220]	@ 800fe64 <__ieee754_powf+0x588>
 800fd8a:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800fd8e:	eddf 5a36 	vldr	s11, [pc, #216]	@ 800fe68 <__ieee754_powf+0x58c>
 800fd92:	eee6 5a26 	vfma.f32	s11, s12, s13
 800fd96:	ed9f 6a35 	vldr	s12, [pc, #212]	@ 800fe6c <__ieee754_powf+0x590>
 800fd9a:	eea5 6aa6 	vfma.f32	s12, s11, s13
 800fd9e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800fe70 <__ieee754_powf+0x594>
 800fda2:	eee6 5a26 	vfma.f32	s11, s12, s13
 800fda6:	eeb0 6a47 	vmov.f32	s12, s14
 800fdaa:	eea5 6ae6 	vfms.f32	s12, s11, s13
 800fdae:	eef0 6a00 	vmov.f32	s13, #0	@ 0x40000000  2.0
 800fdb2:	ee67 5a06 	vmul.f32	s11, s14, s12
 800fdb6:	ee36 6a66 	vsub.f32	s12, s12, s13
 800fdba:	eee7 7a27 	vfma.f32	s15, s14, s15
 800fdbe:	eec5 6a86 	vdiv.f32	s13, s11, s12
 800fdc2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800fdc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fdca:	ee30 0a67 	vsub.f32	s0, s0, s15
 800fdce:	ee10 3a10 	vmov	r3, s0
 800fdd2:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800fdd6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800fdda:	da06      	bge.n	800fdea <__ieee754_powf+0x50e>
 800fddc:	f000 fa58 	bl	8010290 <scalbnf>
 800fde0:	ee20 0a08 	vmul.f32	s0, s0, s16
 800fde4:	e592      	b.n	800f90c <__ieee754_powf+0x30>
 800fde6:	2000      	movs	r0, #0
 800fde8:	e7a7      	b.n	800fd3a <__ieee754_powf+0x45e>
 800fdea:	ee00 3a10 	vmov	s0, r3
 800fdee:	e7f7      	b.n	800fde0 <__ieee754_powf+0x504>
 800fdf0:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800fdf4:	e58a      	b.n	800f90c <__ieee754_powf+0x30>
 800fdf6:	ed9f 0a1f 	vldr	s0, [pc, #124]	@ 800fe74 <__ieee754_powf+0x598>
 800fdfa:	e587      	b.n	800f90c <__ieee754_powf+0x30>
 800fdfc:	eeb0 0a48 	vmov.f32	s0, s16
 800fe00:	e584      	b.n	800f90c <__ieee754_powf+0x30>
 800fe02:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800fe06:	f43f adbb 	beq.w	800f980 <__ieee754_powf+0xa4>
 800fe0a:	2502      	movs	r5, #2
 800fe0c:	eeb0 0a48 	vmov.f32	s0, s16
 800fe10:	f000 fa36 	bl	8010280 <fabsf>
 800fe14:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800fe18:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800fe1c:	4647      	mov	r7, r8
 800fe1e:	d003      	beq.n	800fe28 <__ieee754_powf+0x54c>
 800fe20:	f1b8 0f00 	cmp.w	r8, #0
 800fe24:	f47f addb 	bne.w	800f9de <__ieee754_powf+0x102>
 800fe28:	2c00      	cmp	r4, #0
 800fe2a:	bfbc      	itt	lt
 800fe2c:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800fe30:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800fe34:	2e00      	cmp	r6, #0
 800fe36:	f6bf ad69 	bge.w	800f90c <__ieee754_powf+0x30>
 800fe3a:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800fe3e:	ea58 0805 	orrs.w	r8, r8, r5
 800fe42:	f47f adc7 	bne.w	800f9d4 <__ieee754_powf+0xf8>
 800fe46:	ee70 7a40 	vsub.f32	s15, s0, s0
 800fe4a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800fe4e:	e55d      	b.n	800f90c <__ieee754_powf+0x30>
 800fe50:	ff800000 	.word	0xff800000
 800fe54:	3f317218 	.word	0x3f317218
 800fe58:	3f317200 	.word	0x3f317200
 800fe5c:	35bfbe8c 	.word	0x35bfbe8c
 800fe60:	b5ddea0e 	.word	0xb5ddea0e
 800fe64:	3331bb4c 	.word	0x3331bb4c
 800fe68:	388ab355 	.word	0x388ab355
 800fe6c:	bb360b61 	.word	0xbb360b61
 800fe70:	3e2aaaab 	.word	0x3e2aaaab
 800fe74:	00000000 	.word	0x00000000

0800fe78 <__ieee754_rem_pio2f>:
 800fe78:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe7a:	ee10 6a10 	vmov	r6, s0
 800fe7e:	4b88      	ldr	r3, [pc, #544]	@ (80100a0 <__ieee754_rem_pio2f+0x228>)
 800fe80:	f026 4500 	bic.w	r5, r6, #2147483648	@ 0x80000000
 800fe84:	429d      	cmp	r5, r3
 800fe86:	b087      	sub	sp, #28
 800fe88:	4604      	mov	r4, r0
 800fe8a:	d805      	bhi.n	800fe98 <__ieee754_rem_pio2f+0x20>
 800fe8c:	2300      	movs	r3, #0
 800fe8e:	ed80 0a00 	vstr	s0, [r0]
 800fe92:	6043      	str	r3, [r0, #4]
 800fe94:	2000      	movs	r0, #0
 800fe96:	e022      	b.n	800fede <__ieee754_rem_pio2f+0x66>
 800fe98:	4b82      	ldr	r3, [pc, #520]	@ (80100a4 <__ieee754_rem_pio2f+0x22c>)
 800fe9a:	429d      	cmp	r5, r3
 800fe9c:	d83a      	bhi.n	800ff14 <__ieee754_rem_pio2f+0x9c>
 800fe9e:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800fea2:	2e00      	cmp	r6, #0
 800fea4:	ed9f 7a80 	vldr	s14, [pc, #512]	@ 80100a8 <__ieee754_rem_pio2f+0x230>
 800fea8:	4a80      	ldr	r2, [pc, #512]	@ (80100ac <__ieee754_rem_pio2f+0x234>)
 800feaa:	f023 030f 	bic.w	r3, r3, #15
 800feae:	dd18      	ble.n	800fee2 <__ieee754_rem_pio2f+0x6a>
 800feb0:	4293      	cmp	r3, r2
 800feb2:	ee70 7a47 	vsub.f32	s15, s0, s14
 800feb6:	bf09      	itett	eq
 800feb8:	ed9f 7a7d 	vldreq	s14, [pc, #500]	@ 80100b0 <__ieee754_rem_pio2f+0x238>
 800febc:	eddf 6a7d 	vldrne	s13, [pc, #500]	@ 80100b4 <__ieee754_rem_pio2f+0x23c>
 800fec0:	eddf 6a7d 	vldreq	s13, [pc, #500]	@ 80100b8 <__ieee754_rem_pio2f+0x240>
 800fec4:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800fec8:	ee37 7ae6 	vsub.f32	s14, s15, s13
 800fecc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fed0:	ed80 7a00 	vstr	s14, [r0]
 800fed4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800fed8:	edc0 7a01 	vstr	s15, [r0, #4]
 800fedc:	2001      	movs	r0, #1
 800fede:	b007      	add	sp, #28
 800fee0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fee2:	4293      	cmp	r3, r2
 800fee4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800fee8:	bf09      	itett	eq
 800feea:	ed9f 7a71 	vldreq	s14, [pc, #452]	@ 80100b0 <__ieee754_rem_pio2f+0x238>
 800feee:	eddf 6a71 	vldrne	s13, [pc, #452]	@ 80100b4 <__ieee754_rem_pio2f+0x23c>
 800fef2:	eddf 6a71 	vldreq	s13, [pc, #452]	@ 80100b8 <__ieee754_rem_pio2f+0x240>
 800fef6:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800fefa:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800fefe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ff02:	ed80 7a00 	vstr	s14, [r0]
 800ff06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ff0a:	edc0 7a01 	vstr	s15, [r0, #4]
 800ff0e:	f04f 30ff 	mov.w	r0, #4294967295
 800ff12:	e7e4      	b.n	800fede <__ieee754_rem_pio2f+0x66>
 800ff14:	4b69      	ldr	r3, [pc, #420]	@ (80100bc <__ieee754_rem_pio2f+0x244>)
 800ff16:	429d      	cmp	r5, r3
 800ff18:	d873      	bhi.n	8010002 <__ieee754_rem_pio2f+0x18a>
 800ff1a:	f000 f9b1 	bl	8010280 <fabsf>
 800ff1e:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80100c0 <__ieee754_rem_pio2f+0x248>
 800ff22:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800ff26:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ff2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ff2e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ff32:	ee17 0a90 	vmov	r0, s15
 800ff36:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80100a8 <__ieee754_rem_pio2f+0x230>
 800ff3a:	eea7 0a67 	vfms.f32	s0, s14, s15
 800ff3e:	281f      	cmp	r0, #31
 800ff40:	eddf 7a5c 	vldr	s15, [pc, #368]	@ 80100b4 <__ieee754_rem_pio2f+0x23c>
 800ff44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ff48:	eeb1 6a47 	vneg.f32	s12, s14
 800ff4c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800ff50:	ee16 1a90 	vmov	r1, s13
 800ff54:	dc09      	bgt.n	800ff6a <__ieee754_rem_pio2f+0xf2>
 800ff56:	4a5b      	ldr	r2, [pc, #364]	@ (80100c4 <__ieee754_rem_pio2f+0x24c>)
 800ff58:	1e47      	subs	r7, r0, #1
 800ff5a:	f026 4300 	bic.w	r3, r6, #2147483648	@ 0x80000000
 800ff5e:	f852 2027 	ldr.w	r2, [r2, r7, lsl #2]
 800ff62:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ff66:	4293      	cmp	r3, r2
 800ff68:	d107      	bne.n	800ff7a <__ieee754_rem_pio2f+0x102>
 800ff6a:	f3c1 52c7 	ubfx	r2, r1, #23, #8
 800ff6e:	ebc2 52d5 	rsb	r2, r2, r5, lsr #23
 800ff72:	2a08      	cmp	r2, #8
 800ff74:	ea4f 53e5 	mov.w	r3, r5, asr #23
 800ff78:	dc14      	bgt.n	800ffa4 <__ieee754_rem_pio2f+0x12c>
 800ff7a:	6021      	str	r1, [r4, #0]
 800ff7c:	ed94 7a00 	vldr	s14, [r4]
 800ff80:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ff84:	2e00      	cmp	r6, #0
 800ff86:	ee30 0a67 	vsub.f32	s0, s0, s15
 800ff8a:	ed84 0a01 	vstr	s0, [r4, #4]
 800ff8e:	daa6      	bge.n	800fede <__ieee754_rem_pio2f+0x66>
 800ff90:	eeb1 7a47 	vneg.f32	s14, s14
 800ff94:	eeb1 0a40 	vneg.f32	s0, s0
 800ff98:	ed84 7a00 	vstr	s14, [r4]
 800ff9c:	ed84 0a01 	vstr	s0, [r4, #4]
 800ffa0:	4240      	negs	r0, r0
 800ffa2:	e79c      	b.n	800fede <__ieee754_rem_pio2f+0x66>
 800ffa4:	eddf 5a42 	vldr	s11, [pc, #264]	@ 80100b0 <__ieee754_rem_pio2f+0x238>
 800ffa8:	eef0 6a40 	vmov.f32	s13, s0
 800ffac:	eee6 6a25 	vfma.f32	s13, s12, s11
 800ffb0:	ee70 7a66 	vsub.f32	s15, s0, s13
 800ffb4:	eee6 7a25 	vfma.f32	s15, s12, s11
 800ffb8:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80100b8 <__ieee754_rem_pio2f+0x240>
 800ffbc:	eed7 7a25 	vfnms.f32	s15, s14, s11
 800ffc0:	ee76 5ae7 	vsub.f32	s11, s13, s15
 800ffc4:	ee15 2a90 	vmov	r2, s11
 800ffc8:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 800ffcc:	1a5b      	subs	r3, r3, r1
 800ffce:	2b19      	cmp	r3, #25
 800ffd0:	dc04      	bgt.n	800ffdc <__ieee754_rem_pio2f+0x164>
 800ffd2:	edc4 5a00 	vstr	s11, [r4]
 800ffd6:	eeb0 0a66 	vmov.f32	s0, s13
 800ffda:	e7cf      	b.n	800ff7c <__ieee754_rem_pio2f+0x104>
 800ffdc:	eddf 5a3a 	vldr	s11, [pc, #232]	@ 80100c8 <__ieee754_rem_pio2f+0x250>
 800ffe0:	eeb0 0a66 	vmov.f32	s0, s13
 800ffe4:	eea6 0a25 	vfma.f32	s0, s12, s11
 800ffe8:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800ffec:	eddf 6a37 	vldr	s13, [pc, #220]	@ 80100cc <__ieee754_rem_pio2f+0x254>
 800fff0:	eee6 7a25 	vfma.f32	s15, s12, s11
 800fff4:	eed7 7a26 	vfnms.f32	s15, s14, s13
 800fff8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800fffc:	ed84 7a00 	vstr	s14, [r4]
 8010000:	e7bc      	b.n	800ff7c <__ieee754_rem_pio2f+0x104>
 8010002:	f1b5 4fff 	cmp.w	r5, #2139095040	@ 0x7f800000
 8010006:	d306      	bcc.n	8010016 <__ieee754_rem_pio2f+0x19e>
 8010008:	ee70 7a40 	vsub.f32	s15, s0, s0
 801000c:	edc0 7a01 	vstr	s15, [r0, #4]
 8010010:	edc0 7a00 	vstr	s15, [r0]
 8010014:	e73e      	b.n	800fe94 <__ieee754_rem_pio2f+0x1c>
 8010016:	15ea      	asrs	r2, r5, #23
 8010018:	3a86      	subs	r2, #134	@ 0x86
 801001a:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 801001e:	ee07 3a90 	vmov	s15, r3
 8010022:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010026:	eddf 6a2a 	vldr	s13, [pc, #168]	@ 80100d0 <__ieee754_rem_pio2f+0x258>
 801002a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801002e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010032:	ed8d 7a03 	vstr	s14, [sp, #12]
 8010036:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801003a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801003e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010042:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010046:	ed8d 7a04 	vstr	s14, [sp, #16]
 801004a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 801004e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010056:	edcd 7a05 	vstr	s15, [sp, #20]
 801005a:	d11e      	bne.n	801009a <__ieee754_rem_pio2f+0x222>
 801005c:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8010060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010064:	bf0c      	ite	eq
 8010066:	2301      	moveq	r3, #1
 8010068:	2302      	movne	r3, #2
 801006a:	491a      	ldr	r1, [pc, #104]	@ (80100d4 <__ieee754_rem_pio2f+0x25c>)
 801006c:	9101      	str	r1, [sp, #4]
 801006e:	2102      	movs	r1, #2
 8010070:	9100      	str	r1, [sp, #0]
 8010072:	a803      	add	r0, sp, #12
 8010074:	4621      	mov	r1, r4
 8010076:	f000 f997 	bl	80103a8 <__kernel_rem_pio2f>
 801007a:	2e00      	cmp	r6, #0
 801007c:	f6bf af2f 	bge.w	800fede <__ieee754_rem_pio2f+0x66>
 8010080:	edd4 7a00 	vldr	s15, [r4]
 8010084:	eef1 7a67 	vneg.f32	s15, s15
 8010088:	edc4 7a00 	vstr	s15, [r4]
 801008c:	edd4 7a01 	vldr	s15, [r4, #4]
 8010090:	eef1 7a67 	vneg.f32	s15, s15
 8010094:	edc4 7a01 	vstr	s15, [r4, #4]
 8010098:	e782      	b.n	800ffa0 <__ieee754_rem_pio2f+0x128>
 801009a:	2303      	movs	r3, #3
 801009c:	e7e5      	b.n	801006a <__ieee754_rem_pio2f+0x1f2>
 801009e:	bf00      	nop
 80100a0:	3f490fd8 	.word	0x3f490fd8
 80100a4:	4016cbe3 	.word	0x4016cbe3
 80100a8:	3fc90f80 	.word	0x3fc90f80
 80100ac:	3fc90fd0 	.word	0x3fc90fd0
 80100b0:	37354400 	.word	0x37354400
 80100b4:	37354443 	.word	0x37354443
 80100b8:	2e85a308 	.word	0x2e85a308
 80100bc:	43490f80 	.word	0x43490f80
 80100c0:	3f22f984 	.word	0x3f22f984
 80100c4:	08011498 	.word	0x08011498
 80100c8:	2e85a300 	.word	0x2e85a300
 80100cc:	248d3132 	.word	0x248d3132
 80100d0:	43800000 	.word	0x43800000
 80100d4:	08011518 	.word	0x08011518

080100d8 <atanf>:
 80100d8:	b538      	push	{r3, r4, r5, lr}
 80100da:	ee10 5a10 	vmov	r5, s0
 80100de:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 80100e2:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 80100e6:	eef0 7a40 	vmov.f32	s15, s0
 80100ea:	d310      	bcc.n	801010e <atanf+0x36>
 80100ec:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 80100f0:	d904      	bls.n	80100fc <atanf+0x24>
 80100f2:	ee70 7a00 	vadd.f32	s15, s0, s0
 80100f6:	eeb0 0a67 	vmov.f32	s0, s15
 80100fa:	bd38      	pop	{r3, r4, r5, pc}
 80100fc:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8010234 <atanf+0x15c>
 8010100:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010238 <atanf+0x160>
 8010104:	2d00      	cmp	r5, #0
 8010106:	bfc8      	it	gt
 8010108:	eef0 7a47 	vmovgt.f32	s15, s14
 801010c:	e7f3      	b.n	80100f6 <atanf+0x1e>
 801010e:	4b4b      	ldr	r3, [pc, #300]	@ (801023c <atanf+0x164>)
 8010110:	429c      	cmp	r4, r3
 8010112:	d810      	bhi.n	8010136 <atanf+0x5e>
 8010114:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8010118:	d20a      	bcs.n	8010130 <atanf+0x58>
 801011a:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010240 <atanf+0x168>
 801011e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8010122:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010126:	eeb4 7ae6 	vcmpe.f32	s14, s13
 801012a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801012e:	dce2      	bgt.n	80100f6 <atanf+0x1e>
 8010130:	f04f 33ff 	mov.w	r3, #4294967295
 8010134:	e013      	b.n	801015e <atanf+0x86>
 8010136:	f000 f8a3 	bl	8010280 <fabsf>
 801013a:	4b42      	ldr	r3, [pc, #264]	@ (8010244 <atanf+0x16c>)
 801013c:	429c      	cmp	r4, r3
 801013e:	d84f      	bhi.n	80101e0 <atanf+0x108>
 8010140:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8010144:	429c      	cmp	r4, r3
 8010146:	d841      	bhi.n	80101cc <atanf+0xf4>
 8010148:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 801014c:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010150:	eea0 7a27 	vfma.f32	s14, s0, s15
 8010154:	2300      	movs	r3, #0
 8010156:	ee30 0a27 	vadd.f32	s0, s0, s15
 801015a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801015e:	1c5a      	adds	r2, r3, #1
 8010160:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8010164:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010248 <atanf+0x170>
 8010168:	eddf 5a38 	vldr	s11, [pc, #224]	@ 801024c <atanf+0x174>
 801016c:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010250 <atanf+0x178>
 8010170:	ee66 6a06 	vmul.f32	s13, s12, s12
 8010174:	eee6 5a87 	vfma.f32	s11, s13, s14
 8010178:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 8010254 <atanf+0x17c>
 801017c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010180:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010258 <atanf+0x180>
 8010184:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010188:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 801025c <atanf+0x184>
 801018c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8010190:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010260 <atanf+0x188>
 8010194:	eee7 5a26 	vfma.f32	s11, s14, s13
 8010198:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 8010264 <atanf+0x18c>
 801019c:	eea6 5a87 	vfma.f32	s10, s13, s14
 80101a0:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010268 <atanf+0x190>
 80101a4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80101a8:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 801026c <atanf+0x194>
 80101ac:	eea7 5a26 	vfma.f32	s10, s14, s13
 80101b0:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8010270 <atanf+0x198>
 80101b4:	eea5 7a26 	vfma.f32	s14, s10, s13
 80101b8:	ee27 7a26 	vmul.f32	s14, s14, s13
 80101bc:	eea5 7a86 	vfma.f32	s14, s11, s12
 80101c0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80101c4:	d121      	bne.n	801020a <atanf+0x132>
 80101c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80101ca:	e794      	b.n	80100f6 <atanf+0x1e>
 80101cc:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80101d0:	ee30 7a67 	vsub.f32	s14, s0, s15
 80101d4:	ee30 0a27 	vadd.f32	s0, s0, s15
 80101d8:	2301      	movs	r3, #1
 80101da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80101de:	e7be      	b.n	801015e <atanf+0x86>
 80101e0:	4b24      	ldr	r3, [pc, #144]	@ (8010274 <atanf+0x19c>)
 80101e2:	429c      	cmp	r4, r3
 80101e4:	d80b      	bhi.n	80101fe <atanf+0x126>
 80101e6:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 80101ea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80101ee:	eea0 7a27 	vfma.f32	s14, s0, s15
 80101f2:	2302      	movs	r3, #2
 80101f4:	ee70 6a67 	vsub.f32	s13, s0, s15
 80101f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80101fc:	e7af      	b.n	801015e <atanf+0x86>
 80101fe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8010202:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8010206:	2303      	movs	r3, #3
 8010208:	e7a9      	b.n	801015e <atanf+0x86>
 801020a:	4a1b      	ldr	r2, [pc, #108]	@ (8010278 <atanf+0x1a0>)
 801020c:	491b      	ldr	r1, [pc, #108]	@ (801027c <atanf+0x1a4>)
 801020e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8010212:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8010216:	edd3 6a00 	vldr	s13, [r3]
 801021a:	ee37 7a66 	vsub.f32	s14, s14, s13
 801021e:	2d00      	cmp	r5, #0
 8010220:	ee37 7a67 	vsub.f32	s14, s14, s15
 8010224:	edd2 7a00 	vldr	s15, [r2]
 8010228:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801022c:	bfb8      	it	lt
 801022e:	eef1 7a67 	vneglt.f32	s15, s15
 8010232:	e760      	b.n	80100f6 <atanf+0x1e>
 8010234:	bfc90fdb 	.word	0xbfc90fdb
 8010238:	3fc90fdb 	.word	0x3fc90fdb
 801023c:	3edfffff 	.word	0x3edfffff
 8010240:	7149f2ca 	.word	0x7149f2ca
 8010244:	3f97ffff 	.word	0x3f97ffff
 8010248:	3c8569d7 	.word	0x3c8569d7
 801024c:	3d4bda59 	.word	0x3d4bda59
 8010250:	bd6ef16b 	.word	0xbd6ef16b
 8010254:	3d886b35 	.word	0x3d886b35
 8010258:	3dba2e6e 	.word	0x3dba2e6e
 801025c:	3e124925 	.word	0x3e124925
 8010260:	3eaaaaab 	.word	0x3eaaaaab
 8010264:	bd15a221 	.word	0xbd15a221
 8010268:	bd9d8795 	.word	0xbd9d8795
 801026c:	bde38e38 	.word	0xbde38e38
 8010270:	be4ccccd 	.word	0xbe4ccccd
 8010274:	401bffff 	.word	0x401bffff
 8010278:	08011840 	.word	0x08011840
 801027c:	08011830 	.word	0x08011830

08010280 <fabsf>:
 8010280:	ee10 3a10 	vmov	r3, s0
 8010284:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8010288:	ee00 3a10 	vmov	s0, r3
 801028c:	4770      	bx	lr
	...

08010290 <scalbnf>:
 8010290:	ee10 3a10 	vmov	r3, s0
 8010294:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 8010298:	d02b      	beq.n	80102f2 <scalbnf+0x62>
 801029a:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 801029e:	d302      	bcc.n	80102a6 <scalbnf+0x16>
 80102a0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80102a4:	4770      	bx	lr
 80102a6:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 80102aa:	d123      	bne.n	80102f4 <scalbnf+0x64>
 80102ac:	4b24      	ldr	r3, [pc, #144]	@ (8010340 <scalbnf+0xb0>)
 80102ae:	eddf 7a25 	vldr	s15, [pc, #148]	@ 8010344 <scalbnf+0xb4>
 80102b2:	4298      	cmp	r0, r3
 80102b4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80102b8:	db17      	blt.n	80102ea <scalbnf+0x5a>
 80102ba:	ee10 3a10 	vmov	r3, s0
 80102be:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80102c2:	3a19      	subs	r2, #25
 80102c4:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80102c8:	4288      	cmp	r0, r1
 80102ca:	dd15      	ble.n	80102f8 <scalbnf+0x68>
 80102cc:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 8010348 <scalbnf+0xb8>
 80102d0:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 801034c <scalbnf+0xbc>
 80102d4:	ee10 3a10 	vmov	r3, s0
 80102d8:	eeb0 7a67 	vmov.f32	s14, s15
 80102dc:	2b00      	cmp	r3, #0
 80102de:	bfb8      	it	lt
 80102e0:	eef0 7a66 	vmovlt.f32	s15, s13
 80102e4:	ee27 0a87 	vmul.f32	s0, s15, s14
 80102e8:	4770      	bx	lr
 80102ea:	eddf 7a19 	vldr	s15, [pc, #100]	@ 8010350 <scalbnf+0xc0>
 80102ee:	ee27 0a80 	vmul.f32	s0, s15, s0
 80102f2:	4770      	bx	lr
 80102f4:	0dd2      	lsrs	r2, r2, #23
 80102f6:	e7e5      	b.n	80102c4 <scalbnf+0x34>
 80102f8:	4410      	add	r0, r2
 80102fa:	28fe      	cmp	r0, #254	@ 0xfe
 80102fc:	dce6      	bgt.n	80102cc <scalbnf+0x3c>
 80102fe:	2800      	cmp	r0, #0
 8010300:	dd06      	ble.n	8010310 <scalbnf+0x80>
 8010302:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010306:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801030a:	ee00 3a10 	vmov	s0, r3
 801030e:	4770      	bx	lr
 8010310:	f110 0f16 	cmn.w	r0, #22
 8010314:	da09      	bge.n	801032a <scalbnf+0x9a>
 8010316:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8010350 <scalbnf+0xc0>
 801031a:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8010354 <scalbnf+0xc4>
 801031e:	ee10 3a10 	vmov	r3, s0
 8010322:	eeb0 7a67 	vmov.f32	s14, s15
 8010326:	2b00      	cmp	r3, #0
 8010328:	e7d9      	b.n	80102de <scalbnf+0x4e>
 801032a:	3019      	adds	r0, #25
 801032c:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8010330:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8010334:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8010358 <scalbnf+0xc8>
 8010338:	ee07 3a90 	vmov	s15, r3
 801033c:	e7d7      	b.n	80102ee <scalbnf+0x5e>
 801033e:	bf00      	nop
 8010340:	ffff3cb0 	.word	0xffff3cb0
 8010344:	4c000000 	.word	0x4c000000
 8010348:	7149f2ca 	.word	0x7149f2ca
 801034c:	f149f2ca 	.word	0xf149f2ca
 8010350:	0da24260 	.word	0x0da24260
 8010354:	8da24260 	.word	0x8da24260
 8010358:	33000000 	.word	0x33000000

0801035c <with_errnof>:
 801035c:	b510      	push	{r4, lr}
 801035e:	ed2d 8b02 	vpush	{d8}
 8010362:	eeb0 8a40 	vmov.f32	s16, s0
 8010366:	4604      	mov	r4, r0
 8010368:	f7fc ffd6 	bl	800d318 <__errno>
 801036c:	eeb0 0a48 	vmov.f32	s0, s16
 8010370:	ecbd 8b02 	vpop	{d8}
 8010374:	6004      	str	r4, [r0, #0]
 8010376:	bd10      	pop	{r4, pc}

08010378 <xflowf>:
 8010378:	b130      	cbz	r0, 8010388 <xflowf+0x10>
 801037a:	eef1 7a40 	vneg.f32	s15, s0
 801037e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8010382:	2022      	movs	r0, #34	@ 0x22
 8010384:	f7ff bfea 	b.w	801035c <with_errnof>
 8010388:	eef0 7a40 	vmov.f32	s15, s0
 801038c:	e7f7      	b.n	801037e <xflowf+0x6>
	...

08010390 <__math_uflowf>:
 8010390:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8010398 <__math_uflowf+0x8>
 8010394:	f7ff bff0 	b.w	8010378 <xflowf>
 8010398:	10000000 	.word	0x10000000

0801039c <__math_oflowf>:
 801039c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80103a4 <__math_oflowf+0x8>
 80103a0:	f7ff bfea 	b.w	8010378 <xflowf>
 80103a4:	70000000 	.word	0x70000000

080103a8 <__kernel_rem_pio2f>:
 80103a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80103ac:	ed2d 8b04 	vpush	{d8-d9}
 80103b0:	b0d9      	sub	sp, #356	@ 0x164
 80103b2:	4690      	mov	r8, r2
 80103b4:	9001      	str	r0, [sp, #4]
 80103b6:	4ab6      	ldr	r2, [pc, #728]	@ (8010690 <__kernel_rem_pio2f+0x2e8>)
 80103b8:	9866      	ldr	r0, [sp, #408]	@ 0x198
 80103ba:	f118 0f04 	cmn.w	r8, #4
 80103be:	f852 a020 	ldr.w	sl, [r2, r0, lsl #2]
 80103c2:	460f      	mov	r7, r1
 80103c4:	f103 3bff 	add.w	fp, r3, #4294967295
 80103c8:	db26      	blt.n	8010418 <__kernel_rem_pio2f+0x70>
 80103ca:	f1b8 0203 	subs.w	r2, r8, #3
 80103ce:	bf48      	it	mi
 80103d0:	f108 0204 	addmi.w	r2, r8, #4
 80103d4:	10d2      	asrs	r2, r2, #3
 80103d6:	1c55      	adds	r5, r2, #1
 80103d8:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 80103da:	ed9f 7ab1 	vldr	s14, [pc, #708]	@ 80106a0 <__kernel_rem_pio2f+0x2f8>
 80103de:	00e8      	lsls	r0, r5, #3
 80103e0:	eba2 060b 	sub.w	r6, r2, fp
 80103e4:	9002      	str	r0, [sp, #8]
 80103e6:	eba8 05c5 	sub.w	r5, r8, r5, lsl #3
 80103ea:	eb0a 0c0b 	add.w	ip, sl, fp
 80103ee:	ac1c      	add	r4, sp, #112	@ 0x70
 80103f0:	eb01 0e86 	add.w	lr, r1, r6, lsl #2
 80103f4:	2000      	movs	r0, #0
 80103f6:	4560      	cmp	r0, ip
 80103f8:	dd10      	ble.n	801041c <__kernel_rem_pio2f+0x74>
 80103fa:	a91c      	add	r1, sp, #112	@ 0x70
 80103fc:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8010400:	f50d 7988 	add.w	r9, sp, #272	@ 0x110
 8010404:	2600      	movs	r6, #0
 8010406:	4556      	cmp	r6, sl
 8010408:	dc24      	bgt.n	8010454 <__kernel_rem_pio2f+0xac>
 801040a:	f8dd e004 	ldr.w	lr, [sp, #4]
 801040e:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 80106a0 <__kernel_rem_pio2f+0x2f8>
 8010412:	4684      	mov	ip, r0
 8010414:	2400      	movs	r4, #0
 8010416:	e016      	b.n	8010446 <__kernel_rem_pio2f+0x9e>
 8010418:	2200      	movs	r2, #0
 801041a:	e7dc      	b.n	80103d6 <__kernel_rem_pio2f+0x2e>
 801041c:	42c6      	cmn	r6, r0
 801041e:	bf5d      	ittte	pl
 8010420:	f85e 1020 	ldrpl.w	r1, [lr, r0, lsl #2]
 8010424:	ee07 1a90 	vmovpl	s15, r1
 8010428:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801042c:	eef0 7a47 	vmovmi.f32	s15, s14
 8010430:	ece4 7a01 	vstmia	r4!, {s15}
 8010434:	3001      	adds	r0, #1
 8010436:	e7de      	b.n	80103f6 <__kernel_rem_pio2f+0x4e>
 8010438:	ecfe 6a01 	vldmia	lr!, {s13}
 801043c:	ed3c 7a01 	vldmdb	ip!, {s14}
 8010440:	eee6 7a87 	vfma.f32	s15, s13, s14
 8010444:	3401      	adds	r4, #1
 8010446:	455c      	cmp	r4, fp
 8010448:	ddf6      	ble.n	8010438 <__kernel_rem_pio2f+0x90>
 801044a:	ece9 7a01 	vstmia	r9!, {s15}
 801044e:	3601      	adds	r6, #1
 8010450:	3004      	adds	r0, #4
 8010452:	e7d8      	b.n	8010406 <__kernel_rem_pio2f+0x5e>
 8010454:	a908      	add	r1, sp, #32
 8010456:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 801045a:	9104      	str	r1, [sp, #16]
 801045c:	9967      	ldr	r1, [sp, #412]	@ 0x19c
 801045e:	eddf 8a8f 	vldr	s17, [pc, #572]	@ 801069c <__kernel_rem_pio2f+0x2f4>
 8010462:	ed9f 9a8d 	vldr	s18, [pc, #564]	@ 8010698 <__kernel_rem_pio2f+0x2f0>
 8010466:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801046a:	9203      	str	r2, [sp, #12]
 801046c:	4654      	mov	r4, sl
 801046e:	00a2      	lsls	r2, r4, #2
 8010470:	9205      	str	r2, [sp, #20]
 8010472:	aa58      	add	r2, sp, #352	@ 0x160
 8010474:	eb02 0284 	add.w	r2, r2, r4, lsl #2
 8010478:	ed12 0a14 	vldr	s0, [r2, #-80]	@ 0xffffffb0
 801047c:	a944      	add	r1, sp, #272	@ 0x110
 801047e:	aa08      	add	r2, sp, #32
 8010480:	eb01 0084 	add.w	r0, r1, r4, lsl #2
 8010484:	4694      	mov	ip, r2
 8010486:	4626      	mov	r6, r4
 8010488:	2e00      	cmp	r6, #0
 801048a:	dc4c      	bgt.n	8010526 <__kernel_rem_pio2f+0x17e>
 801048c:	4628      	mov	r0, r5
 801048e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8010492:	f7ff fefd 	bl	8010290 <scalbnf>
 8010496:	eeb0 8a40 	vmov.f32	s16, s0
 801049a:	eeb4 0a00 	vmov.f32	s0, #64	@ 0x3e000000  0.125
 801049e:	ee28 0a00 	vmul.f32	s0, s16, s0
 80104a2:	f000 f9e9 	bl	8010878 <floorf>
 80104a6:	eef2 7a00 	vmov.f32	s15, #32	@ 0x41000000  8.0
 80104aa:	eea0 8a67 	vfms.f32	s16, s0, s15
 80104ae:	2d00      	cmp	r5, #0
 80104b0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80104b4:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80104b8:	ee17 9a90 	vmov	r9, s15
 80104bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80104c0:	ee38 8a67 	vsub.f32	s16, s16, s15
 80104c4:	dd41      	ble.n	801054a <__kernel_rem_pio2f+0x1a2>
 80104c6:	f104 3cff 	add.w	ip, r4, #4294967295
 80104ca:	a908      	add	r1, sp, #32
 80104cc:	f1c5 0e08 	rsb	lr, r5, #8
 80104d0:	f851 602c 	ldr.w	r6, [r1, ip, lsl #2]
 80104d4:	fa46 f00e 	asr.w	r0, r6, lr
 80104d8:	4481      	add	r9, r0
 80104da:	fa00 f00e 	lsl.w	r0, r0, lr
 80104de:	1a36      	subs	r6, r6, r0
 80104e0:	f1c5 0007 	rsb	r0, r5, #7
 80104e4:	f841 602c 	str.w	r6, [r1, ip, lsl #2]
 80104e8:	4106      	asrs	r6, r0
 80104ea:	2e00      	cmp	r6, #0
 80104ec:	dd3c      	ble.n	8010568 <__kernel_rem_pio2f+0x1c0>
 80104ee:	f04f 0e00 	mov.w	lr, #0
 80104f2:	f109 0901 	add.w	r9, r9, #1
 80104f6:	4670      	mov	r0, lr
 80104f8:	4574      	cmp	r4, lr
 80104fa:	dc68      	bgt.n	80105ce <__kernel_rem_pio2f+0x226>
 80104fc:	2d00      	cmp	r5, #0
 80104fe:	dd03      	ble.n	8010508 <__kernel_rem_pio2f+0x160>
 8010500:	2d01      	cmp	r5, #1
 8010502:	d074      	beq.n	80105ee <__kernel_rem_pio2f+0x246>
 8010504:	2d02      	cmp	r5, #2
 8010506:	d07d      	beq.n	8010604 <__kernel_rem_pio2f+0x25c>
 8010508:	2e02      	cmp	r6, #2
 801050a:	d12d      	bne.n	8010568 <__kernel_rem_pio2f+0x1c0>
 801050c:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010510:	ee30 8a48 	vsub.f32	s16, s0, s16
 8010514:	b340      	cbz	r0, 8010568 <__kernel_rem_pio2f+0x1c0>
 8010516:	4628      	mov	r0, r5
 8010518:	9306      	str	r3, [sp, #24]
 801051a:	f7ff feb9 	bl	8010290 <scalbnf>
 801051e:	9b06      	ldr	r3, [sp, #24]
 8010520:	ee38 8a40 	vsub.f32	s16, s16, s0
 8010524:	e020      	b.n	8010568 <__kernel_rem_pio2f+0x1c0>
 8010526:	ee60 7a28 	vmul.f32	s15, s0, s17
 801052a:	3e01      	subs	r6, #1
 801052c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8010530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010534:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8010538:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801053c:	ecac 0a01 	vstmia	ip!, {s0}
 8010540:	ed30 0a01 	vldmdb	r0!, {s0}
 8010544:	ee37 0a80 	vadd.f32	s0, s15, s0
 8010548:	e79e      	b.n	8010488 <__kernel_rem_pio2f+0xe0>
 801054a:	d105      	bne.n	8010558 <__kernel_rem_pio2f+0x1b0>
 801054c:	1e60      	subs	r0, r4, #1
 801054e:	a908      	add	r1, sp, #32
 8010550:	f851 6020 	ldr.w	r6, [r1, r0, lsl #2]
 8010554:	11f6      	asrs	r6, r6, #7
 8010556:	e7c8      	b.n	80104ea <__kernel_rem_pio2f+0x142>
 8010558:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801055c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8010560:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010564:	da31      	bge.n	80105ca <__kernel_rem_pio2f+0x222>
 8010566:	2600      	movs	r6, #0
 8010568:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801056c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010570:	f040 8098 	bne.w	80106a4 <__kernel_rem_pio2f+0x2fc>
 8010574:	1e60      	subs	r0, r4, #1
 8010576:	2200      	movs	r2, #0
 8010578:	4550      	cmp	r0, sl
 801057a:	da4b      	bge.n	8010614 <__kernel_rem_pio2f+0x26c>
 801057c:	2a00      	cmp	r2, #0
 801057e:	d065      	beq.n	801064c <__kernel_rem_pio2f+0x2a4>
 8010580:	3c01      	subs	r4, #1
 8010582:	ab08      	add	r3, sp, #32
 8010584:	3d08      	subs	r5, #8
 8010586:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 801058a:	2b00      	cmp	r3, #0
 801058c:	d0f8      	beq.n	8010580 <__kernel_rem_pio2f+0x1d8>
 801058e:	4628      	mov	r0, r5
 8010590:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8010594:	f7ff fe7c 	bl	8010290 <scalbnf>
 8010598:	1c63      	adds	r3, r4, #1
 801059a:	aa44      	add	r2, sp, #272	@ 0x110
 801059c:	ed9f 7a3f 	vldr	s14, [pc, #252]	@ 801069c <__kernel_rem_pio2f+0x2f4>
 80105a0:	0099      	lsls	r1, r3, #2
 80105a2:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 80105a6:	4623      	mov	r3, r4
 80105a8:	2b00      	cmp	r3, #0
 80105aa:	f280 80a9 	bge.w	8010700 <__kernel_rem_pio2f+0x358>
 80105ae:	4623      	mov	r3, r4
 80105b0:	2b00      	cmp	r3, #0
 80105b2:	f2c0 80c7 	blt.w	8010744 <__kernel_rem_pio2f+0x39c>
 80105b6:	aa44      	add	r2, sp, #272	@ 0x110
 80105b8:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 80105bc:	f8df c0d4 	ldr.w	ip, [pc, #212]	@ 8010694 <__kernel_rem_pio2f+0x2ec>
 80105c0:	eddf 7a37 	vldr	s15, [pc, #220]	@ 80106a0 <__kernel_rem_pio2f+0x2f8>
 80105c4:	2000      	movs	r0, #0
 80105c6:	1ae2      	subs	r2, r4, r3
 80105c8:	e0b1      	b.n	801072e <__kernel_rem_pio2f+0x386>
 80105ca:	2602      	movs	r6, #2
 80105cc:	e78f      	b.n	80104ee <__kernel_rem_pio2f+0x146>
 80105ce:	f852 1b04 	ldr.w	r1, [r2], #4
 80105d2:	b948      	cbnz	r0, 80105e8 <__kernel_rem_pio2f+0x240>
 80105d4:	b121      	cbz	r1, 80105e0 <__kernel_rem_pio2f+0x238>
 80105d6:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 80105da:	f842 1c04 	str.w	r1, [r2, #-4]
 80105de:	2101      	movs	r1, #1
 80105e0:	f10e 0e01 	add.w	lr, lr, #1
 80105e4:	4608      	mov	r0, r1
 80105e6:	e787      	b.n	80104f8 <__kernel_rem_pio2f+0x150>
 80105e8:	f1c1 01ff 	rsb	r1, r1, #255	@ 0xff
 80105ec:	e7f5      	b.n	80105da <__kernel_rem_pio2f+0x232>
 80105ee:	f104 3cff 	add.w	ip, r4, #4294967295
 80105f2:	aa08      	add	r2, sp, #32
 80105f4:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 80105f8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80105fc:	a908      	add	r1, sp, #32
 80105fe:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 8010602:	e781      	b.n	8010508 <__kernel_rem_pio2f+0x160>
 8010604:	f104 3cff 	add.w	ip, r4, #4294967295
 8010608:	aa08      	add	r2, sp, #32
 801060a:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801060e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8010612:	e7f3      	b.n	80105fc <__kernel_rem_pio2f+0x254>
 8010614:	a908      	add	r1, sp, #32
 8010616:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 801061a:	3801      	subs	r0, #1
 801061c:	430a      	orrs	r2, r1
 801061e:	e7ab      	b.n	8010578 <__kernel_rem_pio2f+0x1d0>
 8010620:	3201      	adds	r2, #1
 8010622:	f850 6d04 	ldr.w	r6, [r0, #-4]!
 8010626:	2e00      	cmp	r6, #0
 8010628:	d0fa      	beq.n	8010620 <__kernel_rem_pio2f+0x278>
 801062a:	9905      	ldr	r1, [sp, #20]
 801062c:	f501 71b0 	add.w	r1, r1, #352	@ 0x160
 8010630:	eb0d 0001 	add.w	r0, sp, r1
 8010634:	18e6      	adds	r6, r4, r3
 8010636:	a91c      	add	r1, sp, #112	@ 0x70
 8010638:	f104 0c01 	add.w	ip, r4, #1
 801063c:	384c      	subs	r0, #76	@ 0x4c
 801063e:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8010642:	4422      	add	r2, r4
 8010644:	4562      	cmp	r2, ip
 8010646:	da04      	bge.n	8010652 <__kernel_rem_pio2f+0x2aa>
 8010648:	4614      	mov	r4, r2
 801064a:	e710      	b.n	801046e <__kernel_rem_pio2f+0xc6>
 801064c:	9804      	ldr	r0, [sp, #16]
 801064e:	2201      	movs	r2, #1
 8010650:	e7e7      	b.n	8010622 <__kernel_rem_pio2f+0x27a>
 8010652:	9903      	ldr	r1, [sp, #12]
 8010654:	f8dd e004 	ldr.w	lr, [sp, #4]
 8010658:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801065c:	9105      	str	r1, [sp, #20]
 801065e:	ee07 1a90 	vmov	s15, r1
 8010662:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010666:	2400      	movs	r4, #0
 8010668:	ece6 7a01 	vstmia	r6!, {s15}
 801066c:	eddf 7a0c 	vldr	s15, [pc, #48]	@ 80106a0 <__kernel_rem_pio2f+0x2f8>
 8010670:	46b1      	mov	r9, r6
 8010672:	455c      	cmp	r4, fp
 8010674:	dd04      	ble.n	8010680 <__kernel_rem_pio2f+0x2d8>
 8010676:	ece0 7a01 	vstmia	r0!, {s15}
 801067a:	f10c 0c01 	add.w	ip, ip, #1
 801067e:	e7e1      	b.n	8010644 <__kernel_rem_pio2f+0x29c>
 8010680:	ecfe 6a01 	vldmia	lr!, {s13}
 8010684:	ed39 7a01 	vldmdb	r9!, {s14}
 8010688:	3401      	adds	r4, #1
 801068a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801068e:	e7f0      	b.n	8010672 <__kernel_rem_pio2f+0x2ca>
 8010690:	0801187c 	.word	0x0801187c
 8010694:	08011850 	.word	0x08011850
 8010698:	43800000 	.word	0x43800000
 801069c:	3b800000 	.word	0x3b800000
 80106a0:	00000000 	.word	0x00000000
 80106a4:	9b02      	ldr	r3, [sp, #8]
 80106a6:	eeb0 0a48 	vmov.f32	s0, s16
 80106aa:	eba3 0008 	sub.w	r0, r3, r8
 80106ae:	f7ff fdef 	bl	8010290 <scalbnf>
 80106b2:	ed1f 7a07 	vldr	s14, [pc, #-28]	@ 8010698 <__kernel_rem_pio2f+0x2f0>
 80106b6:	eeb4 0ac7 	vcmpe.f32	s0, s14
 80106ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80106be:	db19      	blt.n	80106f4 <__kernel_rem_pio2f+0x34c>
 80106c0:	ed5f 7a0a 	vldr	s15, [pc, #-40]	@ 801069c <__kernel_rem_pio2f+0x2f4>
 80106c4:	ee60 7a27 	vmul.f32	s15, s0, s15
 80106c8:	aa08      	add	r2, sp, #32
 80106ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106ce:	3508      	adds	r5, #8
 80106d0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80106d4:	eea7 0ac7 	vfms.f32	s0, s15, s14
 80106d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80106dc:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80106e0:	ee10 3a10 	vmov	r3, s0
 80106e4:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80106e8:	ee17 3a90 	vmov	r3, s15
 80106ec:	3401      	adds	r4, #1
 80106ee:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 80106f2:	e74c      	b.n	801058e <__kernel_rem_pio2f+0x1e6>
 80106f4:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 80106f8:	aa08      	add	r2, sp, #32
 80106fa:	ee10 3a10 	vmov	r3, s0
 80106fe:	e7f6      	b.n	80106ee <__kernel_rem_pio2f+0x346>
 8010700:	a808      	add	r0, sp, #32
 8010702:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8010706:	9001      	str	r0, [sp, #4]
 8010708:	ee07 0a90 	vmov	s15, r0
 801070c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8010710:	3b01      	subs	r3, #1
 8010712:	ee67 7a80 	vmul.f32	s15, s15, s0
 8010716:	ee20 0a07 	vmul.f32	s0, s0, s14
 801071a:	ed62 7a01 	vstmdb	r2!, {s15}
 801071e:	e743      	b.n	80105a8 <__kernel_rem_pio2f+0x200>
 8010720:	ecfc 6a01 	vldmia	ip!, {s13}
 8010724:	ecb5 7a01 	vldmia	r5!, {s14}
 8010728:	eee6 7a87 	vfma.f32	s15, s13, s14
 801072c:	3001      	adds	r0, #1
 801072e:	4550      	cmp	r0, sl
 8010730:	dc01      	bgt.n	8010736 <__kernel_rem_pio2f+0x38e>
 8010732:	4290      	cmp	r0, r2
 8010734:	ddf4      	ble.n	8010720 <__kernel_rem_pio2f+0x378>
 8010736:	a858      	add	r0, sp, #352	@ 0x160
 8010738:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 801073c:	ed42 7a28 	vstr	s15, [r2, #-160]	@ 0xffffff60
 8010740:	3b01      	subs	r3, #1
 8010742:	e735      	b.n	80105b0 <__kernel_rem_pio2f+0x208>
 8010744:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010746:	2b02      	cmp	r3, #2
 8010748:	dc09      	bgt.n	801075e <__kernel_rem_pio2f+0x3b6>
 801074a:	2b00      	cmp	r3, #0
 801074c:	dc27      	bgt.n	801079e <__kernel_rem_pio2f+0x3f6>
 801074e:	d040      	beq.n	80107d2 <__kernel_rem_pio2f+0x42a>
 8010750:	f009 0007 	and.w	r0, r9, #7
 8010754:	b059      	add	sp, #356	@ 0x164
 8010756:	ecbd 8b04 	vpop	{d8-d9}
 801075a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801075e:	9b66      	ldr	r3, [sp, #408]	@ 0x198
 8010760:	2b03      	cmp	r3, #3
 8010762:	d1f5      	bne.n	8010750 <__kernel_rem_pio2f+0x3a8>
 8010764:	aa30      	add	r2, sp, #192	@ 0xc0
 8010766:	1f0b      	subs	r3, r1, #4
 8010768:	4413      	add	r3, r2
 801076a:	461a      	mov	r2, r3
 801076c:	4620      	mov	r0, r4
 801076e:	2800      	cmp	r0, #0
 8010770:	dc50      	bgt.n	8010814 <__kernel_rem_pio2f+0x46c>
 8010772:	4622      	mov	r2, r4
 8010774:	2a01      	cmp	r2, #1
 8010776:	dc5d      	bgt.n	8010834 <__kernel_rem_pio2f+0x48c>
 8010778:	ab30      	add	r3, sp, #192	@ 0xc0
 801077a:	ed5f 7a37 	vldr	s15, [pc, #-220]	@ 80106a0 <__kernel_rem_pio2f+0x2f8>
 801077e:	440b      	add	r3, r1
 8010780:	2c01      	cmp	r4, #1
 8010782:	dc67      	bgt.n	8010854 <__kernel_rem_pio2f+0x4ac>
 8010784:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8010788:	ed9d 7a31 	vldr	s14, [sp, #196]	@ 0xc4
 801078c:	2e00      	cmp	r6, #0
 801078e:	d167      	bne.n	8010860 <__kernel_rem_pio2f+0x4b8>
 8010790:	edc7 6a00 	vstr	s13, [r7]
 8010794:	ed87 7a01 	vstr	s14, [r7, #4]
 8010798:	edc7 7a02 	vstr	s15, [r7, #8]
 801079c:	e7d8      	b.n	8010750 <__kernel_rem_pio2f+0x3a8>
 801079e:	ab30      	add	r3, sp, #192	@ 0xc0
 80107a0:	ed1f 7a41 	vldr	s14, [pc, #-260]	@ 80106a0 <__kernel_rem_pio2f+0x2f8>
 80107a4:	440b      	add	r3, r1
 80107a6:	4622      	mov	r2, r4
 80107a8:	2a00      	cmp	r2, #0
 80107aa:	da24      	bge.n	80107f6 <__kernel_rem_pio2f+0x44e>
 80107ac:	b34e      	cbz	r6, 8010802 <__kernel_rem_pio2f+0x45a>
 80107ae:	eef1 7a47 	vneg.f32	s15, s14
 80107b2:	edc7 7a00 	vstr	s15, [r7]
 80107b6:	eddd 7a30 	vldr	s15, [sp, #192]	@ 0xc0
 80107ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80107be:	aa31      	add	r2, sp, #196	@ 0xc4
 80107c0:	2301      	movs	r3, #1
 80107c2:	429c      	cmp	r4, r3
 80107c4:	da20      	bge.n	8010808 <__kernel_rem_pio2f+0x460>
 80107c6:	b10e      	cbz	r6, 80107cc <__kernel_rem_pio2f+0x424>
 80107c8:	eef1 7a67 	vneg.f32	s15, s15
 80107cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80107d0:	e7be      	b.n	8010750 <__kernel_rem_pio2f+0x3a8>
 80107d2:	ab30      	add	r3, sp, #192	@ 0xc0
 80107d4:	ed5f 7a4e 	vldr	s15, [pc, #-312]	@ 80106a0 <__kernel_rem_pio2f+0x2f8>
 80107d8:	440b      	add	r3, r1
 80107da:	2c00      	cmp	r4, #0
 80107dc:	da05      	bge.n	80107ea <__kernel_rem_pio2f+0x442>
 80107de:	b10e      	cbz	r6, 80107e4 <__kernel_rem_pio2f+0x43c>
 80107e0:	eef1 7a67 	vneg.f32	s15, s15
 80107e4:	edc7 7a00 	vstr	s15, [r7]
 80107e8:	e7b2      	b.n	8010750 <__kernel_rem_pio2f+0x3a8>
 80107ea:	ed33 7a01 	vldmdb	r3!, {s14}
 80107ee:	3c01      	subs	r4, #1
 80107f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80107f4:	e7f1      	b.n	80107da <__kernel_rem_pio2f+0x432>
 80107f6:	ed73 7a01 	vldmdb	r3!, {s15}
 80107fa:	3a01      	subs	r2, #1
 80107fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8010800:	e7d2      	b.n	80107a8 <__kernel_rem_pio2f+0x400>
 8010802:	eef0 7a47 	vmov.f32	s15, s14
 8010806:	e7d4      	b.n	80107b2 <__kernel_rem_pio2f+0x40a>
 8010808:	ecb2 7a01 	vldmia	r2!, {s14}
 801080c:	3301      	adds	r3, #1
 801080e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010812:	e7d6      	b.n	80107c2 <__kernel_rem_pio2f+0x41a>
 8010814:	ed72 7a01 	vldmdb	r2!, {s15}
 8010818:	edd2 6a01 	vldr	s13, [r2, #4]
 801081c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010820:	3801      	subs	r0, #1
 8010822:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010826:	ed82 7a00 	vstr	s14, [r2]
 801082a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801082e:	edc2 7a01 	vstr	s15, [r2, #4]
 8010832:	e79c      	b.n	801076e <__kernel_rem_pio2f+0x3c6>
 8010834:	ed73 7a01 	vldmdb	r3!, {s15}
 8010838:	edd3 6a01 	vldr	s13, [r3, #4]
 801083c:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8010840:	3a01      	subs	r2, #1
 8010842:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010846:	ed83 7a00 	vstr	s14, [r3]
 801084a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801084e:	edc3 7a01 	vstr	s15, [r3, #4]
 8010852:	e78f      	b.n	8010774 <__kernel_rem_pio2f+0x3cc>
 8010854:	ed33 7a01 	vldmdb	r3!, {s14}
 8010858:	3c01      	subs	r4, #1
 801085a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801085e:	e78f      	b.n	8010780 <__kernel_rem_pio2f+0x3d8>
 8010860:	eef1 6a66 	vneg.f32	s13, s13
 8010864:	eeb1 7a47 	vneg.f32	s14, s14
 8010868:	edc7 6a00 	vstr	s13, [r7]
 801086c:	ed87 7a01 	vstr	s14, [r7, #4]
 8010870:	eef1 7a67 	vneg.f32	s15, s15
 8010874:	e790      	b.n	8010798 <__kernel_rem_pio2f+0x3f0>
 8010876:	bf00      	nop

08010878 <floorf>:
 8010878:	ee10 3a10 	vmov	r3, s0
 801087c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8010880:	3a7f      	subs	r2, #127	@ 0x7f
 8010882:	2a16      	cmp	r2, #22
 8010884:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 8010888:	dc2b      	bgt.n	80108e2 <floorf+0x6a>
 801088a:	2a00      	cmp	r2, #0
 801088c:	da12      	bge.n	80108b4 <floorf+0x3c>
 801088e:	eddf 7a19 	vldr	s15, [pc, #100]	@ 80108f4 <floorf+0x7c>
 8010892:	ee30 0a27 	vadd.f32	s0, s0, s15
 8010896:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801089a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801089e:	dd06      	ble.n	80108ae <floorf+0x36>
 80108a0:	2b00      	cmp	r3, #0
 80108a2:	da24      	bge.n	80108ee <floorf+0x76>
 80108a4:	2900      	cmp	r1, #0
 80108a6:	4b14      	ldr	r3, [pc, #80]	@ (80108f8 <floorf+0x80>)
 80108a8:	bf08      	it	eq
 80108aa:	f04f 4300 	moveq.w	r3, #2147483648	@ 0x80000000
 80108ae:	ee00 3a10 	vmov	s0, r3
 80108b2:	4770      	bx	lr
 80108b4:	4911      	ldr	r1, [pc, #68]	@ (80108fc <floorf+0x84>)
 80108b6:	4111      	asrs	r1, r2
 80108b8:	420b      	tst	r3, r1
 80108ba:	d0fa      	beq.n	80108b2 <floorf+0x3a>
 80108bc:	eddf 7a0d 	vldr	s15, [pc, #52]	@ 80108f4 <floorf+0x7c>
 80108c0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80108c4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80108c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80108cc:	ddef      	ble.n	80108ae <floorf+0x36>
 80108ce:	2b00      	cmp	r3, #0
 80108d0:	bfbe      	ittt	lt
 80108d2:	f44f 0000 	movlt.w	r0, #8388608	@ 0x800000
 80108d6:	fa40 f202 	asrlt.w	r2, r0, r2
 80108da:	189b      	addlt	r3, r3, r2
 80108dc:	ea23 0301 	bic.w	r3, r3, r1
 80108e0:	e7e5      	b.n	80108ae <floorf+0x36>
 80108e2:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80108e6:	d3e4      	bcc.n	80108b2 <floorf+0x3a>
 80108e8:	ee30 0a00 	vadd.f32	s0, s0, s0
 80108ec:	4770      	bx	lr
 80108ee:	2300      	movs	r3, #0
 80108f0:	e7dd      	b.n	80108ae <floorf+0x36>
 80108f2:	bf00      	nop
 80108f4:	7149f2ca 	.word	0x7149f2ca
 80108f8:	bf800000 	.word	0xbf800000
 80108fc:	007fffff 	.word	0x007fffff

08010900 <_init>:
 8010900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010902:	bf00      	nop
 8010904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010906:	bc08      	pop	{r3}
 8010908:	469e      	mov	lr, r3
 801090a:	4770      	bx	lr

0801090c <_fini>:
 801090c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801090e:	bf00      	nop
 8010910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010912:	bc08      	pop	{r3}
 8010914:	469e      	mov	lr, r3
 8010916:	4770      	bx	lr
